
.pioenvs/bluepill_f103c8/firmware.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .boot_text	00000000 .boot_text
08007400 l    d  .text	00000000 .text
08004f74 l    d  .boot_preinit_array	00000000 .boot_preinit_array
0800a900 l    d  .preinit_array	00000000 .preinit_array
08004f74 l    d  .boot_init_array	00000000 .boot_init_array
0800a900 l    d  .init_array	00000000 .init_array
08004f74 l    d  .boot_fini_array	00000000 .boot_fini_array
0800a914 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .boot_data	00000000 .boot_data
20001000 l    d  .data	00000000 .data
20000168 l    d  .boot_bss	00000000 .boot_bss
20001008 l    d  .bss	00000000 .bss
200047bc l    d  .boot_buf	00000000 .boot_buf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 vector.c
00000000 l    df *ABS*	00000000 baseloader.c
00000000 l    df *ABS*	00000000 timer.cpp
20000458 l     O .boot_bss	00000004 _ZL10alarmCount
2000045c l     O .boot_bss	00000004 _ZL8tickFunc
20000460 l     O .boot_bss	00000004 _ZL9alarmFunc
20000464 l     O .boot_bss	00000004 _ZL9tickCount
20000469 l     O .boot_bss	00000001 _ZZ20platform_start_timerE12timerStarted
00000000 l    df *ABS*	00000000 uartint.cpp
08009270 l     F .text	00000010 _GLOBAL__sub_I__ZN13UARTInterfaceC2Ejj
20002190 l     O .bss	0000006c _ZL13responseQueue
00000000 l    df *ABS*	00000000 reset_handler.c
00000000 l    df *ABS*	00000000 codal_target_hal.cpp
08000b80 l     F .boot_text	0000007c _ZL10timer_tickv
08000bfc l     F .boot_text	0000002c _ZL11timer_alarmv
20000180 l     O .boot_bss	00000001 _ZL11initialised
20000168 l     O .boot_bss	00000004 _ZL11poll_status
2000016c l     O .boot_bss	00000004 _ZL13tick_callback
20000170 l     O .boot_bss	00000004 _ZL14alarm_callback
20000174 l     O .boot_bss	00000004 _ZL16prev_poll_status
20000178 l     O .boot_bss	00000004 _ZL19bootloader_callback
00000000 l    df *ABS*	00000000 asm/CortexContextSwitch.s.o
08000e0c l       .boot_text	00000000 store_context_complete
08000e1e l       .boot_text	00000000 store_stack_complete
08000e12 l       .boot_text	00000000 store_stack
08000e38 l       .boot_text	00000000 restore_stack_complete
08000e2c l       .boot_text	00000000 restore_stack
08000e8c l       .boot_text	00000000 store_stack1
00000000 l    df *ABS*	00000000 desig.c
08004558 l     O .boot_text	00000011 chars.4166
00000000 l    df *ABS*	00000000 rcc.c
08000f68 l     F .boot_text	00000010 rcc_osc_on.part.0
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 pwr_common_all.c
00000000 l    df *ABS*	00000000 exti_common_all.c
00000000 l    df *ABS*	00000000 flash_common_f01.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_standard.c
08001e4c l     F .boot_text	00000092 usb_standard_set_configuration
08001ede l     F .boot_text	00000020 usb_standard_get_configuration
08001efe l     F .boot_text	00000034 usb_standard_get_interface
08001f32 l     F .boot_text	00000018 usb_standard_device_get_status
08001f4a l     F .boot_text	0000002a usb_standard_endpoint_get_status
08001f74 l     F .boot_text	00000010 usb_standard_endpoint_stall
08001f84 l     F .boot_text	00000010 usb_standard_endpoint_unstall
08001f94 l     F .boot_text	00000028 usb_standard_set_address
08001fbc l     F .boot_text	0000004e usb_standard_set_interface
0800200a l     F .boot_text	00000256 usb_standard_get_descriptor
08002260 l     F .boot_text	00000018 usb_standard_interface_get_status
00000000 l    df *ABS*	00000000 st_usbfs_v1.c
08001518 l     F .boot_text	00000030 st_usbfs_v1_usbd_init
00000000 l    df *ABS*	00000000 scb.c
00000000 l    df *ABS*	00000000 st_usbfs_core.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 gpio_common_all.c
00000000 l    df *ABS*	00000000 usart_common_f124.c
00000000 l    df *ABS*	00000000 rcc_common_all.c
00000000 l    df *ABS*	00000000 usb_control.c
08001bbc l     F .boot_text	00000014 stall_transaction
08001bd0 l     F .boot_text	0000003c usb_control_recv_chunk
08001c0c l     F .boot_text	00000044 usb_control_send_chunk
08001c50 l     F .boot_text	00000062 usb_control_request_dispatch
08001cb2 l     F .boot_text	00000042 usb_control_setup_read
00000000 l    df *ABS*	00000000 nvic.c
00000000 l    df *ABS*	00000000 os_event.c
20000232 l     O .boot_bss	0000000e eventList
20000240 l     O .boot_bss	00000001 nEvents
20000054 l     O .boot_data	00000001 lastSignaledEvent
00000000 l    df *ABS*	00000000 os_kernel.c
00000000 l    df *ABS*	00000000 os_msgqueue.c
20000184 l     O .boot_bss	00000020 msgQList
20000241 l     O .boot_bss	00000001 nQueues
00000000 l    df *ABS*	00000000 os_sem.c
20000242 l     O .boot_bss	00000001 nSemaphores
00000000 l    df *ABS*	00000000 os_task.c
20000243 l     O .boot_bss	00000001 nTasks
200001a4 l     O .boot_bss	0000008c task_list
00000000 l    df *ABS*	00000000 os_assert.c
20000230 l     O .boot_bss	00000002 l.4990
00000000 l    df *ABS*	00000000 os_cbk.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 logger.cpp
080026b0 l     F .boot_text	00000054 _ZL12debug_appendPKcj
20000256 l     O .boot_bss	00000001 _ZL10logEnabled
20000257 l     O .boot_bss	00000201 _ZL11debugBuffer
20000244 l     O .boot_bss	00000010 _ZL12output_funcs
20000254 l     O .boot_bss	00000002 _ZL17debugBufferLength
00000000 l    df *ABS*	00000000 bluepill.cpp
20000468 l     O .boot_bss	00000001 _ZL12debugEnabled
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 bootloader.c
2000046c l     O .boot_bss	00000004 baseloader_addr
20000470 l     O .boot_bss	00000004 baseloader_status
20000474 l     O .boot_bss	00000004 byte_count
20000478 l     O .boot_bss	00000004 cycleCount
2000047c l     O .boot_bss	00000004 dest
20000480 l     O .boot_bss	00000004 last_status
20000484 l     O .boot_bss	00000004 msTimer
20000660 l     O .boot_bss	00000001 poll_restart_requested
20000488 l     O .boot_bss	00000004 src
2000048c l     O .boot_bss	00000004 status
20000490 l     O .boot_bss	00000004 tmp_vector_table
20000494 l     O .boot_bss	00000004 usbd_dev
20000058 l     O .boot_data	00000004 flushCount
00000000 l    df *ABS*	00000000 ghostfat.c
20000498 l     O .boot_bss	00000004 lastFlush
2000049c l     O .boot_bss	00000004 ms
2000008c l     O .boot_data	00000001 firstFlush
2000005c l     O .boot_data	00000004 flashAddr
00000000 l    df *ABS*	00000000 target_stm32f103.c
20000661 l     O .boot_bss	00000001 forced_startup_mode
20000662 l     O .boot_bss	00000001 startup_mode
00000000 l    df *ABS*	00000000 usb_conf.c
08003330 l     F .boot_text	00000010 hf2_connected
08003340 l     F .boot_text	00000024 usb_cdc_transmit
08003364 l     F .boot_text	00000010 sof_callback
08003374 l     F .boot_text	0000001c cdc_connected
08003390 l     F .boot_text	00000050 set_aggregate_callback
080036ec l     F .boot_text	0000009c aggregate_callback
20000663 l     O .boot_bss	00000001 cdc_is_connected
200004a0 l     O .boot_bss	00000028 config_callback
200004c8 l     O .boot_bss	00000050 control_callback
20000664 l     O .boot_bss	00000001 hf2_is_connected
20000518 l     O .boot_bss	00000004 last_busy_time
2000051c l     O .boot_bss	00000004 last_frame_time
20000665 l     O .boot_bss	00000019 serial_number
20000560 l     O .boot_bss	00000100 usbd_control_buffer
20000060 l     O .boot_data	00000008 capabilities
20000068 l     O .boot_data	00000024 usb_strings
08004919 l     O .boot_text	00000009 bos_descriptor
08004922 l     O .boot_text	00000008 cdc_iface_assoc
0800492a l     O .boot_text	00000013 cdcacm_functional_descriptors
0800493d l     O .boot_text	0000000f comm_endp
0800494c l     O .boot_text	00000015 comm_iface
08004961 l     O .boot_text	0000000d config
080045e8 l     O .boot_text	00000030 interfaces
0800496e l     O .boot_text	0000001e data_endp
0800498c l     O .boot_text	00000015 data_iface
080049a1 l     O .boot_text	00000012 dev
08004a20 l     O .boot_text	0000001e hf2_endp
08004a3e l     O .boot_text	00000015 hf2_iface
00000000 l    df *ABS*	00000000 webusb.c
08003788 l     F .boot_text	00000028 webusb_set_config
080037b0 l     F .boot_text	0000009c webusb_control_vendor_request
20000524 l     O .boot_bss	00000004 webusb_https_url
00000000 l    df *ABS*	00000000 winusb.c
08003898 l     F .boot_text	00000094 winusb_control_vendor_request
0800392c l     F .boot_text	00000028 winusb_set_config
08003954 l     F .boot_text	00000048 winusb_descriptor_request
2000008d l     O .boot_data	000000b2 msos20_descriptor_set
2000013f l     O .boot_data	00000028 winusb_wcid
08004bb1 l     O .boot_text	00000092 guid
08004cae l     O .boot_text	00000012 winusb_string_descriptor
00000000 l    df *ABS*	00000000 cdc.c
080039f8 l     F .boot_text	0000000c cdcacm_comm_cb
08003a04 l     F .boot_text	00000068 cdcacm_set_config
08003b28 l     F .boot_text	0000004c cdcacm_data_rx_cb
08003a6c l     F .boot_text	00000064 cdcacm_control_request
2000067e l     O .boot_bss	00000001 connected
20000528 l     O .boot_bss	00000004 connected_func
2000067f l     O .boot_bss	00000041 rx_buf
08004d1f l     O .boot_text	00000007 line_coding
00000000 l    df *ABS*	00000000 hf2.c
08003ba0 l     F .boot_text	00000040 hf2_set_config
08003cc8 l     F .boot_text	0000004c hf2_data_tx_cb
08003d14 l     F .boot_text	00000564 hf2_data_rx_cb
08003be0 l     F .boot_text	0000001c assert.part.0
08003bfc l     F .boot_text	000000cc pokeSend
08004484 l     F .boot_text	00000012 send_hf2_response
2000052c l     O .boot_bss	00000004 _usbd_dev
20000530 l     O .boot_bss	00000004 cmdId.6015
200006c0 l     O .boot_bss	00000001 connected
20000534 l     O .boot_bss	00000004 connected_func
200006c1 l     O .boot_bss	00000001 flush_count.6017
20000538 l     O .boot_bss	00000004 new_app_start.6019
2000053c l     O .boot_bss	00000004 new_base_vector.6018
20000540 l     O .boot_bss	00000004 new_baseloader_size.6021
20000544 l     O .boot_bss	00000004 new_bootloader_size.6020
20000548 l     O .boot_bss	00000004 pkt.6050
2000054c l     O .boot_bss	00000004 prevCmdId.6016
20000550 l     O .boot_bss	00000004 remDataToSend
200006c2 l     O .boot_bss	00000001 remDataToSendFlag
20000554 l     O .boot_bss	00000004 remDataToSendLength
200006c3 l     O .boot_bss	00000001 restart_request
200006c4 l     O .boot_bss	00000040 rx_buf
20000558 l     O .boot_bss	00000004 rx_time
20000704 l     O .boot_bss	00000040 tx_buf
08004d32 l     O .boot_text	0000000b bad_packet_message
00000000 l    df *ABS*	00000000 backup.c
00000000 l    df *ABS*	00000000 usb21_standard.c
08004348 l     F .boot_text	00000028 usb21_set_config
08004370 l     F .boot_text	000000cc usb21_standard_get_descriptor
2000055c l     O .boot_bss	00000004 usb21_bos
00000000 l    df *ABS*	00000000 application.cpp
00000000 l    df *ABS*	00000000 main.cpp
080074f8 l     F .text	00000040 _ZL10debug_dumpRN5codal13STM32BluePillEPKc.isra.0
08007538 l     F .text	00000024 _GLOBAL__sub_I_bluepill
00000000 l    df *ABS*	00000000 uart.cpp
0800760c l     F .text	00000010 _GLOBAL__sub_I_serialPort
00000000 l    df *ABS*	00000000 CodalComponent.cpp
00000000 l    df *ABS*	00000000 CodalDmesg.cpp
2000213c l     O .bss	00000004 _ZL14dmesg_flush_fn
00000000 l    df *ABS*	00000000 CodalFiber.cpp
080078bc l     F .text	0000002c _ZL10handle_fobv
20002144 l     O .bss	00000004 _ZN5codalL10messageBusE
20002148 l     O .bss	00000004 _ZN5codalL10sleepQueueE
2000220e l     O .bss	00000001 _ZN5codalL11fiber_flagsE
2000214c l     O .bss	00000004 _ZN5codalL11forkedFiberE
20002150 l     O .bss	00000004 _ZN5codalL8runQueueE
20002154 l     O .bss	00000004 _ZN5codalL9fiberPoolE
20002158 l     O .bss	00000004 _ZN5codalL9idleFiberE
2000215c l     O .bss	00000004 _ZN5codalL9waitQueueE
00000000 l    df *ABS*	00000000 CodalHeapAllocator.cpp
2000220f l     O .bss	00000001 _ZZ13device_mallocE11initialised
00000000 l    df *ABS*	00000000 Serial.cpp
00000000 l    df *ABS*	00000000 Timer.cpp
00000000 l    df *ABS*	00000000 MessageBus.cpp
20001004 l     O .data	00000002 _ZL12userNotifyId
00000000 l    df *ABS*	00000000 Event.cpp
00000000 l    df *ABS*	00000000 ManagedString.cpp
0800822c l     F .text	0000002c _GLOBAL__sub_I__ZN5codal13ManagedString9initEmptyEv
0800a434 l     O .text	00000004 _ZL9emptyData
00000000 l    df *ABS*	00000000 CmPin.cpp
00000000 l    df *ABS*	00000000 CmSerial.cpp
00000000 l    df *ABS*	00000000 CmTimer.cpp
20002178 l     O .bss	00000004 _ZN5codal3_cmL12last_triggerE
2000217c l     O .bss	00000004 _ZN5codal3_cmL14trigger_periodE
00000000 l    df *ABS*	00000000 tasks.cpp
080084d0 l     F .text	00000018 _ZL10flush_taskv
080084e8 l     F .text	0000004c _ZL15restart_handlerN5codal5EventE
08008650 l     F .text	00000014 _GLOBAL__sub_I_restart_callback
20002184 l     O .bss	00000008 _ZL13restart_event
2000218c l     O .bss	00000004 _ZL16flush_task_fibre
20002211 l     O .bss	00000001 _ZL24restart_listener_started
00000000 l    df *ABS*	00000000 STM32BluePill.cpp
00000000 l    df *ABS*	00000000 STM32BluePillIO.cpp
00000000 l    df *ABS*	00000000 CmI2C.cpp
00000000 l    df *ABS*	00000000 CmSPI.cpp
200021fc l     O .bss	00000010 _ZN5codal3_cmL10_instancesE
00000000 l    df *ABS*	00000000 CmPinMap.cpp
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 CodalListener.cpp
00000000 l    df *ABS*	00000000 RefCounted.cpp
08009d1e l     F .text	00000022 _ZL16isReadOnlyInlinePN5codal10RefCountedE
00000000 l    df *ABS*	00000000 RefCountedInit.cpp
00000000 l    df *ABS*	00000000 CodalCompat.cpp
00000000 l    df *ABS*	00000000 MemberFunctionCallback.cpp
080093c4 g     F .text	0000002c pinmap_mode
08007e60 g     F .text	00000034 _ZN5codal5TimerC1Ev
08003014 g     F .boot_text	000000e0 flash_write
080096f8 g     F .text	000001a6 _ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE
08009aee g     F .text	00000012 _ZN5codal10MessageBusD0Ev
08002664 g     F .boot_text	00000010 strcpy
08009428  w    F .text	00000002 _ZN5codal14CodalComponent16periodicCallbackEv
080075cc  w    F .text	00000040 _ZN5codal13STM32BluePillD1Ev
0800232e g     F .boot_text	00000038 st_usbfs_ep_stall_get
08007774 g     F .text	00000038 _ZN5codal14scheduler_tickENS_5EventE
08004f74 g     O .boot_preinit_array	00000004 __boot_preinit_array_start
08001d74 g     F .boot_text	00000082 _usbd_control_out
08000dba g     F .boot_text	00000004 tcb_configure_stack_base
0800a186 g     F .text	0000000c _ZN5codal3_cm3SPI12setFrequencyEm
08000aa4 g     F .boot_text	000000dc reset_handler
08000cfc g     F .boot_text	00000008 fiber_initial_stack_base
00007400 g       *ABS*	00000000 _bootrom_size
20002210 g     O .bss	00000001 heap_count
0800a178 g     F .text	00000002 _ZN13UARTInterfaceC1Ejj
08002e04 g     F .boot_text	00000150 bootloader_start
08007de8 g     F .text	0000005c _ZN5codal6SerialC1ERNS_3PinES2_hht
08001b90 g     F .boot_text	0000000e usbd_ep_write_packet
0800833c  w    F .text	00000014 _ZN5codal3_cm6SerialD1Ev
080032ac g     F .boot_text	00000024 boot_target_set_restart_callback
08001bac g     F .boot_text	00000008 usbd_ep_stall_set
08009e6e g     F .text	0000000e _ZN5codal3_cm3Pin8isOutputEv
0800a540 g     O .text	00000048 PinMap_SPI_MOSI
080095f0 g     F .text	00000014 _ZN5codal8ListenerD2Ev
08000db6 g     F .boot_text	00000004 tcb_configure_sp
080009f0  w    F .boot_text	00000002 usart3_isr
080075cc  w    F .text	00000040 _ZN5codal13STM32BluePillD2Ev
080009f4  w    F .boot_text	00000030 rtc_isr
080009f0 g       .boot_text	00000000 _base_etext
080032d0 g     F .boot_text	00000020 boot_target_manifest_app
0800a4c4 g     O .text	00000018 _ZTVN5codal3_cm5TimerE
08002870 g     F .boot_text	00000030 _Z11debug_printi
08008090 g     F .text	000000a8 _ZN5codal10MessageBusC2Ev
080028bc g     F .boot_text	00000018 _Z13debug_printlni
08009ce8 g     F .text	0000001e _ZN5codal13ManagedStringaSERKS0_
080009f0  w    F .boot_text	00000002 tim7_isr
080013f4 g     F .boot_text	0000000c exti_reset_request
20000848 g     O .boot_bss	00000001 running_tid
080009f0  w    F .boot_text	00000002 adc1_2_isr
08009c5a g     F .text	00000020 _ZN5codal14EventQueueItemC2ENS_5EventE
08007e44 g     F .text	0000001c _ZN5codal6SerialD1Ev
08009c7a g     F .text	0000000e _ZN5codal13ManagedStringD1Ev
0800a4dc g     O .text	0000001c _ZTVN5codal13STM32BluePillE
08000dc2 g     F .boot_text	00000004 get_current_sp
080009f0  w    F .boot_text	00000002 tim1_trg_com_isr
08007e44 g     F .text	0000001c _ZN5codal6SerialD2Ev
0800a182 g     F .text	00000004 _ZN5codal3_cm3I2C12readRegisterEthPhib
08009d7e g     F .text	0000002a _ZN5codal14string_reverseEPc
0800a336 g     F .text	00000042 _ZN5codal3I2C12readRegisterEthPhib
08007744 g     F .text	00000020 _ZN5codal14CodalComponent15removeComponentEv
0800229e g     F .boot_text	00000030 _usbd_standard_request
08009f2a  w    F .text	00000004 _ZN5codal3_cm6Serial13configurePinsERNS_3PinES3_
08002612 g     F .boot_text	00000008 os_tick
08009ee8 g     F .text	00000010 _ZN5codal3_cm3Pin13disableEventsEv
080009f0  w    F .boot_text	00000002 usb_hp_can_tx_isr
08009f1e  w    F .text	00000004 _ZN5codal3_cm6Serial15enableInterruptENS_19SerialInterruptTypeE
080092f8 g     F .text	0000009c _ZN5codal3_cm3SPIC2ERNS0_3PinES3_S3_S3_
080074e0  w    F .text	00000018 _ZN5codal14CodalComponentD2Ev
0800a24a g     F .text	0000001c _ZN5codal3I2C13writeRegisterEthh
20000000 g     O .boot_data	0000001c base_para
0800a2b6 g     F .text	00000064 _ZN5codal3I2C4readEtPhib
080009f0  w    F .boot_text	00000002 tim6_isr
08004f74 g       *ABS*	00000000 _boot_data_loadaddr
08009f22  w    F .text	00000004 _ZN5codal3_cm6Serial16disableInterruptENS_19SerialInterruptTypeE
0800a914 g       .init_array	00000000 _etext
08001a94 g     F .boot_text	00000062 gpio_set_mode
08004f74 g     O .boot_fini_array	00000004 __boot_fini_array_start
08009450 g     F .text	0000002e _ZN5codal11queue_fiberEPNS_5FiberEPS1_
080009f0  w    F .boot_text	00000002 usb_wakeup_isr
080009f0 g     F .boot_text	00000002 blocking_handler
20000849 g     O .boot_bss	00000001 running
080029c0 g     F .boot_text	00000020 led_setup
080009f0  w    F .boot_text	00000002 tim5_isr
08009660 g     F .text	0000004c _ZN5codal6Serial12initialiseRxEv
080081ec g     F .text	00000034 _ZN5codal13ManagedStringC2EPKcs
080028a0 g     F .boot_text	0000001c debug_println
20004bbc g     O .boot_buf	00000442 hf2_buffer
080009f0  w    F .boot_text	00000002 otg_fs_isr
08000d04 g     F .boot_text	00000070 test_codal
08009e5c g     F .text	00000004 _ZN5codal3_cm3Pin14getAnalogValueEv
08009394 g     F .text	00000030 pinmap_peripheral
080009f0  w    F .boot_text	00000002 spi1_isr
08000d98 g     F .boot_text	0000000c target_wait_us
08002710 g     F .boot_text	00000038 logger_add_output
08007d24 g     F .text	0000003c _Z18device_create_heapmm
08001b44 g     F .boot_text	00000004 usbd_register_sof_callback
08009544 g     F .text	00000084 _Z16device_malloc_injR14HeapDefinition
0800399c g     F .boot_text	0000005c winusb_setup
08001044 g     F .boot_text	00000014 rcc_set_pll_multiplication_factor
08009ef8 g     F .text	00000026 _ZN5codal3_cm3Pin7eventOnEi
08002638 g     F .boot_text	0000001c memcpy
080009f0  w    F .boot_text	00000002 exti2_isr
080009f0  w    F .boot_text	00000002 dma1_channel6_isr
20001000 g     O .data	00000004 app_data_test
08007a64  w    F .text	00000044 _ZN5codal17verify_stack_sizeEPNS_5FiberE
080009f2 g     F .boot_text	00000002 null_handler
20000048 g     O .boot_data	00000004 rcc_ahb_frequency
080086dc g     F .text	000000a4 _ZN5codal13STM32BluePillC2Ev
0800a1bc g     F .text	00000054 _ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap
08009df8 g     F .text	00000018 _ZN5codal22MemberFunctionCallback4fireENS_5EventE
08002b74 g     F .boot_text	00000020 poll_restart_callback
08000dca g     F .boot_text	00000008 tcb_configure_args
20002180 g     O .bss	00000004 app_bss_test
08004278 g     F .boot_text	00000080 hf2_setup
080009f0  w    F .boot_text	00000002 can_rx1_isr
0800a914 g       .fini_array	00000000 __fini_array_end
080009f0  w    F .boot_text	00000002 dma1_channel5_isr
0800092c g     F .boot_text	000000c4 baseloader_fetch
0800a210 g     F .text	00000028 _ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_
08001b00 g     F .boot_text	00000008 usart_recv
08008310 g     F .text	0000002c _ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE
08009d74 g     F .text	00000004 _ZN5codal10RefCounted7destroyEv
08007d60  w    F .text	00000048 malloc
080009f0  w    F .boot_text	00000002 dma2_channel5_isr
080095f0 g     F .text	00000014 _ZN5codal8ListenerD1Ev
08004524 g     O .boot_text	00000034 st_usbfs_v1_usb_driver
08004474 g     F .boot_text	0000000a bootloader_set_restart_callback
08001324 g     F .boot_text	00000030 rtc_clear_flag
08000f00 g     F .boot_text	00000020 desig_get_unique_id
080098fe g     F .text	00000066 _ZN5codal5Timer8setEventEmttb
08007a00 g     F .text	00000064 _Z14__create_fibermmmi
08007764 g     F .text	00000010 codal_dmesg_flush
08000d8c g     F .boot_text	0000000c target_set_bootloader_callback
080009f0  w    F .boot_text	00000002 usart1_isr
00000844 g       *ABS*	00000000 _bootbuf_size
08007ab8 g     F .text	0000003c _ZN5codal4idleEv
2000017c g     O .boot_bss	00000004 .hidden __dso_handle
080093f0 g     F .text	0000002c pinmap_cnf
08000dc6 g     F .boot_text	00000004 tcb_get_sp
08002278 g     F .boot_text	00000026 usbd_register_set_config_callback
08009f26  w    F .text	00000004 _ZN5codal3_cm6Serial11setBaudrateEm
080015b0 g     F .boot_text	00000150 st_usbfs_ep_setup
080082a8 g     F .text	00000008 _ZN5codal3_cm3Pin17getAnalogPeriodUsEv
0800a17e g     F .text	00000004 _ZN5codal3_cm3I2C4readEtPhib
080098e2 g     F .text	0000000e _ZN5codal5Timer7getTimeEv
0800950c g     F .text	00000012 _ZN5codal13release_fiberEPv
08007da8 g     F .text	00000040 device_free
08009e3c  w    F .text	00000006 _ZN5codal3Pin8drainPinEv
080009f0  w    F .boot_text	00000002 usage_fault_handler
080009f0  w    F .boot_text	00000002 tim8_trg_com_isr
08008440 g     F .text	00000034 _ZN5codal3_cm5TimerC1Ev
080009f0  w    F .boot_text	00000002 can2_rx0_isr
080028fc g     F .boot_text	00000042 debug_printhex
0800106c g     F .boot_text	00000014 rcc_set_pllxtpre
0800a244 g     F .text	00000006 _ZN5codal3I2C4readENS_15AcknowledgeTypeE
08002494 g     F .boot_text	00000034 os_task_highest_prio_ready_task
080009f0  w    F .boot_text	00000002 tim1_brk_isr
08008590 g     F .text	000000c0 start_background_tasks
08008138 g     F .text	00000084 _ZN5codal10MessageBus7processERNS_5EventEb
0800a178 g     F .text	00000002 _ZN13UARTInterfaceC2Ejj
080074e0  w    F .text	00000018 _ZN5codal14CodalComponentD1Ev
080028d4 g     F .boot_text	00000006 debug_flush
0800384c g     F .boot_text	0000004c webusb_setup
2000220c g     O .bss	00000001 serialPort
0800a238 g     F .text	00000006 _ZN5codal3I2C12setFrequencyEm
08007bfc g     F .text	0000003c _ZN5codal11fiber_sleepEm
08009bca g     F .text	00000016 _ZN5codal10MessageBus4sendENS_5EventE
0800121c g     F .boot_text	00000020 rtc_exit_config_mode
08001030 g     F .boot_text	00000014 rcc_set_sysclk_source
0800a618 g     O .text	0000002c _ZTVN5codal3_cm3I2CE
080009f0  w    F .boot_text	00000002 can2_rx1_isr
08002b6c g     F .boot_text	00000004 _ZdlPv
08001384 g     F .boot_text	00000010 pwr_disable_backup_domain_write_protect
0800839c g     F .text	00000010 _ZN5codal3_cm14alarm_callbackEv
08000000 g       .boot_text	00000000 _boot_text
080009f0  w    F .boot_text	00000002 tim1_cc_isr
08009cb6 g     F .text	00000022 _ZN5codal13ManagedStringC1Ei
08007ea4 g     F .text	00000024 _ZN5codal27system_timer_event_every_usEmtt
08009f2e  w    F .text	00000004 _ZN5codal3_cm6Serial4putcEc
08009e96 g     F .text	00000012 _ZN5codal3_cm3Pin15getAnalogPeriodEv
08002f84 g     F .boot_text	00000090 flash_flush
08001b08 g     F .boot_text	0000001a rcc_periph_clock_enable
08001b5e g     F .boot_text	00000032 _usbd_reset
08002b94 g     F .boot_text	00000030 bootloader_poll
0800a31a g     F .text	0000001c _ZN5codal3I2C5writeEth
08003570 g     F .boot_text	0000004c dump_buffer
080083ac g     F .text	00000020 _ZN5codal3_cm5Timer9triggerInEm
080009f0  w    F .boot_text	00000002 sdio_isr
08001148 g     F .boot_text	00000014 rcc_set_ppre1
08002b54 g     F .boot_text	0000000c platform_alarm_count
08001df6 g     F .boot_text	00000056 _usbd_control_in
080042f8 g     F .boot_text	00000038 backup_write
080009f0  w    F .boot_text	00000002 eth_isr
0800a244 g     F .text	00000006 _ZN5codal3I2C5writeEh
2000004c g     O .boot_data	00000004 rcc_apb1_frequency
08004330 g     F .boot_text	00000018 backup_read
2000220d g     O .bss	00000001 _ZN5codal14CodalComponent13configurationE
080030f4 g     F .boot_text	00000104 boot_target_get_startup_mode
0800115c g     F .boot_text	00000014 rcc_set_hpre
080009f0  w    F .boot_text	00000002 dma1_channel4_isr
080009f0  w    F .boot_text	00000002 tim8_brk_isr
08007e94 g     F .text	00000010 _ZN5codal25system_timer_current_timeEv
08009f32  w    F .text	00000006 _ZN5codal3_cm6Serial4getcEv
080009f0  w    F .boot_text	00000002 dma2_channel4_5_isr
08009c5a g     F .text	00000020 _ZN5codal14EventQueueItemC1ENS_5EventE
08003310 g     F .boot_text	00000020 boot_target_manifest_bootloader
20002140 g     O .bss	00000004 _ZN5codal12currentFiberE
08009a28 g     F .text	00000002 _ZN5codal5TimerD2Ev
08000d80 g     F .boot_text	0000000c target_set_alarm_callback
0800447e g     F .boot_text	00000006 boot_target_get_serial_number
2000216c g     O .bss	00000004 _ZN5codal10EventModel15defaultEventBusE
08007aa8 g     F .text	00000010 _ZN5codal24scheduler_runqueue_emptyEv
0800761c g     F .text	00000058 _Z18component_callbackN5codal5EventE
080034a4 g     F .boot_text	0000002c get_usb_status
20002218 g       .bss	00000000 _ebss
08009c26 g     F .text	0000001c _ZN5codal5EventC1EttNS_15EventLaunchModeE
08002390 g     F .boot_text	00000034 os_init
08001b50 g     F .boot_text	0000000e usbd_ep_setup
080074d8  w    F .text	00000008 _ZN5codal14CodalComponent4initEv
08000ed2 g       .boot_text	00000000 restore_register_context
08001cf4 g     F .boot_text	00000026 usbd_register_control_callback
08009972 g     F .text	00000024 _ZN5codal5Timer4syncEm
20000040 g     O .boot_data	00000004 hal_data_test
080009f0  w    F .boot_text	00000002 pvd_isr
08001b9e g     F .boot_text	0000000e usbd_ep_read_packet
0800941c g     F .text	0000000c _ZN5codal3I2CC2ERNS_3PinES2_
08009c42 g     F .text	00000018 _ZN5codal5EventC1EttmNS_15EventLaunchModeE
08002964 g     F .boot_text	0000004c platform_setup
08009f38  w    F .text	00000012 _ZN5codal3_cm6SerialD0Ev
08007ee4  w    F .text	00000008 _ZN5codal10EventModel6removeEPNS_8ListenerE
08002368 g     F .boot_text	0000000c os_event_init
08008780 g     F .text	00000aee _ZN5codal15STM32BluePillIOC2Ev
080094b2 g     F .text	0000001a _ZN5codal12create_fiberEPFvvES1_
080081ec g     F .text	00000034 _ZN5codal13ManagedStringC1EPKcs
20000520 g     O .boot_bss	00000004 usbd_dev
08009d06 g     F .text	00000018 _ZN5codal13ManagedString6charAtEs
08000da8 g     F .boot_text	00000004 target_disable_irq
080029e0 g     F .boot_text	00000010 led_on
080094fc g     F .text	00000010 _ZN5codal16launch_new_fiberEPFvvES1_
00001000 g       *ABS*	00000000 _bootram_size
08000168 g     F .boot_text	000007c4 baseloader_start
080023c4 g     F .boot_text	0000000c os_running
2000084a g     O .boot_bss	00000001 last_running_task
08008018 g     F .text	00000078 _ZN5codal10MessageBusD2Ev
080009f2  w    F .boot_text	00000002 sv_call_handler
20001008 g     O .bss	00001044 bluepill
080009f0  w    F .boot_text	00000002 rcc_isr
08009964 g     F .text	0000000e _ZN5codal5Timer12eventEveryUsEmtt
20002170 g     O .bss	00000004 _ZN5codal13ManagedString11EmptyStringE
08000000 g     O .boot_text	00000150 vector_table
08000f20 g     F .boot_text	00000048 desig_get_unique_id_as_string
08000ea2 g       .boot_text	00000000 save_register_context
08003508 g     F .boot_text	0000004c aggregate_register_callback
0800a394 g     O .text	00000038 _ZTVN5codal6SerialE
08007400 g     F .text	000000c4 application_start
080009f0  w    F .boot_text	00000002 flash_isr
0800a914 g       *ABS*	00000000 _data_loadaddr
080079a4 g     F .text	0000005c _ZN5codal19fiber_wake_on_eventEtt
20005000 g       .boot_buf	00000000 end
080009f0  w    F .boot_text	00000002 uart4_isr
0800a172 g     F .text	00000002 _ZN5codal13STM32BluePill16periodicCallbackEv
080012ac g     F .boot_text	0000003c rtc_interrupt_enable
08008664 g     F .text	00000078 _ZN5codal13STM32BluePill4initEv
080082b0 g     F .text	00000060 _ZN5codal3_cm3Pin15setDigitalValueEi
08000a24  w    F .boot_text	00000030 rtc_alarm_isr
080009f0  w    F .boot_text	00000002 exti15_10_isr
08004f74 g     O .boot_init_array	00000004 __boot_init_array_end
080078e8 g     F .text	00000010 _ZN5codal23fiber_scheduler_runningEv
08009996 g     F .text	00000092 _ZN5codal5Timer7triggerEv
080032f0 g     F .boot_text	00000020 boot_target_manifest_baseloader
08009e42 g     F .text	00000004 _ZN5codal3_cm3Pin15getDigitalValueEv
08001058 g     F .boot_text	00000014 rcc_set_pll_source
08000dbe g     F .boot_text	00000004 tcb_get_stack_base
08009fcc g     F .text	000001a6 _ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE
08009c14 g     F .text	00000012 _ZN5codal5EventC2Ev
0800a174 g     F .text	00000004 _ZN5codal13STM32BluePill12idleCallbackEv
08003ad0 g     F .boot_text	00000058 cdcadm_transmit
080023f4 g     F .boot_text	00000054 os_msgQ_tick
08000dac g     F .boot_text	00000006 tcb_allocate
0800a3cc g     O .text	00000018 _ZTVN5codal5TimerE
080098d4 g     F .text	0000000e _ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE
0800a644 g     O .text	0000001c _ZTVN5codal3_cm3SPIE
0800a588 g     O .text	00000048 PinMap_SPI_NSS
080009f0  w    F .boot_text	00000002 hard_fault_handler
0800a266 g     F .text	00000050 _ZN5codal3I2C5writeEtPhib
080009f0  w    F .boot_text	00000002 exti1_isr
08009ea8 g     F .text	00000006 _ZN5codal3_cm3Pin7setPullENS_8PullModeE
08008474 g     F .text	0000005c _ZN5codal3_cm5Timer4initEv
080024c8 g     F .boot_text	00000088 os_task_tick
08003554 g     F .boot_text	0000001c usb_set_serial_number
080009f0  w    F .boot_text	00000002 i2c1_ev_isr
08007c38 g     F .text	0000006c _ZN5codal13release_fiberEv
08001b22 g     F .boot_text	00000022 rcc_periph_reset_pulse
0800a5d0 g     O .text	00000048 PinMap_SPI_SCK
08001880 g     F .boot_text	0000008c st_usbfs_ep_write_packet
08001700 g     F .boot_text	00000044 st_usbfs_endpoints_reset
080009f0  w    F .boot_text	00000002 dma2_channel1_isr
08009a3a  w    F .text	00000030 _ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE
08007edc  w    F .text	00000008 _ZN5codal10EventModel3addEPNS_8ListenerE
08007d60 g     F .text	00000048 device_malloc
08002704 g     F .boot_text	0000000c enable_log
080009f2  w    F .boot_text	00000002 pend_sv_handler
08002b60 g     F .boot_text	00000008 __cxa_pure_virtual
080077ac g     F .text	000000c0 _ZN5codal15scheduler_eventENS_5EventE
08001354 g     F .boot_text	00000030 rtc_check_flag
08009fa8 g     F .text	00000024 _ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE
0800a4f8 g     O .text	00000048 PinMap_SPI_MISO
080009f0  w    F .boot_text	00000002 spi2_isr
08008258 g     F .text	0000001c _ZN5codal3_cm3Pin14setAnalogValueEi
08000c28 g     F .boot_text	00000030 target_init
200008a8 g       .boot_bss	00000000 boot_end
080078f8 g     F .text	000000ac _ZN5codal14scheduler_initERNS_10EventModelE
080098f0 g     F .text	0000000e _ZN5codal5Timer9getTimeUsEv
080025b4 g     F .boot_text	00000034 os_task_run
08001120 g     F .boot_text	00000014 rcc_set_adcpre
0800a17e g     F .text	00000004 _ZN5codal3_cm3I2C5writeEtPhib
08001bb4 g     F .boot_text	00000008 usbd_ep_stall_get
08009d52 g     F .text	00000022 _ZN5codal10RefCounted4decrEv
080009f0  w    F .boot_text	00000002 tim8_up_isr
08002684 g     F .boot_text	0000002a strncpy
08002448 g     F .boot_text	0000000c os_sem_init
080081bc g     F .text	00000010 _ZN5codal19allocateNotifyEventEv
0800943e  w    F .text	00000012 _ZN5codal13STM32BluePillD0Ev
0800947e g     F .text	00000034 _ZN5codal13dequeue_fiberEPNS_5FiberE
080009f0  w    F .boot_text	00000002 dma2_channel2_isr
08001400 g     F .boot_text	00000014 flash_set_ws
08004f74 g     O .boot_fini_array	00000004 __boot_fini_array_end
08009c7a g     F .text	0000000e _ZN5codal13ManagedStringD2Ev
08001090 g     F .boot_text	00000090 rcc_set_rtc_clock_source
08001568 g     F .boot_text	00000048 st_usbfs_set_ep_rx_bufsize
08008350 g     F .text	0000004c _ZN5codal3_cm6SerialC2ERNS0_3PinES3_hh
080035bc g     F .boot_text	00000130 dump_usb_request
0800a378  w    O .text	0000001c _ZTVN5codal14CodalComponentE
08004f74 g       .boot_init_array	00000000 _boot_etext
0800261a g     F .boot_text	0000001e memcmp
080096ac g     F .text	00000026 _ZN5codal6Serial12circularCopyEPhhS1_tt
08001d1a g     F .boot_text	0000005a _usbd_control_setup
08009e88 g     F .text	0000000e _ZN5codal3_cm3Pin8isAnalogEv
08001134 g     F .boot_text	00000014 rcc_set_ppre2
080009f2  w    F .boot_text	00000002 debug_monitor_handler
080009f0  w    F .boot_text	00000002 exti3_isr
080009f0  w    F .boot_text	00000002 adc3_isr
0800942c  w    F .text	00000012 _ZN5codal14CodalComponentD0Ev
08000e5e g       .boot_text	00000000 save_context
080009f0  w    F .boot_text	00000002 tim3_isr
08000a54  w    F .boot_text	00000050 usart2_isr
08001548 g     F .boot_text	00000010 scb_reset_system
08000cdc g     F .boot_text	00000020 target_panic
080098b2 g     F .text	00000022 _ZN5codal5Timer13getTimerEventEv
080028da g     F .boot_text	0000001a debug_print
080009f0  w    F .boot_text	00000002 usb_lp_can_rx0_isr
08007400 g       .text	00000000 _text
08000ddc g       .boot_text	00000000 swap_context
200047bc g     O .boot_buf	00000400 flashBuf
2000001c g     O .boot_data	00000024 base_tmp
08002374 g     F .boot_text	0000000c os_signal_event
0800a914 g       .fini_array	00000000 __fini_array_start
080009f0  w    F .boot_text	00000002 i2c2_er_isr
08002610 g     F .boot_text	00000002 os_cbkSleep
08001828 g     F .boot_text	00000058 st_usbfs_ep_nak_set
08008220 g     F .text	0000000c _ZN5codal13ManagedStringC1Ev
08002654 g     F .boot_text	00000010 memset
20002168 g     O .bss	00000004 _ZN5codal12system_timerE
080074c4 g     F .text	00000014 main
080094cc g     F .text	0000001e _ZN5codal12create_fiberEPFvPvES0_S2_
08001414 g     F .boot_text	00000050 usbd_init
2000204c g     O .bss	000000f0 _ZN5codal14CodalComponent10componentsE
0800941c g     F .text	0000000c _ZN5codal3I2CC1ERNS_3PinES2_
080009f0  w    F .boot_text	00000002 i2c2_ev_isr
08002380 g     F .boot_text	00000010 os_event_set_signaling_tid
0800755c g     F .text	00000070 _Z10Blink_mainRN5codal13STM32BluePillE
080009f0  w    F .boot_text	00000002 uart5_isr
20002160 g     O .bss	00000008 heap
08002b24 g     F .boot_text	00000030 platform_set_alarm
2000084b g     O .boot_bss	0000005b hf2_buffer_mini
0800a1a4 g     F .text	00000018 _ZN5codal3_cm3SPI7setModeEii
080009f2  w    F .boot_text	00000002 sys_tick_handler
0800a3e4  w    O .text	00000014 _ZTVN5codal10EventModelE
080025e8 g     F .boot_text	00000028 os_on_assert
08008018 g     F .text	00000078 _ZN5codal10MessageBusD1Ev
0800a914 g       .init_array	00000000 __init_array_end
080009f0  w    F .boot_text	00000002 fsmc_isr
080009f0  w    F .boot_text	00000002 dma1_channel1_isr
080009f0  w    F .boot_text	00000002 exti4_isr
08008440 g     F .text	00000034 _ZN5codal3_cm5TimerC2Ev
0800a438 g     O .text	00000054 _ZTVN5codal3_cm3PinE
20000044 g     O .boot_data	00000004 codal_heap_start
0800a192 g     F .text	0000000e _ZN5codal3_cm3SPI5writeEi
0800833c  w    F .text	00000014 _ZN5codal3_cm6SerialD2Ev
08007e60 g     F .text	00000034 _ZN5codal5TimerC2Ev
080094ea g     F .text	00000012 _ZN5codal20fiber_wait_for_eventEtt
08000c58 g     F .boot_text	00000010 target_wait_for_event
080095c8 g     F .text	00000028 _ZN5codal8ListenerC2EttPFvNS_5EventEEt
0800443c g     F .boot_text	00000038 usb21_setup
08007de8 g     F .text	0000005c _ZN5codal6SerialC2ERNS_3PinES2_hht
08000f78 g     F .boot_text	00000064 rcc_wait_for_osc_ready
080027d8 g     F .boot_text	0000001c debug_force_flush
08009ecc g     F .text	00000012 _ZN5codal3_cm3Pin17setAnalogPeriodUsEi
080027f4 g     F .boot_text	0000007c _Z11debug_printj
0800a17a g     F .text	00000004 _ZN5codal3_cm3I2C12setFrequencyEm
08008090 g     F .text	000000a8 _ZN5codal10MessageBusC1Ev
08007eec g     F .text	00000070 _ZN5codal10MessageBus6removeEPNS_8ListenerE
080013e0 g     F .boot_text	00000014 exti_enable_request
080013a4 g     F .boot_text	0000003c exti_set_trigger
080009f0  w    F .boot_text	00000002 mem_manage_handler
08008534 g     F .text	0000005c restart_callback
08009e60 g     F .text	0000000e _ZN5codal3_cm3Pin7isInputEv
08009e7c g     F .text	0000000c _ZN5codal3_cm3Pin9isDigitalEv
20000050 g     O .boot_data	00000004 rcc_apb2_frequency
08009c14 g     F .text	00000012 _ZN5codal5EventC1Ev
0800123c g     F .boot_text	00000020 rtc_set_alarm_time
08001b48 g     F .boot_text	00000008 usbd_poll
0800a23e g     F .text	00000006 _ZN5codal3I2C4stopEv
08000dd2 g     F .boot_text	00000002 _fini
08009c88 g     F .text	0000002e _ZN5codal13ManagedString10initStringEPKci
08000c68 g     F .boot_text	00000074 target_wait
080009f0  w    F .boot_text	00000002 can2_tx_isr
08009280 g     F .text	0000001c _ZN5codal3_cm3I2CC1ERNS_3PinES3_
08007ca4 g     F .text	00000080 _ZN5codal6invokeEPFvPvES0_
080009f0  w    F .boot_text	00000002 exti9_5_isr
080029f0 g     F .boot_text	00000010 led_off
08009e30  w    F .text	00000006 _ZN5codal3Pin15setServoPulseUsEm
080009f0  w    F .boot_text	00000002 dma2_channel3_isr
08009d40 g     F .text	00000012 _ZN5codal10RefCounted4incrEv
08001080 g     F .boot_text	00000010 rcc_enable_rtc_clock
08009a6a g     F .text	0000007c _Z14async_callbackPv
080014ac g     F .boot_text	00000030 _usbd_standard_request_interface
080014dc g     F .boot_text	0000003c _usbd_standard_request_endpoint
0800942a  w    F .text	00000002 _ZN5codal14CodalComponent12idleCallbackEv
08002550 g     F .boot_text	00000064 os_task_signal_event
0800a900 g       .preinit_array	00000000 __preinit_array_end
08002314 g     F .boot_text	0000001a nvic_enable_irq
08002a00 g     F .boot_text	00000010 led_wait
08000dd8 g     F .boot_text	00000004 target_enable_debug
08008780 g     F .text	00000aee _ZN5codal15STM32BluePillIOC1Ev
080009f0  w    F .boot_text	00000002 dma1_channel7_isr
08003280 g     F .boot_text	0000002c boot_target_usb_init
08002a10 g     F .boot_text	00000114 platform_start_timer
080095c8 g     F .text	00000028 _ZN5codal8ListenerC1EttPFvNS_5EventEEt
08003b74 g     F .boot_text	0000002c cdc_setup
080009f0  w    F .boot_text	00000002 tim1_up_isr
20001000 g       .data	00000000 _data
0800125c g     F .boot_text	00000020 rtc_set_prescale_val
08002f54 g     F .boot_text	00000030 base_flash_program_array
080083f8 g     F .text	00000048 _ZN5codal3_cm5Timer11syncRequestEv
08009e46 g     F .text	00000016 _ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE
20002174 g     O .bss	00000004 _ZN5codal3_cm5Timer8instanceE
08009280 g     F .text	0000001c _ZN5codal3_cm3I2CC2ERNS_3PinES3_
08001170 g     F .boot_text	0000008c rcc_clock_setup_in_hse_8mhz_out_72mhz
08009d78 g     F .text	00000006 _ZN5codal10RefCounted4initEv
080083cc g     F .text	0000002c _ZN5codal3_cm13tick_callbackEv
08009cd8 g     F .text	00000010 _ZN5codal13ManagedStringC2ERKS0_
08008220 g     F .text	0000000c _ZN5codal13ManagedStringC2Ev
08009e10 g     F .text	00000020 _ZN5codal22MemberFunctionCallbackeqERKS0_
0800127c g     F .boot_text	00000014 rtc_get_counter_val
08009e36  w    F .text	00000006 _ZN5codal3Pin17setAnalogPeriodUsEm
08009ede g     F .text	0000000a _ZN5codal3_cm3Pin15setAnalogPeriodEi
080009f0  w    F .boot_text	00000002 can2_sce_isr
08001394 g     F .boot_text	00000010 pwr_enable_backup_domain_write_protect
080009f0  w    F .boot_text	00000002 tim4_isr
0800a660 g     O .text	0000002c _ZTVN5codal3I2CE
08009b08 g     F .text	00000022 _ZN5codal10MessageBus12dequeueEventEv
08001744 g     F .boot_text	000000e4 st_usbfs_ep_stall_set
08009b2a g     F .text	00000042 _ZN5codal10MessageBus21deleteMarkedListenersEv
080033e0 g     F .boot_text	000000a8 usb_setup
200008a8 g       .boot_bss	00000000 _boot_ebss
08008310 g     F .text	0000002c _ZN5codal3_cm3PinC2EhmmtNS_13PinCapabilityE
08007674  w    F .text	00000060 _ZN5codal10EventModel6listenEiiPFvNS_5EventEEt
20001008 g       .data	00000000 _edata
0800951e g     F .text	0000001a _ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_
08007f5c g     F .text	000000bc _ZN5codal10MessageBus3addEPNS_8ListenerE
0800a48c g     O .text	00000038 _ZTVN5codal3_cm6SerialE
080009f0  w    F .boot_text	00000002 dma1_channel2_isr
08009cd8 g     F .text	00000010 _ZN5codal13ManagedStringC1ERKS0_
080009f0  w    F .boot_text	00000002 i2c1_er_isr
08009c42 g     F .text	00000018 _ZN5codal5EventC2EttmNS_15EventLaunchModeE
08001464 g     F .boot_text	00000048 _usbd_standard_request_device
0800786c g     F .text	00000050 _Z15getFiberContextv
08000da4 g     F .boot_text	00000004 target_enable_irq
0800989e g     F .text	0000000a _ZN5codal5Timer17disableInterruptsEv
080009f0  w    F .boot_text	00000002 can_sce_isr
0800a1a0 g     F .text	00000004 _ZN5codal3_cm3SPI8transferEPKhmPhm
080009f2  w    F .boot_text	00000002 nmi_handler
080012e8 g     F .boot_text	0000003c rtc_interrupt_disable
08002bc4 g     F .boot_text	00000240 prepare_baseloader
08004f74 g     O .boot_preinit_array	00000004 __boot_preinit_array_end
08002748 g     F .boot_text	00000090 _Z20debug_flush_internalb
08002b68 g     F .boot_text	00000004 _Znwj
20000840 g     O .boot_bss	00000008 st_usbfs_force_nak
0800a3f8 g     O .text	0000003c _ZTVN5codal10MessageBusE
20000000 g       .boot_data	00000000 _boot_data
08009538 g     F .text	0000000c _ZN5codal9idle_taskEv
08009b00 g     F .text	00000008 _ZThn8_N5codal10MessageBusD0Ev
080009f0  w    F .boot_text	00000002 tim8_cc_isr
0800929c g     F .text	0000005c _ZN5codal3_cm3SPI4initEv
080086dc g     F .text	000000a4 _ZN5codal13STM32BluePillC1Ev
08000fdc g     F .boot_text	00000054 rcc_osc_on
200047bc g       .boot_buf	00000000 _boot_stack
08009a2a g     F .text	00000010 _ZN5codal10MessageBus9elementAtEi
080019c4 g     F .boot_text	000000d0 st_usbfs_poll
08009ae6 g     F .text	00000008 _ZThn8_N5codal10MessageBusD1Ev
08004b64 g     O .boot_text	00000018 webusb_platform_capability_descriptor
08007af4 g     F .text	00000108 _ZN5codal8scheduleEv
08004f74 g     O .boot_init_array	00000004 __boot_init_array_start
08009f82 g     F .text	00000026 _ZN5codal3_cm6Serial12circularCopyEPhhS2_tt
08008274 g     F .text	0000002c _ZN5codal3_cm3Pin13setServoValueEiii
08003210 g     F .boot_text	00000070 boot_target_gpio_setup
20000744 g     O .boot_bss	00000004 hal_bss_test
080009f0  w    F .boot_text	00000002 tamper_isr
0800a900 g       .init_array	00000000 __init_array_start
08001afa g     F .boot_text	00000006 gpio_clear
080034d0 g     F .boot_text	00000038 aggregate_register_config_callback
080076d4 g     F .text	00000070 _ZN5codal14CodalComponent12addComponentEv
080009f0  w    F .boot_text	00000002 eth_wkup_isr
080029b0 g     F .boot_text	00000010 enable_debug
080022ce g     F .boot_text	0000001c st_usbfs_copy_to_pm
08009be0 g     F .text	00000034 _ZN5codal10MessageBus4idleENS_5EventE
08009c26 g     F .text	0000001c _ZN5codal5EventC2EttNS_15EventLaunchModeE
08007ec8  w    F .text	00000014 _ZN5codal10EventModel4sendENS_5EventE
08002454 g     F .boot_text	00000040 os_task_init
08009b6c g     F .text	0000005e _ZN5codal10MessageBus10queueEventERNS_5EventE
080022ea g     F .boot_text	0000002a st_usbfs_copy_from_pm
080031f8 g     F .boot_text	00000018 boot_target_set_led
08002674 g     F .boot_text	00000010 strlen
0800293e g     F .boot_text	00000024 debug_printhex_unsigned
08000db2 g     F .boot_text	00000004 tcb_configure_lr
20000168 g       .boot_data	00000000 _boot_edata
20005000 g       .boot_buf	00000000 _stack
20005000 g       .boot_buf	00000000 _eboot_buf
080081cc g     F .text	00000020 _ZN5codal5Event4fireEv
08001af6 g     F .boot_text	00000004 gpio_set
08009eae g     F .text	0000001e _ZN5codal3_cm3Pin5setupEhh
08009604 g     F .text	0000005c _ZN5codal8Listener5queueENS_5EventE
080009f0  w    F .boot_text	00000002 bus_fault_handler
080009f0  w    F .boot_text	00000002 wwdg_isr
080009f0  w    F .boot_text	00000002 dma1_channel3_isr
080098a8 g     F .text	0000000a _ZN5codal5Timer16enableInterruptsEv
08009da8 g     F .text	00000050 _ZN5codal4itoaEiPc
08001290 g     F .boot_text	0000001c rtc_set_counter_val
20000748 g     O .boot_bss	000000f8 st_usbfs_dev
08009a28 g     F .text	00000002 _ZN5codal5TimerD1Ev
08009f4a g     F .text	00000038 _ZN5codal3_cm6Serial12initialiseRxEv
08009cb6 g     F .text	00000022 _ZN5codal13ManagedStringC2Ei
080023d0 g     F .boot_text	00000024 os_msgQ_init
0800a900 g       .preinit_array	00000000 __preinit_array_start
0800190c g     F .boot_text	000000b8 st_usbfs_ep_read_packet
080009f0  w    F .boot_text	00000002 spi3_isr
20002214 g     O .bss	00000004 debug_base_result
080092f8 g     F .text	0000009c _ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_
08000dd4 g     F .boot_text	00000004 __aeabi_atexit
080028f4 g     F .boot_text	00000004 debug_print_int
080047aa g     O .boot_text	00000055 infoUf2File
08000150 g     O .boot_text	00000018 base_vector_table
08002b70 g     F .boot_text	00000004 millis
08008350 g     F .text	0000004c _ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh
080082a0 g     F .text	00000008 _ZN5codal3_cm3Pin9isTouchedEv
08000d74 g     F .boot_text	0000000c target_set_tick_callback
08003488 g     F .boot_text	0000001c set_usb_busy
080009f0  w    F .boot_text	00000002 tim2_isr
080028f8 g     F .boot_text	00000004 debug_print_unsigned
08004c43 g     O .boot_text	0000001c microsoft_platform_capability_descriptor
08007da8  w    F .text	00000040 free
080011fc g     F .boot_text	00000020 rtc_enter_config_mode
080009f0  w    F .boot_text	00000002 exti0_isr
08001558 g     F .boot_text	00000010 st_usbfs_set_address
0800a23e g     F .text	00000006 _ZN5codal3I2C5startEv
080096d2 g     F .text	00000026 _ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE



Disassembly of section .boot_text:

08000000 <vector_table>:
 8000000:	00 50 00 20 a5 0a 00 08 f3 09 00 08 f1 09 00 08     .P. ............
 8000010:	f1 09 00 08 f1 09 00 08 f1 09 00 08 00 00 00 00     ................
	...
 800002c:	f3 09 00 08 f3 09 00 08 00 00 00 00 f3 09 00 08     ................
 800003c:	f3 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 800004c:	f5 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 800005c:	f1 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 800006c:	f1 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 800007c:	f1 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 800008c:	f1 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 800009c:	f1 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 80000ac:	f1 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 80000bc:	f1 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 80000cc:	f1 09 00 08 f1 09 00 08 f1 09 00 08 55 0a 00 08     ............U...
 80000dc:	f1 09 00 08 f1 09 00 08 25 0a 00 08 f1 09 00 08     ........%.......
 80000ec:	f1 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 80000fc:	f1 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 800010c:	f1 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 800011c:	f1 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 800012c:	f1 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 800013c:	f1 09 00 08 f1 09 00 08 f1 09 00 08 f1 09 00 08     ................
 800014c:	f1 09 00 08                                         ....

08000150 <base_vector_table>:
 8000150:	69 19 05 22 01 00 01 00 69 01 00 08 f0 09 00 08     i.."....i.......
 8000160:	01 74 00 08 22 05 69 19                             .t..".i.

08000168 <baseloader_start>:
	8000170:	fa22 fc05 	lsr.w	ip, r2, r5
		dest = (uint16_t *) dest0;
	8000174:	4aa9      	ldr	r2, [pc, #676]	; (800041c <baseloader_start+0x2b4>)  */

//  This must be the first function in the file.  Macros appearing before the function are OK.
void baseloader_start(void) {
 8000168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//  uint32_t byte_count;	//  Byte size of new Bootloader.
	//  uint32_t restart;  		//  Set to 1 if we should restart the device after copying Bootloader.
	//  int result;				//  Number of bytes copied, or negative for error.
	//  uint32_t fail;  		//  Address that caused the Baseloader to fail.

	base_tmp.dest_hw = (uint16_t *) base_para.dest;
 800016c:	4bb9      	ldr	r3, [pc, #740]	; (8000454 <baseloader_start+0x2ec>)
 800016e:	49ba      	ldr	r1, [pc, #744]	; (8000458 <baseloader_start+0x2f0>)
 8000170:	681c      	ldr	r4, [r3, #0]
	base_tmp.src_hw  = (uint16_t *) base_para.src;
	base_tmp.half_word_count = base_para.byte_count / 2;
	base_para.result = 0;
	base_para.fail = 0;
	base_tmp.bytes_flashed = 0;
    base_tmp.verified = true; base_tmp.erase_start = NULL; base_tmp.erase_end = NULL;
 8000172:	2601      	movs	r6, #1
	base_tmp.dest_hw = (uint16_t *) base_para.dest;
 8000174:	600c      	str	r4, [r1, #0]
	base_tmp.src_hw  = (uint16_t *) base_para.src;
 8000176:	685d      	ldr	r5, [r3, #4]
    base_tmp.flash_end = base_get_flash_end();  //  Remember the bounds of erased data in the current page

	//  Validate dest, src, byte_count before flashing.
    //  TODO: Support other memory sizes.
	if ((uint32_t) base_para.dest < 0x08000000) {  //  Dest ROM address too low.
 8000178:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
	base_tmp.src_hw  = (uint16_t *) base_para.src;
 800017c:	604d      	str	r5, [r1, #4]
	base_tmp.half_word_count = base_para.byte_count / 2;
 800017e:	6898      	ldr	r0, [r3, #8]
    base_tmp.verified = true; base_tmp.erase_start = NULL; base_tmp.erase_end = NULL;
 8000180:	740e      	strb	r6, [r1, #16]
	base_tmp.half_word_count = base_para.byte_count / 2;
 8000182:	ea4f 0250 	mov.w	r2, r0, lsr #1
 8000186:	608a      	str	r2, [r1, #8]
	base_para.result = 0;
 8000188:	f04f 0200 	mov.w	r2, #0
 800018c:	751a      	strb	r2, [r3, #20]
 800018e:	755a      	strb	r2, [r3, #21]
 8000190:	759a      	strb	r2, [r3, #22]
 8000192:	75da      	strb	r2, [r3, #23]
	base_para.fail = 0;
 8000194:	761a      	strb	r2, [r3, #24]
 8000196:	765a      	strb	r2, [r3, #25]
 8000198:	769a      	strb	r2, [r3, #26]
 800019a:	76da      	strb	r2, [r3, #27]
	base_tmp.bytes_flashed = 0;
 800019c:	730a      	strb	r2, [r1, #12]
 800019e:	734a      	strb	r2, [r1, #13]
 80001a0:	738a      	strb	r2, [r1, #14]
 80001a2:	73ca      	strb	r2, [r1, #15]
    base_tmp.verified = true; base_tmp.erase_start = NULL; base_tmp.erase_end = NULL;
 80001a4:	744a      	strb	r2, [r1, #17]
 80001a6:	748a      	strb	r2, [r1, #18]
 80001a8:	74ca      	strb	r2, [r1, #19]
 80001aa:	750a      	strb	r2, [r1, #20]
 80001ac:	754a      	strb	r2, [r1, #21]
 80001ae:	758a      	strb	r2, [r1, #22]
 80001b0:	75ca      	strb	r2, [r1, #23]
 80001b2:	760a      	strb	r2, [r1, #24]
 80001b4:	764a      	strb	r2, [r1, #25]
 80001b6:	768a      	strb	r2, [r1, #26]
 80001b8:	76ca      	strb	r2, [r1, #27]
    base_tmp.flash_end = base_get_flash_end();  //  Remember the bounds of erased data in the current page
 80001ba:	770a      	strb	r2, [r1, #28]
 80001bc:	774a      	strb	r2, [r1, #29]
 80001be:	f04f 0208 	mov.w	r2, #8
void baseloader_start(void) {
 80001c2:	b089      	sub	sp, #36	; 0x24
    base_tmp.flash_end = base_get_flash_end();  //  Remember the bounds of erased data in the current page
 80001c4:	77ca      	strb	r2, [r1, #31]
 80001c6:	778e      	strb	r6, [r1, #30]
 80001c8:	461a      	mov	r2, r3
	if ((uint32_t) base_para.dest < 0x08000000) {  //  Dest ROM address too low.
 80001ca:	d20b      	bcs.n	80001e4 <baseloader_start+0x7c>
		base_para.result = -2;
 80001cc:	f06f 0201 	mvn.w	r2, #1
		base_para.fail = (uint32_t) base_para.dest;
		return;
	}
	if (((uint32_t) base_para.dest) + base_para.byte_count > 0x08010000) {  //  Dest ROM address too high.
		base_para.result = -3;
 80001d0:	751a      	strb	r2, [r3, #20]
 80001d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		base_para.fail = ((uint32_t) base_para.dest) + base_para.byte_count;
 80001d6:	619c      	str	r4, [r3, #24]
		base_para.result = -3;
 80001d8:	755a      	strb	r2, [r3, #21]
 80001da:	759a      	strb	r2, [r3, #22]
 80001dc:	75da      	strb	r2, [r3, #23]
		SCB_VTOR = (uint32_t) &vector_table;  
        asm("dsb");
		debug_base_result = base_para.result;  //  Trigger a watchpoint break after flashing.
		base_scb_reset_system();  //  Restart.
	}	
}
 80001de:	b009      	add	sp, #36	; 0x24
 80001e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (((uint32_t) base_para.dest) + base_para.byte_count > 0x08010000) {  //  Dest ROM address too high.
 80001e4:	4e9d      	ldr	r6, [pc, #628]	; (800045c <baseloader_start+0x2f4>)
 80001e6:	4404      	add	r4, r0
 80001e8:	42b4      	cmp	r4, r6
 80001ea:	d902      	bls.n	80001f2 <baseloader_start+0x8a>
		base_para.result = -3;
 80001ec:	f06f 0202 	mvn.w	r2, #2
 80001f0:	e7ee      	b.n	80001d0 <baseloader_start+0x68>
	if ((uint32_t) base_para.src >= 0x08000000 &&
 80001f2:	f105 4478 	add.w	r4, r5, #4160749568	; 0xf8000000
 80001f6:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80001fa:	d20c      	bcs.n	8000216 <baseloader_start+0xae>
		if (((uint32_t) base_para.src) + base_para.byte_count > 0x08010000) {  //  Too many ROM bytes to copy.
 80001fc:	4428      	add	r0, r5
 80001fe:	42b0      	cmp	r0, r6
 8000200:	d91f      	bls.n	8000242 <baseloader_start+0xda>
			base_para.result = -4;
 8000202:	f06f 0203 	mvn.w	r2, #3
			base_para.result = -5;
 8000206:	751a      	strb	r2, [r3, #20]
 8000208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			base_para.fail = ((uint32_t) base_para.src) + base_para.byte_count;
 800020c:	6198      	str	r0, [r3, #24]
			base_para.result = -5;
 800020e:	755a      	strb	r2, [r3, #21]
 8000210:	759a      	strb	r2, [r3, #22]
 8000212:	75da      	strb	r2, [r3, #23]
			return;
 8000214:	e7e3      	b.n	80001de <baseloader_start+0x76>
	} else if ((uint32_t) base_para.src >= 0x20000000 &&
 8000216:	f105 4460 	add.w	r4, r5, #3758096384	; 0xe0000000
 800021a:	f5b4 4fa0 	cmp.w	r4, #20480	; 0x5000
 800021e:	d206      	bcs.n	800022e <baseloader_start+0xc6>
		if (((uint32_t) base_para.src) + base_para.byte_count > 0x20005000) {  //  Too many RAM bytes to copy.
 8000220:	4c8f      	ldr	r4, [pc, #572]	; (8000460 <baseloader_start+0x2f8>)
 8000222:	4428      	add	r0, r5
 8000224:	42a0      	cmp	r0, r4
 8000226:	d90c      	bls.n	8000242 <baseloader_start+0xda>
			base_para.result = -5;
 8000228:	f06f 0204 	mvn.w	r2, #4
 800022c:	e7eb      	b.n	8000206 <baseloader_start+0x9e>
		base_para.result = -6;
 800022e:	f06f 0205 	mvn.w	r2, #5
 8000232:	751a      	strb	r2, [r3, #20]
 8000234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		base_para.fail = (uint32_t) base_para.src;
 8000238:	619d      	str	r5, [r3, #24]
		base_para.result = -6;
 800023a:	755a      	strb	r2, [r3, #21]
 800023c:	759a      	strb	r2, [r3, #22]
 800023e:	75da      	strb	r2, [r3, #23]
		return;
 8000240:	e7cd      	b.n	80001de <baseloader_start+0x76>
	if (base_para.restart) { base_disable_interrupts(); }
 8000242:	68d3      	ldr	r3, [r2, #12]
 8000244:	b12b      	cbz	r3, 8000252 <baseloader_start+0xea>
 8000246:	b672      	cpsid	i
 8000248:	2300      	movs	r3, #0
 800024a:	4886      	ldr	r0, [pc, #536]	; (8000464 <baseloader_start+0x2fc>)
 800024c:	6003      	str	r3, [r0, #0]
 800024e:	4886      	ldr	r0, [pc, #536]	; (8000468 <baseloader_start+0x300>)
 8000250:	6003      	str	r3, [r0, #0]
	base_flash_unlock();  if (base_para.result < 0) { return; }  //  Quit if error.
 8000252:	4b86      	ldr	r3, [pc, #536]	; (800046c <baseloader_start+0x304>)
 8000254:	4886      	ldr	r0, [pc, #536]	; (8000470 <baseloader_start+0x308>)
 8000256:	6018      	str	r0, [r3, #0]
 8000258:	f100 3088 	add.w	r0, r0, #2290649224	; 0x88888888
 800025c:	6018      	str	r0, [r3, #0]
 800025e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8000262:	f1b9 0f00 	cmp.w	r9, #0
 8000266:	dbba      	blt.n	80001de <baseloader_start+0x76>
 8000268:	68cb      	ldr	r3, [r1, #12]
 800026a:	688e      	ldr	r6, [r1, #8]
 800026c:	9307      	str	r3, [sp, #28]
 800026e:	4b81      	ldr	r3, [pc, #516]	; (8000474 <baseloader_start+0x30c>)
            	base_flash_erase_page((uint32_t) base_tmp.erase_start);
 8000270:	4c81      	ldr	r4, [pc, #516]	; (8000478 <baseloader_start+0x310>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	9304      	str	r3, [sp, #16]
        if (base_tmp.dest_hw >= base_tmp.flash_end) {  /* Avoid writing past the end of flash */
 8000276:	69cb      	ldr	r3, [r1, #28]
 8000278:	9306      	str	r3, [sp, #24]
 800027a:	698b      	ldr	r3, [r1, #24]
 800027c:	694a      	ldr	r2, [r1, #20]
 800027e:	9303      	str	r3, [sp, #12]
 8000280:	680b      	ldr	r3, [r1, #0]
 8000282:	9305      	str	r3, [sp, #20]
 8000284:	4618      	mov	r0, r3
 8000286:	2300      	movs	r3, #0
 8000288:	469e      	mov	lr, r3
 800028a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800028e:	4671      	mov	r1, lr
 8000290:	9301      	str	r3, [sp, #4]
 8000292:	4698      	mov	r8, r3
 8000294:	4b6f      	ldr	r3, [pc, #444]	; (8000454 <baseloader_start+0x2ec>)
 8000296:	9d07      	ldr	r5, [sp, #28]
 8000298:	9f05      	ldr	r7, [sp, #20]
 800029a:	1bed      	subs	r5, r5, r7
 800029c:	4405      	add	r5, r0
 800029e:	9502      	str	r5, [sp, #8]
    while (base_tmp.half_word_count > 0) {        
 80002a0:	bb0e      	cbnz	r6, 80002e6 <baseloader_start+0x17e>
 80002a2:	2900      	cmp	r1, #0
 80002a4:	f000 832e 	beq.w	8000904 <baseloader_start+0x79c>
 80002a8:	4c6b      	ldr	r4, [pc, #428]	; (8000458 <baseloader_start+0x2f0>)
 80002aa:	7226      	strb	r6, [r4, #8]
 80002ac:	7266      	strb	r6, [r4, #9]
 80002ae:	72a6      	strb	r6, [r4, #10]
 80002b0:	72e6      	strb	r6, [r4, #11]
 80002b2:	f1b8 0f00 	cmp.w	r8, #0
 80002b6:	d002      	beq.n	80002be <baseloader_start+0x156>
 80002b8:	f8c3 9014 	str.w	r9, [r3, #20]
 80002bc:	b131      	cbz	r1, 80002cc <baseloader_start+0x164>
 80002be:	4b66      	ldr	r3, [pc, #408]	; (8000458 <baseloader_start+0x2f0>)
 80002c0:	9902      	ldr	r1, [sp, #8]
 80002c2:	615a      	str	r2, [r3, #20]
 80002c4:	60d9      	str	r1, [r3, #12]
 80002c6:	6018      	str	r0, [r3, #0]
 80002c8:	f8c3 c004 	str.w	ip, [r3, #4]
 80002cc:	f1be 0f00 	cmp.w	lr, #0
 80002d0:	d002      	beq.n	80002d8 <baseloader_start+0x170>
 80002d2:	4b61      	ldr	r3, [pc, #388]	; (8000458 <baseloader_start+0x2f0>)
 80002d4:	9a03      	ldr	r2, [sp, #12]
 80002d6:	619a      	str	r2, [r3, #24]
 80002d8:	9b01      	ldr	r3, [sp, #4]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d043      	beq.n	8000366 <baseloader_start+0x1fe>
 80002de:	4b65      	ldr	r3, [pc, #404]	; (8000474 <baseloader_start+0x30c>)
 80002e0:	9a04      	ldr	r2, [sp, #16]
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	e03f      	b.n	8000366 <baseloader_start+0x1fe>
		if (!base_para.preview && base_para.restart) { 
 80002e6:	691d      	ldr	r5, [r3, #16]
 80002e8:	9500      	str	r5, [sp, #0]
 80002ea:	b9b5      	cbnz	r5, 800031a <baseloader_start+0x1b2>
 80002ec:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 80002f0:	f1ba 0f00 	cmp.w	sl, #0
 80002f4:	d011      	beq.n	800031a <baseloader_start+0x1b2>
			if (base_tmp.bytes_flashed % 100 == 0) {
 80002f6:	f04f 0b64 	mov.w	fp, #100	; 0x64
 80002fa:	9f02      	ldr	r7, [sp, #8]
 80002fc:	9d02      	ldr	r5, [sp, #8]
 80002fe:	fb97 fafb 	sdiv	sl, r7, fp
 8000302:	fb0b 7a1a 	mls	sl, fp, sl, r7
 8000306:	f1ba 0f00 	cmp.w	sl, #0
 800030a:	9f04      	ldr	r7, [sp, #16]
 800030c:	bf08      	it	eq
 800030e:	462f      	moveq	r7, r5
 8000310:	9d01      	ldr	r5, [sp, #4]
 8000312:	bf08      	it	eq
 8000314:	2501      	moveq	r5, #1
 8000316:	9704      	str	r7, [sp, #16]
 8000318:	9501      	str	r5, [sp, #4]
        if (base_tmp.dest_hw >= base_tmp.flash_end) {  /* Avoid writing past the end of flash */
 800031a:	9d06      	ldr	r5, [sp, #24]
 800031c:	4285      	cmp	r5, r0
 800031e:	d845      	bhi.n	80003ac <baseloader_start+0x244>
 8000320:	4c4d      	ldr	r4, [pc, #308]	; (8000458 <baseloader_start+0x2f0>)
 8000322:	b169      	cbz	r1, 8000340 <baseloader_start+0x1d8>
 8000324:	60a6      	str	r6, [r4, #8]
 8000326:	f1b8 0f00 	cmp.w	r8, #0
 800032a:	d002      	beq.n	8000332 <baseloader_start+0x1ca>
 800032c:	f8c3 9014 	str.w	r9, [r3, #20]
 8000330:	b149      	cbz	r1, 8000346 <baseloader_start+0x1de>
 8000332:	9b02      	ldr	r3, [sp, #8]
 8000334:	6162      	str	r2, [r4, #20]
 8000336:	60e3      	str	r3, [r4, #12]
 8000338:	6020      	str	r0, [r4, #0]
 800033a:	f8c4 c004 	str.w	ip, [r4, #4]
 800033e:	e002      	b.n	8000346 <baseloader_start+0x1de>
 8000340:	f1b8 0f00 	cmp.w	r8, #0
 8000344:	d1f2      	bne.n	800032c <baseloader_start+0x1c4>
 8000346:	f1be 0f00 	cmp.w	lr, #0
 800034a:	d001      	beq.n	8000350 <baseloader_start+0x1e8>
 800034c:	9b03      	ldr	r3, [sp, #12]
 800034e:	61a3      	str	r3, [r4, #24]
 8000350:	9b01      	ldr	r3, [sp, #4]
 8000352:	b113      	cbz	r3, 800035a <baseloader_start+0x1f2>
 8000354:	4b47      	ldr	r3, [pc, #284]	; (8000474 <baseloader_start+0x30c>)
 8000356:	9a04      	ldr	r2, [sp, #16]
 8000358:	601a      	str	r2, [r3, #0]
            base_tmp.verified = false;
 800035a:	2200      	movs	r2, #0
 800035c:	4b3e      	ldr	r3, [pc, #248]	; (8000458 <baseloader_start+0x2f0>)
 800035e:	741a      	strb	r2, [r3, #16]
 8000360:	745a      	strb	r2, [r3, #17]
 8000362:	749a      	strb	r2, [r3, #18]
 8000364:	74da      	strb	r2, [r3, #19]
	base_flash_lock();  if (base_para.result < 0) { return; }  //  Quit if error.
 8000366:	4a45      	ldr	r2, [pc, #276]	; (800047c <baseloader_start+0x314>)
 8000368:	6813      	ldr	r3, [r2, #0]
 800036a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800036e:	6013      	str	r3, [r2, #0]
 8000370:	4b38      	ldr	r3, [pc, #224]	; (8000454 <baseloader_start+0x2ec>)
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	2a00      	cmp	r2, #0
 8000376:	f6ff af32 	blt.w	80001de <baseloader_start+0x76>
	base_para.result = base_tmp.verified ? base_tmp.bytes_flashed : -1;  //  Returns -1 if verification failed.
 800037a:	4a37      	ldr	r2, [pc, #220]	; (8000458 <baseloader_start+0x2f0>)
 800037c:	6911      	ldr	r1, [r2, #16]
 800037e:	2900      	cmp	r1, #0
 8000380:	f000 829f 	beq.w	80008c2 <baseloader_start+0x75a>
 8000384:	68d2      	ldr	r2, [r2, #12]
 8000386:	615a      	str	r2, [r3, #20]
    if (!base_para.preview && base_para.restart) { 
 8000388:	691a      	ldr	r2, [r3, #16]
 800038a:	2a00      	cmp	r2, #0
 800038c:	f47f af27 	bne.w	80001de <baseloader_start+0x76>
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	2b00      	cmp	r3, #0
 8000394:	f43f af23 	beq.w	80001de <baseloader_start+0x76>
        asm("dmb");
 8000398:	f3bf 8f5f 	dmb	sy
		SCB_VTOR = (uint32_t) &vector_table;  
 800039c:	4a38      	ldr	r2, [pc, #224]	; (8000480 <baseloader_start+0x318>)
 800039e:	4b39      	ldr	r3, [pc, #228]	; (8000484 <baseloader_start+0x31c>)
 80003a0:	601a      	str	r2, [r3, #0]
        asm("dsb");
 80003a2:	f3bf 8f4f 	dsb	sy
		base_scb_reset_system();  //  Restart.
 80003a6:	4a38      	ldr	r2, [pc, #224]	; (8000488 <baseloader_start+0x320>)
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	e7fe      	b.n	80003aa <baseloader_start+0x242>
        if (base_tmp.dest_hw >= base_tmp.erase_end || base_tmp.dest_hw < base_tmp.erase_start) {
 80003ac:	9d03      	ldr	r5, [sp, #12]
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d202      	bcs.n	80003b8 <baseloader_start+0x250>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f240 8190 	bls.w	80006d8 <baseloader_start+0x570>
            base_tmp.erase_start = base_get_flash_page_address(base_tmp.dest_hw);
 80003b8:	f420 727f 	bic.w	r2, r0, #1020	; 0x3fc
 80003bc:	f022 0203 	bic.w	r2, r2, #3
            base_tmp.erase_end = base_tmp.erase_start + ((FLASH_PAGE_SIZE) / sizeof(uint16_t));
 80003c0:	f502 6580 	add.w	r5, r2, #1024	; 0x400
 80003c4:	9503      	str	r5, [sp, #12]
			if (!base_para.preview) {  //  Erase the ROM page.
 80003c6:	9d00      	ldr	r5, [sp, #0]
 80003c8:	2d00      	cmp	r5, #0
 80003ca:	f040 8187 	bne.w	80006dc <baseloader_start+0x574>
            	base_flash_erase_page((uint32_t) base_tmp.erase_start);
 80003ce:	f89d 5000 	ldrb.w	r5, [sp]
 80003d2:	f8df e084 	ldr.w	lr, [pc, #132]	; 8000458 <baseloader_start+0x2f0>
 80003d6:	761d      	strb	r5, [r3, #24]
 80003d8:	f89e 8020 	ldrb.w	r8, [lr, #32]
 80003dc:	f88e 5020 	strb.w	r5, [lr, #32]
 80003e0:	f89e 8021 	ldrb.w	r8, [lr, #33]	; 0x21
 80003e4:	f88e 5021 	strb.w	r5, [lr, #33]	; 0x21
 80003e8:	f89e 8022 	ldrb.w	r8, [lr, #34]	; 0x22
 80003ec:	f88e 5022 	strb.w	r5, [lr, #34]	; 0x22
 80003f0:	f89e 8023 	ldrb.w	r8, [lr, #35]	; 0x23
 80003f4:	765d      	strb	r5, [r3, #25]
 80003f6:	f88e 5023 	strb.w	r5, [lr, #35]	; 0x23
 80003fa:	769d      	strb	r5, [r3, #26]
 80003fc:	76dd      	strb	r5, [r3, #27]
 80003fe:	4d23      	ldr	r5, [pc, #140]	; (800048c <baseloader_start+0x324>)
 8000400:	682d      	ldr	r5, [r5, #0]
 8000402:	f005 0535 	and.w	r5, r5, #53	; 0x35
 8000406:	f8ce 5020 	str.w	r5, [lr, #32]
 800040a:	8825      	ldrh	r5, [r4, #0]
 800040c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000410:	d909      	bls.n	8000426 <baseloader_start+0x2be>
 8000412:	4d1f      	ldr	r5, [pc, #124]	; (8000490 <baseloader_start+0x328>)
 8000414:	682d      	ldr	r5, [r5, #0]
 8000416:	f8de 8020 	ldr.w	r8, [lr, #32]
 800041a:	f005 0535 	and.w	r5, r5, #53	; 0x35
 800041e:	ea45 0508 	orr.w	r5, r5, r8
 8000422:	f8ce 5020 	str.w	r5, [lr, #32]
 8000426:	f04f 0800 	mov.w	r8, #0
 800042a:	4d0b      	ldr	r5, [pc, #44]	; (8000458 <baseloader_start+0x2f0>)
 800042c:	f8d5 e020 	ldr.w	lr, [r5, #32]
 8000430:	f01e 0f01 	tst.w	lr, #1
 8000434:	d130      	bne.n	8000498 <baseloader_start+0x330>
 8000436:	8825      	ldrh	r5, [r4, #0]
 8000438:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800043c:	d85d      	bhi.n	80004fa <baseloader_start+0x392>
 800043e:	4d0f      	ldr	r5, [pc, #60]	; (800047c <baseloader_start+0x314>)
 8000440:	f8d5 e000 	ldr.w	lr, [r5]
 8000444:	f04e 0e02 	orr.w	lr, lr, #2
 8000448:	f8c5 e000 	str.w	lr, [r5]
 800044c:	f8df e044 	ldr.w	lr, [pc, #68]	; 8000494 <baseloader_start+0x32c>
 8000450:	e05f      	b.n	8000512 <baseloader_start+0x3aa>
 8000452:	bf00      	nop
 8000454:	20000000 	.word	0x20000000
 8000458:	2000001c 	.word	0x2000001c
 800045c:	08010000 	.word	0x08010000
 8000460:	20005000 	.word	0x20005000
 8000464:	e000e010 	.word	0xe000e010
 8000468:	40021008 	.word	0x40021008
 800046c:	40022004 	.word	0x40022004
 8000470:	45670123 	.word	0x45670123
 8000474:	20002214 	.word	0x20002214
 8000478:	1ffff7e0 	.word	0x1ffff7e0
 800047c:	40022010 	.word	0x40022010
 8000480:	08000000 	.word	0x08000000
 8000484:	e000ed08 	.word	0xe000ed08
 8000488:	05fa0004 	.word	0x05fa0004
 800048c:	4002200c 	.word	0x4002200c
 8000490:	4002204c 	.word	0x4002204c
 8000494:	40022014 	.word	0x40022014
 8000498:	f8d3 e018 	ldr.w	lr, [r3, #24]
 800049c:	f10e 0901 	add.w	r9, lr, #1
 80004a0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80004a4:	f8c3 9018 	str.w	r9, [r3, #24]
 80004a8:	f200 80fa 	bhi.w	80006a0 <baseloader_start+0x538>
 80004ac:	f895 e020 	ldrb.w	lr, [r5, #32]
 80004b0:	f885 8020 	strb.w	r8, [r5, #32]
 80004b4:	f895 e021 	ldrb.w	lr, [r5, #33]	; 0x21
 80004b8:	f885 8021 	strb.w	r8, [r5, #33]	; 0x21
 80004bc:	f895 e022 	ldrb.w	lr, [r5, #34]	; 0x22
 80004c0:	4fc7      	ldr	r7, [pc, #796]	; (80007e0 <baseloader_start+0x678>)
 80004c2:	f885 8022 	strb.w	r8, [r5, #34]	; 0x22
 80004c6:	f895 e023 	ldrb.w	lr, [r5, #35]	; 0x23
 80004ca:	f885 8023 	strb.w	r8, [r5, #35]	; 0x23
 80004ce:	f8d7 e000 	ldr.w	lr, [r7]
 80004d2:	f00e 0e35 	and.w	lr, lr, #53	; 0x35
 80004d6:	f8c5 e020 	str.w	lr, [r5, #32]
 80004da:	f8b4 e000 	ldrh.w	lr, [r4]
 80004de:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 80004e2:	d9a3      	bls.n	800042c <baseloader_start+0x2c4>
 80004e4:	f8d7 e040 	ldr.w	lr, [r7, #64]	; 0x40
 80004e8:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80004ec:	f00e 0e35 	and.w	lr, lr, #53	; 0x35
 80004f0:	ea4e 0e09 	orr.w	lr, lr, r9
 80004f4:	f8c5 e020 	str.w	lr, [r5, #32]
 80004f8:	e798      	b.n	800042c <baseloader_start+0x2c4>
 80004fa:	4dba      	ldr	r5, [pc, #744]	; (80007e4 <baseloader_start+0x67c>)
 80004fc:	42aa      	cmp	r2, r5
 80004fe:	d99e      	bls.n	800043e <baseloader_start+0x2d6>
 8000500:	4db9      	ldr	r5, [pc, #740]	; (80007e8 <baseloader_start+0x680>)
 8000502:	f8d5 e000 	ldr.w	lr, [r5]
 8000506:	f04e 0e02 	orr.w	lr, lr, #2
 800050a:	f8c5 e000 	str.w	lr, [r5]
 800050e:	f8df e2f0 	ldr.w	lr, [pc, #752]	; 8000800 <baseloader_start+0x698>
 8000512:	f8ce 2000 	str.w	r2, [lr]
 8000516:	f8d5 e000 	ldr.w	lr, [r5]
 800051a:	4fb1      	ldr	r7, [pc, #708]	; (80007e0 <baseloader_start+0x678>)
 800051c:	f04e 0e40 	orr.w	lr, lr, #64	; 0x40
 8000520:	f8c5 e000 	str.w	lr, [r5]
 8000524:	f04f 0e00 	mov.w	lr, #0
 8000528:	4db0      	ldr	r5, [pc, #704]	; (80007ec <baseloader_start+0x684>)
 800052a:	f883 e018 	strb.w	lr, [r3, #24]
 800052e:	f895 8020 	ldrb.w	r8, [r5, #32]
 8000532:	f885 e020 	strb.w	lr, [r5, #32]
 8000536:	f895 8021 	ldrb.w	r8, [r5, #33]	; 0x21
 800053a:	f885 e021 	strb.w	lr, [r5, #33]	; 0x21
 800053e:	f895 8022 	ldrb.w	r8, [r5, #34]	; 0x22
 8000542:	f885 e022 	strb.w	lr, [r5, #34]	; 0x22
 8000546:	f895 8023 	ldrb.w	r8, [r5, #35]	; 0x23
 800054a:	f883 e019 	strb.w	lr, [r3, #25]
 800054e:	f885 e023 	strb.w	lr, [r5, #35]	; 0x23
 8000552:	f883 e01a 	strb.w	lr, [r3, #26]
 8000556:	f883 e01b 	strb.w	lr, [r3, #27]
 800055a:	f8d7 e000 	ldr.w	lr, [r7]
 800055e:	f00e 0e35 	and.w	lr, lr, #53	; 0x35
 8000562:	f8c5 e020 	str.w	lr, [r5, #32]
 8000566:	f8b4 e000 	ldrh.w	lr, [r4]
 800056a:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 800056e:	d909      	bls.n	8000584 <baseloader_start+0x41c>
 8000570:	f8d7 e040 	ldr.w	lr, [r7, #64]	; 0x40
 8000574:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8000578:	f00e 0e35 	and.w	lr, lr, #53	; 0x35
 800057c:	ea4e 0e08 	orr.w	lr, lr, r8
 8000580:	f8c5 e020 	str.w	lr, [r5, #32]
 8000584:	f04f 0800 	mov.w	r8, #0
 8000588:	4d98      	ldr	r5, [pc, #608]	; (80007ec <baseloader_start+0x684>)
 800058a:	f8d5 e020 	ldr.w	lr, [r5, #32]
 800058e:	f01e 0f01 	tst.w	lr, #1
 8000592:	d106      	bne.n	80005a2 <baseloader_start+0x43a>
 8000594:	8825      	ldrh	r5, [r4, #0]
 8000596:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800059a:	d833      	bhi.n	8000604 <baseloader_start+0x49c>
 800059c:	f8df e25c 	ldr.w	lr, [pc, #604]	; 80007fc <baseloader_start+0x694>
 80005a0:	e035      	b.n	800060e <baseloader_start+0x4a6>
 80005a2:	f8d3 e018 	ldr.w	lr, [r3, #24]
 80005a6:	f10e 0901 	add.w	r9, lr, #1
 80005aa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80005ae:	f8c3 9018 	str.w	r9, [r3, #24]
 80005b2:	f200 808e 	bhi.w	80006d2 <baseloader_start+0x56a>
 80005b6:	f895 e020 	ldrb.w	lr, [r5, #32]
 80005ba:	f885 8020 	strb.w	r8, [r5, #32]
 80005be:	f895 e021 	ldrb.w	lr, [r5, #33]	; 0x21
 80005c2:	f885 8021 	strb.w	r8, [r5, #33]	; 0x21
 80005c6:	f895 e022 	ldrb.w	lr, [r5, #34]	; 0x22
 80005ca:	4f85      	ldr	r7, [pc, #532]	; (80007e0 <baseloader_start+0x678>)
 80005cc:	f885 8022 	strb.w	r8, [r5, #34]	; 0x22
 80005d0:	f895 e023 	ldrb.w	lr, [r5, #35]	; 0x23
 80005d4:	f885 8023 	strb.w	r8, [r5, #35]	; 0x23
 80005d8:	f8d7 e000 	ldr.w	lr, [r7]
 80005dc:	f00e 0e35 	and.w	lr, lr, #53	; 0x35
 80005e0:	f8c5 e020 	str.w	lr, [r5, #32]
 80005e4:	f8b4 e000 	ldrh.w	lr, [r4]
 80005e8:	f5be 7f00 	cmp.w	lr, #512	; 0x200
 80005ec:	d9cd      	bls.n	800058a <baseloader_start+0x422>
 80005ee:	f8d7 e040 	ldr.w	lr, [r7, #64]	; 0x40
 80005f2:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80005f6:	f00e 0e35 	and.w	lr, lr, #53	; 0x35
 80005fa:	ea4e 0e09 	orr.w	lr, lr, r9
 80005fe:	f8c5 e020 	str.w	lr, [r5, #32]
 8000602:	e7c2      	b.n	800058a <baseloader_start+0x422>
 8000604:	4d77      	ldr	r5, [pc, #476]	; (80007e4 <baseloader_start+0x67c>)
 8000606:	42aa      	cmp	r2, r5
 8000608:	d9c8      	bls.n	800059c <baseloader_start+0x434>
 800060a:	f8df e1dc 	ldr.w	lr, [pc, #476]	; 80007e8 <baseloader_start+0x680>
 800060e:	f8de 5000 	ldr.w	r5, [lr]
 8000612:	f04f 0900 	mov.w	r9, #0
 8000616:	f025 0502 	bic.w	r5, r5, #2
 800061a:	f8ce 5000 	str.w	r5, [lr]
 800061e:	f04f 0e01 	mov.w	lr, #1
 8000622:	46f2      	mov	sl, lr
 8000624:	46f0      	mov	r8, lr
		if (!base_para.preview) {  //  Write the ROM half-word.
 8000626:	691d      	ldr	r5, [r3, #16]
 8000628:	2d00      	cmp	r5, #0
 800062a:	f040 8127 	bne.w	800087c <baseloader_start+0x714>
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 800062e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80007ec <baseloader_start+0x684>
 8000632:	761d      	strb	r5, [r3, #24]
 8000634:	f898 9020 	ldrb.w	r9, [r8, #32]
 8000638:	f888 5020 	strb.w	r5, [r8, #32]
 800063c:	f898 9021 	ldrb.w	r9, [r8, #33]	; 0x21
 8000640:	f888 5021 	strb.w	r5, [r8, #33]	; 0x21
 8000644:	f898 9022 	ldrb.w	r9, [r8, #34]	; 0x22
 8000648:	f888 5022 	strb.w	r5, [r8, #34]	; 0x22
 800064c:	f898 9023 	ldrb.w	r9, [r8, #35]	; 0x23
 8000650:	765d      	strb	r5, [r3, #25]
 8000652:	f888 5023 	strb.w	r5, [r8, #35]	; 0x23
 8000656:	769d      	strb	r5, [r3, #26]
 8000658:	76dd      	strb	r5, [r3, #27]
 800065a:	4d61      	ldr	r5, [pc, #388]	; (80007e0 <baseloader_start+0x678>)
 800065c:	682d      	ldr	r5, [r5, #0]
 800065e:	f005 0535 	and.w	r5, r5, #53	; 0x35
 8000662:	f8c8 5020 	str.w	r5, [r8, #32]
 8000666:	8825      	ldrh	r5, [r4, #0]
 8000668:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800066c:	d909      	bls.n	8000682 <baseloader_start+0x51a>
 800066e:	4d60      	ldr	r5, [pc, #384]	; (80007f0 <baseloader_start+0x688>)
 8000670:	682d      	ldr	r5, [r5, #0]
 8000672:	f8d8 9020 	ldr.w	r9, [r8, #32]
 8000676:	f005 0535 	and.w	r5, r5, #53	; 0x35
 800067a:	ea45 0509 	orr.w	r5, r5, r9
 800067e:	f8c8 5020 	str.w	r5, [r8, #32]
 8000682:	f04f 0900 	mov.w	r9, #0
 8000686:	4d59      	ldr	r5, [pc, #356]	; (80007ec <baseloader_start+0x684>)
 8000688:	f8d5 8020 	ldr.w	r8, [r5, #32]
 800068c:	f018 0f01 	tst.w	r8, #1
 8000690:	d128      	bne.n	80006e4 <baseloader_start+0x57c>
 8000692:	8825      	ldrh	r5, [r4, #0]
 8000694:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8000698:	d855      	bhi.n	8000746 <baseloader_start+0x5de>
 800069a:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80007fc <baseloader_start+0x694>
 800069e:	e057      	b.n	8000750 <baseloader_start+0x5e8>
            	base_flash_erase_page((uint32_t) base_tmp.erase_start);
 80006a0:	f06f 040b 	mvn.w	r4, #11
 80006a4:	4b51      	ldr	r3, [pc, #324]	; (80007ec <baseloader_start+0x684>)
 80006a6:	b101      	cbz	r1, 80006aa <baseloader_start+0x542>
 80006a8:	609e      	str	r6, [r3, #8]
 80006aa:	4d52      	ldr	r5, [pc, #328]	; (80007f4 <baseloader_start+0x68c>)
 80006ac:	616c      	str	r4, [r5, #20]
 80006ae:	b109      	cbz	r1, 80006b4 <baseloader_start+0x54c>
 80006b0:	9c02      	ldr	r4, [sp, #8]
 80006b2:	60dc      	str	r4, [r3, #12]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	b111      	cbz	r1, 80006be <baseloader_start+0x556>
 80006b8:	6018      	str	r0, [r3, #0]
 80006ba:	f8c3 c004 	str.w	ip, [r3, #4]
 80006be:	9a03      	ldr	r2, [sp, #12]
 80006c0:	619a      	str	r2, [r3, #24]
 80006c2:	9b01      	ldr	r3, [sp, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f43f ad8a 	beq.w	80001de <baseloader_start+0x76>
 80006ca:	4b4b      	ldr	r3, [pc, #300]	; (80007f8 <baseloader_start+0x690>)
 80006cc:	9a04      	ldr	r2, [sp, #16]
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	e585      	b.n	80001de <baseloader_start+0x76>
 80006d2:	f06f 040c 	mvn.w	r4, #12
 80006d6:	e7e5      	b.n	80006a4 <baseloader_start+0x53c>
 80006d8:	468a      	mov	sl, r1
 80006da:	e7a4      	b.n	8000626 <baseloader_start+0x4be>
 80006dc:	f04f 0e01 	mov.w	lr, #1
 80006e0:	46f2      	mov	sl, lr
 80006e2:	e7a0      	b.n	8000626 <baseloader_start+0x4be>
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 80006e4:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80006e8:	f108 0b01 	add.w	fp, r8, #1
 80006ec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80006f0:	f8c3 b018 	str.w	fp, [r3, #24]
 80006f4:	f200 80e8 	bhi.w	80008c8 <baseloader_start+0x760>
 80006f8:	f895 8020 	ldrb.w	r8, [r5, #32]
 80006fc:	f885 9020 	strb.w	r9, [r5, #32]
 8000700:	f895 8021 	ldrb.w	r8, [r5, #33]	; 0x21
 8000704:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8000708:	f895 8022 	ldrb.w	r8, [r5, #34]	; 0x22
 800070c:	4f34      	ldr	r7, [pc, #208]	; (80007e0 <baseloader_start+0x678>)
 800070e:	f885 9022 	strb.w	r9, [r5, #34]	; 0x22
 8000712:	f895 8023 	ldrb.w	r8, [r5, #35]	; 0x23
 8000716:	f885 9023 	strb.w	r9, [r5, #35]	; 0x23
 800071a:	f8d7 8000 	ldr.w	r8, [r7]
 800071e:	f008 0835 	and.w	r8, r8, #53	; 0x35
 8000722:	f8c5 8020 	str.w	r8, [r5, #32]
 8000726:	f8b4 8000 	ldrh.w	r8, [r4]
 800072a:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 800072e:	d9ab      	bls.n	8000688 <baseloader_start+0x520>
 8000730:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40
 8000734:	f8d5 b020 	ldr.w	fp, [r5, #32]
 8000738:	f008 0835 	and.w	r8, r8, #53	; 0x35
 800073c:	ea48 080b 	orr.w	r8, r8, fp
 8000740:	f8c5 8020 	str.w	r8, [r5, #32]
 8000744:	e7a0      	b.n	8000688 <baseloader_start+0x520>
 8000746:	4d27      	ldr	r5, [pc, #156]	; (80007e4 <baseloader_start+0x67c>)
 8000748:	42a8      	cmp	r0, r5
 800074a:	d9a6      	bls.n	800069a <baseloader_start+0x532>
 800074c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80007e8 <baseloader_start+0x680>
 8000750:	f8d8 5000 	ldr.w	r5, [r8]
 8000754:	4f22      	ldr	r7, [pc, #136]	; (80007e0 <baseloader_start+0x678>)
 8000756:	f045 0501 	orr.w	r5, r5, #1
 800075a:	f8c8 5000 	str.w	r5, [r8]
 800075e:	f04f 0800 	mov.w	r8, #0
 8000762:	f8bc 5000 	ldrh.w	r5, [ip]
 8000766:	8005      	strh	r5, [r0, #0]
 8000768:	4d20      	ldr	r5, [pc, #128]	; (80007ec <baseloader_start+0x684>)
 800076a:	f883 8018 	strb.w	r8, [r3, #24]
 800076e:	f895 9020 	ldrb.w	r9, [r5, #32]
 8000772:	f885 8020 	strb.w	r8, [r5, #32]
 8000776:	f895 9021 	ldrb.w	r9, [r5, #33]	; 0x21
 800077a:	f885 8021 	strb.w	r8, [r5, #33]	; 0x21
 800077e:	f895 9022 	ldrb.w	r9, [r5, #34]	; 0x22
 8000782:	f885 8022 	strb.w	r8, [r5, #34]	; 0x22
 8000786:	f895 9023 	ldrb.w	r9, [r5, #35]	; 0x23
 800078a:	f883 8019 	strb.w	r8, [r3, #25]
 800078e:	f885 8023 	strb.w	r8, [r5, #35]	; 0x23
 8000792:	f883 801a 	strb.w	r8, [r3, #26]
 8000796:	f883 801b 	strb.w	r8, [r3, #27]
 800079a:	f8d7 8000 	ldr.w	r8, [r7]
 800079e:	f008 0835 	and.w	r8, r8, #53	; 0x35
 80007a2:	f8c5 8020 	str.w	r8, [r5, #32]
 80007a6:	f8b4 8000 	ldrh.w	r8, [r4]
 80007aa:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 80007ae:	d909      	bls.n	80007c4 <baseloader_start+0x65c>
 80007b0:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40
 80007b4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80007b8:	f008 0835 	and.w	r8, r8, #53	; 0x35
 80007bc:	ea48 0809 	orr.w	r8, r8, r9
 80007c0:	f8c5 8020 	str.w	r8, [r5, #32]
 80007c4:	f04f 0900 	mov.w	r9, #0
 80007c8:	4d08      	ldr	r5, [pc, #32]	; (80007ec <baseloader_start+0x684>)
 80007ca:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80007ce:	f018 0f01 	tst.w	r8, #1
 80007d2:	d117      	bne.n	8000804 <baseloader_start+0x69c>
 80007d4:	8822      	ldrh	r2, [r4, #0]
 80007d6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80007da:	d843      	bhi.n	8000864 <baseloader_start+0x6fc>
 80007dc:	4d07      	ldr	r5, [pc, #28]	; (80007fc <baseloader_start+0x694>)
 80007de:	e045      	b.n	800086c <baseloader_start+0x704>
 80007e0:	4002200c 	.word	0x4002200c
 80007e4:	0807ffff 	.word	0x0807ffff
 80007e8:	40022050 	.word	0x40022050
 80007ec:	2000001c 	.word	0x2000001c
 80007f0:	4002204c 	.word	0x4002204c
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20002214 	.word	0x20002214
 80007fc:	40022010 	.word	0x40022010
 8000800:	40022054 	.word	0x40022054
 8000804:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8000808:	f108 0b01 	add.w	fp, r8, #1
 800080c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8000810:	f8c3 b018 	str.w	fp, [r3, #24]
 8000814:	d873      	bhi.n	80008fe <baseloader_start+0x796>
 8000816:	f895 8020 	ldrb.w	r8, [r5, #32]
 800081a:	f885 9020 	strb.w	r9, [r5, #32]
 800081e:	f895 8021 	ldrb.w	r8, [r5, #33]	; 0x21
 8000822:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8000826:	f895 8022 	ldrb.w	r8, [r5, #34]	; 0x22
 800082a:	4f3b      	ldr	r7, [pc, #236]	; (8000918 <baseloader_start+0x7b0>)
 800082c:	f885 9022 	strb.w	r9, [r5, #34]	; 0x22
 8000830:	f895 8023 	ldrb.w	r8, [r5, #35]	; 0x23
 8000834:	f885 9023 	strb.w	r9, [r5, #35]	; 0x23
 8000838:	f8d7 8000 	ldr.w	r8, [r7]
 800083c:	f008 0835 	and.w	r8, r8, #53	; 0x35
 8000840:	f8c5 8020 	str.w	r8, [r5, #32]
 8000844:	f8b4 8000 	ldrh.w	r8, [r4]
 8000848:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
 800084c:	d9bd      	bls.n	80007ca <baseloader_start+0x662>
 800084e:	f8d7 8040 	ldr.w	r8, [r7, #64]	; 0x40
 8000852:	f8d5 b020 	ldr.w	fp, [r5, #32]
 8000856:	f008 0835 	and.w	r8, r8, #53	; 0x35
 800085a:	ea48 080b 	orr.w	r8, r8, fp
 800085e:	f8c5 8020 	str.w	r8, [r5, #32]
 8000862:	e7b2      	b.n	80007ca <baseloader_start+0x662>
 8000864:	4a2d      	ldr	r2, [pc, #180]	; (800091c <baseloader_start+0x7b4>)
 8000866:	4290      	cmp	r0, r2
 8000868:	d9b8      	bls.n	80007dc <baseloader_start+0x674>
 800086a:	4d2d      	ldr	r5, [pc, #180]	; (8000920 <baseloader_start+0x7b8>)
 800086c:	f04f 0801 	mov.w	r8, #1
 8000870:	f04f 0900 	mov.w	r9, #0
 8000874:	682a      	ldr	r2, [r5, #0]
 8000876:	f022 0201 	bic.w	r2, r2, #1
 800087a:	602a      	str	r2, [r5, #0]
        if (!base_para.preview && *base_tmp.dest_hw != *base_tmp.src_hw) {
 800087c:	691d      	ldr	r5, [r3, #16]
        base_tmp.erase_start = base_tmp.dest_hw + 1;
 800087e:	1c82      	adds	r2, r0, #2
        if (!base_para.preview && *base_tmp.dest_hw != *base_tmp.src_hw) {
 8000880:	b9cd      	cbnz	r5, 80008b6 <baseloader_start+0x74e>
 8000882:	f832 ac02 	ldrh.w	sl, [r2, #-2]
 8000886:	f8bc 5000 	ldrh.w	r5, [ip]
 800088a:	45aa      	cmp	sl, r5
 800088c:	d013      	beq.n	80008b6 <baseloader_start+0x74e>
 800088e:	4c25      	ldr	r4, [pc, #148]	; (8000924 <baseloader_start+0x7bc>)
 8000890:	b149      	cbz	r1, 80008a6 <baseloader_start+0x73e>
 8000892:	60a6      	str	r6, [r4, #8]
 8000894:	f1b8 0f00 	cmp.w	r8, #0
 8000898:	d002      	beq.n	80008a0 <baseloader_start+0x738>
 800089a:	f8c3 9014 	str.w	r9, [r3, #20]
 800089e:	b129      	cbz	r1, 80008ac <baseloader_start+0x744>
 80008a0:	9b02      	ldr	r3, [sp, #8]
 80008a2:	60e3      	str	r3, [r4, #12]
 80008a4:	e002      	b.n	80008ac <baseloader_start+0x744>
 80008a6:	f1b8 0f00 	cmp.w	r8, #0
 80008aa:	d1f6      	bne.n	800089a <baseloader_start+0x732>
 80008ac:	6162      	str	r2, [r4, #20]
 80008ae:	2900      	cmp	r1, #0
 80008b0:	f43f ad49 	beq.w	8000346 <baseloader_start+0x1de>
 80008b4:	e540      	b.n	8000338 <baseloader_start+0x1d0>
        base_tmp.half_word_count--;
 80008b6:	3e01      	subs	r6, #1
 80008b8:	f10c 0c02 	add.w	ip, ip, #2
 80008bc:	2101      	movs	r1, #1
        base_tmp.erase_start = base_tmp.dest_hw + 1;
 80008be:	4610      	mov	r0, r2
 80008c0:	e4e9      	b.n	8000296 <baseloader_start+0x12e>
	base_para.result = base_tmp.verified ? base_tmp.bytes_flashed : -1;  //  Returns -1 if verification failed.
 80008c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008c6:	e55e      	b.n	8000386 <baseloader_start+0x21e>
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 80008c8:	f06f 0309 	mvn.w	r3, #9
 80008cc:	b109      	cbz	r1, 80008d2 <baseloader_start+0x76a>
 80008ce:	4c15      	ldr	r4, [pc, #84]	; (8000924 <baseloader_start+0x7bc>)
 80008d0:	60a6      	str	r6, [r4, #8]
 80008d2:	4c15      	ldr	r4, [pc, #84]	; (8000928 <baseloader_start+0x7c0>)
 80008d4:	6163      	str	r3, [r4, #20]
 80008d6:	b1d1      	cbz	r1, 800090e <baseloader_start+0x7a6>
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <baseloader_start+0x7bc>)
 80008da:	9c02      	ldr	r4, [sp, #8]
 80008dc:	60dc      	str	r4, [r3, #12]
 80008de:	f1ba 0f00 	cmp.w	sl, #0
 80008e2:	d002      	beq.n	80008ea <baseloader_start+0x782>
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <baseloader_start+0x7bc>)
 80008e6:	615a      	str	r2, [r3, #20]
 80008e8:	b119      	cbz	r1, 80008f2 <baseloader_start+0x78a>
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <baseloader_start+0x7bc>)
 80008ec:	6018      	str	r0, [r3, #0]
 80008ee:	f8c3 c004 	str.w	ip, [r3, #4]
 80008f2:	f1be 0f00 	cmp.w	lr, #0
 80008f6:	f43f aee4 	beq.w	80006c2 <baseloader_start+0x55a>
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <baseloader_start+0x7bc>)
 80008fc:	e6df      	b.n	80006be <baseloader_start+0x556>
 80008fe:	f06f 030a 	mvn.w	r3, #10
 8000902:	e7e3      	b.n	80008cc <baseloader_start+0x764>
 8000904:	f1b8 0f00 	cmp.w	r8, #0
 8000908:	f43f ace0 	beq.w	80002cc <baseloader_start+0x164>
 800090c:	e4d4      	b.n	80002b8 <baseloader_start+0x150>
 800090e:	f1ba 0f00 	cmp.w	sl, #0
 8000912:	d0ee      	beq.n	80008f2 <baseloader_start+0x78a>
 8000914:	e7e6      	b.n	80008e4 <baseloader_start+0x77c>
 8000916:	bf00      	nop
 8000918:	4002200c 	.word	0x4002200c
 800091c:	0807ffff 	.word	0x0807ffff
 8000920:	40022050 	.word	0x40022050
 8000924:	2000001c 	.word	0x2000001c
 8000928:	20000000 	.word	0x20000000

0800092c <baseloader_fetch>:

int baseloader_fetch(baseloader_func *baseloader_addr, uint32_t **dest, const uint32_t **src, size_t *byte_count) {
 800092c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	//  Return the address of the baseloader function, located in the Second Base Vector Table.
	//  Also return the parameters to be passed to the baseloader function: dest, src, byte_count.
	if (!baseloader_addr || !dest || !src || !byte_count) { 
 8000930:	b110      	cbz	r0, 8000938 <baseloader_fetch+0xc>
 8000932:	b109      	cbz	r1, 8000938 <baseloader_fetch+0xc>
 8000934:	b102      	cbz	r2, 8000938 <baseloader_fetch+0xc>
 8000936:	b92b      	cbnz	r3, 8000944 <baseloader_fetch+0x18>
		base_para.fail = (uint32_t) baseloader_addr;
 8000938:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <baseloader_fetch+0xa8>)
 800093a:	6198      	str	r0, [r3, #24]
		return -1; 
 800093c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	*baseloader_addr = (baseloader_func) ((uint32_t) (end_base_vector->baseloader) - FLASH_BASE + flash_page_addr);
	*dest = (uint32_t *) FLASH_BASE;  		 //  Overwrite the old bootloader...
	*src  = (uint32_t *) FLASH_ADDRESS(application_start);  //  By the new bootloader from the Application space.
	*byte_count = bootloader_size;			 //  For this number of bytes.
	return 0;
}
 8000940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!IS_VALID_BASE_VECTOR_TABLE(application_start)) {  //  Quit if First Base Vector Table is not found.
 8000944:	4e24      	ldr	r6, [pc, #144]	; (80009d8 <baseloader_fetch+0xac>)
 8000946:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 80009e8 <baseloader_fetch+0xbc>
 800094a:	4d24      	ldr	r5, [pc, #144]	; (80009dc <baseloader_fetch+0xb0>)
 800094c:	ea06 0709 	and.w	r7, r6, r9
 8000950:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8000954:	ea47 0805 	orr.w	r8, r7, r5
 8000958:	f8d8 e000 	ldr.w	lr, [r8]
 800095c:	4c20      	ldr	r4, [pc, #128]	; (80009e0 <baseloader_fetch+0xb4>)
 800095e:	45a6      	cmp	lr, r4
 8000960:	d104      	bne.n	800096c <baseloader_fetch+0x40>
 8000962:	f8d8 c014 	ldr.w	ip, [r8, #20]
 8000966:	4c1f      	ldr	r4, [pc, #124]	; (80009e4 <baseloader_fetch+0xb8>)
 8000968:	45a4      	cmp	ip, r4
 800096a:	d004      	beq.n	8000976 <baseloader_fetch+0x4a>
		base_para.fail = (uint32_t) FLASH_ADDRESS(application_start);
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <baseloader_fetch+0xa8>)
		return -2; 
 800096e:	f06f 0001 	mvn.w	r0, #1
		base_para.fail = (uint32_t) FLASH_ADDRESS(application_start);
 8000972:	619f      	str	r7, [r3, #24]
		return -2; 
 8000974:	e7e4      	b.n	8000940 <baseloader_fetch+0x14>
	uint32_t bootloader_size = (uint32_t) FLASH_ADDRESS(begin_base_vector->application) - FLASH_BASE;
 8000976:	f8d8 4010 	ldr.w	r4, [r8, #16]
	if ((uint32_t) application_start + bootloader_size + FLASH_PAGE_SIZE 
 800097a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
	uint32_t bootloader_size = (uint32_t) FLASH_ADDRESS(begin_base_vector->application) - FLASH_BASE;
 800097e:	ea04 0409 	and.w	r4, r4, r9
 8000982:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
	if ((uint32_t) application_start + bootloader_size + FLASH_PAGE_SIZE 
 8000986:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80009ec <baseloader_fetch+0xc0>
 800098a:	4426      	add	r6, r4
 800098c:	4546      	cmp	r6, r8
 800098e:	d904      	bls.n	800099a <baseloader_fetch+0x6e>
		base_para.fail = bootloader_size;
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <baseloader_fetch+0xa8>)
		return -3; 
 8000992:	f06f 0002 	mvn.w	r0, #2
		base_para.fail = bootloader_size;
 8000996:	619c      	str	r4, [r3, #24]
		return -3; 
 8000998:	e7d2      	b.n	8000940 <baseloader_fetch+0x14>
	uint32_t flash_page_addr = (uint32_t) FLASH_ADDRESS(application_start) + bootloader_size;
 800099a:	193e      	adds	r6, r7, r4
	if (!IS_VALID_BASE_VECTOR_TABLE(flash_page_addr)) {  //  Quit if Second Base Vector Table is not found.
 800099c:	4335      	orrs	r5, r6
 800099e:	f8d5 8000 	ldr.w	r8, [r5]
 80009a2:	45f0      	cmp	r8, lr
 80009a4:	d103      	bne.n	80009ae <baseloader_fetch+0x82>
 80009a6:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80009aa:	45e6      	cmp	lr, ip
 80009ac:	d005      	beq.n	80009ba <baseloader_fetch+0x8e>
		base_para.fail = flash_page_addr;
 80009ae:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <baseloader_fetch+0xa8>)
		return -4;
 80009b0:	f06f 0003 	mvn.w	r0, #3
		base_para.fail = flash_page_addr;
 80009b4:	6196      	str	r6, [r2, #24]
		*byte_count = bootloader_size;
 80009b6:	601c      	str	r4, [r3, #0]
		return -4;
 80009b8:	e7c2      	b.n	8000940 <baseloader_fetch+0x14>
	*baseloader_addr = (baseloader_func) ((uint32_t) (end_base_vector->baseloader) - FLASH_BASE + flash_page_addr);
 80009ba:	68ad      	ldr	r5, [r5, #8]
 80009bc:	f106 4678 	add.w	r6, r6, #4160749568	; 0xf8000000
 80009c0:	442e      	add	r6, r5
 80009c2:	6006      	str	r6, [r0, #0]
	*dest = (uint32_t *) FLASH_BASE;  		 //  Overwrite the old bootloader...
 80009c4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80009c8:	6008      	str	r0, [r1, #0]
	*src  = (uint32_t *) FLASH_ADDRESS(application_start);  //  By the new bootloader from the Application space.
 80009ca:	6017      	str	r7, [r2, #0]
	return 0;
 80009cc:	2000      	movs	r0, #0
	*byte_count = bootloader_size;			 //  For this number of bytes.
 80009ce:	601c      	str	r4, [r3, #0]
	return 0;
 80009d0:	e7b6      	b.n	8000940 <baseloader_fetch+0x14>
 80009d2:	bf00      	nop
 80009d4:	20000000 	.word	0x20000000
 80009d8:	08007401 	.word	0x08007401
 80009dc:	08000150 	.word	0x08000150
 80009e0:	22051969 	.word	0x22051969
 80009e4:	19690522 	.word	0x19690522
 80009e8:	fffffc00 	.word	0xfffffc00
 80009ec:	0800ffff 	.word	0x0800ffff

080009f0 <blocking_handler>:
	}

}

void blocking_handler(void)
{
 80009f0:	e7fe      	b.n	80009f0 <blocking_handler>

080009f2 <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 80009f2:	4770      	bx	lr

080009f4 <rtc_isr>:
volatile uint32_t platform_get_alarm(void) {
	//  Get alarm time.
	return rtc_get_alarm_val();
}

void rtc_isr(void) {
 80009f4:	b510      	push	{r4, lr}
	//  Interrupt Service Routine for RTC Tick, Alarm, Overflow.  Don't call any I/O functions here.
	if (rtc_check_flag(RTC_SEC)) {
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 fcac 	bl	8001354 <rtc_check_flag>
 80009fc:	b160      	cbz	r0, 8000a18 <rtc_isr+0x24>
		//  We hit an RTC tick interrupt.
		rtc_clear_flag(RTC_SEC);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 fc90 	bl	8001324 <rtc_clear_flag>
		tickCount++;
 8000a04:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <rtc_isr+0x28>)
 8000a06:	6813      	ldr	r3, [r2, #0]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	6013      	str	r3, [r2, #0]
		//  Call the tick function.
		if (tickFunc != NULL) { tickFunc(); }
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <rtc_isr+0x2c>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	b113      	cbz	r3, 8000a18 <rtc_isr+0x24>
		//  Call the alarm function.
		if (alarmFunc != NULL) { alarmFunc(); }
		return;
	}
#endif  //  NOTUSED
}
 8000a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (tickFunc != NULL) { tickFunc(); }
 8000a16:	4718      	bx	r3
}
 8000a18:	bd10      	pop	{r4, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000464 	.word	0x20000464
 8000a20:	2000045c 	.word	0x2000045c

08000a24 <rtc_alarm_isr>:

void rtc_alarm_isr(void) {
 8000a24:	b510      	push	{r4, lr}
	//  Interrupt Service Routine for RTC Alarm Wakeup.  Don't call any I/O functions here.
	//  The RTC alarm appears as EXTI 17 which must be reset independently of the RTC alarm flag.
	exti_reset_request(EXTI17);
 8000a26:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a2a:	f000 fce3 	bl	80013f4 <exti_reset_request>
	rtc_clear_flag(RTC_ALR);
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f000 fc78 	bl	8001324 <rtc_clear_flag>
	alarmCount++;
 8000a34:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <rtc_alarm_isr+0x28>)
 8000a36:	6813      	ldr	r3, [r2, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	6013      	str	r3, [r2, #0]
	//  Call the alarm function.
	if (alarmFunc != NULL) { alarmFunc(); }
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <rtc_alarm_isr+0x2c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	b113      	cbz	r3, 8000a48 <rtc_alarm_isr+0x24>
}
 8000a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (alarmFunc != NULL) { alarmFunc(); }
 8000a46:	4718      	bx	r3
}
 8000a48:	bd10      	pop	{r4, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000458 	.word	0x20000458
 8000a50:	20000460 	.word	0x20000460

08000a54 <usart2_isr>:
}

void usart2_isr(void) {
    //  Interrupt service routine for USART2. We enqueue each byte received.
	//  Check if we were called because of received data (RXNE). */
	if (((USART_CR1(USART2) & USART_CR1_RXNEIE) != 0) &&
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <usart2_isr+0x40>)
void usart2_isr(void) {
 8000a56:	b510      	push	{r4, lr}
	if (((USART_CR1(USART2) & USART_CR1_RXNEIE) != 0) &&
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	069a      	lsls	r2, r3, #26
 8000a5c:	d518      	bpl.n	8000a90 <usart2_isr+0x3c>
	    ((USART_SR(USART2) & USART_SR_RXNE) != 0)) {
 8000a5e:	480e      	ldr	r0, [pc, #56]	; (8000a98 <usart2_isr+0x44>)
 8000a60:	6803      	ldr	r3, [r0, #0]
	if (((USART_CR1(USART2) & USART_CR1_RXNEIE) != 0) &&
 8000a62:	069b      	lsls	r3, r3, #26
 8000a64:	d514      	bpl.n	8000a90 <usart2_isr+0x3c>
		//  Read the next received byte and add to response queue.
		uint8_t ch = usart_recv(USART2);
 8000a66:	f001 f84b 	bl	8001b00 <usart_recv>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <usart2_isr+0x48>)
 8000a6c:	6819      	ldr	r1, [r3, #0]
        write_index_(0), read_index_(0)
    {}

    static size_t next_index(size_t arg, size_t max_size)
    {
        size_t ret = arg + 1;
 8000a6e:	1c4a      	adds	r2, r1, #1
        while (BOOST_UNLIKELY(ret >= max_size))
 8000a70:	2a25      	cmp	r2, #37	; 0x25
 8000a72:	d901      	bls.n	8000a78 <usart2_isr+0x24>
            ret -= max_size;
 8000a74:	3a26      	subs	r2, #38	; 0x26
 8000a76:	e7fb      	b.n	8000a70 <usart2_isr+0x1c>
 8000a78:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8000a7a:	f3bf 8f5b 	dmb	ish
    bool push(T const & t, T * buffer, size_t max_size)
    {
        const size_t write_index = write_index_.load(memory_order_relaxed);  // only written from push thread
        const size_t next = next_index(write_index, max_size);

        if (next == read_index_.load(memory_order_acquire))
 8000a7e:	42a2      	cmp	r2, r4
 8000a80:	d006      	beq.n	8000a90 <usart2_isr+0x3c>
            return false; /* ringbuffer is full */

        new (buffer + write_index) T(t); // copy-construct
 8000a82:	4c07      	ldr	r4, [pc, #28]	; (8000aa0 <usart2_isr+0x4c>)
 8000a84:	42cc      	cmn	r4, r1
 8000a86:	bf18      	it	ne
 8000a88:	5460      	strbne	r0, [r4, r1]
	__atomic_store_n(&_M_i, __i, __m);
 8000a8a:	f3bf 8f5b 	dmb	ish
 8000a8e:	601a      	str	r2, [r3, #0]
        responseQueue.push(ch);
	}
}
 8000a90:	bd10      	pop	{r4, pc}
 8000a92:	bf00      	nop
 8000a94:	4000440c 	.word	0x4000440c
 8000a98:	40004400 	.word	0x40004400
 8000a9c:	20002190 	.word	0x20002190
 8000aa0:	200021d4 	.word	0x200021d4

08000aa4 <reset_handler>:
	//  We also call the constructors.  The vector table points to this function.
	volatile unsigned *src, *boot_dest;
	funcp_t *fp;

	//  Copy Bootloader data section from ROM to RAM.
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 8000aa4:	2200      	movs	r2, #0
void reset_handler(void) {
 8000aa6:	b538      	push	{r3, r4, r5, lr}
 8000aa8:	4925      	ldr	r1, [pc, #148]	; (8000b40 <reset_handler+0x9c>)
 8000aaa:	4c26      	ldr	r4, [pc, #152]	; (8000b44 <reset_handler+0xa0>)
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 8000aac:	4826      	ldr	r0, [pc, #152]	; (8000b48 <reset_handler+0xa4>)
 8000aae:	1853      	adds	r3, r2, r1
 8000ab0:	4283      	cmp	r3, r0
 8000ab2:	d321      	bcc.n	8000af8 <reset_handler+0x54>
		src++, boot_dest++) {
		*boot_dest = *src;
	}

	//  Init variables in Bootloader BSS section to null.
	while (boot_dest < &_boot_ebss) { *boot_dest++ = 0; }
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4a25      	ldr	r2, [pc, #148]	; (8000b4c <reset_handler+0xa8>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d321      	bcc.n	8000b00 <reset_handler+0x5c>

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 8000abc:	4a24      	ldr	r2, [pc, #144]	; (8000b50 <reset_handler+0xac>)
    if (hal_bss_test != 0x0 || hal_data_test != 0x87654321) {
 8000abe:	4c25      	ldr	r4, [pc, #148]	; (8000b54 <reset_handler+0xb0>)
	SCB_CCR |= SCB_CCR_STKALIGN;
 8000ac0:	6813      	ldr	r3, [r2, #0]
 8000ac2:	4d25      	ldr	r5, [pc, #148]	; (8000b58 <reset_handler+0xb4>)
 8000ac4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ac8:	6013      	str	r3, [r2, #0]
    target_enable_debug();       //  Uncomment to allow display of debug messages in development devices. NOTE: This will hang if no Arm Semihosting debugger is attached.
 8000aca:	f000 f985 	bl	8000dd8 <target_enable_debug>
    target_init();               //  Init the STM32 platform.
 8000ace:	f000 f8ab 	bl	8000c28 <target_init>
    if (hal_bss_test != 0x0 || hal_data_test != 0x87654321) {
 8000ad2:	6822      	ldr	r2, [r4, #0]
 8000ad4:	b91a      	cbnz	r2, 8000ade <reset_handler+0x3a>
 8000ad6:	682a      	ldr	r2, [r5, #0]
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <reset_handler+0xb8>)
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d025      	beq.n	8000b2a <reset_handler+0x86>
        debug_print("*** hal bss/data failed, bss_test = "); debug_printhex_unsigned(hal_bss_test);
 8000ade:	4820      	ldr	r0, [pc, #128]	; (8000b60 <reset_handler+0xbc>)
 8000ae0:	f001 fefb 	bl	80028da <debug_print>
 8000ae4:	6820      	ldr	r0, [r4, #0]
 8000ae6:	f001 ff2a 	bl	800293e <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(hal_data_test);
 8000aea:	481e      	ldr	r0, [pc, #120]	; (8000b64 <reset_handler+0xc0>)
 8000aec:	f001 fef5 	bl	80028da <debug_print>
 8000af0:	6828      	ldr	r0, [r5, #0]
 8000af2:	f001 ff24 	bl	800293e <debug_printhex_unsigned>
 8000af6:	e7fe      	b.n	8000af6 <reset_handler+0x52>
		*boot_dest = *src;
 8000af8:	5913      	ldr	r3, [r2, r4]
 8000afa:	5053      	str	r3, [r2, r1]
 8000afc:	3204      	adds	r2, #4
 8000afe:	e7d6      	b.n	8000aae <reset_handler+0xa>
	while (boot_dest < &_boot_ebss) { *boot_dest++ = 0; }
 8000b00:	6019      	str	r1, [r3, #0]
 8000b02:	3304      	adds	r3, #4
 8000b04:	e7d8      	b.n	8000ab8 <reset_handler+0x14>
	//  TODO: Fix these bootloader constructors:
	// .init_array    0x0000000008009778        0x4 .pioenvs/bluepill_f103c8/src/uart.o
 	// .init_array    0x000000000800977c        0x4 .pioenvs/bluepill_f103c8/lib33e/libuartint.a(uartint.o)
 	// .init_array    0x0000000008009780        0x4 .pioenvs/bluepill_f103c8/lib3e7/libcodal-core.a(ManagedString.o)
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
		(*fp)();
 8000b06:	f854 3b04 	ldr.w	r3, [r4], #4
 8000b0a:	4798      	blx	r3
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 8000b0c:	42ac      	cmp	r4, r5
 8000b0e:	d3fa      	bcc.n	8000b06 <reset_handler+0x62>
	}
	for (fp = &__boot_init_array_start; fp < &__boot_init_array_end; fp++) {
 8000b10:	4c15      	ldr	r4, [pc, #84]	; (8000b68 <reset_handler+0xc4>)
 8000b12:	4d16      	ldr	r5, [pc, #88]	; (8000b6c <reset_handler+0xc8>)
 8000b14:	42ac      	cmp	r4, r5
 8000b16:	d30b      	bcc.n	8000b30 <reset_handler+0x8c>
		(*fp)();
	}

    //  Start the bootloader.  This function will not return if the bootloader decides to run in Bootloader Mode (polling forever for USB commands).
    bootloader_start();
 8000b18:	f002 f974 	bl	8002e04 <bootloader_start>

	//  If we return here, that means we are running in Application Mode.
	//  Call the application's entry point. application_start() is always located at a fixed address (_text) so we can change the application easily.
	application_start();
 8000b1c:	f006 fc70 	bl	8007400 <application_start>

	//  TODO: We should not allow our low-level STM32 functions to have C++ destructors.
	//  Application destructors will be called by application_start().
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 8000b20:	4c13      	ldr	r4, [pc, #76]	; (8000b70 <reset_handler+0xcc>)
 8000b22:	4d14      	ldr	r5, [pc, #80]	; (8000b74 <reset_handler+0xd0>)
 8000b24:	42ac      	cmp	r4, r5
 8000b26:	d307      	bcc.n	8000b38 <reset_handler+0x94>
		(*fp)();
	}

}
 8000b28:	bd38      	pop	{r3, r4, r5, pc}
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 8000b2a:	4c13      	ldr	r4, [pc, #76]	; (8000b78 <reset_handler+0xd4>)
 8000b2c:	4d13      	ldr	r5, [pc, #76]	; (8000b7c <reset_handler+0xd8>)
 8000b2e:	e7ed      	b.n	8000b0c <reset_handler+0x68>
		(*fp)();
 8000b30:	f854 3b04 	ldr.w	r3, [r4], #4
 8000b34:	4798      	blx	r3
 8000b36:	e7ed      	b.n	8000b14 <reset_handler+0x70>
		(*fp)();
 8000b38:	f854 3b04 	ldr.w	r3, [r4], #4
 8000b3c:	4798      	blx	r3
 8000b3e:	e7f1      	b.n	8000b24 <reset_handler+0x80>
 8000b40:	20000000 	.word	0x20000000
 8000b44:	08004f74 	.word	0x08004f74
 8000b48:	20000168 	.word	0x20000168
 8000b4c:	200008a8 	.word	0x200008a8
 8000b50:	e000ed14 	.word	0xe000ed14
 8000b54:	20000744 	.word	0x20000744
 8000b58:	20000040 	.word	0x20000040
 8000b5c:	87654321 	.word	0x87654321
 8000b60:	08004498 	.word	0x08004498
 8000b64:	080044bd 	.word	0x080044bd
 8000b68:	08004f74 	.word	0x08004f74
 8000b6c:	08004f74 	.word	0x08004f74
 8000b70:	08004f74 	.word	0x08004f74
 8000b74:	08004f74 	.word	0x08004f74
 8000b78:	08004f74 	.word	0x08004f74
 8000b7c:	08004f74 	.word	0x08004f74

08000b80 <_ZL10timer_tickv>:
        }
    }
    if (prev_poll_status > 0) { debug_print("} "); }
}

static void timer_tick() {
 8000b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!bootloader_callback) { return; }
 8000b84:	4e17      	ldr	r6, [pc, #92]	; (8000be4 <_ZL10timer_tickv+0x64>)
 8000b86:	6833      	ldr	r3, [r6, #0]
 8000b88:	b31b      	cbz	r3, 8000bd2 <_ZL10timer_tickv+0x52>
    poll_status = bootloader_callback();
 8000b8a:	4798      	blx	r3
 8000b8c:	4c16      	ldr	r4, [pc, #88]	; (8000be8 <_ZL10timer_tickv+0x68>)
    prev_poll_status = poll_status;
 8000b8e:	4f17      	ldr	r7, [pc, #92]	; (8000bec <_ZL10timer_tickv+0x6c>)
    poll_status = bootloader_callback();
 8000b90:	6020      	str	r0, [r4, #0]
    prev_poll_status = poll_status;
 8000b92:	6822      	ldr	r2, [r4, #0]
 8000b94:	603a      	str	r2, [r7, #0]
    if (poll_status > 0) { debug_print("u{ "); }
 8000b96:	6822      	ldr	r2, [r4, #0]
 8000b98:	2a00      	cmp	r2, #0
 8000b9a:	dd02      	ble.n	8000ba2 <_ZL10timer_tickv+0x22>
 8000b9c:	4814      	ldr	r0, [pc, #80]	; (8000bf0 <_ZL10timer_tickv+0x70>)
 8000b9e:	f001 fe9c 	bl	80028da <debug_print>
        poll_status = 0;       //  Continue polling a few times for subsequent USB requests.
 8000ba2:	f04f 0800 	mov.w	r8, #0
    while (poll_status > 0) {  //  If we receive any USB requests,,,
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	dd0c      	ble.n	8000bc6 <_ZL10timer_tickv+0x46>
        poll_status = 0;       //  Continue polling a few times for subsequent USB requests.
 8000bac:	250a      	movs	r5, #10
 8000bae:	f8c4 8000 	str.w	r8, [r4]
            poll_status = poll_status | bootloader_callback();
 8000bb2:	6833      	ldr	r3, [r6, #0]
 8000bb4:	4798      	blx	r3
 8000bb6:	6823      	ldr	r3, [r4, #0]
 8000bb8:	3d01      	subs	r5, #1
 8000bba:	4318      	orrs	r0, r3
 8000bbc:	b2ad      	uxth	r5, r5
 8000bbe:	6020      	str	r0, [r4, #0]
        for (uint16_t i = 0; i < MAX_BURST_POLL; i++) {
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d1f6      	bne.n	8000bb2 <_ZL10timer_tickv+0x32>
 8000bc4:	e7ef      	b.n	8000ba6 <_ZL10timer_tickv+0x26>
    if (prev_poll_status > 0) { debug_print("} "); }
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dd02      	ble.n	8000bd2 <_ZL10timer_tickv+0x52>
 8000bcc:	4809      	ldr	r0, [pc, #36]	; (8000bf4 <_ZL10timer_tickv+0x74>)
 8000bce:	f001 fe84 	bl	80028da <debug_print>
    //  This is called every millisecond.  
    //  If bootloader is running in background, call it to handle USB requests.
    poll_bootloader();
    //  If Codal Timer exists, update the timer.
    if (tick_callback) { tick_callback(); }
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <_ZL10timer_tickv+0x78>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	b103      	cbz	r3, 8000bda <_ZL10timer_tickv+0x5a>
 8000bd8:	4798      	blx	r3
    //  Call cocoOS at every tick.
    os_tick();
}
 8000bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    os_tick();
 8000bde:	f001 bd18 	b.w	8002612 <os_tick>
 8000be2:	bf00      	nop
 8000be4:	20000178 	.word	0x20000178
 8000be8:	20000168 	.word	0x20000168
 8000bec:	20000174 	.word	0x20000174
 8000bf0:	080044cc 	.word	0x080044cc
 8000bf4:	080044d0 	.word	0x080044d0
 8000bf8:	2000016c 	.word	0x2000016c

08000bfc <_ZL11timer_alarmv>:
        debug_print(";");
        poll_bootloader();
    }
#endif  //  NOTUSED
    //  If Codal Timer exists, update the timer.
    if (alarm_callback) { alarm_callback(); }
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <_ZL11timer_alarmv+0x24>)
static void timer_alarm() {
 8000bfe:	b510      	push	{r4, lr}
    if (alarm_callback) { alarm_callback(); }
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	b113      	cbz	r3, 8000c0a <_ZL11timer_alarmv+0xe>
    else { if (millis() < 200) { debug_print("a? "); } }
}
 8000c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (alarm_callback) { alarm_callback(); }
 8000c08:	4718      	bx	r3
    else { if (millis() < 200) { debug_print("a? "); } }
 8000c0a:	f001 ffb1 	bl	8002b70 <millis>
 8000c0e:	28c7      	cmp	r0, #199	; 0xc7
 8000c10:	d804      	bhi.n	8000c1c <_ZL11timer_alarmv+0x20>
}
 8000c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else { if (millis() < 200) { debug_print("a? "); } }
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <_ZL11timer_alarmv+0x28>)
 8000c18:	f001 be5f 	b.w	80028da <debug_print>
}
 8000c1c:	bd10      	pop	{r4, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000170 	.word	0x20000170
 8000c24:	080044d3 	.word	0x080044d3

08000c28 <target_init>:

void target_init(void) {
 8000c28:	b508      	push	{r3, lr}
    //  Blue Pill specific initialisation...
    if (initialised) { return; }  //  Already initialised, skip.
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <target_init+0x24>)
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	b95a      	cbnz	r2, 8000c48 <target_init+0x20>
    initialised = true;
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]

    //  Init the platform, cocoOS and create any system objects.
    platform_setup();  //  STM32 platform setup.
 8000c34:	f001 fe96 	bl	8002964 <platform_setup>
    os_init();         //  Init cocoOS before creating any multitasking objects.
 8000c38:	f001 fbaa 	bl	8002390 <os_init>
    // TODO: init_irqs();  //  Init the interrupt routines.

    //  Start the STM32 timer to generate millisecond-ticks for measuring elapsed time.
    platform_start_timer(timer_tick, timer_alarm);
 8000c3c:	4904      	ldr	r1, [pc, #16]	; (8000c50 <target_init+0x28>)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <target_init+0x2c>)
    //  Display the dmesg log when idle.
    //  TODO: codal_dmesg_set_flush_fn(target_dmesg_flush);

    //  TODO: Seed our random number generator
    //  seedRandom();
}
 8000c40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    platform_start_timer(timer_tick, timer_alarm);
 8000c44:	f001 bee4 	b.w	8002a10 <platform_start_timer>
}
 8000c48:	bd08      	pop	{r3, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000180 	.word	0x20000180
 8000c50:	08000bfd 	.word	0x08000bfd
 8000c54:	08000b81 	.word	0x08000b81

08000c58 <target_wait_for_event>:
static volatile uint32_t last_flush = 0;

void target_wait_for_event() {
    //  Run background tasks and sleep until an event happens e.g. alarm.
  	//  debug_println("----target_wait_for_event"); // 
    if (!initialised) { return; }  //  If not initialised, quit.
 8000c58:	4b02      	ldr	r3, [pc, #8]	; (8000c64 <target_wait_for_event+0xc>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b103      	cbz	r3, 8000c60 <target_wait_for_event+0x8>
        last_flush = millis();
        debug_flush();
        target_dmesg_flush();
    }
#endif  //  NOTUSED
    __asm("wfe");  //  Allow CPU to go to sleep.
 8000c5e:	bf20      	wfe
}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20000180 	.word	0x20000180

08000c68 <target_wait>:

void target_wait(uint32_t milliseconds) {
 8000c68:	b570      	push	{r4, r5, r6, lr}
    //  Wait for the specified number of milliseconds.
    if (milliseconds <= 0) { return; }
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	b360      	cbz	r0, 8000cc8 <target_wait+0x60>
    if (!initialised) { return; }  //  If not initialised, quit.
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <target_wait+0x64>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b34b      	cbz	r3, 8000cc8 <target_wait+0x60>
    debug_print("wt <"); debug_print_unsigned(milliseconds / 1000);
 8000c74:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <target_wait+0x68>)
 8000c76:	f001 fe30 	bl	80028da <debug_print>
 8000c7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c7e:	fbb4 f0f0 	udiv	r0, r4, r0
 8000c82:	f001 fe39 	bl	80028f8 <debug_print_unsigned>
    uint32_t end = millis() + milliseconds;
 8000c86:	f001 ff73 	bl	8002b70 <millis>
}

static void os_schedule( void ) {
    //  Call this to schedule a task.
    if (!os_running()) { return; }  //  Don't schedule if cocoOS scheduler is not started.
    running_tid = NO_TID;
 8000c8a:	26ff      	movs	r6, #255	; 0xff
 8000c8c:	4d11      	ldr	r5, [pc, #68]	; (8000cd4 <target_wait+0x6c>)
    uint32_t end = millis() + milliseconds;
 8000c8e:	4404      	add	r4, r0
        if (millis() >= end) { break; }
 8000c90:	f001 ff6e 	bl	8002b70 <millis>
 8000c94:	4284      	cmp	r4, r0
 8000c96:	d912      	bls.n	8000cbe <target_wait+0x56>
        if (os_running()) { os_schedule(); }  //  Schedule a cocoOS task to run.
 8000c98:	f001 fb94 	bl	80023c4 <os_running>
 8000c9c:	b150      	cbz	r0, 8000cb4 <target_wait+0x4c>
    if (!os_running()) { return; }  //  Don't schedule if cocoOS scheduler is not started.
 8000c9e:	f001 fb91 	bl	80023c4 <os_running>
 8000ca2:	b138      	cbz	r0, 8000cb4 <target_wait+0x4c>
    running_tid = NO_TID;
 8000ca4:	702e      	strb	r6, [r5, #0]
#ifdef ROUND_ROBIN
    /* Find next ready task */
    running_tid = os_task_next_ready_task();
#else
    /* Find the highest prio task ready to run */
    running_tid = os_task_highest_prio_ready_task();   
 8000ca6:	f001 fbf5 	bl	8002494 <os_task_highest_prio_ready_task>
#endif    
    if ( running_tid != NO_TID ) {
 8000caa:	28ff      	cmp	r0, #255	; 0xff
    running_tid = os_task_highest_prio_ready_task();   
 8000cac:	7028      	strb	r0, [r5, #0]
    if ( running_tid != NO_TID ) {
 8000cae:	d003      	beq.n	8000cb8 <target_wait+0x50>
        os_task_run();
 8000cb0:	f001 fc80 	bl	80025b4 <os_task_run>
        __asm("wfe");  //  Allow CPU to go to sleep.
 8000cb4:	bf20      	wfe
 8000cb6:	e7eb      	b.n	8000c90 <target_wait+0x28>
    }
    else {
        os_cbkSleep();
 8000cb8:	f001 fcaa 	bl	8002610 <os_cbkSleep>
 8000cbc:	e7fa      	b.n	8000cb4 <target_wait+0x4c>
    debug_print("> ");
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <target_wait+0x70>)
}
 8000cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    debug_print("> ");
 8000cc4:	f001 be09 	b.w	80028da <debug_print>
}
 8000cc8:	bd70      	pop	{r4, r5, r6, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000180 	.word	0x20000180
 8000cd0:	080044ea 	.word	0x080044ea
 8000cd4:	20000848 	.word	0x20000848
 8000cd8:	08004768 	.word	0x08004768

08000cdc <target_panic>:
void target_panic(int statusCode) {
 8000cdc:	b508      	push	{r3, lr}
 8000cde:	4604      	mov	r4, r0
 *
 * Mask all interrupts globally
 */
static inline void cm_disable_interrupts(void)
{
	__asm__("CPSID I\n");
 8000ce0:	b672      	cpsid	i
	debug_print("*****target_panic ");
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <target_panic+0x1c>)
 8000ce4:	f001 fdf9 	bl	80028da <debug_print>
	debug_println((int) statusCode);
 8000ce8:	4620      	mov	r0, r4
 8000cea:	f001 fde7 	bl	80028bc <_Z13debug_printlni>
	debug_flush();
 8000cee:	f001 fdf1 	bl	80028d4 <debug_flush>
        __asm("wfe");  //  Allow CPU to go to sleep.
 8000cf2:	bf20      	wfe
 8000cf4:	e7fd      	b.n	8000cf2 <target_panic+0x16>
 8000cf6:	bf00      	nop
 8000cf8:	080044d7 	.word	0x080044d7

08000cfc <fiber_initial_stack_base>:
}
 8000cfc:	4800      	ldr	r0, [pc, #0]	; (8000d00 <fiber_initial_stack_base+0x4>)
 8000cfe:	4770      	bx	lr
 8000d00:	20005000 	.word	0x20005000

08000d04 <test_codal>:
void test_codal() {
 8000d04:	b538      	push	{r3, r4, r5, lr}
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
 8000d06:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <test_codal+0x54>)
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
 8000d08:	4814      	ldr	r0, [pc, #80]	; (8000d5c <test_codal+0x58>)
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
 8000d0a:	681d      	ldr	r5, [r3, #0]
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
 8000d0c:	4c14      	ldr	r4, [pc, #80]	; (8000d60 <test_codal+0x5c>)
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
 8000d0e:	f001 fde4 	bl	80028da <debug_print>
 8000d12:	4628      	mov	r0, r5
 8000d14:	f001 fe13 	bl	800293e <debug_printhex_unsigned>
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
 8000d18:	4812      	ldr	r0, [pc, #72]	; (8000d64 <test_codal+0x60>)
 8000d1a:	f001 fdde 	bl	80028da <debug_print>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f001 fe0d 	bl	800293e <debug_printhex_unsigned>
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
 8000d24:	4810      	ldr	r0, [pc, #64]	; (8000d68 <test_codal+0x64>)
 8000d26:	f001 fdd8 	bl	80028da <debug_print>
	PROCESSOR_WORD_TYPE size = end - start;
 8000d2a:	1b60      	subs	r0, r4, r5
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
 8000d2c:	0a80      	lsrs	r0, r0, #10
 8000d2e:	f001 fd61 	bl	80027f4 <_Z11debug_printj>
	debug_print(" KB, stack used: "); debug_print((size_t) 
 8000d32:	480e      	ldr	r0, [pc, #56]	; (8000d6c <test_codal+0x68>)
 8000d34:	f001 fdd1 	bl	80028da <debug_print>
        ((PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - get_current_sp()) >> 10);
 8000d38:	466b      	mov	r3, sp
 8000d3a:	f1c3 5000 	rsb	r0, r3, #536870912	; 0x20000000
 8000d3e:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
	debug_print(" KB, stack used: "); debug_print((size_t) 
 8000d42:	0a80      	lsrs	r0, r0, #10
 8000d44:	f001 fd56 	bl	80027f4 <_Z11debug_printj>
    debug_println(" KB"); debug_flush();
 8000d48:	4809      	ldr	r0, [pc, #36]	; (8000d70 <test_codal+0x6c>)
 8000d4a:	f001 fda9 	bl	80028a0 <debug_println>
}
 8000d4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    debug_println(" KB"); debug_flush();
 8000d52:	f001 bdbf 	b.w	80028d4 <debug_flush>
 8000d56:	bf00      	nop
 8000d58:	20000044 	.word	0x20000044
 8000d5c:	080044ef 	.word	0x080044ef
 8000d60:	20004800 	.word	0x20004800
 8000d64:	080044fc 	.word	0x080044fc
 8000d68:	08004504 	.word	0x08004504
 8000d6c:	0800450d 	.word	0x0800450d
 8000d70:	0800451f 	.word	0x0800451f

08000d74 <target_set_tick_callback>:
    tick_callback = tick_callback0;
 8000d74:	4b01      	ldr	r3, [pc, #4]	; (8000d7c <target_set_tick_callback+0x8>)
 8000d76:	6018      	str	r0, [r3, #0]
}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	2000016c 	.word	0x2000016c

08000d80 <target_set_alarm_callback>:
    alarm_callback = alarm_callback0;
 8000d80:	4b01      	ldr	r3, [pc, #4]	; (8000d88 <target_set_alarm_callback+0x8>)
 8000d82:	6018      	str	r0, [r3, #0]
}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000170 	.word	0x20000170

08000d8c <target_set_bootloader_callback>:
    bootloader_callback = bootloader_callback0;
 8000d8c:	4b01      	ldr	r3, [pc, #4]	; (8000d94 <target_set_bootloader_callback+0x8>)
 8000d8e:	6018      	str	r0, [r3, #0]
}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000178 	.word	0x20000178

08000d98 <target_wait_us>:
    return target_wait(microseconds / 1000);
 8000d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000da0:	f7ff bf62 	b.w	8000c68 <target_wait>

08000da4 <target_enable_irq>:
	__asm__("CPSIE I\n");
 8000da4:	b662      	cpsie	i
}
 8000da6:	4770      	bx	lr

08000da8 <target_disable_irq>:
	__asm__("CPSID I\n");
 8000da8:	b672      	cpsid	i
}
 8000daa:	4770      	bx	lr

08000dac <tcb_allocate>:
    return (void *)malloc(sizeof(PROCESSOR_TCB));
 8000dac:	2040      	movs	r0, #64	; 0x40
 8000dae:	f006 bfd7 	b.w	8007d60 <device_malloc>

08000db2 <tcb_configure_lr>:
    tcbPointer->LR = function;
 8000db2:	6381      	str	r1, [r0, #56]	; 0x38
}
 8000db4:	4770      	bx	lr

08000db6 <tcb_configure_sp>:
    tcbPointer->SP = sp;
 8000db6:	6341      	str	r1, [r0, #52]	; 0x34
}
 8000db8:	4770      	bx	lr

08000dba <tcb_configure_stack_base>:
    tcbPointer->stack_base = stack_base;
 8000dba:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8000dbc:	4770      	bx	lr

08000dbe <tcb_get_stack_base>:
}
 8000dbe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000dc0:	4770      	bx	lr

08000dc2 <get_current_sp>:
}
 8000dc2:	4668      	mov	r0, sp
 8000dc4:	4770      	bx	lr

08000dc6 <tcb_get_sp>:
}
 8000dc6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000dc8:	4770      	bx	lr

08000dca <tcb_configure_args>:
    tcbPointer->R1 = (uint32_t)cp;
 8000dca:	e9c0 1200 	strd	r1, r2, [r0]
    tcbPointer->R2 = (uint32_t)pm;
 8000dce:	6083      	str	r3, [r0, #8]
}
 8000dd0:	4770      	bx	lr

08000dd2 <_fini>:
    void _fini(void) { }
 8000dd2:	4770      	bx	lr

08000dd4 <__aeabi_atexit>:
    }
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	4770      	bx	lr

08000dd8 <target_enable_debug>:
    enable_debug();   
 8000dd8:	f001 bdea 	b.w	80029b0 <enable_debug>

08000ddc <swap_context>:

    @ Write our core registers into the TCB
    @ First, store the general registers

    @ Skip this is we're given a NULL parameter for the TCB
    CMP     R0, #0
 8000ddc:	2800      	cmp	r0, #0
    BEQ     store_context_complete
 8000dde:	d015      	beq.n	8000e0c <store_context_complete>

    STR     R0, [R0,#0]
 8000de0:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000de2:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000de4:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000de6:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000de8:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000dea:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000dec:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000dee:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000df0:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000df2:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000df4:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000df6:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000df8:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000dfa:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000dfc:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000dfe:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000e00:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000e02:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 8000e04:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8000e06:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8000e08:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000e0a:	6384      	str	r4, [r0, #56]	; 0x38

08000e0c <store_context_complete>:
store_context_complete:
    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stack is usually very small at the point
    @ of scheduling, but we need a lot of capacity for interrupt handling and other functions.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R1, #0
 8000e0c:	2900      	cmp	r1, #0
    BEQ     store_stack_complete
 8000e0e:	d006      	beq.n	8000e1e <store_stack_complete>

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 8000e10:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

08000e12 <store_stack>:
store_stack:
    SUBS    R4, #4
 8000e12:	3c04      	subs	r4, #4
    SUBS    R1, #4
 8000e14:	3904      	subs	r1, #4

    LDR     R5, [R4]
 8000e16:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 8000e18:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 8000e1a:	42b4      	cmp	r4, r6
    BNE     store_stack
 8000e1c:	d1f9      	bne.n	8000e12 <store_stack>

08000e1e <store_stack_complete>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R2, #56]
 8000e1e:	6b94      	ldr	r4, [r2, #56]	; 0x38
    MOV     LR, R4
 8000e20:	46a6      	mov	lr, r4
    LDR     R6, [R2, #52]
 8000e22:	6b56      	ldr	r6, [r2, #52]	; 0x34
    MOV     SP, R6
 8000e24:	46b5      	mov	sp, r6

    @ Copy the stack in.
    @ n.b. we do this after setting the SP to make comparisons easier.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R3, #0
 8000e26:	2b00      	cmp	r3, #0
    BEQ     restore_stack_complete
 8000e28:	d006      	beq.n	8000e38 <restore_stack_complete>

    LDR     R4, [R2,#60]         @ Load R4 with the fiber's defined stack_base.
 8000e2a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c

08000e2c <restore_stack>:

restore_stack:
    SUBS    R4, #4
 8000e2c:	3c04      	subs	r4, #4
    SUBS    R3, #4
 8000e2e:	3b04      	subs	r3, #4

    LDR     R5, [R3]
 8000e30:	681d      	ldr	r5, [r3, #0]
    STR     R5, [R4]
 8000e32:	6025      	str	r5, [r4, #0]

    CMP     R4, R6
 8000e34:	42b4      	cmp	r4, r6
    BNE     restore_stack
 8000e36:	d1f9      	bne.n	8000e2c <restore_stack>

08000e38 <restore_stack_complete>:

restore_stack_complete:
    LDR     R4, [R2, #48]
 8000e38:	6b14      	ldr	r4, [r2, #48]	; 0x30
    MOV     R12, R4
 8000e3a:	46a4      	mov	ip, r4
    LDR     R4, [R2, #44]
 8000e3c:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    MOV     R11, R4
 8000e3e:	46a3      	mov	fp, r4
    LDR     R4, [R2, #40]
 8000e40:	6a94      	ldr	r4, [r2, #40]	; 0x28
    MOV     R10, R4
 8000e42:	46a2      	mov	sl, r4
    LDR     R4, [R2, #36]
 8000e44:	6a54      	ldr	r4, [r2, #36]	; 0x24
    MOV     R9, R4
 8000e46:	46a1      	mov	r9, r4
    LDR     R4, [R2, #32]
 8000e48:	6a14      	ldr	r4, [r2, #32]
    MOV     R8, R4
 8000e4a:	46a0      	mov	r8, r4

    LDR     R7, [R2, #28]
 8000e4c:	69d7      	ldr	r7, [r2, #28]
    LDR     R6, [R2, #24]
 8000e4e:	6996      	ldr	r6, [r2, #24]
    LDR     R5, [R2, #20]
 8000e50:	6955      	ldr	r5, [r2, #20]
    LDR     R4, [R2, #16]
 8000e52:	6914      	ldr	r4, [r2, #16]
    LDR     R3, [R2, #12]
 8000e54:	68d3      	ldr	r3, [r2, #12]
    LDR     R1, [R2, #4]
 8000e56:	6851      	ldr	r1, [r2, #4]
    LDR     R0, [R2, #0]
 8000e58:	6810      	ldr	r0, [r2, #0]
    LDR     R2, [R2, #8]
 8000e5a:	6892      	ldr	r2, [r2, #8]

    @ Return to caller (scheduler).
    BX      LR
 8000e5c:	4770      	bx	lr

08000e5e <save_context>:
save_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 8000e5e:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000e60:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000e62:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000e64:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000e66:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000e68:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000e6a:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000e6c:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000e6e:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000e70:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000e72:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000e74:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000e76:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000e78:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000e7a:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000e7c:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000e7e:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000e80:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 8000e82:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8000e84:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8000e86:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000e88:	6384      	str	r4, [r0, #56]	; 0x38

    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stackis usually very small at the point
    @ of sceduling, but we need a lot of capacity for interrupt handling and other functions.

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 8000e8a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

08000e8c <store_stack1>:

store_stack1:
    SUBS    R4, #4
 8000e8c:	3c04      	subs	r4, #4
    SUBS    R1, #4
 8000e8e:	3904      	subs	r1, #4

    LDR     R5, [R4]
 8000e90:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 8000e92:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 8000e94:	42b4      	cmp	r4, r6
    BNE     store_stack1
 8000e96:	d1f9      	bne.n	8000e8c <store_stack1>

    @ Restore scratch registers.

    LDR     R7, [R0, #28]
 8000e98:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 8000e9a:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 8000e9c:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 8000e9e:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 8000ea0:	4770      	bx	lr

08000ea2 <save_register_context>:
save_register_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 8000ea2:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000ea4:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000ea6:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000ea8:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000eaa:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000eac:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000eae:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000eb0:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000eb2:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000eb4:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000eb6:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000eb8:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000eba:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000ebc:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000ebe:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000ec0:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000ec2:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000ec4:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack Pointer and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R4, SP
 8000ec6:	466c      	mov	r4, sp
    STR     R4, [R0,#52]
 8000ec8:	6344      	str	r4, [r0, #52]	; 0x34
    MOV     R4, LR
 8000eca:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000ecc:	6384      	str	r4, [r0, #56]	; 0x38

    @ Restore scratch registers.
    LDR     R4, [R0, #16]
 8000ece:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 8000ed0:	4770      	bx	lr

08000ed2 <restore_register_context>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R0, #56]
 8000ed2:	6b84      	ldr	r4, [r0, #56]	; 0x38
    MOV     LR, R4
 8000ed4:	46a6      	mov	lr, r4
    LDR     R4, [R0, #52]
 8000ed6:	6b44      	ldr	r4, [r0, #52]	; 0x34
    MOV     SP, R4
 8000ed8:	46a5      	mov	sp, r4

    @ High registers...
    LDR     R4, [R0, #48]
 8000eda:	6b04      	ldr	r4, [r0, #48]	; 0x30
    MOV     R12, R4
 8000edc:	46a4      	mov	ip, r4
    LDR     R4, [R0, #44]
 8000ede:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    MOV     R11, R4
 8000ee0:	46a3      	mov	fp, r4
    LDR     R4, [R0, #40]
 8000ee2:	6a84      	ldr	r4, [r0, #40]	; 0x28
    MOV     R10, R4
 8000ee4:	46a2      	mov	sl, r4
    LDR     R4, [R0, #36]
 8000ee6:	6a44      	ldr	r4, [r0, #36]	; 0x24
    MOV     R9, R4
 8000ee8:	46a1      	mov	r9, r4
    LDR     R4, [R0, #32]
 8000eea:	6a04      	ldr	r4, [r0, #32]
    MOV     R8, R4
 8000eec:	46a0      	mov	r8, r4

    @ Low registers...
    LDR     R7, [R0, #28]
 8000eee:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 8000ef0:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 8000ef2:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 8000ef4:	6904      	ldr	r4, [r0, #16]
    LDR     R3, [R0, #12]
 8000ef6:	68c3      	ldr	r3, [r0, #12]
    LDR     R2, [R0, #8]
 8000ef8:	6882      	ldr	r2, [r0, #8]
    LDR     R0, [R0, #0]
 8000efa:	6800      	ldr	r0, [r0, #0]
    LDR     R1, [R0, #4]
 8000efc:	6841      	ldr	r1, [r0, #4]

    @ Return to caller (normally the scheduler).
    BX      LR
 8000efe:	4770      	bx	lr

08000f00 <desig_get_unique_id>:
	return DESIG_FLASH_SIZE;
}

void desig_get_unique_id(uint32_t result[])
{
	result[0] = DESIG_UNIQUE_ID2;
 8000f00:	4b04      	ldr	r3, [pc, #16]	; (8000f14 <desig_get_unique_id+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6003      	str	r3, [r0, #0]
	result[1] = DESIG_UNIQUE_ID1;
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <desig_get_unique_id+0x18>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6043      	str	r3, [r0, #4]
	result[2] = DESIG_UNIQUE_ID0;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <desig_get_unique_id+0x1c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6083      	str	r3, [r0, #8]
}
 8000f12:	4770      	bx	lr
 8000f14:	1ffff7f0 	.word	0x1ffff7f0
 8000f18:	1ffff7ec 	.word	0x1ffff7ec
 8000f1c:	1ffff7e8 	.word	0x1ffff7e8

08000f20 <desig_get_unique_id_as_string>:

void desig_get_unique_id_as_string(char *string,
				   unsigned int string_len)
{
 8000f20:	b530      	push	{r4, r5, lr}
 8000f22:	b085      	sub	sp, #20
 8000f24:	4604      	mov	r4, r0
	int i, len;
	uint8_t device_id[12];
	static const char chars[] = "0123456789ABCDEF";

	desig_get_unique_id((uint32_t *)device_id);
 8000f26:	a801      	add	r0, sp, #4
 8000f28:	f7ff ffea 	bl	8000f00 <desig_get_unique_id>

	/* Each byte produces two characters */
	len = (2 * sizeof(device_id) < string_len) ?
		2 * sizeof(device_id) : string_len - 1;
 8000f2c:	2919      	cmp	r1, #25
 8000f2e:	bf28      	it	cs
 8000f30:	2119      	movcs	r1, #25

	for (i = 0; i < len; i += 2) {
 8000f32:	2300      	movs	r3, #0
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <desig_get_unique_id_as_string+0x44>)
		2 * sizeof(device_id) : string_len - 1;
 8000f36:	3901      	subs	r1, #1
	for (i = 0; i < len; i += 2) {
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	db03      	blt.n	8000f44 <desig_get_unique_id_as_string+0x24>
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
	}

	string[len] = '\0';
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	5463      	strb	r3, [r4, r1]
}
 8000f40:	b005      	add	sp, #20
 8000f42:	bd30      	pop	{r4, r5, pc}
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 8000f44:	aa04      	add	r2, sp, #16
 8000f46:	eb02 0263 	add.w	r2, r2, r3, asr #1
 8000f4a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000f4e:	0915      	lsrs	r5, r2, #4
 8000f50:	5d45      	ldrb	r5, [r0, r5]
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000f52:	f002 020f 	and.w	r2, r2, #15
 8000f56:	5c82      	ldrb	r2, [r0, r2]
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 8000f58:	54e5      	strb	r5, [r4, r3]
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000f5a:	18e5      	adds	r5, r4, r3
 8000f5c:	706a      	strb	r2, [r5, #1]
	for (i = 0; i < len; i += 2) {
 8000f5e:	3302      	adds	r3, #2
 8000f60:	e7ea      	b.n	8000f38 <desig_get_unique_id_as_string+0x18>
 8000f62:	bf00      	nop
 8000f64:	08004558 	.word	0x08004558

08000f68 <rcc_osc_on.part.0>:

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000f68:	4a02      	ldr	r2, [pc, #8]	; (8000f74 <rcc_osc_on.part.0+0xc>)
 8000f6a:	6813      	ldr	r3, [r2, #0]
 8000f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f70:	6013      	str	r3, [r2, #0]
		break;
	case LSI:
		RCC_CSR |= RCC_CSR_LSION;
		break;
	}
}
 8000f72:	4770      	bx	lr
 8000f74:	40021000 	.word	0x40021000

08000f78 <rcc_wait_for_osc_ready>:
	switch (osc) {
 8000f78:	2806      	cmp	r0, #6
 8000f7a:	d809      	bhi.n	8000f90 <rcc_wait_for_osc_ready+0x18>
 8000f7c:	e8df f000 	tbb	[pc, r0]
 8000f80:	13181d22 	.word	0x13181d22
 8000f84:	090e      	.short	0x090e
 8000f86:	04          	.byte	0x04
 8000f87:	00          	.byte	0x00
		while ((RCC_CSR & RCC_CSR_LSIRDY) == 0);
 8000f88:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <rcc_wait_for_osc_ready+0x58>)
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	079b      	lsls	r3, r3, #30
 8000f8e:	d5fc      	bpl.n	8000f8a <rcc_wait_for_osc_ready+0x12>
}
 8000f90:	4770      	bx	lr
		while ((RCC_BDCR & RCC_BDCR_LSERDY) == 0);
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <rcc_wait_for_osc_ready+0x5c>)
 8000f94:	6813      	ldr	r3, [r2, #0]
 8000f96:	0799      	lsls	r1, r3, #30
 8000f98:	d5fc      	bpl.n	8000f94 <rcc_wait_for_osc_ready+0x1c>
 8000f9a:	4770      	bx	lr
		while ((RCC_CR & RCC_CR_HSIRDY) == 0);
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <rcc_wait_for_osc_ready+0x60>)
 8000f9e:	6813      	ldr	r3, [r2, #0]
 8000fa0:	0798      	lsls	r0, r3, #30
 8000fa2:	d5fc      	bpl.n	8000f9e <rcc_wait_for_osc_ready+0x26>
 8000fa4:	4770      	bx	lr
		while ((RCC_CR & RCC_CR_HSERDY) == 0);
 8000fa6:	4a0c      	ldr	r2, [pc, #48]	; (8000fd8 <rcc_wait_for_osc_ready+0x60>)
 8000fa8:	6813      	ldr	r3, [r2, #0]
 8000faa:	039b      	lsls	r3, r3, #14
 8000fac:	d5fc      	bpl.n	8000fa8 <rcc_wait_for_osc_ready+0x30>
 8000fae:	4770      	bx	lr
		while ((RCC_CR & RCC_CR_PLL3RDY) == 0);
 8000fb0:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <rcc_wait_for_osc_ready+0x60>)
 8000fb2:	6813      	ldr	r3, [r2, #0]
 8000fb4:	0099      	lsls	r1, r3, #2
 8000fb6:	d5fc      	bpl.n	8000fb2 <rcc_wait_for_osc_ready+0x3a>
 8000fb8:	4770      	bx	lr
		while ((RCC_CR & RCC_CR_PLL2RDY) == 0);
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <rcc_wait_for_osc_ready+0x60>)
 8000fbc:	6813      	ldr	r3, [r2, #0]
 8000fbe:	0118      	lsls	r0, r3, #4
 8000fc0:	d5fc      	bpl.n	8000fbc <rcc_wait_for_osc_ready+0x44>
 8000fc2:	4770      	bx	lr
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <rcc_wait_for_osc_ready+0x60>)
 8000fc6:	6813      	ldr	r3, [r2, #0]
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	d5fc      	bpl.n	8000fc6 <rcc_wait_for_osc_ready+0x4e>
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40021024 	.word	0x40021024
 8000fd4:	40021020 	.word	0x40021020
 8000fd8:	40021000 	.word	0x40021000

08000fdc <rcc_osc_on>:
	switch (osc) {
 8000fdc:	2806      	cmp	r0, #6
 8000fde:	d80c      	bhi.n	8000ffa <rcc_osc_on+0x1e>
 8000fe0:	e8df f000 	tbb	[pc, r0]
 8000fe4:	110c0604 	.word	0x110c0604
 8000fe8:	1b16      	.short	0x1b16
 8000fea:	1d          	.byte	0x1d
 8000feb:	00          	.byte	0x00
 8000fec:	f7ff bfbc 	b.w	8000f68 <rcc_osc_on.part.0>
		RCC_CR |= RCC_CR_PLL2ON;
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <rcc_osc_on+0x48>)
 8000ff2:	6813      	ldr	r3, [r2, #0]
 8000ff4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
		RCC_CSR |= RCC_CSR_LSION;
 8000ff8:	6013      	str	r3, [r2, #0]
}
 8000ffa:	4770      	bx	lr
		RCC_CR |= RCC_CR_PLL3ON;
 8000ffc:	4a09      	ldr	r2, [pc, #36]	; (8001024 <rcc_osc_on+0x48>)
 8000ffe:	6813      	ldr	r3, [r2, #0]
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001004:	e7f8      	b.n	8000ff8 <rcc_osc_on+0x1c>
		RCC_CR |= RCC_CR_HSEON;
 8001006:	4a07      	ldr	r2, [pc, #28]	; (8001024 <rcc_osc_on+0x48>)
 8001008:	6813      	ldr	r3, [r2, #0]
 800100a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800100e:	e7f3      	b.n	8000ff8 <rcc_osc_on+0x1c>
		RCC_CR |= RCC_CR_HSION;
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <rcc_osc_on+0x48>)
		RCC_CSR |= RCC_CSR_LSION;
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	e7ee      	b.n	8000ff8 <rcc_osc_on+0x1c>
		RCC_BDCR |= RCC_BDCR_LSEON;
 800101a:	4a03      	ldr	r2, [pc, #12]	; (8001028 <rcc_osc_on+0x4c>)
 800101c:	e7f9      	b.n	8001012 <rcc_osc_on+0x36>
		RCC_CSR |= RCC_CSR_LSION;
 800101e:	4a03      	ldr	r2, [pc, #12]	; (800102c <rcc_osc_on+0x50>)
 8001020:	e7f7      	b.n	8001012 <rcc_osc_on+0x36>
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000
 8001028:	40021020 	.word	0x40021020
 800102c:	40021024 	.word	0x40021024

08001030 <rcc_set_sysclk_source>:
@param[in] clk Unsigned int32. System Clock Selection @ref rcc_cfgr_scs
*/

void rcc_set_sysclk_source(uint32_t clk)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8001030:	4a03      	ldr	r2, [pc, #12]	; (8001040 <rcc_set_sysclk_source+0x10>)
 8001032:	6813      	ldr	r3, [r2, #0]
 8001034:	f023 0303 	bic.w	r3, r3, #3
 8001038:	4318      	orrs	r0, r3
 800103a:	6010      	str	r0, [r2, #0]
			(clk << RCC_CFGR_SW_SHIFT);
}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40021004 	.word	0x40021004

08001044 <rcc_set_pll_multiplication_factor>:
@param[in] mul Unsigned int32. PLL multiplication factor @ref rcc_cfgr_pmf
*/

void rcc_set_pll_multiplication_factor(uint32_t mul)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) |
 8001044:	4a03      	ldr	r2, [pc, #12]	; (8001054 <rcc_set_pll_multiplication_factor+0x10>)
 8001046:	6813      	ldr	r3, [r2, #0]
 8001048:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800104c:	ea43 4080 	orr.w	r0, r3, r0, lsl #18
 8001050:	6010      	str	r0, [r2, #0]
			(mul << RCC_CFGR_PLLMUL_SHIFT);
}
 8001052:	4770      	bx	lr
 8001054:	40021004 	.word	0x40021004

08001058 <rcc_set_pll_source>:
@param[in] pllsrc Unsigned int32. PLL clock source @ref rcc_cfgr_pcs
*/

void rcc_set_pll_source(uint32_t pllsrc)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 8001058:	4a03      	ldr	r2, [pc, #12]	; (8001068 <rcc_set_pll_source+0x10>)
 800105a:	6813      	ldr	r3, [r2, #0]
 800105c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001060:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001064:	6010      	str	r0, [r2, #0]
			(pllsrc << 16);
}
 8001066:	4770      	bx	lr
 8001068:	40021004 	.word	0x40021004

0800106c <rcc_set_pllxtpre>:
@param[in] pllxtpre Unsigned int32. HSE division factor @ref rcc_cfgr_hsepre
*/

void rcc_set_pllxtpre(uint32_t pllxtpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 800106c:	4a03      	ldr	r2, [pc, #12]	; (800107c <rcc_set_pllxtpre+0x10>)
 800106e:	6813      	ldr	r3, [r2, #0]
 8001070:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001074:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
 8001078:	6010      	str	r0, [r2, #0]
			(pllxtpre << 17);
}
 800107a:	4770      	bx	lr
 800107c:	40021004 	.word	0x40021004

08001080 <rcc_enable_rtc_clock>:

*/

void rcc_enable_rtc_clock(void)
{
	RCC_BDCR |= RCC_BDCR_RTCEN;
 8001080:	4a02      	ldr	r2, [pc, #8]	; (800108c <rcc_enable_rtc_clock+0xc>)
 8001082:	6813      	ldr	r3, [r2, #0]
 8001084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001088:	6013      	str	r3, [r2, #0]
}
 800108a:	4770      	bx	lr
 800108c:	40021020 	.word	0x40021020

08001090 <rcc_set_rtc_clock_source>:

void rcc_set_rtc_clock_source(enum rcc_osc clock_source)
{
	uint32_t reg32;

	switch (clock_source) {
 8001090:	2806      	cmp	r0, #6
 8001092:	d83d      	bhi.n	8001110 <rcc_set_rtc_clock_source+0x80>
 8001094:	e8df f000 	tbb	[pc, r0]
 8001098:	26373737 	.word	0x26373737
 800109c:	0437      	.short	0x0437
 800109e:	15          	.byte	0x15
 800109f:	00          	.byte	0x00
	case LSE:
		/* Turn the LSE on and wait while it stabilises. */
		RCC_BDCR |= RCC_BDCR_LSEON;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <rcc_set_rtc_clock_source+0x84>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	f042 0201 	orr.w	r2, r2, #1
 80010a8:	601a      	str	r2, [r3, #0]
		while ((reg32 = (RCC_BDCR & RCC_BDCR_LSERDY)) == 0);
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	0790      	lsls	r0, r2, #30
 80010ae:	d5fc      	bpl.n	80010aa <rcc_set_rtc_clock_source+0x1a>

		/* Choose LSE as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80010b6:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 8);
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
		RCC_CSR |= RCC_CSR_LSION;
		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);

		/* Choose LSI as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
		RCC_BDCR |= (1 << 9);
 80010be:	601a      	str	r2, [r3, #0]
		break;
 80010c0:	4770      	bx	lr
		RCC_CSR |= RCC_CSR_LSION;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <rcc_set_rtc_clock_source+0x88>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	f042 0201 	orr.w	r2, r2, #1
 80010ca:	601a      	str	r2, [r3, #0]
		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	0791      	lsls	r1, r2, #30
 80010d0:	d5fc      	bpl.n	80010cc <rcc_set_rtc_clock_source+0x3c>
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <rcc_set_rtc_clock_source+0x84>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80010da:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9);
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010e2:	e7ec      	b.n	80010be <rcc_set_rtc_clock_source+0x2e>
	case HSE:
		/* Turn the HSE on and wait while it stabilises. */
		RCC_CR |= RCC_CR_HSEON;
 80010e4:	4b0d      	ldr	r3, [pc, #52]	; (800111c <rcc_set_rtc_clock_source+0x8c>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010ec:	601a      	str	r2, [r3, #0]
		while ((reg32 = (RCC_CR & RCC_CR_HSERDY)) == 0);
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	0392      	lsls	r2, r2, #14
 80010f2:	d5fc      	bpl.n	80010ee <rcc_set_rtc_clock_source+0x5e>

		/* Choose HSE as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <rcc_set_rtc_clock_source+0x84>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80010fc:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9) | (1 << 8);
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001104:	e7db      	b.n	80010be <rcc_set_rtc_clock_source+0x2e>
	case PLL2:
	case PLL3:
	case HSI:
		/* Unusable clock source, here to prevent warnings. */
		/* Turn off clock sources to RTC. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8001106:	4a03      	ldr	r2, [pc, #12]	; (8001114 <rcc_set_rtc_clock_source+0x84>)
 8001108:	6813      	ldr	r3, [r2, #0]
 800110a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800110e:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021020 	.word	0x40021020
 8001118:	40021024 	.word	0x40021024
 800111c:	40021000 	.word	0x40021000

08001120 <rcc_set_adcpre>:
@param[in] adcpre uint32_t. Prescale divider taken from @ref rcc_cfgr_adcpre
*/

void rcc_set_adcpre(uint32_t adcpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_ADCPRE) |
 8001120:	4a03      	ldr	r2, [pc, #12]	; (8001130 <rcc_set_adcpre+0x10>)
 8001122:	6813      	ldr	r3, [r2, #0]
 8001124:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001128:	ea43 3080 	orr.w	r0, r3, r0, lsl #14
 800112c:	6010      	str	r0, [r2, #0]
			(adcpre << RCC_CFGR_ADCPRE_SHIFT);
}
 800112e:	4770      	bx	lr
 8001130:	40021004 	.word	0x40021004

08001134 <rcc_set_ppre2>:
@param[in] ppre2 Unsigned int32. APB2 prescale factor @ref rcc_cfgr_apb2pre
*/

void rcc_set_ppre2(uint32_t ppre2)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE2) |
 8001134:	4a03      	ldr	r2, [pc, #12]	; (8001144 <rcc_set_ppre2+0x10>)
 8001136:	6813      	ldr	r3, [r2, #0]
 8001138:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800113c:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 8001140:	6010      	str	r0, [r2, #0]
			(ppre2 << RCC_CFGR_PPRE2_SHIFT);
}
 8001142:	4770      	bx	lr
 8001144:	40021004 	.word	0x40021004

08001148 <rcc_set_ppre1>:
@param[in] ppre1 Unsigned int32. APB1 prescale factor @ref rcc_cfgr_apb1pre
*/

void rcc_set_ppre1(uint32_t ppre1)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE1) |
 8001148:	4a03      	ldr	r2, [pc, #12]	; (8001158 <rcc_set_ppre1+0x10>)
 800114a:	6813      	ldr	r3, [r2, #0]
 800114c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001150:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8001154:	6010      	str	r0, [r2, #0]
			(ppre1 << RCC_CFGR_PPRE1_SHIFT);

}
 8001156:	4770      	bx	lr
 8001158:	40021004 	.word	0x40021004

0800115c <rcc_set_hpre>:
@param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
*/

void rcc_set_hpre(uint32_t hpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) |
 800115c:	4a03      	ldr	r2, [pc, #12]	; (800116c <rcc_set_hpre+0x10>)
 800115e:	6813      	ldr	r3, [r2, #0]
 8001160:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001164:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8001168:	6010      	str	r0, [r2, #0]
			(hpre << RCC_CFGR_HPRE_SHIFT);

}
 800116a:	4770      	bx	lr
 800116c:	40021004 	.word	0x40021004

08001170 <rcc_clock_setup_in_hse_8mhz_out_72mhz>:
/** @brief RCC Set System Clock PLL at 72MHz from HSE at 8MHz

*/

void rcc_clock_setup_in_hse_8mhz_out_72mhz(void)
{
 8001170:	b508      	push	{r3, lr}
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(HSI);
 8001172:	2004      	movs	r0, #4
 8001174:	f7ff ff32 	bl	8000fdc <rcc_osc_on>
	rcc_wait_for_osc_ready(HSI);
 8001178:	2004      	movs	r0, #4
 800117a:	f7ff fefd 	bl	8000f78 <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff ff56 	bl	8001030 <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(HSE);
 8001184:	2003      	movs	r0, #3
 8001186:	f7ff ff29 	bl	8000fdc <rcc_osc_on>
	rcc_wait_for_osc_ready(HSE);
 800118a:	2003      	movs	r0, #3
 800118c:	f7ff fef4 	bl	8000f78 <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSECLK);
 8001190:	2001      	movs	r0, #1
 8001192:	f7ff ff4d 	bl	8001030 <rcc_set_sysclk_source>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(RCC_CFGR_HPRE_SYSCLK_NODIV);    /* Set. 72MHz Max. 72MHz */
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff ffe0 	bl	800115c <rcc_set_hpre>
	rcc_set_adcpre(RCC_CFGR_ADCPRE_PCLK2_DIV8);  /* Set.  9MHz Max. 14MHz */
 800119c:	2003      	movs	r0, #3
 800119e:	f7ff ffbf 	bl	8001120 <rcc_set_adcpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_HCLK_DIV2);     /* Set. 36MHz Max. 36MHz */
 80011a2:	2004      	movs	r0, #4
 80011a4:	f7ff ffd0 	bl	8001148 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_HCLK_NODIV);    /* Set. 72MHz Max. 72MHz */
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff ffc3 	bl	8001134 <rcc_set_ppre2>
	 * Sysclk runs with 72MHz -> 2 waitstates.
	 * 0WS from 0-24MHz
	 * 1WS from 24-48MHz
	 * 2WS from 48-72MHz
	 */
	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 80011ae:	2002      	movs	r0, #2
 80011b0:	f000 f926 	bl	8001400 <flash_set_ws>

	/*
	 * Set the PLL multiplication factor to 9.
	 * 8MHz (external) * 9 (multiplier) = 72MHz
	 */
	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL9);
 80011b4:	2007      	movs	r0, #7
 80011b6:	f7ff ff45 	bl	8001044 <rcc_set_pll_multiplication_factor>

	/* Select HSE as PLL source. */
	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff ff4c 	bl	8001058 <rcc_set_pll_source>

	/*
	 * External frequency undivided before entering PLL
	 * (only valid/needed for HSE).
	 */
	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff ff53 	bl	800106c <rcc_set_pllxtpre>
 80011c6:	f7ff fecf 	bl	8000f68 <rcc_osc_on.part.0>

	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(PLL);
	rcc_wait_for_osc_ready(PLL);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff fed4 	bl	8000f78 <rcc_wait_for_osc_ready>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 80011d0:	2002      	movs	r0, #2
 80011d2:	f7ff ff2d 	bl	8001030 <rcc_set_sysclk_source>

	/* Set the peripheral clock frequencies used */
	rcc_ahb_frequency = 72000000;
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x78>)
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x7c>)
	rcc_apb1_frequency = 36000000;
 80011da:	4905      	ldr	r1, [pc, #20]	; (80011f0 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x80>)
	rcc_ahb_frequency = 72000000;
 80011dc:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 36000000;
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x84>)
 80011e0:	6011      	str	r1, [r2, #0]
	rcc_apb2_frequency = 72000000;
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x88>)
 80011e4:	6013      	str	r3, [r2, #0]
}
 80011e6:	bd08      	pop	{r3, pc}
 80011e8:	044aa200 	.word	0x044aa200
 80011ec:	20000048 	.word	0x20000048
 80011f0:	02255100 	.word	0x02255100
 80011f4:	2000004c 	.word	0x2000004c
 80011f8:	20000050 	.word	0x20000050

080011fc <rtc_enter_config_mode>:
void rtc_enter_config_mode(void)
{
	volatile uint32_t reg32;  ////  Added volatile.

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 80011fc:	4a06      	ldr	r2, [pc, #24]	; (8001218 <rtc_enter_config_mode+0x1c>)
{
 80011fe:	b082      	sub	sp, #8
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001200:	6813      	ldr	r3, [r2, #0]
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f9      	beq.n	8001200 <rtc_enter_config_mode+0x4>

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 800120c:	6813      	ldr	r3, [r2, #0]
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	6013      	str	r3, [r2, #0]
}
 8001214:	b002      	add	sp, #8
 8001216:	4770      	bx	lr
 8001218:	40002804 	.word	0x40002804

0800121c <rtc_exit_config_mode>:
void rtc_exit_config_mode(void)
{
	volatile uint32_t reg32;  ////  Added volatile.

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <rtc_exit_config_mode+0x1c>)
{
 800121e:	b082      	sub	sp, #8
	RTC_CRL &= ~RTC_CRL_CNF;
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	f022 0210 	bic.w	r2, r2, #16
 8001226:	601a      	str	r2, [r3, #0]

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	f002 0220 	and.w	r2, r2, #32
 800122e:	9201      	str	r2, [sp, #4]
 8001230:	2a00      	cmp	r2, #0
 8001232:	d0f9      	beq.n	8001228 <rtc_exit_config_mode+0xc>
}
 8001234:	b002      	add	sp, #8
 8001236:	4770      	bx	lr
 8001238:	40002804 	.word	0x40002804

0800123c <rtc_set_alarm_time>:

@param[in] alarm_time uint32_t. time at which the alarm event is triggered.
*/

void rtc_set_alarm_time(uint32_t alarm_time)
{
 800123c:	b508      	push	{r3, lr}
	rtc_enter_config_mode();
 800123e:	f7ff ffdd 	bl	80011fc <rtc_enter_config_mode>
	RTC_ALRL = (alarm_time & 0x0000ffff);
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <rtc_set_alarm_time+0x1c>)
 8001244:	b282      	uxth	r2, r0
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 8001246:	0c00      	lsrs	r0, r0, #16
	RTC_ALRL = (alarm_time & 0x0000ffff);
 8001248:	601a      	str	r2, [r3, #0]
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 800124a:	f843 0c04 	str.w	r0, [r3, #-4]
	rtc_exit_config_mode();
}
 800124e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	rtc_exit_config_mode();
 8001252:	f7ff bfe3 	b.w	800121c <rtc_exit_config_mode>
 8001256:	bf00      	nop
 8001258:	40002824 	.word	0x40002824

0800125c <rtc_set_prescale_val>:

@param[in] prescale_val uint32_t. 20 bit prescale divider.
*/

void rtc_set_prescale_val(uint32_t prescale_val)
{
 800125c:	b508      	push	{r3, lr}
	rtc_enter_config_mode();
 800125e:	f7ff ffcd 	bl	80011fc <rtc_enter_config_mode>
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <rtc_set_prescale_val+0x1c>)
 8001264:	b282      	uxth	r2, r0
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8001266:	f3c0 4003 	ubfx	r0, r0, #16, #4
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 800126a:	601a      	str	r2, [r3, #0]
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 800126c:	f843 0c04 	str.w	r0, [r3, #-4]
	rtc_exit_config_mode();
}
 8001270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	rtc_exit_config_mode();
 8001274:	f7ff bfd2 	b.w	800121c <rtc_exit_config_mode>
 8001278:	4000280c 	.word	0x4000280c

0800127c <rtc_get_counter_val>:
@returns uint32_t: the 32 bit counter value.
*/

uint32_t rtc_get_counter_val(void)
{
	return (RTC_CNTH << 16) | RTC_CNTL;
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <rtc_get_counter_val+0x10>)
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	3304      	adds	r3, #4
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40002818 	.word	0x40002818

08001290 <rtc_set_counter_val>:

@param[in] uint32_t counter_val: 32 bit time setting for the counter.
*/

void rtc_set_counter_val(uint32_t counter_val)
{
 8001290:	b508      	push	{r3, lr}
	rtc_enter_config_mode();
 8001292:	f7ff ffb3 	bl	80011fc <rtc_enter_config_mode>
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <rtc_set_counter_val+0x18>)
 8001298:	0c02      	lsrs	r2, r0, #16
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 800129a:	b280      	uxth	r0, r0
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 800129c:	601a      	str	r2, [r3, #0]
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 800129e:	6058      	str	r0, [r3, #4]
	rtc_exit_config_mode();
}
 80012a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	rtc_exit_config_mode();
 80012a4:	f7ff bfba 	b.w	800121c <rtc_exit_config_mode>
 80012a8:	40002818 	.word	0x40002818

080012ac <rtc_interrupt_enable>:

@param[in] flag_val ::rtcflag_t: The flag to enable.
*/

void rtc_interrupt_enable(rtcflag_t flag_val)
{
 80012ac:	b508      	push	{r3, lr}
	rtc_enter_config_mode();
 80012ae:	f7ff ffa5 	bl	80011fc <rtc_enter_config_mode>

	/* Set the correct interrupt enable. */
	switch (flag_val) {
 80012b2:	2801      	cmp	r0, #1
 80012b4:	d00c      	beq.n	80012d0 <rtc_interrupt_enable+0x24>
 80012b6:	d305      	bcc.n	80012c4 <rtc_interrupt_enable+0x18>
 80012b8:	2802      	cmp	r0, #2
 80012ba:	d00e      	beq.n	80012da <rtc_interrupt_enable+0x2e>
		RTC_CRH |= RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
}
 80012bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	rtc_exit_config_mode();
 80012c0:	f7ff bfac 	b.w	800121c <rtc_exit_config_mode>
		RTC_CRH |= RTC_CRH_SECIE;
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <rtc_interrupt_enable+0x38>)
 80012c6:	6813      	ldr	r3, [r2, #0]
 80012c8:	f043 0301 	orr.w	r3, r3, #1
		RTC_CRH |= RTC_CRH_OWIE;
 80012cc:	6013      	str	r3, [r2, #0]
		break;
 80012ce:	e7f5      	b.n	80012bc <rtc_interrupt_enable+0x10>
		RTC_CRH |= RTC_CRH_ALRIE;
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <rtc_interrupt_enable+0x38>)
 80012d2:	6813      	ldr	r3, [r2, #0]
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	e7f8      	b.n	80012cc <rtc_interrupt_enable+0x20>
		RTC_CRH |= RTC_CRH_OWIE;
 80012da:	4a02      	ldr	r2, [pc, #8]	; (80012e4 <rtc_interrupt_enable+0x38>)
 80012dc:	6813      	ldr	r3, [r2, #0]
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	e7f3      	b.n	80012cc <rtc_interrupt_enable+0x20>
 80012e4:	40002800 	.word	0x40002800

080012e8 <rtc_interrupt_disable>:

@param[in] flag_val ::rtcflag_t: The flag to disable.
*/

void rtc_interrupt_disable(rtcflag_t flag_val)
{
 80012e8:	b508      	push	{r3, lr}
	rtc_enter_config_mode();
 80012ea:	f7ff ff87 	bl	80011fc <rtc_enter_config_mode>

	/* Disable the correct interrupt enable. */
	switch (flag_val) {
 80012ee:	2801      	cmp	r0, #1
 80012f0:	d00c      	beq.n	800130c <rtc_interrupt_disable+0x24>
 80012f2:	d305      	bcc.n	8001300 <rtc_interrupt_disable+0x18>
 80012f4:	2802      	cmp	r0, #2
 80012f6:	d00e      	beq.n	8001316 <rtc_interrupt_disable+0x2e>
		RTC_CRH &= ~RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
}
 80012f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	rtc_exit_config_mode();
 80012fc:	f7ff bf8e 	b.w	800121c <rtc_exit_config_mode>
		RTC_CRH &= ~RTC_CRH_SECIE;
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <rtc_interrupt_disable+0x38>)
 8001302:	6813      	ldr	r3, [r2, #0]
 8001304:	f023 0301 	bic.w	r3, r3, #1
		RTC_CRH &= ~RTC_CRH_OWIE;
 8001308:	6013      	str	r3, [r2, #0]
		break;
 800130a:	e7f5      	b.n	80012f8 <rtc_interrupt_disable+0x10>
		RTC_CRH &= ~RTC_CRH_ALRIE;
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <rtc_interrupt_disable+0x38>)
 800130e:	6813      	ldr	r3, [r2, #0]
 8001310:	f023 0302 	bic.w	r3, r3, #2
 8001314:	e7f8      	b.n	8001308 <rtc_interrupt_disable+0x20>
		RTC_CRH &= ~RTC_CRH_OWIE;
 8001316:	4a02      	ldr	r2, [pc, #8]	; (8001320 <rtc_interrupt_disable+0x38>)
 8001318:	6813      	ldr	r3, [r2, #0]
 800131a:	f023 0304 	bic.w	r3, r3, #4
 800131e:	e7f3      	b.n	8001308 <rtc_interrupt_disable+0x20>
 8001320:	40002800 	.word	0x40002800

08001324 <rtc_clear_flag>:
void rtc_clear_flag(rtcflag_t flag_val)
{
	/* Configuration mode not needed. */

	/* Clear the correct flag. */
	switch (flag_val) {
 8001324:	2801      	cmp	r0, #1
 8001326:	d009      	beq.n	800133c <rtc_clear_flag+0x18>
 8001328:	d302      	bcc.n	8001330 <rtc_clear_flag+0xc>
 800132a:	2802      	cmp	r0, #2
 800132c:	d00b      	beq.n	8001346 <rtc_clear_flag+0x22>
 800132e:	4770      	bx	lr
	case RTC_SEC:
		RTC_CRL &= ~RTC_CRL_SECF;
 8001330:	4a07      	ldr	r2, [pc, #28]	; (8001350 <rtc_clear_flag+0x2c>)
 8001332:	6813      	ldr	r3, [r2, #0]
 8001334:	f023 0301 	bic.w	r3, r3, #1
		break;
	case RTC_ALR:
		RTC_CRL &= ~RTC_CRL_ALRF;
		break;
	case RTC_OW:
		RTC_CRL &= ~RTC_CRL_OWF;
 8001338:	6013      	str	r3, [r2, #0]
		break;
	}
}
 800133a:	4770      	bx	lr
		RTC_CRL &= ~RTC_CRL_ALRF;
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <rtc_clear_flag+0x2c>)
 800133e:	6813      	ldr	r3, [r2, #0]
 8001340:	f023 0302 	bic.w	r3, r3, #2
 8001344:	e7f8      	b.n	8001338 <rtc_clear_flag+0x14>
		RTC_CRL &= ~RTC_CRL_OWF;
 8001346:	4a02      	ldr	r2, [pc, #8]	; (8001350 <rtc_clear_flag+0x2c>)
 8001348:	6813      	ldr	r3, [r2, #0]
 800134a:	f023 0304 	bic.w	r3, r3, #4
 800134e:	e7f3      	b.n	8001338 <rtc_clear_flag+0x14>
 8001350:	40002804 	.word	0x40002804

08001354 <rtc_check_flag>:
uint32_t rtc_check_flag(rtcflag_t flag_val)
{
	uint32_t reg32;

	/* Read correct flag. */
	switch (flag_val) {
 8001354:	2801      	cmp	r0, #1
 8001356:	d009      	beq.n	800136c <rtc_check_flag+0x18>
 8001358:	d303      	bcc.n	8001362 <rtc_check_flag+0xe>
 800135a:	2802      	cmp	r0, #2
 800135c:	d00b      	beq.n	8001376 <rtc_check_flag+0x22>
		break;
	case RTC_OW:
		reg32 = RTC_CRL & RTC_CRL_OWF;
		break;
	default:
		reg32 = 0;
 800135e:	2000      	movs	r0, #0
		break;
	}

	return reg32;
}
 8001360:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_SECF;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <rtc_check_flag+0x2c>)
 8001364:	6818      	ldr	r0, [r3, #0]
 8001366:	f000 0001 	and.w	r0, r0, #1
		break;
 800136a:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_ALRF;
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <rtc_check_flag+0x2c>)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	f000 0002 	and.w	r0, r0, #2
		break;
 8001374:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_OWF;
 8001376:	4b02      	ldr	r3, [pc, #8]	; (8001380 <rtc_check_flag+0x2c>)
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	f000 0004 	and.w	r0, r0, #4
		break;
 800137e:	4770      	bx	lr
 8001380:	40002804 	.word	0x40002804

08001384 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8001384:	4a02      	ldr	r2, [pc, #8]	; (8001390 <pwr_disable_backup_domain_write_protect+0xc>)
 8001386:	6813      	ldr	r3, [r2, #0]
 8001388:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138c:	6013      	str	r3, [r2, #0]
}
 800138e:	4770      	bx	lr
 8001390:	40007000 	.word	0x40007000

08001394 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 8001394:	4a02      	ldr	r2, [pc, #8]	; (80013a0 <pwr_enable_backup_domain_write_protect+0xc>)
 8001396:	6813      	ldr	r3, [r2, #0]
 8001398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800139c:	6013      	str	r3, [r2, #0]
}
 800139e:	4770      	bx	lr
 80013a0:	40007000 	.word	0x40007000

080013a4 <exti_set_trigger>:
#       include <libopencm3/stm32/syscfg.h>
#endif

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
 80013a4:	2901      	cmp	r1, #1
 80013a6:	d00c      	beq.n	80013c2 <exti_set_trigger+0x1e>
 80013a8:	d302      	bcc.n	80013b0 <exti_set_trigger+0xc>
 80013aa:	2902      	cmp	r1, #2
 80013ac:	d011      	beq.n	80013d2 <exti_set_trigger+0x2e>
 80013ae:	4770      	bx	lr
	case EXTI_TRIGGER_RISING:
		EXTI_RTSR |= extis;
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <exti_set_trigger+0x38>)
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	4303      	orrs	r3, r0
 80013b6:	6013      	str	r3, [r2, #0]
		EXTI_FTSR &= ~extis;
 80013b8:	6853      	ldr	r3, [r2, #4]
 80013ba:	ea23 0000 	bic.w	r0, r3, r0
		EXTI_RTSR &= ~extis;
		EXTI_FTSR |= extis;
		break;
	case EXTI_TRIGGER_BOTH:
		EXTI_RTSR |= extis;
		EXTI_FTSR |= extis;
 80013be:	6050      	str	r0, [r2, #4]
		break;
	}
}
 80013c0:	4770      	bx	lr
		EXTI_RTSR &= ~extis;
 80013c2:	4a06      	ldr	r2, [pc, #24]	; (80013dc <exti_set_trigger+0x38>)
 80013c4:	6813      	ldr	r3, [r2, #0]
 80013c6:	ea23 0300 	bic.w	r3, r3, r0
		EXTI_RTSR |= extis;
 80013ca:	6013      	str	r3, [r2, #0]
		EXTI_FTSR |= extis;
 80013cc:	6853      	ldr	r3, [r2, #4]
 80013ce:	4318      	orrs	r0, r3
 80013d0:	e7f5      	b.n	80013be <exti_set_trigger+0x1a>
		EXTI_RTSR |= extis;
 80013d2:	4a02      	ldr	r2, [pc, #8]	; (80013dc <exti_set_trigger+0x38>)
 80013d4:	6813      	ldr	r3, [r2, #0]
 80013d6:	4303      	orrs	r3, r0
 80013d8:	e7f7      	b.n	80013ca <exti_set_trigger+0x26>
 80013da:	bf00      	nop
 80013dc:	40010408 	.word	0x40010408

080013e0 <exti_enable_request>:

void exti_enable_request(uint32_t extis)
{
	/* Enable interrupts. */
	EXTI_IMR |= extis;
 80013e0:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <exti_enable_request+0x10>)
 80013e2:	6813      	ldr	r3, [r2, #0]
 80013e4:	4303      	orrs	r3, r0
 80013e6:	6013      	str	r3, [r2, #0]

	/* Enable events. */
	EXTI_EMR |= extis;
 80013e8:	6853      	ldr	r3, [r2, #4]
 80013ea:	4318      	orrs	r0, r3
 80013ec:	6050      	str	r0, [r2, #4]
}
 80013ee:	4770      	bx	lr
 80013f0:	40010400 	.word	0x40010400

080013f4 <exti_reset_request>:
 * Reset the interrupt request by writing a 1 to the corresponding
 * pending bit register.
 */
void exti_reset_request(uint32_t extis)
{
	EXTI_PR = extis;
 80013f4:	4b01      	ldr	r3, [pc, #4]	; (80013fc <exti_reset_request+0x8>)
 80013f6:	6018      	str	r0, [r3, #0]
}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40010414 	.word	0x40010414

08001400 <flash_set_ws>:
@param[in] uint32_t ws: values from @ref flash_latency.
*/

void flash_set_ws(uint32_t ws)
{
	FLASH_ACR = (FLASH_ACR & ~FLASH_ACR_LATENCY) | ws;
 8001400:	4a03      	ldr	r2, [pc, #12]	; (8001410 <flash_set_ws+0x10>)
 8001402:	6813      	ldr	r3, [r2, #0]
 8001404:	f023 0307 	bic.w	r3, r3, #7
 8001408:	4318      	orrs	r0, r3
 800140a:	6010      	str	r0, [r2, #0]
}
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	40022000 	.word	0x40022000

08001414 <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char **strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 8001414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001418:	461e      	mov	r6, r3
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 800141a:	6803      	ldr	r3, [r0, #0]
{
 800141c:	4605      	mov	r5, r0
 800141e:	4688      	mov	r8, r1
 8001420:	4617      	mov	r7, r2
	usbd_dev = driver->init();
 8001422:	4798      	blx	r3

	usbd_dev->driver = driver;
	usbd_dev->desc = dev;
	usbd_dev->config = conf;
	usbd_dev->strings = strings;
	usbd_dev->num_strings = num_strings;
 8001424:	9b06      	ldr	r3, [sp, #24]
	usbd_dev->driver = driver;
 8001426:	f8c0 50d8 	str.w	r5, [r0, #216]	; 0xd8
	usbd_dev->num_strings = num_strings;
 800142a:	60c3      	str	r3, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 800142c:	9b07      	ldr	r3, [sp, #28]
	usbd_dev->config = conf;
 800142e:	e9c0 8700 	strd	r8, r7, [r0]
	usbd_dev->ctrl_buf = control_buffer;
 8001432:	6103      	str	r3, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 8001434:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	usbd_dev->strings = strings;
 8001438:	6086      	str	r6, [r0, #8]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 800143a:	8283      	strh	r3, [r0, #20]

	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <usbd_init+0x44>)
 800143e:	66c3      	str	r3, [r0, #108]	; 0x6c
	    _usbd_control_setup;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <usbd_init+0x48>)
 8001442:	6683      	str	r3, [r0, #104]	; 0x68
	    _usbd_control_out;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <usbd_init+0x4c>)
 8001446:	6643      	str	r3, [r0, #100]	; 0x64
	    _usbd_control_in;

	int i;
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
		usbd_dev->user_callback_set_config[i] = NULL;
 8001448:	2300      	movs	r3, #0
 800144a:	e9c0 3331 	strd	r3, r3, [r0, #196]	; 0xc4
 800144e:	e9c0 3333 	strd	r3, r3, [r0, #204]	; 0xcc
	}

	return usbd_dev;
}
 8001452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001456:	bf00      	nop
 8001458:	08001d1b 	.word	0x08001d1b
 800145c:	08001d75 	.word	0x08001d75
 8001460:	08001df7 	.word	0x08001df7

08001464 <_usbd_standard_request_device>:
/**@}*/

int _usbd_standard_request_device(usbd_device *usbd_dev,
				  struct usb_setup_data *req, uint8_t **buf,
				  uint16_t *len)
{
 8001464:	b410      	push	{r4}
	int (*command)(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001466:	784c      	ldrb	r4, [r1, #1]
 8001468:	2c09      	cmp	r4, #9
 800146a:	d812      	bhi.n	8001492 <_usbd_standard_request_device+0x2e>
 800146c:	e8df f004 	tbb	[pc, r4]
 8001470:	1111110d 	.word	0x1111110d
 8001474:	110b0f11 	.word	0x110b0f11
 8001478:	0509      	.short	0x0509
		 * It is only processed at STATUS stage.
		 */
		command = usb_standard_set_address;
		break;
	case USB_REQ_SET_CONFIGURATION:
		command = usb_standard_set_configuration;
 800147a:	4c07      	ldr	r4, [pc, #28]	; (8001498 <_usbd_standard_request_device+0x34>)

	if (!command) {
		return 0;
	}

	return command(usbd_dev, req, buf, len);
 800147c:	46a4      	mov	ip, r4
}
 800147e:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001480:	4760      	bx	ip
		command = usb_standard_get_configuration;
 8001482:	4c06      	ldr	r4, [pc, #24]	; (800149c <_usbd_standard_request_device+0x38>)
		break;
 8001484:	e7fa      	b.n	800147c <_usbd_standard_request_device+0x18>
		command = usb_standard_get_descriptor;
 8001486:	4c06      	ldr	r4, [pc, #24]	; (80014a0 <_usbd_standard_request_device+0x3c>)
		break;
 8001488:	e7f8      	b.n	800147c <_usbd_standard_request_device+0x18>
		command = usb_standard_device_get_status;
 800148a:	4c06      	ldr	r4, [pc, #24]	; (80014a4 <_usbd_standard_request_device+0x40>)
		break;
 800148c:	e7f6      	b.n	800147c <_usbd_standard_request_device+0x18>
		command = usb_standard_set_address;
 800148e:	4c06      	ldr	r4, [pc, #24]	; (80014a8 <_usbd_standard_request_device+0x44>)
 8001490:	e7f4      	b.n	800147c <_usbd_standard_request_device+0x18>
}
 8001492:	2000      	movs	r0, #0
 8001494:	bc10      	pop	{r4}
 8001496:	4770      	bx	lr
 8001498:	08001e4d 	.word	0x08001e4d
 800149c:	08001edf 	.word	0x08001edf
 80014a0:	0800200b 	.word	0x0800200b
 80014a4:	08001f33 	.word	0x08001f33
 80014a8:	08001f95 	.word	0x08001f95

080014ac <_usbd_standard_request_interface>:

int _usbd_standard_request_interface(usbd_device *usbd_dev,
				     struct usb_setup_data *req, uint8_t **buf,
				     uint16_t *len)
{
 80014ac:	b410      	push	{r4}
	int (*command)(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80014ae:	784c      	ldrb	r4, [r1, #1]
 80014b0:	2c0a      	cmp	r4, #10
 80014b2:	d008      	beq.n	80014c6 <_usbd_standard_request_interface+0x1a>
 80014b4:	2c0b      	cmp	r4, #11
 80014b6:	d002      	beq.n	80014be <_usbd_standard_request_interface+0x12>
 80014b8:	b93c      	cbnz	r4, 80014ca <_usbd_standard_request_interface+0x1e>
		break;
	case USB_REQ_SET_INTERFACE:
		command = usb_standard_set_interface;
		break;
	case USB_REQ_GET_STATUS:
		command = usb_standard_interface_get_status;
 80014ba:	4c05      	ldr	r4, [pc, #20]	; (80014d0 <_usbd_standard_request_interface+0x24>)
		break;
 80014bc:	e000      	b.n	80014c0 <_usbd_standard_request_interface+0x14>
		command = usb_standard_set_interface;
 80014be:	4c05      	ldr	r4, [pc, #20]	; (80014d4 <_usbd_standard_request_interface+0x28>)

	if (!command) {
		return 0;
	}

	return command(usbd_dev, req, buf, len);
 80014c0:	46a4      	mov	ip, r4
}
 80014c2:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 80014c4:	4760      	bx	ip
		command = usb_standard_get_interface;
 80014c6:	4c04      	ldr	r4, [pc, #16]	; (80014d8 <_usbd_standard_request_interface+0x2c>)
 80014c8:	e7fa      	b.n	80014c0 <_usbd_standard_request_interface+0x14>
}
 80014ca:	2000      	movs	r0, #0
 80014cc:	bc10      	pop	{r4}
 80014ce:	4770      	bx	lr
 80014d0:	08002261 	.word	0x08002261
 80014d4:	08001fbd 	.word	0x08001fbd
 80014d8:	08001eff 	.word	0x08001eff

080014dc <_usbd_standard_request_endpoint>:

int _usbd_standard_request_endpoint(usbd_device *usbd_dev,
				    struct usb_setup_data *req, uint8_t **buf,
				    uint16_t *len)
{
 80014dc:	b410      	push	{r4}
	int (*command) (usbd_device *usbd_dev, struct usb_setup_data *req,
			uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80014de:	784c      	ldrb	r4, [r1, #1]
 80014e0:	2c01      	cmp	r4, #1
 80014e2:	d005      	beq.n	80014f0 <_usbd_standard_request_endpoint+0x14>
 80014e4:	d310      	bcc.n	8001508 <_usbd_standard_request_endpoint+0x2c>
 80014e6:	2c03      	cmp	r4, #3
 80014e8:	d007      	beq.n	80014fa <_usbd_standard_request_endpoint+0x1e>
	if (!command) {
		return 0;
	}

	return command(usbd_dev, req, buf, len);
}
 80014ea:	2000      	movs	r0, #0
 80014ec:	bc10      	pop	{r4}
 80014ee:	4770      	bx	lr
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 80014f0:	884c      	ldrh	r4, [r1, #2]
 80014f2:	2c00      	cmp	r4, #0
 80014f4:	d1f9      	bne.n	80014ea <_usbd_standard_request_endpoint+0xe>
			command = usb_standard_endpoint_unstall;
 80014f6:	4c05      	ldr	r4, [pc, #20]	; (800150c <_usbd_standard_request_endpoint+0x30>)
 80014f8:	e003      	b.n	8001502 <_usbd_standard_request_endpoint+0x26>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 80014fa:	884c      	ldrh	r4, [r1, #2]
 80014fc:	2c00      	cmp	r4, #0
 80014fe:	d1f4      	bne.n	80014ea <_usbd_standard_request_endpoint+0xe>
			command = usb_standard_endpoint_stall;
 8001500:	4c03      	ldr	r4, [pc, #12]	; (8001510 <_usbd_standard_request_endpoint+0x34>)
	return command(usbd_dev, req, buf, len);
 8001502:	46a4      	mov	ip, r4
}
 8001504:	bc10      	pop	{r4}
	return command(usbd_dev, req, buf, len);
 8001506:	4760      	bx	ip
		command = usb_standard_endpoint_get_status;
 8001508:	4c02      	ldr	r4, [pc, #8]	; (8001514 <_usbd_standard_request_endpoint+0x38>)
 800150a:	e7fa      	b.n	8001502 <_usbd_standard_request_endpoint+0x26>
 800150c:	08001f85 	.word	0x08001f85
 8001510:	08001f75 	.word	0x08001f75
 8001514:	08001f4b 	.word	0x08001f4b

08001518 <st_usbfs_v1_usbd_init>:
	.poll = st_usbfs_poll,
};

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *st_usbfs_v1_usbd_init(void)
{
 8001518:	b508      	push	{r3, lr}
	rcc_periph_clock_enable(RCC_USB);
 800151a:	f240 3097 	movw	r0, #919	; 0x397
 800151e:	f000 faf3 	bl	8001b08 <rcc_periph_clock_enable>
	SET_REG(USB_CNTR_REG, 0);
 8001522:	2300      	movs	r3, #0
 8001524:	4a05      	ldr	r2, [pc, #20]	; (800153c <st_usbfs_v1_usbd_init+0x24>)
	SET_REG(USB_BTABLE_REG, 0);
 8001526:	4906      	ldr	r1, [pc, #24]	; (8001540 <st_usbfs_v1_usbd_init+0x28>)
	SET_REG(USB_CNTR_REG, 0);
 8001528:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BTABLE_REG, 0);
 800152a:	600b      	str	r3, [r1, #0]
	SET_REG(USB_ISTR_REG, 0);
 800152c:	f841 3c0c 	str.w	r3, [r1, #-12]

	/* Enable RESET, SUSPEND, RESUME and CTR interrupts. */
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 8001530:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
		USB_CNTR_SUSPM | USB_CNTR_WKUPM);
	return &st_usbfs_dev;
}
 8001534:	4803      	ldr	r0, [pc, #12]	; (8001544 <st_usbfs_v1_usbd_init+0x2c>)
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bd08      	pop	{r3, pc}
 800153a:	bf00      	nop
 800153c:	40005c40 	.word	0x40005c40
 8001540:	40005c50 	.word	0x40005c50
 8001544:	20000748 	.word	0x20000748

08001548 <scb_reset_system>:
}
#endif

void scb_reset_system(void)
{
	SCB_AIRCR = SCB_AIRCR_VECTKEY | SCB_AIRCR_SYSRESETREQ;
 8001548:	4b01      	ldr	r3, [pc, #4]	; (8001550 <scb_reset_system+0x8>)
 800154a:	4a02      	ldr	r2, [pc, #8]	; (8001554 <scb_reset_system+0xc>)
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	e7fe      	b.n	800154e <scb_reset_system+0x6>
 8001550:	e000ed0c 	.word	0xe000ed0c
 8001554:	05fa0004 	.word	0x05fa0004

08001558 <st_usbfs_set_address>:

void st_usbfs_set_address(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	/* Set device address and enable. */
	SET_REG(USB_DADDR_REG, (addr & USB_DADDR_ADDR) | USB_DADDR_EF);
 8001558:	4b02      	ldr	r3, [pc, #8]	; (8001564 <st_usbfs_set_address+0xc>)
 800155a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800155e:	6019      	str	r1, [r3, #0]
}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40005c4c 	.word	0x40005c4c

08001568 <st_usbfs_set_ep_rx_bufsize>:
 * @param size Size in bytes of the RX buffer.
 */
void st_usbfs_set_ep_rx_bufsize(usbd_device *dev, uint8_t ep, uint32_t size)
{
	(void)dev;
	if (size > 62) {
 8001568:	2a3e      	cmp	r2, #62	; 0x3e
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <st_usbfs_set_ep_rx_bufsize+0x3c>)
 800156c:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8001570:	d90d      	bls.n	800158e <st_usbfs_set_ep_rx_bufsize+0x26>
		if (size & 0x1f) {
			size -= 32;
		}
		USB_SET_EP_RX_COUNT(ep, (size << 5) | 0x8000);
 8001572:	681b      	ldr	r3, [r3, #0]
		if (size & 0x1f) {
 8001574:	06d0      	lsls	r0, r2, #27
		USB_SET_EP_RX_COUNT(ep, (size << 5) | 0x8000);
 8001576:	b29b      	uxth	r3, r3
 8001578:	4419      	add	r1, r3
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <st_usbfs_set_ep_rx_bufsize+0x40>)
			size -= 32;
 800157c:	bf18      	it	ne
 800157e:	3a20      	subne	r2, #32
		USB_SET_EP_RX_COUNT(ep, (size << 5) | 0x8000);
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <st_usbfs_set_ep_rx_bufsize+0x44>)
 8001582:	ea43 1242 	orr.w	r2, r3, r2, lsl #5
 8001586:	0049      	lsls	r1, r1, #1
 8001588:	b292      	uxth	r2, r2
 800158a:	5042      	str	r2, [r0, r1]
 800158c:	4770      	bx	lr
	} else {
		if (size & 1) {
			size++;
		}
		USB_SET_EP_RX_COUNT(ep, size << 10);
 800158e:	681b      	ldr	r3, [r3, #0]
		if (size & 1) {
 8001590:	07d0      	lsls	r0, r2, #31
		USB_SET_EP_RX_COUNT(ep, size << 10);
 8001592:	b29b      	uxth	r3, r3
 8001594:	4419      	add	r1, r3
			size++;
 8001596:	bf48      	it	mi
 8001598:	3201      	addmi	r2, #1
		USB_SET_EP_RX_COUNT(ep, size << 10);
 800159a:	4b04      	ldr	r3, [pc, #16]	; (80015ac <st_usbfs_set_ep_rx_bufsize+0x44>)
 800159c:	0049      	lsls	r1, r1, #1
 800159e:	0292      	lsls	r2, r2, #10
 80015a0:	505a      	str	r2, [r3, r1]
	}
}
 80015a2:	4770      	bx	lr
 80015a4:	40005c50 	.word	0x40005c50
 80015a8:	ffff8000 	.word	0xffff8000
 80015ac:	4000600c 	.word	0x4000600c

080015b0 <st_usbfs_ep_setup>:

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 80015b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80015b4:	461e      	mov	r6, r3
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 80015b6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
		[USB_ENDPOINT_ATTR_ISOCHRONOUS] = USB_EP_TYPE_ISO,
		[USB_ENDPOINT_ATTR_BULK] = USB_EP_TYPE_BULK,
		[USB_ENDPOINT_ATTR_INTERRUPT] = USB_EP_TYPE_INTERRUPT,
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;
 80015ba:	f001 077f 	and.w	r7, r1, #127	; 0x7f

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 80015be:	00bc      	lsls	r4, r7, #2
{
 80015c0:	4605      	mov	r5, r0
	USB_SET_EP_ADDR(addr, addr);
 80015c2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	const uint16_t typelookup[] = {
 80015c6:	484b      	ldr	r0, [pc, #300]	; (80016f4 <st_usbfs_ep_setup+0x144>)
	USB_SET_EP_ADDR(addr, addr);
 80015c8:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
	const uint16_t typelookup[] = {
 80015cc:	e9cd 0300 	strd	r0, r3, [sp]
	USB_SET_EP_ADDR(addr, addr);
 80015d0:	6823      	ldr	r3, [r4, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 80015d2:	a802      	add	r0, sp, #8
	USB_SET_EP_ADDR(addr, addr);
 80015d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80015d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015dc:	433b      	orrs	r3, r7
 80015de:	b29b      	uxth	r3, r3
 80015e0:	6023      	str	r3, [r4, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 80015e2:	6823      	ldr	r3, [r4, #0]
 80015e4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80015e8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80015ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015f0:	041b      	lsls	r3, r3, #16
 80015f2:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 80015f6:	0c1b      	lsrs	r3, r3, #16
 80015f8:	b249      	sxtb	r1, r1
 80015fa:	4313      	orrs	r3, r2

	if (dir || (addr == 0)) {
 80015fc:	2900      	cmp	r1, #0
{
 80015fe:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001602:	6023      	str	r3, [r4, #0]
 8001604:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 80016fc <st_usbfs_ep_setup+0x14c>
 8001608:	ea4f 0ec7 	mov.w	lr, r7, lsl #3
	if (dir || (addr == 0)) {
 800160c:	db33      	blt.n	8001676 <st_usbfs_ep_setup+0xc6>
 800160e:	b397      	cbz	r7, 8001676 <st_usbfs_ep_setup+0xc6>
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
		dev->pm_top += max_size;
	}

	if (!dir) {
		USB_SET_EP_RX_ADDR(addr, dev->pm_top);
 8001610:	f8dc 3000 	ldr.w	r3, [ip]
 8001614:	8b2a      	ldrh	r2, [r5, #24]
 8001616:	b29b      	uxth	r3, r3
 8001618:	449e      	add	lr, r3
 800161a:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <st_usbfs_ep_setup+0x148>)
 800161c:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8001620:	f843 200e 	str.w	r2, [r3, lr]
		st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
 8001624:	4639      	mov	r1, r7
 8001626:	4632      	mov	r2, r6
 8001628:	4628      	mov	r0, r5
 800162a:	f7ff ff9d 	bl	8001568 <st_usbfs_set_ep_rx_bufsize>
		if (callback) {
 800162e:	f1b8 0f00 	cmp.w	r8, #0
 8001632:	d159      	bne.n	80016e8 <st_usbfs_ep_setup+0x138>
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
			    (void *)callback;
		}
		USB_CLR_EP_RX_DTOG(addr);
 8001634:	6823      	ldr	r3, [r4, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001636:	2110      	movs	r1, #16
		USB_CLR_EP_RX_DTOG(addr);
 8001638:	f423 5341 	bic.w	r3, r3, #12352	; 0x3040
 800163c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	0c1b      	lsrs	r3, r3, #16
 8001644:	6023      	str	r3, [r4, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001646:	2301      	movs	r3, #1
 8001648:	6822      	ldr	r2, [r4, #0]
 800164a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800164e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001652:	b292      	uxth	r2, r2
 8001654:	f413 5f40 	tst.w	r3, #12288	; 0x3000
 8001658:	bf18      	it	ne
 800165a:	405a      	eorne	r2, r3
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	3901      	subs	r1, #1
 8001660:	b29b      	uxth	r3, r3
 8001662:	d1f7      	bne.n	8001654 <st_usbfs_ep_setup+0xa4>
		dev->pm_top += max_size;
 8001664:	8b2b      	ldrh	r3, [r5, #24]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001666:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800166a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
		dev->pm_top += max_size;
 800166e:	441e      	add	r6, r3
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001670:	6022      	str	r2, [r4, #0]
		dev->pm_top += max_size;
 8001672:	832e      	strh	r6, [r5, #24]
	}
}
 8001674:	e035      	b.n	80016e2 <st_usbfs_ep_setup+0x132>
		USB_SET_EP_TX_ADDR(addr, dev->pm_top);
 8001676:	f8dc 3000 	ldr.w	r3, [ip]
 800167a:	8b28      	ldrh	r0, [r5, #24]
 800167c:	b29b      	uxth	r3, r3
 800167e:	4473      	add	r3, lr
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001686:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800168a:	6018      	str	r0, [r3, #0]
		if (callback) {
 800168c:	f1b8 0f00 	cmp.w	r8, #0
 8001690:	d004      	beq.n	800169c <st_usbfs_ep_setup+0xec>
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 8001692:	230c      	movs	r3, #12
 8001694:	fb03 5307 	mla	r3, r3, r7, r5
 8001698:	f8c3 8064 	str.w	r8, [r3, #100]	; 0x64
		USB_CLR_EP_TX_DTOG(addr);
 800169c:	6823      	ldr	r3, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 800169e:	f04f 0910 	mov.w	r9, #16
		USB_CLR_EP_TX_DTOG(addr);
 80016a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	0c1b      	lsrs	r3, r3, #16
 80016ae:	6023      	str	r3, [r4, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 80016b0:	2301      	movs	r3, #1
 80016b2:	6822      	ldr	r2, [r4, #0]
 80016b4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80016b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016bc:	b292      	uxth	r2, r2
 80016be:	f013 0f20 	tst.w	r3, #32
 80016c2:	bf18      	it	ne
 80016c4:	405a      	eorne	r2, r3
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	f1b9 0901 	subs.w	r9, r9, #1
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	d1f6      	bne.n	80016be <st_usbfs_ep_setup+0x10e>
 80016d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
		dev->pm_top += max_size;
 80016d8:	4430      	add	r0, r6
	if (!dir) {
 80016da:	2900      	cmp	r1, #0
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 80016dc:	6022      	str	r2, [r4, #0]
		dev->pm_top += max_size;
 80016de:	8328      	strh	r0, [r5, #24]
	if (!dir) {
 80016e0:	da96      	bge.n	8001610 <st_usbfs_ep_setup+0x60>
}
 80016e2:	b003      	add	sp, #12
 80016e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 80016e8:	230c      	movs	r3, #12
 80016ea:	fb03 5707 	mla	r7, r3, r7, r5
 80016ee:	f8c7 8068 	str.w	r8, [r7, #104]	; 0x68
 80016f2:	e79f      	b.n	8001634 <st_usbfs_ep_setup+0x84>
 80016f4:	04000200 	.word	0x04000200
 80016f8:	40006008 	.word	0x40006008
 80016fc:	40005c50 	.word	0x40005c50

08001700 <st_usbfs_endpoints_reset>:
{
	int i;

	/* Reset all endpoints. */
	for (i = 1; i < 8; i++) {
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8001700:	f248 0180 	movw	r1, #32896	; 0x8080
{
 8001704:	b570      	push	{r4, r5, r6, lr}
 8001706:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <st_usbfs_endpoints_reset+0x34>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8001708:	4e0b      	ldr	r6, [pc, #44]	; (8001738 <st_usbfs_endpoints_reset+0x38>)
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 800170a:	4d0c      	ldr	r5, [pc, #48]	; (800173c <st_usbfs_endpoints_reset+0x3c>)
	for (i = 1; i < 8; i++) {
 800170c:	4c0c      	ldr	r4, [pc, #48]	; (8001740 <st_usbfs_endpoints_reset+0x40>)
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 800170e:	6813      	ldr	r3, [r2, #0]
 8001710:	4033      	ands	r3, r6
 8001712:	430b      	orrs	r3, r1
 8001714:	b29b      	uxth	r3, r3
 8001716:	6013      	str	r3, [r2, #0]
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 8001718:	6813      	ldr	r3, [r2, #0]
 800171a:	402b      	ands	r3, r5
 800171c:	430b      	orrs	r3, r1
 800171e:	b29b      	uxth	r3, r3
 8001720:	f842 3b04 	str.w	r3, [r2], #4
	for (i = 1; i < 8; i++) {
 8001724:	42a2      	cmp	r2, r4
 8001726:	d1f2      	bne.n	800170e <st_usbfs_endpoints_reset+0xe>
	}
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
 8001728:	6803      	ldr	r3, [r0, #0]
 800172a:	79db      	ldrb	r3, [r3, #7]
 800172c:	3320      	adds	r3, #32
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	8303      	strh	r3, [r0, #24]
}
 8001732:	bd70      	pop	{r4, r5, r6, pc}
 8001734:	40005c04 	.word	0x40005c04
 8001738:	ffff8fbf 	.word	0xffff8fbf
 800173c:	ffffbf8f 	.word	0xffffbf8f
 8001740:	40005c20 	.word	0x40005c20

08001744 <st_usbfs_ep_stall_set>:

void st_usbfs_ep_stall_set(usbd_device *dev, uint8_t addr,
				   uint8_t stall)
{
 8001744:	b530      	push	{r4, r5, lr}
	(void)dev;
	if (addr == 0) {
 8001746:	b9c9      	cbnz	r1, 800177c <st_usbfs_ep_stall_set+0x38>
 8001748:	2a00      	cmp	r2, #0
 800174a:	bf14      	ite	ne
 800174c:	2510      	movne	r5, #16
 800174e:	2520      	moveq	r5, #32
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001750:	2410      	movs	r4, #16
 8001752:	2001      	movs	r0, #1
 8001754:	4b33      	ldr	r3, [pc, #204]	; (8001824 <st_usbfs_ep_stall_set+0xe0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800175c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001760:	b29b      	uxth	r3, r3
 8001762:	4228      	tst	r0, r5
 8001764:	bf18      	it	ne
 8001766:	4043      	eorne	r3, r0
 8001768:	0040      	lsls	r0, r0, #1
 800176a:	3c01      	subs	r4, #1
 800176c:	b280      	uxth	r0, r0
 800176e:	d1f8      	bne.n	8001762 <st_usbfs_ep_stall_set+0x1e>
 8001770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001774:	482b      	ldr	r0, [pc, #172]	; (8001824 <st_usbfs_ep_stall_set+0xe0>)
 8001776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177a:	6003      	str	r3, [r0, #0]
				   USB_EP_TX_STAT_NAK);
	}

	if (addr & 0x80) {
 800177c:	060b      	lsls	r3, r1, #24
 800177e:	d528      	bpl.n	80017d2 <st_usbfs_ep_stall_set+0x8e>
 8001780:	2a00      	cmp	r2, #0
 8001782:	bf14      	ite	ne
 8001784:	2510      	movne	r5, #16
 8001786:	2520      	moveq	r5, #32
		addr &= 0x7F;

		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8001788:	2410      	movs	r4, #16
 800178a:	2001      	movs	r0, #1
 800178c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001790:	0089      	lsls	r1, r1, #2
 8001792:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001796:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800179a:	680b      	ldr	r3, [r1, #0]
 800179c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	4228      	tst	r0, r5
 80017a8:	bf18      	it	ne
 80017aa:	4043      	eorne	r3, r0
 80017ac:	0040      	lsls	r0, r0, #1
 80017ae:	3c01      	subs	r4, #1
 80017b0:	b280      	uxth	r0, r0
 80017b2:	d1f8      	bne.n	80017a6 <st_usbfs_ep_stall_set+0x62>
 80017b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017bc:	600b      	str	r3, [r1, #0]
				   USB_EP_TX_STAT_NAK);

		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
 80017be:	b93a      	cbnz	r2, 80017d0 <st_usbfs_ep_stall_set+0x8c>
			USB_CLR_EP_TX_DTOG(addr);
 80017c0:	680b      	ldr	r3, [r1, #0]
 80017c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017ca:	041b      	lsls	r3, r3, #16
 80017cc:	0c1b      	lsrs	r3, r3, #16
		/* Reset to DATA0 if clearing stall condition. */
		if (!stall) {
			USB_CLR_EP_RX_DTOG(addr);
		}

		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 80017ce:	600b      	str	r3, [r1, #0]
				   USB_EP_RX_STAT_VALID);
	}
}
 80017d0:	bd30      	pop	{r4, r5, pc}
 80017d2:	0089      	lsls	r1, r1, #2
 80017d4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80017d8:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
		if (!stall) {
 80017dc:	b93a      	cbnz	r2, 80017ee <st_usbfs_ep_stall_set+0xaa>
			USB_CLR_EP_RX_DTOG(addr);
 80017de:	680b      	ldr	r3, [r1, #0]
 80017e0:	f423 5341 	bic.w	r3, r3, #12352	; 0x3040
 80017e4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017e8:	041b      	lsls	r3, r3, #16
 80017ea:	0c1b      	lsrs	r3, r3, #16
 80017ec:	600b      	str	r3, [r1, #0]
 80017ee:	2a00      	cmp	r2, #0
 80017f0:	bf14      	ite	ne
 80017f2:	f44f 5480 	movne.w	r4, #4096	; 0x1000
 80017f6:	f44f 5440 	moveq.w	r4, #12288	; 0x3000
		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 80017fa:	2010      	movs	r0, #16
 80017fc:	2201      	movs	r2, #1
 80017fe:	680b      	ldr	r3, [r1, #0]
 8001800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001808:	b29b      	uxth	r3, r3
 800180a:	4222      	tst	r2, r4
 800180c:	bf18      	it	ne
 800180e:	4053      	eorne	r3, r2
 8001810:	0052      	lsls	r2, r2, #1
 8001812:	3801      	subs	r0, #1
 8001814:	b292      	uxth	r2, r2
 8001816:	d1f8      	bne.n	800180a <st_usbfs_ep_stall_set+0xc6>
 8001818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001820:	e7d5      	b.n	80017ce <st_usbfs_ep_stall_set+0x8a>
 8001822:	bf00      	nop
 8001824:	40005c00 	.word	0x40005c00

08001828 <st_usbfs_ep_nak_set>:

void st_usbfs_ep_nak_set(usbd_device *dev, uint8_t addr, uint8_t nak)
{
	(void)dev;
	/* It does not make sence to force NAK on IN endpoints. */
	if (addr & 0x80) {
 8001828:	060b      	lsls	r3, r1, #24
 800182a:	d41a      	bmi.n	8001862 <st_usbfs_ep_nak_set+0x3a>
		return;
	}

	st_usbfs_force_nak[addr] = nak;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <st_usbfs_ep_nak_set+0x50>)
 800182e:	4813      	ldr	r0, [pc, #76]	; (800187c <st_usbfs_ep_nak_set+0x54>)
 8001830:	545a      	strb	r2, [r3, r1]
 8001832:	0089      	lsls	r1, r1, #2
 8001834:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001838:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00

	if (nak) {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 800183c:	680b      	ldr	r3, [r1, #0]
 800183e:	4003      	ands	r3, r0
 8001840:	b29b      	uxth	r3, r3
 8001842:	2010      	movs	r0, #16
	if (nak) {
 8001844:	b172      	cbz	r2, 8001864 <st_usbfs_ep_nak_set+0x3c>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 8001846:	2201      	movs	r2, #1
 8001848:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800184c:	bf18      	it	ne
 800184e:	4053      	eorne	r3, r2
 8001850:	0052      	lsls	r2, r2, #1
 8001852:	3801      	subs	r0, #1
 8001854:	b292      	uxth	r2, r2
 8001856:	d1f7      	bne.n	8001848 <st_usbfs_ep_nak_set+0x20>
	} else {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800185c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001860:	600b      	str	r3, [r1, #0]
	}
}
 8001862:	4770      	bx	lr
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001864:	2201      	movs	r2, #1
 8001866:	f412 5f40 	tst.w	r2, #12288	; 0x3000
 800186a:	bf18      	it	ne
 800186c:	4053      	eorne	r3, r2
 800186e:	0052      	lsls	r2, r2, #1
 8001870:	3801      	subs	r0, #1
 8001872:	b292      	uxth	r2, r2
 8001874:	d1f7      	bne.n	8001866 <st_usbfs_ep_nak_set+0x3e>
 8001876:	e7ef      	b.n	8001858 <st_usbfs_ep_nak_set+0x30>
 8001878:	20000840 	.word	0x20000840
 800187c:	ffffbf8f 	.word	0xffffbf8f

08001880 <st_usbfs_ep_write_packet>:

uint16_t st_usbfs_ep_write_packet(usbd_device *dev, uint8_t addr,
				     const void *buf, uint16_t len)
{
	(void)dev;
	addr &= 0x7F;
 8001880:	f001 017f 	and.w	r1, r1, #127	; 0x7f
{
 8001884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 8001886:	008c      	lsls	r4, r1, #2
 8001888:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800188c:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
{
 8001890:	461d      	mov	r5, r3
	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 8001892:	6823      	ldr	r3, [r4, #0]
{
 8001894:	4694      	mov	ip, r2
	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 8001896:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800189a:	2b30      	cmp	r3, #48	; 0x30
 800189c:	d030      	beq.n	8001900 <st_usbfs_ep_write_packet+0x80>
		return 0;
	}

	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
 800189e:	4f19      	ldr	r7, [pc, #100]	; (8001904 <st_usbfs_ep_write_packet+0x84>)
 80018a0:	00ce      	lsls	r6, r1, #3
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	4661      	mov	r1, ip
 80018a6:	b292      	uxth	r2, r2
 80018a8:	4432      	add	r2, r6
 80018aa:	0052      	lsls	r2, r2, #1
 80018ac:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80018b0:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 80018b4:	8810      	ldrh	r0, [r2, #0]
 80018b6:	462a      	mov	r2, r5
 80018b8:	0040      	lsls	r0, r0, #1
 80018ba:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80018be:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 80018c2:	f000 fd04 	bl	80022ce <st_usbfs_copy_to_pm>
	USB_SET_EP_TX_COUNT(addr, len);
 80018c6:	6839      	ldr	r1, [r7, #0]
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <st_usbfs_ep_write_packet+0x88>)
 80018ca:	b289      	uxth	r1, r1
 80018cc:	440e      	add	r6, r1
 80018ce:	0076      	lsls	r6, r6, #1
 80018d0:	519d      	str	r5, [r3, r6]
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 80018d2:	2110      	movs	r1, #16
 80018d4:	2301      	movs	r3, #1
 80018d6:	6822      	ldr	r2, [r4, #0]
 80018d8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80018dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018e0:	b292      	uxth	r2, r2
 80018e2:	f013 0f30 	tst.w	r3, #48	; 0x30
 80018e6:	bf18      	it	ne
 80018e8:	405a      	eorne	r2, r3
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	3901      	subs	r1, #1
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	d1f7      	bne.n	80018e2 <st_usbfs_ep_write_packet+0x62>
 80018f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018fa:	6022      	str	r2, [r4, #0]

	return len;
}
 80018fc:	4628      	mov	r0, r5
 80018fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 8001900:	2500      	movs	r5, #0
 8001902:	e7fb      	b.n	80018fc <st_usbfs_ep_write_packet+0x7c>
 8001904:	40005c50 	.word	0x40005c50
 8001908:	40006004 	.word	0x40006004

0800190c <st_usbfs_ep_read_packet>:

uint16_t st_usbfs_ep_read_packet(usbd_device *dev, uint8_t addr,
					 void *buf, uint16_t len)
{
 800190c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 800190e:	008c      	lsls	r4, r1, #2
 8001910:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001914:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
{
 8001918:	461d      	mov	r5, r3
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 800191a:	6823      	ldr	r3, [r4, #0]
{
 800191c:	460e      	mov	r6, r1
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 800191e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001922:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
{
 8001926:	4610      	mov	r0, r2
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 8001928:	d042      	beq.n	80019b0 <st_usbfs_ep_read_packet+0xa4>
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 800192a:	4922      	ldr	r1, [pc, #136]	; (80019b4 <st_usbfs_ep_read_packet+0xa8>)
 800192c:	00f2      	lsls	r2, r6, #3
 800192e:	680b      	ldr	r3, [r1, #0]
 8001930:	4f21      	ldr	r7, [pc, #132]	; (80019b8 <st_usbfs_ep_read_packet+0xac>)
 8001932:	b29b      	uxth	r3, r3
 8001934:	4413      	add	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	58fb      	ldr	r3, [r7, r3]
 800193a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800193e:	42ab      	cmp	r3, r5
 8001940:	da06      	bge.n	8001950 <st_usbfs_ep_read_packet+0x44>
 8001942:	680b      	ldr	r3, [r1, #0]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4413      	add	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	58fd      	ldr	r5, [r7, r3]
 800194c:	f3c5 0509 	ubfx	r5, r5, #0, #10
	st_usbfs_copy_from_pm(buf, USB_GET_EP_RX_BUFF(addr), len);
 8001950:	680b      	ldr	r3, [r1, #0]
 8001952:	b29b      	uxth	r3, r3
 8001954:	441a      	add	r2, r3
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <st_usbfs_ep_read_packet+0xb0>)
 8001958:	0052      	lsls	r2, r2, #1
 800195a:	5a99      	ldrh	r1, [r3, r2]
 800195c:	462a      	mov	r2, r5
 800195e:	0049      	lsls	r1, r1, #1
 8001960:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001964:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
 8001968:	f000 fcbf 	bl	80022ea <st_usbfs_copy_from_pm>
	USB_CLR_EP_RX_CTR(addr);
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001972:	051b      	lsls	r3, r3, #20
 8001974:	0d1b      	lsrs	r3, r3, #20
 8001976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800197a:	6023      	str	r3, [r4, #0]

	if (!st_usbfs_force_nak[addr]) {
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <st_usbfs_ep_read_packet+0xb4>)
 800197e:	5d9b      	ldrb	r3, [r3, r6]
 8001980:	b9a3      	cbnz	r3, 80019ac <st_usbfs_ep_read_packet+0xa0>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001982:	2110      	movs	r1, #16
 8001984:	2301      	movs	r3, #1
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800198c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001990:	b292      	uxth	r2, r2
 8001992:	f413 5f40 	tst.w	r3, #12288	; 0x3000
 8001996:	bf18      	it	ne
 8001998:	405a      	eorne	r2, r3
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	3901      	subs	r1, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	d1f7      	bne.n	8001992 <st_usbfs_ep_read_packet+0x86>
 80019a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019aa:	6022      	str	r2, [r4, #0]
	}

	return len;
}
 80019ac:	4628      	mov	r0, r5
 80019ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 80019b0:	2500      	movs	r5, #0
 80019b2:	e7fb      	b.n	80019ac <st_usbfs_ep_read_packet+0xa0>
 80019b4:	40005c50 	.word	0x40005c50
 80019b8:	4000600c 	.word	0x4000600c
 80019bc:	40006008 	.word	0x40006008
 80019c0:	20000840 	.word	0x20000840

080019c4 <st_usbfs_poll>:

void st_usbfs_poll(usbd_device *dev)
{
	uint16_t istr = *USB_ISTR_REG;
 80019c4:	4a31      	ldr	r2, [pc, #196]	; (8001a8c <st_usbfs_poll+0xc8>)
{
 80019c6:	b570      	push	{r4, r5, r6, lr}
	uint16_t istr = *USB_ISTR_REG;
 80019c8:	6813      	ldr	r3, [r2, #0]
{
 80019ca:	4604      	mov	r4, r0

	if (istr & USB_ISTR_RESET) {
 80019cc:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80019d0:	b29e      	uxth	r6, r3
 80019d2:	4615      	mov	r5, r2
 80019d4:	d008      	beq.n	80019e8 <st_usbfs_poll+0x24>
	if (dev->user_callback_sof) {
		*USB_CNTR_REG |= USB_CNTR_SOFM;
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
	}
}
 80019d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		USB_CLR_ISTR_RESET();
 80019da:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 80019de:	6013      	str	r3, [r2, #0]
		dev->pm_top = USBD_PM_TOP;
 80019e0:	2340      	movs	r3, #64	; 0x40
 80019e2:	8303      	strh	r3, [r0, #24]
		_usbd_reset(dev);
 80019e4:	f000 b8bb 	b.w	8001b5e <_usbd_reset>
	if (istr & USB_ISTR_CTR) {
 80019e8:	0419      	lsls	r1, r3, #16
 80019ea:	d518      	bpl.n	8001a1e <st_usbfs_poll+0x5a>
		uint8_t ep = istr & USB_ISTR_EP_ID;
 80019ec:	f003 010f 	and.w	r1, r3, #15
 80019f0:	008a      	lsls	r2, r1, #2
 80019f2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
		if (istr & USB_ISTR_DIR) {
 80019f6:	f013 0310 	ands.w	r3, r3, #16
 80019fa:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80019fe:	d02f      	beq.n	8001a60 <st_usbfs_poll+0x9c>
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 8001a00:	6813      	ldr	r3, [r2, #0]
				type = USB_TRANSACTION_SETUP;
 8001a02:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2302      	movne	r3, #2
		if (dev->user_callback_ctr[ep][type]) {
 8001a0c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8001a10:	4403      	add	r3, r0
 8001a12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a18:	b35b      	cbz	r3, 8001a72 <st_usbfs_poll+0xae>
			dev->user_callback_ctr[ep][type] (dev, ep);
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4798      	blx	r3
	if (istr & USB_ISTR_SUSP) {
 8001a1e:	0532      	lsls	r2, r6, #20
 8001a20:	d505      	bpl.n	8001a2e <st_usbfs_poll+0x6a>
		USB_CLR_ISTR_SUSP();
 8001a22:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8001a26:	602b      	str	r3, [r5, #0]
		if (dev->user_callback_suspend) {
 8001a28:	6a23      	ldr	r3, [r4, #32]
 8001a2a:	b103      	cbz	r3, 8001a2e <st_usbfs_poll+0x6a>
			dev->user_callback_suspend();
 8001a2c:	4798      	blx	r3
	if (istr & USB_ISTR_WKUP) {
 8001a2e:	04f3      	lsls	r3, r6, #19
 8001a30:	d505      	bpl.n	8001a3e <st_usbfs_poll+0x7a>
		USB_CLR_ISTR_WKUP();
 8001a32:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001a36:	602b      	str	r3, [r5, #0]
		if (dev->user_callback_resume) {
 8001a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a3a:	b103      	cbz	r3, 8001a3e <st_usbfs_poll+0x7a>
			dev->user_callback_resume();
 8001a3c:	4798      	blx	r3
	if (istr & USB_ISTR_SOF) {
 8001a3e:	f416 7f00 	tst.w	r6, #512	; 0x200
 8001a42:	4e13      	ldr	r6, [pc, #76]	; (8001a90 <st_usbfs_poll+0xcc>)
 8001a44:	d005      	beq.n	8001a52 <st_usbfs_poll+0x8e>
		USB_CLR_ISTR_SOF();
 8001a46:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 8001a4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a4c:	602a      	str	r2, [r5, #0]
		if (dev->user_callback_sof) {
 8001a4e:	b1cb      	cbz	r3, 8001a84 <st_usbfs_poll+0xc0>
			dev->user_callback_sof();
 8001a50:	4798      	blx	r3
	if (dev->user_callback_sof) {
 8001a52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001a54:	b1b3      	cbz	r3, 8001a84 <st_usbfs_poll+0xc0>
		*USB_CNTR_REG |= USB_CNTR_SOFM;
 8001a56:	6833      	ldr	r3, [r6, #0]
 8001a58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8001a5c:	6033      	str	r3, [r6, #0]
}
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}
			USB_CLR_EP_TX_CTR(ep);
 8001a60:	6810      	ldr	r0, [r2, #0]
 8001a62:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8001a66:	0500      	lsls	r0, r0, #20
 8001a68:	0d00      	lsrs	r0, r0, #20
 8001a6a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001a6e:	6010      	str	r0, [r2, #0]
 8001a70:	e7cc      	b.n	8001a0c <st_usbfs_poll+0x48>
			USB_CLR_EP_RX_CTR(ep);
 8001a72:	6813      	ldr	r3, [r2, #0]
 8001a74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a78:	051b      	lsls	r3, r3, #20
 8001a7a:	0d1b      	lsrs	r3, r3, #20
 8001a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e7cc      	b.n	8001a1e <st_usbfs_poll+0x5a>
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8001a84:	6833      	ldr	r3, [r6, #0]
 8001a86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a8a:	e7e7      	b.n	8001a5c <st_usbfs_poll+0x98>
 8001a8c:	40005c44 	.word	0x40005c44
 8001a90:	40005c40 	.word	0x40005c40

08001a94 <gpio_set_mode>:
	     If multiple pins are to be set, use logical OR '|' to separate
	     them.
*/

void gpio_set_mode(uint32_t gpioport, uint8_t mode, uint8_t cnf, uint16_t gpios)
{
 8001a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	crl = GPIO_CRL(gpioport);
	crh = GPIO_CRH(gpioport);
 8001a98:	2600      	movs	r6, #0

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8001a9a:	f04f 0e0f 	mov.w	lr, #15
 8001a9e:	f643 78f8 	movw	r8, #16376	; 0x3ff8
{
 8001aa2:	469c      	mov	ip, r3
	crl = GPIO_CRL(gpioport);
 8001aa4:	6803      	ldr	r3, [r0, #0]
	crh = GPIO_CRH(gpioport);
 8001aa6:	6847      	ldr	r7, [r0, #4]
		if (!((1 << i) & gpios)) {
 8001aa8:	fa4c f406 	asr.w	r4, ip, r6
 8001aac:	07e4      	lsls	r4, r4, #31
 8001aae:	d51b      	bpl.n	8001ae8 <gpio_set_mode+0x54>
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 8001ab0:	2e07      	cmp	r6, #7
 8001ab2:	bf94      	ite	ls
 8001ab4:	4699      	movls	r9, r3
 8001ab6:	46b9      	movhi	r9, r7
 8001ab8:	b2b4      	uxth	r4, r6
 8001aba:	bf8b      	itete	hi
 8001abc:	4444      	addhi	r4, r8
 8001abe:	00a4      	lslls	r4, r4, #2
 8001ac0:	00a4      	lslhi	r4, r4, #2
 8001ac2:	b2a4      	uxthls	r4, r4
 8001ac4:	bf88      	it	hi
 8001ac6:	b2a4      	uxthhi	r4, r4
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8001ac8:	fa0e f504 	lsl.w	r5, lr, r4
 8001acc:	ea29 0905 	bic.w	r9, r9, r5
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8001ad0:	1ca5      	adds	r5, r4, #2
 8001ad2:	fa02 f505 	lsl.w	r5, r2, r5
 8001ad6:	fa01 f404 	lsl.w	r4, r1, r4
 8001ada:	432c      	orrs	r4, r5
 8001adc:	ea44 0409 	orr.w	r4, r4, r9

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
		crh = (i >= 8) ? tmp32 : crh;
 8001ae0:	2e08      	cmp	r6, #8
 8001ae2:	bf2c      	ite	cs
 8001ae4:	4627      	movcs	r7, r4
 8001ae6:	4623      	movcc	r3, r4
 8001ae8:	3601      	adds	r6, #1
	for (i = 0; i < 16; i++) {
 8001aea:	2e10      	cmp	r6, #16
 8001aec:	d1dc      	bne.n	8001aa8 <gpio_set_mode+0x14>
	}

	GPIO_CRL(gpioport) = crl;
 8001aee:	6003      	str	r3, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 8001af0:	6047      	str	r7, [r0, #4]
}
 8001af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001af6 <gpio_set>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8001af6:	6101      	str	r1, [r0, #16]
}
 8001af8:	4770      	bx	lr

08001afa <gpio_clear>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8001afa:	0409      	lsls	r1, r1, #16
 8001afc:	6101      	str	r1, [r0, #16]
}
 8001afe:	4770      	bx	lr

08001b00 <usart_recv>:
*/

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_DR(usart) & USART_DR_MASK;
 8001b00:	6840      	ldr	r0, [r0, #4]
}
 8001b02:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001b06:	4770      	bx	lr

08001b08 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8001b08:	0943      	lsrs	r3, r0, #5
 8001b0a:	f000 021f 	and.w	r2, r0, #31
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b14:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001b18:	6819      	ldr	r1, [r3, #0]
 8001b1a:	4090      	lsls	r0, r2
 8001b1c:	4308      	orrs	r0, r1
 8001b1e:	6018      	str	r0, [r3, #0]
}
 8001b20:	4770      	bx	lr

08001b22 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8001b22:	f000 021f 	and.w	r2, r0, #31
 8001b26:	0943      	lsrs	r3, r0, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b2e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001b32:	6819      	ldr	r1, [r3, #0]
 8001b34:	4090      	lsls	r0, r2
 8001b36:	4301      	orrs	r1, r0
 8001b38:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	ea22 0000 	bic.w	r0, r2, r0
 8001b40:	6018      	str	r0, [r3, #0]
}
 8001b42:	4770      	bx	lr

08001b44 <usbd_register_sof_callback>:
	usbd_dev->user_callback_resume = callback;
}

void usbd_register_sof_callback(usbd_device *usbd_dev, void (*callback)(void))
{
	usbd_dev->user_callback_sof = callback;
 8001b44:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001b46:	4770      	bx	lr

08001b48 <usbd_poll>:
}

/* Functions to wrap the low-level driver */
void usbd_poll(usbd_device *usbd_dev)
{
	usbd_dev->driver->poll(usbd_dev);
 8001b48:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	4718      	bx	r3

08001b50 <usbd_ep_setup>:
	}
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
 8001b50:	b410      	push	{r4}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8001b52:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
 8001b56:	68a4      	ldr	r4, [r4, #8]
 8001b58:	46a4      	mov	ip, r4
}
 8001b5a:	bc10      	pop	{r4}
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8001b5c:	4760      	bx	ip

08001b5e <_usbd_reset>:
{
 8001b5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	usbd_dev->current_address = 0;
 8001b60:	2500      	movs	r5, #0
{
 8001b62:	4604      	mov	r4, r0
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 8001b64:	6803      	ldr	r3, [r0, #0]
	usbd_dev->current_address = 0;
 8001b66:	82c5      	strh	r5, [r0, #22]
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 8001b68:	79db      	ldrb	r3, [r3, #7]
 8001b6a:	462a      	mov	r2, r5
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	9500      	str	r5, [sp, #0]
 8001b70:	f7ff ffee 	bl	8001b50 <usbd_ep_setup>
	usbd_dev->driver->set_address(usbd_dev, 0);
 8001b74:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8001b78:	4629      	mov	r1, r5
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	4798      	blx	r3
	if (usbd_dev->user_callback_reset) {
 8001b80:	69e3      	ldr	r3, [r4, #28]
 8001b82:	b11b      	cbz	r3, 8001b8c <_usbd_reset+0x2e>
}
 8001b84:	b003      	add	sp, #12
 8001b86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		usbd_dev->user_callback_reset();
 8001b8a:	4718      	bx	r3
}
 8001b8c:	b003      	add	sp, #12
 8001b8e:	bd30      	pop	{r4, r5, pc}

08001b90 <usbd_ep_write_packet>:

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 8001b90:	b410      	push	{r4}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 8001b92:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
 8001b96:	69e4      	ldr	r4, [r4, #28]
 8001b98:	46a4      	mov	ip, r4
}
 8001b9a:	bc10      	pop	{r4}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 8001b9c:	4760      	bx	ip

08001b9e <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 8001b9e:	b410      	push	{r4}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8001ba0:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
 8001ba4:	6a24      	ldr	r4, [r4, #32]
 8001ba6:	46a4      	mov	ip, r4
}
 8001ba8:	bc10      	pop	{r4}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 8001baa:	4760      	bx	ip

08001bac <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 8001bac:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	4718      	bx	r3

08001bb4 <usbd_ep_stall_get>:
}

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 8001bb4:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4718      	bx	r3

08001bbc <stall_transaction>:
 * According to the USB 2.0 specification, section 8.5.3, when a control
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
 8001bbc:	b510      	push	{r4, lr}
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2100      	movs	r1, #0
{
 8001bc2:	4604      	mov	r4, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8001bc4:	f7ff fff2 	bl	8001bac <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001bce:	bd10      	pop	{r4, pc}

08001bd0 <usb_control_recv_chunk>:
		usbd_dev->control_state.ctrl_buf = NULL;
	}
}

static int usb_control_recv_chunk(usbd_device *usbd_dev)
{
 8001bd0:	b570      	push	{r4, r5, r6, lr}
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8001bd2:	6803      	ldr	r3, [r0, #0]
 8001bd4:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8001bd6:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8001bd8:	79db      	ldrb	r3, [r3, #7]
 8001bda:	1aa4      	subs	r4, r4, r2
 8001bdc:	429c      	cmp	r4, r3
 8001bde:	bfa8      	it	ge
 8001be0:	461c      	movge	r4, r3
			usbd_dev->control_state.req.wLength -
			usbd_dev->control_state.ctrl_len);
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
				       usbd_dev->control_state.ctrl_buf +
 8001be2:	6b81      	ldr	r1, [r0, #56]	; 0x38
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8001be4:	b2a6      	uxth	r6, r4
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001be6:	440a      	add	r2, r1
 8001be8:	4633      	mov	r3, r6
 8001bea:	2100      	movs	r1, #0
{
 8001bec:	4605      	mov	r5, r0
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001bee:	f7ff ffd6 	bl	8001b9e <usbd_ep_read_packet>
				       usbd_dev->control_state.ctrl_len,
				       packetsize);

	if (size != packetsize) {
 8001bf2:	4286      	cmp	r6, r0
 8001bf4:	d005      	beq.n	8001c02 <usb_control_recv_chunk+0x32>
		stall_transaction(usbd_dev);
 8001bf6:	4628      	mov	r0, r5
 8001bf8:	f7ff ffe0 	bl	8001bbc <stall_transaction>
		return -1;
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	usbd_dev->control_state.ctrl_len += size;

	return packetsize;
}
 8001c00:	bd70      	pop	{r4, r5, r6, pc}
	usbd_dev->control_state.ctrl_len += size;
 8001c02:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8001c04:	b2a0      	uxth	r0, r4
 8001c06:	441e      	add	r6, r3
 8001c08:	87ae      	strh	r6, [r5, #60]	; 0x3c
	return packetsize;
 8001c0a:	e7f9      	b.n	8001c00 <usb_control_recv_chunk+0x30>

08001c0c <usb_control_send_chunk>:
{
 8001c0c:	b510      	push	{r4, lr}
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001c0e:	6803      	ldr	r3, [r0, #0]
{
 8001c10:	4604      	mov	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001c12:	79d9      	ldrb	r1, [r3, #7]
			usbd_dev->control_state.ctrl_len) {
 8001c14:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8001c16:	6b82      	ldr	r2, [r0, #56]	; 0x38
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001c18:	4299      	cmp	r1, r3
 8001c1a:	d20f      	bcs.n	8001c3c <usb_control_send_chunk+0x30>
		usbd_ep_write_packet(usbd_dev, 0,
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	2100      	movs	r1, #0
 8001c20:	f7ff ffb6 	bl	8001b90 <usbd_ep_write_packet>
		usbd_dev->control_state.state = DATA_IN;
 8001c24:	2302      	movs	r3, #2
 8001c26:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			usbd_dev->desc->bMaxPacketSize0;
 8001c2a:	6823      	ldr	r3, [r4, #0]
		usbd_dev->control_state.ctrl_buf +=
 8001c2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
			usbd_dev->desc->bMaxPacketSize0;
 8001c2e:	79d9      	ldrb	r1, [r3, #7]
		usbd_dev->control_state.ctrl_len -=
 8001c30:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf +=
 8001c32:	440a      	add	r2, r1
		usbd_dev->control_state.ctrl_len -=
 8001c34:	1a5b      	subs	r3, r3, r1
		usbd_dev->control_state.ctrl_buf +=
 8001c36:	63a2      	str	r2, [r4, #56]	; 0x38
		usbd_dev->control_state.ctrl_len -=
 8001c38:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 8001c3a:	bd10      	pop	{r4, pc}
		usbd_ep_write_packet(usbd_dev, 0,
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	f7ff ffa7 	bl	8001b90 <usbd_ep_write_packet>
		usbd_dev->control_state.state = LAST_DATA_IN;
 8001c42:	2303      	movs	r3, #3
 8001c44:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_len = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	87a3      	strh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf = NULL;
 8001c4c:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001c4e:	e7f4      	b.n	8001c3a <usb_control_send_chunk+0x2e>

08001c50 <usb_control_request_dispatch>:

static int usb_control_request_dispatch(usbd_device *usbd_dev,
					struct usb_setup_data *req)
{
 8001c50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c54:	4604      	mov	r4, r0
 8001c56:	460e      	mov	r6, r1
	int i, result = 0;
	struct user_control_callback *cb = usbd_dev->user_control_callback;
 8001c58:	f100 0544 	add.w	r5, r0, #68	; 0x44
 8001c5c:	f100 0b64 	add.w	fp, r0, #100	; 0x64
 8001c60:	f100 0738 	add.w	r7, r0, #56	; 0x38
 8001c64:	f100 083c 	add.w	r8, r0, #60	; 0x3c
		if (cb[i].cb == NULL) {
			break;
		}

		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
			result = cb[i].cb(usbd_dev, req,
 8001c68:	f100 0a40 	add.w	sl, r0, #64	; 0x40
		if (cb[i].cb == NULL) {
 8001c6c:	f8d5 9000 	ldr.w	r9, [r5]
 8001c70:	f1b9 0f00 	cmp.w	r9, #0
 8001c74:	d008      	beq.n	8001c88 <usb_control_request_dispatch+0x38>
		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 8001c76:	7833      	ldrb	r3, [r6, #0]
 8001c78:	7969      	ldrb	r1, [r5, #5]
 8001c7a:	792a      	ldrb	r2, [r5, #4]
 8001c7c:	400b      	ands	r3, r1
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d00b      	beq.n	8001c9a <usb_control_request_dispatch+0x4a>
 8001c82:	3508      	adds	r5, #8
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001c84:	455d      	cmp	r5, fp
 8001c86:	d1f1      	bne.n	8001c6c <usb_control_request_dispatch+0x1c>
			}
		}
	}

	/* Try standard request if not already handled. */
	return _usbd_standard_request(usbd_dev, req,
 8001c88:	4643      	mov	r3, r8
 8001c8a:	463a      	mov	r2, r7
 8001c8c:	4631      	mov	r1, r6
 8001c8e:	4620      	mov	r0, r4
				      &(usbd_dev->control_state.ctrl_buf),
				      &(usbd_dev->control_state.ctrl_len));
}
 8001c90:	b003      	add	sp, #12
 8001c92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return _usbd_standard_request(usbd_dev, req,
 8001c96:	f000 bb02 	b.w	800229e <_usbd_standard_request>
			result = cb[i].cb(usbd_dev, req,
 8001c9a:	f8cd a000 	str.w	sl, [sp]
 8001c9e:	4643      	mov	r3, r8
 8001ca0:	463a      	mov	r2, r7
 8001ca2:	4631      	mov	r1, r6
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	47c8      	blx	r9
			if (result == USBD_REQ_HANDLED ||
 8001ca8:	2801      	cmp	r0, #1
 8001caa:	d8ea      	bhi.n	8001c82 <usb_control_request_dispatch+0x32>
}
 8001cac:	b003      	add	sp, #12
 8001cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001cb2 <usb_control_setup_read>:

/* Handle commands and read requests. */
static void usb_control_setup_read(usbd_device *usbd_dev,
		struct usb_setup_data *req)
{
 8001cb2:	b510      	push	{r4, lr}
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001cb4:	6903      	ldr	r3, [r0, #16]
{
 8001cb6:	4604      	mov	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001cb8:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 8001cba:	798b      	ldrb	r3, [r1, #6]
 8001cbc:	79ca      	ldrb	r2, [r1, #7]
 8001cbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cc2:	8783      	strh	r3, [r0, #60]	; 0x3c

	if (usb_control_request_dispatch(usbd_dev, req)) {
 8001cc4:	f7ff ffc4 	bl	8001c50 <usb_control_request_dispatch>
 8001cc8:	b178      	cbz	r0, 8001cea <usb_control_setup_read+0x38>
		if (usbd_dev->control_state.ctrl_len) {
 8001cca:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8001ccc:	b123      	cbz	r3, 8001cd8 <usb_control_setup_read+0x26>
			/* Go to data out stage if handled. */
			usb_control_send_chunk(usbd_dev);
 8001cce:	4620      	mov	r0, r4
		}
	} else {
		/* Stall endpoint on failure. */
		stall_transaction(usbd_dev);
	}
}
 8001cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			usb_control_send_chunk(usbd_dev);
 8001cd4:	f7ff bf9a 	b.w	8001c0c <usb_control_send_chunk>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f7ff ff57 	bl	8001b90 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001ce8:	bd10      	pop	{r4, pc}
		stall_transaction(usbd_dev);
 8001cea:	4620      	mov	r0, r4
}
 8001cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		stall_transaction(usbd_dev);
 8001cf0:	f7ff bf64 	b.w	8001bbc <stall_transaction>

08001cf4 <usbd_register_control_callback>:
{
 8001cf4:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001cf6:	2600      	movs	r6, #0
 8001cf8:	eb00 05c6 	add.w	r5, r0, r6, lsl #3
		if (usbd_dev->user_control_callback[i].cb) {
 8001cfc:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001cfe:	b12c      	cbz	r4, 8001d0c <usbd_register_control_callback+0x18>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001d00:	3601      	adds	r6, #1
 8001d02:	2e04      	cmp	r6, #4
 8001d04:	d1f8      	bne.n	8001cf8 <usbd_register_control_callback+0x4>
	return -1;
 8001d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}
		usbd_dev->user_control_callback[i].type = type;
 8001d0c:	f885 1048 	strb.w	r1, [r5, #72]	; 0x48
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 8001d10:	f885 2049 	strb.w	r2, [r5, #73]	; 0x49
		usbd_dev->user_control_callback[i].cb = callback;
 8001d14:	646b      	str	r3, [r5, #68]	; 0x44
		return 0;
 8001d16:	4620      	mov	r0, r4
 8001d18:	e7f7      	b.n	8001d0a <usbd_register_control_callback+0x16>

08001d1a <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8001d1a:	b570      	push	{r4, r5, r6, lr}
	struct usb_setup_data *req = &usbd_dev->control_state.req;
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 8001d1c:	2500      	movs	r5, #0
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 8001d1e:	f100 0630 	add.w	r6, r0, #48	; 0x30
	usbd_dev->control_state.complete = NULL;
 8001d22:	6405      	str	r5, [r0, #64]	; 0x40

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 8001d24:	2308      	movs	r3, #8
 8001d26:	4632      	mov	r2, r6
 8001d28:	4629      	mov	r1, r5
{
 8001d2a:	4604      	mov	r4, r0
	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 8001d2c:	f7ff ff37 	bl	8001b9e <usbd_ep_read_packet>
 8001d30:	2808      	cmp	r0, #8
 8001d32:	d004      	beq.n	8001d3e <_usbd_control_setup+0x24>
		stall_transaction(usbd_dev);
 8001d34:	4620      	mov	r0, r4
	} else if (req->bmRequestType & 0x80) {
		usb_control_setup_read(usbd_dev, req);
	} else {
		usb_control_setup_write(usbd_dev, req);
	}
}
 8001d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		stall_transaction(usbd_dev);
 8001d3a:	f7ff bf3f 	b.w	8001bbc <stall_transaction>
	if (req->wLength == 0) {
 8001d3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d40:	b92b      	cbnz	r3, 8001d4e <_usbd_control_setup+0x34>
		usb_control_setup_read(usbd_dev, req);
 8001d42:	4631      	mov	r1, r6
 8001d44:	4620      	mov	r0, r4
}
 8001d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usb_control_setup_read(usbd_dev, req);
 8001d4a:	f7ff bfb2 	b.w	8001cb2 <usb_control_setup_read>
	} else if (req->bmRequestType & 0x80) {
 8001d4e:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 8001d52:	2a00      	cmp	r2, #0
 8001d54:	dbf5      	blt.n	8001d42 <_usbd_control_setup+0x28>
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 8001d56:	8aa2      	ldrh	r2, [r4, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d3eb      	bcc.n	8001d34 <_usbd_control_setup+0x1a>
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001d5c:	6922      	ldr	r2, [r4, #16]
	usbd_dev->control_state.ctrl_len = 0;
 8001d5e:	87a5      	strh	r5, [r4, #60]	; 0x3c
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001d60:	63a2      	str	r2, [r4, #56]	; 0x38
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8001d62:	6822      	ldr	r2, [r4, #0]
 8001d64:	79d2      	ldrb	r2, [r2, #7]
 8001d66:	429a      	cmp	r2, r3
		usbd_dev->control_state.state = DATA_OUT;
 8001d68:	bf34      	ite	cc
 8001d6a:	2305      	movcc	r3, #5
		usbd_dev->control_state.state = LAST_DATA_OUT;
 8001d6c:	2306      	movcs	r3, #6
 8001d6e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001d72:	bd70      	pop	{r4, r5, r6, pc}

08001d74 <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8001d74:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8001d78:	b510      	push	{r4, lr}
	switch (usbd_dev->control_state.state) {
 8001d7a:	2b06      	cmp	r3, #6
{
 8001d7c:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 8001d7e:	d012      	beq.n	8001da6 <_usbd_control_out+0x32>
 8001d80:	2b07      	cmp	r3, #7
 8001d82:	d027      	beq.n	8001dd4 <_usbd_control_out+0x60>
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d121      	bne.n	8001dcc <_usbd_control_out+0x58>
	case DATA_OUT:
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8001d88:	f7ff ff22 	bl	8001bd0 <usb_control_recv_chunk>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	db09      	blt.n	8001da4 <_usbd_control_out+0x30>
			break;
		}
		if ((usbd_dev->control_state.req.wLength -
					usbd_dev->control_state.ctrl_len) <=
 8001d90:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
		if ((usbd_dev->control_state.req.wLength -
 8001d92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d94:	1a9b      	subs	r3, r3, r2
					usbd_dev->desc->bMaxPacketSize0) {
 8001d96:	6822      	ldr	r2, [r4, #0]
 8001d98:	79d2      	ldrb	r2, [r2, #7]
		if ((usbd_dev->control_state.req.wLength -
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	dc02      	bgt.n	8001da4 <_usbd_control_out+0x30>
			usbd_dev->control_state.state = LAST_DATA_OUT;
 8001d9e:	2306      	movs	r3, #6
		 */
		if (usb_control_request_dispatch(usbd_dev,
					&(usbd_dev->control_state.req))) {
			/* Got to status stage on success. */
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
			usbd_dev->control_state.state = STATUS_IN;
 8001da0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8001da4:	bd10      	pop	{r4, pc}
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8001da6:	f7ff ff13 	bl	8001bd0 <usb_control_recv_chunk>
 8001daa:	2800      	cmp	r0, #0
 8001dac:	dbfa      	blt.n	8001da4 <_usbd_control_out+0x30>
		if (usb_control_request_dispatch(usbd_dev,
 8001dae:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001db2:	4620      	mov	r0, r4
 8001db4:	f7ff ff4c 	bl	8001c50 <usb_control_request_dispatch>
 8001db8:	b138      	cbz	r0, 8001dca <_usbd_control_out+0x56>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7ff fee5 	bl	8001b90 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	e7ea      	b.n	8001da0 <_usbd_control_out+0x2c>
			stall_transaction(usbd_dev);
 8001dca:	4620      	mov	r0, r4
}
 8001dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		stall_transaction(usbd_dev);
 8001dd0:	f7ff bef4 	b.w	8001bbc <stall_transaction>
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4619      	mov	r1, r3
 8001dda:	f7ff fee0 	bl	8001b9e <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (usbd_dev->control_state.complete) {
 8001de4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001de6:	b11b      	cbz	r3, 8001df0 <_usbd_control_out+0x7c>
			usbd_dev->control_state.complete(usbd_dev,
 8001de8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001dec:	4620      	mov	r0, r4
 8001dee:	4798      	blx	r3
		usbd_dev->control_state.complete = NULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	6423      	str	r3, [r4, #64]	; 0x40
		break;
 8001df4:	e7d6      	b.n	8001da4 <_usbd_control_out+0x30>

08001df6 <_usbd_control_in>:
void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8001df6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8001dfa:	b510      	push	{r4, lr}
	switch (usbd_dev->control_state.state) {
 8001dfc:	2b03      	cmp	r3, #3
{
 8001dfe:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 8001e00:	d007      	beq.n	8001e12 <_usbd_control_in+0x1c>
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d009      	beq.n	8001e1a <_usbd_control_in+0x24>
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d11c      	bne.n	8001e44 <_usbd_control_in+0x4e>
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
	}
}
 8001e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_control_send_chunk(usbd_dev);
 8001e0e:	f7ff befd 	b.w	8001c0c <usb_control_send_chunk>
		usbd_dev->control_state.state = STATUS_OUT;
 8001e12:	2307      	movs	r3, #7
		usbd_dev->control_state.state = IDLE;
 8001e14:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8001e18:	bd10      	pop	{r4, pc}
		if (usbd_dev->control_state.complete) {
 8001e1a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001e1c:	b113      	cbz	r3, 8001e24 <_usbd_control_in+0x2e>
			usbd_dev->control_state.complete(usbd_dev,
 8001e1e:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001e22:	4798      	blx	r3
		if ((req->bmRequestType == 0) &&
 8001e24:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001e28:	b953      	cbnz	r3, 8001e40 <_usbd_control_in+0x4a>
 8001e2a:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8001e2e:	2b05      	cmp	r3, #5
 8001e30:	d106      	bne.n	8001e40 <_usbd_control_in+0x4a>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001e32:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8001e34:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8001e38:	b2c9      	uxtb	r1, r1
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	4798      	blx	r3
		usbd_dev->control_state.state = IDLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	e7e7      	b.n	8001e14 <_usbd_control_in+0x1e>
}
 8001e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		stall_transaction(usbd_dev);
 8001e48:	f7ff beb8 	b.w	8001bbc <stall_transaction>

08001e4c <usb_standard_set_configuration>:
{
 8001e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4e:	460d      	mov	r5, r1
	if(req->wValue > 0) {
 8001e50:	8849      	ldrh	r1, [r1, #2]
{
 8001e52:	4604      	mov	r4, r0
	if(req->wValue > 0) {
 8001e54:	b179      	cbz	r1, 8001e76 <usb_standard_set_configuration+0x2a>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8001e56:	6803      	ldr	r3, [r0, #0]
			if (req->wValue == usbd_dev->config[i].bConfigurationValue) {
 8001e58:	260d      	movs	r6, #13
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8001e5a:	7c58      	ldrb	r0, [r3, #17]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	4298      	cmp	r0, r3
 8001e60:	d801      	bhi.n	8001e66 <usb_standard_set_configuration+0x1a>
			return USBD_REQ_NOTSUPP;
 8001e62:	2000      	movs	r0, #0
}
 8001e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (req->wValue == usbd_dev->config[i].bConfigurationValue) {
 8001e66:	6862      	ldr	r2, [r4, #4]
 8001e68:	fb06 2203 	mla	r2, r6, r3, r2
 8001e6c:	7952      	ldrb	r2, [r2, #5]
 8001e6e:	428a      	cmp	r2, r1
 8001e70:	d003      	beq.n	8001e7a <usb_standard_set_configuration+0x2e>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8001e72:	3301      	adds	r3, #1
 8001e74:	e7f3      	b.n	8001e5e <usb_standard_set_configuration+0x12>
	int found_index = -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	usbd_dev->current_config = found_index + 1;
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	75e3      	strb	r3, [r4, #23]
	if (usbd_dev->current_config > 0) {
 8001e80:	b94b      	cbnz	r3, 8001e96 <usb_standard_set_configuration+0x4a>
	usbd_dev->driver->ep_reset(usbd_dev);
 8001e82:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8001e86:	4620      	mov	r0, r4
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	4798      	blx	r3
	if (usbd_dev->user_callback_set_config[0]) {
 8001e8c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8001e90:	b99b      	cbnz	r3, 8001eba <usb_standard_set_configuration+0x6e>
	return 1;
 8001e92:	2001      	movs	r0, #1
 8001e94:	e7e6      	b.n	8001e64 <usb_standard_set_configuration+0x18>
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];
 8001e96:	220d      	movs	r2, #13
 8001e98:	4353      	muls	r3, r2
 8001e9a:	6862      	ldr	r2, [r4, #4]
 8001e9c:	3b0d      	subs	r3, #13
 8001e9e:	4413      	add	r3, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001ea0:	2200      	movs	r2, #0
				*cfg->interface[i].cur_altsetting = 0;
 8001ea2:	4610      	mov	r0, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001ea4:	7919      	ldrb	r1, [r3, #4]
 8001ea6:	4291      	cmp	r1, r2
 8001ea8:	d9eb      	bls.n	8001e82 <usb_standard_set_configuration+0x36>
			if (cfg->interface[i].cur_altsetting) {
 8001eaa:	f8d3 1009 	ldr.w	r1, [r3, #9]
 8001eae:	0116      	lsls	r6, r2, #4
 8001eb0:	5871      	ldr	r1, [r6, r1]
 8001eb2:	b101      	cbz	r1, 8001eb6 <usb_standard_set_configuration+0x6a>
				*cfg->interface[i].cur_altsetting = 0;
 8001eb4:	7008      	strb	r0, [r1, #0]
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001eb6:	3201      	adds	r2, #1
 8001eb8:	e7f4      	b.n	8001ea4 <usb_standard_set_configuration+0x58>
			usbd_dev->user_control_callback[i].cb = NULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f104 06c4 	add.w	r6, r4, #196	; 0xc4
 8001ec0:	6463      	str	r3, [r4, #68]	; 0x44
 8001ec2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001ec4:	6563      	str	r3, [r4, #84]	; 0x54
 8001ec6:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001ec8:	f104 07d4 	add.w	r7, r4, #212	; 0xd4
			if (usbd_dev->user_callback_set_config[i]) {
 8001ecc:	f856 3b04 	ldr.w	r3, [r6], #4
 8001ed0:	b113      	cbz	r3, 8001ed8 <usb_standard_set_configuration+0x8c>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 8001ed2:	8869      	ldrh	r1, [r5, #2]
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	4798      	blx	r3
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001ed8:	42b7      	cmp	r7, r6
 8001eda:	d1f7      	bne.n	8001ecc <usb_standard_set_configuration+0x80>
 8001edc:	e7d9      	b.n	8001e92 <usb_standard_set_configuration+0x46>

08001ede <usb_standard_get_configuration>:
	if (*len > 1) {
 8001ede:	8819      	ldrh	r1, [r3, #0]
	(*buf)[0] = cfg->bConfigurationValue;
 8001ee0:	6812      	ldr	r2, [r2, #0]
	if (*len > 1) {
 8001ee2:	2901      	cmp	r1, #1
		*len = 1;
 8001ee4:	bf84      	itt	hi
 8001ee6:	2101      	movhi	r1, #1
 8001ee8:	8019      	strhhi	r1, [r3, #0]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[usbd_dev->current_config - 1];
 8001eea:	7dc3      	ldrb	r3, [r0, #23]
	(*buf)[0] = cfg->bConfigurationValue;
 8001eec:	6841      	ldr	r1, [r0, #4]
 8001eee:	200d      	movs	r0, #13
 8001ef0:	fb00 1303 	mla	r3, r0, r3, r1
 8001ef4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
}
 8001ef8:	2001      	movs	r0, #1
	(*buf)[0] = cfg->bConfigurationValue;
 8001efa:	7013      	strb	r3, [r2, #0]
}
 8001efc:	4770      	bx	lr

08001efe <usb_standard_get_interface>:
{
 8001efe:	b530      	push	{r4, r5, lr}
	const struct usb_config_descriptor *cfx = &usbd_dev->config[usbd_dev->current_config - 1];
 8001f00:	240d      	movs	r4, #13
 8001f02:	7dc5      	ldrb	r5, [r0, #23]
 8001f04:	6840      	ldr	r0, [r0, #4]
 8001f06:	436c      	muls	r4, r5
 8001f08:	3c0d      	subs	r4, #13
 8001f0a:	4404      	add	r4, r0
	if (req->wIndex >= cfx->bNumInterfaces) {
 8001f0c:	888d      	ldrh	r5, [r1, #4]
 8001f0e:	7920      	ldrb	r0, [r4, #4]
 8001f10:	4285      	cmp	r5, r0
 8001f12:	d20c      	bcs.n	8001f2e <usb_standard_get_interface+0x30>
	*len = 1;
 8001f14:	2001      	movs	r0, #1
 8001f16:	8018      	strh	r0, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 8001f18:	888b      	ldrh	r3, [r1, #4]
 8001f1a:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	581b      	ldr	r3, [r3, r0]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8001f22:	b103      	cbz	r3, 8001f26 <usb_standard_get_interface+0x28>
 8001f24:	781b      	ldrb	r3, [r3, #0]
	return USBD_REQ_HANDLED;
 8001f26:	2001      	movs	r0, #1
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	7013      	strb	r3, [r2, #0]
}
 8001f2c:	bd30      	pop	{r4, r5, pc}
		return USBD_REQ_NOTSUPP;
 8001f2e:	2000      	movs	r0, #0
 8001f30:	e7fc      	b.n	8001f2c <usb_standard_get_interface+0x2e>

08001f32 <usb_standard_device_get_status>:
	if (*len > 2) {
 8001f32:	8819      	ldrh	r1, [r3, #0]
}
 8001f34:	2001      	movs	r0, #1
	if (*len > 2) {
 8001f36:	2902      	cmp	r1, #2
		*len = 2;
 8001f38:	bf84      	itt	hi
 8001f3a:	2102      	movhi	r1, #2
 8001f3c:	8019      	strhhi	r1, [r3, #0]
	(*buf)[0] = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	6811      	ldr	r1, [r2, #0]
 8001f42:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	7053      	strb	r3, [r2, #1]
}
 8001f48:	4770      	bx	lr

08001f4a <usb_standard_endpoint_get_status>:
{
 8001f4a:	b510      	push	{r4, lr}
 8001f4c:	4614      	mov	r4, r2
	if (*len > 2) {
 8001f4e:	881a      	ldrh	r2, [r3, #0]
 8001f50:	2a02      	cmp	r2, #2
		*len = 2;
 8001f52:	bf84      	itt	hi
 8001f54:	2202      	movhi	r2, #2
 8001f56:	801a      	strhhi	r2, [r3, #0]
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8001f58:	8889      	ldrh	r1, [r1, #4]
 8001f5a:	b2c9      	uxtb	r1, r1
 8001f5c:	f7ff fe2a 	bl	8001bb4 <usbd_ep_stall_get>
 8001f60:	3000      	adds	r0, #0
 8001f62:	bf18      	it	ne
 8001f64:	2001      	movne	r0, #1
	(*buf)[1] = 0;
 8001f66:	2200      	movs	r2, #0
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	7018      	strb	r0, [r3, #0]
	(*buf)[1] = 0;
 8001f6c:	6823      	ldr	r3, [r4, #0]
}
 8001f6e:	2001      	movs	r0, #1
	(*buf)[1] = 0;
 8001f70:	705a      	strb	r2, [r3, #1]
}
 8001f72:	bd10      	pop	{r4, pc}

08001f74 <usb_standard_endpoint_stall>:
{
 8001f74:	b508      	push	{r3, lr}
	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 8001f76:	8889      	ldrh	r1, [r1, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	b2c9      	uxtb	r1, r1
 8001f7c:	f7ff fe16 	bl	8001bac <usbd_ep_stall_set>
}
 8001f80:	2001      	movs	r0, #1
 8001f82:	bd08      	pop	{r3, pc}

08001f84 <usb_standard_endpoint_unstall>:
{
 8001f84:	b508      	push	{r3, lr}
	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 8001f86:	8889      	ldrh	r1, [r1, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	b2c9      	uxtb	r1, r1
 8001f8c:	f7ff fe0e 	bl	8001bac <usbd_ep_stall_set>
}
 8001f90:	2001      	movs	r0, #1
 8001f92:	bd08      	pop	{r3, pc}

08001f94 <usb_standard_set_address>:
{
 8001f94:	b510      	push	{r4, lr}
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8001f96:	780b      	ldrb	r3, [r1, #0]
 8001f98:	b973      	cbnz	r3, 8001fb8 <usb_standard_set_address+0x24>
 8001f9a:	884c      	ldrh	r4, [r1, #2]
 8001f9c:	2c7f      	cmp	r4, #127	; 0x7f
 8001f9e:	d80b      	bhi.n	8001fb8 <usb_standard_set_address+0x24>
	if (usbd_dev->driver->set_address_before_status) {
 8001fa0:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
	usbd_dev->current_address = req->wValue;
 8001fa4:	7584      	strb	r4, [r0, #22]
	if (usbd_dev->driver->set_address_before_status) {
 8001fa6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001faa:	b11a      	cbz	r2, 8001fb4 <usb_standard_set_address+0x20>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001fac:	8849      	ldrh	r1, [r1, #2]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	b2c9      	uxtb	r1, r1
 8001fb2:	4798      	blx	r3
	return 1;
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	e000      	b.n	8001fba <usb_standard_set_address+0x26>
		return 0;
 8001fb8:	2000      	movs	r0, #0
}
 8001fba:	bd10      	pop	{r4, pc}

08001fbc <usb_standard_set_interface>:
	const struct usb_config_descriptor *cfx = &usbd_dev->config[usbd_dev->current_config - 1];
 8001fbc:	220d      	movs	r2, #13
{
 8001fbe:	b570      	push	{r4, r5, r6, lr}
 8001fc0:	461c      	mov	r4, r3
	const struct usb_config_descriptor *cfx = &usbd_dev->config[usbd_dev->current_config - 1];
 8001fc2:	7dc3      	ldrb	r3, [r0, #23]
 8001fc4:	435a      	muls	r2, r3
 8001fc6:	6843      	ldr	r3, [r0, #4]
 8001fc8:	3a0d      	subs	r2, #13
 8001fca:	4413      	add	r3, r2
	if (req->wIndex >= cfx->bNumInterfaces) {
 8001fcc:	791d      	ldrb	r5, [r3, #4]
 8001fce:	888a      	ldrh	r2, [r1, #4]
 8001fd0:	4295      	cmp	r5, r2
 8001fd2:	d918      	bls.n	8002006 <usb_standard_set_interface+0x4a>
	iface = &cfx->interface[req->wIndex];
 8001fd4:	f8d3 5009 	ldr.w	r5, [r3, #9]
 8001fd8:	0112      	lsls	r2, r2, #4
 8001fda:	18ae      	adds	r6, r5, r2
	if (req->wValue >= iface->num_altsetting) {
 8001fdc:	884b      	ldrh	r3, [r1, #2]
 8001fde:	7936      	ldrb	r6, [r6, #4]
 8001fe0:	429e      	cmp	r6, r3
 8001fe2:	d910      	bls.n	8002006 <usb_standard_set_interface+0x4a>
	if (iface->cur_altsetting) {
 8001fe4:	58aa      	ldr	r2, [r5, r2]
 8001fe6:	b152      	cbz	r2, 8001ffe <usb_standard_set_interface+0x42>
		*iface->cur_altsetting = req->wValue;
 8001fe8:	7013      	strb	r3, [r2, #0]
	if (usbd_dev->user_callback_set_altsetting) {
 8001fea:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8001fee:	b113      	cbz	r3, 8001ff6 <usb_standard_set_interface+0x3a>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 8001ff0:	884a      	ldrh	r2, [r1, #2]
 8001ff2:	8889      	ldrh	r1, [r1, #4]
 8001ff4:	4798      	blx	r3
	*len = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	8023      	strh	r3, [r4, #0]
}
 8001ffc:	bd70      	pop	{r4, r5, r6, pc}
	} else if (req->wValue > 0) {
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f3      	beq.n	8001fea <usb_standard_set_interface+0x2e>
		return USBD_REQ_NOTSUPP;
 8002002:	4610      	mov	r0, r2
 8002004:	e7fa      	b.n	8001ffc <usb_standard_set_interface+0x40>
 8002006:	2000      	movs	r0, #0
 8002008:	e7f8      	b.n	8001ffc <usb_standard_set_interface+0x40>

0800200a <usb_standard_get_descriptor>:
{
 800200a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	descr_idx = usb_descriptor_index(req->wValue);
 800200e:	884d      	ldrh	r5, [r1, #2]
{
 8002010:	461f      	mov	r7, r3
	switch (usb_descriptor_type(req->wValue)) {
 8002012:	0a2b      	lsrs	r3, r5, #8
 8002014:	2b02      	cmp	r3, #2
{
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	4616      	mov	r6, r2
	switch (usb_descriptor_type(req->wValue)) {
 800201a:	d011      	beq.n	8002040 <usb_standard_get_descriptor+0x36>
 800201c:	2b03      	cmp	r3, #3
 800201e:	f000 80e5 	beq.w	80021ec <usb_standard_get_descriptor+0x1e2>
 8002022:	2b01      	cmp	r3, #1
 8002024:	f040 811a 	bne.w	800225c <usb_standard_get_descriptor+0x252>
		*buf = (uint8_t *) usbd_dev->desc;
 8002028:	6802      	ldr	r2, [r0, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 800202a:	8839      	ldrh	r1, [r7, #0]
		*buf = (uint8_t *) usbd_dev->desc;
 800202c:	6032      	str	r2, [r6, #0]
		*len = MIN(*len, usbd_dev->desc->bLength);
 800202e:	7812      	ldrb	r2, [r2, #0]
 8002030:	428a      	cmp	r2, r1
 8002032:	bf28      	it	cs
 8002034:	460a      	movcs	r2, r1
 8002036:	803a      	strh	r2, [r7, #0]
		return USBD_REQ_HANDLED;
 8002038:	2001      	movs	r0, #1
}
 800203a:	b009      	add	sp, #36	; 0x24
 800203c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8002040:	260d      	movs	r6, #13
 8002042:	b2ed      	uxtb	r5, r5
 8002044:	436e      	muls	r6, r5
		*buf = usbd_dev->ctrl_buf;
 8002046:	6903      	ldr	r3, [r0, #16]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8002048:	f8d0 8004 	ldr.w	r8, [r0, #4]
		*buf = usbd_dev->ctrl_buf;
 800204c:	6013      	str	r3, [r2, #0]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 800204e:	f818 5006 	ldrb.w	r5, [r8, r6]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8002052:	883c      	ldrh	r4, [r7, #0]
		*buf = usbd_dev->ctrl_buf;
 8002054:	9301      	str	r3, [sp, #4]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8002056:	42a5      	cmp	r5, r4
 8002058:	bf28      	it	cs
 800205a:	4625      	movcs	r5, r4
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 800205c:	eb08 0306 	add.w	r3, r8, r6
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8002060:	462a      	mov	r2, r5
 8002062:	4619      	mov	r1, r3
 8002064:	9801      	ldr	r0, [sp, #4]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8002066:	9302      	str	r3, [sp, #8]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8002068:	f000 fae6 	bl	8002638 <memcpy>
	totallen += cfg->bLength;
 800206c:	2200      	movs	r2, #0
	buf += count;
 800206e:	9b01      	ldr	r3, [sp, #4]
	len -= count;
 8002070:	1b64      	subs	r4, r4, r5
	totallen += cfg->bLength;
 8002072:	f818 6006 	ldrb.w	r6, [r8, r6]
	buf += count;
 8002076:	442b      	add	r3, r5
	len -= count;
 8002078:	b2a4      	uxth	r4, r4
 800207a:	9204      	str	r2, [sp, #16]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 800207c:	9a02      	ldr	r2, [sp, #8]
 800207e:	7911      	ldrb	r1, [r2, #4]
 8002080:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8002084:	4291      	cmp	r1, r2
 8002086:	d803      	bhi.n	8002090 <usb_standard_get_descriptor+0x86>
	*(uint16_t *)(tmpbuf + 2) = totallen;
 8002088:	9b01      	ldr	r3, [sp, #4]
 800208a:	805e      	strh	r6, [r3, #2]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 800208c:	803d      	strh	r5, [r7, #0]
 800208e:	e7d3      	b.n	8002038 <usb_standard_get_descriptor+0x2e>
 8002090:	9a04      	ldr	r2, [sp, #16]
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	9207      	str	r2, [sp, #28]
		if (cfg->interface[i].iface_assoc) {
 8002096:	9a02      	ldr	r2, [sp, #8]
 8002098:	9907      	ldr	r1, [sp, #28]
 800209a:	f8d2 2009 	ldr.w	r2, [r2, #9]
 800209e:	440a      	add	r2, r1
 80020a0:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80020a4:	f1b9 0f00 	cmp.w	r9, #0
 80020a8:	d014      	beq.n	80020d4 <usb_standard_get_descriptor+0xca>
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 80020aa:	f899 8000 	ldrb.w	r8, [r9]
 80020ae:	4618      	mov	r0, r3
 80020b0:	45a0      	cmp	r8, r4
 80020b2:	bf28      	it	cs
 80020b4:	46a0      	movcs	r8, r4
 80020b6:	4649      	mov	r1, r9
 80020b8:	4642      	mov	r2, r8
 80020ba:	f000 fabd 	bl	8002638 <memcpy>
 80020be:	4603      	mov	r3, r0
			totallen += assoc->bLength;
 80020c0:	f899 2000 	ldrb.w	r2, [r9]
			len -= count;
 80020c4:	eba4 0408 	sub.w	r4, r4, r8
			total += count;
 80020c8:	4445      	add	r5, r8
			totallen += assoc->bLength;
 80020ca:	4416      	add	r6, r2
			buf += count;
 80020cc:	4443      	add	r3, r8
			len -= count;
 80020ce:	b2a4      	uxth	r4, r4
			total += count;
 80020d0:	b2ad      	uxth	r5, r5
			totallen += assoc->bLength;
 80020d2:	b2b6      	uxth	r6, r6
{
 80020d4:	2200      	movs	r2, #0
 80020d6:	9205      	str	r2, [sp, #20]
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 80020d8:	9a02      	ldr	r2, [sp, #8]
 80020da:	9907      	ldr	r1, [sp, #28]
 80020dc:	f8d2 2009 	ldr.w	r2, [r2, #9]
 80020e0:	440a      	add	r2, r1
 80020e2:	7910      	ldrb	r0, [r2, #4]
 80020e4:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80020e8:	4288      	cmp	r0, r1
 80020ea:	d802      	bhi.n	80020f2 <usb_standard_get_descriptor+0xe8>
 80020ec:	9a04      	ldr	r2, [sp, #16]
 80020ee:	3201      	adds	r2, #1
 80020f0:	e7c3      	b.n	800207a <usb_standard_get_descriptor+0x70>
			const struct usb_interface_descriptor *iface =
 80020f2:	2015      	movs	r0, #21
 80020f4:	9905      	ldr	r1, [sp, #20]
 80020f6:	f8d2 a00c 	ldr.w	sl, [r2, #12]
 80020fa:	fb00 f901 	mul.w	r9, r0, r1
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 80020fe:	f81a 8009 	ldrb.w	r8, [sl, r9]
			const struct usb_interface_descriptor *iface =
 8002102:	eb0a 0b09 	add.w	fp, sl, r9
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8002106:	45a0      	cmp	r8, r4
 8002108:	bf28      	it	cs
 800210a:	46a0      	movcs	r8, r4
 800210c:	4659      	mov	r1, fp
 800210e:	4642      	mov	r2, r8
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fa91 	bl	8002638 <memcpy>
 8002116:	4603      	mov	r3, r0
			totallen += iface->bLength;
 8002118:	f81a 2009 	ldrb.w	r2, [sl, r9]
			if (iface->extra) {
 800211c:	f8db 100d 	ldr.w	r1, [fp, #13]
			len -= count;
 8002120:	eba4 0408 	sub.w	r4, r4, r8
			total += count;
 8002124:	4445      	add	r5, r8
			totallen += iface->bLength;
 8002126:	4416      	add	r6, r2
			buf += count;
 8002128:	4443      	add	r3, r8
			len -= count;
 800212a:	b2a4      	uxth	r4, r4
			total += count;
 800212c:	b2ad      	uxth	r5, r5
			totallen += iface->bLength;
 800212e:	b2b6      	uxth	r6, r6
			if (iface->extra) {
 8002130:	b1a9      	cbz	r1, 800215e <usb_standard_get_descriptor+0x154>
				       count = MIN(len, iface->extralen));
 8002132:	f8db 8011 	ldr.w	r8, [fp, #17]
				memcpy(buf, iface->extra,
 8002136:	4618      	mov	r0, r3
				       count = MIN(len, iface->extralen));
 8002138:	45a0      	cmp	r8, r4
 800213a:	bfa8      	it	ge
 800213c:	46a0      	movge	r8, r4
 800213e:	fa1f f988 	uxth.w	r9, r8
				memcpy(buf, iface->extra,
 8002142:	464a      	mov	r2, r9
 8002144:	f000 fa78 	bl	8002638 <memcpy>
 8002148:	4603      	mov	r3, r0
				totallen += iface->extralen;
 800214a:	f8db 2011 	ldr.w	r2, [fp, #17]
				len -= count;
 800214e:	eba4 0409 	sub.w	r4, r4, r9
				total += count;
 8002152:	444d      	add	r5, r9
				totallen += iface->extralen;
 8002154:	4416      	add	r6, r2
				buf += count;
 8002156:	444b      	add	r3, r9
				len -= count;
 8002158:	b2a4      	uxth	r4, r4
				total += count;
 800215a:	b2ad      	uxth	r5, r5
				totallen += iface->extralen;
 800215c:	b2b6      	uxth	r6, r6
{
 800215e:	f04f 0900 	mov.w	r9, #0
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8002162:	f89b 1004 	ldrb.w	r1, [fp, #4]
 8002166:	fa1f f289 	uxth.w	r2, r9
 800216a:	4291      	cmp	r1, r2
 800216c:	d802      	bhi.n	8002174 <usb_standard_get_descriptor+0x16a>
 800216e:	9a05      	ldr	r2, [sp, #20]
 8002170:	3201      	adds	r2, #1
 8002172:	e7b0      	b.n	80020d6 <usb_standard_get_descriptor+0xcc>
				    &iface->endpoint[k];
 8002174:	f8db 2009 	ldr.w	r2, [fp, #9]
				const struct usb_endpoint_descriptor *ep =
 8002178:	ebc9 1a09 	rsb	sl, r9, r9, lsl #4
				    &iface->endpoint[k];
 800217c:	9206      	str	r2, [sp, #24]
				const struct usb_endpoint_descriptor *ep =
 800217e:	4452      	add	r2, sl
 8002180:	9203      	str	r2, [sp, #12]
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 8002182:	9a06      	ldr	r2, [sp, #24]
 8002184:	9903      	ldr	r1, [sp, #12]
 8002186:	f812 800a 	ldrb.w	r8, [r2, sl]
 800218a:	4618      	mov	r0, r3
 800218c:	45a0      	cmp	r8, r4
 800218e:	bf28      	it	cs
 8002190:	46a0      	movcs	r8, r4
 8002192:	4642      	mov	r2, r8
 8002194:	f000 fa50 	bl	8002638 <memcpy>
 8002198:	4603      	mov	r3, r0
				totallen += ep->bLength;
 800219a:	9a06      	ldr	r2, [sp, #24]
				len -= count;
 800219c:	eba4 0408 	sub.w	r4, r4, r8
				totallen += ep->bLength;
 80021a0:	f812 200a 	ldrb.w	r2, [r2, sl]
				total += count;
 80021a4:	4445      	add	r5, r8
				totallen += ep->bLength;
 80021a6:	4416      	add	r6, r2
				if (ep->extra) {
 80021a8:	9a03      	ldr	r2, [sp, #12]
				buf += count;
 80021aa:	4443      	add	r3, r8
				if (ep->extra) {
 80021ac:	f8d2 1007 	ldr.w	r1, [r2, #7]
				len -= count;
 80021b0:	b2a4      	uxth	r4, r4
				total += count;
 80021b2:	b2ad      	uxth	r5, r5
				totallen += ep->bLength;
 80021b4:	b2b6      	uxth	r6, r6
				if (ep->extra) {
 80021b6:	b1b1      	cbz	r1, 80021e6 <usb_standard_get_descriptor+0x1dc>
					       count = MIN(len, ep->extralen));
 80021b8:	f8d2 800b 	ldr.w	r8, [r2, #11]
					memcpy(buf, ep->extra,
 80021bc:	4618      	mov	r0, r3
					       count = MIN(len, ep->extralen));
 80021be:	45a0      	cmp	r8, r4
 80021c0:	bfa8      	it	ge
 80021c2:	46a0      	movge	r8, r4
 80021c4:	fa1f fa88 	uxth.w	sl, r8
					memcpy(buf, ep->extra,
 80021c8:	4652      	mov	r2, sl
 80021ca:	f000 fa35 	bl	8002638 <memcpy>
 80021ce:	4603      	mov	r3, r0
					totallen += ep->extralen;
 80021d0:	9a03      	ldr	r2, [sp, #12]
					len -= count;
 80021d2:	eba4 040a 	sub.w	r4, r4, sl
					totallen += ep->extralen;
 80021d6:	f8d2 200b 	ldr.w	r2, [r2, #11]
					total += count;
 80021da:	4455      	add	r5, sl
					totallen += ep->extralen;
 80021dc:	4416      	add	r6, r2
					buf += count;
 80021de:	4453      	add	r3, sl
					len -= count;
 80021e0:	b2a4      	uxth	r4, r4
					total += count;
 80021e2:	b2ad      	uxth	r5, r5
					totallen += ep->extralen;
 80021e4:	b2b6      	uxth	r6, r6
 80021e6:	f109 0901 	add.w	r9, r9, #1
 80021ea:	e7ba      	b.n	8002162 <usb_standard_get_descriptor+0x158>
		if (descr_idx == 0) {
 80021ec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 80021f0:	6904      	ldr	r4, [r0, #16]
		if (descr_idx == 0) {
 80021f2:	d10d      	bne.n	8002210 <usb_standard_get_descriptor+0x206>
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 80021f4:	2309      	movs	r3, #9
 80021f6:	70a3      	strb	r3, [r4, #2]
 80021f8:	2304      	movs	r3, #4
 80021fa:	70e3      	strb	r3, [r4, #3]
			sd->bLength = sizeof(sd->bLength) +
 80021fc:	7023      	strb	r3, [r4, #0]
			*len = MIN(*len, sd->bLength);
 80021fe:	883b      	ldrh	r3, [r7, #0]
 8002200:	2b04      	cmp	r3, #4
 8002202:	bf28      	it	cs
 8002204:	2304      	movcs	r3, #4
 8002206:	803b      	strh	r3, [r7, #0]
		sd->bDescriptorType = USB_DT_STRING;
 8002208:	2303      	movs	r3, #3
 800220a:	7063      	strb	r3, [r4, #1]
		*buf = (uint8_t *)sd;
 800220c:	6034      	str	r4, [r6, #0]
 800220e:	e713      	b.n	8002038 <usb_standard_get_descriptor+0x2e>
			if (!usbd_dev->strings) {
 8002210:	6883      	ldr	r3, [r0, #8]
 8002212:	b31b      	cbz	r3, 800225c <usb_standard_get_descriptor+0x252>
			if (array_idx >= usbd_dev->num_strings) {
 8002214:	68c2      	ldr	r2, [r0, #12]
			array_idx = descr_idx - 1;
 8002216:	3d01      	subs	r5, #1
			if (array_idx >= usbd_dev->num_strings) {
 8002218:	42aa      	cmp	r2, r5
 800221a:	dd1f      	ble.n	800225c <usb_standard_get_descriptor+0x252>
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 800221c:	f240 4209 	movw	r2, #1033	; 0x409
 8002220:	8889      	ldrh	r1, [r1, #4]
 8002222:	4291      	cmp	r1, r2
 8002224:	d11a      	bne.n	800225c <usb_standard_get_descriptor+0x252>
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8002226:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800222a:	4628      	mov	r0, r5
 800222c:	f000 fa22 	bl	8002674 <strlen>
 8002230:	3001      	adds	r0, #1
 8002232:	0040      	lsls	r0, r0, #1
 8002234:	b2c0      	uxtb	r0, r0
 8002236:	7020      	strb	r0, [r4, #0]
			*len = MIN(*len, sd->bLength);
 8002238:	883b      	ldrh	r3, [r7, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 800223a:	4629      	mov	r1, r5
			*len = MIN(*len, sd->bLength);
 800223c:	4298      	cmp	r0, r3
 800223e:	bf28      	it	cs
 8002240:	4618      	movcs	r0, r3
 8002242:	8038      	strh	r0, [r7, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 8002244:	883b      	ldrh	r3, [r7, #0]
 8002246:	1b4a      	subs	r2, r1, r5
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	3b01      	subs	r3, #1
 800224c:	4293      	cmp	r3, r2
 800224e:	dddb      	ble.n	8002208 <usb_standard_get_descriptor+0x1fe>
					usbd_dev->strings[array_idx][i];
 8002250:	f811 3b01 	ldrb.w	r3, [r1], #1
				sd->wData[i] =
 8002254:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002258:	8053      	strh	r3, [r2, #2]
 800225a:	e7f3      	b.n	8002244 <usb_standard_get_descriptor+0x23a>
				return USBD_REQ_NOTSUPP;
 800225c:	2000      	movs	r0, #0
 800225e:	e6ec      	b.n	800203a <usb_standard_get_descriptor+0x30>

08002260 <usb_standard_interface_get_status>:
 8002260:	8819      	ldrh	r1, [r3, #0]
 8002262:	2001      	movs	r0, #1
 8002264:	2902      	cmp	r1, #2
 8002266:	bf84      	itt	hi
 8002268:	2102      	movhi	r1, #2
 800226a:	8019      	strhhi	r1, [r3, #0]
 800226c:	2300      	movs	r3, #0
 800226e:	6811      	ldr	r1, [r2, #0]
 8002270:	700b      	strb	r3, [r1, #0]
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	7053      	strb	r3, [r2, #1]
 8002276:	4770      	bx	lr

08002278 <usbd_register_set_config_callback>:
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8002278:	2200      	movs	r2, #0
{
 800227a:	b510      	push	{r4, lr}
 800227c:	f100 04c4 	add.w	r4, r0, #196	; 0xc4
		if (usbd_dev->user_callback_set_config[i])
 8002280:	f854 3b04 	ldr.w	r3, [r4], #4
 8002284:	b12b      	cbz	r3, 8002292 <usbd_register_set_config_callback+0x1a>
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8002286:	3201      	adds	r2, #1
 8002288:	2a04      	cmp	r2, #4
 800228a:	d1f9      	bne.n	8002280 <usbd_register_set_config_callback+0x8>
	return -1;
 800228c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002290:	bd10      	pop	{r4, pc}
		usbd_dev->user_callback_set_config[i] = callback;
 8002292:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8002296:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
		return 0;
 800229a:	4618      	mov	r0, r3
 800229c:	e7f8      	b.n	8002290 <usbd_register_set_config_callback+0x18>

0800229e <_usbd_standard_request>:

int _usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 800229e:	b410      	push	{r4}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 80022a0:	780c      	ldrb	r4, [r1, #0]
 80022a2:	f014 0f60 	tst.w	r4, #96	; 0x60
 80022a6:	d106      	bne.n	80022b6 <_usbd_standard_request+0x18>
		return 0;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 80022a8:	f004 041f 	and.w	r4, r4, #31
 80022ac:	2c01      	cmp	r4, #1
 80022ae:	d008      	beq.n	80022c2 <_usbd_standard_request+0x24>
 80022b0:	d304      	bcc.n	80022bc <_usbd_standard_request+0x1e>
 80022b2:	2c02      	cmp	r4, #2
 80022b4:	d008      	beq.n	80022c8 <_usbd_standard_request+0x2a>
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return 0;
	}
}
 80022b6:	2000      	movs	r0, #0
 80022b8:	bc10      	pop	{r4}
 80022ba:	4770      	bx	lr
 80022bc:	bc10      	pop	{r4}
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 80022be:	f7ff b8d1 	b.w	8001464 <_usbd_standard_request_device>
}
 80022c2:	bc10      	pop	{r4}
		return _usbd_standard_request_interface(usbd_dev, req,
 80022c4:	f7ff b8f2 	b.w	80014ac <_usbd_standard_request_interface>
}
 80022c8:	bc10      	pop	{r4}
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 80022ca:	f7ff b907 	b.w	80014dc <_usbd_standard_request_endpoint>

080022ce <st_usbfs_copy_to_pm>:

void st_usbfs_copy_to_pm(volatile void *vPM, const void *buf, uint16_t len)
{
	const uint16_t *lbuf = buf;
	volatile uint32_t *PM = vPM;
	for (len = (len + 1) >> 1; len; len--) {
 80022ce:	3201      	adds	r2, #1
 80022d0:	3902      	subs	r1, #2
 80022d2:	1052      	asrs	r2, r2, #1
 80022d4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80022d8:	4291      	cmp	r1, r2
 80022da:	d100      	bne.n	80022de <st_usbfs_copy_to_pm+0x10>
		*PM++ = *lbuf++;
	}
}
 80022dc:	4770      	bx	lr
		*PM++ = *lbuf++;
 80022de:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80022e2:	3004      	adds	r0, #4
 80022e4:	f840 3c04 	str.w	r3, [r0, #-4]
 80022e8:	e7f6      	b.n	80022d8 <st_usbfs_copy_to_pm+0xa>

080022ea <st_usbfs_copy_from_pm>:
 * @param buf Source pointer to data buffer.
 * @param vPM Destination pointer into packet memory.
 * @param len Number of bytes to copy.
 */
void st_usbfs_copy_from_pm(void *buf, const volatile void *vPM, uint16_t len)
{
 80022ea:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t *lbuf = buf;
	const volatile uint16_t *PM = vPM;
	uint8_t odd = len & 1;
 80022ec:	f002 0601 	and.w	r6, r2, #1

	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 80022f0:	0852      	lsrs	r2, r2, #1
	const volatile uint16_t *PM = vPM;
 80022f2:	460d      	mov	r5, r1
	uint16_t *lbuf = buf;
 80022f4:	4604      	mov	r4, r0
	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 80022f6:	4613      	mov	r3, r2
 80022f8:	b92b      	cbnz	r3, 8002306 <st_usbfs_copy_from_pm+0x1c>
		*lbuf = *PM;
	}

	if (odd) {
 80022fa:	b11e      	cbz	r6, 8002304 <st_usbfs_copy_from_pm+0x1a>
		*(uint8_t *) lbuf = *(uint8_t *) PM;
 80022fc:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8002300:	f800 3012 	strb.w	r3, [r0, r2, lsl #1]
	}
}
 8002304:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*lbuf = *PM;
 8002306:	f835 7b04 	ldrh.w	r7, [r5], #4
	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 800230a:	3b01      	subs	r3, #1
		*lbuf = *PM;
 800230c:	f824 7b02 	strh.w	r7, [r4], #2
	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 8002310:	b29b      	uxth	r3, r3
 8002312:	e7f1      	b.n	80022f8 <st_usbfs_copy_from_pm+0xe>

08002314 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8002314:	2201      	movs	r2, #1
 8002316:	0943      	lsrs	r3, r0, #5
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800231e:	f000 001f 	and.w	r0, r0, #31
 8002322:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002326:	fa02 f000 	lsl.w	r0, r2, r0
 800232a:	6018      	str	r0, [r3, #0]
}
 800232c:	4770      	bx	lr

0800232e <st_usbfs_ep_stall_get>:
	if (addr & 0x80) {
 800232e:	060b      	lsls	r3, r1, #24
 8002330:	d50e      	bpl.n	8002350 <st_usbfs_ep_stall_get+0x22>
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
 8002332:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002336:	0089      	lsls	r1, r1, #2
 8002338:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800233c:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8002340:	6808      	ldr	r0, [r1, #0]
 8002342:	f000 0030 	and.w	r0, r0, #48	; 0x30
			return 1;
 8002346:	2810      	cmp	r0, #16
 8002348:	bf14      	ite	ne
 800234a:	2000      	movne	r0, #0
 800234c:	2001      	moveq	r0, #1
}
 800234e:	4770      	bx	lr
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 8002350:	0089      	lsls	r1, r1, #2
 8002352:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002356:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800235a:	6808      	ldr	r0, [r1, #0]
 800235c:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
			return 1;
 8002360:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8002364:	e7f0      	b.n	8002348 <st_usbfs_ep_stall_get+0x1a>
	...

08002368 <os_event_init>:
static Evt_t lastSignaledEvent = NO_EVENT;
#endif

void os_event_init(void) {
#if( N_TOTAL_EVENTS > 0 )
    nEvents = 0;
 8002368:	2200      	movs	r2, #0
 800236a:	4b01      	ldr	r3, [pc, #4]	; (8002370 <os_event_init+0x8>)
 800236c:	701a      	strb	r2, [r3, #0]
#endif
}
 800236e:	4770      	bx	lr
 8002370:	20000240 	.word	0x20000240

08002374 <os_signal_event>:
#endif
}


void os_signal_event( Evt_t ev ) {
	lastSignaledEvent = ev;
 8002374:	4b01      	ldr	r3, [pc, #4]	; (800237c <os_signal_event+0x8>)
 8002376:	7018      	strb	r0, [r3, #0]
    os_task_signal_event( ev );
 8002378:	f000 b8ea 	b.w	8002550 <os_task_signal_event>
 800237c:	20000054 	.word	0x20000054

08002380 <os_event_set_signaling_tid>:
}


void os_event_set_signaling_tid( Evt_t ev, uint8_t tid ) {
#if( N_TOTAL_EVENTS > 0 )
	eventList[ ev ].signaledByTid = tid;
 8002380:	4b02      	ldr	r3, [pc, #8]	; (800238c <os_event_set_signaling_tid+0xc>)
 8002382:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002386:	7041      	strb	r1, [r0, #1]
#endif
}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000232 	.word	0x20000232

08002390 <os_init>:
*   }
*   @endcode
*       
*		 */
/*********************************************************************************/
void os_init( void ) {
 8002390:	b508      	push	{r3, lr}
	running_tid = NO_TID;
 8002392:	23ff      	movs	r3, #255	; 0xff
 8002394:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <os_init+0x28>)
 8002396:	7013      	strb	r3, [r2, #0]
    last_running_task = NO_TID;
 8002398:	4a08      	ldr	r2, [pc, #32]	; (80023bc <os_init+0x2c>)
 800239a:	7013      	strb	r3, [r2, #0]
    running = 0;
 800239c:	2200      	movs	r2, #0
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <os_init+0x30>)
 80023a0:	701a      	strb	r2, [r3, #0]
    os_sem_init();
 80023a2:	f000 f851 	bl	8002448 <os_sem_init>
    os_event_init();
 80023a6:	f7ff ffdf 	bl	8002368 <os_event_init>
    os_msgQ_init();
 80023aa:	f000 f811 	bl	80023d0 <os_msgQ_init>
    os_task_init();
}
 80023ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_task_init();
 80023b2:	f000 b84f 	b.w	8002454 <os_task_init>
 80023b6:	bf00      	nop
 80023b8:	20000848 	.word	0x20000848
 80023bc:	2000084a 	.word	0x2000084a
 80023c0:	20000849 	.word	0x20000849

080023c4 <os_running>:
}


uint8_t os_running( void ) {
    return running;
}
 80023c4:	4b01      	ldr	r3, [pc, #4]	; (80023cc <os_running+0x8>)
 80023c6:	7818      	ldrb	r0, [r3, #0]
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000849 	.word	0x20000849

080023d0 <os_msgQ_init>:

void os_msgQ_init() {
    
#if( N_QUEUES > 0 )
    uint8_t i;
    nQueues = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	4a06      	ldr	r2, [pc, #24]	; (80023ec <os_msgQ_init+0x1c>)
 80023d4:	7013      	strb	r3, [r2, #0]
    for ( i = 0; i < N_QUEUES; ++i  ) {
        msgQList[ i ].q.list = 0;
 80023d6:	4a06      	ldr	r2, [pc, #24]	; (80023f0 <os_msgQ_init+0x20>)
 80023d8:	e9c2 3300 	strd	r3, r3, [r2]
        msgQList[ i ].q.head = 0;
        msgQList[ i ].q.tail = 0;
 80023dc:	7213      	strb	r3, [r2, #8]
        msgQList[ i ].q.size = 0;
        msgQList[ i ].q.messageSize = 0;
        msgQList[ i ].taskId = 0;
 80023de:	8193      	strh	r3, [r2, #12]
        msgQList[ i ].q.list = 0;
 80023e0:	e9c2 3304 	strd	r3, r3, [r2, #16]
        msgQList[ i ].q.tail = 0;
 80023e4:	7613      	strb	r3, [r2, #24]
        msgQList[ i ].taskId = 0;
 80023e6:	8393      	strh	r3, [r2, #28]
        msgQList[ i ].change = 0;
    }
#endif
}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000241 	.word	0x20000241
 80023f0:	20000184 	.word	0x20000184

080023f4 <os_msgQ_tick>:
#else
    return 0;
#endif
}

void os_msgQ_tick( MsgQ_t queue ) {
 80023f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if( N_QUEUES > 0 )
    uint8_t nextMessage;
    Msg_t *pMsg;
    OSQueue_t *q = &msgQList[ queue ].q;
    nextMessage = (q->tail+1) % q->size;
 80023f6:	4d13      	ldr	r5, [pc, #76]	; (8002444 <os_msgQ_tick+0x50>)
 80023f8:	eb05 1500 	add.w	r5, r5, r0, lsl #4
 80023fc:	79ec      	ldrb	r4, [r5, #7]
 80023fe:	7a2a      	ldrb	r2, [r5, #8]
 8002400:	1c63      	adds	r3, r4, #1
 8002402:	fb93 f4f2 	sdiv	r4, r3, r2
 8002406:	fb02 3414 	mls	r4, r2, r4, r3

    uint8_t head = q->head;
 800240a:	79ae      	ldrb	r6, [r5, #6]
    uint16_t msgSz = q->messageSize;
 800240c:	88af      	ldrh	r7, [r5, #4]
    nextMessage = (q->tail+1) % q->size;
 800240e:	b2e4      	uxtb	r4, r4

    while ( nextMessage != head ) {
 8002410:	42b4      	cmp	r4, r6
 8002412:	d100      	bne.n	8002416 <os_msgQ_tick+0x22>
        }
        nextMessage = (nextMessage + 1) % q->size;

    }
#endif    
}
 8002414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pMsg = (Msg_t*)( (Mem_t)q->list + nextMessage * msgSz );
 8002416:	682a      	ldr	r2, [r5, #0]
 8002418:	fb04 2207 	mla	r2, r4, r7, r2
        if ( pMsg->delay > 0 ) {
 800241c:	6853      	ldr	r3, [r2, #4]
 800241e:	b14b      	cbz	r3, 8002434 <os_msgQ_tick+0x40>
            --(pMsg->delay);
 8002420:	3b01      	subs	r3, #1
 8002422:	6053      	str	r3, [r2, #4]
            if ( pMsg->delay == 0 ) {
 8002424:	b933      	cbnz	r3, 8002434 <os_msgQ_tick+0x40>
                event_ISR_signal( msgQList[ queue ].change );
 8002426:	7b68      	ldrb	r0, [r5, #13]
 8002428:	f7ff ffa4 	bl	8002374 <os_signal_event>
 800242c:	21fe      	movs	r1, #254	; 0xfe
 800242e:	7b68      	ldrb	r0, [r5, #13]
 8002430:	f7ff ffa6 	bl	8002380 <os_event_set_signaling_tid>
        nextMessage = (nextMessage + 1) % q->size;
 8002434:	7a2a      	ldrb	r2, [r5, #8]
 8002436:	3401      	adds	r4, #1
 8002438:	fb94 f3f2 	sdiv	r3, r4, r2
 800243c:	fb02 4413 	mls	r4, r2, r3, r4
 8002440:	b2e4      	uxtb	r4, r4
 8002442:	e7e5      	b.n	8002410 <os_msgQ_tick+0x1c>
 8002444:	20000184 	.word	0x20000184

08002448 <os_sem_init>:
static Sem_t nSemaphores;
#endif							   

void os_sem_init(void) {
#if ( N_TOTAL_SEMAPHORES > 0 )
    nSemaphores = 0;
 8002448:	2200      	movs	r2, #0
 800244a:	4b01      	ldr	r3, [pc, #4]	; (8002450 <os_sem_init+0x8>)
 800244c:	701a      	strb	r2, [r3, #0]
#endif
}
 800244e:	4770      	bx	lr
 8002450:	20000242 	.word	0x20000242

08002454 <os_task_init>:
static uint8_t nTasks = 0;

void os_task_init( void ) {
    uint8_t i;
    uint8_t j;
    nTasks = 0;
 8002454:	2200      	movs	r2, #0
    tcb *task;

    for ( i = 0; i < N_TASKS; ++i ) {
        task = &task_list[i];
        task->clockId = 0xff;
 8002456:	21ff      	movs	r1, #255	; 0xff
    nTasks = 0;
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <os_task_init+0x38>)
 800245a:	701a      	strb	r2, [r3, #0]
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <os_task_init+0x3c>)
 800245e:	f103 008c 	add.w	r0, r3, #140	; 0x8c
        task->clockId = 0xff;
 8002462:	7519      	strb	r1, [r3, #20]
        task->internal_state = 0xff;
 8002464:	80d9      	strh	r1, [r3, #6]
        task->msgQ = 0;
 8002466:	73da      	strb	r2, [r3, #15]
        task->waitQ = 0;
 8002468:	741a      	strb	r2, [r3, #16]
        task->msgChangeEvent = 0;
 800246a:	745a      	strb	r2, [r3, #17]
        task->msgResult = 0;
 800246c:	749a      	strb	r2, [r3, #18]
        task->prio = 0;
 800246e:	735a      	strb	r2, [r3, #13]
        task->savedState = SUSPENDED;
 8002470:	715a      	strb	r2, [r3, #5]
        task->semaphore = NO_SEM;
 8002472:	7399      	strb	r1, [r3, #14]
        task->state = SUSPENDED;
 8002474:	711a      	strb	r2, [r3, #4]
        task->taskproc = 0;
 8002476:	601a      	str	r2, [r3, #0]
        task->tid = NO_TID;
 8002478:	7319      	strb	r1, [r3, #12]
        task->time = 0;
 800247a:	609a      	str	r2, [r3, #8]
        task->waitSingleEvent = 0;
 800247c:	74da      	strb	r2, [r3, #19]

        for ( j = 0; j < sizeof( task->eventQueue.eventList); j++ ) {
            task->eventQueue.eventList[j] = 0xff;
 800247e:	7559      	strb	r1, [r3, #21]
        }
        task->data = 0;
 8002480:	619a      	str	r2, [r3, #24]
 8002482:	331c      	adds	r3, #28
    for ( i = 0; i < N_TASKS; ++i ) {
 8002484:	4283      	cmp	r3, r0
 8002486:	d1ec      	bne.n	8002462 <os_task_init+0xe>
    }
}
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000243 	.word	0x20000243
 8002490:	200001a4 	.word	0x200001a4

08002494 <os_task_highest_prio_ready_task>:
/* Finds the task with highest prio that are ready to run - used for prio based scheduling */
uint8_t os_task_highest_prio_ready_task( void ) {
    uint16_t index;
    tcb *task;
    uint8_t highest_prio_task = NO_TID;
    uint8_t highest_prio = 255;
 8002494:	21ff      	movs	r1, #255	; 0xff
uint8_t os_task_highest_prio_ready_task( void ) {
 8002496:	b570      	push	{r4, r5, r6, lr}
    TaskState_t state;
    uint8_t prio;
    
    for ( index = 0; index != nTasks; ++index ) {
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <os_task_highest_prio_ready_task+0x2c>)
    uint8_t highest_prio_task = NO_TID;
 800249a:	4608      	mov	r0, r1
    for ( index = 0; index != nTasks; ++index ) {
 800249c:	781d      	ldrb	r5, [r3, #0]
 800249e:	2300      	movs	r3, #0
 80024a0:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <os_task_highest_prio_ready_task+0x30>)
 80024a2:	b29c      	uxth	r4, r3
 80024a4:	42a5      	cmp	r5, r4
 80024a6:	d100      	bne.n	80024aa <os_task_highest_prio_ready_task+0x16>
            }
        }
    }

    return highest_prio_task;
}
 80024a8:	bd70      	pop	{r4, r5, r6, pc}
        if ( READY == state ) {
 80024aa:	7916      	ldrb	r6, [r2, #4]
        prio = task->prio;
 80024ac:	7b54      	ldrb	r4, [r2, #13]
        if ( READY == state ) {
 80024ae:	2e05      	cmp	r6, #5
 80024b0:	d103      	bne.n	80024ba <os_task_highest_prio_ready_task+0x26>
            if ( prio < highest_prio ) {
 80024b2:	42a1      	cmp	r1, r4
                highest_prio_task = index;
 80024b4:	bf84      	itt	hi
 80024b6:	4621      	movhi	r1, r4
 80024b8:	b2d8      	uxtbhi	r0, r3
 80024ba:	3301      	adds	r3, #1
 80024bc:	321c      	adds	r2, #28
 80024be:	e7f0      	b.n	80024a2 <os_task_highest_prio_ready_task+0xe>
 80024c0:	20000243 	.word	0x20000243
 80024c4:	200001a4 	.word	0x200001a4

080024c8 <os_task_tick>:
		task_waiting_event_set( task );
	}	
}


void os_task_tick( uint8_t id, uint32_t tickSize ) {
 80024c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024cc:	4607      	mov	r7, r0
 80024ce:	4688      	mov	r8, r1
    uint8_t index;
    
    /* Search all tasks and decrement time for waiting tasks */
    for ( index = 0; index != nTasks; ++index ) {
 80024d0:	2600      	movs	r6, #0
 80024d2:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800254c <os_task_tick+0x84>
		TaskState_t state;
		state = task_list[ index ].state;
 80024d6:	4c1c      	ldr	r4, [pc, #112]	; (8002548 <os_task_tick+0x80>)
    for ( index = 0; index != nTasks; ++index ) {
 80024d8:	f899 3000 	ldrb.w	r3, [r9]
 80024dc:	b2f2      	uxtb	r2, r6
 80024de:	4293      	cmp	r3, r2
 80024e0:	d101      	bne.n	80024e6 <os_task_tick+0x1e>
            if ( task_list[ index ].msgQ != NO_QUEUE ) {
                os_msgQ_tick( task_list[ index ].msgQ );
            }
        }
    }
}
 80024e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		state = task_list[ index ].state;
 80024e6:	231c      	movs	r3, #28
 80024e8:	fb03 4102 	mla	r1, r3, r2, r4
 80024ec:	7908      	ldrb	r0, [r1, #4]
    if (( state == WAITING_TIME ) || ( state == WAITING_EVENT_TIMEOUT )){
 80024ee:	2802      	cmp	r0, #2
 80024f0:	d001      	beq.n	80024f6 <os_task_tick+0x2e>
 80024f2:	2804      	cmp	r0, #4
 80024f4:	d121      	bne.n	800253a <os_task_tick+0x72>
        if ( task_list[ index ].clockId == id ) {
 80024f6:	fb03 4302 	mla	r3, r3, r2, r4
 80024fa:	7d19      	ldrb	r1, [r3, #20]
 80024fc:	42b9      	cmp	r1, r7
 80024fe:	d10d      	bne.n	800251c <os_task_tick+0x54>
          if ( task_list[ index ].time <= tickSize ) {
 8002500:	689d      	ldr	r5, [r3, #8]
 8002502:	4545      	cmp	r5, r8
 8002504:	d815      	bhi.n	8002532 <os_task_tick+0x6a>
            task_list[ index ].time = 0;
 8002506:	2100      	movs	r1, #0
            if ( state == WAITING_EVENT_TIMEOUT ) {
 8002508:	2804      	cmp	r0, #4
            task_list[ index ].time = 0;
 800250a:	6099      	str	r1, [r3, #8]
    task->waitSingleEvent = 0;
 800250c:	bf04      	itt	eq
 800250e:	74d9      	strbeq	r1, [r3, #19]
        task->eventQueue.eventList[ event ] = 0;
 8002510:	7559      	strbeq	r1, [r3, #21]
    task_list[ tid ].semaphore = sem;
}


static void task_ready_set( uint8_t tid ) {
    task_list[ tid ].state = READY;
 8002512:	231c      	movs	r3, #28
 8002514:	2105      	movs	r1, #5
 8002516:	fb03 4302 	mla	r3, r3, r2, r4
 800251a:	7119      	strb	r1, [r3, #4]
        if ( id == 0 ) {
 800251c:	b93f      	cbnz	r7, 800252e <os_task_tick+0x66>
            if ( task_list[ index ].msgQ != NO_QUEUE ) {
 800251e:	231c      	movs	r3, #28
 8002520:	fb03 4202 	mla	r2, r3, r2, r4
 8002524:	7bd0      	ldrb	r0, [r2, #15]
 8002526:	28ff      	cmp	r0, #255	; 0xff
 8002528:	d001      	beq.n	800252e <os_task_tick+0x66>
                os_msgQ_tick( task_list[ index ].msgQ );
 800252a:	f7ff ff63 	bl	80023f4 <os_msgQ_tick>
 800252e:	3601      	adds	r6, #1
 8002530:	e7d2      	b.n	80024d8 <os_task_tick+0x10>
            task_list[ index ].time -= tickSize;
 8002532:	eba5 0508 	sub.w	r5, r5, r8
 8002536:	609d      	str	r5, [r3, #8]
 8002538:	e7f0      	b.n	800251c <os_task_tick+0x54>
		else if ( state ==  WAITING_SEM ) {
 800253a:	2801      	cmp	r0, #1
			task_list[ index ].time++;
 800253c:	bf02      	ittt	eq
 800253e:	688b      	ldreq	r3, [r1, #8]
 8002540:	3301      	addeq	r3, #1
 8002542:	608b      	streq	r3, [r1, #8]
 8002544:	e7ea      	b.n	800251c <os_task_tick+0x54>
 8002546:	bf00      	nop
 8002548:	200001a4 	.word	0x200001a4
 800254c:	20000243 	.word	0x20000243

08002550 <os_task_signal_event>:
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 8002550:	2301      	movs	r3, #1
void os_task_signal_event( Evt_t eventId ) {
 8002552:	b5f0      	push	{r4, r5, r6, r7, lr}
    for ( index = 0; index != nTasks; index++ ) {
 8002554:	4a15      	ldr	r2, [pc, #84]	; (80025ac <os_task_signal_event+0x5c>)
    eventListIndex = eventId / 8;
 8002556:	08c6      	lsrs	r6, r0, #3
 8002558:	7814      	ldrb	r4, [r2, #0]
 800255a:	221c      	movs	r2, #28
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 800255c:	f000 0007 	and.w	r0, r0, #7
 8002560:	fa03 f000 	lsl.w	r0, r3, r0
 8002564:	b240      	sxtb	r0, r0
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 8002566:	ea6f 0c00 	mvn.w	ip, r0
    task->waitSingleEvent = 0;
 800256a:	2500      	movs	r5, #0
    task_list[ tid ].state = READY;
 800256c:	f04f 0e05 	mov.w	lr, #5
 8002570:	4b0f      	ldr	r3, [pc, #60]	; (80025b0 <os_task_signal_event+0x60>)
 8002572:	fb02 3404 	mla	r4, r2, r4, r3
    for ( index = 0; index != nTasks; index++ ) {
 8002576:	42a3      	cmp	r3, r4
 8002578:	d100      	bne.n	800257c <os_task_signal_event+0x2c>
}
 800257a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800257c:	199f      	adds	r7, r3, r6
		if (( state == WAITING_EVENT ) || ( state == WAITING_EVENT_TIMEOUT )) {
 800257e:	791a      	ldrb	r2, [r3, #4]
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 8002580:	f997 1015 	ldrsb.w	r1, [r7, #21]
		if (( state == WAITING_EVENT ) || ( state == WAITING_EVENT_TIMEOUT )) {
 8002584:	3a03      	subs	r2, #3
        if ( taskWaitingForEvent  &&  taskWaitStateOK ) {
 8002586:	4201      	tst	r1, r0
		if (( state == WAITING_EVENT ) || ( state == WAITING_EVENT_TIMEOUT )) {
 8002588:	b2d2      	uxtb	r2, r2
        if ( taskWaitingForEvent  &&  taskWaitStateOK ) {
 800258a:	d00c      	beq.n	80025a6 <os_task_signal_event+0x56>
 800258c:	2a01      	cmp	r2, #1
 800258e:	d80a      	bhi.n	80025a6 <os_task_signal_event+0x56>
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 8002590:	ea01 010c 	and.w	r1, r1, ip
 8002594:	7579      	strb	r1, [r7, #21]
            if ( task_list[ index ].waitSingleEvent || os_task_wait_queue_empty( index ) ) {
 8002596:	7cda      	ldrb	r2, [r3, #19]
 8002598:	b90a      	cbnz	r2, 800259e <os_task_signal_event+0x4e>
        if ( task_list[ tid ].eventQueue.eventList[ event ] != 0 ) {
 800259a:	7d5a      	ldrb	r2, [r3, #21]
 800259c:	b91a      	cbnz	r2, 80025a6 <os_task_signal_event+0x56>
    task->waitSingleEvent = 0;
 800259e:	74dd      	strb	r5, [r3, #19]
        task->eventQueue.eventList[ event ] = 0;
 80025a0:	755d      	strb	r5, [r3, #21]
    task_list[ tid ].state = READY;
 80025a2:	f883 e004 	strb.w	lr, [r3, #4]
 80025a6:	331c      	adds	r3, #28
 80025a8:	e7e5      	b.n	8002576 <os_task_signal_event+0x26>
 80025aa:	bf00      	nop
 80025ac:	20000243 	.word	0x20000243
 80025b0:	200001a4 	.word	0x200001a4

080025b4 <os_task_run>:
void os_task_run( void ) {
 80025b4:	b510      	push	{r4, lr}
    os_assert( running_tid < nTasks );
 80025b6:	4a09      	ldr	r2, [pc, #36]	; (80025dc <os_task_run+0x28>)
 80025b8:	4c09      	ldr	r4, [pc, #36]	; (80025e0 <os_task_run+0x2c>)
 80025ba:	7812      	ldrb	r2, [r2, #0]
 80025bc:	7821      	ldrb	r1, [r4, #0]
 80025be:	4291      	cmp	r1, r2
 80025c0:	d303      	bcc.n	80025ca <os_task_run+0x16>
 80025c2:	f44f 701c 	mov.w	r0, #624	; 0x270
 80025c6:	f000 f80f 	bl	80025e8 <os_on_assert>
    task_list[ running_tid ].taskproc();
 80025ca:	231c      	movs	r3, #28
 80025cc:	7822      	ldrb	r2, [r4, #0]
}
 80025ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    task_list[ running_tid ].taskproc();
 80025d2:	4353      	muls	r3, r2
 80025d4:	4a03      	ldr	r2, [pc, #12]	; (80025e4 <os_task_run+0x30>)
 80025d6:	58d3      	ldr	r3, [r2, r3]
 80025d8:	4718      	bx	r3
 80025da:	bf00      	nop
 80025dc:	20000243 	.word	0x20000243
 80025e0:	20000848 	.word	0x20000848
 80025e4:	200001a4 	.word	0x200001a4

080025e8 <os_on_assert>:


#include "cocoos.h"
#include <logger.h> ////

void os_on_assert( uint16_t line ) {
 80025e8:	4604      	mov	r4, r0
 80025ea:	b508      	push	{r3, lr}
    debug_print("*** cocoos assert failed "); debug_print_unsigned(line); debug_flush();
 80025ec:	4806      	ldr	r0, [pc, #24]	; (8002608 <os_on_assert+0x20>)
 80025ee:	f000 f974 	bl	80028da <debug_print>
 80025f2:	4620      	mov	r0, r4
 80025f4:	f000 f980 	bl	80028f8 <debug_print_unsigned>
 80025f8:	f000 f96c 	bl	80028d4 <debug_flush>
    static volatile uint16_t l;
    os_disable_interrupts();
    l = line;
 80025fc:	4b03      	ldr	r3, [pc, #12]	; (800260c <os_on_assert+0x24>)
 80025fe:	801c      	strh	r4, [r3, #0]
    l = l;
 8002600:	881a      	ldrh	r2, [r3, #0]
 8002602:	b292      	uxth	r2, r2
 8002604:	801a      	strh	r2, [r3, #0]
 8002606:	e7fe      	b.n	8002606 <os_on_assert+0x1e>
 8002608:	08004569 	.word	0x08004569
 800260c:	20000230 	.word	0x20000230

08002610 <os_cbkSleep>:
*       
*/
/*********************************************************************************/
void os_cbkSleep( void ) {
    /* Enter low power mode here */
}
 8002610:	4770      	bx	lr

08002612 <os_tick>:
    os_task_tick( 0, 1 );
 8002612:	2101      	movs	r1, #1
 8002614:	2000      	movs	r0, #0
 8002616:	f7ff bf57 	b.w	80024c8 <os_task_tick>

0800261a <memcmp>:

int
memcmp (const void *m1,
	const void *m2,
	size_t n)
{
 800261a:	b530      	push	{r4, r5, lr}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  unsigned char *s1 = (unsigned char *) m1;
  unsigned char *s2 = (unsigned char *) m2;

  while (n--)
 800261c:	2400      	movs	r4, #0
 800261e:	42a2      	cmp	r2, r4
 8002620:	d101      	bne.n	8002626 <memcmp+0xc>
	  return *s1 - *s2;
	}
      s1++;
      s2++;
    }
  return 0;
 8002622:	2000      	movs	r0, #0
 8002624:	e007      	b.n	8002636 <memcmp+0x1c>
      if (*s1 != *s2)
 8002626:	5d03      	ldrb	r3, [r0, r4]
 8002628:	3401      	adds	r4, #1
 800262a:	190d      	adds	r5, r1, r4
 800262c:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8002630:	42ab      	cmp	r3, r5
 8002632:	d0f4      	beq.n	800261e <memcmp+0x4>
	  return *s1 - *s2;
 8002634:	1b58      	subs	r0, r3, r5
      s2++;
    }

  return 0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8002636:	bd30      	pop	{r4, r5, pc}

08002638 <memcpy>:
void *
__inhibit_loop_to_libcall
memcpy (void *__restrict dst0,
	const void *__restrict src0,
	size_t len0)
{
 8002638:	440a      	add	r2, r1
  char *dst = (char *) dst0;
  char *src = (char *) src0;

  void *save = dst0;

  while (len0--)
 800263a:	4291      	cmp	r1, r2
 800263c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002640:	d100      	bne.n	8002644 <memcpy+0xc>
 8002642:	4770      	bx	lr
{
 8002644:	b510      	push	{r4, lr}
    {
      *dst++ = *src++;
 8002646:	f811 4b01 	ldrb.w	r4, [r1], #1
  while (len0--)
 800264a:	4291      	cmp	r1, r2
      *dst++ = *src++;
 800264c:	f803 4f01 	strb.w	r4, [r3, #1]!
  while (len0--)
 8002650:	d1f9      	bne.n	8002646 <memcpy+0xe>
  while (len0--)
    *dst++ = *src++;

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8002652:	bd10      	pop	{r4, pc}

08002654 <memset>:
__inhibit_loop_to_libcall
memset (void *m,
	int c,
	size_t n)
{
  char *s = (char *) m;
 8002654:	4603      	mov	r3, r0
 8002656:	4402      	add	r2, r0
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 8002658:	4293      	cmp	r3, r2
 800265a:	d100      	bne.n	800265e <memset+0xa>
    *s++ = (char) c;

  return m;
}
 800265c:	4770      	bx	lr
    *s++ = (char) c;
 800265e:	f803 1b01 	strb.w	r1, [r3], #1
 8002662:	e7f9      	b.n	8002658 <memset+0x4>

08002664 <strcpy>:
#endif

char*
strcpy (char *dst0,
	const char *src0)
{
 8002664:	1e42      	subs	r2, r0, #1
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *s = dst0;

  while (*dst0++ = *src0++)
 8002666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800266a:	f802 3f01 	strb.w	r3, [r2, #1]!
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f9      	bne.n	8002666 <strcpy+0x2>

  while ((*dst++ = *src++))
    ;
  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8002672:	4770      	bx	lr

08002674 <strlen>:
#error long int is not a 32bit or 64bit byte
#endif

size_t
strlen (const char *str)
{
 8002674:	4603      	mov	r3, r0
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 8002676:	781a      	ldrb	r2, [r3, #0]
 8002678:	1c59      	adds	r1, r3, #1
 800267a:	b90a      	cbnz	r2, 8002680 <strlen+0xc>
    str++;
  return str - start;
}
 800267c:	1a18      	subs	r0, r3, r0
 800267e:	4770      	bx	lr
 8002680:	460b      	mov	r3, r1
 8002682:	e7f8      	b.n	8002676 <strlen+0x2>

08002684 <strncpy>:

char *
strncpy (char *__restrict dst0,
	const char *__restrict src0,
	size_t count)
{
 8002684:	b570      	push	{r4, r5, r6, lr}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *dscan;
  const char *sscan;

  dscan = dst0;
 8002686:	4604      	mov	r4, r0
 8002688:	3901      	subs	r1, #1
  sscan = src0;
  while (count > 0)
 800268a:	b902      	cbnz	r2, 800268e <strncpy+0xa>
  while (count-- > 0)
    *dst++ = '\0';

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 800268c:	bd70      	pop	{r4, r5, r6, pc}
      if ((*dscan++ = *sscan++) == '\0')
 800268e:	4623      	mov	r3, r4
 8002690:	f811 5f01 	ldrb.w	r5, [r1, #1]!
      --count;
 8002694:	1e56      	subs	r6, r2, #1
      if ((*dscan++ = *sscan++) == '\0')
 8002696:	f803 5b01 	strb.w	r5, [r3], #1
 800269a:	b92d      	cbnz	r5, 80026a8 <strncpy+0x24>
 800269c:	4414      	add	r4, r2
  while (count-- > 0)
 800269e:	42a3      	cmp	r3, r4
 80026a0:	d0f4      	beq.n	800268c <strncpy+0x8>
    *dscan++ = '\0';
 80026a2:	f803 5b01 	strb.w	r5, [r3], #1
 80026a6:	e7fa      	b.n	800269e <strncpy+0x1a>
 80026a8:	461c      	mov	r4, r3
      --count;
 80026aa:	4632      	mov	r2, r6
 80026ac:	e7ed      	b.n	800268a <strncpy+0x6>
	...

080026b0 <_ZL12debug_appendPKcj>:
    }
}

static void debug_append(const char *buffer, unsigned int length) {
    //  Append "length" number of bytes from "buffer" to the debug buffer.
    if (length >= DEBUG_BUFFER_SIZE) { return; }  //  Don't allow logging of very long messages.
 80026b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
static void debug_append(const char *buffer, unsigned int length) {
 80026b4:	b570      	push	{r4, r5, r6, lr}
 80026b6:	4606      	mov	r6, r0
 80026b8:	460d      	mov	r5, r1
    if (length >= DEBUG_BUFFER_SIZE) { return; }  //  Don't allow logging of very long messages.
 80026ba:	d210      	bcs.n	80026de <_ZL12debug_appendPKcj+0x2e>
    if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) {
 80026bc:	4c0e      	ldr	r4, [pc, #56]	; (80026f8 <_ZL12debug_appendPKcj+0x48>)
 80026be:	8823      	ldrh	r3, [r4, #0]
 80026c0:	440b      	add	r3, r1
 80026c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026c6:	d20b      	bcs.n	80026e0 <_ZL12debug_appendPKcj+0x30>
        debugBufferLength = 9;
        //  Still can't fit after clearing.  Quit.
        if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) { return; }
    }
    //  Else append to the buffer.
    memcpy(&debugBuffer[debugBufferLength], buffer, length);
 80026c8:	8823      	ldrh	r3, [r4, #0]
 80026ca:	480c      	ldr	r0, [pc, #48]	; (80026fc <_ZL12debug_appendPKcj+0x4c>)
 80026cc:	4631      	mov	r1, r6
 80026ce:	462a      	mov	r2, r5
 80026d0:	4418      	add	r0, r3
 80026d2:	f7ff ffb1 	bl	8002638 <memcpy>
    debugBufferLength += length;
 80026d6:	8821      	ldrh	r1, [r4, #0]
 80026d8:	4429      	add	r1, r5
 80026da:	b289      	uxth	r1, r1
 80026dc:	8021      	strh	r1, [r4, #0]
}
 80026de:	bd70      	pop	{r4, r5, r6, pc}
        strcpy(debugBuffer, "[DROPPED]");
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <_ZL12debug_appendPKcj+0x50>)
 80026e2:	4806      	ldr	r0, [pc, #24]	; (80026fc <_ZL12debug_appendPKcj+0x4c>)
 80026e4:	f7ff ffbe 	bl	8002664 <strcpy>
        debugBufferLength = 9;
 80026e8:	2309      	movs	r3, #9
 80026ea:	8023      	strh	r3, [r4, #0]
        if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) { return; }
 80026ec:	8823      	ldrh	r3, [r4, #0]
 80026ee:	442b      	add	r3, r5
 80026f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f4:	d3e8      	bcc.n	80026c8 <_ZL12debug_appendPKcj+0x18>
 80026f6:	e7f2      	b.n	80026de <_ZL12debug_appendPKcj+0x2e>
 80026f8:	20000254 	.word	0x20000254
 80026fc:	20000257 	.word	0x20000257
 8002700:	08004592 	.word	0x08004592

08002704 <enable_log>:
void enable_log(void) { logEnabled = true; }
 8002704:	2201      	movs	r2, #1
 8002706:	4b01      	ldr	r3, [pc, #4]	; (800270c <enable_log+0x8>)
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	4770      	bx	lr
 800270c:	20000256 	.word	0x20000256

08002710 <logger_add_output>:
int logger_add_output(logger_output_func *func) {
 8002710:	b510      	push	{r4, lr}
    if (!func) { return -1; }
 8002712:	b1a0      	cbz	r0, 800273e <logger_add_output+0x2e>
        if (output_funcs[i] == func) {
 8002714:	4a0b      	ldr	r2, [pc, #44]	; (8002744 <logger_add_output+0x34>)
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8002716:	2300      	movs	r3, #0
 8002718:	4611      	mov	r1, r2
        if (output_funcs[i] == func) {
 800271a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800271e:	4284      	cmp	r4, r0
 8002720:	d008      	beq.n	8002734 <logger_add_output+0x24>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8002722:	3301      	adds	r3, #1
 8002724:	2b04      	cmp	r3, #4
 8002726:	d1f8      	bne.n	800271a <logger_add_output+0xa>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8002728:	2200      	movs	r2, #0
        if (!output_funcs[i]) {
 800272a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800272e:	b91b      	cbnz	r3, 8002738 <logger_add_output+0x28>
            output_funcs[i] = func;
 8002730:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
            return 0;  //  Already added.
 8002734:	2000      	movs	r0, #0
 8002736:	e004      	b.n	8002742 <logger_add_output+0x32>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8002738:	3201      	adds	r2, #1
 800273a:	2a04      	cmp	r2, #4
 800273c:	d1f5      	bne.n	800272a <logger_add_output+0x1a>
    if (!func) { return -1; }
 800273e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002742:	bd10      	pop	{r4, pc}
 8002744:	20000244 	.word	0x20000244

08002748 <_Z20debug_flush_internalb>:
void debug_flush_internal(bool forced) {
 8002748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (!logEnabled) { debugBufferLength = 0; return; }  //  Skip if log not enabled.
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <_Z20debug_flush_internalb+0x80>)
void debug_flush_internal(bool forced) {
 800274e:	b085      	sub	sp, #20
    if (!logEnabled) { debugBufferLength = 0; return; }  //  Skip if log not enabled.
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	4c1e      	ldr	r4, [pc, #120]	; (80027cc <_Z20debug_flush_internalb+0x84>)
 8002754:	b91b      	cbnz	r3, 800275e <_Z20debug_flush_internalb+0x16>
        debugBufferLength = 0;
 8002756:	8023      	strh	r3, [r4, #0]
}
 8002758:	b005      	add	sp, #20
 800275a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (debugBufferLength == 0) { return; }  //  Debug buffer is empty, nothing to write.
 800275e:	8823      	ldrh	r3, [r4, #0]
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f8      	beq.n	8002758 <_Z20debug_flush_internalb+0x10>
	uint16_t outlen = write_all_output((const uint8_t *) debugBuffer, debugBufferLength, forced);
 8002766:	8826      	ldrh	r6, [r4, #0]
 8002768:	b2b6      	uxth	r6, r6
    uint16_t outlen = (len > MAX_OUTPUT_LENGTH) ? MAX_OUTPUT_LENGTH : len;
 800276a:	2e3c      	cmp	r6, #60	; 0x3c
 800276c:	4635      	mov	r5, r6
 800276e:	bf28      	it	cs
 8002770:	253c      	movcs	r5, #60	; 0x3c
    if (length == 0) { return 0; }
 8002772:	b14e      	cbz	r6, 8002788 <_Z20debug_flush_internalb+0x40>
    args[0] = (uint32_t)fh;
 8002774:	2302      	movs	r3, #2
 8002776:	9301      	str	r3, [sp, #4]
    args[1] = (uint32_t)buffer;
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <_Z20debug_flush_internalb+0x88>)
	);
 800277a:	aa01      	add	r2, sp, #4
    args[2] = (uint32_t)length;
 800277c:	e9cd 3502 	strd	r3, r5, [sp, #8]
	);
 8002780:	2305      	movs	r3, #5
 8002782:	4618      	mov	r0, r3
 8002784:	4611      	mov	r1, r2
 8002786:	beab      	bkpt	0x00ab
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8002788:	2700      	movs	r7, #0
        if (output_funcs[i]) {
 800278a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 80027d4 <_Z20debug_flush_internalb+0x8c>
            func(buf, outlen);
 800278e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 80027d0 <_Z20debug_flush_internalb+0x88>
        if (output_funcs[i]) {
 8002792:	f858 3027 	ldr.w	r3, [r8, r7, lsl #2]
 8002796:	b113      	cbz	r3, 800279e <_Z20debug_flush_internalb+0x56>
            func(buf, outlen);
 8002798:	4629      	mov	r1, r5
 800279a:	4648      	mov	r0, r9
 800279c:	4798      	blx	r3
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 800279e:	3701      	adds	r7, #1
 80027a0:	2f04      	cmp	r7, #4
 80027a2:	d1f6      	bne.n	8002792 <_Z20debug_flush_internalb+0x4a>
    if (outlen == 0) {
 80027a4:	2e00      	cmp	r6, #0
 80027a6:	d0d7      	beq.n	8002758 <_Z20debug_flush_internalb+0x10>
    } else if (outlen >= debugBufferLength) {
 80027a8:	8823      	ldrh	r3, [r4, #0]
 80027aa:	429d      	cmp	r5, r3
 80027ac:	d301      	bcc.n	80027b2 <_Z20debug_flush_internalb+0x6a>
        debugBufferLength = 0;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e7d1      	b.n	8002756 <_Z20debug_flush_internalb+0xe>
    memcpy(debugBuffer, &debugBuffer[outlen], debugBufferLength - outlen);
 80027b2:	8822      	ldrh	r2, [r4, #0]
 80027b4:	4806      	ldr	r0, [pc, #24]	; (80027d0 <_Z20debug_flush_internalb+0x88>)
 80027b6:	1b52      	subs	r2, r2, r5
 80027b8:	1941      	adds	r1, r0, r5
 80027ba:	f7ff ff3d 	bl	8002638 <memcpy>
    debugBufferLength -= outlen;
 80027be:	8823      	ldrh	r3, [r4, #0]
 80027c0:	1b5d      	subs	r5, r3, r5
 80027c2:	b2ad      	uxth	r5, r5
 80027c4:	8025      	strh	r5, [r4, #0]
 80027c6:	e7c7      	b.n	8002758 <_Z20debug_flush_internalb+0x10>
 80027c8:	20000256 	.word	0x20000256
 80027cc:	20000254 	.word	0x20000254
 80027d0:	20000257 	.word	0x20000257
 80027d4:	20000244 	.word	0x20000244

080027d8 <debug_force_flush>:
void debug_force_flush(void) {
 80027d8:	b538      	push	{r3, r4, r5, lr}
 80027da:	2464      	movs	r4, #100	; 0x64
        if (debugBufferLength == 0) { return; }  //  No more chunks.
 80027dc:	4d04      	ldr	r5, [pc, #16]	; (80027f0 <debug_force_flush+0x18>)
 80027de:	882b      	ldrh	r3, [r5, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	b123      	cbz	r3, 80027ee <debug_force_flush+0x16>
        debug_flush_internal(true);
 80027e4:	2001      	movs	r0, #1
 80027e6:	f7ff ffaf 	bl	8002748 <_Z20debug_flush_internalb>
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 80027ea:	3c01      	subs	r4, #1
 80027ec:	d1f7      	bne.n	80027de <debug_force_flush+0x6>
}
 80027ee:	bd38      	pop	{r3, r4, r5, pc}
 80027f0:	20000254 	.word	0x20000254

080027f4 <_Z11debug_printj>:

void debug_print(size_t l) {
 80027f4:	210a      	movs	r1, #10
 80027f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    
    #define MAX_INT_LENGTH 10
    char buffer[MAX_INT_LENGTH + 1];
    int size = MAX_INT_LENGTH + 1;
    bool prefixByZero = false;
    int length = 0;
 80027f8:	2300      	movs	r3, #0
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 80027fa:	460e      	mov	r6, r1
 80027fc:	4c1a      	ldr	r4, [pc, #104]	; (8002868 <_Z11debug_printj+0x74>)
void debug_print(size_t l) {
 80027fe:	b085      	sub	sp, #20
        char digit = '0' + (char)(l / divisor);
 8002800:	fbb0 f5f4 	udiv	r5, r0, r4
 8002804:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8002808:	b2d2      	uxtb	r2, r2
        if (digit > '9') {
 800280a:	2a39      	cmp	r2, #57	; 0x39
 800280c:	d904      	bls.n	8002818 <_Z11debug_printj+0x24>
            debug_print("(Overflow)");
 800280e:	4817      	ldr	r0, [pc, #92]	; (800286c <_Z11debug_printj+0x78>)
 8002810:	f000 f863 	bl	80028da <debug_print>
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
    buffer[size - 1] = 0;  //  Terminate in case of overflow.

    debug_append(buffer, strlen(buffer));
}
 8002814:	b005      	add	sp, #20
 8002816:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (digit > '0' || length > 0 || prefixByZero) {
 8002818:	2a30      	cmp	r2, #48	; 0x30
 800281a:	d800      	bhi.n	800281e <_Z11debug_printj+0x2a>
 800281c:	b133      	cbz	r3, 800282c <_Z11debug_printj+0x38>
            if (length < size) {
 800281e:	2b0a      	cmp	r3, #10
                buffer[length++] = digit;
 8002820:	bfdf      	itttt	le
 8002822:	af04      	addle	r7, sp, #16
 8002824:	18ff      	addle	r7, r7, r3
 8002826:	f807 2c0c 	strble.w	r2, [r7, #-12]
 800282a:	3301      	addle	r3, #1
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 800282c:	3901      	subs	r1, #1
        l = l % divisor;
 800282e:	fb04 0015 	mls	r0, r4, r5, r0
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8002832:	fbb4 f4f6 	udiv	r4, r4, r6
 8002836:	d1e3      	bne.n	8002800 <_Z11debug_printj+0xc>
    if (length == 0) { buffer[length++] = '0'; };
 8002838:	b94b      	cbnz	r3, 800284e <_Z11debug_printj+0x5a>
 800283a:	2330      	movs	r3, #48	; 0x30
 800283c:	f88d 3004 	strb.w	r3, [sp, #4]
 8002840:	2301      	movs	r3, #1
    if (length < size) buffer[length] = 0;
 8002842:	aa04      	add	r2, sp, #16
 8002844:	4413      	add	r3, r2
 8002846:	2200      	movs	r2, #0
 8002848:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800284c:	e001      	b.n	8002852 <_Z11debug_printj+0x5e>
 800284e:	2b0a      	cmp	r3, #10
 8002850:	ddf7      	ble.n	8002842 <_Z11debug_printj+0x4e>
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8002852:	2300      	movs	r3, #0
    debug_append(buffer, strlen(buffer));
 8002854:	a801      	add	r0, sp, #4
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8002856:	f88d 300e 	strb.w	r3, [sp, #14]
    debug_append(buffer, strlen(buffer));
 800285a:	f7ff ff0b 	bl	8002674 <strlen>
 800285e:	4601      	mov	r1, r0
 8002860:	a801      	add	r0, sp, #4
 8002862:	f7ff ff25 	bl	80026b0 <_ZL12debug_appendPKcj>
 8002866:	e7d5      	b.n	8002814 <_Z11debug_printj+0x20>
 8002868:	3b9aca00 	.word	0x3b9aca00
 800286c:	08004587 	.word	0x08004587

08002870 <_Z11debug_printi>:

void debug_print(int i) {
 8002870:	b510      	push	{r4, lr}
    if (i == 0) { debug_append("0", 1); } 
 8002872:	1e04      	subs	r4, r0, #0
 8002874:	d105      	bne.n	8002882 <_Z11debug_printi+0x12>
    else if (i >= 0) { debug_print((size_t) i); }
    else {  // i < 0.
        debug_append("-", 1);
        debug_print((size_t) -i);
    }
}
 8002876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (i == 0) { debug_append("0", 1); } 
 800287a:	2101      	movs	r1, #1
 800287c:	4806      	ldr	r0, [pc, #24]	; (8002898 <_Z11debug_printi+0x28>)
 800287e:	f7ff bf17 	b.w	80026b0 <_ZL12debug_appendPKcj>
    else if (i >= 0) { debug_print((size_t) i); }
 8002882:	db03      	blt.n	800288c <_Z11debug_printi+0x1c>
}
 8002884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        debug_print((size_t) -i);
 8002888:	f7ff bfb4 	b.w	80027f4 <_Z11debug_printj>
        debug_append("-", 1);
 800288c:	4803      	ldr	r0, [pc, #12]	; (800289c <_Z11debug_printi+0x2c>)
 800288e:	2101      	movs	r1, #1
 8002890:	f7ff ff0e 	bl	80026b0 <_ZL12debug_appendPKcj>
        debug_print((size_t) -i);
 8002894:	4260      	negs	r0, r4
 8002896:	e7f5      	b.n	8002884 <_Z11debug_printi+0x14>
 8002898:	08004583 	.word	0x08004583
 800289c:	08004585 	.word	0x08004585

080028a0 <debug_println>:
void debug_print(const char *s) {
    if (s[0] == 0) return;
	debug_append(s, strlen(s));
}

void debug_println(const char *s) {
 80028a0:	b508      	push	{r3, lr}
    if (s[0] != 0) { debug_print(s); }
 80028a2:	7803      	ldrb	r3, [r0, #0]
 80028a4:	b10b      	cbz	r3, 80028aa <debug_println+0xa>
 80028a6:	f000 f818 	bl	80028da <debug_print>
    debug_append("\r\n", 2);
}
 80028aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    debug_append("\r\n", 2);
 80028ae:	2102      	movs	r1, #2
 80028b0:	4801      	ldr	r0, [pc, #4]	; (80028b8 <debug_println+0x18>)
 80028b2:	f7ff befd 	b.w	80026b0 <_ZL12debug_appendPKcj>
 80028b6:	bf00      	nop
 80028b8:	0800459c 	.word	0x0800459c

080028bc <_Z13debug_printlni>:

void debug_print(char ch) {
	debug_append(&ch, 1);
}

void debug_println(int i) {
 80028bc:	b508      	push	{r3, lr}
    debug_print(i);
 80028be:	f7ff ffd7 	bl	8002870 <_Z11debug_printi>
    debug_append("\r\n", 2);
}
 80028c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    debug_append("\r\n", 2);
 80028c6:	2102      	movs	r1, #2
 80028c8:	4801      	ldr	r0, [pc, #4]	; (80028d0 <_Z13debug_printlni+0x14>)
 80028ca:	f7ff bef1 	b.w	80026b0 <_ZL12debug_appendPKcj>
 80028ce:	bf00      	nop
 80028d0:	0800459c 	.word	0x0800459c

080028d4 <debug_flush>:
    return debug_flush_internal(false);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7ff bf37 	b.w	8002748 <_Z20debug_flush_internalb>

080028da <debug_print>:
void debug_print(const char *s) {
 80028da:	b510      	push	{r4, lr}
    if (s[0] == 0) return;
 80028dc:	7803      	ldrb	r3, [r0, #0]
void debug_print(const char *s) {
 80028de:	4604      	mov	r4, r0
    if (s[0] == 0) return;
 80028e0:	b13b      	cbz	r3, 80028f2 <debug_print+0x18>
	debug_append(s, strlen(s));
 80028e2:	f7ff fec7 	bl	8002674 <strlen>
 80028e6:	4601      	mov	r1, r0
 80028e8:	4620      	mov	r0, r4
}
 80028ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	debug_append(s, strlen(s));
 80028ee:	f7ff bedf 	b.w	80026b0 <_ZL12debug_appendPKcj>
}
 80028f2:	bd10      	pop	{r4, pc}

080028f4 <debug_print_int>:
void debug_println(float f) {
    debug_print(f);
    debug_append("\r\n", 2);
}

void debug_print_int(int i) { debug_print(i); }
 80028f4:	f7ff bfbc 	b.w	8002870 <_Z11debug_printi>

080028f8 <debug_print_unsigned>:
void debug_print_unsigned(size_t l) { debug_print(l); }
 80028f8:	f7ff bf7c 	b.w	80027f4 <_Z11debug_printj>

080028fc <debug_printhex>:
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
        char digit = '0' + (char)(v / divisor);
 80028fc:	0903      	lsrs	r3, r0, #4
void debug_printhex(uint8_t v) {
 80028fe:	b507      	push	{r0, r1, r2, lr}
        char digit = '0' + (char)(v / divisor);
 8002900:	f103 0230 	add.w	r2, r3, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8002904:	2a39      	cmp	r2, #57	; 0x39
        char digit = '0' + (char)(v / divisor);
 8002906:	f000 000f 	and.w	r0, r0, #15
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 800290a:	bfc4      	itt	gt
 800290c:	3357      	addgt	r3, #87	; 0x57
 800290e:	b25a      	sxtbgt	r2, r3
        char digit = '0' + (char)(v / divisor);
 8002910:	f100 0330 	add.w	r3, r0, #48	; 0x30
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8002914:	2b39      	cmp	r3, #57	; 0x39
 8002916:	bfc4      	itt	gt
 8002918:	3057      	addgt	r0, #87	; 0x57
 800291a:	b243      	sxtbgt	r3, r0
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
                buffer[length++] = digit;
 800291c:	f88d 3005 	strb.w	r3, [sp, #5]
        }
        v = v % divisor;
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8002920:	2300      	movs	r3, #0

    debug_append(buffer, strlen(buffer));
 8002922:	a801      	add	r0, sp, #4
                buffer[length++] = digit;
 8002924:	f88d 2004 	strb.w	r2, [sp, #4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8002928:	f88d 3006 	strb.w	r3, [sp, #6]
    debug_append(buffer, strlen(buffer));
 800292c:	f7ff fea2 	bl	8002674 <strlen>
 8002930:	4601      	mov	r1, r0
 8002932:	a801      	add	r0, sp, #4
 8002934:	f7ff febc 	bl	80026b0 <_ZL12debug_appendPKcj>
}
 8002938:	b003      	add	sp, #12
 800293a:	f85d fb04 	ldr.w	pc, [sp], #4

0800293e <debug_printhex_unsigned>:

void debug_printhex_unsigned(size_t l) {
 800293e:	b510      	push	{r4, lr}
 8002940:	4604      	mov	r4, r0
    //  Write an unsigned int in hexadecimal to the buffered debug log.
    for (int i = sizeof(l) - 1; i >= 0; i--) {
        uint8_t b = 0xff & (l >> (8 * i));
        debug_printhex(b);
 8002942:	0e00      	lsrs	r0, r0, #24
 8002944:	f7ff ffda 	bl	80028fc <debug_printhex>
 8002948:	f3c4 4007 	ubfx	r0, r4, #16, #8
 800294c:	f7ff ffd6 	bl	80028fc <debug_printhex>
 8002950:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8002954:	f7ff ffd2 	bl	80028fc <debug_printhex>
 8002958:	b2e0      	uxtb	r0, r4
    }
}
 800295a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        debug_printhex(b);
 800295e:	f7ff bfcd 	b.w	80028fc <debug_printhex>
	...

08002964 <platform_setup>:
extern "C" void target_panic(int statusCode); ////

//  Debugging is off by default.  Developer must switch it on with enable_debug().
static bool debugEnabled = false;

void platform_setup(void) {
 8002964:	b508      	push	{r3, lr}
    //  Initialise the STM32 platform. At startup, the onboard LED will blink on-off-on-off-on and stays on.
	//  If LED blinks on-off-on-off and stays off, then debug mode is enabled and no debugger is connected.
	rcc_clock_setup_in_hse_8mhz_out_72mhz();
 8002966:	f7fe fc03 	bl	8001170 <rcc_clock_setup_in_hse_8mhz_out_72mhz>
	led_setup();
 800296a:	f000 f829 	bl	80029c0 <led_setup>
	if (debugEnabled) {
 800296e:	4b0e      	ldr	r3, [pc, #56]	; (80029a8 <platform_setup+0x44>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b1a3      	cbz	r3, 800299e <platform_setup+0x3a>
		led_on(); led_wait();
 8002974:	f000 f834 	bl	80029e0 <led_on>
 8002978:	f000 f842 	bl	8002a00 <led_wait>
		led_off(); led_wait();
 800297c:	f000 f838 	bl	80029f0 <led_off>
 8002980:	f000 f83e 	bl	8002a00 <led_wait>
		led_on(); led_wait();
 8002984:	f000 f82c 	bl	80029e0 <led_on>
 8002988:	f000 f83a 	bl	8002a00 <led_wait>
		led_off(); led_wait();
 800298c:	f000 f830 	bl	80029f0 <led_off>
 8002990:	f000 f836 	bl	8002a00 <led_wait>
		//  This line will call ARM Semihosting and may hang until debugger is connected.
  		debug_println("----platform_setup");
 8002994:	4805      	ldr	r0, [pc, #20]	; (80029ac <platform_setup+0x48>)
 8002996:	f7ff ff83 	bl	80028a0 <debug_println>
		led_on();
 800299a:	f000 f821 	bl	80029e0 <led_on>
	}

	////TODO
	test_codal();
}
 800299e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	test_codal();
 80029a2:	f7fe b9af 	b.w	8000d04 <test_codal>
 80029a6:	bf00      	nop
 80029a8:	20000468 	.word	0x20000468
 80029ac:	0800459f 	.word	0x0800459f

080029b0 <enable_debug>:

void enable_debug(void) {
	//  Enable ARM Semihosting for displaying debug messages.
	debugEnabled = true;
 80029b0:	2201      	movs	r2, #1
 80029b2:	4b02      	ldr	r3, [pc, #8]	; (80029bc <enable_debug+0xc>)
 80029b4:	701a      	strb	r2, [r3, #0]
	enable_log();
 80029b6:	f7ff bea5 	b.w	8002704 <enable_log>
 80029ba:	bf00      	nop
 80029bc:	20000468 	.word	0x20000468

080029c0 <led_setup>:
//  Blink code from https://github.com/Apress/Beg-STM32-Devel-FreeRTOS-libopencm3-GCC
#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/gpio.h>
#include "bluepill.h"

void led_setup(void) {
 80029c0:	b510      	push	{r4, lr}
	//  Set up Blue Pill LED GPIO.
	//  Enable GPIOC clock.
	rcc_periph_clock_enable(RCC_GPIOC);
 80029c2:	f44f 7041 	mov.w	r0, #772	; 0x304
 80029c6:	f7ff f89f 	bl	8001b08 <rcc_periph_clock_enable>
	//  Set GPIO13 (in GPIO port C) to 'output push-pull'.
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
}
 80029ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 80029ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029d2:	2200      	movs	r2, #0
 80029d4:	2102      	movs	r1, #2
 80029d6:	4801      	ldr	r0, [pc, #4]	; (80029dc <led_setup+0x1c>)
 80029d8:	f7ff b85c 	b.w	8001a94 <gpio_set_mode>
 80029dc:	40011000 	.word	0x40011000

080029e0 <led_on>:

void led_on(void) {
	//  Switch Blue Pill LED on.
	gpio_clear(GPIOC, GPIO13);
 80029e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029e4:	4801      	ldr	r0, [pc, #4]	; (80029ec <led_on+0xc>)
 80029e6:	f7ff b888 	b.w	8001afa <gpio_clear>
 80029ea:	bf00      	nop
 80029ec:	40011000 	.word	0x40011000

080029f0 <led_off>:
}

void led_off(void) {
	//  Switch Blue Pill LED off.
	gpio_set(GPIOC, GPIO13);
 80029f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029f4:	4801      	ldr	r0, [pc, #4]	; (80029fc <led_off+0xc>)
 80029f6:	f7ff b87e 	b.w	8001af6 <gpio_set>
 80029fa:	bf00      	nop
 80029fc:	40011000 	.word	0x40011000

08002a00 <led_wait>:
void led_toggle(void) {
	//  Toggle Blue Pill LED.
	gpio_toggle(GPIOC, GPIO13);
}

void led_wait(void) {
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <led_wait+0xc>)
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
		__asm__("nop");
 8002a02:	bf00      	nop
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
 8002a04:	3b01      	subs	r3, #1
 8002a06:	d1fc      	bne.n	8002a02 <led_wait+0x2>
}
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	0016e360 	.word	0x0016e360

08002a10 <platform_start_timer>:
void platform_start_timer(void (*tickFunc0)(void), void (*alarmFunc0)(void)) {
 8002a10:	b538      	push	{r3, r4, r5, lr}
  	tickFunc = tickFunc0;    //  Allow tickFunc to be modified at every call to platform_start_timer().
 8002a12:	4b3a      	ldr	r3, [pc, #232]	; (8002afc <platform_start_timer+0xec>)
 8002a14:	6018      	str	r0, [r3, #0]
  	alarmFunc = alarmFunc0;  //  Allow alarmFunc to be modified at every call to platform_start_timer().
 8002a16:	4b3a      	ldr	r3, [pc, #232]	; (8002b00 <platform_start_timer+0xf0>)
 8002a18:	6019      	str	r1, [r3, #0]
	if (timerStarted) { return; }
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	; (8002b04 <platform_start_timer+0xf4>)
 8002a1c:	781c      	ldrb	r4, [r3, #0]
 8002a1e:	2c00      	cmp	r4, #0
 8002a20:	d16b      	bne.n	8002afa <platform_start_timer+0xea>
	timerStarted = true;
 8002a22:	2501      	movs	r5, #1
	debug_println("platform_start_timer"); ////
 8002a24:	4838      	ldr	r0, [pc, #224]	; (8002b08 <platform_start_timer+0xf8>)
	timerStarted = true;
 8002a26:	701d      	strb	r5, [r3, #0]
	debug_println("platform_start_timer"); ////
 8002a28:	f7ff ff3a 	bl	80028a0 <debug_println>
	rcc_enable_rtc_clock();
 8002a2c:	f7fe fb28 	bl	8001080 <rcc_enable_rtc_clock>
	rtc_interrupt_disable(RTC_SEC);
 8002a30:	4620      	mov	r0, r4
 8002a32:	f7fe fc59 	bl	80012e8 <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_ALR);
 8002a36:	4628      	mov	r0, r5
 8002a38:	f7fe fc56 	bl	80012e8 <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_OW);
 8002a3c:	2002      	movs	r0, #2
 8002a3e:	f7fe fc53 	bl	80012e8 <rtc_interrupt_disable>
	debug_println("rtc awake..."); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 8002a42:	4832      	ldr	r0, [pc, #200]	; (8002b0c <platform_start_timer+0xfc>)
 8002a44:	f7ff ff2c 	bl	80028a0 <debug_println>
 8002a48:	f7ff ff44 	bl	80028d4 <debug_flush>
static void custom_rtc_awake_from_off(enum rcc_osc clock_source)
{
	uint32_t reg32;

	/* Enable power and backup interface clocks. */
	rcc_periph_clock_enable(RCC_PWR);
 8002a4c:	f44f 7067 	mov.w	r0, #924	; 0x39c
 8002a50:	f7ff f85a 	bl	8001b08 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_BKP);
 8002a54:	f240 309b 	movw	r0, #923	; 0x39b
 8002a58:	f7ff f856 	bl	8001b08 <rcc_periph_clock_enable>

	/* Enable access to the backup registers and the RTC. */
	pwr_disable_backup_domain_write_protect();
 8002a5c:	f7fe fc92 	bl	8001384 <pwr_disable_backup_domain_write_protect>

	/* Set the clock source */
	rcc_set_rtc_clock_source(clock_source);
 8002a60:	2005      	movs	r0, #5
 8002a62:	f7fe fb15 	bl	8001090 <rcc_set_rtc_clock_source>

	/* Clear the RTC Control Register */
	RTC_CRH = 0;
	RTC_CRL = 0;
 8002a66:	4d2a      	ldr	r5, [pc, #168]	; (8002b10 <platform_start_timer+0x100>)
	RTC_CRH = 0;
 8002a68:	4b2a      	ldr	r3, [pc, #168]	; (8002b14 <platform_start_timer+0x104>)
 8002a6a:	601c      	str	r4, [r3, #0]
	RTC_CRL = 0;
 8002a6c:	602c      	str	r4, [r5, #0]

	/* Enable the RTC. */
	rcc_enable_rtc_clock();
 8002a6e:	f7fe fb07 	bl	8001080 <rcc_enable_rtc_clock>

	/* Clear the Registers */
	rtc_enter_config_mode();
 8002a72:	f7fe fbc3 	bl	80011fc <rtc_enter_config_mode>
	RTC_PRLH = 0;
 8002a76:	4b28      	ldr	r3, [pc, #160]	; (8002b18 <platform_start_timer+0x108>)
	RTC_PRLL = 0;
	RTC_CNTH = 0;
	RTC_CNTL = 0;
	RTC_ALRH = 0xFFFF;
 8002a78:	4a28      	ldr	r2, [pc, #160]	; (8002b1c <platform_start_timer+0x10c>)
	RTC_PRLH = 0;
 8002a7a:	601c      	str	r4, [r3, #0]
	RTC_PRLL = 0;
 8002a7c:	605c      	str	r4, [r3, #4]
	RTC_CNTH = 0;
 8002a7e:	611c      	str	r4, [r3, #16]
	RTC_CNTL = 0;
 8002a80:	615c      	str	r4, [r3, #20]
	RTC_ALRH = 0xFFFF;
 8002a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a86:	6013      	str	r3, [r2, #0]
	RTC_ALRL = 0xFFFF;
 8002a88:	6053      	str	r3, [r2, #4]
	rtc_exit_config_mode();
 8002a8a:	f7fe fbc7 	bl	800121c <rtc_exit_config_mode>

	/* Wait for the RSF bit in RTC_CRL to be set by hardware. */
	RTC_CRL &= ~RTC_CRL_RSF;
 8002a8e:	682b      	ldr	r3, [r5, #0]
 8002a90:	f023 0308 	bic.w	r3, r3, #8
 8002a94:	602b      	str	r3, [r5, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RSF)) == 0);
 8002a96:	682b      	ldr	r3, [r5, #0]
 8002a98:	071b      	lsls	r3, r3, #28
 8002a9a:	d5fc      	bpl.n	8002a96 <platform_start_timer+0x86>
	rtc_set_prescale_val(prescale);
 8002a9c:	2020      	movs	r0, #32
 8002a9e:	f7fe fbdd 	bl	800125c <rtc_set_prescale_val>
	debug_println("rtc awake ok"); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 8002aa2:	481f      	ldr	r0, [pc, #124]	; (8002b20 <platform_start_timer+0x110>)
 8002aa4:	f7ff fefc 	bl	80028a0 <debug_println>
 8002aa8:	f7ff ff14 	bl	80028d4 <debug_flush>
	rtc_set_counter_val(0);              //  Start counting millisecond ticks from 0.
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7fe fbef 	bl	8001290 <rtc_set_counter_val>
	rtc_set_alarm_time((uint32_t) -1);   //  Reset alarm to -1 or 0xffffffff so we don't trigger now.
 8002ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ab6:	f7fe fbc1 	bl	800123c <rtc_set_alarm_time>
	exti_set_trigger(EXTI17, EXTI_TRIGGER_RISING);  //  Enable alarm wakeup via the interrupt.
 8002aba:	2100      	movs	r1, #0
 8002abc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002ac0:	f7fe fc70 	bl	80013a4 <exti_set_trigger>
	exti_enable_request(EXTI17);
 8002ac4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002ac8:	f7fe fc8a 	bl	80013e0 <exti_enable_request>
	nvic_enable_irq(NVIC_RTC_IRQ);        //  Enable RTC tick interrupt processing.
 8002acc:	2003      	movs	r0, #3
 8002ace:	f7ff fc21 	bl	8002314 <nvic_enable_irq>
	nvic_enable_irq(NVIC_RTC_ALARM_IRQ);  //  Enable RTC alarm wakeup interrupt processing.
 8002ad2:	2029      	movs	r0, #41	; 0x29
 8002ad4:	f7ff fc1e 	bl	8002314 <nvic_enable_irq>
 8002ad8:	b672      	cpsid	i
	rtc_clear_flag(RTC_SEC);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fe fc22 	bl	8001324 <rtc_clear_flag>
	rtc_clear_flag(RTC_ALR);
 8002ae0:	2001      	movs	r0, #1
 8002ae2:	f7fe fc1f 	bl	8001324 <rtc_clear_flag>
	rtc_clear_flag(RTC_OW);
 8002ae6:	2002      	movs	r0, #2
 8002ae8:	f7fe fc1c 	bl	8001324 <rtc_clear_flag>
	rtc_interrupt_enable(RTC_SEC);  //  Allow RTC to generate tick interrupts.
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7fe fbdd 	bl	80012ac <rtc_interrupt_enable>
	rtc_interrupt_enable(RTC_ALR);  //  Allow RTC to generate alarm interrupts.
 8002af2:	2001      	movs	r0, #1
 8002af4:	f7fe fbda 	bl	80012ac <rtc_interrupt_enable>
	__asm__("CPSIE I\n");
 8002af8:	b662      	cpsie	i
}
 8002afa:	bd38      	pop	{r3, r4, r5, pc}
 8002afc:	2000045c 	.word	0x2000045c
 8002b00:	20000460 	.word	0x20000460
 8002b04:	20000469 	.word	0x20000469
 8002b08:	080045b8 	.word	0x080045b8
 8002b0c:	080045cd 	.word	0x080045cd
 8002b10:	40002804 	.word	0x40002804
 8002b14:	40002800 	.word	0x40002800
 8002b18:	40002808 	.word	0x40002808
 8002b1c:	40002820 	.word	0x40002820
 8002b20:	080045da 	.word	0x080045da

08002b24 <platform_set_alarm>:
	if (!alarmFunc) { debug_print("alm? "); } ////
 8002b24:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <platform_set_alarm+0x28>)
void platform_set_alarm(uint32_t millisec) {
 8002b26:	b513      	push	{r0, r1, r4, lr}
	if (!alarmFunc) { debug_print("alm? "); } ////
 8002b28:	681b      	ldr	r3, [r3, #0]
void platform_set_alarm(uint32_t millisec) {
 8002b2a:	4604      	mov	r4, r0
	if (!alarmFunc) { debug_print("alm? "); } ////
 8002b2c:	b913      	cbnz	r3, 8002b34 <platform_set_alarm+0x10>
 8002b2e:	4808      	ldr	r0, [pc, #32]	; (8002b50 <platform_set_alarm+0x2c>)
 8002b30:	f7ff fed3 	bl	80028da <debug_print>
	volatile uint32_t now = rtc_get_counter_val();
 8002b34:	f7fe fba2 	bl	800127c <rtc_get_counter_val>
 8002b38:	9001      	str	r0, [sp, #4]
	pwr_disable_backup_domain_write_protect();
 8002b3a:	f7fe fc23 	bl	8001384 <pwr_disable_backup_domain_write_protect>
	rtc_set_alarm_time(now + millisec);
 8002b3e:	9801      	ldr	r0, [sp, #4]
 8002b40:	4420      	add	r0, r4
}
 8002b42:	b002      	add	sp, #8
 8002b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	rtc_set_alarm_time(now + millisec);
 8002b48:	f7fe bb78 	b.w	800123c <rtc_set_alarm_time>
 8002b4c:	20000460 	.word	0x20000460
 8002b50:	080045b2 	.word	0x080045b2

08002b54 <platform_alarm_count>:
	return alarmCount;  //  For testing whether alarm ISR was called.
 8002b54:	4b01      	ldr	r3, [pc, #4]	; (8002b5c <platform_alarm_count+0x8>)
 8002b56:	6818      	ldr	r0, [r3, #0]
}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000458 	.word	0x20000458

08002b60 <__cxa_pure_virtual>:
//  These functions must be located here or the compiler will pull in the standard C library versions.
//  From https://github.com/lancaster-university/codal-arduino-uno/blob/master/source/codal_target_hal.cpp

extern "C" void __cxa_pure_virtual() {
	//  Disable exceptions for abstract classes. See https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/abstract_classes.html
    target_panic(1000);
 8002b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b64:	f7fe b8ba 	b.w	8000cdc <target_panic>

08002b68 <_Znwj>:
}

// define new and delete.
extern "C" void *operator new(size_t objsize) {
    return malloc(objsize);
 8002b68:	f005 b8fa 	b.w	8007d60 <device_malloc>

08002b6c <_ZdlPv>:
}

extern "C" void operator delete(void* obj) {
    free(obj);
 8002b6c:	f005 b91c 	b.w	8007da8 <device_free>

08002b70 <millis>:
	return rtc_get_counter_val();  //  More accurate, uses hardware counters.
 8002b70:	f7fe bb84 	b.w	800127c <rtc_get_counter_val>

08002b74 <poll_restart_callback>:
    return 0;
}

static bool poll_restart_requested = false;

int poll_restart_callback(void) {
 8002b74:	b508      	push	{r3, lr}
    //  Call this function when we need to restart during polling.
    debug_println("restart callback");  debug_flush(); 
 8002b76:	4805      	ldr	r0, [pc, #20]	; (8002b8c <poll_restart_callback+0x18>)
 8002b78:	f7ff fe92 	bl	80028a0 <debug_println>
 8002b7c:	f7ff feaa 	bl	80028d4 <debug_flush>
    poll_restart_requested = true;
 8002b80:	2201      	movs	r2, #1
 8002b82:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <poll_restart_callback+0x1c>)
    return 0;
}
 8002b84:	2000      	movs	r0, #0
    poll_restart_requested = true;
 8002b86:	701a      	strb	r2, [r3, #0]
}
 8002b88:	bd08      	pop	{r3, pc}
 8002b8a:	bf00      	nop
 8002b8c:	08004688 	.word	0x08004688
 8002b90:	20000660 	.word	0x20000660

08002b94 <bootloader_poll>:
int bootloader_poll(void) {
 8002b94:	b508      	push	{r3, lr}
    if (!usbd_dev) { return -1; }
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <bootloader_poll+0x24>)
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	b150      	cbz	r0, 8002bb2 <bootloader_poll+0x1e>
	usbd_poll(usbd_dev);
 8002b9c:	f7fe ffd4 	bl	8001b48 <usbd_poll>
    status = get_usb_status();  //  if (status != last_status) { debug_print("@"); debug_print_unsigned(status); debug_print(" "); } ////
 8002ba0:	f000 fc80 	bl	80034a4 <get_usb_status>
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <bootloader_poll+0x28>)
    last_status = status;
 8002ba6:	4a06      	ldr	r2, [pc, #24]	; (8002bc0 <bootloader_poll+0x2c>)
    status = get_usb_status();  //  if (status != last_status) { debug_print("@"); debug_print_unsigned(status); debug_print(" "); } ////
 8002ba8:	6018      	str	r0, [r3, #0]
    last_status = status;
 8002baa:	6819      	ldr	r1, [r3, #0]
 8002bac:	6011      	str	r1, [r2, #0]
    return status;  // if (delay > 0) { debug_print("p"); debug_print_unsigned(delay); debug_print(" / "); }
 8002bae:	6818      	ldr	r0, [r3, #0]
}
 8002bb0:	bd08      	pop	{r3, pc}
    if (!usbd_dev) { return -1; }
 8002bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bb6:	e7fb      	b.n	8002bb0 <bootloader_poll+0x1c>
 8002bb8:	20000494 	.word	0x20000494
 8002bbc:	2000048c 	.word	0x2000048c
 8002bc0:	20000480 	.word	0x20000480

08002bc4 <prepare_baseloader>:
void prepare_baseloader(void) {
 8002bc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    asm("msr msp, %0" : : "r" (topOfMainStack));
 8002bc8:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <prepare_baseloader+0x1c8>)
 8002bca:	f383 8808 	msr	MSP, r3
    for (i = 0; i < sizeof(vector_table_t); i++) { flashBuf[i] = 0; }   //  Zero the temp vector table. Don't use any library functions here.
 8002bce:	2200      	movs	r2, #0
    tmp_vector_table = (vector_table_t *) flashBuf;
 8002bd0:	496f      	ldr	r1, [pc, #444]	; (8002d90 <prepare_baseloader+0x1cc>)
 8002bd2:	4b70      	ldr	r3, [pc, #448]	; (8002d94 <prepare_baseloader+0x1d0>)
 8002bd4:	4689      	mov	r9, r1
 8002bd6:	600b      	str	r3, [r1, #0]
    for (i = 0; i < sizeof(vector_table_t); i++) { flashBuf[i] = 0; }   //  Zero the temp vector table. Don't use any library functions here.
 8002bd8:	4611      	mov	r1, r2
 8002bda:	5499      	strb	r1, [r3, r2]
 8002bdc:	3201      	adds	r2, #1
 8002bde:	f5b2 7fa8 	cmp.w	r2, #336	; 0x150
 8002be2:	d1fa      	bne.n	8002bda <prepare_baseloader+0x16>
    tmp_vector_table->initial_sp_value = vector_table.initial_sp_value;
 8002be4:	4a6c      	ldr	r2, [pc, #432]	; (8002d98 <prepare_baseloader+0x1d4>)
    baseloader_addr = NULL;
 8002be6:	4f6d      	ldr	r7, [pc, #436]	; (8002d9c <prepare_baseloader+0x1d8>)
    tmp_vector_table->initial_sp_value = vector_table.initial_sp_value;
 8002be8:	6810      	ldr	r0, [r2, #0]
	baseloader_status = baseloader_fetch(&baseloader_addr, &dest, &src, &byte_count);  //  Fetch the baseloader address, which will be at a temporary location.
 8002bea:	4e6d      	ldr	r6, [pc, #436]	; (8002da0 <prepare_baseloader+0x1dc>)
    tmp_vector_table->reset = vector_table.reset;
 8002bec:	6852      	ldr	r2, [r2, #4]
	baseloader_status = baseloader_fetch(&baseloader_addr, &dest, &src, &byte_count);  //  Fetch the baseloader address, which will be at a temporary location.
 8002bee:	4c6d      	ldr	r4, [pc, #436]	; (8002da4 <prepare_baseloader+0x1e0>)
 8002bf0:	f8df 820c 	ldr.w	r8, [pc, #524]	; 8002e00 <prepare_baseloader+0x23c>
    tmp_vector_table->initial_sp_value = vector_table.initial_sp_value;
 8002bf4:	6018      	str	r0, [r3, #0]
    tmp_vector_table->reset = vector_table.reset;
 8002bf6:	605a      	str	r2, [r3, #4]
    baseloader_addr = NULL;
 8002bf8:	6039      	str	r1, [r7, #0]
	baseloader_status = baseloader_fetch(&baseloader_addr, &dest, &src, &byte_count);  //  Fetch the baseloader address, which will be at a temporary location.
 8002bfa:	4643      	mov	r3, r8
 8002bfc:	4632      	mov	r2, r6
 8002bfe:	4621      	mov	r1, r4
 8002c00:	4638      	mov	r0, r7
 8002c02:	f7fd fe93 	bl	800092c <baseloader_fetch>
 8002c06:	4d68      	ldr	r5, [pc, #416]	; (8002da8 <prepare_baseloader+0x1e4>)
 8002c08:	46b2      	mov	sl, r6
 8002c0a:	6028      	str	r0, [r5, #0]
	debug_print("----baseloader "); if (baseloader_status == 0) { 
 8002c0c:	4867      	ldr	r0, [pc, #412]	; (8002dac <prepare_baseloader+0x1e8>)
 8002c0e:	f7ff fe64 	bl	80028da <debug_print>
 8002c12:	682b      	ldr	r3, [r5, #0]
 8002c14:	46a3      	mov	fp, r4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d176      	bne.n	8002d08 <prepare_baseloader+0x144>
        debug_print("found "); debug_printhex_unsigned((uint32_t) baseloader_addr); 
 8002c1a:	4865      	ldr	r0, [pc, #404]	; (8002db0 <prepare_baseloader+0x1ec>)
 8002c1c:	f7ff fe5d 	bl	80028da <debug_print>
 8002c20:	6838      	ldr	r0, [r7, #0]
 8002c22:	f7ff fe8c 	bl	800293e <debug_printhex_unsigned>
		debug_print(", dest "); debug_printhex_unsigned((uint32_t) dest);
 8002c26:	4863      	ldr	r0, [pc, #396]	; (8002db4 <prepare_baseloader+0x1f0>)
 8002c28:	f7ff fe57 	bl	80028da <debug_print>
 8002c2c:	6820      	ldr	r0, [r4, #0]
 8002c2e:	f7ff fe86 	bl	800293e <debug_printhex_unsigned>
		debug_print(", src "); debug_printhex_unsigned((uint32_t) src);
 8002c32:	4861      	ldr	r0, [pc, #388]	; (8002db8 <prepare_baseloader+0x1f4>)
 8002c34:	f7ff fe51 	bl	80028da <debug_print>
 8002c38:	6830      	ldr	r0, [r6, #0]
 8002c3a:	f7ff fe80 	bl	800293e <debug_printhex_unsigned>
		debug_print(", len "); debug_printhex_unsigned(byte_count); debug_force_flush();  
 8002c3e:	485f      	ldr	r0, [pc, #380]	; (8002dbc <prepare_baseloader+0x1f8>)
 8002c40:	f7ff fe4b 	bl	80028da <debug_print>
 8002c44:	f8d8 0000 	ldr.w	r0, [r8]
 8002c48:	f7ff fe79 	bl	800293e <debug_printhex_unsigned>
 8002c4c:	f7ff fdc4 	bl	80027d8 <debug_force_flush>
		debug_print(", *func "); debug_printhex_unsigned(*(uint32_t *) baseloader_addr); debug_force_flush();  
 8002c50:	485b      	ldr	r0, [pc, #364]	; (8002dc0 <prepare_baseloader+0x1fc>)
 8002c52:	f7ff fe42 	bl	80028da <debug_print>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	f7ff fe70 	bl	800293e <debug_printhex_unsigned>
 8002c5e:	f7ff fdbb 	bl	80027d8 <debug_force_flush>
    }; debug_println(""); debug_force_flush();
 8002c62:	4858      	ldr	r0, [pc, #352]	; (8002dc4 <prepare_baseloader+0x200>)
 8002c64:	f7ff fe1c 	bl	80028a0 <debug_println>
 8002c68:	f7ff fdb6 	bl	80027d8 <debug_force_flush>
    if (baseloader_status != 0 || baseloader_addr == NULL) { return; }
 8002c6c:	682e      	ldr	r6, [r5, #0]
 8002c6e:	2e00      	cmp	r6, #0
 8002c70:	d148      	bne.n	8002d04 <prepare_baseloader+0x140>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d045      	beq.n	8002d04 <prepare_baseloader+0x140>
    base_para.dest = (uint32_t) dest;
 8002c78:	4c53      	ldr	r4, [pc, #332]	; (8002dc8 <prepare_baseloader+0x204>)
 8002c7a:	f8db 2000 	ldr.w	r2, [fp]
    base_para.restart = 1;
 8002c7e:	7366      	strb	r6, [r4, #13]
    base_para.dest = (uint32_t) dest;
 8002c80:	6022      	str	r2, [r4, #0]
    base_para.src = (uint32_t) src;
 8002c82:	f8da 2000 	ldr.w	r2, [sl]
    base_para.restart = 1;
 8002c86:	73a6      	strb	r6, [r4, #14]
    base_para.src = (uint32_t) src;
 8002c88:	6062      	str	r2, [r4, #4]
    base_para.byte_count = byte_count;
 8002c8a:	f8d8 2000 	ldr.w	r2, [r8]
    base_para.restart = 1;
 8002c8e:	73e6      	strb	r6, [r4, #15]
    base_para.byte_count = byte_count;
 8002c90:	60a2      	str	r2, [r4, #8]
    base_para.restart = 1;
 8002c92:	2201      	movs	r2, #1
    base_para.preview = 1;
 8002c94:	7466      	strb	r6, [r4, #17]
    base_para.restart = 1;
 8002c96:	7322      	strb	r2, [r4, #12]
    base_para.preview = 1;
 8002c98:	7422      	strb	r2, [r4, #16]
 8002c9a:	74a6      	strb	r6, [r4, #18]
 8002c9c:	74e6      	strb	r6, [r4, #19]
    baseloader_addr();
 8002c9e:	4798      	blx	r3
    baseloader_status = base_para.result;  
 8002ca0:	6963      	ldr	r3, [r4, #20]
    if (baseloader_status > 0) {
 8002ca2:	2b00      	cmp	r3, #0
    baseloader_status = base_para.result;  
 8002ca4:	602b      	str	r3, [r5, #0]
    if (baseloader_status > 0) {
 8002ca6:	dd5e      	ble.n	8002d66 <prepare_baseloader+0x1a2>
        debug_print("baseloader preview ok "); debug_printhex_unsigned(baseloader_status); 
 8002ca8:	4848      	ldr	r0, [pc, #288]	; (8002dcc <prepare_baseloader+0x208>)
 8002caa:	f7ff fe16 	bl	80028da <debug_print>
 8002cae:	6828      	ldr	r0, [r5, #0]
 8002cb0:	f7ff fe45 	bl	800293e <debug_printhex_unsigned>
        debug_println(", call actual baseloader..."); debug_force_flush();
 8002cb4:	4846      	ldr	r0, [pc, #280]	; (8002dd0 <prepare_baseloader+0x20c>)
 8002cb6:	f7ff fdf3 	bl	80028a0 <debug_println>
 8002cba:	f7ff fd8d 	bl	80027d8 <debug_force_flush>
    debug_print("switch system vector table "); debug_printhex_unsigned((uint32_t) tmp_vector_table); 
 8002cbe:	4845      	ldr	r0, [pc, #276]	; (8002dd4 <prepare_baseloader+0x210>)
 8002cc0:	f7ff fe0b 	bl	80028da <debug_print>
 8002cc4:	f8d9 0000 	ldr.w	r0, [r9]
 8002cc8:	f7ff fe39 	bl	800293e <debug_printhex_unsigned>
    debug_print(", len "); debug_printhex_unsigned(sizeof(vector_table_t)); 
 8002ccc:	483b      	ldr	r0, [pc, #236]	; (8002dbc <prepare_baseloader+0x1f8>)
 8002cce:	f7ff fe04 	bl	80028da <debug_print>
 8002cd2:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8002cd6:	f7ff fe32 	bl	800293e <debug_printhex_unsigned>
    debug_println(""); debug_force_flush();
 8002cda:	483a      	ldr	r0, [pc, #232]	; (8002dc4 <prepare_baseloader+0x200>)
 8002cdc:	f7ff fde0 	bl	80028a0 <debug_println>
 8002ce0:	f7ff fd7a 	bl	80027d8 <debug_force_flush>
    asm("dmb");
 8002ce4:	f3bf 8f5f 	dmb	sy
    SCB_VTOR = (uint32_t) tmp_vector_table;
 8002ce8:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <prepare_baseloader+0x214>)
 8002cea:	f8d9 2000 	ldr.w	r2, [r9]
 8002cee:	601a      	str	r2, [r3, #0]
    asm("dsb");
 8002cf0:	f3bf 8f4f 	dsb	sy
    baseloader_addr();  
 8002cf4:	683b      	ldr	r3, [r7, #0]
    base_para.preview = 0;
 8002cf6:	7426      	strb	r6, [r4, #16]
 8002cf8:	7466      	strb	r6, [r4, #17]
 8002cfa:	74a6      	strb	r6, [r4, #18]
 8002cfc:	74e6      	strb	r6, [r4, #19]
    baseloader_addr();  
 8002cfe:	4798      	blx	r3
    baseloader_status = base_para.result;  
 8002d00:	6963      	ldr	r3, [r4, #20]
 8002d02:	602b      	str	r3, [r5, #0]
}
 8002d04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        debug_print("not found "); debug_print_int(baseloader_status); debug_print(" ");
 8002d08:	4834      	ldr	r0, [pc, #208]	; (8002ddc <prepare_baseloader+0x218>)
 8002d0a:	f7ff fde6 	bl	80028da <debug_print>
 8002d0e:	6828      	ldr	r0, [r5, #0]
 8002d10:	f7ff fdf0 	bl	80028f4 <debug_print_int>
 8002d14:	4832      	ldr	r0, [pc, #200]	; (8002de0 <prepare_baseloader+0x21c>)
 8002d16:	f7ff fde0 	bl	80028da <debug_print>
            (baseloader_status == -3) ? "too big " :
 8002d1a:	682b      	ldr	r3, [r5, #0]
        debug_print(
 8002d1c:	1cda      	adds	r2, r3, #3
 8002d1e:	d020      	beq.n	8002d62 <prepare_baseloader+0x19e>
            (baseloader_status == -3) ? "too big " :
 8002d20:	4830      	ldr	r0, [pc, #192]	; (8002de4 <prepare_baseloader+0x220>)
 8002d22:	4a28      	ldr	r2, [pc, #160]	; (8002dc4 <prepare_baseloader+0x200>)
 8002d24:	f113 0f04 	cmn.w	r3, #4
 8002d28:	bf18      	it	ne
 8002d2a:	4610      	movne	r0, r2
        debug_print(
 8002d2c:	f7ff fdd5 	bl	80028da <debug_print>
        debug_printhex_unsigned(base_para.fail);
 8002d30:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <prepare_baseloader+0x204>)
 8002d32:	6998      	ldr	r0, [r3, #24]
 8002d34:	f7ff fe03 	bl	800293e <debug_printhex_unsigned>
        if (baseloader_status == -4) { 
 8002d38:	682b      	ldr	r3, [r5, #0]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	d191      	bne.n	8002c62 <prepare_baseloader+0x9e>
            debug_print(", oldapp "); debug_printhex_unsigned((uint32_t) FLASH_ADDRESS(application_start)); 
 8002d3e:	482a      	ldr	r0, [pc, #168]	; (8002de8 <prepare_baseloader+0x224>)
 8002d40:	f7ff fdcb 	bl	80028da <debug_print>
 8002d44:	4829      	ldr	r0, [pc, #164]	; (8002dec <prepare_baseloader+0x228>)
 8002d46:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8002d4a:	f020 0003 	bic.w	r0, r0, #3
 8002d4e:	f7ff fdf6 	bl	800293e <debug_printhex_unsigned>
            debug_print(", bootlen "); debug_printhex_unsigned(byte_count); 
 8002d52:	4827      	ldr	r0, [pc, #156]	; (8002df0 <prepare_baseloader+0x22c>)
 8002d54:	f7ff fdc1 	bl	80028da <debug_print>
 8002d58:	f8d8 0000 	ldr.w	r0, [r8]
 8002d5c:	f7ff fdef 	bl	800293e <debug_printhex_unsigned>
 8002d60:	e77f      	b.n	8002c62 <prepare_baseloader+0x9e>
        debug_print(
 8002d62:	4824      	ldr	r0, [pc, #144]	; (8002df4 <prepare_baseloader+0x230>)
 8002d64:	e7e2      	b.n	8002d2c <prepare_baseloader+0x168>
        debug_print("baseloader preview failed "); debug_print_int(baseloader_status);
 8002d66:	4824      	ldr	r0, [pc, #144]	; (8002df8 <prepare_baseloader+0x234>)
 8002d68:	f7ff fdb7 	bl	80028da <debug_print>
 8002d6c:	6828      	ldr	r0, [r5, #0]
 8002d6e:	f7ff fdc1 	bl	80028f4 <debug_print_int>
        debug_println(", fail "); debug_printhex_unsigned(base_para.fail); 
 8002d72:	4822      	ldr	r0, [pc, #136]	; (8002dfc <prepare_baseloader+0x238>)
 8002d74:	f7ff fd94 	bl	80028a0 <debug_println>
 8002d78:	69a0      	ldr	r0, [r4, #24]
 8002d7a:	f7ff fde0 	bl	800293e <debug_printhex_unsigned>
        debug_println(""); debug_force_flush();
 8002d7e:	4811      	ldr	r0, [pc, #68]	; (8002dc4 <prepare_baseloader+0x200>)
 8002d80:	f7ff fd8e 	bl	80028a0 <debug_println>
}
 8002d84:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        debug_println(""); debug_force_flush();
 8002d88:	f7ff bd26 	b.w	80027d8 <debug_force_flush>
 8002d8c:	200047bc 	.word	0x200047bc
 8002d90:	20000490 	.word	0x20000490
 8002d94:	200047bc 	.word	0x200047bc
 8002d98:	08000000 	.word	0x08000000
 8002d9c:	2000046c 	.word	0x2000046c
 8002da0:	20000488 	.word	0x20000488
 8002da4:	2000047c 	.word	0x2000047c
 8002da8:	20000470 	.word	0x20000470
 8002dac:	080046a6 	.word	0x080046a6
 8002db0:	080046d9 	.word	0x080046d9
 8002db4:	080046b6 	.word	0x080046b6
 8002db8:	080046be 	.word	0x080046be
 8002dbc:	080046c5 	.word	0x080046c5
 8002dc0:	080046cc 	.word	0x080046cc
 8002dc4:	0800459e 	.word	0x0800459e
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	080046f5 	.word	0x080046f5
 8002dd0:	0800470c 	.word	0x0800470c
 8002dd4:	08004728 	.word	0x08004728
 8002dd8:	e000ed08 	.word	0xe000ed08
 8002ddc:	080046d5 	.word	0x080046d5
 8002de0:	08004a14 	.word	0x08004a14
 8002de4:	080046a2 	.word	0x080046a2
 8002de8:	080046e0 	.word	0x080046e0
 8002dec:	08007401 	.word	0x08007401
 8002df0:	080046ea 	.word	0x080046ea
 8002df4:	08004699 	.word	0x08004699
 8002df8:	08004744 	.word	0x08004744
 8002dfc:	0800475f 	.word	0x0800475f
 8002e00:	20000474 	.word	0x20000474

08002e04 <bootloader_start>:
int bootloader_start(void) {
 8002e04:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (usbd_dev) { return 1; }  // Already started, quit.
 8002e06:	4c43      	ldr	r4, [pc, #268]	; (8002f14 <bootloader_start+0x110>)
int bootloader_start(void) {
 8002e08:	b089      	sub	sp, #36	; 0x24
    if (usbd_dev) { return 1; }  // Already started, quit.
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d17e      	bne.n	8002f0e <bootloader_start+0x10a>
    if (boot_target_get_startup_mode() == BASELOADER_MODE) { 
 8002e10:	f000 f970 	bl	80030f4 <boot_target_get_startup_mode>
 8002e14:	2801      	cmp	r0, #1
 8002e16:	d101      	bne.n	8002e1c <bootloader_start+0x18>
        prepare_baseloader();
 8002e18:	f7ff fed4 	bl	8002bc4 <prepare_baseloader>
    debug_println("----bootloader");  // debug_flush();    
 8002e1c:	483e      	ldr	r0, [pc, #248]	; (8002f18 <bootloader_start+0x114>)
 8002e1e:	f7ff fd3f 	bl	80028a0 <debug_println>
    boot_target_gpio_setup();  //  Initialize GPIO/LEDs if needed
 8002e22:	f000 f9f5 	bl	8003210 <boot_target_gpio_setup>
    }
#endif  //  NOTUSED

static void get_serial_number(void) {
    char serial[USB_SERIAL_NUM_LENGTH+1];
    serial[0] = '\0';
 8002e26:	2300      	movs	r3, #0
 8002e28:	ad08      	add	r5, sp, #32
 8002e2a:	f805 3d1c 	strb.w	r3, [r5, #-28]!
    debug_println("boot_target_get_serial_number");  // debug_flush();
 8002e2e:	483b      	ldr	r0, [pc, #236]	; (8002f1c <bootloader_start+0x118>)
 8002e30:	f7ff fd36 	bl	80028a0 <debug_println>
    boot_target_get_serial_number(serial, USB_SERIAL_NUM_LENGTH);
 8002e34:	2118      	movs	r1, #24
 8002e36:	4628      	mov	r0, r5
 8002e38:	f001 fb21 	bl	800447e <boot_target_get_serial_number>

    debug_println("usb_set_serial_number");  // debug_flush();
 8002e3c:	4838      	ldr	r0, [pc, #224]	; (8002f20 <bootloader_start+0x11c>)
 8002e3e:	f7ff fd2f 	bl	80028a0 <debug_println>
    usb_set_serial_number(serial);
 8002e42:	4628      	mov	r0, r5
 8002e44:	f000 fb86 	bl	8003554 <usb_set_serial_number>
    if (boot_target_get_startup_mode() == BOOTLOADER_MODE) { 
 8002e48:	f000 f954 	bl	80030f4 <boot_target_get_startup_mode>
 8002e4c:	2802      	cmp	r0, #2
 8002e4e:	d102      	bne.n	8002e56 <bootloader_start+0x52>
    asm("msr msp, %0" : : "r" (topOfMainStack));
 8002e50:	4b34      	ldr	r3, [pc, #208]	; (8002f24 <bootloader_start+0x120>)
 8002e52:	f383 8808 	msr	MSP, r3
    debug_println("usb_setup");  // debug_flush();
 8002e56:	4834      	ldr	r0, [pc, #208]	; (8002f28 <bootloader_start+0x124>)
 8002e58:	f7ff fd22 	bl	80028a0 <debug_println>
    usbd_dev = usb_setup();
 8002e5c:	f000 fac0 	bl	80033e0 <usb_setup>
 8002e60:	6020      	str	r0, [r4, #0]
    if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 8002e62:	f000 f947 	bl	80030f4 <boot_target_get_startup_mode>
 8002e66:	2803      	cmp	r0, #3
 8002e68:	d105      	bne.n	8002e76 <bootloader_start+0x72>
        target_set_bootloader_callback(bootloader_poll);
 8002e6a:	4830      	ldr	r0, [pc, #192]	; (8002f2c <bootloader_start+0x128>)
 8002e6c:	f7fd ff8e 	bl	8000d8c <target_set_bootloader_callback>
        return 0; 
 8002e70:	2000      	movs	r0, #0
}
 8002e72:	b009      	add	sp, #36	; 0x24
 8002e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    debug_println("usbd polling...");  debug_flush();  debug_flush();  // test_hf2(); test_backup();          //  Test backup.
 8002e76:	482e      	ldr	r0, [pc, #184]	; (8002f30 <bootloader_start+0x12c>)
 8002e78:	f7ff fd12 	bl	80028a0 <debug_println>
 8002e7c:	f7ff fd2a 	bl	80028d4 <debug_flush>
 8002e80:	f7ff fd28 	bl	80028d4 <debug_flush>
    boot_target_set_restart_callback(poll_restart_callback);
 8002e84:	482b      	ldr	r0, [pc, #172]	; (8002f34 <bootloader_start+0x130>)
 8002e86:	f000 fa11 	bl	80032ac <boot_target_set_restart_callback>
        cycleCount++;
 8002e8a:	4d2b      	ldr	r5, [pc, #172]	; (8002f38 <bootloader_start+0x134>)
            boot_target_set_led((msTimer++ % 500) < 50);
 8002e8c:	4e2b      	ldr	r6, [pc, #172]	; (8002f3c <bootloader_start+0x138>)
            if (flushCount++ % 1000 == 0 && get_usb_status() == 0) {  //  If USB is not busy...
 8002e8e:	4f2c      	ldr	r7, [pc, #176]	; (8002f40 <bootloader_start+0x13c>)
        usbd_poll(usbd_dev);
 8002e90:	6820      	ldr	r0, [r4, #0]
 8002e92:	f7fe fe59 	bl	8001b48 <usbd_poll>
        cycleCount++;
 8002e96:	682b      	ldr	r3, [r5, #0]
 8002e98:	3301      	adds	r3, #1
        if (cycleCount >= 700) {
 8002e9a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
        cycleCount++;
 8002e9e:	602b      	str	r3, [r5, #0]
        if (cycleCount >= 700) {
 8002ea0:	d3f6      	bcc.n	8002e90 <bootloader_start+0x8c>
            cycleCount = 0;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	602b      	str	r3, [r5, #0]
            boot_target_set_led((msTimer++ % 500) < 50);
 8002ea6:	6833      	ldr	r3, [r6, #0]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	6032      	str	r2, [r6, #0]
 8002eac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002eb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8002eb4:	fb02 3010 	mls	r0, r2, r0, r3
 8002eb8:	2831      	cmp	r0, #49	; 0x31
 8002eba:	bf8c      	ite	hi
 8002ebc:	2000      	movhi	r0, #0
 8002ebe:	2001      	movls	r0, #1
 8002ec0:	f000 f99a 	bl	80031f8 <boot_target_set_led>
            if (flushCount++ % 1000 == 0 && get_usb_status() == 0) {  //  If USB is not busy...
 8002ec4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	1c53      	adds	r3, r2, #1
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	fbb2 f3f1 	udiv	r3, r2, r1
 8002ed2:	fb01 2313 	mls	r3, r1, r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1da      	bne.n	8002e90 <bootloader_start+0x8c>
 8002eda:	f000 fae3 	bl	80034a4 <get_usb_status>
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d1d6      	bne.n	8002e90 <bootloader_start+0x8c>
                debug_flush(); 
 8002ee2:	f7ff fcf7 	bl	80028d4 <debug_flush>
                if (poll_restart_requested) {  //  Flush the log and restart.
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <bootloader_start+0x140>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0d0      	beq.n	8002e90 <bootloader_start+0x8c>
                    debug_println("restarting...");
 8002eee:	4816      	ldr	r0, [pc, #88]	; (8002f48 <bootloader_start+0x144>)
 8002ef0:	f7ff fcd6 	bl	80028a0 <debug_println>
                    debug_force_flush();
 8002ef4:	f7ff fc70 	bl	80027d8 <debug_force_flush>
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <bootloader_start+0x148>)
                    for (int i = 0; i < us*10; i++) { __asm__("nop"); }
 8002efa:	bf00      	nop
 8002efc:	3b01      	subs	r3, #1
 8002efe:	d1fc      	bne.n	8002efa <bootloader_start+0xf6>
                    debug_println("done");
 8002f00:	4813      	ldr	r0, [pc, #76]	; (8002f50 <bootloader_start+0x14c>)
 8002f02:	f7ff fccd 	bl	80028a0 <debug_println>
                    debug_force_flush();
 8002f06:	f7ff fc67 	bl	80027d8 <debug_force_flush>
                    scb_reset_system();
 8002f0a:	f7fe fb1d 	bl	8001548 <scb_reset_system>
    if (usbd_dev) { return 1; }  // Already started, quit.
 8002f0e:	2001      	movs	r0, #1
 8002f10:	e7af      	b.n	8002e72 <bootloader_start+0x6e>
 8002f12:	bf00      	nop
 8002f14:	20000494 	.word	0x20000494
 8002f18:	08004618 	.word	0x08004618
 8002f1c:	08004627 	.word	0x08004627
 8002f20:	08004645 	.word	0x08004645
 8002f24:	200047bc 	.word	0x200047bc
 8002f28:	0800465b 	.word	0x0800465b
 8002f2c:	08002b95 	.word	0x08002b95
 8002f30:	08004665 	.word	0x08004665
 8002f34:	08002b75 	.word	0x08002b75
 8002f38:	20000478 	.word	0x20000478
 8002f3c:	20000484 	.word	0x20000484
 8002f40:	20000058 	.word	0x20000058
 8002f44:	20000660 	.word	0x20000660
 8002f48:	08004675 	.word	0x08004675
 8002f4c:	00989680 	.word	0x00989680
 8002f50:	08004683 	.word	0x08004683

08002f54 <base_flash_program_array>:
int base_flash_program_array(uint16_t *dest0, const uint16_t *src0, size_t half_word_count0) {
	//  Return the number of half-words flashed.
    base_para.dest = (uint32_t) dest0;
    base_para.src = (uint32_t) src0;
    base_para.byte_count = half_word_count0 * 2;
    base_para.restart = 0;
 8002f54:	2300      	movs	r3, #0
int base_flash_program_array(uint16_t *dest0, const uint16_t *src0, size_t half_word_count0) {
 8002f56:	b510      	push	{r4, lr}
    base_para.dest = (uint32_t) dest0;
 8002f58:	4c09      	ldr	r4, [pc, #36]	; (8002f80 <base_flash_program_array+0x2c>)
    base_para.byte_count = half_word_count0 * 2;
 8002f5a:	0052      	lsls	r2, r2, #1
    base_para.dest = (uint32_t) dest0;
 8002f5c:	6020      	str	r0, [r4, #0]
    base_para.src = (uint32_t) src0;
 8002f5e:	6061      	str	r1, [r4, #4]
    base_para.byte_count = half_word_count0 * 2;
 8002f60:	60a2      	str	r2, [r4, #8]
    base_para.restart = 0;
 8002f62:	7323      	strb	r3, [r4, #12]
 8002f64:	7363      	strb	r3, [r4, #13]
 8002f66:	73a3      	strb	r3, [r4, #14]
 8002f68:	73e3      	strb	r3, [r4, #15]
    base_para.preview = 0;
 8002f6a:	7423      	strb	r3, [r4, #16]
 8002f6c:	7463      	strb	r3, [r4, #17]
 8002f6e:	74a3      	strb	r3, [r4, #18]
 8002f70:	74e3      	strb	r3, [r4, #19]
    baseloader_start();
 8002f72:	f7fd f8f9 	bl	8000168 <baseloader_start>
	int bytes_flashed = base_para.result;
 8002f76:	6960      	ldr	r0, [r4, #20]
	return (bytes_flashed > 0) ? bytes_flashed / 2 : bytes_flashed;
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	bfc8      	it	gt
 8002f7c:	1040      	asrgt	r0, r0, #1
}
 8002f7e:	bd10      	pop	{r4, pc}
 8002f80:	20000000 	.word	0x20000000

08002f84 <flash_flush>:

void flash_flush(void) {
 8002f84:	b538      	push	{r3, r4, r5, lr}
    //  Flush the page of cached flashing data to ROM.
    lastFlush = ms;
 8002f86:	4b1a      	ldr	r3, [pc, #104]	; (8002ff0 <flash_flush+0x6c>)
    if (flashAddr == NO_CACHE) { return; }
 8002f88:	4c1a      	ldr	r4, [pc, #104]	; (8002ff4 <flash_flush+0x70>)
    lastFlush = ms;
 8002f8a:	681a      	ldr	r2, [r3, #0]
    if (flashAddr == NO_CACHE) { return; }
 8002f8c:	6821      	ldr	r1, [r4, #0]
    lastFlush = ms;
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ff8 <flash_flush+0x74>)
 8002f90:	601a      	str	r2, [r3, #0]
    if (flashAddr == NO_CACHE) { return; }
 8002f92:	1c4b      	adds	r3, r1, #1
 8002f94:	d02b      	beq.n	8002fee <flash_flush+0x6a>
    if (firstFlush) { firstFlush = false; }  //  TODO: disable bootloader or something
 8002f96:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <flash_flush+0x78>)
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	b10a      	cbz	r2, 8002fa0 <flash_flush+0x1c>
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
    DBG("Flush at %x", flashAddr);
    if (memcmp(flashBuf, (void *)flashAddr, FLASH_PAGE_SIZE) != 0) {
 8002fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa4:	4816      	ldr	r0, [pc, #88]	; (8003000 <flash_flush+0x7c>)
 8002fa6:	f7ff fb38 	bl	800261a <memcmp>
 8002faa:	b1e8      	cbz	r0, 8002fe8 <flash_flush+0x64>
        //  If the page contents are different, write to ROM.
        debug_print("-> "); debug_printhex_unsigned((size_t) flashAddr); debug_print(" "); //// DBG("Write flush at %x", flashAddr);
 8002fac:	4815      	ldr	r0, [pc, #84]	; (8003004 <flash_flush+0x80>)
 8002fae:	f7ff fc94 	bl	80028da <debug_print>
 8002fb2:	6820      	ldr	r0, [r4, #0]
 8002fb4:	f7ff fcc3 	bl	800293e <debug_printhex_unsigned>
 8002fb8:	4813      	ldr	r0, [pc, #76]	; (8003008 <flash_flush+0x84>)
 8002fba:	f7ff fc8e 	bl	80028da <debug_print>
        int words_flashed = base_flash_program_array((void *)flashAddr, (void*)flashBuf, FLASH_PAGE_SIZE / 2);
 8002fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc2:	490f      	ldr	r1, [pc, #60]	; (8003000 <flash_flush+0x7c>)
 8002fc4:	6820      	ldr	r0, [r4, #0]
 8002fc6:	f7ff ffc5 	bl	8002f54 <base_flash_program_array>
        if (words_flashed != FLASH_PAGE_SIZE / 2) { debug_print("*** ERROR: Flash failed "); debug_print_int(words_flashed); debug_println(""); debug_force_flush(); }
 8002fca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
        int words_flashed = base_flash_program_array((void *)flashAddr, (void*)flashBuf, FLASH_PAGE_SIZE / 2);
 8002fce:	4605      	mov	r5, r0
        if (words_flashed != FLASH_PAGE_SIZE / 2) { debug_print("*** ERROR: Flash failed "); debug_print_int(words_flashed); debug_println(""); debug_force_flush(); }
 8002fd0:	d00a      	beq.n	8002fe8 <flash_flush+0x64>
 8002fd2:	480e      	ldr	r0, [pc, #56]	; (800300c <flash_flush+0x88>)
 8002fd4:	f7ff fc81 	bl	80028da <debug_print>
 8002fd8:	4628      	mov	r0, r5
 8002fda:	f7ff fc8b 	bl	80028f4 <debug_print_int>
 8002fde:	480c      	ldr	r0, [pc, #48]	; (8003010 <flash_flush+0x8c>)
 8002fe0:	f7ff fc5e 	bl	80028a0 <debug_println>
 8002fe4:	f7ff fbf8 	bl	80027d8 <debug_force_flush>
    }
    flashAddr = NO_CACHE;
 8002fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fec:	6023      	str	r3, [r4, #0]
}
 8002fee:	bd38      	pop	{r3, r4, r5, pc}
 8002ff0:	2000049c 	.word	0x2000049c
 8002ff4:	2000005c 	.word	0x2000005c
 8002ff8:	20000498 	.word	0x20000498
 8002ffc:	2000008c 	.word	0x2000008c
 8003000:	200047bc 	.word	0x200047bc
 8003004:	08004767 	.word	0x08004767
 8003008:	08004a14 	.word	0x08004a14
 800300c:	0800476b 	.word	0x0800476b
 8003010:	0800459e 	.word	0x0800459e

08003014 <flash_write>:

void flash_write(uint32_t dst, const uint8_t *src, int byte_count) {
    //  Write len bytes from src to ROM at address dst.  The writing is buffered in RAM until flash_flush() is called.    
    //  TODO: Support other memory sizes.
    int valid = 
        (dst >= 0x08000000 && (dst + byte_count) < 0x8010000 &&
 8003014:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
void flash_write(uint32_t dst, const uint8_t *src, int byte_count) {
 8003018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800301c:	4606      	mov	r6, r0
 800301e:	460d      	mov	r5, r1
 8003020:	4614      	mov	r4, r2
        (dst >= 0x08000000 && (dst + byte_count) < 0x8010000 &&
 8003022:	d312      	bcc.n	800304a <flash_write+0x36>
 8003024:	1883      	adds	r3, r0, r2
 8003026:	4a2b      	ldr	r2, [pc, #172]	; (80030d4 <flash_write+0xc0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d80e      	bhi.n	800304a <flash_write+0x36>
 800302c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8003030:	d30b      	bcc.n	800304a <flash_write+0x36>
        (
            ((uint32_t) src >= 0x08000000 && ((uint32_t) src + byte_count) < 0x08010000) ||
 8003032:	1863      	adds	r3, r4, r1
 8003034:	4293      	cmp	r3, r2
 8003036:	d945      	bls.n	80030c4 <flash_write+0xb0>
 8003038:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800303c:	d305      	bcc.n	800304a <flash_write+0x36>
            ((uint32_t) src >= 0x20000000 && ((uint32_t) src + byte_count) < 0x20005000)
 800303e:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8003042:	f5a2 4230 	sub.w	r2, r2, #45056	; 0xb000
 8003046:	4293      	cmp	r3, r2
 8003048:	d93c      	bls.n	80030c4 <flash_write+0xb0>
        ));
    if (!valid) {
        debug_print("**** ERROR: Invalid flash write, dst "); debug_printhex_unsigned(dst); 
 800304a:	4823      	ldr	r0, [pc, #140]	; (80030d8 <flash_write+0xc4>)
 800304c:	f7ff fc45 	bl	80028da <debug_print>
 8003050:	4630      	mov	r0, r6
 8003052:	f7ff fc74 	bl	800293e <debug_printhex_unsigned>
        debug_print(", src "); debug_printhex_unsigned((uint32_t) src);
 8003056:	4821      	ldr	r0, [pc, #132]	; (80030dc <flash_write+0xc8>)
 8003058:	f7ff fc3f 	bl	80028da <debug_print>
 800305c:	4628      	mov	r0, r5
 800305e:	f7ff fc6e 	bl	800293e <debug_printhex_unsigned>
        debug_print(", len "); debug_printhex_unsigned(byte_count); debug_println(""); debug_force_flush();
 8003062:	481f      	ldr	r0, [pc, #124]	; (80030e0 <flash_write+0xcc>)
 8003064:	f7ff fc39 	bl	80028da <debug_print>
 8003068:	4620      	mov	r0, r4
 800306a:	f7ff fc68 	bl	800293e <debug_printhex_unsigned>
 800306e:	481d      	ldr	r0, [pc, #116]	; (80030e4 <flash_write+0xd0>)
 8003070:	f7ff fc16 	bl	80028a0 <debug_println>
        //  Copy next page.
        dst += len;
        src += len;
        byte_count -= len;
    }
}
 8003074:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        debug_print(", len "); debug_printhex_unsigned(byte_count); debug_println(""); debug_force_flush();
 8003078:	f7ff bbae 	b.w	80027d8 <debug_force_flush>
        if (newAddr != flashAddr) {  //  If the cache has a different page...
 800307c:	f8d9 3000 	ldr.w	r3, [r9]
        int len = (byte_count > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : byte_count;
 8003080:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
        uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);
 8003084:	ea06 080b 	and.w	r8, r6, fp
        int len = (byte_count > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : byte_count;
 8003088:	4627      	mov	r7, r4
 800308a:	bfa8      	it	ge
 800308c:	f44f 6780 	movge.w	r7, #1024	; 0x400
        if (newAddr != flashAddr) {  //  If the cache has a different page...
 8003090:	4598      	cmp	r8, r3
 8003092:	d009      	beq.n	80030a8 <flash_write+0x94>
            flash_flush();           //  Flush the previous cached page.
 8003094:	f7ff ff76 	bl	8002f84 <flash_flush>
            memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);  //  Copy the current ROM page into the buffer.
 8003098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800309c:	4641      	mov	r1, r8
 800309e:	4650      	mov	r0, sl
            flashAddr = newAddr;
 80030a0:	f8c9 8000 	str.w	r8, [r9]
            memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);  //  Copy the current ROM page into the buffer.
 80030a4:	f7ff fac8 	bl	8002638 <memcpy>
        uint32_t offset = dst & (FLASH_PAGE_SIZE - 1);
 80030a8:	f3c6 0009 	ubfx	r0, r6, #0, #10
        memcpy(flashBuf + offset, src, len);
 80030ac:	4629      	mov	r1, r5
 80030ae:	463a      	mov	r2, r7
 80030b0:	4450      	add	r0, sl
 80030b2:	f7ff fac1 	bl	8002638 <memcpy>
        dst += len;
 80030b6:	443e      	add	r6, r7
        src += len;
 80030b8:	443d      	add	r5, r7
        byte_count -= len;
 80030ba:	1be4      	subs	r4, r4, r7
    while (byte_count > 0) {
 80030bc:	2c00      	cmp	r4, #0
 80030be:	dcdd      	bgt.n	800307c <flash_write+0x68>
}
 80030c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);
 80030c4:	f8df b020 	ldr.w	fp, [pc, #32]	; 80030e8 <flash_write+0xd4>
        if (newAddr != flashAddr) {  //  If the cache has a different page...
 80030c8:	f8df 9020 	ldr.w	r9, [pc, #32]	; 80030ec <flash_write+0xd8>
            memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);  //  Copy the current ROM page into the buffer.
 80030cc:	f8df a020 	ldr.w	sl, [pc, #32]	; 80030f0 <flash_write+0xdc>
 80030d0:	e7f4      	b.n	80030bc <flash_write+0xa8>
 80030d2:	bf00      	nop
 80030d4:	0800ffff 	.word	0x0800ffff
 80030d8:	08004784 	.word	0x08004784
 80030dc:	080046be 	.word	0x080046be
 80030e0:	080046c5 	.word	0x080046c5
 80030e4:	0800459e 	.word	0x0800459e
 80030e8:	fffffc00 	.word	0xfffffc00
 80030ec:	2000005c 	.word	0x2000005c
 80030f0:	200047bc 	.word	0x200047bc

080030f4 <boot_target_get_startup_mode>:
    debug_print("app missing "); debug_printhex_unsigned((size_t) APP_BASE_ADDRESS);
    debug_print(" = "); debug_printhex_unsigned(first_word); debug_println("");
    return false;
}

enum StartupMode boot_target_get_startup_mode(void) {
 80030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  Get the startup mode: Bootloader or Application.
    //  return BOOTLOADER_MODE; ////
    
    if (startup_mode != UNKNOWN_MODE) { return startup_mode; }
 80030f6:	4c31      	ldr	r4, [pc, #196]	; (80031bc <boot_target_get_startup_mode+0xc8>)
 80030f8:	7825      	ldrb	r5, [r4, #0]
 80030fa:	2d00      	cmp	r5, #0
 80030fc:	d148      	bne.n	8003190 <boot_target_get_startup_mode+0x9c>
    uint32_t first_word = *(volatile uint32_t *)APP_BASE_ADDRESS;
 80030fe:	4f30      	ldr	r7, [pc, #192]	; (80031c0 <boot_target_get_startup_mode+0xcc>)
 8003100:	683e      	ldr	r6, [r7, #0]
    if ((first_word & 0xff00) == 0xb500 || (first_word & 0xff000000) == 0xb5000000) {
 8003102:	f406 437f 	and.w	r3, r6, #65280	; 0xff00
 8003106:	f5b3 4f35 	cmp.w	r3, #46336	; 0xb500
 800310a:	d004      	beq.n	8003116 <boot_target_get_startup_mode+0x22>
 800310c:	f006 437f 	and.w	r3, r6, #4278190080	; 0xff000000
 8003110:	f1b3 4f35 	cmp.w	r3, #3036676096	; 0xb5000000
 8003114:	d121      	bne.n	800315a <boot_target_get_startup_mode+0x66>
        debug_println("app exists");
 8003116:	482b      	ldr	r0, [pc, #172]	; (80031c4 <boot_target_get_startup_mode+0xd0>)
 8003118:	f7ff fbc2 	bl	80028a0 <debug_println>
        return true;
 800311c:	2501      	movs	r5, #1
    bool appValid = validate_application();
    //  Check the RTC backup register for any boot request.
    uint32_t cmd = backup_read(BKP0);  //  Returns 0, CMD_BOOT, CMD_APP.
 800311e:	2000      	movs	r0, #0
 8003120:	f001 f906 	bl	8004330 <backup_read>
    backup_write(BKP0, 0);  //  Clear the backup register so it will boot back into Application Mode next time.
 8003124:	2100      	movs	r1, #0
    uint32_t cmd = backup_read(BKP0);  //  Returns 0, CMD_BOOT, CMD_APP.
 8003126:	4607      	mov	r7, r0
    backup_write(BKP0, 0);  //  Clear the backup register so it will boot back into Application Mode next time.
 8003128:	4608      	mov	r0, r1
 800312a:	f001 f8e5 	bl	80042f8 <backup_write>

    //  Remember the forced startup mode if we were forced before restarting.
    switch(cmd) {
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <boot_target_get_startup_mode+0xd4>)
 8003130:	4e26      	ldr	r6, [pc, #152]	; (80031cc <boot_target_get_startup_mode+0xd8>)
 8003132:	429f      	cmp	r7, r3
 8003134:	d021      	beq.n	800317a <boot_target_get_startup_mode+0x86>
 8003136:	f103 230e 	add.w	r3, r3, #234884608	; 0xe000e00
 800313a:	f503 037c 	add.w	r3, r3, #16515072	; 0xfc0000
 800313e:	429f      	cmp	r7, r3
 8003140:	d028      	beq.n	8003194 <boot_target_get_startup_mode+0xa0>
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <boot_target_get_startup_mode+0xdc>)
 8003144:	429f      	cmp	r7, r3
 8003146:	d129      	bne.n	800319c <boot_target_get_startup_mode+0xa8>
        case (int) CMD_BASE: forced_startup_mode = BASELOADER_MODE; backup_write(BKP0, CMD_BOOT); break;  //  Reboot as bootloader to complete.
        case (int) CMD_BOOT: forced_startup_mode = BOOTLOADER_MODE; break;
        case (int) CMD_APP:  forced_startup_mode = APPLICATION_MODE; break;
 8003148:	2303      	movs	r3, #3
        default:             forced_startup_mode = UNKNOWN_MODE; break;
 800314a:	7033      	strb	r3, [r6, #0]
        startup_mode = BASELOADER_MODE;
    } else if (cmd == CMD_BOOT) {
        //  Go to Bootloader Mode if we were requested by MakeCode to run as bootloader.
        debug_println("----bootloader mode (forced)");
        startup_mode = BOOTLOADER_MODE;
    } else if (!appValid) {
 800314c:	bb45      	cbnz	r5, 80031a0 <boot_target_get_startup_mode+0xac>
        //  Go to Bootloader Mode if no valid app exists.
        debug_println("----bootloader mode (no app)");
 800314e:	4821      	ldr	r0, [pc, #132]	; (80031d4 <boot_target_get_startup_mode+0xe0>)
 8003150:	f7ff fba6 	bl	80028a0 <debug_println>
        startup_mode = BOOTLOADER_MODE;
 8003154:	2302      	movs	r3, #2
    } else {
        //  Else go to Application Mode.
        debug_print("----application mode"); debug_println((forced_startup_mode == APPLICATION_MODE) ? " (forced)" : "");
        startup_mode = APPLICATION_MODE;
 8003156:	7023      	strb	r3, [r4, #0]
 8003158:	e019      	b.n	800318e <boot_target_get_startup_mode+0x9a>
    debug_print("app missing "); debug_printhex_unsigned((size_t) APP_BASE_ADDRESS);
 800315a:	481f      	ldr	r0, [pc, #124]	; (80031d8 <boot_target_get_startup_mode+0xe4>)
 800315c:	f7ff fbbd 	bl	80028da <debug_print>
 8003160:	4638      	mov	r0, r7
 8003162:	f7ff fbec 	bl	800293e <debug_printhex_unsigned>
    debug_print(" = "); debug_printhex_unsigned(first_word); debug_println("");
 8003166:	481d      	ldr	r0, [pc, #116]	; (80031dc <boot_target_get_startup_mode+0xe8>)
 8003168:	f7ff fbb7 	bl	80028da <debug_print>
 800316c:	4630      	mov	r0, r6
 800316e:	f7ff fbe6 	bl	800293e <debug_printhex_unsigned>
 8003172:	481b      	ldr	r0, [pc, #108]	; (80031e0 <boot_target_get_startup_mode+0xec>)
 8003174:	f7ff fb94 	bl	80028a0 <debug_println>
 8003178:	e7d1      	b.n	800311e <boot_target_get_startup_mode+0x2a>
        case (int) CMD_BASE: forced_startup_mode = BASELOADER_MODE; backup_write(BKP0, CMD_BOOT); break;  //  Reboot as bootloader to complete.
 800317a:	2501      	movs	r5, #1
 800317c:	2000      	movs	r0, #0
 800317e:	4919      	ldr	r1, [pc, #100]	; (80031e4 <boot_target_get_startup_mode+0xf0>)
 8003180:	7035      	strb	r5, [r6, #0]
 8003182:	f001 f8b9 	bl	80042f8 <backup_write>
        debug_println("----baseloader mode (forced)");
 8003186:	4818      	ldr	r0, [pc, #96]	; (80031e8 <boot_target_get_startup_mode+0xf4>)
        debug_println("----bootloader mode (forced)");
 8003188:	f7ff fb8a 	bl	80028a0 <debug_println>
        startup_mode = BOOTLOADER_MODE;
 800318c:	7025      	strb	r5, [r4, #0]
    }
    return startup_mode;
 800318e:	7825      	ldrb	r5, [r4, #0]
}
 8003190:	4628      	mov	r0, r5
 8003192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case (int) CMD_BOOT: forced_startup_mode = BOOTLOADER_MODE; break;
 8003194:	2502      	movs	r5, #2
        debug_println("----bootloader mode (forced)");
 8003196:	4815      	ldr	r0, [pc, #84]	; (80031ec <boot_target_get_startup_mode+0xf8>)
        case (int) CMD_BOOT: forced_startup_mode = BOOTLOADER_MODE; break;
 8003198:	7035      	strb	r5, [r6, #0]
 800319a:	e7f5      	b.n	8003188 <boot_target_get_startup_mode+0x94>
        default:             forced_startup_mode = UNKNOWN_MODE; break;
 800319c:	2300      	movs	r3, #0
 800319e:	e7d4      	b.n	800314a <boot_target_get_startup_mode+0x56>
        debug_print("----application mode"); debug_println((forced_startup_mode == APPLICATION_MODE) ? " (forced)" : "");
 80031a0:	4813      	ldr	r0, [pc, #76]	; (80031f0 <boot_target_get_startup_mode+0xfc>)
 80031a2:	f7ff fb9a 	bl	80028da <debug_print>
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <boot_target_get_startup_mode+0xec>)
 80031a8:	7830      	ldrb	r0, [r6, #0]
 80031aa:	4a12      	ldr	r2, [pc, #72]	; (80031f4 <boot_target_get_startup_mode+0x100>)
 80031ac:	2803      	cmp	r0, #3
 80031ae:	bf0c      	ite	eq
 80031b0:	4610      	moveq	r0, r2
 80031b2:	4618      	movne	r0, r3
 80031b4:	f7ff fb74 	bl	80028a0 <debug_println>
        startup_mode = APPLICATION_MODE;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e7cc      	b.n	8003156 <boot_target_get_startup_mode+0x62>
 80031bc:	20000662 	.word	0x20000662
 80031c0:	08007400 	.word	0x08007400
 80031c4:	080047ff 	.word	0x080047ff
 80031c8:	45534142 	.word	0x45534142
 80031cc:	20000661 	.word	0x20000661
 80031d0:	3f82722a 	.word	0x3f82722a
 80031d4:	08004851 	.word	0x08004851
 80031d8:	0800480a 	.word	0x0800480a
 80031dc:	080044c8 	.word	0x080044c8
 80031e0:	0800459e 	.word	0x0800459e
 80031e4:	544f4f42 	.word	0x544f4f42
 80031e8:	08004817 	.word	0x08004817
 80031ec:	08004834 	.word	0x08004834
 80031f0:	0800486e 	.word	0x0800486e
 80031f4:	0800482a 	.word	0x0800482a

080031f8 <boot_target_set_led>:
}

void boot_target_set_led(int on) {
#if HAVE_LED
        if ((on && LED_OPEN_DRAIN) || (!on && !LED_OPEN_DRAIN)) {
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
 80031f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
        if ((on && LED_OPEN_DRAIN) || (!on && !LED_OPEN_DRAIN)) {
 80031fc:	b110      	cbz	r0, 8003204 <boot_target_set_led+0xc>
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
 80031fe:	4803      	ldr	r0, [pc, #12]	; (800320c <boot_target_set_led+0x14>)
 8003200:	f7fe bc7b 	b.w	8001afa <gpio_clear>
        } else {
            gpio_set(LED_GPIO_PORT, LED_GPIO_PIN);
 8003204:	4801      	ldr	r0, [pc, #4]	; (800320c <boot_target_set_led+0x14>)
 8003206:	f7fe bc76 	b.w	8001af6 <gpio_set>
 800320a:	bf00      	nop
 800320c:	40011000 	.word	0x40011000

08003210 <boot_target_gpio_setup>:
    for (int i = 0; i < us*10; i++) {
        __asm__("nop");
    }
}

void boot_target_gpio_setup(void) {
 8003210:	b508      	push	{r3, lr}
    /* Enable GPIO and USB clocks */
    rcc_periph_clock_enable(RCC_GPIOA);  //  USB on PA11, PA12.
 8003212:	f240 3002 	movw	r0, #770	; 0x302
 8003216:	f7fe fc77 	bl	8001b08 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOB);
 800321a:	f240 3003 	movw	r0, #771	; 0x303
 800321e:	f7fe fc73 	bl	8001b08 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOC);  //  LED on PC13.
 8003222:	f44f 7041 	mov.w	r0, #772	; 0x304
 8003226:	f7fe fc6f 	bl	8001b08 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_USB);
 800322a:	f240 3097 	movw	r0, #919	; 0x397
 800322e:	f7fe fc6b 	bl	8001b08 <rcc_periph_clock_enable>
    {
        const uint8_t mode = GPIO_MODE_OUTPUT_10_MHZ;
        const uint8_t conf = (LED_OPEN_DRAIN ? GPIO_CNF_OUTPUT_OPENDRAIN
                                             : GPIO_CNF_OUTPUT_PUSHPULL);
        if (LED_OPEN_DRAIN) {
            gpio_set(LED_GPIO_PORT, LED_GPIO_PIN);
 8003232:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003236:	480f      	ldr	r0, [pc, #60]	; (8003274 <boot_target_gpio_setup+0x64>)
 8003238:	f7fe fc5d 	bl	8001af6 <gpio_set>
        } else {
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
        }
        gpio_set_mode(LED_GPIO_PORT, mode, conf, LED_GPIO_PIN);
 800323c:	2201      	movs	r2, #1
 800323e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003242:	4611      	mov	r1, r2
 8003244:	480b      	ldr	r0, [pc, #44]	; (8003274 <boot_target_gpio_setup+0x64>)
 8003246:	f7fe fc25 	bl	8001a94 <gpio_set_mode>
        gpio_set_mode(USB_PULLUP_GPIO_PORT, mode, conf, USB_PULLUP_GPIO_PIN);
    }
#else
    {
        /* Drive the USB DP pin to override the pull-up */
        gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_10_MHZ,
 800324a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800324e:	2200      	movs	r2, #0
 8003250:	2101      	movs	r1, #1
 8003252:	4809      	ldr	r0, [pc, #36]	; (8003278 <boot_target_gpio_setup+0x68>)
 8003254:	f7fe fc1e 	bl	8001a94 <gpio_set_mode>
    }
#endif

    // TFT
    // RST
    gpio_clear(GPIOC, (1 << 4));
 8003258:	2110      	movs	r1, #16
 800325a:	4806      	ldr	r0, [pc, #24]	; (8003274 <boot_target_gpio_setup+0x64>)
 800325c:	f7fe fc4d 	bl	8001afa <gpio_clear>
 8003260:	4b06      	ldr	r3, [pc, #24]	; (800327c <boot_target_gpio_setup+0x6c>)
        __asm__("nop");
 8003262:	bf00      	nop
    for (int i = 0; i < us*10; i++) {
 8003264:	3b01      	subs	r3, #1
 8003266:	d1fc      	bne.n	8003262 <boot_target_gpio_setup+0x52>
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <boot_target_gpio_setup+0x6c>)
        __asm__("nop");
 800326a:	bf00      	nop
    for (int i = 0; i < us*10; i++) {
 800326c:	3b01      	subs	r3, #1
 800326e:	d1fc      	bne.n	800326a <boot_target_gpio_setup+0x5a>
    sleep_us(20000);
    //gpio_set(GPIOC, (1 << 4));
    sleep_us(20000);
}
 8003270:	bd08      	pop	{r3, pc}
 8003272:	bf00      	nop
 8003274:	40011000 	.word	0x40011000
 8003278:	40010800 	.word	0x40010800
 800327c:	00030d40 	.word	0x00030d40

08003280 <boot_target_usb_init>:

const usbd_driver* boot_target_usb_init(void) {
 8003280:	b508      	push	{r3, lr}
    rcc_periph_reset_pulse(RST_USB);
 8003282:	f240 2017 	movw	r0, #535	; 0x217
 8003286:	f7fe fc4c 	bl	8001b22 <rcc_periph_reset_pulse>
    } else {
        gpio_clear(USB_PULLUP_GPIO_PORT, USB_PULLUP_GPIO_PIN);
    }
#else
    /* Override hard-wired USB pullup to disconnect and reconnect */
    gpio_clear(GPIOA, GPIO12);
 800328a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800328e:	4804      	ldr	r0, [pc, #16]	; (80032a0 <boot_target_usb_init+0x20>)
 8003290:	f7fe fc33 	bl	8001afa <gpio_clear>
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <boot_target_usb_init+0x24>)
    int i;
    for (i = 0; i < 800000; i++) {
        __asm__("nop");
 8003296:	bf00      	nop
    for (i = 0; i < 800000; i++) {
 8003298:	3b01      	subs	r3, #1
 800329a:	d1fc      	bne.n	8003296 <boot_target_usb_init+0x16>
    }
#endif

    return &st_usbfs_v1_usb_driver;
}
 800329c:	4802      	ldr	r0, [pc, #8]	; (80032a8 <boot_target_usb_init+0x28>)
 800329e:	bd08      	pop	{r3, pc}
 80032a0:	40010800 	.word	0x40010800
 80032a4:	000c3500 	.word	0x000c3500
 80032a8:	08004524 	.word	0x08004524

080032ac <boot_target_set_restart_callback>:

static restart_callback_type *restart_callback_func = NULL;

void boot_target_set_restart_callback(restart_callback_type *func) {
 80032ac:	b510      	push	{r4, lr}
 80032ae:	4604      	mov	r4, r0
    //  Call this function when we need to restart.  Used in Application Mode only.
    debug_print("set restart callback "); debug_printhex_unsigned((size_t) func); debug_println("");
 80032b0:	4805      	ldr	r0, [pc, #20]	; (80032c8 <boot_target_set_restart_callback+0x1c>)
 80032b2:	f7ff fb12 	bl	80028da <debug_print>
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7ff fb41 	bl	800293e <debug_printhex_unsigned>
    restart_callback_func = func;
}
 80032bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    debug_print("set restart callback "); debug_printhex_unsigned((size_t) func); debug_println("");
 80032c0:	4802      	ldr	r0, [pc, #8]	; (80032cc <boot_target_set_restart_callback+0x20>)
 80032c2:	f7ff baed 	b.w	80028a0 <debug_println>
 80032c6:	bf00      	nop
 80032c8:	080048ac 	.word	0x080048ac
 80032cc:	0800459e 	.word	0x0800459e

080032d0 <boot_target_manifest_app>:

void boot_target_manifest_app(void) {
 80032d0:	b508      	push	{r3, lr}
    //  Restart into Application Mode to run the application.
    debug_println("boot app");
 80032d2:	4805      	ldr	r0, [pc, #20]	; (80032e8 <boot_target_manifest_app+0x18>)
 80032d4:	f7ff fae4 	bl	80028a0 <debug_println>
    debug_force_flush(); ////
 80032d8:	f7ff fa7e 	bl	80027d8 <debug_force_flush>
    backup_write(BKP0, CMD_APP);
 80032dc:	4903      	ldr	r1, [pc, #12]	; (80032ec <boot_target_manifest_app+0x1c>)
 80032de:	2000      	movs	r0, #0
 80032e0:	f001 f80a 	bl	80042f8 <backup_write>
    scb_reset_system();  //  Restart now.
 80032e4:	f7fe f930 	bl	8001548 <scb_reset_system>
 80032e8:	08004883 	.word	0x08004883
 80032ec:	3f82722a 	.word	0x3f82722a

080032f0 <boot_target_manifest_baseloader>:
}

void boot_target_manifest_baseloader(void) {
 80032f0:	b508      	push	{r3, lr}
    //  Restart into Baseloader Mode to update the bootloader ROM.
    debug_println("boot baseloader"); 
 80032f2:	4805      	ldr	r0, [pc, #20]	; (8003308 <boot_target_manifest_baseloader+0x18>)
 80032f4:	f7ff fad4 	bl	80028a0 <debug_println>
    debug_force_flush(); ////
 80032f8:	f7ff fa6e 	bl	80027d8 <debug_force_flush>
    backup_write(BKP0, CMD_BASE);
 80032fc:	4903      	ldr	r1, [pc, #12]	; (800330c <boot_target_manifest_baseloader+0x1c>)
 80032fe:	2000      	movs	r0, #0
 8003300:	f000 fffa 	bl	80042f8 <backup_write>
    scb_reset_system();  //  Restart now.
 8003304:	f7fe f920 	bl	8001548 <scb_reset_system>
 8003308:	0800488c 	.word	0x0800488c
 800330c:	45534142 	.word	0x45534142

08003310 <boot_target_manifest_bootloader>:
}

void boot_target_manifest_bootloader(void) {
 8003310:	b508      	push	{r3, lr}
    //  Restart into Bootloader Mode to run the bootloader.
    debug_println("boot bootloader"); 
 8003312:	4805      	ldr	r0, [pc, #20]	; (8003328 <boot_target_manifest_bootloader+0x18>)
 8003314:	f7ff fac4 	bl	80028a0 <debug_println>
    debug_force_flush(); ////
 8003318:	f7ff fa5e 	bl	80027d8 <debug_force_flush>
    backup_write(BKP0, CMD_BOOT);
 800331c:	4903      	ldr	r1, [pc, #12]	; (800332c <boot_target_manifest_bootloader+0x1c>)
 800331e:	2000      	movs	r0, #0
 8003320:	f000 ffea 	bl	80042f8 <backup_write>
    scb_reset_system();  //  Restart now.
 8003324:	f7fe f910 	bl	8001548 <scb_reset_system>
 8003328:	0800489c 	.word	0x0800489c
 800332c:	544f4f42 	.word	0x544f4f42

08003330 <hf2_connected>:
    return hf2_transmit(usbd_dev, buf, len);
}

static void hf2_connected(void) {
    //  Called when HF2 is connected.  We set the HF2 port as a logger output.
    if (hf2_is_connected) { return; }
 8003330:	4b02      	ldr	r3, [pc, #8]	; (800333c <hf2_connected+0xc>)
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	b90a      	cbnz	r2, 800333a <hf2_connected+0xa>
    hf2_is_connected = 1;
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
    ////logger_add_output(usb_hf2_transmit);
}
 800333a:	4770      	bx	lr
 800333c:	20000664 	.word	0x20000664

08003340 <usb_cdc_transmit>:
    if (!usbd_dev || !cdc_is_connected) { return -1; }
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <usb_cdc_transmit+0x1c>)
	uint16_t len) {
 8003342:	460a      	mov	r2, r1
    if (!usbd_dev || !cdc_is_connected) { return -1; }
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	b133      	cbz	r3, 8003356 <usb_cdc_transmit+0x16>
 8003348:	4905      	ldr	r1, [pc, #20]	; (8003360 <usb_cdc_transmit+0x20>)
 800334a:	7809      	ldrb	r1, [r1, #0]
 800334c:	b119      	cbz	r1, 8003356 <usb_cdc_transmit+0x16>
    return cdcadm_transmit(usbd_dev, buf, len);
 800334e:	4601      	mov	r1, r0
 8003350:	4618      	mov	r0, r3
 8003352:	f000 bbbd 	b.w	8003ad0 <cdcadm_transmit>
}
 8003356:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800335a:	4770      	bx	lr
 800335c:	20000520 	.word	0x20000520
 8003360:	20000663 	.word	0x20000663

08003364 <sof_callback>:
static void sof_callback(void) {
 8003364:	b508      	push	{r3, lr}
    last_frame_time = millis();
 8003366:	f7ff fc03 	bl	8002b70 <millis>
 800336a:	4b01      	ldr	r3, [pc, #4]	; (8003370 <sof_callback+0xc>)
 800336c:	6018      	str	r0, [r3, #0]
}
 800336e:	bd08      	pop	{r3, pc}
 8003370:	2000051c 	.word	0x2000051c

08003374 <cdc_connected>:
    if (cdc_is_connected) { return; }
 8003374:	4b04      	ldr	r3, [pc, #16]	; (8003388 <cdc_connected+0x14>)
 8003376:	781a      	ldrb	r2, [r3, #0]
 8003378:	b922      	cbnz	r2, 8003384 <cdc_connected+0x10>
    cdc_is_connected = 1;
 800337a:	2201      	movs	r2, #1
    logger_add_output(usb_cdc_transmit);
 800337c:	4803      	ldr	r0, [pc, #12]	; (800338c <cdc_connected+0x18>)
    cdc_is_connected = 1;
 800337e:	701a      	strb	r2, [r3, #0]
    logger_add_output(usb_cdc_transmit);
 8003380:	f7ff b9c6 	b.w	8002710 <logger_add_output>
}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000663 	.word	0x20000663
 800338c:	08003341 	.word	0x08003341

08003390 <set_aggregate_callback>:
	return USBD_REQ_NEXT_CALLBACK;
}

static void set_aggregate_callback(
  usbd_device *usbd_dev,
  uint16_t wValue) {
 8003390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //  This callback is called when the device is updated.  We set our control callback.
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
 8003392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003396:	4299      	cmp	r1, r3
  uint16_t wValue) {
 8003398:	4605      	mov	r5, r0
 800339a:	460e      	mov	r6, r1
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
 800339c:	d00a      	beq.n	80033b4 <set_aggregate_callback+0x24>
        //  Call the config functions before setting our callback.
        //  debug_println("set_aggregate_callback"); ////
        int i;
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 800339e:	2400      	movs	r4, #0
            if (!config_callback[i]) { break; }
 80033a0:	4f0c      	ldr	r7, [pc, #48]	; (80033d4 <set_aggregate_callback+0x44>)
 80033a2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 80033a6:	b12b      	cbz	r3, 80033b4 <set_aggregate_callback+0x24>
            (config_callback[i])(usbd_dev, wValue);
 80033a8:	4631      	mov	r1, r6
 80033aa:	4628      	mov	r0, r5
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80033ac:	3401      	adds	r4, #1
            (config_callback[i])(usbd_dev, wValue);
 80033ae:	4798      	blx	r3
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80033b0:	2c0a      	cmp	r4, #10
 80033b2:	d1f6      	bne.n	80033a2 <set_aggregate_callback+0x12>
        }
    }
    //  Set our callback.
	int status;
        status = usbd_register_control_callback(
 80033b4:	2200      	movs	r2, #0
 80033b6:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <set_aggregate_callback+0x48>)
 80033b8:	4611      	mov	r1, r2
 80033ba:	4628      	mov	r0, r5
 80033bc:	f7fe fc9a 	bl	8001cf4 <usbd_register_control_callback>
		usbd_dev,
        0,  //  Register for all notifications.
        0,
		aggregate_callback);
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 80033c0:	2800      	cmp	r0, #0
 80033c2:	da06      	bge.n	80033d2 <set_aggregate_callback+0x42>
 80033c4:	4805      	ldr	r0, [pc, #20]	; (80033dc <set_aggregate_callback+0x4c>)
 80033c6:	f7ff fa6b 	bl	80028a0 <debug_println>
}
 80033ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 80033ce:	f7ff ba81 	b.w	80028d4 <debug_flush>
}
 80033d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033d4:	200004a0 	.word	0x200004a0
 80033d8:	080036ed 	.word	0x080036ed
 80033dc:	08004a53 	.word	0x08004a53

080033e0 <usb_setup>:
usbd_device* usb_setup(void) {
 80033e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const usbd_driver* driver = boot_target_usb_init();
 80033e2:	f7ff ff4d 	bl	8003280 <boot_target_usb_init>
    usbd_dev = usbd_init(driver, &dev, &config, 
 80033e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033ea:	9302      	str	r3, [sp, #8]
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <usb_setup+0x78>)
 80033ee:	4a1b      	ldr	r2, [pc, #108]	; (800345c <usb_setup+0x7c>)
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	2309      	movs	r3, #9
 80033f4:	491a      	ldr	r1, [pc, #104]	; (8003460 <usb_setup+0x80>)
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <usb_setup+0x84>)
 80033fa:	f7fe f80b 	bl	8001414 <usbd_init>
 80033fe:	4c1a      	ldr	r4, [pc, #104]	; (8003468 <usb_setup+0x88>)
    usbd_register_sof_callback(usbd_dev, sof_callback);
 8003400:	491a      	ldr	r1, [pc, #104]	; (800346c <usb_setup+0x8c>)
    usbd_dev = usbd_init(driver, &dev, &config, 
 8003402:	6020      	str	r0, [r4, #0]
    usbd_register_sof_callback(usbd_dev, sof_callback);
 8003404:	f7fe fb9e 	bl	8001b44 <usbd_register_sof_callback>
    cdc_setup(usbd_dev, cdc_connected);
 8003408:	4919      	ldr	r1, [pc, #100]	; (8003470 <usb_setup+0x90>)
 800340a:	6820      	ldr	r0, [r4, #0]
 800340c:	f000 fbb2 	bl	8003b74 <cdc_setup>
    hf2_setup(usbd_dev, hf2_connected);
 8003410:	4918      	ldr	r1, [pc, #96]	; (8003474 <usb_setup+0x94>)
 8003412:	6820      	ldr	r0, [r4, #0]
 8003414:	f000 ff30 	bl	8004278 <hf2_setup>
	usb21_setup(usbd_dev, &bos_descriptor);
 8003418:	4917      	ldr	r1, [pc, #92]	; (8003478 <usb_setup+0x98>)
 800341a:	6820      	ldr	r0, [r4, #0]
 800341c:	f001 f80e 	bl	800443c <usb21_setup>
	webusb_setup(usbd_dev, origin_url);
 8003420:	4916      	ldr	r1, [pc, #88]	; (800347c <usb_setup+0x9c>)
 8003422:	6820      	ldr	r0, [r4, #0]
 8003424:	f000 fa12 	bl	800384c <webusb_setup>
	winusb_setup(usbd_dev, INTF_HF2);
 8003428:	2100      	movs	r1, #0
 800342a:	6820      	ldr	r0, [r4, #0]
 800342c:	f000 fab6 	bl	800399c <winusb_setup>
	int status = usbd_register_set_config_callback(usbd_dev, set_aggregate_callback);
 8003430:	4913      	ldr	r1, [pc, #76]	; (8003480 <usb_setup+0xa0>)
 8003432:	6820      	ldr	r0, [r4, #0]
 8003434:	f7fe ff20 	bl	8002278 <usbd_register_set_config_callback>
    if (status < 0) { debug_println("*** usb_setup failed"); debug_flush(); }
 8003438:	2800      	cmp	r0, #0
 800343a:	da04      	bge.n	8003446 <usb_setup+0x66>
 800343c:	4811      	ldr	r0, [pc, #68]	; (8003484 <usb_setup+0xa4>)
 800343e:	f7ff fa2f 	bl	80028a0 <debug_println>
 8003442:	f7ff fa47 	bl	80028d4 <debug_flush>
    set_aggregate_callback(usbd_dev, (uint16_t) -1);
 8003446:	6820      	ldr	r0, [r4, #0]
 8003448:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800344c:	f7ff ffa0 	bl	8003390 <set_aggregate_callback>
}
 8003450:	6820      	ldr	r0, [r4, #0]
 8003452:	b004      	add	sp, #16
 8003454:	bd10      	pop	{r4, pc}
 8003456:	bf00      	nop
 8003458:	20000560 	.word	0x20000560
 800345c:	08004961 	.word	0x08004961
 8003460:	080049a1 	.word	0x080049a1
 8003464:	20000068 	.word	0x20000068
 8003468:	20000520 	.word	0x20000520
 800346c:	08003365 	.word	0x08003365
 8003470:	08003375 	.word	0x08003375
 8003474:	08003331 	.word	0x08003331
 8003478:	08004919 	.word	0x08004919
 800347c:	08004afa 	.word	0x08004afa
 8003480:	08003391 	.word	0x08003391
 8003484:	08004b13 	.word	0x08004b13

08003488 <set_usb_busy>:
void set_usb_busy(void) {
 8003488:	b508      	push	{r3, lr}
    last_busy_time = millis();
 800348a:	f7ff fb71 	bl	8002b70 <millis>
 800348e:	4b03      	ldr	r3, [pc, #12]	; (800349c <set_usb_busy+0x14>)
 8003490:	6018      	str	r0, [r3, #0]
    debug_print(".");
 8003492:	4803      	ldr	r0, [pc, #12]	; (80034a0 <set_usb_busy+0x18>)
}
 8003494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    debug_print(".");
 8003498:	f7ff ba1f 	b.w	80028da <debug_print>
 800349c:	20000518 	.word	0x20000518
 80034a0:	080045d8 	.word	0x080045d8

080034a4 <get_usb_status>:
volatile int get_usb_status(void) { 
 80034a4:	b513      	push	{r0, r1, r4, lr}
    if (last_busy_time == 0) { return 0; }
 80034a6:	4c09      	ldr	r4, [pc, #36]	; (80034cc <get_usb_status+0x28>)
 80034a8:	6820      	ldr	r0, [r4, #0]
 80034aa:	b160      	cbz	r0, 80034c6 <get_usb_status+0x22>
    volatile uint32_t now = millis();
 80034ac:	f7ff fb60 	bl	8002b70 <millis>
 80034b0:	9001      	str	r0, [sp, #4]
    if (now < (last_busy_time + BUSY_DURATION)) { 
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	9a01      	ldr	r2, [sp, #4]
 80034b6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80034ba:	3308      	adds	r3, #8
 80034bc:	4293      	cmp	r3, r2
    last_busy_time = 0;
 80034be:	bf96      	itet	ls
 80034c0:	2000      	movls	r0, #0
        return 1; 
 80034c2:	2001      	movhi	r0, #1
    last_busy_time = 0;
 80034c4:	6020      	strls	r0, [r4, #0]
}
 80034c6:	b002      	add	sp, #8
 80034c8:	bd10      	pop	{r4, pc}
 80034ca:	bf00      	nop
 80034cc:	20000518 	.word	0x20000518

080034d0 <aggregate_register_config_callback>:
	usbd_set_config_callback callback) {
 80034d0:	b508      	push	{r3, lr}
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80034d2:	2300      	movs	r3, #0
		if (config_callback[i]) {
 80034d4:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <aggregate_register_config_callback+0x30>)
 80034d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80034da:	b160      	cbz	r0, 80034f6 <aggregate_register_config_callback+0x26>
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 80034dc:	4288      	cmp	r0, r1
 80034de:	d00d      	beq.n	80034fc <aggregate_register_config_callback+0x2c>
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80034e0:	3301      	adds	r3, #1
 80034e2:	2b0a      	cmp	r3, #10
 80034e4:	d1f7      	bne.n	80034d6 <aggregate_register_config_callback+0x6>
    debug_println("*** ERROR: Too many config callbacks"); debug_flush();
 80034e6:	4807      	ldr	r0, [pc, #28]	; (8003504 <aggregate_register_config_callback+0x34>)
 80034e8:	f7ff f9da 	bl	80028a0 <debug_println>
 80034ec:	f7ff f9f2 	bl	80028d4 <debug_flush>
	return -1;
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034f4:	e001      	b.n	80034fa <aggregate_register_config_callback+0x2a>
		config_callback[i] = callback;
 80034f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80034fa:	bd08      	pop	{r3, pc}
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 80034fc:	2000      	movs	r0, #0
 80034fe:	e7fc      	b.n	80034fa <aggregate_register_config_callback+0x2a>
 8003500:	200004a0 	.word	0x200004a0
 8003504:	080048f4 	.word	0x080048f4

08003508 <aggregate_register_callback>:
    usbd_control_callback callback) {
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 800350a:	2400      	movs	r4, #0
 800350c:	4e0f      	ldr	r6, [pc, #60]	; (800354c <aggregate_register_callback+0x44>)
 800350e:	eb06 05c4 	add.w	r5, r6, r4, lsl #3
		if (control_callback[i].cb) { 
 8003512:	6868      	ldr	r0, [r5, #4]
 8003514:	b198      	cbz	r0, 800353e <aggregate_register_callback+0x36>
            if (control_callback[i].type == type &&
 8003516:	f816 7034 	ldrb.w	r7, [r6, r4, lsl #3]
 800351a:	428f      	cmp	r7, r1
 800351c:	d104      	bne.n	8003528 <aggregate_register_callback+0x20>
 800351e:	786d      	ldrb	r5, [r5, #1]
 8003520:	4295      	cmp	r5, r2
 8003522:	d101      	bne.n	8003528 <aggregate_register_callback+0x20>
                control_callback[i].type_mask == type_mask &&
 8003524:	4298      	cmp	r0, r3
 8003526:	d00f      	beq.n	8003548 <aggregate_register_callback+0x40>
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8003528:	3401      	adds	r4, #1
 800352a:	2c0a      	cmp	r4, #10
 800352c:	d1ef      	bne.n	800350e <aggregate_register_callback+0x6>
    debug_println("*** ERROR: Too many control callbacks"); debug_flush();
 800352e:	4808      	ldr	r0, [pc, #32]	; (8003550 <aggregate_register_callback+0x48>)
 8003530:	f7ff f9b6 	bl	80028a0 <debug_println>
 8003534:	f7ff f9ce 	bl	80028d4 <debug_flush>
	return -1;
 8003538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800353c:	e003      	b.n	8003546 <aggregate_register_callback+0x3e>
		control_callback[i].type = type;
 800353e:	f806 1034 	strb.w	r1, [r6, r4, lsl #3]
		control_callback[i].type_mask = type_mask;
 8003542:	706a      	strb	r2, [r5, #1]
		control_callback[i].cb = callback;
 8003544:	606b      	str	r3, [r5, #4]
}
 8003546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    return 0;
 8003548:	2000      	movs	r0, #0
 800354a:	e7fc      	b.n	8003546 <aggregate_register_callback+0x3e>
 800354c:	200004c8 	.word	0x200004c8
 8003550:	080048ce 	.word	0x080048ce

08003554 <usb_set_serial_number>:

void usb_set_serial_number(const char* serial) {
 8003554:	b510      	push	{r4, lr}
    serial_number[0] = '\0';
 8003556:	2400      	movs	r4, #0
 8003558:	4b04      	ldr	r3, [pc, #16]	; (800356c <usb_set_serial_number+0x18>)
    if (serial) {
 800355a:	4601      	mov	r1, r0
    serial_number[0] = '\0';
 800355c:	701c      	strb	r4, [r3, #0]
    if (serial) {
 800355e:	b120      	cbz	r0, 800356a <usb_set_serial_number+0x16>
        strncpy(serial_number, serial, USB_SERIAL_NUM_LENGTH);
 8003560:	2218      	movs	r2, #24
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff f88e 	bl	8002684 <strncpy>
        serial_number[USB_SERIAL_NUM_LENGTH] = '\0';
 8003568:	7604      	strb	r4, [r0, #24]
    }
}
 800356a:	bd10      	pop	{r4, pc}
 800356c:	20000665 	.word	0x20000665

08003570 <dump_buffer>:

void dump_buffer(const char *msg, const uint8_t *buf, int len) {
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003572:	4615      	mov	r5, r2
 8003574:	460e      	mov	r6, r1
    debug_print(msg); debug_print(" ");
 8003576:	f7ff f9b0 	bl	80028da <debug_print>
 800357a:	480d      	ldr	r0, [pc, #52]	; (80035b0 <dump_buffer+0x40>)
 800357c:	f7ff f9ad 	bl	80028da <debug_print>
    debug_print_unsigned(len); debug_print(" / ");
 8003580:	4628      	mov	r0, r5
 8003582:	f7ff f9b9 	bl	80028f8 <debug_print_unsigned>
 8003586:	480b      	ldr	r0, [pc, #44]	; (80035b4 <dump_buffer+0x44>)
 8003588:	f7ff f9a7 	bl	80028da <debug_print>
    int i;
    for (i = 0; i < len; i++) { 
 800358c:	4634      	mov	r4, r6
        debug_printhex(buf[i]); debug_print(" "); 
 800358e:	4f08      	ldr	r7, [pc, #32]	; (80035b0 <dump_buffer+0x40>)
    for (i = 0; i < len; i++) { 
 8003590:	1ba3      	subs	r3, r4, r6
 8003592:	429d      	cmp	r5, r3
 8003594:	dc04      	bgt.n	80035a0 <dump_buffer+0x30>
    }
    debug_println("");
}
 8003596:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    debug_println("");
 800359a:	4807      	ldr	r0, [pc, #28]	; (80035b8 <dump_buffer+0x48>)
 800359c:	f7ff b980 	b.w	80028a0 <debug_println>
        debug_printhex(buf[i]); debug_print(" "); 
 80035a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80035a4:	f7ff f9aa 	bl	80028fc <debug_printhex>
 80035a8:	4638      	mov	r0, r7
 80035aa:	f7ff f996 	bl	80028da <debug_print>
 80035ae:	e7ef      	b.n	8003590 <dump_buffer+0x20>
 80035b0:	08004a14 	.word	0x08004a14
 80035b4:	080049b3 	.word	0x080049b3
 80035b8:	0800459e 	.word	0x0800459e

080035bc <dump_usb_request>:

void dump_usb_request(const char *msg, struct usb_setup_data *req) {
 80035bc:	b570      	push	{r4, r5, r6, lr}
 80035be:	460c      	mov	r4, r1
    debug_print(msg);
 80035c0:	f7ff f98b 	bl	80028da <debug_print>
    ////debug_println(""); return; ////

    uint8_t desc_type = usb_descriptor_type(req->wValue);
    uint8_t desc_index = usb_descriptor_index(req->wValue);
    debug_print(" typ "); debug_printhex(req->bmRequestType);
 80035c4:	4837      	ldr	r0, [pc, #220]	; (80036a4 <dump_usb_request+0xe8>)
    uint8_t desc_type = usb_descriptor_type(req->wValue);
 80035c6:	8865      	ldrh	r5, [r4, #2]
    debug_print(" typ "); debug_printhex(req->bmRequestType);
 80035c8:	f7ff f987 	bl	80028da <debug_print>
 80035cc:	7820      	ldrb	r0, [r4, #0]
 80035ce:	f7ff f995 	bl	80028fc <debug_printhex>
    debug_print(", req "); debug_printhex(req->bRequest);
 80035d2:	4835      	ldr	r0, [pc, #212]	; (80036a8 <dump_usb_request+0xec>)
 80035d4:	f7ff f981 	bl	80028da <debug_print>
 80035d8:	7860      	ldrb	r0, [r4, #1]
 80035da:	f7ff f98f 	bl	80028fc <debug_printhex>
    debug_print(", val "); debug_printhex(req->wValue >> 8); debug_printhex(req->wValue & 0xff);
 80035de:	4833      	ldr	r0, [pc, #204]	; (80036ac <dump_usb_request+0xf0>)
 80035e0:	f7ff f97b 	bl	80028da <debug_print>
 80035e4:	8860      	ldrh	r0, [r4, #2]
	return wValue >> 8;
 80035e6:	0a2e      	lsrs	r6, r5, #8
    debug_print(", val "); debug_printhex(req->wValue >> 8); debug_printhex(req->wValue & 0xff);
 80035e8:	0a00      	lsrs	r0, r0, #8
 80035ea:	f7ff f987 	bl	80028fc <debug_printhex>
 80035ee:	8860      	ldrh	r0, [r4, #2]
 80035f0:	b2c0      	uxtb	r0, r0
 80035f2:	f7ff f983 	bl	80028fc <debug_printhex>
    debug_print(", idx "); debug_printhex(req->wIndex >> 8); debug_printhex(req->wIndex & 0xff);
 80035f6:	482e      	ldr	r0, [pc, #184]	; (80036b0 <dump_usb_request+0xf4>)
 80035f8:	f7ff f96f 	bl	80028da <debug_print>
 80035fc:	88a0      	ldrh	r0, [r4, #4]
 80035fe:	0a00      	lsrs	r0, r0, #8
 8003600:	f7ff f97c 	bl	80028fc <debug_printhex>
 8003604:	88a0      	ldrh	r0, [r4, #4]
 8003606:	b2c0      	uxtb	r0, r0
 8003608:	f7ff f978 	bl	80028fc <debug_printhex>
    debug_print(", len "); debug_printhex(req->wLength >> 8); debug_printhex(req->wLength & 0xff);
 800360c:	4829      	ldr	r0, [pc, #164]	; (80036b4 <dump_usb_request+0xf8>)
 800360e:	f7ff f964 	bl	80028da <debug_print>
 8003612:	88e0      	ldrh	r0, [r4, #6]
 8003614:	0a00      	lsrs	r0, r0, #8
 8003616:	f7ff f971 	bl	80028fc <debug_printhex>
 800361a:	88e0      	ldrh	r0, [r4, #6]
 800361c:	b2c0      	uxtb	r0, r0
 800361e:	f7ff f96d 	bl	80028fc <debug_printhex>
    ////debug_println(""); return; ////

    if (req->bmRequestType == 0x00 || req->bmRequestType == 0x80) {
 8003622:	7823      	ldrb	r3, [r4, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d032      	beq.n	800368e <dump_usb_request+0xd2>
 8003628:	2b80      	cmp	r3, #128	; 0x80
 800362a:	d121      	bne.n	8003670 <dump_usb_request+0xb4>
        //  Dump USB standard requests.
        if (req->bmRequestType == 0x80 && req->bRequest == 0x06) {
 800362c:	7863      	ldrb	r3, [r4, #1]
 800362e:	2b06      	cmp	r3, #6
 8003630:	d132      	bne.n	8003698 <dump_usb_request+0xdc>
            debug_print(", GET_DES");
 8003632:	4821      	ldr	r0, [pc, #132]	; (80036b8 <dump_usb_request+0xfc>)
 8003634:	f7ff f951 	bl	80028da <debug_print>
            switch(desc_type) {
 8003638:	1e73      	subs	r3, r6, #1
 800363a:	2b0e      	cmp	r3, #14
 800363c:	d80c      	bhi.n	8003658 <dump_usb_request+0x9c>
 800363e:	e8df f003 	tbb	[pc, r3]
 8003642:	1c08      	.short	0x1c08
 8003644:	0b22201e 	.word	0x0b22201e
 8003648:	0b0b0b0b 	.word	0x0b0b0b0b
 800364c:	0b0b0b0b 	.word	0x0b0b0b0b
 8003650:	24          	.byte	0x24
 8003651:	00          	.byte	0x00
                case 1: debug_print("_DEV"); break;
 8003652:	481a      	ldr	r0, [pc, #104]	; (80036bc <dump_usb_request+0x100>)
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x09) {
            debug_print(", SET_CFG    ");
        } else if (req->bmRequestType == 0x80 && req->bRequest == 0x09) {
            debug_print(", SET_CFG    ");
        } else {
            debug_print(",");
 8003654:	f7ff f941 	bl	80028da <debug_print>
        }
        debug_print(" t "); debug_printhex(desc_type); 	
 8003658:	4819      	ldr	r0, [pc, #100]	; (80036c0 <dump_usb_request+0x104>)
 800365a:	f7ff f93e 	bl	80028da <debug_print>
 800365e:	4630      	mov	r0, r6
 8003660:	f7ff f94c 	bl	80028fc <debug_printhex>
        debug_print(" i "); debug_printhex(desc_index); 	
 8003664:	4817      	ldr	r0, [pc, #92]	; (80036c4 <dump_usb_request+0x108>)
 8003666:	f7ff f938 	bl	80028da <debug_print>
 800366a:	b2e8      	uxtb	r0, r5
 800366c:	f7ff f946 	bl	80028fc <debug_printhex>
    }
    debug_println("");
}
 8003670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    debug_println("");
 8003674:	4814      	ldr	r0, [pc, #80]	; (80036c8 <dump_usb_request+0x10c>)
 8003676:	f7ff b913 	b.w	80028a0 <debug_println>
                case 2: debug_print("_CFG"); break;
 800367a:	4814      	ldr	r0, [pc, #80]	; (80036cc <dump_usb_request+0x110>)
 800367c:	e7ea      	b.n	8003654 <dump_usb_request+0x98>
                case 3: debug_print("_STR"); break;
 800367e:	4814      	ldr	r0, [pc, #80]	; (80036d0 <dump_usb_request+0x114>)
 8003680:	e7e8      	b.n	8003654 <dump_usb_request+0x98>
                case 4: debug_print("_INF"); break;
 8003682:	4814      	ldr	r0, [pc, #80]	; (80036d4 <dump_usb_request+0x118>)
 8003684:	e7e6      	b.n	8003654 <dump_usb_request+0x98>
                case 5: debug_print("_ENP"); break;
 8003686:	4814      	ldr	r0, [pc, #80]	; (80036d8 <dump_usb_request+0x11c>)
 8003688:	e7e4      	b.n	8003654 <dump_usb_request+0x98>
                case 15: debug_print("_BOS"); break;
 800368a:	4814      	ldr	r0, [pc, #80]	; (80036dc <dump_usb_request+0x120>)
 800368c:	e7e2      	b.n	8003654 <dump_usb_request+0x98>
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x05) {
 800368e:	7863      	ldrb	r3, [r4, #1]
 8003690:	2b05      	cmp	r3, #5
 8003692:	d101      	bne.n	8003698 <dump_usb_request+0xdc>
            debug_print(", SET_ADR    ");
 8003694:	4812      	ldr	r0, [pc, #72]	; (80036e0 <dump_usb_request+0x124>)
 8003696:	e7dd      	b.n	8003654 <dump_usb_request+0x98>
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x09) {
 8003698:	2b09      	cmp	r3, #9
            debug_print(", SET_CFG    ");
 800369a:	bf0c      	ite	eq
 800369c:	4811      	ldreq	r0, [pc, #68]	; (80036e4 <dump_usb_request+0x128>)
            debug_print(",");
 800369e:	4812      	ldrne	r0, [pc, #72]	; (80036e8 <dump_usb_request+0x12c>)
 80036a0:	e7d8      	b.n	8003654 <dump_usb_request+0x98>
 80036a2:	bf00      	nop
 80036a4:	080049b7 	.word	0x080049b7
 80036a8:	080049bd 	.word	0x080049bd
 80036ac:	080049c4 	.word	0x080049c4
 80036b0:	080049cb 	.word	0x080049cb
 80036b4:	080046c5 	.word	0x080046c5
 80036b8:	080049d2 	.word	0x080049d2
 80036bc:	080049dc 	.word	0x080049dc
 80036c0:	08004a18 	.word	0x08004a18
 80036c4:	08004a1c 	.word	0x08004a1c
 80036c8:	0800459e 	.word	0x0800459e
 80036cc:	080049e1 	.word	0x080049e1
 80036d0:	080049e6 	.word	0x080049e6
 80036d4:	080049eb 	.word	0x080049eb
 80036d8:	080049f0 	.word	0x080049f0
 80036dc:	080049f5 	.word	0x080049f5
 80036e0:	080049fa 	.word	0x080049fa
 80036e4:	08004a08 	.word	0x08004a08
 80036e8:	08004a16 	.word	0x08004a16

080036ec <aggregate_callback>:
	usbd_control_complete_callback *complete) {
 80036ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (req->bmRequestType == 0 && req->bRequest == 5) {
 80036f0:	780d      	ldrb	r5, [r1, #0]
	usbd_control_complete_callback *complete) {
 80036f2:	4607      	mov	r7, r0
 80036f4:	460c      	mov	r4, r1
 80036f6:	4690      	mov	r8, r2
 80036f8:	461e      	mov	r6, r3
 80036fa:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    if (req->bmRequestType == 0 && req->bRequest == 5) {
 80036fe:	b98d      	cbnz	r5, 8003724 <aggregate_callback+0x38>
 8003700:	784b      	ldrb	r3, [r1, #1]
 8003702:	2b05      	cmp	r3, #5
 8003704:	d10e      	bne.n	8003724 <aggregate_callback+0x38>
        set_usb_busy();
 8003706:	f7ff febf 	bl	8003488 <set_usb_busy>
        debug_println("SET_ADR");
 800370a:	481c      	ldr	r0, [pc, #112]	; (800377c <aggregate_callback+0x90>)
 800370c:	f7ff f8c8 	bl	80028a0 <debug_println>
        return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8003710:	4633      	mov	r3, r6
 8003712:	4642      	mov	r2, r8
 8003714:	4621      	mov	r1, r4
 8003716:	4638      	mov	r0, r7
        *len = 0;          //  Return an empty message.
 8003718:	8035      	strh	r5, [r6, #0]
}
 800371a:	b003      	add	sp, #12
 800371c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8003720:	f7fd bea0 	b.w	8001464 <_usbd_standard_request_device>
 8003724:	4d16      	ldr	r5, [pc, #88]	; (8003780 <aggregate_callback+0x94>)
 8003726:	f105 0a50 	add.w	sl, r5, #80	; 0x50
        if (control_callback[i].cb == NULL) { break; }
 800372a:	f8d5 b004 	ldr.w	fp, [r5, #4]
 800372e:	f1bb 0f00 	cmp.w	fp, #0
 8003732:	d008      	beq.n	8003746 <aggregate_callback+0x5a>
        if ((req->bmRequestType & control_callback[i].type_mask) == control_callback[i].type) {
 8003734:	7823      	ldrb	r3, [r4, #0]
 8003736:	7869      	ldrb	r1, [r5, #1]
 8003738:	782a      	ldrb	r2, [r5, #0]
 800373a:	400b      	ands	r3, r1
 800373c:	429a      	cmp	r2, r3
 800373e:	d010      	beq.n	8003762 <aggregate_callback+0x76>
 8003740:	3508      	adds	r5, #8
    for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8003742:	4555      	cmp	r5, sl
 8003744:	d1f1      	bne.n	800372a <aggregate_callback+0x3e>
    set_usb_busy();
 8003746:	f7ff fe9f 	bl	8003488 <set_usb_busy>
    if (!(req->bmRequestType == 0x80 && req->bRequest == 0x06)) {
 800374a:	7823      	ldrb	r3, [r4, #0]
 800374c:	2b80      	cmp	r3, #128	; 0x80
 800374e:	d102      	bne.n	8003756 <aggregate_callback+0x6a>
 8003750:	7863      	ldrb	r3, [r4, #1]
 8003752:	2b06      	cmp	r3, #6
 8003754:	d003      	beq.n	800375e <aggregate_callback+0x72>
	    dump_usb_request(">> ", req);
 8003756:	4621      	mov	r1, r4
 8003758:	480a      	ldr	r0, [pc, #40]	; (8003784 <aggregate_callback+0x98>)
 800375a:	f7ff ff2f 	bl	80035bc <dump_usb_request>
	return USBD_REQ_NEXT_CALLBACK;
 800375e:	2002      	movs	r0, #2
 8003760:	e008      	b.n	8003774 <aggregate_callback+0x88>
            result = control_callback[i].cb(
 8003762:	f8cd 9000 	str.w	r9, [sp]
 8003766:	4633      	mov	r3, r6
 8003768:	4642      	mov	r2, r8
 800376a:	4621      	mov	r1, r4
 800376c:	4638      	mov	r0, r7
 800376e:	47d8      	blx	fp
            if (result == USBD_REQ_HANDLED ||
 8003770:	2801      	cmp	r0, #1
 8003772:	d8e5      	bhi.n	8003740 <aggregate_callback+0x54>
}
 8003774:	b003      	add	sp, #12
 8003776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800377a:	bf00      	nop
 800377c:	080048c2 	.word	0x080048c2
 8003780:	200004c8 	.word	0x200004c8
 8003784:	080048ca 	.word	0x080048ca

08003788 <webusb_set_config>:
	}

	return status;
}

static void webusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8003788:	b508      	push	{r3, lr}
    //  debug_println("webusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 800378a:	227f      	movs	r2, #127	; 0x7f
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <webusb_set_config+0x20>)
 800378e:	2140      	movs	r1, #64	; 0x40
 8003790:	f7ff feba 	bl	8003508 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 8003794:	2800      	cmp	r0, #0
 8003796:	da06      	bge.n	80037a6 <webusb_set_config+0x1e>
 8003798:	4804      	ldr	r0, [pc, #16]	; (80037ac <webusb_set_config+0x24>)
 800379a:	f7ff f881 	bl	80028a0 <debug_println>
}
 800379e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 80037a2:	f7ff b897 	b.w	80028d4 <debug_flush>
}
 80037a6:	bd08      	pop	{r3, pc}
 80037a8:	080037b1 	.word	0x080037b1
 80037ac:	08004b7c 	.word	0x08004b7c

080037b0 <webusb_control_vendor_request>:
									 usbd_control_complete_callback* complete) {
 80037b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 80037b4:	7808      	ldrb	r0, [r1, #0]
									 usbd_control_complete_callback* complete) {
 80037b6:	460c      	mov	r4, r1
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 80037b8:	3040      	adds	r0, #64	; 0x40
 80037ba:	b2c0      	uxtb	r0, r0
 80037bc:	2801      	cmp	r0, #1
									 usbd_control_complete_callback* complete) {
 80037be:	461f      	mov	r7, r3
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 80037c0:	d838      	bhi.n	8003834 <webusb_control_vendor_request+0x84>
	if (req->bRequest != WEBUSB_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 80037c2:	784b      	ldrb	r3, [r1, #1]
 80037c4:	2b22      	cmp	r3, #34	; 0x22
 80037c6:	d135      	bne.n	8003834 <webusb_control_vendor_request+0x84>
	switch (req->wIndex) {
 80037c8:	888b      	ldrh	r3, [r1, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d12d      	bne.n	800382a <webusb_control_vendor_request+0x7a>
			uint16_t index = req->wValue;
 80037ce:	884c      	ldrh	r4, [r1, #2]
			if (index == 0) {
 80037d0:	b964      	cbnz	r4, 80037ec <webusb_control_vendor_request+0x3c>
    			debug_print("*** webusb notsupp index "); debug_print_unsigned(index); debug_println(""); debug_flush(); ////
 80037d2:	4819      	ldr	r0, [pc, #100]	; (8003838 <webusb_control_vendor_request+0x88>)
 80037d4:	f7ff f881 	bl	80028da <debug_print>
 80037d8:	4620      	mov	r0, r4
    		debug_print("*** webusb notsupp wIndex "); debug_print_unsigned(req->wIndex); debug_println(""); debug_flush(); ////
 80037da:	f7ff f88d 	bl	80028f8 <debug_print_unsigned>
 80037de:	4817      	ldr	r0, [pc, #92]	; (800383c <webusb_control_vendor_request+0x8c>)
 80037e0:	f7ff f85e 	bl	80028a0 <debug_println>
 80037e4:	f7ff f876 	bl	80028d4 <debug_flush>
			status = USBD_REQ_NOTSUPP;
 80037e8:	2000      	movs	r0, #0
			break;
 80037ea:	e01c      	b.n	8003826 <webusb_control_vendor_request+0x76>
			if (index == 1) {
 80037ec:	2c01      	cmp	r4, #1
 80037ee:	d1f0      	bne.n	80037d2 <webusb_control_vendor_request+0x22>
				dump_usb_request("weburl", req); // debug_flush(); ////
 80037f0:	4813      	ldr	r0, [pc, #76]	; (8003840 <webusb_control_vendor_request+0x90>)
			struct webusb_url_descriptor* url = (struct webusb_url_descriptor*)(*buf);
 80037f2:	6816      	ldr	r6, [r2, #0]
				dump_usb_request("weburl", req); // debug_flush(); ////
 80037f4:	f7ff fee2 	bl	80035bc <dump_usb_request>
				size_t url_len = strlen(webusb_https_url);
 80037f8:	4b12      	ldr	r3, [pc, #72]	; (8003844 <webusb_control_vendor_request+0x94>)
 80037fa:	f8d3 8000 	ldr.w	r8, [r3]
 80037fe:	4640      	mov	r0, r8
 8003800:	f7fe ff38 	bl	8002674 <strlen>
				url->bDescriptorType = WEBUSB_DT_URL;
 8003804:	2303      	movs	r3, #3
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
 8003806:	1cc5      	adds	r5, r0, #3
 8003808:	b2ed      	uxtb	r5, r5
				size_t url_len = strlen(webusb_https_url);
 800380a:	4602      	mov	r2, r0
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
 800380c:	7035      	strb	r5, [r6, #0]
				url->bDescriptorType = WEBUSB_DT_URL;
 800380e:	7073      	strb	r3, [r6, #1]
				memcpy(&url->URL, webusb_https_url, url_len);
 8003810:	18f0      	adds	r0, r6, r3
				url->bScheme = WEBUSB_URL_SCHEME_HTTPS;
 8003812:	70b4      	strb	r4, [r6, #2]
				memcpy(&url->URL, webusb_https_url, url_len);
 8003814:	4641      	mov	r1, r8
 8003816:	f7fe ff0f 	bl	8002638 <memcpy>
				*len = MIN(*len, url->bLength);
 800381a:	883b      	ldrh	r3, [r7, #0]
				status = USBD_REQ_HANDLED;
 800381c:	4620      	mov	r0, r4
				*len = MIN(*len, url->bLength);
 800381e:	429d      	cmp	r5, r3
 8003820:	bf28      	it	cs
 8003822:	461d      	movcs	r5, r3
 8003824:	803d      	strh	r5, [r7, #0]
}
 8003826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    		debug_print("*** webusb notsupp wIndex "); debug_print_unsigned(req->wIndex); debug_println(""); debug_flush(); ////
 800382a:	4807      	ldr	r0, [pc, #28]	; (8003848 <webusb_control_vendor_request+0x98>)
 800382c:	f7ff f855 	bl	80028da <debug_print>
 8003830:	88a0      	ldrh	r0, [r4, #4]
 8003832:	e7d2      	b.n	80037da <webusb_control_vendor_request+0x2a>
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8003834:	2002      	movs	r0, #2
 8003836:	e7f6      	b.n	8003826 <webusb_control_vendor_request+0x76>
 8003838:	08004b28 	.word	0x08004b28
 800383c:	0800459e 	.word	0x0800459e
 8003840:	08004b42 	.word	0x08004b42
 8003844:	20000524 	.word	0x20000524
 8003848:	08004b49 	.word	0x08004b49

0800384c <webusb_setup>:

void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
    // debug_println("webusb_setup"); // debug_flush(); ////
	webusb_https_url = https_url;
 800384c:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <webusb_setup+0x3c>)
void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
 800384e:	b510      	push	{r4, lr}

	//  Register the callback now because WebUSB requests come earlier.
	int status = aggregate_register_callback(
 8003850:	227f      	movs	r2, #127	; 0x7f
	webusb_https_url = https_url;
 8003852:	6019      	str	r1, [r3, #0]
	int status = aggregate_register_callback(
 8003854:	4b0d      	ldr	r3, [pc, #52]	; (800388c <webusb_setup+0x40>)
 8003856:	2140      	movs	r1, #64	; 0x40
void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
 8003858:	4604      	mov	r4, r0
	int status = aggregate_register_callback(
 800385a:	f7ff fe55 	bl	8003508 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 800385e:	2800      	cmp	r0, #0
 8003860:	da04      	bge.n	800386c <webusb_setup+0x20>
 8003862:	480b      	ldr	r0, [pc, #44]	; (8003890 <webusb_setup+0x44>)
 8003864:	f7ff f81c 	bl	80028a0 <debug_println>
 8003868:	f7ff f834 	bl	80028d4 <debug_flush>

    //  Re-register the callback in case the USB restarts.
	status = aggregate_register_config_callback(usbd_dev, webusb_set_config);
 800386c:	4909      	ldr	r1, [pc, #36]	; (8003894 <webusb_setup+0x48>)
 800386e:	4620      	mov	r0, r4
 8003870:	f7ff fe2e 	bl	80034d0 <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8003874:	2800      	cmp	r0, #0
 8003876:	da06      	bge.n	8003886 <webusb_setup+0x3a>
 8003878:	4805      	ldr	r0, [pc, #20]	; (8003890 <webusb_setup+0x44>)
 800387a:	f7ff f811 	bl	80028a0 <debug_println>
}
 800387e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8003882:	f7ff b827 	b.w	80028d4 <debug_flush>
}
 8003886:	bd10      	pop	{r4, pc}
 8003888:	20000524 	.word	0x20000524
 800388c:	080037b1 	.word	0x080037b1
 8003890:	08004b99 	.word	0x08004b99
 8003894:	08003789 	.word	0x08003789

08003898 <winusb_control_vendor_request>:
}

static int winusb_control_vendor_request(usbd_device *usbd_dev,
					struct usb_setup_data *req,
					uint8_t **buf, uint16_t *len,
					usbd_control_complete_callback* complete) {  (void)complete; (void)usbd_dev;
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4615      	mov	r5, r2
	//  Handle requests for MS OS 2.0 Descriptors, MS OS 1.0 Compatible ID and Extended Properties, like:
	//  >>  typ c0, req 21, val 0000, idx 0007, len 00b2 (MS OS 2.0 Descriptors)
	//  >>  type 0xc0, req 0x21, val 0, idx 4, len 16, type 0x00, index 0x00 (MS OS 1.0 Compatible ID)
	//  >>  type 0xc1, req 0x21, val 0, idx 5, len 10, type 0x00, index 0x00 (MS OS 1.0 Extended Properties)
	//  For WinUSB, only request types C0 and C1 are allowed.  Request code must be the MS vendor code (0x21).
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 800389c:	780a      	ldrb	r2, [r1, #0]
					usbd_control_complete_callback* complete) {  (void)complete; (void)usbd_dev;
 800389e:	461c      	mov	r4, r3
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 80038a0:	f102 0340 	add.w	r3, r2, #64	; 0x40
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d832      	bhi.n	8003910 <winusb_control_vendor_request+0x78>
	if (req->bRequest != WINUSB_MS_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 80038aa:	784b      	ldrb	r3, [r1, #1]
 80038ac:	2b21      	cmp	r3, #33	; 0x21
 80038ae:	d12f      	bne.n	8003910 <winusb_control_vendor_request+0x78>

	int status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 80038b0:	2ac0      	cmp	r2, #192	; 0xc0
 80038b2:	888b      	ldrh	r3, [r1, #4]
 80038b4:	d11a      	bne.n	80038ec <winusb_control_vendor_request+0x54>
 80038b6:	2b07      	cmp	r3, #7
 80038b8:	d10b      	bne.n	80038d2 <winusb_control_vendor_request+0x3a>
		(req->wIndex == MSOS20_REQ_GET_DESCRIPTOR)) {
		//  Request for the MS OS 2.0 Descriptor referenced by the BOS, e.g.
		//  >>  typ c0, req 21, val 0000, idx 0007, len 00b2
		//  See http://download.microsoft.com/download/3/5/6/3563ED4A-F318-4B66-A181-AB1D8F6FD42D/MS_OS_2_0_desc.docx
		dump_usb_request("windes", req); // debug_flush(); ////
 80038ba:	4816      	ldr	r0, [pc, #88]	; (8003914 <winusb_control_vendor_request+0x7c>)
 80038bc:	f7ff fe7e 	bl	80035bc <dump_usb_request>
		*buf = (uint8_t*) &msos20_descriptor_set;
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <winusb_control_vendor_request+0x80>)
 80038c2:	602b      	str	r3, [r5, #0]
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 80038c4:	8823      	ldrh	r3, [r4, #0]
 80038c6:	2bb2      	cmp	r3, #178	; 0xb2
 80038c8:	bf28      	it	cs
 80038ca:	23b2      	movcs	r3, #178	; 0xb2
		//  HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\usbflags\VVVVPPPPRRRR (VVVV - vendor ID; PPPP - product ID; RRRR - revision).
		//  Delete VVVVPPPPRRRR key and also uninstall the device with utility like USDDeview to always get fresh device plug in behavior.
		dump_usb_request("winprp", req); // debug_flush(); ////
		*buf = (uint8_t*)(&guid);
		*len = MIN(*len, guid.header.dwLength);
		status = USBD_REQ_HANDLED;
 80038cc:	2001      	movs	r0, #1
		*len = MIN(*len, guid.header.dwLength);
 80038ce:	8023      	strh	r3, [r4, #0]

	} else {
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	}
	return status;
}
 80038d0:	bd38      	pop	{r3, r4, r5, pc}
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d11c      	bne.n	8003910 <winusb_control_vendor_request+0x78>
		dump_usb_request("winid", req); // debug_flush(); ////
 80038d6:	4811      	ldr	r0, [pc, #68]	; (800391c <winusb_control_vendor_request+0x84>)
 80038d8:	f7ff fe70 	bl	80035bc <dump_usb_request>
		*buf = (uint8_t*)(&winusb_wcid);
 80038dc:	4a10      	ldr	r2, [pc, #64]	; (8003920 <winusb_control_vendor_request+0x88>)
		*len = MIN(*len, winusb_wcid.header.dwLength);
 80038de:	8823      	ldrh	r3, [r4, #0]
		*buf = (uint8_t*)(&winusb_wcid);
 80038e0:	602a      	str	r2, [r5, #0]
		*len = MIN(*len, winusb_wcid.header.dwLength);
 80038e2:	6812      	ldr	r2, [r2, #0]
 80038e4:	4293      	cmp	r3, r2
 80038e6:	bf28      	it	cs
 80038e8:	4613      	movcs	r3, r2
 80038ea:	e7ef      	b.n	80038cc <winusb_control_vendor_request+0x34>
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_INTERFACE) &&
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d10f      	bne.n	8003910 <winusb_control_vendor_request+0x78>
		(usb_descriptor_index(req->wValue) == winusb_wcid.functions[0].bInterfaceNumber)) {
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <winusb_control_vendor_request+0x88>)
 80038f2:	7c1a      	ldrb	r2, [r3, #16]
 80038f4:	884b      	ldrh	r3, [r1, #2]
static int usb_descriptor_index(uint16_t wValue) { return wValue & 0xFF; }
 80038f6:	b2db      	uxtb	r3, r3
		(req->wIndex == WINUSB_REQ_GET_EXTENDED_PROPERTIES_OS_FEATURE_DESCRIPTOR) &&
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d109      	bne.n	8003910 <winusb_control_vendor_request+0x78>
		dump_usb_request("winprp", req); // debug_flush(); ////
 80038fc:	4809      	ldr	r0, [pc, #36]	; (8003924 <winusb_control_vendor_request+0x8c>)
 80038fe:	f7ff fe5d 	bl	80035bc <dump_usb_request>
		*buf = (uint8_t*)(&guid);
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <winusb_control_vendor_request+0x90>)
 8003904:	602b      	str	r3, [r5, #0]
		*len = MIN(*len, guid.header.dwLength);
 8003906:	8823      	ldrh	r3, [r4, #0]
 8003908:	2b92      	cmp	r3, #146	; 0x92
 800390a:	bf28      	it	cs
 800390c:	2392      	movcs	r3, #146	; 0x92
 800390e:	e7dd      	b.n	80038cc <winusb_control_vendor_request+0x34>
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8003910:	2002      	movs	r0, #2
 8003912:	e7dd      	b.n	80038d0 <winusb_control_vendor_request+0x38>
 8003914:	08004c5f 	.word	0x08004c5f
 8003918:	2000008d 	.word	0x2000008d
 800391c:	08004c66 	.word	0x08004c66
 8003920:	2000013f 	.word	0x2000013f
 8003924:	08004c6c 	.word	0x08004c6c
 8003928:	08004bb1 	.word	0x08004bb1

0800392c <winusb_set_config>:

static void winusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 800392c:	b508      	push	{r3, lr}
	//  debug_println("winusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 800392e:	2260      	movs	r2, #96	; 0x60
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <winusb_set_config+0x20>)
 8003932:	2140      	movs	r1, #64	; 0x40
 8003934:	f7ff fde8 	bl	8003508 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	if (status < 0) {
 8003938:	2800      	cmp	r0, #0
 800393a:	da06      	bge.n	800394a <winusb_set_config+0x1e>
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
 800393c:	4804      	ldr	r0, [pc, #16]	; (8003950 <winusb_set_config+0x24>)
 800393e:	f7fe ffaf 	bl	80028a0 <debug_println>
	}
}
 8003942:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
 8003946:	f7fe bfc5 	b.w	80028d4 <debug_flush>
}
 800394a:	bd08      	pop	{r3, pc}
 800394c:	08003899 	.word	0x08003899
 8003950:	08004c79 	.word	0x08004c79

08003954 <winusb_descriptor_request>:
	usbd_control_complete_callback* complete) { (void)complete; (void)usbd_dev;
 8003954:	b538      	push	{r3, r4, r5, lr}
 8003956:	461c      	mov	r4, r3
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 8003958:	780b      	ldrb	r3, [r1, #0]
	usbd_control_complete_callback* complete) { (void)complete; (void)usbd_dev;
 800395a:	4615      	mov	r5, r2
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 800395c:	f013 0f60 	tst.w	r3, #96	; 0x60
 8003960:	d115      	bne.n	800398e <winusb_descriptor_request+0x3a>
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR && usb_descriptor_type(req->wValue) == USB_DT_STRING) {
 8003962:	784b      	ldrb	r3, [r1, #1]
 8003964:	2b06      	cmp	r3, #6
 8003966:	d112      	bne.n	800398e <winusb_descriptor_request+0x3a>
 8003968:	8848      	ldrh	r0, [r1, #2]
 800396a:	0a03      	lsrs	r3, r0, #8
 800396c:	2b03      	cmp	r3, #3
 800396e:	d10e      	bne.n	800398e <winusb_descriptor_request+0x3a>
		if (usb_descriptor_index(req->wValue) == WINUSB_EXTRA_STRING_INDEX) {
 8003970:	b2c0      	uxtb	r0, r0
 8003972:	28ee      	cmp	r0, #238	; 0xee
 8003974:	d10b      	bne.n	800398e <winusb_descriptor_request+0x3a>
			dump_usb_request("winee", req); // debug_flush(); ////
 8003976:	4807      	ldr	r0, [pc, #28]	; (8003994 <winusb_descriptor_request+0x40>)
 8003978:	f7ff fe20 	bl	80035bc <dump_usb_request>
			*len = MIN(*len, winusb_string_descriptor.bLength);
 800397c:	8822      	ldrh	r2, [r4, #0]
 800397e:	2001      	movs	r0, #1
 8003980:	2a12      	cmp	r2, #18
 8003982:	bf28      	it	cs
 8003984:	2212      	movcs	r2, #18
			*buf = (uint8_t*) &winusb_string_descriptor;
 8003986:	4b04      	ldr	r3, [pc, #16]	; (8003998 <winusb_descriptor_request+0x44>)
 8003988:	602b      	str	r3, [r5, #0]
			*len = MIN(*len, winusb_string_descriptor.bLength);
 800398a:	8022      	strh	r2, [r4, #0]
}
 800398c:	bd38      	pop	{r3, r4, r5, pc}
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 800398e:	2002      	movs	r0, #2
 8003990:	e7fc      	b.n	800398c <winusb_descriptor_request+0x38>
 8003992:	bf00      	nop
 8003994:	08004c73 	.word	0x08004c73
 8003998:	08004cae 	.word	0x08004cae

0800399c <winusb_setup>:

void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
	//  debug_println("winusb_setup"); // debug_flush(); ////
	//  Send to host the USB Interface ID for the DFU Interface, which will support WinUSB.
	winusb_wcid.functions[0].bInterfaceNumber = interface;
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <winusb_setup+0x48>)
void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
 800399e:	b570      	push	{r4, r5, r6, lr}
	winusb_wcid.functions[0].bInterfaceNumber = interface;
 80039a0:	7419      	strb	r1, [r3, #16]
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 80039a2:	4911      	ldr	r1, [pc, #68]	; (80039e8 <winusb_setup+0x4c>)
void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
 80039a4:	4604      	mov	r4, r0
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 80039a6:	f7ff fd93 	bl	80034d0 <aggregate_register_config_callback>

	//  Windows probes the compatible ID before setting the configuration, so also register the callback now.
	int status1 = aggregate_register_callback(
 80039aa:	4b10      	ldr	r3, [pc, #64]	; (80039ec <winusb_setup+0x50>)
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 80039ac:	4606      	mov	r6, r0
	int status1 = aggregate_register_callback(
 80039ae:	2260      	movs	r2, #96	; 0x60
 80039b0:	2140      	movs	r1, #64	; 0x40
 80039b2:	4620      	mov	r0, r4
 80039b4:	f7ff fda8 	bl	8003508 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	int status2 = aggregate_register_callback(
 80039b8:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <winusb_setup+0x54>)
	int status1 = aggregate_register_callback(
 80039ba:	4605      	mov	r5, r0
	int status2 = aggregate_register_callback(
 80039bc:	221f      	movs	r2, #31
 80039be:	2100      	movs	r1, #0
 80039c0:	4620      	mov	r0, r4
 80039c2:	f7ff fda1 	bl	8003508 <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		winusb_descriptor_request);
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 80039c6:	2e00      	cmp	r6, #0
 80039c8:	db03      	blt.n	80039d2 <winusb_setup+0x36>
 80039ca:	2d00      	cmp	r5, #0
 80039cc:	db01      	blt.n	80039d2 <winusb_setup+0x36>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	da06      	bge.n	80039e0 <winusb_setup+0x44>
 80039d2:	4808      	ldr	r0, [pc, #32]	; (80039f4 <winusb_setup+0x58>)
 80039d4:	f7fe ff64 	bl	80028a0 <debug_println>
}
 80039d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 80039dc:	f7fe bf7a 	b.w	80028d4 <debug_flush>
}
 80039e0:	bd70      	pop	{r4, r5, r6, pc}
 80039e2:	bf00      	nop
 80039e4:	2000013f 	.word	0x2000013f
 80039e8:	0800392d 	.word	0x0800392d
 80039ec:	08003899 	.word	0x08003899
 80039f0:	08003955 	.word	0x08003955
 80039f4:	08004c96 	.word	0x08004c96

080039f8 <cdcacm_comm_cb>:
static void cdcacm_comm_cb(
  usbd_device *usbd_dev,
  uint8_t ep __attribute__((unused))
) {
	//  Callback for the comm channel.
	debug_println("comm");
 80039f8:	4801      	ldr	r0, [pc, #4]	; (8003a00 <cdcacm_comm_cb+0x8>)
 80039fa:	f7fe bf51 	b.w	80028a0 <debug_println>
 80039fe:	bf00      	nop
 8003a00:	08004cd5 	.word	0x08004cd5

08003a04 <cdcacm_set_config>:
}

static void cdcacm_set_config(
  usbd_device *usbd_dev,
  uint16_t wValue __attribute__((unused))
) {
 8003a04:	b513      	push	{r0, r1, r4, lr}
	//  Callback for setting the USB configuration.
	//  From https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f3/stm32f3-discovery/usb_cdcacm/cdcacm.c
    //  debug_println("*** cdcacm_set_config"); ////
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 8003a06:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <cdcacm_set_config+0x58>)
 8003a08:	2202      	movs	r2, #2
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	2103      	movs	r1, #3
 8003a0e:	2340      	movs	r3, #64	; 0x40
) {
 8003a10:	4604      	mov	r4, r0
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 8003a12:	f7fe f89d 	bl	8001b50 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, DATA_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, NULL);
 8003a16:	2300      	movs	r3, #0
 8003a18:	2202      	movs	r2, #2
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	2183      	movs	r1, #131	; 0x83
 8003a1e:	2340      	movs	r3, #64	; 0x40
 8003a20:	4620      	mov	r0, r4
 8003a22:	f7fe f895 	bl	8001b50 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, COMM_IN, USB_ENDPOINT_ATTR_INTERRUPT, COMM_PACKET_SIZE, cdcacm_comm_cb);
 8003a26:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <cdcacm_set_config+0x5c>)
 8003a28:	2203      	movs	r2, #3
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	2184      	movs	r1, #132	; 0x84
 8003a2e:	2310      	movs	r3, #16
 8003a30:	4620      	mov	r0, r4
 8003a32:	f7fe f88d 	bl	8001b50 <usbd_ep_setup>
	int status = aggregate_register_callback(
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <cdcacm_set_config+0x60>)
 8003a38:	227f      	movs	r2, #127	; 0x7f
 8003a3a:	2121      	movs	r1, #33	; 0x21
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f7ff fd63 	bl	8003508 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		(usbd_control_callback) cdcacm_control_request);
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8003a42:	2800      	cmp	r0, #0
 8003a44:	da07      	bge.n	8003a56 <cdcacm_set_config+0x52>
 8003a46:	4808      	ldr	r0, [pc, #32]	; (8003a68 <cdcacm_set_config+0x64>)
 8003a48:	f7fe ff2a 	bl	80028a0 <debug_println>
}
 8003a4c:	b002      	add	sp, #8
 8003a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8003a52:	f7fe bf3f 	b.w	80028d4 <debug_flush>
}
 8003a56:	b002      	add	sp, #8
 8003a58:	bd10      	pop	{r4, pc}
 8003a5a:	bf00      	nop
 8003a5c:	08003b29 	.word	0x08003b29
 8003a60:	080039f9 	.word	0x080039f9
 8003a64:	08003a6d 	.word	0x08003a6d
 8003a68:	08004d02 	.word	0x08004d02

08003a6c <cdcacm_control_request>:
) {
 8003a6c:	b510      	push	{r4, lr}
 8003a6e:	461c      	mov	r4, r3
	switch (req->bRequest) {
 8003a70:	784b      	ldrb	r3, [r1, #1]
 8003a72:	2b21      	cmp	r3, #33	; 0x21
 8003a74:	d005      	beq.n	8003a82 <cdcacm_control_request+0x16>
 8003a76:	2b22      	cmp	r3, #34	; 0x22
 8003a78:	d01b      	beq.n	8003ab2 <cdcacm_control_request+0x46>
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d01b      	beq.n	8003ab6 <cdcacm_control_request+0x4a>
	return USBD_REQ_NEXT_CALLBACK;  //  Hand over to next callback.
 8003a7e:	2002      	movs	r0, #2
}
 8003a80:	bd10      	pop	{r4, pc}
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 8003a82:	8823      	ldrh	r3, [r4, #0]
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d810      	bhi.n	8003aaa <cdcacm_control_request+0x3e>
				debug_print("*** cdcacm_control notsupp line_coding "); debug_print_unsigned(sizeof(struct usb_cdc_line_coding)); 
 8003a88:	480d      	ldr	r0, [pc, #52]	; (8003ac0 <cdcacm_control_request+0x54>)
 8003a8a:	f7fe ff26 	bl	80028da <debug_print>
 8003a8e:	2007      	movs	r0, #7
 8003a90:	f7fe ff32 	bl	80028f8 <debug_print_unsigned>
				debug_print(", len "); debug_print_unsigned(*len);
 8003a94:	480b      	ldr	r0, [pc, #44]	; (8003ac4 <cdcacm_control_request+0x58>)
 8003a96:	f7fe ff20 	bl	80028da <debug_print>
 8003a9a:	8820      	ldrh	r0, [r4, #0]
 8003a9c:	f7fe ff2c 	bl	80028f8 <debug_print_unsigned>
				debug_println("");
 8003aa0:	4809      	ldr	r0, [pc, #36]	; (8003ac8 <cdcacm_control_request+0x5c>)
 8003aa2:	f7fe fefd 	bl	80028a0 <debug_println>
				return USBD_REQ_NOTSUPP;
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	e7ea      	b.n	8003a80 <cdcacm_control_request+0x14>
			*buf = (uint8_t *) &line_coding;
 8003aaa:	4b08      	ldr	r3, [pc, #32]	; (8003acc <cdcacm_control_request+0x60>)
 8003aac:	6013      	str	r3, [r2, #0]
			*len = sizeof(struct usb_cdc_line_coding);
 8003aae:	2307      	movs	r3, #7
 8003ab0:	8023      	strh	r3, [r4, #0]
			return USBD_REQ_HANDLED;
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	e7e4      	b.n	8003a80 <cdcacm_control_request+0x14>
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 8003ab6:	8823      	ldrh	r3, [r4, #0]
 8003ab8:	2b06      	cmp	r3, #6
 8003aba:	d8fa      	bhi.n	8003ab2 <cdcacm_control_request+0x46>
 8003abc:	e7e4      	b.n	8003a88 <cdcacm_control_request+0x1c>
 8003abe:	bf00      	nop
 8003ac0:	08004cda 	.word	0x08004cda
 8003ac4:	080046c5 	.word	0x080046c5
 8003ac8:	0800459e 	.word	0x0800459e
 8003acc:	08004d1f 	.word	0x08004d1f

08003ad0 <cdcadm_transmit>:
) {
 8003ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!connected || !usbd_dev || !buf) { return -1; }
 8003ad2:	4b14      	ldr	r3, [pc, #80]	; (8003b24 <cdcadm_transmit+0x54>)
) {
 8003ad4:	4607      	mov	r7, r0
	if (!connected || !usbd_dev || !buf) { return -1; }
 8003ad6:	781b      	ldrb	r3, [r3, #0]
) {
 8003ad8:	460d      	mov	r5, r1
 8003ada:	4614      	mov	r4, r2
	if (!connected || !usbd_dev || !buf) { return -1; }
 8003adc:	b1f3      	cbz	r3, 8003b1c <cdcadm_transmit+0x4c>
 8003ade:	b1e8      	cbz	r0, 8003b1c <cdcadm_transmit+0x4c>
 8003ae0:	b1e1      	cbz	r1, 8003b1c <cdcadm_transmit+0x4c>
	if (len == 0) { return 0; }
 8003ae2:	b90a      	cbnz	r2, 8003ae8 <cdcadm_transmit+0x18>
 8003ae4:	2000      	movs	r0, #0
}
 8003ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len <= MAX_USB_PACKET_SIZE) {
 8003ae8:	2a40      	cmp	r2, #64	; 0x40
 8003aea:	d805      	bhi.n	8003af8 <cdcadm_transmit+0x28>
		return usbd_ep_write_packet(usbd_dev, DATA_IN, buf, len);  //  Returns the bytes sent.
 8003aec:	4613      	mov	r3, r2
 8003aee:	460a      	mov	r2, r1
 8003af0:	2183      	movs	r1, #131	; 0x83
 8003af2:	f7fe f84d 	bl	8001b90 <usbd_ep_write_packet>
 8003af6:	e7f6      	b.n	8003ae6 <cdcadm_transmit+0x16>
		uint16_t tx_len = (len > MAX_USB_PACKET_SIZE) ? MAX_USB_PACKET_SIZE : len;
 8003af8:	2c40      	cmp	r4, #64	; 0x40
 8003afa:	4626      	mov	r6, r4
 8003afc:	bf28      	it	cs
 8003afe:	2640      	movcs	r6, #64	; 0x40
		uint16_t status = usbd_ep_write_packet(usbd_dev, DATA_IN, buf, tx_len);  //  Returns the bytes sent.
 8003b00:	462a      	mov	r2, r5
 8003b02:	4633      	mov	r3, r6
 8003b04:	2183      	movs	r1, #131	; 0x83
 8003b06:	4638      	mov	r0, r7
 8003b08:	f7fe f842 	bl	8001b90 <usbd_ep_write_packet>
		len = len - tx_len;
 8003b0c:	1ba4      	subs	r4, r4, r6
		if (status != tx_len) { return 0; }  //  Stop if error.
 8003b0e:	4286      	cmp	r6, r0
		len = len - tx_len;
 8003b10:	b2a4      	uxth	r4, r4
		if (status != tx_len) { return 0; }  //  Stop if error.
 8003b12:	d1e7      	bne.n	8003ae4 <cdcadm_transmit+0x14>
		buf = &buf[tx_len];
 8003b14:	4435      	add	r5, r6
	while (len > 0) {
 8003b16:	2c00      	cmp	r4, #0
 8003b18:	d1ee      	bne.n	8003af8 <cdcadm_transmit+0x28>
 8003b1a:	e7e3      	b.n	8003ae4 <cdcadm_transmit+0x14>
	if (!connected || !usbd_dev || !buf) { return -1; }
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b20:	e7e1      	b.n	8003ae6 <cdcadm_transmit+0x16>
 8003b22:	bf00      	nop
 8003b24:	2000067e 	.word	0x2000067e

08003b28 <cdcacm_data_rx_cb>:
) {
 8003b28:	b570      	push	{r4, r5, r6, lr}
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, rx_buf, MAX_USB_PACKET_SIZE);
 8003b2a:	4d0f      	ldr	r5, [pc, #60]	; (8003b68 <cdcacm_data_rx_cb+0x40>)
 8003b2c:	2340      	movs	r3, #64	; 0x40
 8003b2e:	462a      	mov	r2, r5
 8003b30:	2103      	movs	r1, #3
) {
 8003b32:	4606      	mov	r6, r0
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, rx_buf, MAX_USB_PACKET_SIZE);
 8003b34:	f7fe f833 	bl	8001b9e <usbd_ep_read_packet>
    if (len == 0) { return; }
 8003b38:	b1a8      	cbz	r0, 8003b66 <cdcacm_data_rx_cb+0x3e>
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
 8003b3a:	2840      	cmp	r0, #64	; 0x40
 8003b3c:	bf28      	it	cs
 8003b3e:	2040      	movcs	r0, #64	; 0x40
    rx_buf[pos] = 0;
 8003b40:	2300      	movs	r3, #0
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
 8003b42:	b284      	uxth	r4, r0
    rx_buf[pos] = 0;
 8003b44:	552b      	strb	r3, [r5, r4]
	if (!connected) {
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <cdcacm_data_rx_cb+0x44>)
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	b92a      	cbnz	r2, 8003b58 <cdcacm_data_rx_cb+0x30>
		connected = 1;
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	701a      	strb	r2, [r3, #0]
		if (connected_func) { connected_func(); }
 8003b50:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <cdcacm_data_rx_cb+0x48>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	b103      	cbz	r3, 8003b58 <cdcacm_data_rx_cb+0x30>
 8003b56:	4798      	blx	r3
	cdcadm_transmit(usbd_dev, rx_buf, pos);  //  Echo the packet.	
 8003b58:	4622      	mov	r2, r4
 8003b5a:	4630      	mov	r0, r6
}
 8003b5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cdcadm_transmit(usbd_dev, rx_buf, pos);  //  Echo the packet.	
 8003b60:	4901      	ldr	r1, [pc, #4]	; (8003b68 <cdcacm_data_rx_cb+0x40>)
 8003b62:	f7ff bfb5 	b.w	8003ad0 <cdcadm_transmit>
}
 8003b66:	bd70      	pop	{r4, r5, r6, pc}
 8003b68:	2000067f 	.word	0x2000067f
 8003b6c:	2000067e 	.word	0x2000067e
 8003b70:	20000528 	.word	0x20000528

08003b74 <cdc_setup>:

void cdc_setup(usbd_device* usbd_dev, connected_callback *connected_func0) {
 8003b74:	b508      	push	{r3, lr}
	//  Setup the USB interface.
    //  debug_println("*** cdc_setup"); ////
	connected_func = connected_func0;
 8003b76:	4b07      	ldr	r3, [pc, #28]	; (8003b94 <cdc_setup+0x20>)
 8003b78:	6019      	str	r1, [r3, #0]
	int status = aggregate_register_config_callback(usbd_dev, cdcacm_set_config);
 8003b7a:	4907      	ldr	r1, [pc, #28]	; (8003b98 <cdc_setup+0x24>)
 8003b7c:	f7ff fca8 	bl	80034d0 <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8003b80:	2800      	cmp	r0, #0
 8003b82:	da06      	bge.n	8003b92 <cdc_setup+0x1e>
 8003b84:	4805      	ldr	r0, [pc, #20]	; (8003b9c <cdc_setup+0x28>)
 8003b86:	f7fe fe8b 	bl	80028a0 <debug_println>
}
 8003b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8003b8e:	f7fe bea1 	b.w	80028d4 <debug_flush>
}
 8003b92:	bd08      	pop	{r3, pc}
 8003b94:	20000528 	.word	0x20000528
 8003b98:	08003a05 	.word	0x08003a05
 8003b9c:	08004cc0 	.word	0x08004cc0

08003ba0 <hf2_set_config>:
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
        else { debug_print("hf2 << "); debug_printhex(s + 1); debug_println(""); }
    }
}

static void hf2_set_config(usbd_device *usbd_dev, uint16_t wValue) {  (void)wValue;
 8003ba0:	b513      	push	{r0, r1, r4, lr}
 8003ba2:	4604      	mov	r4, r0
    //  Setup the endpoints to be bulk & register the callbacks.
    LOG("hf2 set config");
 8003ba4:	480b      	ldr	r0, [pc, #44]	; (8003bd4 <hf2_set_config+0x34>)
 8003ba6:	f7fe fe7b 	bl	80028a0 <debug_println>
    debug_force_flush(); ////
 8003baa:	f7fe fe15 	bl	80027d8 <debug_force_flush>

    usbd_ep_setup(usbd_dev, HF2_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_tx_cb);
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <hf2_set_config+0x38>)
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	2340      	movs	r3, #64	; 0x40
 8003bb8:	2182      	movs	r1, #130	; 0x82
 8003bba:	f7fd ffc9 	bl	8001b50 <usbd_ep_setup>
    usbd_ep_setup(usbd_dev, HF2_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_rx_cb);
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <hf2_set_config+0x3c>)
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	4620      	mov	r0, r4
 8003bc8:	2340      	movs	r3, #64	; 0x40
 8003bca:	f7fd ffc1 	bl	8001b50 <usbd_ep_setup>
}
 8003bce:	b002      	add	sp, #8
 8003bd0:	bd10      	pop	{r4, pc}
 8003bd2:	bf00      	nop
 8003bd4:	08004edd 	.word	0x08004edd
 8003bd8:	08003cc9 	.word	0x08003cc9
 8003bdc:	08003d15 	.word	0x08003d15

08003be0 <assert.part.0>:
    }
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
    if (status < 0) { debug_println("*** hf2_setup failed"); }
}

static void assert(bool assertion, const char *msg) {
 8003be0:	b510      	push	{r4, lr}
 8003be2:	4604      	mov	r4, r0
    if (assertion) { return; }
    debug_print("*** ERROR: "); debug_println(msg); debug_force_flush();
 8003be4:	4804      	ldr	r0, [pc, #16]	; (8003bf8 <assert.part.0+0x18>)
 8003be6:	f7fe fe78 	bl	80028da <debug_print>
 8003bea:	4620      	mov	r0, r4
 8003bec:	f7fe fe58 	bl	80028a0 <debug_println>
}
 8003bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    debug_print("*** ERROR: "); debug_println(msg); debug_force_flush();
 8003bf4:	f7fe bdf0 	b.w	80027d8 <debug_force_flush>
 8003bf8:	08004d26 	.word	0x08004d26

08003bfc <pokeSend>:
    uint8_t dataToSendFlag) {
 8003bfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bfe:	4606      	mov	r6, r0
 8003c00:	9101      	str	r1, [sp, #4]
 8003c02:	4615      	mov	r5, r2
    memset(tx_buf, 0, sizeof(tx_buf));
 8003c04:	2100      	movs	r1, #0
 8003c06:	2240      	movs	r2, #64	; 0x40
 8003c08:	4827      	ldr	r0, [pc, #156]	; (8003ca8 <pokeSend+0xac>)
 8003c0a:	f7fe fd23 	bl	8002654 <memset>
	__asm__("CPSID I\n");
 8003c0e:	b672      	cpsid	i
    if (dataToSendLength) {
 8003c10:	9b01      	ldr	r3, [sp, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d036      	beq.n	8003c84 <pokeSend+0x88>
        if ((int) dataToSendLength < s) {
 8003c16:	9a01      	ldr	r2, [sp, #4]
        int flag = dataToSendFlag;
 8003c18:	462b      	mov	r3, r5
        if ((int) dataToSendLength < s) {
 8003c1a:	2a3e      	cmp	r2, #62	; 0x3e
 8003c1c:	dc2c      	bgt.n	8003c78 <pokeSend+0x7c>
            s = dataToSendLength;
 8003c1e:	9c01      	ldr	r4, [sp, #4]
        tx_buf[0] = flag | s;
 8003c20:	4821      	ldr	r0, [pc, #132]	; (8003ca8 <pokeSend+0xac>)
 8003c22:	4323      	orrs	r3, r4
 8003c24:	f800 3b01 	strb.w	r3, [r0], #1
        memcpy(tx_buf + 1, dataToSend, s);
 8003c28:	4631      	mov	r1, r6
 8003c2a:	4622      	mov	r2, r4
 8003c2c:	f7fe fd04 	bl	8002638 <memcpy>
        dataToSendLength -= s;
 8003c30:	9b01      	ldr	r3, [sp, #4]
        dataToSend += s;
 8003c32:	4426      	add	r6, r4
        dataToSendLength -= s;
 8003c34:	1b1b      	subs	r3, r3, r4
 8003c36:	9301      	str	r3, [sp, #4]
        sendIt = true;
 8003c38:	2301      	movs	r3, #1
	__asm__("CPSIE I\n");
 8003c3a:	b662      	cpsie	i
    if (sendIt) {
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d031      	beq.n	8003ca4 <pokeSend+0xa8>
        usbd_ep_write_packet(_usbd_dev, HF2_IN, tx_buf, len);
 8003c40:	481a      	ldr	r0, [pc, #104]	; (8003cac <pokeSend+0xb0>)
 8003c42:	2340      	movs	r3, #64	; 0x40
 8003c44:	4a18      	ldr	r2, [pc, #96]	; (8003ca8 <pokeSend+0xac>)
 8003c46:	2182      	movs	r1, #130	; 0x82
 8003c48:	6800      	ldr	r0, [r0, #0]
 8003c4a:	f7fd ffa1 	bl	8001b90 <usbd_ep_write_packet>
        if (dataToSendLength > 0) {
 8003c4e:	9a01      	ldr	r2, [sp, #4]
 8003c50:	4b17      	ldr	r3, [pc, #92]	; (8003cb0 <pokeSend+0xb4>)
 8003c52:	b1ca      	cbz	r2, 8003c88 <pokeSend+0x8c>
            remDataToSend = dataToSend;
 8003c54:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <pokeSend+0xb8>)
 8003c56:	6016      	str	r6, [r2, #0]
            remDataToSendLength = dataToSendLength;
 8003c58:	9a01      	ldr	r2, [sp, #4]
 8003c5a:	601a      	str	r2, [r3, #0]
            remDataToSendFlag = dataToSendFlag;
 8003c5c:	4b16      	ldr	r3, [pc, #88]	; (8003cb8 <pokeSend+0xbc>)
 8003c5e:	701d      	strb	r5, [r3, #0]
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 8003c60:	2c02      	cmp	r4, #2
 8003c62:	f104 0401 	add.w	r4, r4, #1
 8003c66:	dc11      	bgt.n	8003c8c <pokeSend+0x90>
 8003c68:	4622      	mov	r2, r4
 8003c6a:	490f      	ldr	r1, [pc, #60]	; (8003ca8 <pokeSend+0xac>)
 8003c6c:	4813      	ldr	r0, [pc, #76]	; (8003cbc <pokeSend+0xc0>)
}
 8003c6e:	b002      	add	sp, #8
 8003c70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 8003c74:	f7ff bc7c 	b.w	8003570 <dump_buffer>
                flag = HF2_FLAG_CMDPKT_BODY;
 8003c78:	2d40      	cmp	r5, #64	; 0x40
 8003c7a:	bf14      	ite	ne
 8003c7c:	462b      	movne	r3, r5
 8003c7e:	2300      	moveq	r3, #0
 8003c80:	243f      	movs	r4, #63	; 0x3f
 8003c82:	e7cd      	b.n	8003c20 <pokeSend+0x24>
    int s = sizeof(tx_buf) - 1;  //  63
 8003c84:	243f      	movs	r4, #63	; 0x3f
 8003c86:	e7d8      	b.n	8003c3a <pokeSend+0x3e>
            remDataToSendLength = 0;  //  No more data to send.
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	e7e9      	b.n	8003c60 <pokeSend+0x64>
        else { debug_print("hf2 << "); debug_printhex(s + 1); debug_println(""); }
 8003c8c:	480c      	ldr	r0, [pc, #48]	; (8003cc0 <pokeSend+0xc4>)
 8003c8e:	f7fe fe24 	bl	80028da <debug_print>
 8003c92:	b2e0      	uxtb	r0, r4
 8003c94:	f7fe fe32 	bl	80028fc <debug_printhex>
 8003c98:	480a      	ldr	r0, [pc, #40]	; (8003cc4 <pokeSend+0xc8>)
}
 8003c9a:	b002      	add	sp, #8
 8003c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        else { debug_print("hf2 << "); debug_printhex(s + 1); debug_println(""); }
 8003ca0:	f7fe bdfe 	b.w	80028a0 <debug_println>
}
 8003ca4:	b002      	add	sp, #8
 8003ca6:	bd70      	pop	{r4, r5, r6, pc}
 8003ca8:	20000704 	.word	0x20000704
 8003cac:	2000052c 	.word	0x2000052c
 8003cb0:	20000554 	.word	0x20000554
 8003cb4:	20000550 	.word	0x20000550
 8003cb8:	200006c2 	.word	0x200006c2
 8003cbc:	08004f0e 	.word	0x08004f0e
 8003cc0:	08004f15 	.word	0x08004f15
 8003cc4:	0800459e 	.word	0x0800459e

08003cc8 <hf2_data_tx_cb>:
static void hf2_data_tx_cb(usbd_device *usbd_dev, uint8_t ep) { (void)usbd_dev; (void)ep;
 8003cc8:	b510      	push	{r4, lr}
    if (remDataToSendLength > 0) {  //  If there is remaining data to be sent...
 8003cca:	4c0e      	ldr	r4, [pc, #56]	; (8003d04 <hf2_data_tx_cb+0x3c>)
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	b133      	cbz	r3, 8003cde <hf2_data_tx_cb+0x16>
        pokeSend(remDataToSend, remDataToSendLength, remDataToSendFlag);  //  Send it.
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <hf2_data_tx_cb+0x40>)
 8003cd2:	6821      	ldr	r1, [r4, #0]
 8003cd4:	781a      	ldrb	r2, [r3, #0]
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <hf2_data_tx_cb+0x44>)
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	f7ff ff8f 	bl	8003bfc <pokeSend>
    if (remDataToSendLength == 0) {  //  If there is no more data to be sent...
 8003cde:	6822      	ldr	r2, [r4, #0]
 8003ce0:	b97a      	cbnz	r2, 8003d02 <hf2_data_tx_cb+0x3a>
        if (restart_request == BOOTLOADER_MODE) {  //  Restart to Bootloader Mode if requested.
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <hf2_data_tx_cb+0x48>)
 8003ce4:	7819      	ldrb	r1, [r3, #0]
 8003ce6:	2902      	cmp	r1, #2
 8003ce8:	d104      	bne.n	8003cf4 <hf2_data_tx_cb+0x2c>
}
 8003cea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            restart_request = UNKNOWN_MODE;
 8003cee:	701a      	strb	r2, [r3, #0]
            boot_target_manifest_bootloader();  //  Never returns.
 8003cf0:	f7ff bb0e 	b.w	8003310 <boot_target_manifest_bootloader>
        } else if (restart_request == APPLICATION_MODE) {  //  Restart to Application Mode if requested.
 8003cf4:	2903      	cmp	r1, #3
 8003cf6:	d104      	bne.n	8003d02 <hf2_data_tx_cb+0x3a>
}
 8003cf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            restart_request = UNKNOWN_MODE;
 8003cfc:	701a      	strb	r2, [r3, #0]
            boot_target_manifest_app();  //  Never returns.
 8003cfe:	f7ff bae7 	b.w	80032d0 <boot_target_manifest_app>
}
 8003d02:	bd10      	pop	{r4, pc}
 8003d04:	20000554 	.word	0x20000554
 8003d08:	200006c2 	.word	0x200006c2
 8003d0c:	20000550 	.word	0x20000550
 8003d10:	200006c3 	.word	0x200006c3

08003d14 <hf2_data_rx_cb>:
static void hf2_data_rx_cb(usbd_device *usbd_dev, uint8_t ep) {
 8003d14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int len = usbd_ep_read_packet(usbd_dev, ep, rx_buf, sizeof(rx_buf));    
 8003d18:	4c62      	ldr	r4, [pc, #392]	; (8003ea4 <hf2_data_rx_cb+0x190>)
 8003d1a:	2340      	movs	r3, #64	; 0x40
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	f7fd ff3e 	bl	8001b9e <usbd_ep_read_packet>
 8003d22:	4605      	mov	r5, r0
    rx_time = millis();
 8003d24:	f7fe ff24 	bl	8002b70 <millis>
 8003d28:	4b5f      	ldr	r3, [pc, #380]	; (8003ea8 <hf2_data_rx_cb+0x194>)
 8003d2a:	6018      	str	r0, [r3, #0]
    if (len <= 0) return;
 8003d2c:	2d00      	cmp	r5, #0
 8003d2e:	f000 80a4 	beq.w	8003e7a <hf2_data_rx_cb+0x166>
    if (!pkt) {
 8003d32:	4f5e      	ldr	r7, [pc, #376]	; (8003eac <hf2_data_rx_cb+0x198>)
    uint8_t tag = rx_buf[0];
 8003d34:	7825      	ldrb	r5, [r4, #0]
    if (!pkt) {
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	b943      	cbnz	r3, 8003d4c <hf2_data_rx_cb+0x38>
        pkt = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?
 8003d3a:	f7ff f9db 	bl	80030f4 <boot_target_get_startup_mode>
            &hf2_buffer :
 8003d3e:	4b5c      	ldr	r3, [pc, #368]	; (8003eb0 <hf2_data_rx_cb+0x19c>)
 8003d40:	4a5c      	ldr	r2, [pc, #368]	; (8003eb4 <hf2_data_rx_cb+0x1a0>)
 8003d42:	2802      	cmp	r0, #2
 8003d44:	bf0c      	ite	eq
 8003d46:	4618      	moveq	r0, r3
 8003d48:	4610      	movne	r0, r2
        pkt = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?
 8003d4a:	6038      	str	r0, [r7, #0]
    usb_assert(pkt->size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	b123      	cbz	r3, 8003d5c <hf2_data_rx_cb+0x48>
    if (assertion) { return; }
 8003d52:	062a      	lsls	r2, r5, #24
 8003d54:	d502      	bpl.n	8003d5c <hf2_data_rx_cb+0x48>
 8003d56:	4858      	ldr	r0, [pc, #352]	; (8003eb8 <hf2_data_rx_cb+0x1a4>)
 8003d58:	f7ff ff42 	bl	8003be0 <assert.part.0>
    usb_assert(pkt->size + size <= (int) HF2_BUF_SIZE /* Was sizeof(pkt->buf) */, bad_packet_message);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f005 063f 	and.w	r6, r5, #63	; 0x3f
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	4433      	add	r3, r6
    if (assertion) { return; }
 8003d66:	f5b3 6f88 	cmp.w	r3, #1088	; 0x440
 8003d6a:	dd02      	ble.n	8003d72 <hf2_data_rx_cb+0x5e>
 8003d6c:	4852      	ldr	r0, [pc, #328]	; (8003eb8 <hf2_data_rx_cb+0x1a4>)
 8003d6e:	f7ff ff37 	bl	8003be0 <assert.part.0>
    memcpy(pkt->buf + pkt->size, rx_buf + 1, size);
 8003d72:	683c      	ldr	r4, [r7, #0]
 8003d74:	4632      	mov	r2, r6
 8003d76:	8823      	ldrh	r3, [r4, #0]
 8003d78:	1ca0      	adds	r0, r4, #2
 8003d7a:	4418      	add	r0, r3
 8003d7c:	494f      	ldr	r1, [pc, #316]	; (8003ebc <hf2_data_rx_cb+0x1a8>)
 8003d7e:	f7fe fc5b 	bl	8002638 <memcpy>
    pkt->size += size;
 8003d82:	8822      	ldrh	r2, [r4, #0]
    if (tag != HF2_FLAG_CMDPKT_BODY) {
 8003d84:	f015 03c0 	ands.w	r3, r5, #192	; 0xc0
    pkt->size += size;
 8003d88:	4432      	add	r2, r6
 8003d8a:	8022      	strh	r2, [r4, #0]
    if (tag != HF2_FLAG_CMDPKT_BODY) {
 8003d8c:	d075      	beq.n	8003e7a <hf2_data_rx_cb+0x166>
        if (tag == HF2_FLAG_CMDPKT_LAST) {
 8003d8e:	2b40      	cmp	r3, #64	; 0x40
 8003d90:	d16f      	bne.n	8003e72 <hf2_data_rx_cb+0x15e>
	if (!connected) {
 8003d92:	4b4b      	ldr	r3, [pc, #300]	; (8003ec0 <hf2_data_rx_cb+0x1ac>)
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	b92a      	cbnz	r2, 8003da4 <hf2_data_rx_cb+0x90>
		connected = 1;
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
		if (connected_func) { connected_func(); }
 8003d9c:	4b49      	ldr	r3, [pc, #292]	; (8003ec4 <hf2_data_rx_cb+0x1b0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	b103      	cbz	r3, 8003da4 <hf2_data_rx_cb+0x90>
 8003da2:	4798      	blx	r3
    resp->tag = cmd->tag;
 8003da4:	88e3      	ldrh	r3, [r4, #6]
    uint32_t cmdId = cmd->command_id;
 8003da6:	f8d4 5002 	ldr.w	r5, [r4, #2]
    resp->tag = cmd->tag;
 8003daa:	8063      	strh	r3, [r4, #2]
    resp->status16 = HF2_STATUS_OK;  //  Default status is OK.
 8003dac:	2300      	movs	r3, #0
 8003dae:	7123      	strb	r3, [r4, #4]
 8003db0:	7163      	strb	r3, [r4, #5]
    switch (cmdId) {
 8003db2:	1e6b      	subs	r3, r5, #1
    int sz = pkt->size;
 8003db4:	8826      	ldrh	r6, [r4, #0]
    switch (cmdId) {
 8003db6:	2b07      	cmp	r3, #7
 8003db8:	f200 81fe 	bhi.w	80041b8 <hf2_data_rx_cb+0x4a4>
 8003dbc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003dc0:	00320008 	.word	0x00320008
 8003dc4:	01dc01d2 	.word	0x01dc01d2
 8003dc8:	0060004a 	.word	0x0060004a
 8003dcc:	01e201fc 	.word	0x01e201fc
        case HF2_CMD_BININFO: {  debug_println("hf2 >> bininfo");
 8003dd0:	483d      	ldr	r0, [pc, #244]	; (8003ec8 <hf2_data_rx_cb+0x1b4>)
 8003dd2:	f7fe fd65 	bl	80028a0 <debug_println>
            resp->bininfo.mode = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?                        
 8003dd6:	f7ff f98d 	bl	80030f4 <boot_target_get_startup_mode>
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8003dda:	2300      	movs	r3, #0
 8003ddc:	72a3      	strb	r3, [r4, #10]
 8003dde:	7323      	strb	r3, [r4, #12]
 8003de0:	7363      	strb	r3, [r4, #13]
            resp->bininfo.flash_num_pages = FLASH_SIZE_OVERRIDE / HF2_PAGE_SIZE;
 8003de2:	73a3      	strb	r3, [r4, #14]
 8003de4:	7423      	strb	r3, [r4, #16]
 8003de6:	7463      	strb	r3, [r4, #17]
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 8003de8:	7523      	strb	r3, [r4, #20]
 8003dea:	7563      	strb	r3, [r4, #21]
            resp->bininfo.uf2_family = UF2_FAMILY;
 8003dec:	2372      	movs	r3, #114	; 0x72
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8003dee:	2201      	movs	r2, #1
            resp->bininfo.uf2_family = UF2_FAMILY;
 8003df0:	75a3      	strb	r3, [r4, #22]
 8003df2:	2310      	movs	r3, #16
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8003df4:	72e2      	strb	r2, [r4, #11]
            resp->bininfo.flash_num_pages = FLASH_SIZE_OVERRIDE / HF2_PAGE_SIZE;
 8003df6:	73e2      	strb	r2, [r4, #15]
            resp->bininfo.uf2_family = UF2_FAMILY;
 8003df8:	75e3      	strb	r3, [r4, #23]
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 8003dfa:	2240      	movs	r2, #64	; 0x40
            resp->bininfo.uf2_family = UF2_FAMILY;
 8003dfc:	f06f 031d 	mvn.w	r3, #29
                HF2_MODE_BOOTLOADER :
 8003e00:	2802      	cmp	r0, #2
 8003e02:	bf18      	it	ne
 8003e04:	2502      	movne	r5, #2
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 8003e06:	74a2      	strb	r2, [r4, #18]
            resp->bininfo.uf2_family = UF2_FAMILY;
 8003e08:	7623      	strb	r3, [r4, #24]
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 8003e0a:	2204      	movs	r2, #4
            resp->bininfo.uf2_family = UF2_FAMILY;
 8003e0c:	235e      	movs	r3, #94	; 0x5e
            send_hf2_response(pkt, sizeof(resp->bininfo)); debug_force_flush(); ////
 8003e0e:	2114      	movs	r1, #20
            resp->bininfo.mode = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?                        
 8003e10:	f8c4 5006 	str.w	r5, [r4, #6]
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 8003e14:	74e2      	strb	r2, [r4, #19]
            resp->bininfo.uf2_family = UF2_FAMILY;
 8003e16:	7663      	strb	r3, [r4, #25]
            send_hf2_response(pkt, 0);
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f000 fb33 	bl	8004484 <send_hf2_response>
            debug_force_flush(); ////
 8003e1e:	f7fe fcdb 	bl	80027d8 <debug_force_flush>
 8003e22:	e026      	b.n	8003e72 <hf2_data_rx_cb+0x15e>
        case HF2_CMD_INFO: { debug_println("hf2 >> info");
 8003e24:	4829      	ldr	r0, [pc, #164]	; (8003ecc <hf2_data_rx_cb+0x1b8>)
 8003e26:	f7fe fd3b 	bl	80028a0 <debug_println>
            int info_size = strlen(infoUf2File);
 8003e2a:	4829      	ldr	r0, [pc, #164]	; (8003ed0 <hf2_data_rx_cb+0x1bc>)
 8003e2c:	f7fe fc22 	bl	8002674 <strlen>
    if (assertion) { return; }
 8003e30:	4605      	mov	r5, r0
 8003e32:	b910      	cbnz	r0, 8003e3a <hf2_data_rx_cb+0x126>
 8003e34:	4827      	ldr	r0, [pc, #156]	; (8003ed4 <hf2_data_rx_cb+0x1c0>)
 8003e36:	f7ff fed3 	bl	8003be0 <assert.part.0>
            assert((info_size + 4) < (int) HF2_MINI_BUF_SIZE, "hf2 buf too small");
 8003e3a:	1d2b      	adds	r3, r5, #4
    if (assertion) { return; }
 8003e3c:	2b58      	cmp	r3, #88	; 0x58
 8003e3e:	dd02      	ble.n	8003e46 <hf2_data_rx_cb+0x132>
 8003e40:	4825      	ldr	r0, [pc, #148]	; (8003ed8 <hf2_data_rx_cb+0x1c4>)
 8003e42:	f7ff fecd 	bl	8003be0 <assert.part.0>
            memcpy(pkt->resp.data8, infoUf2File, info_size);
 8003e46:	4922      	ldr	r1, [pc, #136]	; (8003ed0 <hf2_data_rx_cb+0x1bc>)
 8003e48:	462a      	mov	r2, r5
 8003e4a:	1da0      	adds	r0, r4, #6
 8003e4c:	f7fe fbf4 	bl	8002638 <memcpy>
            send_hf2_response(pkt, info_size); debug_force_flush(); ////
 8003e50:	4629      	mov	r1, r5
 8003e52:	e7e1      	b.n	8003e18 <hf2_data_rx_cb+0x104>
        case HF2_CMD_START_FLASH: { debug_println("hf2 >> start");
 8003e54:	4821      	ldr	r0, [pc, #132]	; (8003edc <hf2_data_rx_cb+0x1c8>)
 8003e56:	f7fe fd23 	bl	80028a0 <debug_println>
            send_hf2_response(pkt, 0); debug_force_flush(); ////            
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4620      	mov	r0, r4
 8003e5e:	f000 fb11 	bl	8004484 <send_hf2_response>
 8003e62:	f7fe fcb9 	bl	80027d8 <debug_force_flush>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 8003e66:	f7ff f945 	bl	80030f4 <boot_target_get_startup_mode>
 8003e6a:	2803      	cmp	r0, #3
 8003e6c:	d101      	bne.n	8003e72 <hf2_data_rx_cb+0x15e>
                boot_target_manifest_bootloader();  //  Never returns.
 8003e6e:	f7ff fa4f 	bl	8003310 <boot_target_manifest_bootloader>
        pkt->size = 0;
 8003e72:	2200      	movs	r2, #0
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	701a      	strb	r2, [r3, #0]
 8003e78:	705a      	strb	r2, [r3, #1]
}
 8003e7a:	b003      	add	sp, #12
 8003e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { debug_println("hf2 >> flash");  debug_force_flush(); ////
 8003e80:	f7ff f938 	bl	80030f4 <boot_target_get_startup_mode>
 8003e84:	2803      	cmp	r0, #3
 8003e86:	d12f      	bne.n	8003ee8 <hf2_data_rx_cb+0x1d4>
 8003e88:	4815      	ldr	r0, [pc, #84]	; (8003ee0 <hf2_data_rx_cb+0x1cc>)
 8003e8a:	f7fe fd09 	bl	80028a0 <debug_println>
 8003e8e:	f7fe fca3 	bl	80027d8 <debug_force_flush>
                restart_request = BOOTLOADER_MODE; 
 8003e92:	2202      	movs	r2, #2
                send_hf2_response(pkt, 0);
 8003e94:	2100      	movs	r1, #0
                restart_request = BOOTLOADER_MODE; 
 8003e96:	4b13      	ldr	r3, [pc, #76]	; (8003ee4 <hf2_data_rx_cb+0x1d0>)
 8003e98:	701a      	strb	r2, [r3, #0]
    send_hf2_response(pkt, 0);
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f000 faf2 	bl	8004484 <send_hf2_response>
 8003ea0:	e7e7      	b.n	8003e72 <hf2_data_rx_cb+0x15e>
 8003ea2:	bf00      	nop
 8003ea4:	200006c4 	.word	0x200006c4
 8003ea8:	20000558 	.word	0x20000558
 8003eac:	20000548 	.word	0x20000548
 8003eb0:	20004bbc 	.word	0x20004bbc
 8003eb4:	2000084b 	.word	0x2000084b
 8003eb8:	08004d32 	.word	0x08004d32
 8003ebc:	200006c5 	.word	0x200006c5
 8003ec0:	200006c0 	.word	0x200006c0
 8003ec4:	20000534 	.word	0x20000534
 8003ec8:	08004d43 	.word	0x08004d43
 8003ecc:	08004d52 	.word	0x08004d52
 8003ed0:	080047aa 	.word	0x080047aa
 8003ed4:	08004d5e 	.word	0x08004d5e
 8003ed8:	08004d6d 	.word	0x08004d6d
 8003edc:	08004d7f 	.word	0x08004d7f
 8003ee0:	08004d8c 	.word	0x08004d8c
 8003ee4:	200006c3 	.word	0x200006c3
    uint32_t target_addr = cmd->write_flash_page.target_addr;
 8003ee8:	f8d4 500a 	ldr.w	r5, [r4, #10]
    int sz = pkt->size;
 8003eec:	f8b4 a000 	ldrh.w	sl, [r4]
    const char *valid = VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE) ? " " : " !!! ";
 8003ef0:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 8003ef4:	f0c0 80ca 	bcc.w	800408c <hf2_data_rx_cb+0x378>
 8003ef8:	49ba      	ldr	r1, [pc, #744]	; (80041e4 <hf2_data_rx_cb+0x4d0>)
 8003efa:	4bbb      	ldr	r3, [pc, #748]	; (80041e8 <hf2_data_rx_cb+0x4d4>)
 8003efc:	4abb      	ldr	r2, [pc, #748]	; (80041ec <hf2_data_rx_cb+0x4d8>)
 8003efe:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8003f02:	428e      	cmp	r6, r1
 8003f04:	bf94      	ite	ls
 8003f06:	461e      	movls	r6, r3
 8003f08:	4616      	movhi	r6, r2
    if (cmdId != prevCmdId) { debug_print("hf2 >> flash "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }  ////
 8003f0a:	4bb9      	ldr	r3, [pc, #740]	; (80041f0 <hf2_data_rx_cb+0x4dc>)
    cmdId = cmd->command_id;
 8003f0c:	f8d4 0002 	ldr.w	r0, [r4, #2]
    if (cmdId != prevCmdId) { debug_print("hf2 >> flash "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }  ////
 8003f10:	6819      	ldr	r1, [r3, #0]
    cmdId = cmd->command_id;
 8003f12:	4ab8      	ldr	r2, [pc, #736]	; (80041f4 <hf2_data_rx_cb+0x4e0>)
    if (cmdId != prevCmdId) { debug_print("hf2 >> flash "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }  ////
 8003f14:	4288      	cmp	r0, r1
    cmdId = cmd->command_id;
 8003f16:	6010      	str	r0, [r2, #0]
    if (cmdId != prevCmdId) { debug_print("hf2 >> flash "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }  ////
 8003f18:	bf14      	ite	ne
 8003f1a:	48b7      	ldrne	r0, [pc, #732]	; (80041f8 <hf2_data_rx_cb+0x4e4>)
    else { debug_print(">> "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }
 8003f1c:	48b7      	ldreq	r0, [pc, #732]	; (80041fc <hf2_data_rx_cb+0x4e8>)
 8003f1e:	4691      	mov	r9, r2
 8003f20:	4698      	mov	r8, r3
 8003f22:	f7fe fcda 	bl	80028da <debug_print>
 8003f26:	4628      	mov	r0, r5
 8003f28:	f7fe fd09 	bl	800293e <debug_printhex_unsigned>
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	f7fe fcd4 	bl	80028da <debug_print>
    if (flush_count++ % 4 == 0) { debug_flush(); }
 8003f32:	4ab3      	ldr	r2, [pc, #716]	; (8004200 <hf2_data_rx_cb+0x4ec>)
 8003f34:	7813      	ldrb	r3, [r2, #0]
 8003f36:	1c59      	adds	r1, r3, #1
 8003f38:	079b      	lsls	r3, r3, #30
 8003f3a:	7011      	strb	r1, [r2, #0]
 8003f3c:	d101      	bne.n	8003f42 <hf2_data_rx_cb+0x22e>
 8003f3e:	f7fe fcc9 	bl	80028d4 <debug_flush>
    prevCmdId = cmdId; 
 8003f42:	f8d9 3000 	ldr.w	r3, [r9]
    send_hf2_response(pkt, 0);
 8003f46:	4620      	mov	r0, r4
 8003f48:	2100      	movs	r1, #0
    prevCmdId = cmdId; 
 8003f4a:	f8c8 3000 	str.w	r3, [r8]
    send_hf2_response(pkt, 0);
 8003f4e:	f000 fa99 	bl	8004484 <send_hf2_response>
    const uint32_t old_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);  //  Bootloader will be staged here for Baseloader.
 8003f52:	4bac      	ldr	r3, [pc, #688]	; (8004204 <hf2_data_rx_cb+0x4f0>)
 8003f54:	f8df 931c 	ldr.w	r9, [pc, #796]	; 8004274 <hf2_data_rx_cb+0x560>
 8003f58:	691e      	ldr	r6, [r3, #16]
 8003f5a:	469b      	mov	fp, r3
 8003f5c:	f426 767f 	bic.w	r6, r6, #1020	; 0x3fc
 8003f60:	f026 0603 	bic.w	r6, r6, #3
    const uint32_t old_app_start_offset = old_app_start - FLASH_BASE;  //  When writing Bootloader, shift by this offset so we don't overwrite the existing Bootloader.
 8003f64:	f106 4278 	add.w	r2, r6, #4160749568	; 0xf8000000
 8003f68:	9200      	str	r2, [sp, #0]
    if (new_app_start == 0 || target_addr == FLASH_BASE) {
 8003f6a:	4aa7      	ldr	r2, [pc, #668]	; (8004208 <hf2_data_rx_cb+0x4f4>)
 8003f6c:	6810      	ldr	r0, [r2, #0]
 8003f6e:	4690      	mov	r8, r2
 8003f70:	b110      	cbz	r0, 8003f78 <hf2_data_rx_cb+0x264>
 8003f72:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 8003f76:	d119      	bne.n	8003fac <hf2_data_rx_cb+0x298>
        debug_println("find vector..."); debug_force_flush();
 8003f78:	48a4      	ldr	r0, [pc, #656]	; (800420c <hf2_data_rx_cb+0x4f8>)
 8003f7a:	f7fe fc91 	bl	80028a0 <debug_println>
 8003f7e:	f7fe fc2b 	bl	80027d8 <debug_force_flush>
        new_base_vector = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c9 3000 	str.w	r3, [r9]
        new_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);
 8003f88:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003f8c:	f423 727f 	bic.w	r2, r3, #1020	; 0x3fc
 8003f90:	f022 0203 	bic.w	r2, r2, #3
 8003f94:	f8c8 2000 	str.w	r2, [r8]
        new_bootloader_size = (uint32_t) base_vector_table.application - FLASH_BASE;
 8003f98:	4a9d      	ldr	r2, [pc, #628]	; (8004210 <hf2_data_rx_cb+0x4fc>)
 8003f9a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8003f9e:	6013      	str	r3, [r2, #0]
        new_baseloader_size = (uint32_t) base_vector_table.baseloader_end - FLASH_BASE;
 8003fa0:	f8db 300c 	ldr.w	r3, [fp, #12]
 8003fa4:	4a9b      	ldr	r2, [pc, #620]	; (8004214 <hf2_data_rx_cb+0x500>)
 8003fa6:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8003faa:	6013      	str	r3, [r2, #0]
    if (!new_base_vector && IS_VALID_BASE_VECTOR_TABLE(old_app_start)) {
 8003fac:	f8d9 3000 	ldr.w	r3, [r9]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d139      	bne.n	8004028 <hf2_data_rx_cb+0x314>
 8003fb4:	f3cb 0309 	ubfx	r3, fp, #0, #10
 8003fb8:	4333      	orrs	r3, r6
 8003fba:	6818      	ldr	r0, [r3, #0]
 8003fbc:	4a96      	ldr	r2, [pc, #600]	; (8004218 <hf2_data_rx_cb+0x504>)
 8003fbe:	4290      	cmp	r0, r2
 8003fc0:	d132      	bne.n	8004028 <hf2_data_rx_cb+0x314>
 8003fc2:	6958      	ldr	r0, [r3, #20]
 8003fc4:	4a95      	ldr	r2, [pc, #596]	; (800421c <hf2_data_rx_cb+0x508>)
 8003fc6:	4290      	cmp	r0, r2
 8003fc8:	d12e      	bne.n	8004028 <hf2_data_rx_cb+0x314>
        new_base_vector = BASE_VECTOR_TABLE(old_app_start);
 8003fca:	f8c9 3000 	str.w	r3, [r9]
        new_app_start = (uint32_t) FLASH_ADDRESS(new_base_vector->application);
 8003fce:	691a      	ldr	r2, [r3, #16]
        new_bootloader_size = new_app_start - FLASH_BASE;
 8003fd0:	f8df b23c 	ldr.w	fp, [pc, #572]	; 8004210 <hf2_data_rx_cb+0x4fc>
        new_app_start = (uint32_t) FLASH_ADDRESS(new_base_vector->application);
 8003fd4:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8003fd8:	f022 0203 	bic.w	r2, r2, #3
 8003fdc:	f8c8 2000 	str.w	r2, [r8]
        new_bootloader_size = new_app_start - FLASH_BASE;
 8003fe0:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 8003fe4:	f8cb 2000 	str.w	r2, [fp]
        new_baseloader_size = (uint32_t) (new_base_vector->baseloader_end) - FLASH_BASE;
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	4a8a      	ldr	r2, [pc, #552]	; (8004214 <hf2_data_rx_cb+0x500>)
 8003fec:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
        debug_print("found vector, app "); debug_printhex_unsigned(new_app_start);
 8003ff0:	488b      	ldr	r0, [pc, #556]	; (8004220 <hf2_data_rx_cb+0x50c>)
        new_baseloader_size = (uint32_t) (new_base_vector->baseloader_end) - FLASH_BASE;
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	9201      	str	r2, [sp, #4]
        debug_print("found vector, app "); debug_printhex_unsigned(new_app_start);
 8003ff6:	f7fe fc70 	bl	80028da <debug_print>
 8003ffa:	f8d8 0000 	ldr.w	r0, [r8]
 8003ffe:	f7fe fc9e 	bl	800293e <debug_printhex_unsigned>
        debug_print(", boot size "); debug_printhex_unsigned(new_bootloader_size);
 8004002:	4888      	ldr	r0, [pc, #544]	; (8004224 <hf2_data_rx_cb+0x510>)
 8004004:	f7fe fc69 	bl	80028da <debug_print>
 8004008:	f8db 0000 	ldr.w	r0, [fp]
 800400c:	f7fe fc97 	bl	800293e <debug_printhex_unsigned>
        debug_print(", base size "); debug_printhex_unsigned(new_baseloader_size);
 8004010:	4885      	ldr	r0, [pc, #532]	; (8004228 <hf2_data_rx_cb+0x514>)
 8004012:	f7fe fc62 	bl	80028da <debug_print>
 8004016:	9a01      	ldr	r2, [sp, #4]
 8004018:	6810      	ldr	r0, [r2, #0]
 800401a:	f7fe fc90 	bl	800293e <debug_printhex_unsigned>
        debug_println(""); debug_force_flush();
 800401e:	4883      	ldr	r0, [pc, #524]	; (800422c <hf2_data_rx_cb+0x518>)
 8004020:	f7fe fc3e 	bl	80028a0 <debug_println>
 8004024:	f7fe fbd8 	bl	80027d8 <debug_force_flush>
    if (target_addr < new_app_start) {  //  If writing Bootloader Page...
 8004028:	f8d8 3000 	ldr.w	r3, [r8]
 800402c:	429d      	cmp	r5, r3
 800402e:	d22f      	bcs.n	8004090 <hf2_data_rx_cb+0x37c>
        target_addr += old_app_start_offset;
 8004030:	9b00      	ldr	r3, [sp, #0]
 8004032:	441d      	add	r5, r3
        if (!VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE)) { debug_print("*** ERROR: Invalid addr "); debug_printhex_unsigned(target_addr); debug_println(""); debug_force_flush(); }
 8004034:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 8004038:	d305      	bcc.n	8004046 <hf2_data_rx_cb+0x332>
 800403a:	4b6a      	ldr	r3, [pc, #424]	; (80041e4 <hf2_data_rx_cb+0x4d0>)
 800403c:	f505 7280 	add.w	r2, r5, #256	; 0x100
 8004040:	429a      	cmp	r2, r3
 8004042:	f240 80c9 	bls.w	80041d8 <hf2_data_rx_cb+0x4c4>
 8004046:	487a      	ldr	r0, [pc, #488]	; (8004230 <hf2_data_rx_cb+0x51c>)
 8004048:	f7fe fc47 	bl	80028da <debug_print>
 800404c:	4628      	mov	r0, r5
        debug_print(", size "); debug_printhex_unsigned(new_bootloader_size);
 800404e:	f7fe fc76 	bl	800293e <debug_printhex_unsigned>
        debug_println(""); debug_force_flush();
 8004052:	4876      	ldr	r0, [pc, #472]	; (800422c <hf2_data_rx_cb+0x518>)
 8004054:	f7fe fc24 	bl	80028a0 <debug_println>
 8004058:	f7fe fbbe 	bl	80027d8 <debug_force_flush>
    if (assertion) { return; }
 800405c:	f5ba 7f86 	cmp.w	sl, #268	; 0x10c
 8004060:	d002      	beq.n	8004068 <hf2_data_rx_cb+0x354>
 8004062:	4874      	ldr	r0, [pc, #464]	; (8004234 <hf2_data_rx_cb+0x520>)
 8004064:	f7ff fdbc 	bl	8003be0 <assert.part.0>
    if (VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE)) {
 8004068:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
 800406c:	f4ff af01 	bcc.w	8003e72 <hf2_data_rx_cb+0x15e>
 8004070:	4b5c      	ldr	r3, [pc, #368]	; (80041e4 <hf2_data_rx_cb+0x4d0>)
 8004072:	f505 7280 	add.w	r2, r5, #256	; 0x100
 8004076:	429a      	cmp	r2, r3
 8004078:	f63f aefb 	bhi.w	8003e72 <hf2_data_rx_cb+0x15e>
        flash_write(target_addr, data, HF2_PAGE_SIZE);
 800407c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004080:	f104 010e 	add.w	r1, r4, #14
 8004084:	4628      	mov	r0, r5
 8004086:	f7fe ffc5 	bl	8003014 <flash_write>
 800408a:	e6f2      	b.n	8003e72 <hf2_data_rx_cb+0x15e>
    const char *valid = VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE) ? " " : " !!! ";
 800408c:	4e57      	ldr	r6, [pc, #348]	; (80041ec <hf2_data_rx_cb+0x4d8>)
 800408e:	e73c      	b.n	8003f0a <hf2_data_rx_cb+0x1f6>
    }  else if (new_base_vector && (target_addr == new_app_start)) {  //  When we are finished writing the Bootloader and now writing first Application Page...
 8004090:	f8d9 2000 	ldr.w	r2, [r9]
 8004094:	2a00      	cmp	r2, #0
 8004096:	d0e1      	beq.n	800405c <hf2_data_rx_cb+0x348>
 8004098:	429d      	cmp	r5, r3
 800409a:	d1df      	bne.n	800405c <hf2_data_rx_cb+0x348>
        debug_println("wrote bootloader"); debug_force_flush();
 800409c:	4866      	ldr	r0, [pc, #408]	; (8004238 <hf2_data_rx_cb+0x524>)
        int bootloader_changed = memcmp((void *) old_app_start, (void *) FLASH_BASE, new_bootloader_size);
 800409e:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8004210 <hf2_data_rx_cb+0x4fc>
        debug_println("wrote bootloader"); debug_force_flush();
 80040a2:	f7fe fbfd 	bl	80028a0 <debug_println>
 80040a6:	f7fe fb97 	bl	80027d8 <debug_force_flush>
        flash_flush();  //  Flush the last Bootloader page.
 80040aa:	f7fe ff6b 	bl	8002f84 <flash_flush>
        debug_println("compare bootloader..."); debug_force_flush();
 80040ae:	4863      	ldr	r0, [pc, #396]	; (800423c <hf2_data_rx_cb+0x528>)
 80040b0:	f7fe fbf6 	bl	80028a0 <debug_println>
 80040b4:	f7fe fb90 	bl	80027d8 <debug_force_flush>
        int bootloader_changed = memcmp((void *) old_app_start, (void *) FLASH_BASE, new_bootloader_size);
 80040b8:	f8d8 2000 	ldr.w	r2, [r8]
 80040bc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80040c0:	4630      	mov	r0, r6
 80040c2:	f7fe faaa 	bl	800261a <memcmp>
        if (bootloader_changed) {
 80040c6:	2800      	cmp	r0, #0
 80040c8:	d040      	beq.n	800414c <hf2_data_rx_cb+0x438>
            debug_println("bootloader changed"); debug_force_flush();
 80040ca:	485d      	ldr	r0, [pc, #372]	; (8004240 <hf2_data_rx_cb+0x52c>)
 80040cc:	f7fe fbe8 	bl	80028a0 <debug_println>
 80040d0:	f7fe fb82 	bl	80027d8 <debug_force_flush>
            uint32_t new_baseloader_addr = target_addr + old_app_start_offset;
 80040d4:	9b00      	ldr	r3, [sp, #0]
            debug_print("copy baseloader to "); debug_printhex_unsigned(new_baseloader_addr); 
 80040d6:	485b      	ldr	r0, [pc, #364]	; (8004244 <hf2_data_rx_cb+0x530>)
            uint32_t new_baseloader_addr = target_addr + old_app_start_offset;
 80040d8:	441d      	add	r5, r3
            debug_print(", size "); debug_printhex_unsigned(new_baseloader_size);
 80040da:	4c4e      	ldr	r4, [pc, #312]	; (8004214 <hf2_data_rx_cb+0x500>)
            debug_print("copy baseloader to "); debug_printhex_unsigned(new_baseloader_addr); 
 80040dc:	f7fe fbfd 	bl	80028da <debug_print>
 80040e0:	4628      	mov	r0, r5
 80040e2:	f7fe fc2c 	bl	800293e <debug_printhex_unsigned>
            debug_print(", size "); debug_printhex_unsigned(new_baseloader_size);
 80040e6:	4858      	ldr	r0, [pc, #352]	; (8004248 <hf2_data_rx_cb+0x534>)
 80040e8:	f7fe fbf7 	bl	80028da <debug_print>
 80040ec:	6820      	ldr	r0, [r4, #0]
 80040ee:	f7fe fc26 	bl	800293e <debug_printhex_unsigned>
            debug_println(""); debug_force_flush();
 80040f2:	484e      	ldr	r0, [pc, #312]	; (800422c <hf2_data_rx_cb+0x518>)
 80040f4:	f7fe fbd4 	bl	80028a0 <debug_println>
 80040f8:	f7fe fb6e 	bl	80027d8 <debug_force_flush>
            flash_write(new_baseloader_addr, (const uint8_t *) old_app_start, new_baseloader_size);
 80040fc:	6822      	ldr	r2, [r4, #0]
 80040fe:	4631      	mov	r1, r6
 8004100:	4628      	mov	r0, r5
 8004102:	f7fe ff87 	bl	8003014 <flash_write>
            flash_flush();
 8004106:	f7fe ff3d 	bl	8002f84 <flash_flush>
            debug_print("restart to baseloader "); debug_printhex_unsigned(new_baseloader_addr);
 800410a:	4850      	ldr	r0, [pc, #320]	; (800424c <hf2_data_rx_cb+0x538>)
 800410c:	f7fe fbe5 	bl	80028da <debug_print>
 8004110:	4628      	mov	r0, r5
 8004112:	f7fe fc14 	bl	800293e <debug_printhex_unsigned>
            debug_print(", baselen "); debug_printhex_unsigned(new_baseloader_size);
 8004116:	484e      	ldr	r0, [pc, #312]	; (8004250 <hf2_data_rx_cb+0x53c>)
 8004118:	f7fe fbdf 	bl	80028da <debug_print>
 800411c:	6820      	ldr	r0, [r4, #0]
 800411e:	f7fe fc0e 	bl	800293e <debug_printhex_unsigned>
            debug_print(", oldapp "); debug_printhex_unsigned(old_app_start);
 8004122:	484c      	ldr	r0, [pc, #304]	; (8004254 <hf2_data_rx_cb+0x540>)
 8004124:	f7fe fbd9 	bl	80028da <debug_print>
 8004128:	4630      	mov	r0, r6
 800412a:	f7fe fc08 	bl	800293e <debug_printhex_unsigned>
            debug_print(", bootlen "); debug_printhex_unsigned(new_bootloader_size);
 800412e:	484a      	ldr	r0, [pc, #296]	; (8004258 <hf2_data_rx_cb+0x544>)
 8004130:	f7fe fbd3 	bl	80028da <debug_print>
 8004134:	f8d8 0000 	ldr.w	r0, [r8]
 8004138:	f7fe fc01 	bl	800293e <debug_printhex_unsigned>
            debug_println(""); debug_force_flush();
 800413c:	483b      	ldr	r0, [pc, #236]	; (800422c <hf2_data_rx_cb+0x518>)
 800413e:	f7fe fbaf 	bl	80028a0 <debug_println>
 8004142:	f7fe fb49 	bl	80027d8 <debug_force_flush>
            boot_target_manifest_baseloader();  //  Never returns.
 8004146:	f7ff f8d3 	bl	80032f0 <boot_target_manifest_baseloader>
 800414a:	e692      	b.n	8003e72 <hf2_data_rx_cb+0x15e>
        debug_print("bootloader identical "); debug_printhex_unsigned(old_app_start);
 800414c:	4843      	ldr	r0, [pc, #268]	; (800425c <hf2_data_rx_cb+0x548>)
 800414e:	f7fe fbc4 	bl	80028da <debug_print>
 8004152:	4630      	mov	r0, r6
 8004154:	f7fe fbf3 	bl	800293e <debug_printhex_unsigned>
        debug_print(", size "); debug_printhex_unsigned(new_bootloader_size);
 8004158:	483b      	ldr	r0, [pc, #236]	; (8004248 <hf2_data_rx_cb+0x534>)
 800415a:	f7fe fbbe 	bl	80028da <debug_print>
 800415e:	f8d8 0000 	ldr.w	r0, [r8]
 8004162:	e774      	b.n	800404e <hf2_data_rx_cb+0x33a>
        case HF2_CMD_RESET_INTO_APP: { debug_println("hf2 >> app");
 8004164:	483e      	ldr	r0, [pc, #248]	; (8004260 <hf2_data_rx_cb+0x54c>)
 8004166:	f7fe fb9b 	bl	80028a0 <debug_println>
            flash_flush();  //  Flush any pending flash writes.
 800416a:	f7fe ff0b 	bl	8002f84 <flash_flush>
            restart_request = APPLICATION_MODE;
 800416e:	2203      	movs	r2, #3
 8004170:	4b3c      	ldr	r3, [pc, #240]	; (8004264 <hf2_data_rx_cb+0x550>)
            restart_request = BOOTLOADER_MODE;
 8004172:	701a      	strb	r2, [r3, #0]
            send_hf2_response(pkt, 0);
 8004174:	2100      	movs	r1, #0
 8004176:	e64f      	b.n	8003e18 <hf2_data_rx_cb+0x104>
            debug_println("hf2 >> boot");
 8004178:	483b      	ldr	r0, [pc, #236]	; (8004268 <hf2_data_rx_cb+0x554>)
 800417a:	f7fe fb91 	bl	80028a0 <debug_println>
            restart_request = BOOTLOADER_MODE;
 800417e:	4b39      	ldr	r3, [pc, #228]	; (8004264 <hf2_data_rx_cb+0x550>)
 8004180:	2202      	movs	r2, #2
 8004182:	e7f6      	b.n	8004172 <hf2_data_rx_cb+0x45e>
        case HF2_CMD_READ_WORDS: { debug_println("hf2 >> read"); debug_force_flush(); ////
 8004184:	4839      	ldr	r0, [pc, #228]	; (800426c <hf2_data_rx_cb+0x558>)
 8004186:	f7fe fb8b 	bl	80028a0 <debug_println>
 800418a:	f7fe fb25 	bl	80027d8 <debug_force_flush>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 800418e:	f7fe ffb1 	bl	80030f4 <boot_target_get_startup_mode>
 8004192:	2803      	cmp	r0, #3
 8004194:	f43f ae7d 	beq.w	8003e92 <hf2_data_rx_cb+0x17e>
    if (assertion) { return; }
 8004198:	2e10      	cmp	r6, #16
 800419a:	d002      	beq.n	80041a2 <hf2_data_rx_cb+0x48e>
 800419c:	4825      	ldr	r0, [pc, #148]	; (8004234 <hf2_data_rx_cb+0x520>)
 800419e:	f7ff fd1f 	bl	8003be0 <assert.part.0>
            int num_words = cmd->read_words.num_words;
 80041a2:	f8d4 500e 	ldr.w	r5, [r4, #14]
            memcpy(resp->data32, (void *)cmd->read_words.target_addr, num_words << 2);
 80041a6:	f8d4 100a 	ldr.w	r1, [r4, #10]
 80041aa:	00ad      	lsls	r5, r5, #2
 80041ac:	462a      	mov	r2, r5
 80041ae:	1da0      	adds	r0, r4, #6
 80041b0:	f7fe fa42 	bl	8002638 <memcpy>
            send_hf2_response(pkt, num_words << 2);
 80041b4:	4629      	mov	r1, r5
 80041b6:	e670      	b.n	8003e9a <hf2_data_rx_cb+0x186>
        default: { debug_print("hf2 >> unknown "); debug_print_unsigned(cmdId); debug_println(""); debug_force_flush(); ////
 80041b8:	482d      	ldr	r0, [pc, #180]	; (8004270 <hf2_data_rx_cb+0x55c>)
 80041ba:	f7fe fb8e 	bl	80028da <debug_print>
 80041be:	4628      	mov	r0, r5
 80041c0:	f7fe fb9a 	bl	80028f8 <debug_print_unsigned>
 80041c4:	4819      	ldr	r0, [pc, #100]	; (800422c <hf2_data_rx_cb+0x518>)
 80041c6:	f7fe fb6b 	bl	80028a0 <debug_println>
 80041ca:	f7fe fb05 	bl	80027d8 <debug_force_flush>
            resp->status16 = HF2_STATUS_INVALID_CMD;
 80041ce:	2100      	movs	r1, #0
 80041d0:	2301      	movs	r3, #1
 80041d2:	7161      	strb	r1, [r4, #5]
 80041d4:	7123      	strb	r3, [r4, #4]
 80041d6:	e660      	b.n	8003e9a <hf2_data_rx_cb+0x186>
    if (assertion) { return; }
 80041d8:	f5ba 7f86 	cmp.w	sl, #268	; 0x10c
 80041dc:	f43f af48 	beq.w	8004070 <hf2_data_rx_cb+0x35c>
 80041e0:	e73f      	b.n	8004062 <hf2_data_rx_cb+0x34e>
 80041e2:	bf00      	nop
 80041e4:	08010000 	.word	0x08010000
 80041e8:	08004a14 	.word	0x08004a14
 80041ec:	08004d3d 	.word	0x08004d3d
 80041f0:	2000054c 	.word	0x2000054c
 80041f4:	20000530 	.word	0x20000530
 80041f8:	08004d99 	.word	0x08004d99
 80041fc:	080048ca 	.word	0x080048ca
 8004200:	200006c1 	.word	0x200006c1
 8004204:	08000150 	.word	0x08000150
 8004208:	20000538 	.word	0x20000538
 800420c:	08004da7 	.word	0x08004da7
 8004210:	20000544 	.word	0x20000544
 8004214:	20000540 	.word	0x20000540
 8004218:	22051969 	.word	0x22051969
 800421c:	19690522 	.word	0x19690522
 8004220:	08004db6 	.word	0x08004db6
 8004224:	08004dc9 	.word	0x08004dc9
 8004228:	08004dd6 	.word	0x08004dd6
 800422c:	0800459e 	.word	0x0800459e
 8004230:	08004de3 	.word	0x08004de3
 8004234:	08004e8a 	.word	0x08004e8a
 8004238:	08004dfc 	.word	0x08004dfc
 800423c:	08004e0d 	.word	0x08004e0d
 8004240:	08004e23 	.word	0x08004e23
 8004244:	08004e36 	.word	0x08004e36
 8004248:	08004e4a 	.word	0x08004e4a
 800424c:	08004e52 	.word	0x08004e52
 8004250:	08004e69 	.word	0x08004e69
 8004254:	080046e0 	.word	0x080046e0
 8004258:	080046ea 	.word	0x080046ea
 800425c:	08004e74 	.word	0x08004e74
 8004260:	08004eaa 	.word	0x08004eaa
 8004264:	200006c3 	.word	0x200006c3
 8004268:	08004eb5 	.word	0x08004eb5
 800426c:	08004ec1 	.word	0x08004ec1
 8004270:	08004ecd 	.word	0x08004ecd
 8004274:	2000053c 	.word	0x2000053c

08004278 <hf2_setup>:
void hf2_setup(usbd_device *usbd_dev, connected_callback *connected_func0) {
 8004278:	b538      	push	{r3, r4, r5, lr}
 800427a:	4604      	mov	r4, r0
 800427c:	460d      	mov	r5, r1
    debug_print("flash allow "); debug_printhex_unsigned(USER_FLASH_START); debug_print(" to "); debug_printhex_unsigned(USER_FLASH_END); debug_println("");  //  Show the addresses that flashing is allowed.
 800427e:	4814      	ldr	r0, [pc, #80]	; (80042d0 <hf2_setup+0x58>)
 8004280:	f7fe fb2b 	bl	80028da <debug_print>
 8004284:	4813      	ldr	r0, [pc, #76]	; (80042d4 <hf2_setup+0x5c>)
 8004286:	f7fe fb5a 	bl	800293e <debug_printhex_unsigned>
 800428a:	4813      	ldr	r0, [pc, #76]	; (80042d8 <hf2_setup+0x60>)
 800428c:	f7fe fb25 	bl	80028da <debug_print>
 8004290:	4812      	ldr	r0, [pc, #72]	; (80042dc <hf2_setup+0x64>)
 8004292:	f7fe fb54 	bl	800293e <debug_printhex_unsigned>
 8004296:	4812      	ldr	r0, [pc, #72]	; (80042e0 <hf2_setup+0x68>)
 8004298:	f7fe fb02 	bl	80028a0 <debug_println>
    _usbd_dev = usbd_dev;
 800429c:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <hf2_setup+0x6c>)
 800429e:	601c      	str	r4, [r3, #0]
    connected_func = connected_func0;  //  test_hf2(); ////
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <hf2_setup+0x70>)
 80042a2:	601d      	str	r5, [r3, #0]
    if (boot_target_get_startup_mode() == BOOTLOADER_MODE) {
 80042a4:	f7fe ff26 	bl	80030f4 <boot_target_get_startup_mode>
 80042a8:	2802      	cmp	r0, #2
 80042aa:	d105      	bne.n	80042b8 <hf2_setup+0x40>
        memset(&hf2_buffer, 0, sizeof(hf2_buffer));
 80042ac:	f240 4242 	movw	r2, #1090	; 0x442
 80042b0:	2100      	movs	r1, #0
 80042b2:	480e      	ldr	r0, [pc, #56]	; (80042ec <hf2_setup+0x74>)
 80042b4:	f7fe f9ce 	bl	8002654 <memset>
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
 80042b8:	490d      	ldr	r1, [pc, #52]	; (80042f0 <hf2_setup+0x78>)
 80042ba:	4620      	mov	r0, r4
 80042bc:	f7ff f908 	bl	80034d0 <aggregate_register_config_callback>
    if (status < 0) { debug_println("*** hf2_setup failed"); }
 80042c0:	2800      	cmp	r0, #0
 80042c2:	da04      	bge.n	80042ce <hf2_setup+0x56>
}
 80042c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (status < 0) { debug_println("*** hf2_setup failed"); }
 80042c8:	480a      	ldr	r0, [pc, #40]	; (80042f4 <hf2_setup+0x7c>)
 80042ca:	f7fe bae9 	b.w	80028a0 <debug_println>
}
 80042ce:	bd38      	pop	{r3, r4, r5, pc}
 80042d0:	08004eec 	.word	0x08004eec
 80042d4:	08007400 	.word	0x08007400
 80042d8:	08004e45 	.word	0x08004e45
 80042dc:	08010000 	.word	0x08010000
 80042e0:	0800459e 	.word	0x0800459e
 80042e4:	2000052c 	.word	0x2000052c
 80042e8:	20000534 	.word	0x20000534
 80042ec:	20004bbc 	.word	0x20004bbc
 80042f0:	08003ba1 	.word	0x08003ba1
 80042f4:	08004ef9 	.word	0x08004ef9

080042f8 <backup_write>:

#include "backup.h"

#define RTC_BKP_DR(reg)  MMIO16(BACKUP_REGS_BASE + 4 + (4 * (reg)))

void backup_write(enum BackupRegister reg, uint32_t value) {
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	460c      	mov	r4, r1
 80042fc:	4605      	mov	r5, r0
    rcc_periph_clock_enable(RCC_PWR);
 80042fe:	f44f 7067 	mov.w	r0, #924	; 0x39c
 8004302:	f7fd fc01 	bl	8001b08 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_BKP);
 8004306:	f240 309b 	movw	r0, #923	; 0x39b
 800430a:	f7fd fbfd 	bl	8001b08 <rcc_periph_clock_enable>

    pwr_disable_backup_domain_write_protect();
 800430e:	f7fd f839 	bl	8001384 <pwr_disable_backup_domain_write_protect>
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 8004312:	4b06      	ldr	r3, [pc, #24]	; (800432c <backup_write+0x34>)
 8004314:	b2a2      	uxth	r2, r4
 8004316:	f823 2035 	strh.w	r2, [r3, r5, lsl #3]
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 800431a:	0c24      	lsrs	r4, r4, #16
 800431c:	3304      	adds	r3, #4
 800431e:	f823 4035 	strh.w	r4, [r3, r5, lsl #3]
    pwr_enable_backup_domain_write_protect();
    //  Previously: (void)reg; *(volatile uint32_t*)0x2000f000 = value;
}
 8004322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    pwr_enable_backup_domain_write_protect();
 8004326:	f7fd b835 	b.w	8001394 <pwr_enable_backup_domain_write_protect>
 800432a:	bf00      	nop
 800432c:	40006c04 	.word	0x40006c04

08004330 <backup_read>:

uint32_t backup_read(enum BackupRegister reg) {
    //  Previously: (void)reg; return *(volatile uint32_t*)0x2000f000;
    uint32_t value = ((uint32_t)RTC_BKP_DR((int)reg*2+1) << 16)
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <backup_read+0x14>)
 8004332:	f833 2030 	ldrh.w	r2, [r3, r0, lsl #3]
                   | ((uint32_t)RTC_BKP_DR((int)reg*2) << 0);
 8004336:	3b04      	subs	r3, #4
 8004338:	f833 0030 	ldrh.w	r0, [r3, r0, lsl #3]
    return value;
}
 800433c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40006c08 	.word	0x40006c08

08004348 <usb21_set_config>:
		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NEXT_CALLBACK;
}

static void usb21_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8004348:	b508      	push	{r3, lr}
    //  debug_println("usb21_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 800434a:	22ff      	movs	r2, #255	; 0xff
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <usb21_set_config+0x20>)
 800434e:	2180      	movs	r1, #128	; 0x80
 8004350:	f7ff f8da 	bl	8003508 <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		&usb21_standard_get_descriptor);
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 8004354:	2800      	cmp	r0, #0
 8004356:	da06      	bge.n	8004366 <usb21_set_config+0x1e>
 8004358:	4804      	ldr	r0, [pc, #16]	; (800436c <usb21_set_config+0x24>)
 800435a:	f7fe faa1 	bl	80028a0 <debug_println>
}
 800435e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 8004362:	f7fe bab7 	b.w	80028d4 <debug_flush>
}
 8004366:	bd08      	pop	{r3, pc}
 8004368:	08004371 	.word	0x08004371
 800436c:	08004f1d 	.word	0x08004f1d

08004370 <usb21_standard_get_descriptor>:
											usbd_control_complete_callback* complete) {
 8004370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004374:	9301      	str	r3, [sp, #4]
	int descr_type = req->wValue >> 8;
 8004376:	884b      	ldrh	r3, [r1, #2]
											usbd_control_complete_callback* complete) {
 8004378:	4616      	mov	r6, r2
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	2b0f      	cmp	r3, #15
 800437e:	d154      	bne.n	800442a <usb21_standard_get_descriptor+0xba>
	if (!usb21_bos) {
 8004380:	4d2b      	ldr	r5, [pc, #172]	; (8004430 <usb21_standard_get_descriptor+0xc0>)
 8004382:	682c      	ldr	r4, [r5, #0]
 8004384:	b944      	cbnz	r4, 8004398 <usb21_standard_get_descriptor+0x28>
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
 8004386:	482b      	ldr	r0, [pc, #172]	; (8004434 <usb21_standard_get_descriptor+0xc4>)
 8004388:	f7fe fa8a 	bl	80028a0 <debug_println>
 800438c:	f7fe faa2 	bl	80028d4 <debug_flush>
 8004390:	4620      	mov	r0, r4
}
 8004392:	b003      	add	sp, #12
 8004394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR) {
 8004398:	784b      	ldrb	r3, [r1, #1]
 800439a:	2b06      	cmp	r3, #6
 800439c:	d145      	bne.n	800442a <usb21_standard_get_descriptor+0xba>
		dump_usb_request("bos", req); // debug_flush(); ////
 800439e:	4826      	ldr	r0, [pc, #152]	; (8004438 <usb21_standard_get_descriptor+0xc8>)
 80043a0:	f7ff f90c 	bl	80035bc <dump_usb_request>
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 80043a4:	682f      	ldr	r7, [r5, #0]
 80043a6:	9b01      	ldr	r3, [sp, #4]
	bytes_to_copy = MIN(len, bos->bLength);
 80043a8:	783c      	ldrb	r4, [r7, #0]
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 80043aa:	f8b3 9000 	ldrh.w	r9, [r3]
	totallen += bos->bLength;
 80043ae:	f04f 0800 	mov.w	r8, #0
	bytes_to_copy = MIN(len, bos->bLength);
 80043b2:	454c      	cmp	r4, r9
 80043b4:	bf28      	it	cs
 80043b6:	464c      	movcs	r4, r9
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 80043b8:	6833      	ldr	r3, [r6, #0]
	memcpy(buf, bos, bytes_to_copy);
 80043ba:	4622      	mov	r2, r4
 80043bc:	4618      	mov	r0, r3
 80043be:	4639      	mov	r1, r7
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 80043c0:	9300      	str	r3, [sp, #0]
	memcpy(buf, bos, bytes_to_copy);
 80043c2:	f7fe f939 	bl	8002638 <memcpy>
	buf += bytes_to_copy;
 80043c6:	9b00      	ldr	r3, [sp, #0]
	len -= bytes_to_copy;
 80043c8:	eba9 0604 	sub.w	r6, r9, r4
	totallen += bos->bLength;
 80043cc:	f897 a000 	ldrb.w	sl, [r7]
	buf += bytes_to_copy;
 80043d0:	4423      	add	r3, r4
	len -= bytes_to_copy;
 80043d2:	b2b6      	uxth	r6, r6
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 80043d4:	7939      	ldrb	r1, [r7, #4]
 80043d6:	fa1f f288 	uxth.w	r2, r8
 80043da:	4291      	cmp	r1, r2
 80043dc:	d809      	bhi.n	80043f2 <usb21_standard_get_descriptor+0x82>
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 80043de:	454c      	cmp	r4, r9
 80043e0:	bf28      	it	cs
 80043e2:	464c      	movcs	r4, r9
	*(uint16_t *)(tmpbuf + 2) = totallen;
 80043e4:	9b00      	ldr	r3, [sp, #0]
		return USBD_REQ_HANDLED;
 80043e6:	2001      	movs	r0, #1
	*(uint16_t *)(tmpbuf + 2) = totallen;
 80043e8:	f8a3 a002 	strh.w	sl, [r3, #2]
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 80043ec:	9b01      	ldr	r3, [sp, #4]
 80043ee:	801c      	strh	r4, [r3, #0]
		return USBD_REQ_HANDLED;
 80043f0:	e7cf      	b.n	8004392 <usb21_standard_get_descriptor+0x22>
			bos->capabilities[i];
 80043f2:	f8d7 2005 	ldr.w	r2, [r7, #5]
		memcpy(buf, cap, bytes_to_copy);
 80043f6:	4618      	mov	r0, r3
		const struct usb_device_capability_descriptor *cap =
 80043f8:	f852 b028 	ldr.w	fp, [r2, r8, lsl #2]
 80043fc:	f108 0801 	add.w	r8, r8, #1
		bytes_to_copy = MIN(len, cap->bLength);
 8004400:	f89b 5000 	ldrb.w	r5, [fp]
		memcpy(buf, cap, bytes_to_copy);
 8004404:	4659      	mov	r1, fp
		bytes_to_copy = MIN(len, cap->bLength);
 8004406:	42b5      	cmp	r5, r6
 8004408:	bf28      	it	cs
 800440a:	4635      	movcs	r5, r6
		memcpy(buf, cap, bytes_to_copy);
 800440c:	462a      	mov	r2, r5
 800440e:	f7fe f913 	bl	8002638 <memcpy>
 8004412:	4603      	mov	r3, r0
		totallen += cap->bLength;
 8004414:	f89b 2000 	ldrb.w	r2, [fp]
		len -= bytes_to_copy;
 8004418:	1b76      	subs	r6, r6, r5
		total += bytes_to_copy;
 800441a:	442c      	add	r4, r5
		totallen += cap->bLength;
 800441c:	4492      	add	sl, r2
		buf += bytes_to_copy;
 800441e:	442b      	add	r3, r5
		len -= bytes_to_copy;
 8004420:	b2b6      	uxth	r6, r6
		total += bytes_to_copy;
 8004422:	b2a4      	uxth	r4, r4
		totallen += cap->bLength;
 8004424:	fa1f fa8a 	uxth.w	sl, sl
 8004428:	e7d4      	b.n	80043d4 <usb21_standard_get_descriptor+0x64>
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 800442a:	2002      	movs	r0, #2
 800442c:	e7b1      	b.n	8004392 <usb21_standard_get_descriptor+0x22>
 800442e:	bf00      	nop
 8004430:	2000055c 	.word	0x2000055c
 8004434:	08004f50 	.word	0x08004f50
 8004438:	08004f6d 	.word	0x08004f6d

0800443c <usb21_setup>:

void usb21_setup(usbd_device* usbd_dev, const struct usb_bos_descriptor* binary_object_store) {
 800443c:	b510      	push	{r4, lr}
 800443e:	4604      	mov	r4, r0
    // debug_println("usb21_setup"); // debug_flush(); ////
	usb21_bos = binary_object_store;
 8004440:	4b09      	ldr	r3, [pc, #36]	; (8004468 <usb21_setup+0x2c>)
 8004442:	6019      	str	r1, [r3, #0]

	/* Register the control request handler _before_ the config is set */
	usb21_set_config(usbd_dev, 0x0000);
 8004444:	2100      	movs	r1, #0
 8004446:	f7ff ff7f 	bl	8004348 <usb21_set_config>
	int status = aggregate_register_config_callback(usbd_dev, usb21_set_config);
 800444a:	4908      	ldr	r1, [pc, #32]	; (800446c <usb21_setup+0x30>)
 800444c:	4620      	mov	r0, r4
 800444e:	f7ff f83f 	bl	80034d0 <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 8004452:	2800      	cmp	r0, #0
 8004454:	da06      	bge.n	8004464 <usb21_setup+0x28>
 8004456:	4806      	ldr	r0, [pc, #24]	; (8004470 <usb21_setup+0x34>)
 8004458:	f7fe fa22 	bl	80028a0 <debug_println>
}
 800445c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 8004460:	f7fe ba38 	b.w	80028d4 <debug_flush>
}
 8004464:	bd10      	pop	{r4, pc}
 8004466:	bf00      	nop
 8004468:	2000055c 	.word	0x2000055c
 800446c:	08004349 	.word	0x08004349
 8004470:	08004f39 	.word	0x08004f39

08004474 <bootloader_set_restart_callback>:
int bootloader_set_restart_callback(restart_callback_type *func) {
 8004474:	b508      	push	{r3, lr}
    boot_target_set_restart_callback(func);
 8004476:	f7fe ff19 	bl	80032ac <boot_target_set_restart_callback>
}
 800447a:	2000      	movs	r0, #0
 800447c:	bd08      	pop	{r3, pc}

0800447e <boot_target_get_serial_number>:
}

void boot_target_get_serial_number(char* dest, size_t max_chars) {
    desig_get_unique_id_as_string(dest, max_chars+1);
 800447e:	3101      	adds	r1, #1
 8004480:	f7fc bd4e 	b.w	8000f20 <desig_get_unique_id_as_string>

08004484 <send_hf2_response>:
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8004484:	2240      	movs	r2, #64	; 0x40
static void send_hf2_response(HF2_Buffer *pkt, int size) {
 8004486:	b082      	sub	sp, #8
    volatile uint32_t dataToSendLength = 4 + size;
 8004488:	3104      	adds	r1, #4
 800448a:	9101      	str	r1, [sp, #4]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 800448c:	9901      	ldr	r1, [sp, #4]
 800448e:	3002      	adds	r0, #2
}
 8004490:	b002      	add	sp, #8
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 8004492:	f7ff bbb3 	b.w	8003bfc <pokeSend>
 8004496:	0000      	movs	r0, r0
 8004498:	202a2a2a 	.word	0x202a2a2a
 800449c:	206c6168 	.word	0x206c6168
 80044a0:	2f737362 	.word	0x2f737362
 80044a4:	61746164 	.word	0x61746164
 80044a8:	69616620 	.word	0x69616620
 80044ac:	2c64656c 	.word	0x2c64656c
 80044b0:	73736220 	.word	0x73736220
 80044b4:	7365745f 	.word	0x7365745f
 80044b8:	203d2074 	.word	0x203d2074
 80044bc:	64202c00 	.word	0x64202c00
 80044c0:	5f617461 	.word	0x5f617461
 80044c4:	74736574 	.word	0x74736574
 80044c8:	00203d20 	.word	0x00203d20
 80044cc:	00207b75 	.word	0x00207b75
 80044d0:	207d      	.short	0x207d
 80044d2:	00          	.byte	0x00
 80044d3:	61          	.byte	0x61
 80044d4:	203f      	.short	0x203f
 80044d6:	00          	.byte	0x00
 80044d7:	2a          	.byte	0x2a
 80044d8:	2a2a2a2a 	.word	0x2a2a2a2a
 80044dc:	67726174 	.word	0x67726174
 80044e0:	705f7465 	.word	0x705f7465
 80044e4:	63696e61 	.word	0x63696e61
 80044e8:	0020      	.short	0x0020
 80044ea:	7477      	.short	0x7477
 80044ec:	3c20      	.short	0x3c20
 80044ee:	00          	.byte	0x00
 80044ef:	68          	.byte	0x68
 80044f0:	20706165 	.word	0x20706165
 80044f4:	72617473 	.word	0x72617473
 80044f8:	00203a74 	.word	0x00203a74
 80044fc:	6e65202c 	.word	0x6e65202c
 8004500:	00203a64 	.word	0x00203a64
 8004504:	6973202c 	.word	0x6973202c
 8004508:	203a657a 	.word	0x203a657a
 800450c:	424b2000 	.word	0x424b2000
 8004510:	7473202c 	.word	0x7473202c
 8004514:	206b6361 	.word	0x206b6361
 8004518:	64657375 	.word	0x64657375
 800451c:	2000203a 	.word	0x2000203a
 8004520:	0000424b 	.word	0x0000424b

08004524 <st_usbfs_v1_usb_driver>:
 8004524:	08001519 08001559 080015b1 08001701     ....Y...........
 8004534:	08001745 08001829 0800232f 08001881     E...).../#......
 8004544:	0800190d 080019c5 00000000 00000000     ................
 8004554:	00000000                                ....

08004558 <chars.4166>:
 8004558:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8004568:	2a2a2a00 636f6320 20736f6f 65737361     .*** cocoos asse
 8004578:	66207472 656c6961 30002064 28002d00     rt failed .0.-.(
 8004588:	7265764f 776f6c66 445b0029 50504f52     Overflow).[DROPP
 8004598:	005d4445 2d000a0d 702d2d2d 6674616c     ED]....----platf
 80045a8:	5f6d726f 75746573 6c610070 00203f6d     orm_setup.alm? .
 80045b8:	74616c70 6d726f66 6174735f 745f7472     platform_start_t
 80045c8:	72656d69 63747200 61776120 2e2e656b     imer.rtc awake..
 80045d8:	7472002e 77612063 20656b61 00006b6f     ..rtc awake ok..

080045e8 <interfaces>:
 80045e8:	00000000 00000001 00000000 08004a3e     ............>J..
 80045f8:	00000000 00000001 08004922 0800494c     ........"I..LI..
 8004608:	00000000 00000001 00000000 0800498c     .............I..
 8004618:	2d2d2d2d 746f6f62 64616f6c 62007265     ----bootloader.b
 8004628:	5f746f6f 67726174 675f7465 735f7465     oot_target_get_s
 8004638:	61697265 756e5f6c 7265626d 62737500     erial_number.usb
 8004648:	7465735f 7265735f 5f6c6169 626d756e     _set_serial_numb
 8004658:	75007265 735f6273 70757465 62737500     er.usb_setup.usb
 8004668:	6f702064 6e696c6c 2e2e2e67 73657200     d polling....res
 8004678:	74726174 2e676e69 64002e2e 00656e6f     tarting....done.
 8004688:	74736572 20747261 6c6c6163 6b636162     restart callback
 8004698:	6f6f7400 67696220 74610020 2d2d0020     .too big .at .--
 80046a8:	61622d2d 6f6c6573 72656461 202c0020     --baseloader ., 
 80046b8:	74736564 202c0020 20637273 6c202c00     dest ., src ., l
 80046c8:	00206e65 662a202c 20636e75 746f6e00     en ., *func .not
 80046d8:	756f6620 0020646e 6c6f202c 70706164      found ., oldapp
 80046e8:	202c0020 746f6f62 206e656c 73616200      ., bootlen .bas
 80046f8:	616f6c65 20726564 76657270 20776569     eloader preview 
 8004708:	00206b6f 6163202c 61206c6c 61757463     ok ., call actua
 8004718:	6162206c 6f6c6573 72656461 002e2e2e     l baseloader....
 8004728:	74697773 73206863 65747379 6576206d     switch system ve
 8004738:	726f7463 62617420 0020656c 65736162     ctor table .base
 8004748:	64616f6c 70207265 69766572 66207765     loader preview f
 8004758:	656c6961 2c002064 69616620 2d00206c     ailed ., fail .-
 8004768:	2a00203e 45202a2a 524f5252 6c46203a     > .*** ERROR: Fl
 8004778:	20687361 6c696166 00206465 2a2a2a2a     ash failed .****
 8004788:	52524520 203a524f 61766e49 2064696c      ERROR: Invalid 
 8004798:	73616c66 72772068 2c657469 74736420     flash write, dst
 80047a8:	                                          .

080047aa <infoUf2File>:
 80047aa:	20324655 746f6f42 64616f6c 76207265     UF2 Bootloader v
 80047ba:	2e312e31 46532033 4d0a0d41 6c65646f     1.1.3 SFA..Model
 80047ca:	5453203a 4232334d 5045554c 0d4c4c49     : STM32BLUEPILL.
 80047da:	616f420a 492d6472 53203a44 32334d54     .Board-ID: STM32
 80047ea:	33303146 422d3843 5065756c 2d6c6c69     F103C8-BluePill-
 80047fa:	0a0d3076 70706100 69786520 00737473     v0...app exists.
 800480a:	20707061 7373696d 20676e69 2d2d2d00     app missing .---
 800481a:	7361622d 616f6c65 20726564 65646f6d     -baseloader mode
 800482a:	6f662820 64656372 2d2d0029 6f622d2d      (forced).----bo
 800483a:	6f6c746f 72656461 646f6d20 66282065     otloader mode (f
 800484a:	6563726f 2d002964 622d2d2d 6c746f6f     orced).----bootl
 800485a:	6564616f 6f6d2072 28206564 61206f6e     oader mode (no a
 800486a:	00297070 2d2d2d2d 6c707061 74616369     pp).----applicat
 800487a:	206e6f69 65646f6d 6f6f6200 70612074     ion mode.boot ap
 800488a:	6f620070 6220746f 6c657361 6564616f     p.boot baseloade
 800489a:	6f620072 6220746f 6c746f6f 6564616f     r.boot bootloade
 80048aa:	65730072 65722074 72617473 61632074     r.set restart ca
 80048ba:	61626c6c 00206b63 5f544553 00524441     llback .SET_ADR.
 80048ca:	00203e3e 202a2a2a 4f525245 54203a52     >> .*** ERROR: T
 80048da:	6d206f6f 20796e61 746e6f63 206c6f72     oo many control 
 80048ea:	6c6c6163 6b636162 2a2a0073 5245202a     callbacks.*** ER
 80048fa:	3a524f52 6f6f5420 6e616d20 6f632079     ROR: Too many co
 800490a:	6769666e 6c616320 6361626c               nfig callbacks.

08004919 <bos_descriptor>:
 8004919:	00000f05 00006002                        .....`.. 

08004922 <cdc_iface_assoc>:
 8004922:	02010b08 06010202                       ........

0800492a <cdcacm_functional_descriptors>:
 800492a:	10002405 01240501 24040200 24050002     .$....$....$...$
 800493a:	                                         ...

0800493d <comm_endp>:
 800493d:	03840507 00ff0010 00000000               ...............

0800494c <comm_iface>:
 800494c:	00010409 01020201 00493d07 00492a08     .........=I..*I.
 800495c:	00001308                                 .....

08004961 <config>:
 8004961:	00000209 80000103 0045e8fa               ..........E..

0800496e <data_endp>:
 800496e:	02030507 00010040 00000000 07000000     ....@...........
 800497e:	40028305 00000100 00000000               ...@..........

0800498c <data_iface>:
 800498c:	00020409 00000a02 00496e08 00000008     .........nI.....
 800499c:	00000000                                 .....

080049a1 <dev>:
 80049a1:	02100112 400102ef db421209 02010221     .......@..B.!...
 80049b1:	2f200103 74200020 00207079 6572202c     .. / . typ ., re
 80049c1:	2c002071 6c617620 202c0020 20786469     q ., val ., idx 
 80049d1:	47202c00 445f5445 5f005345 00564544     ., GET_DES._DEV.
 80049e1:	4746435f 54535f00 495f0052 5f00464e     _CFG._STR._INF._
 80049f1:	00504e45 534f425f 53202c00 415f5445     ENP._BOS., SET_A
 8004a01:	20205244 2c002020 54455320 4746435f     DR    ., SET_CFG
 8004a11:	20202020 20002c00 20002074                   .,. t . i .

08004a20 <hf2_endp>:
 8004a20:	02020507 00000040 00000000 07000000     ....@...........
 8004a30:	40028205 00000000 00000000               ...@..........

08004a3e <hf2_iface>:
 8004a3e:	00000409 012aff02 004a2009 00000008     ......*.. J.....
 8004a4e:	00000000 2a2a2a00 52524520 203a524f     .....*** ERROR: 
 8004a5e:	5f746573 72676761 74616765 61635f65     set_aggregate_ca
 8004a6e:	61626c6c 66206b63 656c6961 65440064     llback failed.De
 8004a7e:	616e6176 79686372 50414400 746f6f42     vanarchy.DAPBoot
 8004a8e:	55464420 6f6f4220 616f6c74 00726564      DFU Bootloader.
 8004a9e:	42504144 20746f6f 00554644 65756c42     DAPBoot DFU.Blue
 8004aae:	6c695020 534d206c 6c420043 50206575      Pill MSC.Blue P
 8004abe:	206c6c69 69726553 50206c61 0074726f     ill Serial Port.
 8004ace:	65756c42 6c695020 4f43206c 42004d4d     Blue Pill COMM.B
 8004ade:	2065756c 6c6c6950 54414420 6c420041     lue Pill DATA.Bl
 8004aee:	50206575 206c6c69 00324648 75736976     ue Pill HF2.visu
 8004afe:	6c626c61 69706575 672e6c6c 75687469     albluepill.githu
 8004b0e:	6f692e62 2a2a2a00 62737520 7465735f     b.io.*** usb_set
 8004b1e:	66207075 656c6961 2a2a0064 6577202a     up failed.*** we
 8004b2e:	62737562 746f6e20 70707573 646e6920     busb notsupp ind
 8004b3e:	00207865 75626577 2a006c72 77202a2a     ex .weburl.*** w
 8004b4e:	73756265 6f6e2062 70757374 49772070     ebusb notsupp wI
 8004b5e:	7865646e                                 ndex .

08004b64 <webusb_platform_capability_descriptor>:
 8004b64:	00051018 3408b638 47a009a9 76a0fd8b     ....8..4...G...v
 8004b74:	65b61588 01220100 202a2a2a 75626577     ...e..".*** webu
 8004b84:	735f6273 635f7465 69666e6f 61662067     sb_set_config fa
 8004b94:	64656c69 2a2a2a00 62657720 5f627375     iled.*** webusb_
 8004ba4:	75746573 61662070 64656c69               setup failed.

08004bb1 <guid>:
 8004bb1:	00000092 00050100 00880001 00070000     ................
 8004bc1:	002a0000 00650044 00690076 00650063     ..*.D.e.v.i.c.e.
 8004bd1:	006e0049 00650074 00660072 00630061     I.n.t.e.r.f.a.c.
 8004be1:	00470065 00490055 00730044 00500000     e.G.U.I.D.s...P.
 8004bf1:	007b0000 00320030 00330036 00350062     ..{.0.2.6.3.b.5.
 8004c01:	00320031 0038002d 00630038 002d0062     1.2.-.8.8.c.b.-.
 8004c11:	00310034 00360033 0039002d 00310036     4.1.3.6.-.9.6.1.
 8004c21:	002d0033 00630035 00650038 00300031     3.-.5.c.8.e.1.0.
 8004c31:	00640039 00650038 00350066 0000007d     9.d.8.e.f.5.}...
	...

08004c43 <microsoft_platform_capability_descriptor>:
 8004c43:	0005101c d8dd60df 4cc74589 9d65d29c     .....`...E.L..e.
 8004c53:	9f8a649e 06030000 002100b2 646e6977     .d........!.wind
 8004c63:	77007365 64696e69 6e697700 00707270     es.winid.winprp.
 8004c73:	656e6977 2a2a0065 6977202a 6273756e     winee.*** winusb
 8004c83:	7465735f 6e6f635f 20676966 6c696166     _set_config fail
 8004c93:	2a006465 77202a2a 73756e69 65735f62     ed.*** winusb_se
 8004ca3:	20707574 6c696166                        tup failed.

08004cae <winusb_string_descriptor>:
 8004cae:	004d0312 00460053 00310054 00300030     ..M.S.F.T.1.0.0.
 8004cbe:	2a2a0021 6463202a 65735f63 20707574     !.*** cdc_setup 
 8004cce:	6c696166 63006465 006d6d6f 202a2a2a     failed.comm.*** 
 8004cde:	61636463 635f6d63 72746e6f 6e206c6f     cdcacm_control n
 8004cee:	7573746f 6c207070 5f656e69 69646f63     otsupp line_codi
 8004cfe:	0020676e 202a2a2a 61636463 735f6d63     ng .*** cdcacm_s
 8004d0e:	635f7465 69666e6f 61662067 64656c69     et_config failed
	...

08004d1f <line_coding>:
 8004d1f:	0001c200 2a080000 45202a2a 524f5252     .......*** ERROR
 8004d2f:	                                         : .

08004d32 <bad_packet_message>:
 8004d32:	20646162 6b636170 20007465 20212121     bad packet. !!! 
 8004d42:	32666800 203e3e20 696e6962 006f666e     .hf2 >> bininfo.
 8004d52:	20326668 69203e3e 006f666e 74706d65     hf2 >> info.empt
 8004d62:	66682079 6e692032 68006f66 62203266     y hf2 info.hf2 b
 8004d72:	74206675 73206f6f 6c6c616d 32666800     uf too small.hf2
 8004d82:	203e3e20 72617473 66680074 3e3e2032      >> start.hf2 >>
 8004d92:	616c6620 68006873 3e203266 6c66203e      flash.hf2 >> fl
 8004da2:	20687361 6e696600 65762064 726f7463     ash .find vector
 8004db2:	002e2e2e 6e756f66 65762064 726f7463     ....found vector
 8004dc2:	7061202c 2c002070 6f6f6220 69732074     , app ., boot si
 8004dd2:	0020657a 6162202c 73206573 20657a69     ze ., base size 
 8004de2:	2a2a2a00 52524520 203a524f 61766e49     .*** ERROR: Inva
 8004df2:	2064696c 72646461 72770020 2065746f     lid addr .wrote 
 8004e02:	746f6f62 64616f6c 63007265 61706d6f     bootloader.compa
 8004e12:	62206572 6c746f6f 6564616f 2e2e2e72     re bootloader...
 8004e22:	6f6f6200 616f6c74 20726564 6e616863     .bootloader chan
 8004e32:	00646567 79706f63 73616220 616f6c65     ged.copy baseloa
 8004e42:	20726564 00206f74 6973202c 0020657a     der to ., size .
 8004e52:	74736572 20747261 62206f74 6c657361     restart to basel
 8004e62:	6564616f 2c002072 73616220 6e656c65     oader ., baselen
 8004e72:	6f620020 6f6c746f 72656461 65646920      .bootloader ide
 8004e82:	6369746e 00206c61 202a2a2a 4f525245     ntical .*** ERRO
 8004e92:	63203a52 6b636568 61746144 657a6953     R: checkDataSize
 8004ea2:	69616620 0064656c 20326668 61203e3e      failed.hf2 >> a
 8004eb2:	68007070 3e203266 6f62203e 6800746f     pp.hf2 >> boot.h
 8004ec2:	3e203266 6572203e 68006461 3e203266     f2 >> read.hf2 >
 8004ed2:	6e75203e 776f6e6b 6800206e 73203266     > unknown .hf2 s
 8004ee2:	63207465 69666e6f 6c660067 20687361     et config.flash 
 8004ef2:	6f6c6c61 2a002077 68202a2a 735f3266     allow .*** hf2_s
 8004f02:	70757465 69616620 0064656c 20326668     etup failed.hf2 
 8004f12:	68003c3c 3c203266 2a00203c 75202a2a     <<.hf2 << .*** u
 8004f22:	31326273 7465735f 6e6f635f 20676966     sb21_set_config 
 8004f32:	6c696166 2a006465 75202a2a 31326273     failed.*** usb21
 8004f42:	7465735f 66207075 656c6961 2a2a0064     _setup failed.**
 8004f52:	7375202a 5f313262 63736564 74706972     * usb21_descript
 8004f62:	6e20726f 6f62206f 62002073 0000736f     or no bos .bos..
	...

Disassembly of section .text:

08007400 <application_start>:
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
        for(;;) {}
    }
}

extern "C" void application_start(void) {
 8007400:	2200      	movs	r2, #0
 8007402:	b538      	push	{r3, r4, r5, lr}
 8007404:	4820      	ldr	r0, [pc, #128]	; (8007488 <application_start+0x88>)
 8007406:	4921      	ldr	r1, [pc, #132]	; (800748c <application_start+0x8c>)
	funcp_t *fp;

	//  Copy Application data section from ROM to RAM.
	volatile uint32_t *src = &_data_loadaddr;
	volatile uint32_t *dest = &_data;
	while (dest < &_edata) {
 8007408:	4c21      	ldr	r4, [pc, #132]	; (8007490 <application_start+0x90>)
 800740a:	1853      	adds	r3, r2, r1
 800740c:	42a3      	cmp	r3, r4
 800740e:	d306      	bcc.n	800741e <application_start+0x1e>
		src = src + 1;
		dest = dest + 1;
	}

	//  Init variables in Application BSS section to null.
	while (dest < &_ebss) { *dest++ = 0; }
 8007410:	2200      	movs	r2, #0
 8007412:	4920      	ldr	r1, [pc, #128]	; (8007494 <application_start+0x94>)
 8007414:	428b      	cmp	r3, r1
 8007416:	d206      	bcs.n	8007426 <application_start+0x26>
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	3304      	adds	r3, #4
 800741c:	e7fa      	b.n	8007414 <application_start+0x14>
		*dest = *src;
 800741e:	5813      	ldr	r3, [r2, r0]
 8007420:	5053      	str	r3, [r2, r1]
 8007422:	3204      	adds	r2, #4
	while (dest < &_edata) {
 8007424:	e7f1      	b.n	800740a <application_start+0xa>
    if (app_bss_test != 0x0 || app_data_test != 0x12345678) {
 8007426:	4c1c      	ldr	r4, [pc, #112]	; (8007498 <application_start+0x98>)
 8007428:	4d1c      	ldr	r5, [pc, #112]	; (800749c <application_start+0x9c>)
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	b91a      	cbnz	r2, 8007436 <application_start+0x36>
 800742e:	682a      	ldr	r2, [r5, #0]
 8007430:	4b1b      	ldr	r3, [pc, #108]	; (80074a0 <application_start+0xa0>)
 8007432:	429a      	cmp	r2, r3
 8007434:	d00c      	beq.n	8007450 <application_start+0x50>
        debug_print("*** app bss/data failed, bss_test = "); debug_printhex_unsigned(app_bss_test);
 8007436:	481b      	ldr	r0, [pc, #108]	; (80074a4 <application_start+0xa4>)
 8007438:	f7fb fa4f 	bl	80028da <debug_print>
 800743c:	6820      	ldr	r0, [r4, #0]
 800743e:	f7fb fa7e 	bl	800293e <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
 8007442:	4819      	ldr	r0, [pc, #100]	; (80074a8 <application_start+0xa8>)
 8007444:	f7fb fa49 	bl	80028da <debug_print>
 8007448:	6828      	ldr	r0, [r5, #0]
 800744a:	f7fb fa78 	bl	800293e <debug_printhex_unsigned>
 800744e:	e7fe      	b.n	800744e <application_start+0x4e>

	//  Call any init functions here.
	pre_main();
	
	//  Call C++ constructors for Application.
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8007450:	4c16      	ldr	r4, [pc, #88]	; (80074ac <application_start+0xac>)
 8007452:	4d17      	ldr	r5, [pc, #92]	; (80074b0 <application_start+0xb0>)
 8007454:	42ac      	cmp	r4, r5
 8007456:	d203      	bcs.n	8007460 <application_start+0x60>
		(*fp)();
 8007458:	f854 3b04 	ldr.w	r3, [r4], #4
 800745c:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 800745e:	e7f9      	b.n	8007454 <application_start+0x54>
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8007460:	4c14      	ldr	r4, [pc, #80]	; (80074b4 <application_start+0xb4>)
 8007462:	4d15      	ldr	r5, [pc, #84]	; (80074b8 <application_start+0xb8>)
 8007464:	42ac      	cmp	r4, r5
 8007466:	d203      	bcs.n	8007470 <application_start+0x70>
		(*fp)();
 8007468:	f854 3b04 	ldr.w	r3, [r4], #4
 800746c:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 800746e:	e7f9      	b.n	8007464 <application_start+0x64>
	}

	//  Call the application's entry point.
	main();
 8007470:	f000 f828 	bl	80074c4 <main>

	//  Call C++ destructors.  Not used because we never return from main().
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8007474:	4c11      	ldr	r4, [pc, #68]	; (80074bc <application_start+0xbc>)
 8007476:	4d12      	ldr	r5, [pc, #72]	; (80074c0 <application_start+0xc0>)
 8007478:	42ac      	cmp	r4, r5
 800747a:	d203      	bcs.n	8007484 <application_start+0x84>
		(*fp)();
 800747c:	f854 3b04 	ldr.w	r3, [r4], #4
 8007480:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8007482:	e7f9      	b.n	8007478 <application_start+0x78>
	}
}
 8007484:	bd38      	pop	{r3, r4, r5, pc}
 8007486:	bf00      	nop
 8007488:	0800a914 	.word	0x0800a914
 800748c:	20001000 	.word	0x20001000
 8007490:	20001008 	.word	0x20001008
 8007494:	20002218 	.word	0x20002218
 8007498:	20002180 	.word	0x20002180
 800749c:	20001000 	.word	0x20001000
 80074a0:	12345678 	.word	0x12345678
 80074a4:	0800a6e4 	.word	0x0800a6e4
 80074a8:	0800a709 	.word	0x0800a709
 80074ac:	0800a900 	.word	0x0800a900
 80074b0:	0800a900 	.word	0x0800a900
 80074b4:	0800a900 	.word	0x0800a900
 80074b8:	0800a914 	.word	0x0800a914
 80074bc:	0800a914 	.word	0x0800a914
 80074c0:	0800a914 	.word	0x0800a914

080074c4 <main>:

//  Blue Pill constructor will generate debug messages, make sure that the target has been initialised.
STM32BluePill bluepill;

int main() {
    bluepill.init();
 80074c4:	4c03      	ldr	r4, [pc, #12]	; (80074d4 <main+0x10>)
int main() {
 80074c6:	b508      	push	{r3, lr}
    bluepill.init();
 80074c8:	4620      	mov	r0, r4
 80074ca:	f001 f8cb 	bl	8008664 <_ZN5codal13STM32BluePill4initEv>
    Blink_main(bluepill);
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 f844 	bl	800755c <_Z10Blink_mainRN5codal13STM32BluePillE>
 80074d4:	20001008 	.word	0x20001008

080074d8 <_ZN5codal14CodalComponent4initEv>:

        /**
          * Implement this function to receive a function call after the devices'
          * device model has been instantiated.
          */
        virtual int init() { return DEVICE_NOT_SUPPORTED; }
 80074d8:	4800      	ldr	r0, [pc, #0]	; (80074dc <_ZN5codal14CodalComponent4initEv+0x4>)
 80074da:	4770      	bx	lr
 80074dc:	fffffc16 	.word	0xfffffc16

080074e0 <_ZN5codal14CodalComponentD1Ev>:
        /**
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
        {
 80074e0:	4b04      	ldr	r3, [pc, #16]	; (80074f4 <_ZN5codal14CodalComponentD1Ev+0x14>)
        virtual ~CodalComponent()
 80074e2:	b510      	push	{r4, lr}
        {
 80074e4:	6003      	str	r3, [r0, #0]
            status = 0;
 80074e6:	2300      	movs	r3, #0
        virtual ~CodalComponent()
 80074e8:	4604      	mov	r4, r0
            status = 0;
 80074ea:	80c3      	strh	r3, [r0, #6]
            removeComponent();
 80074ec:	f000 f92a 	bl	8007744 <_ZN5codal14CodalComponent15removeComponentEv>
        }
 80074f0:	4620      	mov	r0, r4
 80074f2:	bd10      	pop	{r4, pc}
 80074f4:	0800a380 	.word	0x0800a380

080074f8 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc.isra.0>:

        //  At t = 30 seconds, device should wakeup by alarm and restart as though t = 0.
    }
}

static void debug_dump(codal::STM32BluePill& bluepill, const char *msg) {
 80074f8:	b508      	push	{r3, lr}
    debug_print(msg);
 80074fa:	f7fb f9ee 	bl	80028da <debug_print>
    debug_print(" t "); debug_print((size_t) (millis() / 1000)); 
 80074fe:	480b      	ldr	r0, [pc, #44]	; (800752c <_ZL10debug_dumpRN5codal13STM32BluePillEPKc.isra.0+0x34>)
 8007500:	f7fb f9eb 	bl	80028da <debug_print>
 8007504:	f7fb fb34 	bl	8002b70 <millis>
 8007508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800750c:	fbb0 f0f3 	udiv	r0, r0, r3
 8007510:	f7fb f970 	bl	80027f4 <_Z11debug_printj>
    // debug_print(", ms "); debug_print((size_t) bluepill.timer.getTime()); 
    // debug_print(", us "); debug_print((size_t) bluepill.timer.getTimeUs()); 
    debug_print(", alm "); debug_print((size_t) platform_alarm_count()); 
 8007514:	4806      	ldr	r0, [pc, #24]	; (8007530 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc.isra.0+0x38>)
 8007516:	f7fb f9e0 	bl	80028da <debug_print>
 800751a:	f7fb fb1b 	bl	8002b54 <platform_alarm_count>
 800751e:	f7fb f969 	bl	80027f4 <_Z11debug_printj>
    // debug_print(", tick "); debug_print((size_t) platform_tick_count()); 
    debug_println(""); 
    ////debug_flush(); ////
}
 8007522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    debug_println(""); 
 8007526:	4803      	ldr	r0, [pc, #12]	; (8007534 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc.isra.0+0x3c>)
 8007528:	f7fb b9ba 	b.w	80028a0 <debug_println>
 800752c:	0800a6af 	.word	0x0800a6af
 8007530:	0800a6b3 	.word	0x0800a6b3
 8007534:	0800a6c5 	.word	0x0800a6c5

08007538 <_GLOBAL__sub_I_bluepill>:
}
 8007538:	b510      	push	{r4, lr}
STM32BluePill bluepill;
 800753a:	4c05      	ldr	r4, [pc, #20]	; (8007550 <_GLOBAL__sub_I_bluepill+0x18>)
 800753c:	4620      	mov	r0, r4
 800753e:	f001 f8cd 	bl	80086dc <_ZN5codal13STM32BluePillC1Ev>
 8007542:	4620      	mov	r0, r4
}
 8007544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
STM32BluePill bluepill;
 8007548:	4a02      	ldr	r2, [pc, #8]	; (8007554 <_GLOBAL__sub_I_bluepill+0x1c>)
 800754a:	4903      	ldr	r1, [pc, #12]	; (8007558 <_GLOBAL__sub_I_bluepill+0x20>)
 800754c:	f7f9 bc42 	b.w	8000dd4 <__aeabi_atexit>
 8007550:	20001008 	.word	0x20001008
 8007554:	2000017c 	.word	0x2000017c
 8007558:	080075cd 	.word	0x080075cd

0800755c <_Z10Blink_mainRN5codal13STM32BluePillE>:
void Blink_main(codal::STM32BluePill& bluepill) {
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	4604      	mov	r4, r0
    debug_dump(bluepill, "set led");
 8007560:	4814      	ldr	r0, [pc, #80]	; (80075b4 <_Z10Blink_mainRN5codal13STM32BluePillE+0x58>)
	bluepill.io.led.setDigitalValue(0);
 8007562:	f504 6479 	add.w	r4, r4, #3984	; 0xf90
    debug_dump(bluepill, "set led");
 8007566:	f7ff ffc7 	bl	80074f8 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc.isra.0>
	bluepill.io.led.setDigitalValue(0);
 800756a:	2100      	movs	r1, #0
 800756c:	4620      	mov	r0, r4
 800756e:	f000 fe9f 	bl	80082b0 <_ZN5codal3_cm3Pin15setDigitalValueEi>
    debug_dump(bluepill, "target wait");
 8007572:	4811      	ldr	r0, [pc, #68]	; (80075b8 <_Z10Blink_mainRN5codal13STM32BluePillE+0x5c>)
 8007574:	f7ff ffc0 	bl	80074f8 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc.isra.0>
    target_wait_us(1000000);  //  Test the RTC.
 8007578:	4810      	ldr	r0, [pc, #64]	; (80075bc <_Z10Blink_mainRN5codal13STM32BluePillE+0x60>)
 800757a:	f7f9 fc0d 	bl	8000d98 <target_wait_us>
    debug_dump(bluepill, "sleep");
 800757e:	4810      	ldr	r0, [pc, #64]	; (80075c0 <_Z10Blink_mainRN5codal13STM32BluePillE+0x64>)
 8007580:	f7ff ffba 	bl	80074f8 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc.isra.0>
     * @return STM32BLUEPILL_OK on success, STM32BLUEPILL_INVALID_PARAMETER milliseconds is less than zero.
     *
     */
    inline void STM32BluePill::sleep(uint32_t milliseconds)
    {
        fiber_sleep(milliseconds);
 8007584:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007588:	f000 fb38 	bl	8007bfc <_ZN5codal11fiber_sleepEm>
    debug_dump(bluepill, "loop");
 800758c:	480d      	ldr	r0, [pc, #52]	; (80075c4 <_Z10Blink_mainRN5codal13STM32BluePillE+0x68>)
 800758e:	f7ff ffb3 	bl	80074f8 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc.isra.0>
	int state = 1;
 8007592:	2501      	movs	r5, #1
        debug_dump(bluepill, "slp");
 8007594:	4e0c      	ldr	r6, [pc, #48]	; (80075c8 <_Z10Blink_mainRN5codal13STM32BluePillE+0x6c>)
		bluepill.io.led.setDigitalValue(state);
 8007596:	4629      	mov	r1, r5
 8007598:	4620      	mov	r0, r4
 800759a:	f000 fe89 	bl	80082b0 <_ZN5codal3_cm3Pin15setDigitalValueEi>
        debug_dump(bluepill, "slp");
 800759e:	4630      	mov	r0, r6
 80075a0:	f7ff ffaa 	bl	80074f8 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc.isra.0>
 80075a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075a8:	f000 fb28 	bl	8007bfc <_ZN5codal11fiber_sleepEm>
 80075ac:	f085 0501 	eor.w	r5, r5, #1
 80075b0:	e7f1      	b.n	8007596 <_Z10Blink_mainRN5codal13STM32BluePillE+0x3a>
 80075b2:	bf00      	nop
 80075b4:	0800a68c 	.word	0x0800a68c
 80075b8:	0800a694 	.word	0x0800a694
 80075bc:	000f4240 	.word	0x000f4240
 80075c0:	0800a6a0 	.word	0x0800a6a0
 80075c4:	0800a6a6 	.word	0x0800a6a6
 80075c8:	0800a6ab 	.word	0x0800a6ab

080075cc <_ZN5codal13STM32BluePillD1Ev>:
    class STM32BluePill : public CodalComponent
 80075cc:	4b0c      	ldr	r3, [pc, #48]	; (8007600 <_ZN5codal13STM32BluePillD1Ev+0x34>)
 80075ce:	b510      	push	{r4, lr}
 80075d0:	4604      	mov	r4, r0
 80075d2:	6003      	str	r3, [r0, #0]
        /**
          * Class definition for DeviceSerial.
          *
          * Represents an instance of RawSerial which accepts codal device specific data types.
          */
        class Serial : public codal::Serial
 80075d4:	f241 0010 	movw	r0, #4112	; 0x1010
 80075d8:	4b0a      	ldr	r3, [pc, #40]	; (8007604 <_ZN5codal13STM32BluePillD1Ev+0x38>)
 80075da:	5023      	str	r3, [r4, r0]
 80075dc:	4420      	add	r0, r4
 80075de:	f000 fc31 	bl	8007e44 <_ZN5codal6SerialD1Ev>
 80075e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80075e6:	f000 fd17 	bl	8008018 <_ZN5codal10MessageBusD1Ev>

namespace codal
{
    namespace _cm
    {
        class Timer : public codal::Timer
 80075ea:	4620      	mov	r0, r4
 80075ec:	4b06      	ldr	r3, [pc, #24]	; (8007608 <_ZN5codal13STM32BluePillD1Ev+0x3c>)
 80075ee:	f840 3f08 	str.w	r3, [r0, #8]!
 80075f2:	f002 fa19 	bl	8009a28 <_ZN5codal5TimerD1Ev>
 80075f6:	4620      	mov	r0, r4
 80075f8:	f7ff ff72 	bl	80074e0 <_ZN5codal14CodalComponentD1Ev>
 80075fc:	4620      	mov	r0, r4
 80075fe:	bd10      	pop	{r4, pc}
 8007600:	0800a4e4 	.word	0x0800a4e4
 8007604:	0800a494 	.word	0x0800a494
 8007608:	0800a4cc 	.word	0x0800a4cc

0800760c <_GLOBAL__sub_I_serialPort>:
static uint8_t markerPos[markerPosMax];

#ifdef ARDUINO
SoftwareSerial serialPort(UART_RX_PORT, UART_TX_PORT);  //  Serial port for send/receive.
#else
UARTInterface serialPort(UART_RX_PORT, UART_TX_PORT);  //  UART port for send/receive.
 800760c:	2204      	movs	r2, #4
 800760e:	2105      	movs	r1, #5
 8007610:	4801      	ldr	r0, [pc, #4]	; (8007618 <_GLOBAL__sub_I_serialPort+0xc>)
 8007612:	f002 bdb1 	b.w	800a178 <_ZN13UARTInterfaceC1Ejj>
 8007616:	bf00      	nop
 8007618:	2000220c 	.word	0x2000220c

0800761c <_Z18component_callbackN5codal5EventE>:

/**
  * The periodic callback for all components.
  */
void component_callback(Event evt)
{
 800761c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800761e:	ab02      	add	r3, sp, #8
 8007620:	e903 0003 	stmdb	r3, {r0, r1}
 8007624:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    uint8_t i = 0;

    if(evt.value == DEVICE_COMPONENT_EVT_SYSTEM_TICK)
 8007628:	2b01      	cmp	r3, #1
 800762a:	d10f      	bne.n	800764c <_Z18component_callbackN5codal5EventE+0x30>
 800762c:	2400      	movs	r4, #0
    {
        while(i < DEVICE_COMPONENT_COUNT)
        {
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_SYSTEM_TICK)
 800762e:	4d10      	ldr	r5, [pc, #64]	; (8007670 <_Z18component_callbackN5codal5EventE+0x54>)
 8007630:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8007634:	b128      	cbz	r0, 8007642 <_Z18component_callbackN5codal5EventE+0x26>
 8007636:	88c3      	ldrh	r3, [r0, #6]
 8007638:	049a      	lsls	r2, r3, #18
 800763a:	d502      	bpl.n	8007642 <_Z18component_callbackN5codal5EventE+0x26>
                CodalComponent::components[i]->periodicCallback();
 800763c:	6803      	ldr	r3, [r0, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4798      	blx	r3
 8007642:	3401      	adds	r4, #1
        while(i < DEVICE_COMPONENT_COUNT)
 8007644:	2c3c      	cmp	r4, #60	; 0x3c
 8007646:	d1f3      	bne.n	8007630 <_Z18component_callbackN5codal5EventE+0x14>
                CodalComponent::components[i]->idleCallback();

            i++;
        }
    }
}
 8007648:	b003      	add	sp, #12
 800764a:	bd30      	pop	{r4, r5, pc}
    if(evt.value == DEVICE_SCHEDULER_EVT_IDLE)
 800764c:	2b02      	cmp	r3, #2
 800764e:	d1fb      	bne.n	8007648 <_Z18component_callbackN5codal5EventE+0x2c>
 8007650:	2400      	movs	r4, #0
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_IDLE_TICK)
 8007652:	4d07      	ldr	r5, [pc, #28]	; (8007670 <_Z18component_callbackN5codal5EventE+0x54>)
 8007654:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8007658:	b128      	cbz	r0, 8007666 <_Z18component_callbackN5codal5EventE+0x4a>
 800765a:	88c3      	ldrh	r3, [r0, #6]
 800765c:	045b      	lsls	r3, r3, #17
 800765e:	d502      	bpl.n	8007666 <_Z18component_callbackN5codal5EventE+0x4a>
                CodalComponent::components[i]->idleCallback();
 8007660:	6803      	ldr	r3, [r0, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	4798      	blx	r3
 8007666:	3401      	adds	r4, #1
        while(i < DEVICE_COMPONENT_COUNT)
 8007668:	2c3c      	cmp	r4, #60	; 0x3c
 800766a:	d1f3      	bne.n	8007654 <_Z18component_callbackN5codal5EventE+0x38>
 800766c:	e7ec      	b.n	8007648 <_Z18component_callbackN5codal5EventE+0x2c>
 800766e:	bf00      	nop
 8007670:	2000204c 	.word	0x2000204c

08007674 <_ZN5codal10EventModel6listenEiiPFvNS_5EventEEt>:
          *
          * // call onButtonBClicked when ever a click event from buttonB is detected.
          * uBit.messageBus.listen(DEVICE_ID_BUTTON_B, DEVICE_BUTTON_EVT_CLICK, onButtonBClick);
          * @endcode
          */
        int listen(int id, int value, void (*handler)(Event), uint16_t flags = EVENT_LISTENER_DEFAULT_FLAGS)
 8007674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007678:	4605      	mov	r5, r0
 800767a:	460e      	mov	r6, r1
 800767c:	4691      	mov	r9, r2
 800767e:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
        {
            if (handler == NULL)
 8007682:	461f      	mov	r7, r3
 8007684:	b303      	cbz	r3, 80076c8 <_ZN5codal10EventModel6listenEiiPFvNS_5EventEEt+0x54>
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
 8007686:	290f      	cmp	r1, #15
 8007688:	d102      	bne.n	8007690 <_ZN5codal10EventModel6listenEiiPFvNS_5EventEEt+0x1c>
 800768a:	f1b8 0fc0 	cmp.w	r8, #192	; 0xc0
 800768e:	d11b      	bne.n	80076c8 <_ZN5codal10EventModel6listenEiiPFvNS_5EventEEt+0x54>
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 8007690:	2020      	movs	r0, #32
 8007692:	f7fb fa69 	bl	8002b68 <_Znwj>
 8007696:	4604      	mov	r4, r0
 8007698:	463b      	mov	r3, r7
 800769a:	b2b1      	uxth	r1, r6
 800769c:	f8cd 8000 	str.w	r8, [sp]
 80076a0:	fa1f f289 	uxth.w	r2, r9
 80076a4:	f001 ff90 	bl	80095c8 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	4621      	mov	r1, r4
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	4628      	mov	r0, r5
 80076b0:	4798      	blx	r3
 80076b2:	b130      	cbz	r0, 80076c2 <_ZN5codal10EventModel6listenEiiPFvNS_5EventEEt+0x4e>
                return DEVICE_OK;

            delete newListener;
 80076b4:	4620      	mov	r0, r4
 80076b6:	f001 ff9b 	bl	80095f0 <_ZN5codal8ListenerD1Ev>
 80076ba:	4620      	mov	r0, r4
 80076bc:	f7fb fa56 	bl	8002b6c <_ZdlPv>

            return DEVICE_NOT_SUPPORTED;
 80076c0:	4803      	ldr	r0, [pc, #12]	; (80076d0 <_ZN5codal10EventModel6listenEiiPFvNS_5EventEEt+0x5c>)
        }
 80076c2:	b003      	add	sp, #12
 80076c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return DEVICE_INVALID_PARAMETER;
 80076c8:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 80076cc:	e7f9      	b.n	80076c2 <_ZN5codal10EventModel6listenEiiPFvNS_5EventEEt+0x4e>
 80076ce:	bf00      	nop
 80076d0:	fffffc16 	.word	0xfffffc16

080076d4 <_ZN5codal14CodalComponent12addComponentEv>:

/**
  * Adds the current CodalComponent instance to our array of components.
  */
void CodalComponent::addComponent()
{
 80076d4:	2300      	movs	r3, #0
 80076d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t i = 0;

    // iterate through our list until an empty space is found.
    while(i < DEVICE_COMPONENT_COUNT)
    {
        if(components[i] == NULL)
 80076d8:	4a16      	ldr	r2, [pc, #88]	; (8007734 <_ZN5codal14CodalComponent12addComponentEv+0x60>)
 80076da:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80076de:	bb21      	cbnz	r1, 800772a <_ZN5codal14CodalComponent12addComponentEv+0x56>
        {
            components[i] = this;
 80076e0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
        }

        i++;
    }

    if(!(configuration & DEVICE_COMPONENT_LISTENERS_CONFIGURED) && EventModel::defaultEventBus)
 80076e4:	4c14      	ldr	r4, [pc, #80]	; (8007738 <_ZN5codal14CodalComponent12addComponentEv+0x64>)
 80076e6:	7823      	ldrb	r3, [r4, #0]
 80076e8:	07db      	lsls	r3, r3, #31
 80076ea:	d41c      	bmi.n	8007726 <_ZN5codal14CodalComponent12addComponentEv+0x52>
 80076ec:	4d13      	ldr	r5, [pc, #76]	; (800773c <_ZN5codal14CodalComponent12addComponentEv+0x68>)
 80076ee:	682b      	ldr	r3, [r5, #0]
 80076f0:	b1cb      	cbz	r3, 8007726 <_ZN5codal14CodalComponent12addComponentEv+0x52>
    {
        int ret = system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK);
 80076f2:	2201      	movs	r2, #1
 80076f4:	2110      	movs	r1, #16
 80076f6:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80076fa:	f000 fbd3 	bl	8007ea4 <_ZN5codal27system_timer_event_every_usEmtt>

        if(ret == DEVICE_OK)
 80076fe:	b990      	cbnz	r0, 8007726 <_ZN5codal14CodalComponent12addComponentEv+0x52>
        {
            EventModel::defaultEventBus->listen(DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007700:	26c0      	movs	r6, #192	; 0xc0
 8007702:	4b0f      	ldr	r3, [pc, #60]	; (8007740 <_ZN5codal14CodalComponent12addComponentEv+0x6c>)
 8007704:	2201      	movs	r2, #1
 8007706:	2110      	movs	r1, #16
 8007708:	9600      	str	r6, [sp, #0]
 800770a:	6828      	ldr	r0, [r5, #0]
 800770c:	f7ff ffb2 	bl	8007674 <_ZN5codal10EventModel6listenEiiPFvNS_5EventEEt>
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007710:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <_ZN5codal14CodalComponent12addComponentEv+0x6c>)
 8007712:	9600      	str	r6, [sp, #0]
 8007714:	2202      	movs	r2, #2
 8007716:	210f      	movs	r1, #15
 8007718:	6828      	ldr	r0, [r5, #0]
 800771a:	f7ff ffab 	bl	8007674 <_ZN5codal10EventModel6listenEiiPFvNS_5EventEEt>

            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
 800771e:	7823      	ldrb	r3, [r4, #0]
 8007720:	f043 0301 	orr.w	r3, r3, #1
 8007724:	7023      	strb	r3, [r4, #0]
        }
    }
}
 8007726:	b002      	add	sp, #8
 8007728:	bd70      	pop	{r4, r5, r6, pc}
 800772a:	3301      	adds	r3, #1
    while(i < DEVICE_COMPONENT_COUNT)
 800772c:	2b3c      	cmp	r3, #60	; 0x3c
 800772e:	d1d4      	bne.n	80076da <_ZN5codal14CodalComponent12addComponentEv+0x6>
 8007730:	e7d8      	b.n	80076e4 <_ZN5codal14CodalComponent12addComponentEv+0x10>
 8007732:	bf00      	nop
 8007734:	2000204c 	.word	0x2000204c
 8007738:	2000220d 	.word	0x2000220d
 800773c:	2000216c 	.word	0x2000216c
 8007740:	0800761d 	.word	0x0800761d

08007744 <_ZN5codal14CodalComponent15removeComponentEv>:

/**
  * Removes the current CodalComponent instance from our array of components.
  */
void CodalComponent::removeComponent()
{
 8007744:	2300      	movs	r3, #0
    uint8_t i = 0;

    while(i < DEVICE_COMPONENT_COUNT)
    {
        if(components[i] == this)
 8007746:	4a06      	ldr	r2, [pc, #24]	; (8007760 <_ZN5codal14CodalComponent15removeComponentEv+0x1c>)
 8007748:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800774c:	4281      	cmp	r1, r0
 800774e:	d103      	bne.n	8007758 <_ZN5codal14CodalComponent15removeComponentEv+0x14>
        {
            components[i] = NULL;
 8007750:	2100      	movs	r1, #0
 8007752:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            return;
 8007756:	4770      	bx	lr
 8007758:	3301      	adds	r3, #1
    while(i < DEVICE_COMPONENT_COUNT)
 800775a:	2b3c      	cmp	r3, #60	; 0x3c
 800775c:	d1f4      	bne.n	8007748 <_ZN5codal14CodalComponent15removeComponentEv+0x4>
        }

        i++;
    }
}
 800775e:	4770      	bx	lr
 8007760:	2000204c 	.word	0x2000204c

08007764 <codal_dmesg_flush>:
    dmesg_flush_fn = fn;
}

void codal_dmesg_flush()
{
    if (dmesg_flush_fn)
 8007764:	4b02      	ldr	r3, [pc, #8]	; (8007770 <codal_dmesg_flush+0xc>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	b103      	cbz	r3, 800776c <codal_dmesg_flush+0x8>
        dmesg_flush_fn();
 800776a:	4718      	bx	r3
}
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	2000213c 	.word	0x2000213c

08007774 <_ZN5codal14scheduler_tickENS_5EventE>:
  * The timer callback, called from interrupt context once every SYSTEM_TICK_PERIOD_MS milliseconds.
  * This function checks to determine if any fibers blocked on the sleep queue need to be woken up
  * and made runnable.
  */
void codal::scheduler_tick(Event evt)
{
 8007774:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007776:	ab02      	add	r3, sp, #8
 8007778:	e903 0003 	stmdb	r3, {r0, r1}
    Fiber *f = sleepQueue;
 800777c:	4b09      	ldr	r3, [pc, #36]	; (80077a4 <_ZN5codal14scheduler_tickENS_5EventE+0x30>)

        if (evt.timestamp >= f->context)
        {
            // Wakey wakey!
            dequeue_fiber(f);
            queue_fiber(f,&runQueue);
 800777e:	4d0a      	ldr	r5, [pc, #40]	; (80077a8 <_ZN5codal14scheduler_tickENS_5EventE+0x34>)
    Fiber *f = sleepQueue;
 8007780:	681c      	ldr	r4, [r3, #0]
    while (f != NULL)
 8007782:	b16c      	cbz	r4, 80077a0 <_ZN5codal14scheduler_tickENS_5EventE+0x2c>
        if (evt.timestamp >= f->context)
 8007784:	68e3      	ldr	r3, [r4, #12]
 8007786:	9a01      	ldr	r2, [sp, #4]
        t = f->next;
 8007788:	69a6      	ldr	r6, [r4, #24]
        if (evt.timestamp >= f->context)
 800778a:	429a      	cmp	r2, r3
 800778c:	d306      	bcc.n	800779c <_ZN5codal14scheduler_tickENS_5EventE+0x28>
            dequeue_fiber(f);
 800778e:	4620      	mov	r0, r4
 8007790:	f001 fe75 	bl	800947e <_ZN5codal13dequeue_fiberEPNS_5FiberE>
            queue_fiber(f,&runQueue);
 8007794:	4629      	mov	r1, r5
 8007796:	4620      	mov	r0, r4
 8007798:	f001 fe5a 	bl	8009450 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
{
 800779c:	4634      	mov	r4, r6
 800779e:	e7f0      	b.n	8007782 <_ZN5codal14scheduler_tickENS_5EventE+0xe>
        }

        f = t;
    }
}
 80077a0:	b002      	add	sp, #8
 80077a2:	bd70      	pop	{r4, r5, r6, pc}
 80077a4:	20002148 	.word	0x20002148
 80077a8:	20002150 	.word	0x20002150

080077ac <_ZN5codal15scheduler_eventENS_5EventE>:
  * and made runnable due to the event.
  *
  * @param evt the event that has just been raised on an instance of DeviceMessageBus.
  */
void codal::scheduler_event(Event evt)
{
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int notifyOneComplete = 0;

    // This should never happen.
    // It is however, safe to simply ignore any events provided, as if no messageBus if recorded,
    // no fibers are permitted to block on events.
    if (messageBus == NULL)
 80077b0:	4e2a      	ldr	r6, [pc, #168]	; (800785c <_ZN5codal15scheduler_eventENS_5EventE+0xb0>)
{
 80077b2:	b08f      	sub	sp, #60	; 0x3c
 80077b4:	ab04      	add	r3, sp, #16
 80077b6:	e883 0003 	stmia.w	r3, {r0, r1}
    if (messageBus == NULL)
 80077ba:	6833      	ldr	r3, [r6, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d04a      	beq.n	8007856 <_ZN5codal15scheduler_eventENS_5EventE+0xaa>
    int notifyOneComplete = 0;
 80077c0:	2200      	movs	r2, #0
        // extract the event data this fiber is blocked on.
        uint16_t id = f->context & 0xFFFF;
        uint16_t value = (f->context & 0xFFFF0000) >> 16;

        // Special case for the NOTIFY_ONE channel...
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 80077c2:	f240 39fe 	movw	r9, #1022	; 0x3fe
 80077c6:	f240 3aff 	movw	sl, #1023	; 0x3ff
    Fiber *f = waitQueue;
 80077ca:	4b25      	ldr	r3, [pc, #148]	; (8007860 <_ZN5codal15scheduler_eventENS_5EventE+0xb4>)
 80077cc:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80077d0:	f8bd b012 	ldrh.w	fp, [sp, #18]
 80077d4:	681c      	ldr	r4, [r3, #0]
        // Normal case.
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
        {
            // Wakey wakey!
            dequeue_fiber(f);
            queue_fiber(f,&runQueue);
 80077d6:	4f23      	ldr	r7, [pc, #140]	; (8007864 <_ZN5codal15scheduler_eventENS_5EventE+0xb8>)
    while (f != NULL)
 80077d8:	b344      	cbz	r4, 800782c <_ZN5codal15scheduler_eventENS_5EventE+0x80>
        uint16_t id = f->context & 0xFFFF;
 80077da:	68e3      	ldr	r3, [r4, #12]
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 80077dc:	454d      	cmp	r5, r9
        uint16_t id = f->context & 0xFFFF;
 80077de:	b299      	uxth	r1, r3
        uint16_t value = (f->context & 0xFFFF0000) >> 16;
 80077e0:	ea4f 4313 	mov.w	r3, r3, lsr #16
        t = f->next;
 80077e4:	f8d4 8018 	ldr.w	r8, [r4, #24]
        uint16_t value = (f->context & 0xFFFF0000) >> 16;
 80077e8:	b298      	uxth	r0, r3
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 80077ea:	d10f      	bne.n	800780c <_ZN5codal15scheduler_eventENS_5EventE+0x60>
 80077ec:	4551      	cmp	r1, sl
 80077ee:	d10d      	bne.n	800780c <_ZN5codal15scheduler_eventENS_5EventE+0x60>
 80077f0:	b10b      	cbz	r3, 80077f6 <_ZN5codal15scheduler_eventENS_5EventE+0x4a>
 80077f2:	4558      	cmp	r0, fp
 80077f4:	d108      	bne.n	8007808 <_ZN5codal15scheduler_eventENS_5EventE+0x5c>
            if (!notifyOneComplete)
 80077f6:	b93a      	cbnz	r2, 8007808 <_ZN5codal15scheduler_eventENS_5EventE+0x5c>
                dequeue_fiber(f);
 80077f8:	4620      	mov	r0, r4
 80077fa:	f001 fe40 	bl	800947e <_ZN5codal13dequeue_fiberEPNS_5FiberE>
                queue_fiber(f,&runQueue);
 80077fe:	4639      	mov	r1, r7
 8007800:	4620      	mov	r0, r4
 8007802:	f001 fe25 	bl	8009450 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
                notifyOneComplete = 1;
 8007806:	2201      	movs	r2, #1
 8007808:	4644      	mov	r4, r8
 800780a:	e7e5      	b.n	80077d8 <_ZN5codal15scheduler_eventENS_5EventE+0x2c>
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
 800780c:	b109      	cbz	r1, 8007812 <_ZN5codal15scheduler_eventENS_5EventE+0x66>
 800780e:	428d      	cmp	r5, r1
 8007810:	d1fa      	bne.n	8007808 <_ZN5codal15scheduler_eventENS_5EventE+0x5c>
 8007812:	b10b      	cbz	r3, 8007818 <_ZN5codal15scheduler_eventENS_5EventE+0x6c>
 8007814:	4558      	cmp	r0, fp
 8007816:	d1f7      	bne.n	8007808 <_ZN5codal15scheduler_eventENS_5EventE+0x5c>
            dequeue_fiber(f);
 8007818:	4620      	mov	r0, r4
 800781a:	9203      	str	r2, [sp, #12]
 800781c:	f001 fe2f 	bl	800947e <_ZN5codal13dequeue_fiberEPNS_5FiberE>
            queue_fiber(f,&runQueue);
 8007820:	4639      	mov	r1, r7
 8007822:	4620      	mov	r0, r4
 8007824:	f001 fe14 	bl	8009450 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
 8007828:	9a03      	ldr	r2, [sp, #12]
 800782a:	e7ed      	b.n	8007808 <_ZN5codal15scheduler_eventENS_5EventE+0x5c>

        f = t;
    }

    // Unregister this event, as we've woken up all the fibers with this match.
    if (evt.source != DEVICE_ID_NOTIFY && evt.source != DEVICE_ID_NOTIFY_ONE)
 800782c:	f2a5 33fe 	subw	r3, r5, #1022	; 0x3fe
 8007830:	2b01      	cmp	r3, #1
 8007832:	d910      	bls.n	8007856 <_ZN5codal15scheduler_eventENS_5EventE+0xaa>
        int ignore(int id, int value, void (*handler)(Event))
        {
            if (handler == NULL)
                return DEVICE_INVALID_PARAMETER;

            Listener listener(id, value, handler);
 8007834:	2310      	movs	r3, #16
        messageBus->ignore(evt.source, evt.value, scheduler_event);
 8007836:	6834      	ldr	r4, [r6, #0]
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	465a      	mov	r2, fp
 800783c:	4b0a      	ldr	r3, [pc, #40]	; (8007868 <_ZN5codal15scheduler_eventENS_5EventE+0xbc>)
 800783e:	4629      	mov	r1, r5
 8007840:	a806      	add	r0, sp, #24
 8007842:	f001 fec1 	bl	80095c8 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            remove(&listener);
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	a906      	add	r1, sp, #24
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	4620      	mov	r0, r4
 800784e:	4798      	blx	r3
            Listener listener(id, value, handler);
 8007850:	a806      	add	r0, sp, #24
 8007852:	f001 fecd 	bl	80095f0 <_ZN5codal8ListenerD1Ev>
}
 8007856:	b00f      	add	sp, #60	; 0x3c
 8007858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785c:	20002144 	.word	0x20002144
 8007860:	2000215c 	.word	0x2000215c
 8007864:	20002150 	.word	0x20002150
 8007868:	080077ad 	.word	0x080077ad

0800786c <_Z15getFiberContextv>:
{
 800786c:	b538      	push	{r3, r4, r5, lr}
    target_disable_irq();
 800786e:	f7f9 fa9b 	bl	8000da8 <target_disable_irq>
    if (fiberPool != NULL)
 8007872:	4b11      	ldr	r3, [pc, #68]	; (80078b8 <_Z15getFiberContextv+0x4c>)
 8007874:	681c      	ldr	r4, [r3, #0]
 8007876:	b184      	cbz	r4, 800789a <_Z15getFiberContextv+0x2e>
        dequeue_fiber(f);
 8007878:	4620      	mov	r0, r4
 800787a:	f001 fe00 	bl	800947e <_ZN5codal13dequeue_fiberEPNS_5FiberE>
    target_enable_irq();
 800787e:	f7f9 fa91 	bl	8000da4 <target_enable_irq>
    f->flags = 0;
 8007882:	2300      	movs	r3, #0
 8007884:	6123      	str	r3, [r4, #16]
    f->user_data = 0;
 8007886:	6223      	str	r3, [r4, #32]
    tcb_configure_stack_base(f->tcb, fiber_initial_stack_base());
 8007888:	6825      	ldr	r5, [r4, #0]
 800788a:	f7f9 fa37 	bl	8000cfc <fiber_initial_stack_base>
 800788e:	4601      	mov	r1, r0
 8007890:	4628      	mov	r0, r5
 8007892:	f7f9 fa92 	bl	8000dba <tcb_configure_stack_base>
}
 8007896:	4620      	mov	r0, r4
 8007898:	bd38      	pop	{r3, r4, r5, pc}
        f = new Fiber();
 800789a:	2024      	movs	r0, #36	; 0x24
 800789c:	f7fb f964 	bl	8002b68 <_Znwj>
 80078a0:	2224      	movs	r2, #36	; 0x24
 80078a2:	2100      	movs	r1, #0
 80078a4:	4604      	mov	r4, r0
 80078a6:	f7fa fed5 	bl	8002654 <memset>
        f->tcb = tcb_allocate();
 80078aa:	f7f9 fa7f 	bl	8000dac <tcb_allocate>
        f->stack_bottom = 0;
 80078ae:	2300      	movs	r3, #0
        f->tcb = tcb_allocate();
 80078b0:	6020      	str	r0, [r4, #0]
        f->stack_top = 0;
 80078b2:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80078b6:	e7e2      	b.n	800787e <_Z15getFiberContextv+0x12>
 80078b8:	20002154 	.word	0x20002154

080078bc <_ZL10handle_fobv>:

static Fiber* handle_fob()
{
    Fiber *f = currentFiber;
 80078bc:	4b08      	ldr	r3, [pc, #32]	; (80078e0 <_ZL10handle_fobv+0x24>)
{
 80078be:	b510      	push	{r4, lr}
    Fiber *f = currentFiber;
 80078c0:	681c      	ldr	r4, [r3, #0]

    // This is a blocking call, so if we're in a fork on block context,
    // it's time to spawn a new fiber...
    if (f->flags & DEVICE_FIBER_FLAG_FOB)
 80078c2:	6923      	ldr	r3, [r4, #16]
 80078c4:	07db      	lsls	r3, r3, #31
 80078c6:	d509      	bpl.n	80078dc <_ZL10handle_fobv+0x20>
    {
        // Allocate a TCB from the new fiber. This will come from the tread pool if availiable,
        // else a new one will be allocated on the heap.
        forkedFiber = getFiberContext();
 80078c8:	f7ff ffd0 	bl	800786c <_Z15getFiberContextv>
 80078cc:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <_ZL10handle_fobv+0x28>)
 80078ce:	6018      	str	r0, [r3, #0]
         // If we're out of memory, there's nothing we can do.
        // keep running in the context of the current thread as a best effort.
        if (forkedFiber != NULL) {
 80078d0:	b120      	cbz	r0, 80078dc <_ZL10handle_fobv+0x20>
#if CONFIG_ENABLED(DEVICE_FIBER_USER_DATA)
            forkedFiber->user_data = f->user_data;
 80078d2:	6a23      	ldr	r3, [r4, #32]
 80078d4:	6203      	str	r3, [r0, #32]
            f->user_data = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	6223      	str	r3, [r4, #32]
 80078da:	4604      	mov	r4, r0
#endif
            f = forkedFiber;
        }
    }
    return f;
}
 80078dc:	4620      	mov	r0, r4
 80078de:	bd10      	pop	{r4, pc}
 80078e0:	20002140 	.word	0x20002140
 80078e4:	2000214c 	.word	0x2000214c

080078e8 <_ZN5codal23fiber_scheduler_runningEv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 80078e8:	4b02      	ldr	r3, [pc, #8]	; (80078f4 <_ZN5codal23fiber_scheduler_runningEv+0xc>)
 80078ea:	7818      	ldrb	r0, [r3, #0]
}
 80078ec:	f000 0001 	and.w	r0, r0, #1
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	2000220e 	.word	0x2000220e

080078f8 <_ZN5codal14scheduler_initERNS_10EventModelE>:
{
 80078f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078fa:	4602      	mov	r2, r0
    if (fiber_scheduler_running())
 80078fc:	f7ff fff4 	bl	80078e8 <_ZN5codal23fiber_scheduler_runningEv>
 8007900:	4606      	mov	r6, r0
 8007902:	2800      	cmp	r0, #0
 8007904:	d13c      	bne.n	8007980 <_ZN5codal14scheduler_initERNS_10EventModelE+0x88>
    messageBus = &_messageBus;
 8007906:	4c1f      	ldr	r4, [pc, #124]	; (8007984 <_ZN5codal14scheduler_initERNS_10EventModelE+0x8c>)
    idleFiber = getFiberContext();
 8007908:	4d1f      	ldr	r5, [pc, #124]	; (8007988 <_ZN5codal14scheduler_initERNS_10EventModelE+0x90>)
    messageBus = &_messageBus;
 800790a:	6022      	str	r2, [r4, #0]
    currentFiber = getFiberContext();
 800790c:	f7ff ffae 	bl	800786c <_Z15getFiberContextv>
 8007910:	4b1e      	ldr	r3, [pc, #120]	; (800798c <_ZN5codal14scheduler_initERNS_10EventModelE+0x94>)
    queue_fiber(currentFiber, &runQueue);
 8007912:	491f      	ldr	r1, [pc, #124]	; (8007990 <_ZN5codal14scheduler_initERNS_10EventModelE+0x98>)
    currentFiber = getFiberContext();
 8007914:	6018      	str	r0, [r3, #0]
    queue_fiber(currentFiber, &runQueue);
 8007916:	f001 fd9b 	bl	8009450 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    idleFiber = getFiberContext();
 800791a:	f7ff ffa7 	bl	800786c <_Z15getFiberContextv>
    tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 800791e:	6807      	ldr	r7, [r0, #0]
    idleFiber = getFiberContext();
 8007920:	6028      	str	r0, [r5, #0]
    tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 8007922:	f7f9 f9eb 	bl	8000cfc <fiber_initial_stack_base>
 8007926:	1f01      	subs	r1, r0, #4
 8007928:	4638      	mov	r0, r7
 800792a:	f7f9 fa44 	bl	8000db6 <tcb_configure_sp>
    tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 800792e:	682b      	ldr	r3, [r5, #0]
 8007930:	4918      	ldr	r1, [pc, #96]	; (8007994 <_ZN5codal14scheduler_initERNS_10EventModelE+0x9c>)
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	f7f9 fa3d 	bl	8000db2 <tcb_configure_lr>
    if (messageBus)
 8007938:	6820      	ldr	r0, [r4, #0]
 800793a:	b1e0      	cbz	r0, 8007976 <_ZN5codal14scheduler_initERNS_10EventModelE+0x7e>
        messageBus->listen(DEVICE_ID_NOTIFY, DEVICE_EVT_ANY, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800793c:	25c0      	movs	r5, #192	; 0xc0
 800793e:	4b16      	ldr	r3, [pc, #88]	; (8007998 <_ZN5codal14scheduler_initERNS_10EventModelE+0xa0>)
 8007940:	4632      	mov	r2, r6
 8007942:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007946:	9500      	str	r5, [sp, #0]
 8007948:	f7ff fe94 	bl	8007674 <_ZN5codal10EventModel6listenEiiPFvNS_5EventEEt>
        messageBus->listen(DEVICE_ID_NOTIFY_ONE, DEVICE_EVT_ANY, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800794c:	4b12      	ldr	r3, [pc, #72]	; (8007998 <_ZN5codal14scheduler_initERNS_10EventModelE+0xa0>)
 800794e:	4632      	mov	r2, r6
 8007950:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8007954:	9500      	str	r5, [sp, #0]
 8007956:	6820      	ldr	r0, [r4, #0]
 8007958:	f7ff fe8c 	bl	8007674 <_ZN5codal10EventModel6listenEiiPFvNS_5EventEEt>
        system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK);
 800795c:	2201      	movs	r2, #1
 800795e:	210f      	movs	r1, #15
 8007960:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8007964:	f000 fa9e 	bl	8007ea4 <_ZN5codal27system_timer_event_every_usEmtt>
        messageBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK, scheduler_tick, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007968:	9500      	str	r5, [sp, #0]
 800796a:	4b0c      	ldr	r3, [pc, #48]	; (800799c <_ZN5codal14scheduler_initERNS_10EventModelE+0xa4>)
 800796c:	2201      	movs	r2, #1
 800796e:	210f      	movs	r1, #15
 8007970:	6820      	ldr	r0, [r4, #0]
 8007972:	f7ff fe7f 	bl	8007674 <_ZN5codal10EventModel6listenEiiPFvNS_5EventEEt>
    fiber_flags |= DEVICE_SCHEDULER_RUNNING;
 8007976:	4a0a      	ldr	r2, [pc, #40]	; (80079a0 <_ZN5codal14scheduler_initERNS_10EventModelE+0xa8>)
 8007978:	7813      	ldrb	r3, [r2, #0]
 800797a:	f043 0301 	orr.w	r3, r3, #1
 800797e:	7013      	strb	r3, [r2, #0]
}
 8007980:	b003      	add	sp, #12
 8007982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007984:	20002144 	.word	0x20002144
 8007988:	20002158 	.word	0x20002158
 800798c:	20002140 	.word	0x20002140
 8007990:	20002150 	.word	0x20002150
 8007994:	08009539 	.word	0x08009539
 8007998:	080077ad 	.word	0x080077ad
 800799c:	08007775 	.word	0x08007775
 80079a0:	2000220e 	.word	0x2000220e

080079a4 <_ZN5codal19fiber_wake_on_eventEtt>:
  * //deschedule the current fiber manually, waiting for the previously configured event.
  * schedule();
  * @endcode
  */
int codal::fiber_wake_on_event(uint16_t id, uint16_t value)
{
 80079a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (messageBus == NULL || !fiber_scheduler_running())
 80079a6:	4d12      	ldr	r5, [pc, #72]	; (80079f0 <_ZN5codal19fiber_wake_on_eventEtt+0x4c>)
{
 80079a8:	4604      	mov	r4, r0
    if (messageBus == NULL || !fiber_scheduler_running())
 80079aa:	682b      	ldr	r3, [r5, #0]
{
 80079ac:	460e      	mov	r6, r1
    if (messageBus == NULL || !fiber_scheduler_running())
 80079ae:	b1e3      	cbz	r3, 80079ea <_ZN5codal19fiber_wake_on_eventEtt+0x46>
 80079b0:	f7ff ff9a 	bl	80078e8 <_ZN5codal23fiber_scheduler_runningEv>
 80079b4:	b1c8      	cbz	r0, 80079ea <_ZN5codal19fiber_wake_on_eventEtt+0x46>
        return DEVICE_NOT_SUPPORTED;

    Fiber *f = handle_fob();
 80079b6:	f7ff ff81 	bl	80078bc <_ZL10handle_fobv>
 80079ba:	4607      	mov	r7, r0

    // Encode the event data in the context field. It's handy having a 32 bit core. :-)
    f->context = (uint32_t)value << 16 | id;
 80079bc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 80079c0:	60c3      	str	r3, [r0, #12]

    // Remove ourselves from the run queue
    dequeue_fiber(f);
 80079c2:	f001 fd5c 	bl	800947e <_ZN5codal13dequeue_fiberEPNS_5FiberE>

    // Add ourselves to the sleep queue. We maintain strict ordering here to reduce lookup times.
    queue_fiber(f, &waitQueue);
 80079c6:	490b      	ldr	r1, [pc, #44]	; (80079f4 <_ZN5codal19fiber_wake_on_eventEtt+0x50>)
 80079c8:	4638      	mov	r0, r7
 80079ca:	f001 fd41 	bl	8009450 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    // Register to receive this event, so we can wake up the fiber when it happens.
    // Special case for the notify channel, as we always stay registered for that.
    if (id != DEVICE_ID_NOTIFY && id != DEVICE_ID_NOTIFY_ONE)
 80079ce:	f2a4 33fe 	subw	r3, r4, #1022	; 0x3fe
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d907      	bls.n	80079e6 <_ZN5codal19fiber_wake_on_eventEtt+0x42>
        messageBus->listen(id, value, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 80079d6:	23c0      	movs	r3, #192	; 0xc0
 80079d8:	4632      	mov	r2, r6
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	4621      	mov	r1, r4
 80079de:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <_ZN5codal19fiber_wake_on_eventEtt+0x54>)
 80079e0:	6828      	ldr	r0, [r5, #0]
 80079e2:	f7ff fe47 	bl	8007674 <_ZN5codal10EventModel6listenEiiPFvNS_5EventEEt>

    return DEVICE_OK;
 80079e6:	2000      	movs	r0, #0
 80079e8:	e000      	b.n	80079ec <_ZN5codal19fiber_wake_on_eventEtt+0x48>
        return DEVICE_NOT_SUPPORTED;
 80079ea:	4804      	ldr	r0, [pc, #16]	; (80079fc <_ZN5codal19fiber_wake_on_eventEtt+0x58>)
}
 80079ec:	b003      	add	sp, #12
 80079ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f0:	20002144 	.word	0x20002144
 80079f4:	2000215c 	.word	0x2000215c
 80079f8:	080077ad 	.word	0x080077ad
 80079fc:	fffffc16 	.word	0xfffffc16

08007a00 <_Z14__create_fibermmmi>:
    release_fiber(pm);
}


Fiber *__create_fiber(uint32_t ep, uint32_t cp, uint32_t pm, int parameterised)
{
 8007a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a04:	460e      	mov	r6, r1
 8007a06:	4690      	mov	r8, r2
 8007a08:	461f      	mov	r7, r3
    // Validate our parameters.
    if (ep == 0 || cp == 0)
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	b918      	cbnz	r0, 8007a16 <_Z14__create_fibermmmi+0x16>
        return NULL;
 8007a0e:	2400      	movs	r4, #0

    // Add new fiber to the run queue.
    queue_fiber(newFiber, &runQueue);

    return newFiber;
}
 8007a10:	4620      	mov	r0, r4
 8007a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (ep == 0 || cp == 0)
 8007a16:	2900      	cmp	r1, #0
 8007a18:	d0f9      	beq.n	8007a0e <_Z14__create_fibermmmi+0xe>
    Fiber *newFiber = getFiberContext();
 8007a1a:	f7ff ff27 	bl	800786c <_Z15getFiberContextv>
    if (newFiber == NULL)
 8007a1e:	4604      	mov	r4, r0
 8007a20:	2800      	cmp	r0, #0
 8007a22:	d0f4      	beq.n	8007a0e <_Z14__create_fibermmmi+0xe>
    tcb_configure_args(newFiber->tcb, ep, cp, pm);
 8007a24:	4643      	mov	r3, r8
 8007a26:	4632      	mov	r2, r6
 8007a28:	4629      	mov	r1, r5
 8007a2a:	6800      	ldr	r0, [r0, #0]
 8007a2c:	f7f9 f9cd 	bl	8000dca <tcb_configure_args>
    tcb_configure_sp(newFiber->tcb, INITIAL_STACK_DEPTH);
 8007a30:	6825      	ldr	r5, [r4, #0]
 8007a32:	f7f9 f963 	bl	8000cfc <fiber_initial_stack_base>
 8007a36:	1f01      	subs	r1, r0, #4
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f7f9 f9bc 	bl	8000db6 <tcb_configure_sp>
    tcb_configure_lr(newFiber->tcb, parameterised ? (PROCESSOR_WORD_TYPE) &launch_new_fiber_param : (PROCESSOR_WORD_TYPE) &launch_new_fiber);
 8007a3e:	4b06      	ldr	r3, [pc, #24]	; (8007a58 <_Z14__create_fibermmmi+0x58>)
 8007a40:	4906      	ldr	r1, [pc, #24]	; (8007a5c <_Z14__create_fibermmmi+0x5c>)
 8007a42:	6820      	ldr	r0, [r4, #0]
 8007a44:	2f00      	cmp	r7, #0
 8007a46:	bf18      	it	ne
 8007a48:	4619      	movne	r1, r3
 8007a4a:	f7f9 f9b2 	bl	8000db2 <tcb_configure_lr>
    queue_fiber(newFiber, &runQueue);
 8007a4e:	4904      	ldr	r1, [pc, #16]	; (8007a60 <_Z14__create_fibermmmi+0x60>)
 8007a50:	4620      	mov	r0, r4
 8007a52:	f001 fcfd 	bl	8009450 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    return newFiber;
 8007a56:	e7db      	b.n	8007a10 <_Z14__create_fibermmmi+0x10>
 8007a58:	0800951f 	.word	0x0800951f
 8007a5c:	080094fd 	.word	0x080094fd
 8007a60:	20002150 	.word	0x20002150

08007a64 <_ZN5codal17verify_stack_sizeEPNS_5FiberE>:
  * @param f The fiber context to verify.
  *
  * @return The stack depth of the given fiber.
  */
void codal::verify_stack_size(Fiber *f)
{
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	4605      	mov	r5, r0
    // Ensure the stack buffer is large enough to hold the stack Reallocate if necessary.
    PROCESSOR_WORD_TYPE stackDepth;
    PROCESSOR_WORD_TYPE bufferSize;

    // Calculate the stack depth.
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 8007a68:	6800      	ldr	r0, [r0, #0]
 8007a6a:	f7f9 f9a8 	bl	8000dbe <tcb_get_stack_base>
 8007a6e:	4604      	mov	r4, r0
 8007a70:	f7f9 f9a7 	bl	8000dc2 <get_current_sp>
 8007a74:	1a24      	subs	r4, r4, r0

    // Calculate the size of our allocated stack buffer
    bufferSize = f->stack_top - f->stack_bottom;
 8007a76:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 8007a7a:	1a1b      	subs	r3, r3, r0

    // If we're too small, increase our buffer size.
    if (bufferSize < stackDepth)
 8007a7c:	429c      	cmp	r4, r3
 8007a7e:	d90f      	bls.n	8007aa0 <_ZN5codal17verify_stack_sizeEPNS_5FiberE+0x3c>
    {
        // We are only here, when the current stack is the stack of fiber [f].
        // Make sure the contents of [currentFiber] variable reflects that, otherwise
        // an external memory allocator might get confused when scanning fiber stacks.
        Fiber *prevCurrFiber = currentFiber;
 8007a80:	4e08      	ldr	r6, [pc, #32]	; (8007aa4 <_ZN5codal17verify_stack_sizeEPNS_5FiberE+0x40>)
        currentFiber = f;

        // To ease heap churn, we choose the next largest multple of 32 bytes.
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 8007a82:	3420      	adds	r4, #32
        Fiber *prevCurrFiber = currentFiber;
 8007a84:	6837      	ldr	r7, [r6, #0]
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 8007a86:	f024 041f 	bic.w	r4, r4, #31
        currentFiber = f;
 8007a8a:	6035      	str	r5, [r6, #0]

        // Release the old memory
        if (f->stack_bottom != 0)
 8007a8c:	b108      	cbz	r0, 8007a92 <_ZN5codal17verify_stack_sizeEPNS_5FiberE+0x2e>
            free((void *)f->stack_bottom);
 8007a8e:	f000 f98b 	bl	8007da8 <device_free>

        // Allocate a new one of the appropriate size.
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 f964 	bl	8007d60 <device_malloc>
 8007a98:	6068      	str	r0, [r5, #4]

        // Recalculate where the top of the stack is and we're done.
        f->stack_top = f->stack_bottom + bufferSize;
 8007a9a:	4420      	add	r0, r4
 8007a9c:	60a8      	str	r0, [r5, #8]

        currentFiber = prevCurrFiber;
 8007a9e:	6037      	str	r7, [r6, #0]
    }
}
 8007aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20002140 	.word	0x20002140

08007aa8 <_ZN5codal24scheduler_runqueue_emptyEv>:
  *
  * @return The number of fibers currently on the run queue
  */
int codal::scheduler_runqueue_empty()
{
    return (runQueue == NULL);
 8007aa8:	4b02      	ldr	r3, [pc, #8]	; (8007ab4 <_ZN5codal24scheduler_runqueue_emptyEv+0xc>)
 8007aaa:	6818      	ldr	r0, [r3, #0]
}
 8007aac:	fab0 f080 	clz	r0, r0
 8007ab0:	0940      	lsrs	r0, r0, #5
 8007ab2:	4770      	bx	lr
 8007ab4:	20002150 	.word	0x20002150

08007ab8 <_ZN5codal4idleEv>:
/**
  * Set of tasks to perform when idle.
  * Service any background tasks that are required, and attempt a power efficient sleep.
  */
void codal::idle()
{
 8007ab8:	b513      	push	{r0, r1, r4, lr}
    // Prevent an idle loop of death:
    // We will return to idle after processing any idle events that add anything
    // to our run queue, we use the DEVICE_SCHEDULER_IDLE flag to determine this
    // scenario.
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
 8007aba:	4c0c      	ldr	r4, [pc, #48]	; (8007aec <_ZN5codal4idleEv+0x34>)
 8007abc:	7823      	ldrb	r3, [r4, #0]
 8007abe:	079a      	lsls	r2, r3, #30
 8007ac0:	d408      	bmi.n	8007ad4 <_ZN5codal4idleEv+0x1c>
    {
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
 8007ac2:	f043 0302 	orr.w	r3, r3, #2
 8007ac6:	7023      	strb	r3, [r4, #0]
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
 8007ac8:	2202      	movs	r2, #2
 8007aca:	2301      	movs	r3, #1
 8007acc:	210f      	movs	r1, #15
 8007ace:	4668      	mov	r0, sp
 8007ad0:	f002 f8a9 	bl	8009c26 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
    return (runQueue == NULL);
 8007ad4:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <_ZN5codal4idleEv+0x38>)
    }

    // If the above did create any useful work, enter power efficient sleep.
    if(scheduler_runqueue_empty())
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	b92b      	cbnz	r3, 8007ae6 <_ZN5codal4idleEv+0x2e>
    {
        // unset our DEVICE_SCHEDULER_IDLE flag, we have processed all of the events
        // because we enforce MESSAGE_BUS_LISTENER_IMMEDIATE for listeners placed
        // on the scheduler.
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
 8007ada:	7823      	ldrb	r3, [r4, #0]
 8007adc:	f023 0302 	bic.w	r3, r3, #2
 8007ae0:	7023      	strb	r3, [r4, #0]
        target_wait_for_event();
 8007ae2:	f7f9 f8b9 	bl	8000c58 <target_wait_for_event>
    }
}
 8007ae6:	b002      	add	sp, #8
 8007ae8:	bd10      	pop	{r4, pc}
 8007aea:	bf00      	nop
 8007aec:	2000220e 	.word	0x2000220e
 8007af0:	20002150 	.word	0x20002150

08007af4 <_ZN5codal8scheduleEv>:
{
 8007af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (!fiber_scheduler_running())
 8007af8:	f7ff fef6 	bl	80078e8 <_ZN5codal23fiber_scheduler_runningEv>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d06f      	beq.n	8007be0 <_ZN5codal8scheduleEv+0xec>
    Fiber *oldFiber = currentFiber;
 8007b00:	4e38      	ldr	r6, [pc, #224]	; (8007be4 <_ZN5codal8scheduleEv+0xf0>)
 8007b02:	6834      	ldr	r4, [r6, #0]
 8007b04:	4635      	mov	r5, r6
    if (currentFiber->flags & DEVICE_FIBER_FLAG_FOB)
 8007b06:	6923      	ldr	r3, [r4, #16]
 8007b08:	f013 0f01 	tst.w	r3, #1
 8007b0c:	d021      	beq.n	8007b52 <_ZN5codal8scheduleEv+0x5e>
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 8007b0e:	4d36      	ldr	r5, [pc, #216]	; (8007be8 <_ZN5codal8scheduleEv+0xf4>)
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
 8007b10:	f043 0302 	orr.w	r3, r3, #2
 8007b14:	6123      	str	r3, [r4, #16]
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 8007b16:	682b      	ldr	r3, [r5, #0]
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 8007b18:	6820      	ldr	r0, [r4, #0]
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 8007b1a:	691a      	ldr	r2, [r3, #16]
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 8007b1c:	681f      	ldr	r7, [r3, #0]
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 8007b1e:	f042 0204 	orr.w	r2, r2, #4
 8007b22:	611a      	str	r2, [r3, #16]
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 8007b24:	f7f9 f94f 	bl	8000dc6 <tcb_get_sp>
 8007b28:	4601      	mov	r1, r0
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	f7f9 f945 	bl	8000dba <tcb_configure_stack_base>
        verify_stack_size(forkedFiber);
 8007b30:	6828      	ldr	r0, [r5, #0]
 8007b32:	f7ff ff97 	bl	8007a64 <_ZN5codal17verify_stack_sizeEPNS_5FiberE>
        save_context(forkedFiber->tcb, forkedFiber->stack_top);
 8007b36:	682b      	ldr	r3, [r5, #0]
 8007b38:	6899      	ldr	r1, [r3, #8]
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	f7f9 f98f 	bl	8000e5e <save_context>
        if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 8007b40:	6833      	ldr	r3, [r6, #0]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	0792      	lsls	r2, r2, #30
 8007b46:	d54b      	bpl.n	8007be0 <_ZN5codal8scheduleEv+0xec>
}
 8007b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            restore_register_context(currentFiber->tcb);
 8007b4c:	6818      	ldr	r0, [r3, #0]
 8007b4e:	f7f9 b9c0 	b.w	8000ed2 <restore_register_context>
    if (runQueue == NULL)
 8007b52:	4f26      	ldr	r7, [pc, #152]	; (8007bec <_ZN5codal8scheduleEv+0xf8>)
 8007b54:	4e26      	ldr	r6, [pc, #152]	; (8007bf0 <_ZN5codal8scheduleEv+0xfc>)
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	6831      	ldr	r1, [r6, #0]
 8007b5a:	2a00      	cmp	r2, #0
 8007b5c:	d12e      	bne.n	8007bbc <_ZN5codal8scheduleEv+0xc8>
        currentFiber = idleFiber;
 8007b5e:	6029      	str	r1, [r5, #0]
    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 8007b60:	682a      	ldr	r2, [r5, #0]
 8007b62:	428a      	cmp	r2, r1
 8007b64:	d108      	bne.n	8007b78 <_ZN5codal8scheduleEv+0x84>
 8007b66:	071b      	lsls	r3, r3, #28
 8007b68:	d506      	bpl.n	8007b78 <_ZN5codal8scheduleEv+0x84>
        currentFiber = oldFiber;
 8007b6a:	602c      	str	r4, [r5, #0]
            idle();
 8007b6c:	f7ff ffa4 	bl	8007ab8 <_ZN5codal4idleEv>
        while (runQueue == NULL);
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0fa      	beq.n	8007b6c <_ZN5codal8scheduleEv+0x78>
        currentFiber = runQueue;
 8007b76:	602b      	str	r3, [r5, #0]
    if (currentFiber != oldFiber)
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	429c      	cmp	r4, r3
 8007b7c:	d030      	beq.n	8007be0 <_ZN5codal8scheduleEv+0xec>
        if (currentFiber == idleFiber)
 8007b7e:	6832      	ldr	r2, [r6, #0]
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d10b      	bne.n	8007b9c <_ZN5codal8scheduleEv+0xa8>
            tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 8007b84:	681f      	ldr	r7, [r3, #0]
 8007b86:	f7f9 f8b9 	bl	8000cfc <fiber_initial_stack_base>
 8007b8a:	1f01      	subs	r1, r0, #4
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	f7f9 f912 	bl	8000db6 <tcb_configure_sp>
            tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 8007b92:	6833      	ldr	r3, [r6, #0]
 8007b94:	4917      	ldr	r1, [pc, #92]	; (8007bf4 <_ZN5codal8scheduleEv+0x100>)
 8007b96:	6818      	ldr	r0, [r3, #0]
 8007b98:	f7f9 f90b 	bl	8000db2 <tcb_configure_lr>
        if (oldFiber == idleFiber || oldFiber->queue == &fiberPool)
 8007b9c:	6833      	ldr	r3, [r6, #0]
 8007b9e:	429c      	cmp	r4, r3
 8007ba0:	d003      	beq.n	8007baa <_ZN5codal8scheduleEv+0xb6>
 8007ba2:	6962      	ldr	r2, [r4, #20]
 8007ba4:	4b14      	ldr	r3, [pc, #80]	; (8007bf8 <_ZN5codal8scheduleEv+0x104>)
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d111      	bne.n	8007bce <_ZN5codal8scheduleEv+0xda>
            swap_context(NULL, 0, currentFiber->tcb, currentFiber->stack_top);
 8007baa:	2100      	movs	r1, #0
 8007bac:	4608      	mov	r0, r1
 8007bae:	682a      	ldr	r2, [r5, #0]
 8007bb0:	6893      	ldr	r3, [r2, #8]
 8007bb2:	6812      	ldr	r2, [r2, #0]
}
 8007bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
 8007bb8:	f7f9 b910 	b.w	8000ddc <swap_context>
    else if (currentFiber->queue == &runQueue)
 8007bbc:	6960      	ldr	r0, [r4, #20]
 8007bbe:	42b8      	cmp	r0, r7
 8007bc0:	d103      	bne.n	8007bca <_ZN5codal8scheduleEv+0xd6>
        currentFiber = currentFiber->next == NULL ? runQueue : currentFiber->next;
 8007bc2:	69a0      	ldr	r0, [r4, #24]
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	bf18      	it	ne
 8007bc8:	4602      	movne	r2, r0
        currentFiber = runQueue;
 8007bca:	602a      	str	r2, [r5, #0]
 8007bcc:	e7c8      	b.n	8007b60 <_ZN5codal8scheduleEv+0x6c>
            verify_stack_size(oldFiber);
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f7ff ff48 	bl	8007a64 <_ZN5codal17verify_stack_sizeEPNS_5FiberE>
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
 8007bd4:	682a      	ldr	r2, [r5, #0]
 8007bd6:	68a1      	ldr	r1, [r4, #8]
 8007bd8:	6893      	ldr	r3, [r2, #8]
 8007bda:	6820      	ldr	r0, [r4, #0]
 8007bdc:	6812      	ldr	r2, [r2, #0]
 8007bde:	e7e9      	b.n	8007bb4 <_ZN5codal8scheduleEv+0xc0>
}
 8007be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be4:	20002140 	.word	0x20002140
 8007be8:	2000214c 	.word	0x2000214c
 8007bec:	20002150 	.word	0x20002150
 8007bf0:	20002158 	.word	0x20002158
 8007bf4:	08009539 	.word	0x08009539
 8007bf8:	20002154 	.word	0x20002154

08007bfc <_ZN5codal11fiber_sleepEm>:
{
 8007bfc:	b538      	push	{r3, r4, r5, lr}
 8007bfe:	4604      	mov	r4, r0
    if (!fiber_scheduler_running())
 8007c00:	f7ff fe72 	bl	80078e8 <_ZN5codal23fiber_scheduler_runningEv>
 8007c04:	b920      	cbnz	r0, 8007c10 <_ZN5codal11fiber_sleepEm+0x14>
        target_wait(t);
 8007c06:	4620      	mov	r0, r4
}
 8007c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        target_wait(t);
 8007c0c:	f7f9 b82c 	b.w	8000c68 <target_wait>
    Fiber *f = handle_fob();
 8007c10:	f7ff fe54 	bl	80078bc <_ZL10handle_fobv>
 8007c14:	4605      	mov	r5, r0
    f->context = system_timer_current_time() + t;
 8007c16:	f000 f93d 	bl	8007e94 <_ZN5codal25system_timer_current_timeEv>
 8007c1a:	4420      	add	r0, r4
 8007c1c:	60e8      	str	r0, [r5, #12]
    dequeue_fiber(f);
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f001 fc2d 	bl	800947e <_ZN5codal13dequeue_fiberEPNS_5FiberE>
    queue_fiber(f, &sleepQueue);
 8007c24:	4628      	mov	r0, r5
 8007c26:	4903      	ldr	r1, [pc, #12]	; (8007c34 <_ZN5codal11fiber_sleepEm+0x38>)
 8007c28:	f001 fc12 	bl	8009450 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
}
 8007c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    schedule();
 8007c30:	f7ff bf60 	b.w	8007af4 <_ZN5codal8scheduleEv>
 8007c34:	20002148 	.word	0x20002148

08007c38 <_ZN5codal13release_fiberEv>:
{
 8007c38:	b538      	push	{r3, r4, r5, lr}
    if (!fiber_scheduler_running())
 8007c3a:	f7ff fe55 	bl	80078e8 <_ZN5codal23fiber_scheduler_runningEv>
 8007c3e:	b358      	cbz	r0, 8007c98 <_ZN5codal13release_fiberEv+0x60>
    dequeue_fiber(currentFiber);
 8007c40:	4d16      	ldr	r5, [pc, #88]	; (8007c9c <_ZN5codal13release_fiberEv+0x64>)
    queue_fiber(currentFiber, &fiberPool);
 8007c42:	4c17      	ldr	r4, [pc, #92]	; (8007ca0 <_ZN5codal13release_fiberEv+0x68>)
    dequeue_fiber(currentFiber);
 8007c44:	6828      	ldr	r0, [r5, #0]
 8007c46:	f001 fc1a 	bl	800947e <_ZN5codal13dequeue_fiberEPNS_5FiberE>
    queue_fiber(currentFiber, &fiberPool);
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	6828      	ldr	r0, [r5, #0]
 8007c4e:	f001 fbff 	bl	8009450 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    int numFree = 0;
 8007c52:	2200      	movs	r2, #0
    for (Fiber *p = fiberPool; p; p = p->next) {
 8007c54:	6824      	ldr	r4, [r4, #0]
 8007c56:	b174      	cbz	r4, 8007c76 <_ZN5codal13release_fiberEv+0x3e>
        if (!p->next && numFree > 3) {
 8007c58:	69a3      	ldr	r3, [r4, #24]
 8007c5a:	b9d3      	cbnz	r3, 8007c92 <_ZN5codal13release_fiberEv+0x5a>
 8007c5c:	2a03      	cmp	r2, #3
 8007c5e:	dd18      	ble.n	8007c92 <_ZN5codal13release_fiberEv+0x5a>
            p->prev->next = NULL;
 8007c60:	69e2      	ldr	r2, [r4, #28]
            free(p->tcb);
 8007c62:	6820      	ldr	r0, [r4, #0]
            p->prev->next = NULL;
 8007c64:	6193      	str	r3, [r2, #24]
            free(p->tcb);
 8007c66:	f000 f89f 	bl	8007da8 <device_free>
            free((void *)p->stack_bottom);
 8007c6a:	6860      	ldr	r0, [r4, #4]
 8007c6c:	f000 f89c 	bl	8007da8 <device_free>
            free(p);
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 f899 	bl	8007da8 <device_free>
    currentFiber->flags = 0;
 8007c76:	2200      	movs	r2, #0
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	611a      	str	r2, [r3, #16]
    tcb_configure_stack_base(currentFiber->tcb, fiber_initial_stack_base());
 8007c7c:	681c      	ldr	r4, [r3, #0]
 8007c7e:	f7f9 f83d 	bl	8000cfc <fiber_initial_stack_base>
 8007c82:	4601      	mov	r1, r0
 8007c84:	4620      	mov	r0, r4
 8007c86:	f7f9 f898 	bl	8000dba <tcb_configure_stack_base>
}
 8007c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    schedule();
 8007c8e:	f7ff bf31 	b.w	8007af4 <_ZN5codal8scheduleEv>
        numFree++;
 8007c92:	3201      	adds	r2, #1
        if (!p->next && numFree > 3) {
 8007c94:	461c      	mov	r4, r3
 8007c96:	e7de      	b.n	8007c56 <_ZN5codal13release_fiberEv+0x1e>
}
 8007c98:	bd38      	pop	{r3, r4, r5, pc}
 8007c9a:	bf00      	nop
 8007c9c:	20002140 	.word	0x20002140
 8007ca0:	20002154 	.word	0x20002154

08007ca4 <_ZN5codal6invokeEPFvPvES0_>:
{
 8007ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca8:	460d      	mov	r5, r1
    if (entry_fn == NULL)
 8007caa:	4680      	mov	r8, r0
 8007cac:	b378      	cbz	r0, 8007d0e <_ZN5codal6invokeEPFvPvES0_+0x6a>
    if (!fiber_scheduler_running())
 8007cae:	f7ff fe1b 	bl	80078e8 <_ZN5codal23fiber_scheduler_runningEv>
 8007cb2:	b378      	cbz	r0, 8007d14 <_ZN5codal6invokeEPFvPvES0_+0x70>
    if (currentFiber->flags & (DEVICE_FIBER_FLAG_FOB | DEVICE_FIBER_FLAG_PARENT | DEVICE_FIBER_FLAG_CHILD) || HAS_THREAD_USER_DATA)
 8007cb4:	4f18      	ldr	r7, [pc, #96]	; (8007d18 <_ZN5codal6invokeEPFvPvES0_+0x74>)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	0752      	lsls	r2, r2, #29
 8007cbc:	d101      	bne.n	8007cc2 <_ZN5codal6invokeEPFvPvES0_+0x1e>
 8007cbe:	6a1c      	ldr	r4, [r3, #32]
 8007cc0:	b13c      	cbz	r4, 8007cd2 <_ZN5codal6invokeEPFvPvES0_+0x2e>
        create_fiber(entry_fn, param);
 8007cc2:	4a16      	ldr	r2, [pc, #88]	; (8007d1c <_ZN5codal6invokeEPFvPvES0_+0x78>)
 8007cc4:	4629      	mov	r1, r5
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	f001 fc00 	bl	80094cc <_ZN5codal12create_fiberEPFvPvES0_S2_>
        return DEVICE_OK;
 8007ccc:	2000      	movs	r0, #0
}
 8007cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    save_register_context(currentFiber->tcb);
 8007cd2:	6818      	ldr	r0, [r3, #0]
 8007cd4:	f7f9 f8e5 	bl	8000ea2 <save_register_context>
    if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	6913      	ldr	r3, [r2, #16]
 8007cdc:	f013 0602 	ands.w	r6, r3, #2
 8007ce0:	d003      	beq.n	8007cea <_ZN5codal6invokeEPFvPvES0_+0x46>
        currentFiber->flags &= ~DEVICE_FIBER_FLAG_PARENT;
 8007ce2:	f023 0303 	bic.w	r3, r3, #3
 8007ce6:	6113      	str	r3, [r2, #16]
 8007ce8:	e7f0      	b.n	8007ccc <_ZN5codal6invokeEPFvPvES0_+0x28>
    currentFiber->flags |= DEVICE_FIBER_FLAG_FOB;
 8007cea:	f043 0301 	orr.w	r3, r3, #1
 8007cee:	6113      	str	r3, [r2, #16]
    entry_fn(param);
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47c0      	blx	r8
    currentFiber->user_data = NULL;
 8007cf4:	683b      	ldr	r3, [r7, #0]
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 8007cf6:	6918      	ldr	r0, [r3, #16]
    currentFiber->user_data = NULL;
 8007cf8:	621e      	str	r6, [r3, #32]
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 8007cfa:	f020 0201 	bic.w	r2, r0, #1
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
 8007cfe:	f010 0004 	ands.w	r0, r0, #4
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 8007d02:	611a      	str	r2, [r3, #16]
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
 8007d04:	d0e3      	beq.n	8007cce <_ZN5codal6invokeEPFvPvES0_+0x2a>
        release_fiber(param);
 8007d06:	4628      	mov	r0, r5
 8007d08:	f001 fc00 	bl	800950c <_ZN5codal13release_fiberEPv>
 8007d0c:	e7de      	b.n	8007ccc <_ZN5codal6invokeEPFvPvES0_+0x28>
        return DEVICE_INVALID_PARAMETER;
 8007d0e:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 8007d12:	e7dc      	b.n	8007cce <_ZN5codal6invokeEPFvPvES0_+0x2a>
        return DEVICE_NOT_SUPPORTED;
 8007d14:	4802      	ldr	r0, [pc, #8]	; (8007d20 <_ZN5codal6invokeEPFvPvES0_+0x7c>)
 8007d16:	e7da      	b.n	8007cce <_ZN5codal6invokeEPFvPvES0_+0x2a>
 8007d18:	20002140 	.word	0x20002140
 8007d1c:	0800950d 	.word	0x0800950d
 8007d20:	fffffc16 	.word	0xfffffc16

08007d24 <_Z18device_create_heapmm>:
  * code, and user code targetting the runtime. External code can choose to include this file, or
  * simply use the standard heap.
  */

int device_create_heap(PROCESSOR_WORD_TYPE start, PROCESSOR_WORD_TYPE end)
{
 8007d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d26:	4606      	mov	r6, r0
 8007d28:	460c      	mov	r4, r1
    HeapDefinition *h = &heap[heap_count];
 8007d2a:	4d0b      	ldr	r5, [pc, #44]	; (8007d58 <_Z18device_create_heapmm+0x34>)
 8007d2c:	782f      	ldrb	r7, [r5, #0]
    if (end <= start || end - start < DEVICE_HEAP_BLOCK_SIZE*2 || end % DEVICE_HEAP_BLOCK_SIZE != 0 || start % DEVICE_HEAP_BLOCK_SIZE != 0)
        return DEVICE_INVALID_PARAMETER;
#endif

    // Disable IRQ temporarily to ensure no race conditions!
    target_disable_irq();
 8007d2e:	f7f9 f83b 	bl	8000da8 <target_disable_irq>

    // Record the dimensions of this new heap
    h->heap_start = (PROCESSOR_WORD_TYPE *)start;
 8007d32:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <_Z18device_create_heapmm+0x38>)
 8007d34:	f843 6037 	str.w	r6, [r3, r7, lsl #3]
    h->heap_end = (PROCESSOR_WORD_TYPE *)end;
 8007d38:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d3c:	605c      	str	r4, [r3, #4]

    // Initialise the heap as being completely empty and available for use.
    *h->heap_start = DEVICE_HEAP_BLOCK_FREE | (((PROCESSOR_WORD_TYPE) h->heap_end - (PROCESSOR_WORD_TYPE) h->heap_start) / DEVICE_HEAP_BLOCK_SIZE);
 8007d3e:	1ba4      	subs	r4, r4, r6
 8007d40:	08a4      	lsrs	r4, r4, #2
 8007d42:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8007d46:	6034      	str	r4, [r6, #0]

    heap_count++;
 8007d48:	782b      	ldrb	r3, [r5, #0]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	702b      	strb	r3, [r5, #0]

    // Enable Interrupts
    target_enable_irq();
 8007d4e:	f7f9 f829 	bl	8000da4 <target_enable_irq>
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    device_heap_print();
#endif

    return DEVICE_OK;
}
 8007d52:	2000      	movs	r0, #0
 8007d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20002210 	.word	0x20002210
 8007d5c:	20002160 	.word	0x20002160

08007d60 <device_malloc>:
  * @param size The amount of memory, in bytes, to allocate.
  *
  * @return A pointer to the allocated memory, or NULL if insufficient memory is available.
  */
void* device_malloc (size_t size)
{
 8007d60:	b538      	push	{r3, r4, r5, lr}
    static uint8_t initialised = 0;
    void *p;

    if (size <= 0)
 8007d62:	4604      	mov	r4, r0
 8007d64:	b1a0      	cbz	r0, 8007d90 <device_malloc+0x30>
        return NULL;

    if (!initialised)
 8007d66:	4d0b      	ldr	r5, [pc, #44]	; (8007d94 <device_malloc+0x34>)
 8007d68:	782b      	ldrb	r3, [r5, #0]
 8007d6a:	b943      	cbnz	r3, 8007d7e <device_malloc+0x1e>
    {
        heap_count = 0;
 8007d6c:	4a0a      	ldr	r2, [pc, #40]	; (8007d98 <device_malloc+0x38>)

#if CONFIG_ENABLED(CODAL_LOW_LEVEL_VALIDATION)
        if(device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE)) == DEVICE_INVALID_PARAMETER)
            target_panic(DEVICE_HEAP_ERROR);
#else
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 8007d6e:	490b      	ldr	r1, [pc, #44]	; (8007d9c <device_malloc+0x3c>)
        heap_count = 0;
 8007d70:	7013      	strb	r3, [r2, #0]
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 8007d72:	4b0b      	ldr	r3, [pc, #44]	; (8007da0 <device_malloc+0x40>)
 8007d74:	6818      	ldr	r0, [r3, #0]
 8007d76:	f7ff ffd5 	bl	8007d24 <_Z18device_create_heapmm>
#endif
        initialised = 1;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	702b      	strb	r3, [r5, #0]
    }

#if (DEVICE_MAXIMUM_HEAPS == 1)
    p = device_malloc_in(size, heap[0]);
 8007d7e:	4620      	mov	r0, r4
 8007d80:	4908      	ldr	r1, [pc, #32]	; (8007da4 <device_malloc+0x44>)
 8007d82:	f001 fbdf 	bl	8009544 <_Z16device_malloc_injR14HeapDefinition>
        if (p != NULL)
            break;
    }
#endif

    if (p != NULL)
 8007d86:	4604      	mov	r4, r0
 8007d88:	b910      	cbnz	r0, 8007d90 <device_malloc+0x30>
    // Keep everything transparent if we've not been initialised yet
    DMESG("device_malloc: OUT OF MEMORY [%d]\n", size);
#endif

#if CONFIG_ENABLED(DEVICE_PANIC_HEAP_FULL)
    target_panic(DEVICE_OOM);
 8007d8a:	2014      	movs	r0, #20
 8007d8c:	f7f8 ffa6 	bl	8000cdc <target_panic>
#endif

    return NULL;
}
 8007d90:	4620      	mov	r0, r4
 8007d92:	bd38      	pop	{r3, r4, r5, pc}
 8007d94:	2000220f 	.word	0x2000220f
 8007d98:	20002210 	.word	0x20002210
 8007d9c:	20004800 	.word	0x20004800
 8007da0:	20000044 	.word	0x20000044
 8007da4:	20002160 	.word	0x20002160

08007da8 <device_free>:
  * Release a given area of memory from the heap.
  *
  * @param mem The memory area to release.
  */
void device_free (void *mem)
{
 8007da8:	b510      	push	{r4, lr}
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    if (heap_count > 0)
        DMESG("device_free:   %p\n", mem);
#endif
    // Sanity check.
    if (memory == NULL)
 8007daa:	4604      	mov	r4, r0
 8007dac:	b198      	cbz	r0, 8007dd6 <device_free+0x2e>

#if (DEVICE_MAXIMUM_HEAPS > 1)
    for (i=0; i < heap_count; i++)
#endif
    {
        if(memory > heap[i].heap_start && memory < heap[i].heap_end)
 8007dae:	4b0d      	ldr	r3, [pc, #52]	; (8007de4 <device_free+0x3c>)
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	4282      	cmp	r2, r0
 8007db4:	d210      	bcs.n	8007dd8 <device_free+0x30>
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	4283      	cmp	r3, r0
 8007dba:	d90d      	bls.n	8007dd8 <device_free+0x30>
        {
            // The memory block given is part of this heap, so we can simply
            // flag that this memory area is now free, and we're done.
            if (*cb == 0 || *cb & DEVICE_HEAP_BLOCK_FREE)
 8007dbc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	dc02      	bgt.n	8007dca <device_free+0x22>
                target_panic(DEVICE_HEAP_ERROR);
 8007dc4:	201e      	movs	r0, #30
 8007dc6:	f7f8 ff89 	bl	8000cdc <target_panic>
            *cb |= DEVICE_HEAP_BLOCK_FREE;
 8007dca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007dce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007dd2:	f844 3c04 	str.w	r3, [r4, #-4]
        }
    }

    // If we reach here, then the memory is not part of any registered heap.
    target_panic(DEVICE_HEAP_ERROR);
}
 8007dd6:	bd10      	pop	{r4, pc}
    target_panic(DEVICE_HEAP_ERROR);
 8007dd8:	201e      	movs	r0, #30
}
 8007dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    target_panic(DEVICE_HEAP_ERROR);
 8007dde:	f7f8 bf7d 	b.w	8000cdc <target_panic>
 8007de2:	bf00      	nop
 8007de4:	20002160 	.word	0x20002160

08007de8 <_ZN5codal6SerialC1ERNS_3PinES2_hht>:
 *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/SerialBase.h
 *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/RawSerial.h
 *
 *       Buffers aren't allocated until the first send or receive respectively.
 */
Serial::Serial(Pin& tx, Pin& rx, uint8_t rxBufferSize, uint8_t txBufferSize, uint16_t id) : tx(tx), rx(rx)
 8007de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            this->id = 0;
 8007dec:	2500      	movs	r5, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4688      	mov	r8, r1
 8007df2:	4617      	mov	r7, r2
 8007df4:	461e      	mov	r6, r3
        {
 8007df6:	4b11      	ldr	r3, [pc, #68]	; (8007e3c <_ZN5codal6SerialC1ERNS_3PinES2_hht+0x54>)
            this->id = 0;
 8007df8:	6045      	str	r5, [r0, #4]
        {
 8007dfa:	6003      	str	r3, [r0, #0]
            addComponent();
 8007dfc:	f7ff fc6a 	bl	80076d4 <_ZN5codal14CodalComponent12addComponentEv>
 8007e00:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <_ZN5codal6SerialC1ERNS_3PinES2_hht+0x58>)
 8007e02:	e9c4 8702 	strd	r8, r7, [r4, #8]
 8007e06:	6023      	str	r3, [r4, #0]
 8007e08:	f104 0010 	add.w	r0, r4, #16
 8007e0c:	f000 fa08 	bl	8008220 <_ZN5codal13ManagedStringC1Ev>
{
    this->id = id;
 8007e10:	f8bd 301c 	ldrh.w	r3, [sp, #28]

    // + 1 so there is a usable buffer size, of the size the user requested.
    this->rxBuffSize = rxBufferSize + 1;
 8007e14:	3601      	adds	r6, #1
    this->id = id;
 8007e16:	80a3      	strh	r3, [r4, #4]
    this->txBuffSize = txBufferSize + 1;
 8007e18:	f89d 3018 	ldrb.w	r3, [sp, #24]

    this->rxBuff = NULL;
    this->txBuff = NULL;

    this->rxBuffHead = 0;
 8007e1c:	83e5      	strh	r5, [r4, #30]
    this->txBuffSize = txBufferSize + 1;
 8007e1e:	3301      	adds	r3, #1
 8007e20:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    this->rxBuffTail = 0;

    this->txBuffHead = 0;
    this->txBuffTail = 0;

    this->rxBuffHeadMatch = -1;
 8007e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    this->rxBuffSize = rxBufferSize + 1;
 8007e28:	7726      	strb	r6, [r4, #28]
    this->rxBuff = NULL;
 8007e2a:	61a5      	str	r5, [r4, #24]
    this->txBuff = NULL;
 8007e2c:	6265      	str	r5, [r4, #36]	; 0x24
    this->rxBuffTail = 0;
 8007e2e:	8425      	strh	r5, [r4, #32]
    this->txBuffHead = 0;
 8007e30:	8565      	strh	r5, [r4, #42]	; 0x2a
    this->txBuffTail = 0;
 8007e32:	85a5      	strh	r5, [r4, #44]	; 0x2c
    this->rxBuffHeadMatch = -1;
 8007e34:	6163      	str	r3, [r4, #20]
}
 8007e36:	4620      	mov	r0, r4
 8007e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e3c:	0800a380 	.word	0x0800a380
 8007e40:	0800a39c 	.word	0x0800a39c

08007e44 <_ZN5codal6SerialD1Ev>:
int Serial::txInUse()
{
    return (status & CODAL_SERIAL_TX_IN_USE);
}

Serial::~Serial()
 8007e44:	b510      	push	{r4, lr}
 8007e46:	4604      	mov	r4, r0
 8007e48:	4b04      	ldr	r3, [pc, #16]	; (8007e5c <_ZN5codal6SerialD1Ev+0x18>)
 8007e4a:	f840 3b10 	str.w	r3, [r0], #16
 8007e4e:	f001 ff14 	bl	8009c7a <_ZN5codal13ManagedStringD1Ev>
 8007e52:	4620      	mov	r0, r4
 8007e54:	f7ff fb44 	bl	80074e0 <_ZN5codal14CodalComponentD1Ev>
{

 8007e58:	4620      	mov	r0, r4
 8007e5a:	bd10      	pop	{r4, pc}
 8007e5c:	0800a39c 	.word	0x0800a39c

08007e60 <_ZN5codal5TimerC1Ev>:
}

/**
 * Constructor for a generic system clock interface.
 */
Timer::Timer()
 8007e60:	4b0a      	ldr	r3, [pc, #40]	; (8007e8c <_ZN5codal5TimerC1Ev+0x2c>)
 8007e62:	b510      	push	{r4, lr}
 8007e64:	6003      	str	r3, [r0, #0]
{
    // Register ourselves as the defualt timer - most recent timer wins.
    system_timer = this;
 8007e66:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <_ZN5codal5TimerC1Ev+0x30>)
Timer::Timer()
 8007e68:	4604      	mov	r4, r0
    system_timer = this;
 8007e6a:	6018      	str	r0, [r3, #0]

    // Create an empty event list of the default size.
    eventListSize = CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE;
 8007e6c:	230a      	movs	r3, #10
 8007e6e:	6183      	str	r3, [r0, #24]
    timerEventList = (TimerEvent *) malloc(sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
 8007e70:	2078      	movs	r0, #120	; 0x78
 8007e72:	f7ff ff75 	bl	8007d60 <device_malloc>
      *
      * @param b the number of bytes to clear.
      */
    inline void *memclr(void *a, size_t b)
    {
        return memset(a,0,b);
 8007e76:	2278      	movs	r2, #120	; 0x78
 8007e78:	6120      	str	r0, [r4, #16]
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	f7fa fbea 	bl	8002654 <memset>
    memclr(timerEventList, sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
    nextTimerEvent = NULL;
 8007e80:	2300      	movs	r3, #0

    // Reset clock
    currentTime = 0;
    currentTimeUs = 0;
}
 8007e82:	4620      	mov	r0, r4
    nextTimerEvent = NULL;
 8007e84:	6163      	str	r3, [r4, #20]
    currentTimeUs = 0;
 8007e86:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
 8007e8a:	bd10      	pop	{r4, pc}
 8007e8c:	0800a3d4 	.word	0x0800a3d4
 8007e90:	20002168 	.word	0x20002168

08007e94 <_ZN5codal25system_timer_current_timeEv>:
  *
  * @return the current time since power on in milliseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time()
{
    if(system_timer == NULL)
 8007e94:	4b02      	ldr	r3, [pc, #8]	; (8007ea0 <_ZN5codal25system_timer_current_timeEv+0xc>)
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	b108      	cbz	r0, 8007e9e <_ZN5codal25system_timer_current_timeEv+0xa>
        return 0;

    return system_timer->getTime();
 8007e9a:	f001 bd22 	b.w	80098e2 <_ZN5codal5Timer7getTimeEv>
}
 8007e9e:	4770      	bx	lr
 8007ea0:	20002168 	.word	0x20002168

08007ea4 <_ZN5codal27system_timer_event_every_usEmtt>:
  * @param the value to fire against the current system_timer id.
  *
  * @return DEVICE_OK or DEVICE_NOT_SUPPORTED if no timer has been registered.
  */
int codal::system_timer_event_every_us(CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
{
 8007ea4:	4613      	mov	r3, r2
    if(system_timer == NULL)
 8007ea6:	4a06      	ldr	r2, [pc, #24]	; (8007ec0 <_ZN5codal27system_timer_event_every_usEmtt+0x1c>)
{
 8007ea8:	b410      	push	{r4}
 8007eaa:	4604      	mov	r4, r0
    if(system_timer == NULL)
 8007eac:	6810      	ldr	r0, [r2, #0]
 8007eae:	b120      	cbz	r0, 8007eba <_ZN5codal27system_timer_event_every_usEmtt+0x16>
        return DEVICE_NOT_SUPPORTED;

    return system_timer->eventEveryUs(period, id, value);
 8007eb0:	460a      	mov	r2, r1
 8007eb2:	4621      	mov	r1, r4
}
 8007eb4:	bc10      	pop	{r4}
    return system_timer->eventEveryUs(period, id, value);
 8007eb6:	f001 bd55 	b.w	8009964 <_ZN5codal5Timer12eventEveryUsEmtt>
}
 8007eba:	4802      	ldr	r0, [pc, #8]	; (8007ec4 <_ZN5codal27system_timer_event_every_usEmtt+0x20>)
 8007ebc:	bc10      	pop	{r4}
 8007ebe:	4770      	bx	lr
 8007ec0:	20002168 	.word	0x20002168
 8007ec4:	fffffc16 	.word	0xfffffc16

08007ec8 <_ZN5codal10EventModel4sendENS_5EventE>:
        virtual int send(Event)
 8007ec8:	b082      	sub	sp, #8
        }
 8007eca:	4803      	ldr	r0, [pc, #12]	; (8007ed8 <_ZN5codal10EventModel4sendENS_5EventE+0x10>)
        virtual int send(Event)
 8007ecc:	ab02      	add	r3, sp, #8
 8007ece:	e903 0006 	stmdb	r3, {r1, r2}
        }
 8007ed2:	b002      	add	sp, #8
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	fffffc16 	.word	0xfffffc16

08007edc <_ZN5codal10EventModel3addEPNS_8ListenerE>:
        }
 8007edc:	4800      	ldr	r0, [pc, #0]	; (8007ee0 <_ZN5codal10EventModel3addEPNS_8ListenerE+0x4>)
 8007ede:	4770      	bx	lr
 8007ee0:	fffffc16 	.word	0xfffffc16

08007ee4 <_ZN5codal10EventModel6removeEPNS_8ListenerE>:
        }
 8007ee4:	4800      	ldr	r0, [pc, #0]	; (8007ee8 <_ZN5codal10EventModel6removeEPNS_8ListenerE+0x4>)
 8007ee6:	4770      	bx	lr
 8007ee8:	fffffc16 	.word	0xfffffc16

08007eec <_ZN5codal10MessageBus6removeEPNS_8ListenerE>:
  * @param listener The Listener to remove.
  *
  * @return DEVICE_OK if the listener is valid, DEVICE_INVALID_PARAMETER otherwise.
  */
int MessageBus::remove(Listener *listener)
{
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Listener *l;
    int removed = 0;

    //handler can't be NULL!
    if (listener == NULL)
 8007eee:	460d      	mov	r5, r1
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	d02b      	beq.n	8007f4c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x60>
    int removed = 0;
 8007ef4:	2600      	movs	r6, #0
        return DEVICE_INVALID_PARAMETER;

    l = listeners;
 8007ef6:	6944      	ldr	r4, [r0, #20]
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
            {
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
                {
                    // Found a match. mark this to be removed from the list.
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 8007ef8:	4f17      	ldr	r7, [pc, #92]	; (8007f58 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x6c>)
    while (l != NULL)
 8007efa:	b32c      	cbz	r4, 8007f48 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x5c>
        if ((listener->flags & MESSAGE_BUS_LISTENER_METHOD) == (l->flags & MESSAGE_BUS_LISTENER_METHOD))
 8007efc:	88aa      	ldrh	r2, [r5, #4]
 8007efe:	88a3      	ldrh	r3, [r4, #4]
 8007f00:	4053      	eors	r3, r2
 8007f02:	0799      	lsls	r1, r3, #30
 8007f04:	d404      	bmi.n	8007f10 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x24>
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 8007f06:	0792      	lsls	r2, r2, #30
 8007f08:	d404      	bmi.n	8007f14 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x28>
 8007f0a:	88ab      	ldrh	r3, [r5, #4]
 8007f0c:	079b      	lsls	r3, r3, #30
 8007f0e:	d516      	bpl.n	8007f3e <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x52>
                    removed++;
                }
            }
        }

        l = l->next;
 8007f10:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 8007f12:	e7f2      	b.n	8007efa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0xe>
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 8007f14:	68a9      	ldr	r1, [r5, #8]
 8007f16:	68a0      	ldr	r0, [r4, #8]
 8007f18:	f001 ff7a 	bl	8009e10 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d0f4      	beq.n	8007f0a <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x1e>
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
 8007f20:	882b      	ldrh	r3, [r5, #0]
 8007f22:	b113      	cbz	r3, 8007f2a <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3e>
 8007f24:	8822      	ldrh	r2, [r4, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d1f2      	bne.n	8007f10 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x24>
 8007f2a:	886b      	ldrh	r3, [r5, #2]
 8007f2c:	b113      	cbz	r3, 8007f34 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x48>
 8007f2e:	8862      	ldrh	r2, [r4, #2]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d1ed      	bne.n	8007f10 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x24>
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 8007f34:	88a3      	ldrh	r3, [r4, #4]
                    removed++;
 8007f36:	3601      	adds	r6, #1
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 8007f38:	433b      	orrs	r3, r7
 8007f3a:	80a3      	strh	r3, [r4, #4]
 8007f3c:	e7e8      	b.n	8007f10 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x24>
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
 8007f3e:	68a2      	ldr	r2, [r4, #8]
 8007f40:	68ab      	ldr	r3, [r5, #8]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d1e4      	bne.n	8007f10 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x24>
 8007f46:	e7eb      	b.n	8007f20 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x34>
    }

    if (removed > 0)
 8007f48:	2e00      	cmp	r6, #0
 8007f4a:	dc02      	bgt.n	8007f52 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x66>
        return DEVICE_OK;
    else
        return DEVICE_INVALID_PARAMETER;
 8007f4c:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 8007f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DEVICE_OK;
 8007f52:	4620      	mov	r0, r4
 8007f54:	e7fc      	b.n	8007f50 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x64>
 8007f56:	bf00      	nop
 8007f58:	ffff8000 	.word	0xffff8000

08007f5c <_ZN5codal10MessageBus3addEPNS_8ListenerE>:
{
 8007f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f5e:	4606      	mov	r6, r0
    if (newListener == NULL)
 8007f60:	460d      	mov	r5, r1
 8007f62:	2900      	cmp	r1, #0
 8007f64:	d053      	beq.n	800800e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xb2>
    l = listeners;
 8007f66:	6944      	ldr	r4, [r0, #20]
    while (l != NULL)
 8007f68:	b1fc      	cbz	r4, 8007faa <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x4e>
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 8007f6a:	88ab      	ldrh	r3, [r5, #4]
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 8007f6c:	6821      	ldr	r1, [r4, #0]
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 8007f6e:	f013 0302 	ands.w	r3, r3, #2
 8007f72:	bf18      	it	ne
 8007f74:	88a3      	ldrhne	r3, [r4, #4]
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 8007f76:	682a      	ldr	r2, [r5, #0]
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 8007f78:	bf18      	it	ne
 8007f7a:	f3c3 0340 	ubfxne	r3, r3, #1, #1
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 8007f7e:	4291      	cmp	r1, r2
 8007f80:	d10d      	bne.n	8007f9e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x42>
 8007f82:	68a0      	ldr	r0, [r4, #8]
 8007f84:	68a9      	ldr	r1, [r5, #8]
 8007f86:	b143      	cbz	r3, 8007f9a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x3e>
 8007f88:	f001 ff42 	bl	8009e10 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 8007f8c:	b138      	cbz	r0, 8007f9e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x42>
            if(l->flags & MESSAGE_BUS_LISTENER_DELETING)
 8007f8e:	88a3      	ldrh	r3, [r4, #4]
 8007f90:	041a      	lsls	r2, r3, #16
 8007f92:	d406      	bmi.n	8007fa2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x46>
            return DEVICE_NOT_SUPPORTED;
 8007f94:	481f      	ldr	r0, [pc, #124]	; (8008014 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xb8>)
}
 8007f96:	b003      	add	sp, #12
 8007f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 8007f9a:	4288      	cmp	r0, r1
 8007f9c:	d0f7      	beq.n	8007f8e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x32>
        l = l->next;
 8007f9e:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 8007fa0:	e7e2      	b.n	8007f68 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc>
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;
 8007fa2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007fa6:	80a3      	strh	r3, [r4, #4]
 8007fa8:	e7f4      	b.n	8007f94 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x38>
    if (listeners == NULL)
 8007faa:	6970      	ldr	r0, [r6, #20]
 8007fac:	882a      	ldrh	r2, [r5, #0]
 8007fae:	b940      	cbnz	r0, 8007fc2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x66>
        listeners = newListener;
 8007fb0:	6175      	str	r5, [r6, #20]
    Event(DEVICE_ID_MESSAGE_BUS_LISTENER, newListener->id);
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8007fb8:	4668      	mov	r0, sp
 8007fba:	f001 fe34 	bl	8009c26 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
    return DEVICE_OK;
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	e7e9      	b.n	8007f96 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x3a>
 8007fc2:	4601      	mov	r1, r0
 8007fc4:	4603      	mov	r3, r0
    while (l != NULL && l->id < newListener->id)
 8007fc6:	881c      	ldrh	r4, [r3, #0]
 8007fc8:	4294      	cmp	r4, r2
 8007fca:	d205      	bcs.n	8007fd8 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x7c>
        l = l->next;
 8007fcc:	69dc      	ldr	r4, [r3, #28]
 8007fce:	4619      	mov	r1, r3
    while (l != NULL && l->id < newListener->id)
 8007fd0:	b16c      	cbz	r4, 8007fee <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x92>
 8007fd2:	4623      	mov	r3, r4
 8007fd4:	e7f7      	b.n	8007fc6 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x6a>
        l = l->next;
 8007fd6:	4623      	mov	r3, r4
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 8007fd8:	881c      	ldrh	r4, [r3, #0]
 8007fda:	4294      	cmp	r4, r2
 8007fdc:	d107      	bne.n	8007fee <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x92>
 8007fde:	885f      	ldrh	r7, [r3, #2]
 8007fe0:	886c      	ldrh	r4, [r5, #2]
 8007fe2:	42a7      	cmp	r7, r4
 8007fe4:	d203      	bcs.n	8007fee <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x92>
        l = l->next;
 8007fe6:	69dc      	ldr	r4, [r3, #28]
 8007fe8:	4619      	mov	r1, r3
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 8007fea:	2c00      	cmp	r4, #0
 8007fec:	d1f3      	bne.n	8007fd6 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x7a>
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 8007fee:	4281      	cmp	r1, r0
 8007ff0:	d109      	bne.n	8008006 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xaa>
 8007ff2:	880b      	ldrh	r3, [r1, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d304      	bcc.n	8008002 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa6>
 8007ff8:	d105      	bne.n	8008006 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xaa>
 8007ffa:	8848      	ldrh	r0, [r1, #2]
 8007ffc:	886b      	ldrh	r3, [r5, #2]
 8007ffe:	4298      	cmp	r0, r3
 8008000:	d901      	bls.n	8008006 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xaa>
        newListener->next = p;
 8008002:	61e9      	str	r1, [r5, #28]
 8008004:	e7d4      	b.n	8007fb0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x54>
        newListener->next = p->next;
 8008006:	69cb      	ldr	r3, [r1, #28]
 8008008:	61eb      	str	r3, [r5, #28]
        p->next = newListener;
 800800a:	61cd      	str	r5, [r1, #28]
 800800c:	e7d1      	b.n	8007fb2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x56>
        return DEVICE_INVALID_PARAMETER;
 800800e:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 8008012:	e7c0      	b.n	8007f96 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x3a>
 8008014:	fffffc16 	.word	0xfffffc16

08008018 <_ZN5codal10MessageBusD1Ev>:
}

/**
  * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
  */
MessageBus::~MessageBus()
 8008018:	b530      	push	{r4, r5, lr}
 800801a:	4b1a      	ldr	r3, [pc, #104]	; (8008084 <_ZN5codal10MessageBusD1Ev+0x6c>)
 800801c:	b08b      	sub	sp, #44	; 0x2c
 800801e:	f103 0208 	add.w	r2, r3, #8
 8008022:	3328      	adds	r3, #40	; 0x28
 8008024:	4604      	mov	r4, r0
 8008026:	6002      	str	r2, [r0, #0]
 8008028:	6083      	str	r3, [r0, #8]
      *
      * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
      * to be tuned.
      */
    template <typename T>
    Listener::Listener(uint16_t id, uint16_t value, T* object, void (T::*method)(Event), uint16_t flags)
 800802a:	a806      	add	r0, sp, #24
 800802c:	f001 fdf2 	bl	8009c14 <_ZN5codal5EventC1Ev>
    {
        this->id = id;
 8008030:	230f      	movs	r3, #15
        this->value = value;
        this->cb_method = new MemberFunctionCallback(object, method);
 8008032:	2018      	movs	r0, #24
        this->id = id;
 8008034:	9302      	str	r3, [sp, #8]
        this->cb_method = new MemberFunctionCallback(object, method);
 8008036:	f7fa fd97 	bl	8002b68 <_Znwj>
 800803a:	4b13      	ldr	r3, [pc, #76]	; (8008088 <_ZN5codal10MessageBusD1Ev+0x70>)
      * @param method The method to invoke.
      */
    template <typename T>
    MemberFunctionCallback::MemberFunctionCallback(T* object, void (T::*method)(Event e))
    {
        this->object = object;
 800803c:	4601      	mov	r1, r0
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	2300      	movs	r3, #0
 8008042:	4602      	mov	r2, r0
        memclr(this->method, sizeof(this->method));
        memcpy(this->method, &method, sizeof(method));
 8008044:	466d      	mov	r5, sp
        this->object = object;
 8008046:	f841 4b0c 	str.w	r4, [r1], #12
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	60c3      	str	r3, [r0, #12]
 800804e:	604b      	str	r3, [r1, #4]
        memcpy(this->method, &method, sizeof(method));
 8008050:	cd03      	ldmia	r5!, {r0, r1}
 8008052:	6091      	str	r1, [r2, #8]
        invoke = &MemberFunctionCallback::methodCall<T>;
 8008054:	490d      	ldr	r1, [pc, #52]	; (800808c <_ZN5codal10MessageBusD1Ev+0x74>)
        this->cb_arg = NULL;
 8008056:	e9cd 2304 	strd	r2, r3, [sp, #16]
        memcpy(this->method, &method, sizeof(method));
 800805a:	6050      	str	r0, [r2, #4]
        invoke = &MemberFunctionCallback::methodCall<T>;
 800805c:	6151      	str	r1, [r2, #20]
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800805e:	2212      	movs	r2, #18
    {
        if (handler == NULL)
            return DEVICE_INVALID_PARAMETER;

        Listener listener(id, value, object, handler);
        remove(&listener);
 8008060:	4629      	mov	r1, r5
 8008062:	4620      	mov	r0, r4
 8008064:	f8ad 200c 	strh.w	r2, [sp, #12]
        this->evt_queue = NULL;
        this->next = NULL;
 8008068:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800806c:	f7ff ff3e 	bl	8007eec <_ZN5codal10MessageBus6removeEPNS_8ListenerE>
        Listener listener(id, value, object, handler);
 8008070:	a802      	add	r0, sp, #8
 8008072:	f001 fabd 	bl	80095f0 <_ZN5codal8ListenerD1Ev>
 8008076:	f104 0008 	add.w	r0, r4, #8
 800807a:	f7ff fa31 	bl	80074e0 <_ZN5codal14CodalComponentD1Ev>
{
    ignore(DEVICE_ID_SCHEDULER, DEVICE_EVT_ANY, this, &MessageBus::idle);
}
 800807e:	4620      	mov	r0, r4
 8008080:	b00b      	add	sp, #44	; 0x2c
 8008082:	bd30      	pop	{r4, r5, pc}
 8008084:	0800a3f8 	.word	0x0800a3f8
 8008088:	08009be1 	.word	0x08009be1
 800808c:	08009a3b 	.word	0x08009a3b

08008090 <_ZN5codal10MessageBusC1Ev>:
MessageBus::MessageBus()
 8008090:	b573      	push	{r0, r1, r4, r5, r6, lr}
            this->id = 0;
 8008092:	2500      	movs	r5, #0
 8008094:	4604      	mov	r4, r0
    class EventModel
 8008096:	4b21      	ldr	r3, [pc, #132]	; (800811c <_ZN5codal10MessageBusC1Ev+0x8c>)
 8008098:	60c5      	str	r5, [r0, #12]
 800809a:	6003      	str	r3, [r0, #0]
        {
 800809c:	4b20      	ldr	r3, [pc, #128]	; (8008120 <_ZN5codal10MessageBusC1Ev+0x90>)
            addComponent();
 800809e:	3008      	adds	r0, #8
        {
 80080a0:	6003      	str	r3, [r0, #0]
            addComponent();
 80080a2:	f7ff fb17 	bl	80076d4 <_ZN5codal14CodalComponent12addComponentEv>
 80080a6:	4b1f      	ldr	r3, [pc, #124]	; (8008124 <_ZN5codal10MessageBusC1Ev+0x94>)
    this->evt_queue_head = NULL;
 80080a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
MessageBus::MessageBus()
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	3320      	adds	r3, #32
 80080b0:	60a3      	str	r3, [r4, #8]
    this->evt_queue_tail = NULL;
 80080b2:	61e5      	str	r5, [r4, #28]
    this->queueLength = 0;
 80080b4:	8465      	strh	r5, [r4, #34]	; 0x22
        Listener *newListener = new Listener(id, value, object, handler, flags);
 80080b6:	2020      	movs	r0, #32
 80080b8:	f7fa fd56 	bl	8002b68 <_Znwj>
 80080bc:	4606      	mov	r6, r0
    Listener::Listener(uint16_t id, uint16_t value, T* object, void (T::*method)(Event), uint16_t flags)
 80080be:	3010      	adds	r0, #16
 80080c0:	f001 fda8 	bl	8009c14 <_ZN5codal5EventC1Ev>
        this->id = id;
 80080c4:	4b18      	ldr	r3, [pc, #96]	; (8008128 <_ZN5codal10MessageBusC1Ev+0x98>)
        this->cb_method = new MemberFunctionCallback(object, method);
 80080c6:	2018      	movs	r0, #24
        this->id = id;
 80080c8:	6033      	str	r3, [r6, #0]
        this->cb_method = new MemberFunctionCallback(object, method);
 80080ca:	f7fa fd4d 	bl	8002b68 <_Znwj>
 80080ce:	4a17      	ldr	r2, [pc, #92]	; (800812c <_ZN5codal10MessageBusC1Ev+0x9c>)
 80080d0:	4603      	mov	r3, r0
 80080d2:	e9cd 2500 	strd	r2, r5, [sp]
        this->object = object;
 80080d6:	4602      	mov	r2, r0
 80080d8:	f842 4b0c 	str.w	r4, [r2], #12
 80080dc:	60c5      	str	r5, [r0, #12]
 80080de:	6055      	str	r5, [r2, #4]
        memcpy(this->method, &method, sizeof(method));
 80080e0:	466a      	mov	r2, sp
 80080e2:	ca03      	ldmia	r2!, {r0, r1}
        invoke = &MemberFunctionCallback::methodCall<T>;
 80080e4:	4a12      	ldr	r2, [pc, #72]	; (8008130 <_ZN5codal10MessageBusC1Ev+0xa0>)
        memcpy(this->method, &method, sizeof(method));
 80080e6:	6058      	str	r0, [r3, #4]
 80080e8:	6099      	str	r1, [r3, #8]
        invoke = &MemberFunctionCallback::methodCall<T>;
 80080ea:	615a      	str	r2, [r3, #20]
        this->cb_arg = NULL;
 80080ec:	e9c6 3502 	strd	r3, r5, [r6, #8]
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 80080f0:	23c2      	movs	r3, #194	; 0xc2
        if(add(newListener) == DEVICE_OK)
 80080f2:	4631      	mov	r1, r6
 80080f4:	4620      	mov	r0, r4
 80080f6:	80b3      	strh	r3, [r6, #4]
        this->next = NULL;
 80080f8:	e9c6 5506 	strd	r5, r5, [r6, #24]
 80080fc:	f7ff ff2e 	bl	8007f5c <_ZN5codal10MessageBus3addEPNS_8ListenerE>
 8008100:	b128      	cbz	r0, 800810e <_ZN5codal10MessageBusC1Ev+0x7e>
        delete newListener;
 8008102:	4630      	mov	r0, r6
 8008104:	f001 fa74 	bl	80095f0 <_ZN5codal8ListenerD1Ev>
 8008108:	4630      	mov	r0, r6
 800810a:	f7fa fd2f 	bl	8002b6c <_ZdlPv>
    if(EventModel::defaultEventBus == NULL)
 800810e:	4b09      	ldr	r3, [pc, #36]	; (8008134 <_ZN5codal10MessageBusC1Ev+0xa4>)
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	b902      	cbnz	r2, 8008116 <_ZN5codal10MessageBusC1Ev+0x86>
        EventModel::defaultEventBus = this;
 8008114:	601c      	str	r4, [r3, #0]
}
 8008116:	4620      	mov	r0, r4
 8008118:	b002      	add	sp, #8
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	0800a3ec 	.word	0x0800a3ec
 8008120:	0800a380 	.word	0x0800a380
 8008124:	0800a400 	.word	0x0800a400
 8008128:	0002000f 	.word	0x0002000f
 800812c:	08009be1 	.word	0x08009be1
 8008130:	08009a3b 	.word	0x08009a3b
 8008134:	2000216c 	.word	0x2000216c

08008138 <_ZN5codal10MessageBus7processERNS_5EventEb>:
{
 8008138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800813c:	460d      	mov	r5, r1
 800813e:	4617      	mov	r7, r2
    int complete = 1;
 8008140:	2601      	movs	r6, #1
    l = listeners;
 8008142:	6944      	ldr	r4, [r0, #20]
                    invoke(async_callback, l);
 8008144:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80081b8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x80>
    while (l != NULL)
 8008148:	b394      	cbz	r4, 80081b0 <_ZN5codal10MessageBus7processERNS_5EventEb+0x78>
        if((l->id == evt.source || l->id == DEVICE_ID_ANY) && (l->value == evt.value || l->value == DEVICE_EVT_ANY))
 800814a:	8823      	ldrh	r3, [r4, #0]
 800814c:	882a      	ldrh	r2, [r5, #0]
 800814e:	429a      	cmp	r2, r3
 8008150:	d000      	beq.n	8008154 <_ZN5codal10MessageBus7processERNS_5EventEb+0x1c>
 8008152:	b9f3      	cbnz	r3, 8008192 <_ZN5codal10MessageBus7processERNS_5EventEb+0x5a>
 8008154:	8863      	ldrh	r3, [r4, #2]
 8008156:	886a      	ldrh	r2, [r5, #2]
 8008158:	429a      	cmp	r2, r3
 800815a:	d000      	beq.n	800815e <_ZN5codal10MessageBus7processERNS_5EventEb+0x26>
 800815c:	b9cb      	cbnz	r3, 8008192 <_ZN5codal10MessageBus7processERNS_5EventEb+0x5a>
            if (fiber_scheduler_running())
 800815e:	f7ff fbc3 	bl	80078e8 <_ZN5codal23fiber_scheduler_runningEv>
 8008162:	b1c0      	cbz	r0, 8008196 <_ZN5codal10MessageBus7processERNS_5EventEb+0x5e>
                listenerUrgent = (l->flags & MESSAGE_BUS_LISTENER_IMMEDIATE) == MESSAGE_BUS_LISTENER_IMMEDIATE;
 8008164:	88a3      	ldrh	r3, [r4, #4]
 8008166:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800816a:	f1a3 00c0 	sub.w	r0, r3, #192	; 0xc0
 800816e:	4243      	negs	r3, r0
 8008170:	4143      	adcs	r3, r0
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 8008172:	42bb      	cmp	r3, r7
 8008174:	d11a      	bne.n	80081ac <_ZN5codal10MessageBus7processERNS_5EventEb+0x74>
 8008176:	88a2      	ldrh	r2, [r4, #4]
 8008178:	0411      	lsls	r1, r2, #16
 800817a:	d417      	bmi.n	80081ac <_ZN5codal10MessageBus7processERNS_5EventEb+0x74>
                l->evt = evt;
 800817c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008180:	f104 0310 	add.w	r3, r4, #16
 8008184:	e883 0003 	stmia.w	r3, {r0, r1}
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 8008188:	0653      	lsls	r3, r2, #25
 800818a:	d506      	bpl.n	800819a <_ZN5codal10MessageBus7processERNS_5EventEb+0x62>
                    async_callback(l);
 800818c:	4620      	mov	r0, r4
 800818e:	f001 fc6c 	bl	8009a6a <_Z14async_callbackPv>
        l = l->next;
 8008192:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 8008194:	e7d8      	b.n	8008148 <_ZN5codal10MessageBus7processERNS_5EventEb+0x10>
                listenerUrgent = true;
 8008196:	2301      	movs	r3, #1
 8008198:	e7eb      	b.n	8008172 <_ZN5codal10MessageBus7processERNS_5EventEb+0x3a>
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 800819a:	f7ff fba5 	bl	80078e8 <_ZN5codal23fiber_scheduler_runningEv>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d0f4      	beq.n	800818c <_ZN5codal10MessageBus7processERNS_5EventEb+0x54>
                    invoke(async_callback, l);
 80081a2:	4621      	mov	r1, r4
 80081a4:	4640      	mov	r0, r8
 80081a6:	f7ff fd7d 	bl	8007ca4 <_ZN5codal6invokeEPFvPvES0_>
 80081aa:	e7f2      	b.n	8008192 <_ZN5codal10MessageBus7processERNS_5EventEb+0x5a>
                complete = 0;
 80081ac:	2600      	movs	r6, #0
 80081ae:	e7f0      	b.n	8008192 <_ZN5codal10MessageBus7processERNS_5EventEb+0x5a>
}
 80081b0:	4630      	mov	r0, r6
 80081b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b6:	bf00      	nop
 80081b8:	08009a6b 	.word	0x08009a6b

080081bc <_ZN5codal19allocateNotifyEventEv>:
    return userNotifyId++;
 80081bc:	4b02      	ldr	r3, [pc, #8]	; (80081c8 <_ZN5codal19allocateNotifyEventEv+0xc>)
 80081be:	8818      	ldrh	r0, [r3, #0]
 80081c0:	1c42      	adds	r2, r0, #1
 80081c2:	801a      	strh	r2, [r3, #0]
}
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	20001004 	.word	0x20001004

080081cc <_ZN5codal5Event4fireEv>:
/**
  * Fires this Event onto the Default EventModel, or a custom one!
  */
void Event::fire()
{
    if(EventModel::defaultEventBus)
 80081cc:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <_ZN5codal5Event4fireEv+0x1c>)
{
 80081ce:	b410      	push	{r4}
    if(EventModel::defaultEventBus)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	b13b      	cbz	r3, 80081e4 <_ZN5codal5Event4fireEv+0x18>
        EventModel::defaultEventBus->send(*this);
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	6814      	ldr	r4, [r2, #0]
 80081d8:	e890 0006 	ldmia.w	r0, {r1, r2}
 80081dc:	4618      	mov	r0, r3
 80081de:	4623      	mov	r3, r4
}
 80081e0:	bc10      	pop	{r4}
        EventModel::defaultEventBus->send(*this);
 80081e2:	4718      	bx	r3
}
 80081e4:	bc10      	pop	{r4}
 80081e6:	4770      	bx	lr
 80081e8:	2000216c 	.word	0x2000216c

080081ec <_ZN5codal13ManagedStringC1EPKcs>:
  *
  * @code
  * ManagedString s("abcdefg",7);
  * @endcode
  */
ManagedString::ManagedString(const char *str, const int16_t length)
 80081ec:	b570      	push	{r4, r5, r6, lr}
 80081ee:	4605      	mov	r5, r0
 80081f0:	4616      	mov	r6, r2
{
    // Sanity check. Return EmptyString for anything distasteful
    if (str == NULL || *str == 0 || (uint16_t)length > strlen(str)) // XXX length should be unsigned on the interface
 80081f2:	460c      	mov	r4, r1
 80081f4:	b139      	cbz	r1, 8008206 <_ZN5codal13ManagedStringC1EPKcs+0x1a>
 80081f6:	780b      	ldrb	r3, [r1, #0]
 80081f8:	b12b      	cbz	r3, 8008206 <_ZN5codal13ManagedStringC1EPKcs+0x1a>
 80081fa:	4608      	mov	r0, r1
 80081fc:	f7fa fa3a 	bl	8002674 <strlen>
 8008200:	b2b3      	uxth	r3, r6
 8008202:	4283      	cmp	r3, r0
 8008204:	d903      	bls.n	800820e <_ZN5codal13ManagedStringC1EPKcs+0x22>
    ptr = EMPTY_DATA;
 8008206:	4b05      	ldr	r3, [pc, #20]	; (800821c <_ZN5codal13ManagedStringC1EPKcs+0x30>)
 8008208:	602b      	str	r3, [r5, #0]
        initEmpty();
        return;
    }

    initString(str, length);
}
 800820a:	4628      	mov	r0, r5
 800820c:	bd70      	pop	{r4, r5, r6, pc}
    initString(str, length);
 800820e:	4632      	mov	r2, r6
 8008210:	4621      	mov	r1, r4
 8008212:	4628      	mov	r0, r5
 8008214:	f001 fd38 	bl	8009c88 <_ZN5codal13ManagedString10initStringEPKci>
 8008218:	e7f7      	b.n	800820a <_ZN5codal13ManagedStringC1EPKcs+0x1e>
 800821a:	bf00      	nop
 800821c:	0800a434 	.word	0x0800a434

08008220 <_ZN5codal13ManagedStringC1Ev>:
    ptr = EMPTY_DATA;
 8008220:	4b01      	ldr	r3, [pc, #4]	; (8008228 <_ZN5codal13ManagedStringC1Ev+0x8>)
 8008222:	6003      	str	r3, [r0, #0]
  * @endcode
  */
ManagedString::ManagedString()
{
    initEmpty();
}
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	0800a434 	.word	0x0800a434

0800822c <_GLOBAL__sub_I__ZN5codal13ManagedString9initEmptyEv>:
}

/**
  * Empty string constant literal
  */
ManagedString ManagedString::EmptyString(EMPTY_DATA);
 800822c:	b510      	push	{r4, lr}
    ptr = p;
 800822e:	4806      	ldr	r0, [pc, #24]	; (8008248 <_GLOBAL__sub_I__ZN5codal13ManagedString9initEmptyEv+0x1c>)
 8008230:	4c06      	ldr	r4, [pc, #24]	; (800824c <_GLOBAL__sub_I__ZN5codal13ManagedString9initEmptyEv+0x20>)
 8008232:	6020      	str	r0, [r4, #0]
    ptr->incr();
 8008234:	f001 fd84 	bl	8009d40 <_ZN5codal10RefCounted4incrEv>
ManagedString ManagedString::EmptyString(EMPTY_DATA);
 8008238:	4620      	mov	r0, r4
 800823a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800823e:	4a04      	ldr	r2, [pc, #16]	; (8008250 <_GLOBAL__sub_I__ZN5codal13ManagedString9initEmptyEv+0x24>)
 8008240:	4904      	ldr	r1, [pc, #16]	; (8008254 <_GLOBAL__sub_I__ZN5codal13ManagedString9initEmptyEv+0x28>)
 8008242:	f7f8 bdc7 	b.w	8000dd4 <__aeabi_atexit>
 8008246:	bf00      	nop
 8008248:	0800a434 	.word	0x0800a434
 800824c:	20002170 	.word	0x20002170
 8008250:	2000017c 	.word	0x2000017c
 8008254:	08009c7b 	.word	0x08009c7b

08008258 <_ZN5codal3_cm3Pin14setAnalogValueEi>:
  *         if the given pin does not have analog capability.
  */
int Pin::setAnalogValue(int value)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 8008258:	7903      	ldrb	r3, [r0, #4]
 800825a:	07db      	lsls	r3, r3, #31
 800825c:	d506      	bpl.n	800826c <_ZN5codal3_cm3Pin14setAnalogValueEi+0x14>
        return DEVICE_NOT_SUPPORTED;

    //sanitise the level value
    if(value < 0 || value > DEVICE_PIN_MAX_OUTPUT)
 800825e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
#ifdef TODO
    //obtain use of the DynamicPwm instance, if it has changed / configure if we do not have one
    if(obtainAnalogChannel() == DEVICE_OK)
        return ((DynamicPwm *)pin)->write(level);
#endif  //  TODO
    return DEVICE_OK;
 8008262:	bf2c      	ite	cs
 8008264:	f46f 707a 	mvncs.w	r0, #1000	; 0x3e8
 8008268:	2000      	movcc	r0, #0
 800826a:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 800826c:	4800      	ldr	r0, [pc, #0]	; (8008270 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x18>)
}
 800826e:	4770      	bx	lr
 8008270:	fffffc16 	.word	0xfffffc16

08008274 <_ZN5codal3_cm3Pin13setServoValueEiii>:
  *         if the given pin does not have analog capability.
  */
int Pin::setServoValue(int value, int range, int center)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_ANALOG & capability))
 8008274:	7900      	ldrb	r0, [r0, #4]
 8008276:	f010 0f02 	tst.w	r0, #2
 800827a:	d009      	beq.n	8008290 <_ZN5codal3_cm3Pin13setServoValueEiii+0x1c>
        return DEVICE_NOT_SUPPORTED;

    //sanitise the servo level
    if(value < 0 || range < 1 || center < 1)
 800827c:	2900      	cmp	r1, #0
 800827e:	db09      	blt.n	8008294 <_ZN5codal3_cm3Pin13setServoValueEiii+0x20>
 8008280:	2a00      	cmp	r2, #0
 8008282:	dd07      	ble.n	8008294 <_ZN5codal3_cm3Pin13setServoValueEiii+0x20>
 8008284:	2b00      	cmp	r3, #0
    value = value * 1000;

    //add the percentage of the range based on the value between 0 and 180
    int scaled = lower + (range * (value / DEVICE_PIN_MAX_SERVO_RANGE));

    return setServoPulseUs(scaled / 1000);
 8008286:	bfd4      	ite	le
 8008288:	f46f 707a 	mvnle.w	r0, #1000	; 0x3e8
 800828c:	2000      	movgt	r0, #0
 800828e:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 8008290:	4802      	ldr	r0, [pc, #8]	; (800829c <_ZN5codal3_cm3Pin13setServoValueEiii+0x28>)
 8008292:	4770      	bx	lr
        return DEVICE_INVALID_PARAMETER;
 8008294:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	fffffc16 	.word	0xfffffc16

080082a0 <_ZN5codal3_cm3Pin9isTouchedEv>:
  * @endcode
  */
int Pin::isTouched()
{
    return DEVICE_NOT_SUPPORTED;
}
 80082a0:	4800      	ldr	r0, [pc, #0]	; (80082a4 <_ZN5codal3_cm3Pin9isTouchedEv+0x4>)
 80082a2:	4770      	bx	lr
 80082a4:	fffffc16 	.word	0xfffffc16

080082a8 <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv>:
        return DEVICE_NOT_SUPPORTED;

    return ((DynamicPwm *)pin)->getPeriodUs();
#endif  //  TODO
    return DEVICE_NOT_SUPPORTED;
}
 80082a8:	4800      	ldr	r0, [pc, #0]	; (80082ac <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv+0x4>)
 80082aa:	4770      	bx	lr
 80082ac:	fffffc16 	.word	0xfffffc16

080082b0 <_ZN5codal3_cm3Pin15setDigitalValueEi>:
{
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	460c      	mov	r4, r1
 80082b4:	4605      	mov	r5, r0
    debug_print("pin "); debug_println(value); ////
 80082b6:	4813      	ldr	r0, [pc, #76]	; (8008304 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x54>)
 80082b8:	f7fa fb0f 	bl	80028da <debug_print>
 80082bc:	4620      	mov	r0, r4
 80082be:	f7fa fafd 	bl	80028bc <_Z13debug_printlni>
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 80082c2:	792b      	ldrb	r3, [r5, #4]
 80082c4:	07db      	lsls	r3, r3, #31
 80082c6:	d518      	bpl.n	80082fa <_ZN5codal3_cm3Pin15setDigitalValueEi+0x4a>
    if (value < 0 || value > 1)
 80082c8:	2c01      	cmp	r4, #1
 80082ca:	d818      	bhi.n	80082fe <_ZN5codal3_cm3Pin15setDigitalValueEi+0x4e>
	rcc_periph_clock_enable(RCC_GPIOC);
 80082cc:	f44f 7041 	mov.w	r0, #772	; 0x304
 80082d0:	f7f9 fc1a 	bl	8001b08 <rcc_periph_clock_enable>
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 80082d4:	2102      	movs	r1, #2
 80082d6:	480c      	ldr	r0, [pc, #48]	; (8008308 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x58>)
 80082d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082dc:	2200      	movs	r2, #0
 80082de:	f7f9 fbd9 	bl	8001a94 <gpio_set_mode>
        gpio_set(GPIOC, GPIO13);
 80082e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80082e6:	4808      	ldr	r0, [pc, #32]	; (8008308 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x58>)
    if (value) {
 80082e8:	b124      	cbz	r4, 80082f4 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x44>
        gpio_set(GPIOC, GPIO13);
 80082ea:	f7f9 fc04 	bl	8001af6 <gpio_set>
 80082ee:	2400      	movs	r4, #0
}
 80082f0:	4620      	mov	r0, r4
 80082f2:	bd38      	pop	{r3, r4, r5, pc}
	    gpio_clear(GPIOC, GPIO13);
 80082f4:	f7f9 fc01 	bl	8001afa <gpio_clear>
 80082f8:	e7fa      	b.n	80082f0 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x40>
        return DEVICE_NOT_SUPPORTED;
 80082fa:	4c04      	ldr	r4, [pc, #16]	; (800830c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x5c>)
 80082fc:	e7f8      	b.n	80082f0 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x40>
        return DEVICE_INVALID_PARAMETER;
 80082fe:	f46f 747a 	mvn.w	r4, #1000	; 0x3e8
 8008302:	e7f5      	b.n	80082f0 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x40>
 8008304:	0800a6ba 	.word	0x0800a6ba
 8008308:	40011000 	.word	0x40011000
 800830c:	fffffc16 	.word	0xfffffc16

08008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>:
Pin::Pin(
 8008310:	b570      	push	{r4, r5, r6, lr}
          * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_ALL);
          * @endcode
          */
        Pin(int id, PinNumber name, PinCapability capability)
        {
            this->status = 0;
 8008312:	2500      	movs	r5, #0
    rcc(rcc), port(port), pin(pin) {
 8008314:	f101 0664 	add.w	r6, r1, #100	; 0x64
            this->id = id;
            this->name = name;
 8008318:	7401      	strb	r1, [r0, #16]
            this->capability = capability;
 800831a:	f89d 1014 	ldrb.w	r1, [sp, #20]
 800831e:	e9c0 2305 	strd	r2, r3, [r0, #20]
 8008322:	7101      	strb	r1, [r0, #4]
 8008324:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8008328:	4903      	ldr	r1, [pc, #12]	; (8008338 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE+0x28>)
            this->status = 0;
 800832a:	8185      	strh	r5, [r0, #12]
            this->id = id;
 800832c:	81c6      	strh	r6, [r0, #14]
 800832e:	6001      	str	r1, [r0, #0]
 8008330:	8383      	strh	r3, [r0, #28]
    this->pullMode = DEVICE_DEFAULT_PULLMODE;
 8008332:	6085      	str	r5, [r0, #8]
}
 8008334:	bd70      	pop	{r4, r5, r6, pc}
 8008336:	bf00      	nop
 8008338:	0800a440 	.word	0x0800a440

0800833c <_ZN5codal3_cm6SerialD1Ev>:
 800833c:	b510      	push	{r4, lr}
 800833e:	4604      	mov	r4, r0
 8008340:	4b02      	ldr	r3, [pc, #8]	; (800834c <_ZN5codal3_cm6SerialD1Ev+0x10>)
 8008342:	6003      	str	r3, [r0, #0]
 8008344:	f7ff fd7e 	bl	8007e44 <_ZN5codal6SerialD1Ev>
 8008348:	4620      	mov	r0, r4
 800834a:	bd10      	pop	{r4, pc}
 800834c:	0800a494 	.word	0x0800a494

08008350 <_ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh>:
          *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/SerialBase.h
          *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/RawSerial.h
          *
          *       Buffers aren't allocated until the first send or receive respectively.
          */
        Serial::Serial(Pin &tx, Pin &rx, uint8_t rxBufferSize, uint8_t txBufferSize) 
 8008350:	b537      	push	{r0, r1, r2, r4, r5, lr}
            : codal::Serial(tx, rx)
 8008352:	f04f 0c0c 	mov.w	ip, #12
        Serial::Serial(Pin &tx, Pin &rx, uint8_t rxBufferSize, uint8_t txBufferSize) 
 8008356:	461d      	mov	r5, r3
            : codal::Serial(tx, rx)
 8008358:	2314      	movs	r3, #20
        Serial::Serial(Pin &tx, Pin &rx, uint8_t rxBufferSize, uint8_t txBufferSize) 
 800835a:	4604      	mov	r4, r0
            : codal::Serial(tx, rx)
 800835c:	e9cd 3c00 	strd	r3, ip, [sp]
 8008360:	f7ff fd42 	bl	8007de8 <_ZN5codal6SerialC1ERNS_3PinES2_hht>
 8008364:	4b0c      	ldr	r3, [pc, #48]	; (8008398 <_ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh+0x48>)
            this->txBuffTail = 0;

            this->rxBuffHeadMatch = -1;

            this->baud(CODAL_SERIAL_DEFAULT_BAUD_RATE);
        }
 8008366:	4620      	mov	r0, r4
            : codal::Serial(tx, rx)
 8008368:	6023      	str	r3, [r4, #0]
            this->txBuffSize = txBufferSize + 1;
 800836a:	f89d 3018 	ldrb.w	r3, [sp, #24]
            this->rxBuffSize = rxBufferSize + 1;
 800836e:	3501      	adds	r5, #1
            this->txBuffSize = txBufferSize + 1;
 8008370:	3301      	adds	r3, #1
 8008372:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
            this->rxBuff = NULL;
 8008376:	2300      	movs	r3, #0
            this->rxBuffHead = 0;
 8008378:	83e3      	strh	r3, [r4, #30]
            this->rxBuff = NULL;
 800837a:	61a3      	str	r3, [r4, #24]
            this->txBuff = NULL;
 800837c:	6263      	str	r3, [r4, #36]	; 0x24
            this->rxBuffTail = 0;
 800837e:	8423      	strh	r3, [r4, #32]
            this->txBuffHead = 0;
 8008380:	8563      	strh	r3, [r4, #42]	; 0x2a
            this->txBuffTail = 0;
 8008382:	85a3      	strh	r3, [r4, #44]	; 0x2c
            this->rxBuffHeadMatch = -1;
 8008384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008388:	6163      	str	r3, [r4, #20]
        int Serial::baud(int baudrate)
        {
            if(baudrate < 0)
                return DEVICE_INVALID_PARAMETER;

            this->baudrate = baudrate;
 800838a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
            this->rxBuffSize = rxBufferSize + 1;
 800838e:	7725      	strb	r5, [r4, #28]
            this->baudrate = baudrate;
 8008390:	6323      	str	r3, [r4, #48]	; 0x30
        }
 8008392:	b003      	add	sp, #12
 8008394:	bd30      	pop	{r4, r5, pc}
 8008396:	bf00      	nop
 8008398:	0800a494 	.word	0x0800a494

0800839c <_ZN5codal3_cm14alarm_callbackEv>:
        }

        void alarm_callback() {
            //  Will be called when an alarm is triggered.  Needed to keep CODAL scheduler running, which sets alarms every few seconds.
            //  Warning: This is called from an Interrupt Service Routine.  Don't trigger any interrupts or call slow functions.
            if (!Timer::instance) { return; }  //  No timer to trigger, quit.
 800839c:	4b02      	ldr	r3, [pc, #8]	; (80083a8 <_ZN5codal3_cm14alarm_callbackEv+0xc>)
 800839e:	6818      	ldr	r0, [r3, #0]
 80083a0:	b108      	cbz	r0, 80083a6 <_ZN5codal3_cm14alarm_callbackEv+0xa>
            Timer::instance->trigger();        //  Trigger the CODAL Scheduler.
 80083a2:	f001 baf8 	b.w	8009996 <_ZN5codal5Timer7triggerEv>
        }
 80083a6:	4770      	bx	lr
 80083a8:	20002174 	.word	0x20002174

080083ac <_ZN5codal3_cm5Timer9triggerInEm>:
#endif  //  TODO
        }

        void Timer::triggerIn(CODAL_TIMESTAMP t) {
            //  Set alarm for millis() + t millisecs.
            if (!initialised) {
 80083ac:	f890 3020 	ldrb.w	r3, [r0, #32]
 80083b0:	b923      	cbnz	r3, 80083bc <_ZN5codal3_cm5Timer9triggerInEm+0x10>
                //  If we are called before init(), remember the trigger and set during init().  CODAL Scheduler calls the timer before it's ready.
                //  There seems to be a circular dependency, so we resolve by deferring the trigger until the scheduler has completely started up.
                trigger_period = t;
 80083b2:	4b04      	ldr	r3, [pc, #16]	; (80083c4 <_ZN5codal3_cm5Timer9triggerInEm+0x18>)
                debug_println("triggerIn b4 init!");
 80083b4:	4804      	ldr	r0, [pc, #16]	; (80083c8 <_ZN5codal3_cm5Timer9triggerInEm+0x1c>)
                trigger_period = t;
 80083b6:	6019      	str	r1, [r3, #0]
                debug_println("triggerIn b4 init!");
 80083b8:	f7fa ba72 	b.w	80028a0 <debug_println>
                return;
            }
            //  debug_print("triggerIn "); debug_println((size_t) t); debug_flush(); debug_printhex_unsigned(platform_get_alarm()); debug_print(" "); debug_flush(); ////
            platform_set_alarm(t);
 80083bc:	4608      	mov	r0, r1
 80083be:	f7fa bbb1 	b.w	8002b24 <platform_set_alarm>
 80083c2:	bf00      	nop
 80083c4:	2000217c 	.word	0x2000217c
 80083c8:	0800a6d1 	.word	0x0800a6d1

080083cc <_ZN5codal3_cm13tick_callbackEv>:
        void tick_callback() {
 80083cc:	b510      	push	{r4, lr}
            if (!Timer::instance) { return; }  //  No timer to trigger, quit.
 80083ce:	4c08      	ldr	r4, [pc, #32]	; (80083f0 <_ZN5codal3_cm13tick_callbackEv+0x24>)
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	b163      	cbz	r3, 80083ee <_ZN5codal3_cm13tick_callbackEv+0x22>
            CODAL_TIMESTAMP now = millis();
 80083d4:	f7fa fbcc 	bl	8002b70 <millis>
            if (last_trigger + (SCHEDULER_TICK_PERIOD_US / 1000) <= now) {
 80083d8:	4a06      	ldr	r2, [pc, #24]	; (80083f4 <_ZN5codal3_cm13tick_callbackEv+0x28>)
 80083da:	6813      	ldr	r3, [r2, #0]
 80083dc:	3304      	adds	r3, #4
 80083de:	4298      	cmp	r0, r3
 80083e0:	d305      	bcc.n	80083ee <_ZN5codal3_cm13tick_callbackEv+0x22>
                last_trigger = now;
 80083e2:	6010      	str	r0, [r2, #0]
                Timer::instance->trigger();  //  Trigger the CODAL Scheduler.
 80083e4:	6820      	ldr	r0, [r4, #0]
        }
 80083e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                Timer::instance->trigger();  //  Trigger the CODAL Scheduler.
 80083ea:	f001 bad4 	b.w	8009996 <_ZN5codal5Timer7triggerEv>
        }
 80083ee:	bd10      	pop	{r4, pc}
 80083f0:	20002174 	.word	0x20002174
 80083f4:	20002178 	.word	0x20002178

080083f8 <_ZN5codal3_cm5Timer11syncRequestEv>:
            target_enable_irq();
#endif  //  TODO
        }

        void Timer::syncRequest() {
            if (!initialised) {
 80083f8:	f890 3020 	ldrb.w	r3, [r0, #32]
        void Timer::syncRequest() {
 80083fc:	b513      	push	{r0, r1, r4, lr}
 80083fe:	4604      	mov	r4, r0
            if (!initialised) {
 8008400:	b92b      	cbnz	r3, 800840e <_ZN5codal3_cm5Timer11syncRequestEv+0x16>
                debug_print("sync! ");  //  Warning: syncRequest called before init
 8008402:	480e      	ldr	r0, [pc, #56]	; (800843c <_ZN5codal3_cm5Timer11syncRequestEv+0x44>)
            // uwTick += delta;
            this->prev = curr;
            this->sync(delta * 1000);  //  Sync expects microseconds.
            target_enable_irq();            
            //  debug_print("timer sync "); debug_println((size_t) delta * 1000);
        }
 8008404:	b002      	add	sp, #8
 8008406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                debug_print("sync! ");  //  Warning: syncRequest called before init
 800840a:	f7fa ba66 	b.w	80028da <debug_print>
            target_disable_irq();
 800840e:	f7f8 fccb 	bl	8000da8 <target_disable_irq>
            volatile uint32_t curr = millis();
 8008412:	f7fa fbad 	bl	8002b70 <millis>
            this->sync(delta * 1000);  //  Sync expects microseconds.
 8008416:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
            volatile uint32_t curr = millis();
 800841a:	9000      	str	r0, [sp, #0]
            volatile uint32_t delta = curr - this->prev;  //  In milliseconds.
 800841c:	9b00      	ldr	r3, [sp, #0]
 800841e:	69e2      	ldr	r2, [r4, #28]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 8008420:	4620      	mov	r0, r4
            volatile uint32_t delta = curr - this->prev;  //  In milliseconds.
 8008422:	1a9b      	subs	r3, r3, r2
 8008424:	9301      	str	r3, [sp, #4]
            this->prev = curr;
 8008426:	9b00      	ldr	r3, [sp, #0]
 8008428:	61e3      	str	r3, [r4, #28]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 800842a:	9b01      	ldr	r3, [sp, #4]
 800842c:	4359      	muls	r1, r3
 800842e:	f001 faa0 	bl	8009972 <_ZN5codal5Timer4syncEm>
        }
 8008432:	b002      	add	sp, #8
 8008434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            target_enable_irq();            
 8008438:	f7f8 bcb4 	b.w	8000da4 <target_enable_irq>
 800843c:	0800a6bf 	.word	0x0800a6bf

08008440 <_ZN5codal3_cm5TimerC1Ev>:
        Timer::Timer() : codal::Timer() {
 8008440:	b510      	push	{r4, lr}
 8008442:	4604      	mov	r4, r0
 8008444:	f7ff fd0c 	bl	8007e60 <_ZN5codal5TimerC1Ev>
 8008448:	4b06      	ldr	r3, [pc, #24]	; (8008464 <_ZN5codal3_cm5TimerC1Ev+0x24>)
            instance = this;
 800844a:	4a07      	ldr	r2, [pc, #28]	; (8008468 <_ZN5codal3_cm5TimerC1Ev+0x28>)
        Timer::Timer() : codal::Timer() {
 800844c:	6023      	str	r3, [r4, #0]
            initialised = false;
 800844e:	2300      	movs	r3, #0
            instance = this;
 8008450:	6014      	str	r4, [r2, #0]
            trigger_period = 0;
 8008452:	4a06      	ldr	r2, [pc, #24]	; (800846c <_ZN5codal3_cm5TimerC1Ev+0x2c>)
            initialised = false;
 8008454:	f884 3020 	strb.w	r3, [r4, #32]
            trigger_period = 0;
 8008458:	6013      	str	r3, [r2, #0]
            last_trigger = 0;
 800845a:	4a05      	ldr	r2, [pc, #20]	; (8008470 <_ZN5codal3_cm5TimerC1Ev+0x30>)
            prev = 0;
 800845c:	61e3      	str	r3, [r4, #28]
            last_trigger = 0;
 800845e:	6013      	str	r3, [r2, #0]
        }
 8008460:	4620      	mov	r0, r4
 8008462:	bd10      	pop	{r4, pc}
 8008464:	0800a4cc 	.word	0x0800a4cc
 8008468:	20002174 	.word	0x20002174
 800846c:	2000217c 	.word	0x2000217c
 8008470:	20002178 	.word	0x20002178

08008474 <_ZN5codal3_cm5Timer4initEv>:
        void Timer::init() {
 8008474:	b570      	push	{r4, r5, r6, lr}
            if (initialised) { return; }  //  If already initialised, quit.
 8008476:	f890 6020 	ldrb.w	r6, [r0, #32]
        void Timer::init() {
 800847a:	4604      	mov	r4, r0
            if (initialised) { return; }  //  If already initialised, quit.
 800847c:	b9ee      	cbnz	r6, 80084ba <_ZN5codal3_cm5Timer4initEv+0x46>
            debug_println("timer init"); ////
 800847e:	480f      	ldr	r0, [pc, #60]	; (80084bc <_ZN5codal3_cm5Timer4initEv+0x48>)
 8008480:	f7fa fa0e 	bl	80028a0 <debug_println>
            initialised = true;
 8008484:	2301      	movs	r3, #1
 8008486:	f884 3020 	strb.w	r3, [r4, #32]
            prev = millis();
 800848a:	f7fa fb71 	bl	8002b70 <millis>
            if (trigger_period > 0) {
 800848e:	4d0c      	ldr	r5, [pc, #48]	; (80084c0 <_ZN5codal3_cm5Timer4initEv+0x4c>)
            prev = millis();
 8008490:	61e0      	str	r0, [r4, #28]
            target_set_tick_callback(tick_callback);
 8008492:	480c      	ldr	r0, [pc, #48]	; (80084c4 <_ZN5codal3_cm5Timer4initEv+0x50>)
 8008494:	f7f8 fc6e 	bl	8000d74 <target_set_tick_callback>
            target_set_alarm_callback(alarm_callback);
 8008498:	480b      	ldr	r0, [pc, #44]	; (80084c8 <_ZN5codal3_cm5Timer4initEv+0x54>)
 800849a:	f7f8 fc71 	bl	8000d80 <target_set_alarm_callback>
            if (trigger_period > 0) {
 800849e:	6829      	ldr	r1, [r5, #0]
 80084a0:	b121      	cbz	r1, 80084ac <_ZN5codal3_cm5Timer4initEv+0x38>
                triggerIn(trigger_period);
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	4620      	mov	r0, r4
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4798      	blx	r3
                trigger_period = 0;
 80084aa:	602e      	str	r6, [r5, #0]
            start_background_tasks();
 80084ac:	f000 f870 	bl	8008590 <start_background_tasks>
        }
 80084b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            bootloader_set_restart_callback(restart_callback);
 80084b4:	4805      	ldr	r0, [pc, #20]	; (80084cc <_ZN5codal3_cm5Timer4initEv+0x58>)
 80084b6:	f7fb bfdd 	b.w	8004474 <bootloader_set_restart_callback>
        }
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
 80084bc:	0800a6c6 	.word	0x0800a6c6
 80084c0:	2000217c 	.word	0x2000217c
 80084c4:	080083cd 	.word	0x080083cd
 80084c8:	0800839d 	.word	0x0800839d
 80084cc:	08008535 	.word	0x08008535

080084d0 <_ZL10flush_taskv>:
        return status;
    }
    return 0;
}

static void flush_task(void) {
 80084d0:	b508      	push	{r3, lr}
    //  Flush the log periodically.
    debug_println("flush task");
 80084d2:	4804      	ldr	r0, [pc, #16]	; (80084e4 <_ZL10flush_taskv+0x14>)
 80084d4:	f7fa f9e4 	bl	80028a0 <debug_println>
    while (true) {
        debug_flush();
 80084d8:	f7fa f9fc 	bl	80028d4 <debug_flush>
        codal::fiber_sleep(200);
 80084dc:	20c8      	movs	r0, #200	; 0xc8
 80084de:	f7ff fb8d 	bl	8007bfc <_ZN5codal11fiber_sleepEm>
 80084e2:	e7f9      	b.n	80084d8 <_ZL10flush_taskv+0x8>
 80084e4:	0800a718 	.word	0x0800a718

080084e8 <_ZL15restart_handlerN5codal5EventE>:
static void restart_handler(codal::Event evt) {
 80084e8:	b507      	push	{r0, r1, r2, lr}
 80084ea:	ab02      	add	r3, sp, #8
 80084ec:	e903 0003 	stmdb	r3, {r0, r1}
    debug_println("restart handler");
 80084f0:	480d      	ldr	r0, [pc, #52]	; (8008528 <_ZL15restart_handlerN5codal5EventE+0x40>)
 80084f2:	f7fa f9d5 	bl	80028a0 <debug_println>
    if (evt.value != CM_EVT_RESTART) { return; }
 80084f6:	f640 039d 	movw	r3, #2205	; 0x89d
 80084fa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d10f      	bne.n	8008522 <_ZL15restart_handlerN5codal5EventE+0x3a>
    debug_println("restarting...");
 8008502:	480a      	ldr	r0, [pc, #40]	; (800852c <_ZL15restart_handlerN5codal5EventE+0x44>)
 8008504:	f7fa f9cc 	bl	80028a0 <debug_println>
    debug_force_flush();
 8008508:	f7fa f966 	bl	80027d8 <debug_force_flush>
    codal::fiber_sleep(5000);
 800850c:	f241 3088 	movw	r0, #5000	; 0x1388
 8008510:	f7ff fb74 	bl	8007bfc <_ZN5codal11fiber_sleepEm>
    debug_println("done");
 8008514:	4806      	ldr	r0, [pc, #24]	; (8008530 <_ZL15restart_handlerN5codal5EventE+0x48>)
 8008516:	f7fa f9c3 	bl	80028a0 <debug_println>
    debug_force_flush();
 800851a:	f7fa f95d 	bl	80027d8 <debug_force_flush>
    scb_reset_system();
 800851e:	f7f9 f813 	bl	8001548 <scb_reset_system>
}
 8008522:	b003      	add	sp, #12
 8008524:	f85d fb04 	ldr.w	pc, [sp], #4
 8008528:	0800a723 	.word	0x0800a723
 800852c:	0800a733 	.word	0x0800a733
 8008530:	0800a741 	.word	0x0800a741

08008534 <restart_callback>:
    debug_println("restart callback");
 8008534:	4810      	ldr	r0, [pc, #64]	; (8008578 <restart_callback+0x44>)
int restart_callback(void) {
 8008536:	b510      	push	{r4, lr}
    debug_println("restart callback");
 8008538:	f7fa f9b2 	bl	80028a0 <debug_println>
    if (!codal::EventModel::defaultEventBus) {
 800853c:	4b0f      	ldr	r3, [pc, #60]	; (800857c <restart_callback+0x48>)
 800853e:	6818      	ldr	r0, [r3, #0]
 8008540:	b930      	cbnz	r0, 8008550 <restart_callback+0x1c>
        debug_println("*** ERROR: missing event bus");
 8008542:	480f      	ldr	r0, [pc, #60]	; (8008580 <restart_callback+0x4c>)
 8008544:	f7fa f9ac 	bl	80028a0 <debug_println>
        return -1;
 8008548:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800854c:	4620      	mov	r0, r4
 800854e:	bd10      	pop	{r4, pc}
    int status = codal::EventModel::defaultEventBus->send(restart_event);
 8008550:	6802      	ldr	r2, [r0, #0]
 8008552:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <restart_callback+0x50>)
 8008554:	6814      	ldr	r4, [r2, #0]
 8008556:	e893 0006 	ldmia.w	r3, {r1, r2}
 800855a:	47a0      	blx	r4
    if (status) {
 800855c:	4604      	mov	r4, r0
 800855e:	2800      	cmp	r0, #0
 8008560:	d0f4      	beq.n	800854c <restart_callback+0x18>
        debug_print("*** ERROR: unable to send restart event ");
 8008562:	4809      	ldr	r0, [pc, #36]	; (8008588 <restart_callback+0x54>)
 8008564:	f7fa f9b9 	bl	80028da <debug_print>
        debug_print_unsigned(status); debug_println("");
 8008568:	4620      	mov	r0, r4
 800856a:	f7fa f9c5 	bl	80028f8 <debug_print_unsigned>
 800856e:	4807      	ldr	r0, [pc, #28]	; (800858c <restart_callback+0x58>)
 8008570:	f7fa f996 	bl	80028a0 <debug_println>
        return status;
 8008574:	e7ea      	b.n	800854c <restart_callback+0x18>
 8008576:	bf00      	nop
 8008578:	0800a746 	.word	0x0800a746
 800857c:	2000216c 	.word	0x2000216c
 8008580:	0800a757 	.word	0x0800a757
 8008584:	20002184 	.word	0x20002184
 8008588:	0800a774 	.word	0x0800a774
 800858c:	0800a6c5 	.word	0x0800a6c5

08008590 <start_background_tasks>:
        // if (restart_requested) {}
    }
}

int start_background_tasks(void) {
 8008590:	b573      	push	{r0, r1, r4, r5, r6, lr}
    //  Start the background tasks to flush the log and wait for restart requests.
    if (!flush_task_fibre) {
 8008592:	4c22      	ldr	r4, [pc, #136]	; (800861c <start_background_tasks+0x8c>)
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	b92b      	cbnz	r3, 80085a4 <start_background_tasks+0x14>
        if (!codal::fiber_scheduler_running()) {
 8008598:	f7ff f9a6 	bl	80078e8 <_ZN5codal23fiber_scheduler_runningEv>
 800859c:	b970      	cbnz	r0, 80085bc <start_background_tasks+0x2c>
            debug_println("no scheduler, start bg tasks later");
 800859e:	4820      	ldr	r0, [pc, #128]	; (8008620 <start_background_tasks+0x90>)
        } else {
            debug_println("start bg tasks");
            flush_task_fibre = codal::create_fiber(flush_task);
            if (!flush_task_fibre) {
                debug_println("*** ERROR: create fibre failed");
 80085a0:	f7fa f97e 	bl	80028a0 <debug_println>
            }
        }
    }
    //  Listen for restart requests.
    if (!restart_listener_started) {
 80085a4:	4e1f      	ldr	r6, [pc, #124]	; (8008624 <start_background_tasks+0x94>)
 80085a6:	7833      	ldrb	r3, [r6, #0]
 80085a8:	b92b      	cbnz	r3, 80085b6 <start_background_tasks+0x26>
        if (!codal::EventModel::defaultEventBus) {
 80085aa:	4b1f      	ldr	r3, [pc, #124]	; (8008628 <start_background_tasks+0x98>)
 80085ac:	681d      	ldr	r5, [r3, #0]
 80085ae:	b98d      	cbnz	r5, 80085d4 <start_background_tasks+0x44>
            debug_println("*** ERROR: missing event bus");
 80085b0:	481e      	ldr	r0, [pc, #120]	; (800862c <start_background_tasks+0x9c>)
        } else {
            int status = codal::EventModel::defaultEventBus->listen(
                CM_SOURCE_BOOTLOADER, CM_EVT_RESTART, restart_handler);
            if (status) {
                debug_print("*** ERROR: unable to listen for restart event ");
                debug_printhex_unsigned(status); debug_println("");
 80085b2:	f7fa f975 	bl	80028a0 <debug_println>
                restart_listener_started = true;
            }
        }
    }
    return 0;
}
 80085b6:	2000      	movs	r0, #0
 80085b8:	b002      	add	sp, #8
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
            debug_println("start bg tasks");
 80085bc:	481c      	ldr	r0, [pc, #112]	; (8008630 <start_background_tasks+0xa0>)
 80085be:	f7fa f96f 	bl	80028a0 <debug_println>
            flush_task_fibre = codal::create_fiber(flush_task);
 80085c2:	491c      	ldr	r1, [pc, #112]	; (8008634 <start_background_tasks+0xa4>)
 80085c4:	481c      	ldr	r0, [pc, #112]	; (8008638 <start_background_tasks+0xa8>)
 80085c6:	f000 ff74 	bl	80094b2 <_ZN5codal12create_fiberEPFvvES1_>
 80085ca:	6020      	str	r0, [r4, #0]
            if (!flush_task_fibre) {
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d1e9      	bne.n	80085a4 <start_background_tasks+0x14>
                debug_println("*** ERROR: create fibre failed");
 80085d0:	481a      	ldr	r0, [pc, #104]	; (800863c <start_background_tasks+0xac>)
 80085d2:	e7e5      	b.n	80085a0 <start_background_tasks+0x10>
            Listener *newListener = new Listener(id, value, handler, flags);
 80085d4:	2020      	movs	r0, #32
 80085d6:	f7fa fac7 	bl	8002b68 <_Znwj>
 80085da:	2310      	movs	r3, #16
 80085dc:	4604      	mov	r4, r0
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	f645 0134 	movw	r1, #22580	; 0x5834
 80085e4:	4b16      	ldr	r3, [pc, #88]	; (8008640 <start_background_tasks+0xb0>)
 80085e6:	f640 029d 	movw	r2, #2205	; 0x89d
 80085ea:	f000 ffed 	bl	80095c8 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 80085ee:	682b      	ldr	r3, [r5, #0]
 80085f0:	4621      	mov	r1, r4
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	4628      	mov	r0, r5
 80085f6:	4798      	blx	r3
 80085f8:	b168      	cbz	r0, 8008616 <start_background_tasks+0x86>
            delete newListener;
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 fff8 	bl	80095f0 <_ZN5codal8ListenerD1Ev>
 8008600:	4620      	mov	r0, r4
 8008602:	f7fa fab3 	bl	8002b6c <_ZdlPv>
                debug_print("*** ERROR: unable to listen for restart event ");
 8008606:	480f      	ldr	r0, [pc, #60]	; (8008644 <start_background_tasks+0xb4>)
 8008608:	f7fa f967 	bl	80028da <debug_print>
                debug_printhex_unsigned(status); debug_println("");
 800860c:	480e      	ldr	r0, [pc, #56]	; (8008648 <start_background_tasks+0xb8>)
 800860e:	f7fa f996 	bl	800293e <debug_printhex_unsigned>
 8008612:	480e      	ldr	r0, [pc, #56]	; (800864c <start_background_tasks+0xbc>)
 8008614:	e7cd      	b.n	80085b2 <start_background_tasks+0x22>
                restart_listener_started = true;
 8008616:	2301      	movs	r3, #1
 8008618:	7033      	strb	r3, [r6, #0]
 800861a:	e7cc      	b.n	80085b6 <start_background_tasks+0x26>
 800861c:	2000218c 	.word	0x2000218c
 8008620:	0800a79d 	.word	0x0800a79d
 8008624:	20002211 	.word	0x20002211
 8008628:	2000216c 	.word	0x2000216c
 800862c:	0800a757 	.word	0x0800a757
 8008630:	0800a7c0 	.word	0x0800a7c0
 8008634:	08007c39 	.word	0x08007c39
 8008638:	080084d1 	.word	0x080084d1
 800863c:	0800a7cf 	.word	0x0800a7cf
 8008640:	080084e9 	.word	0x080084e9
 8008644:	0800a7ee 	.word	0x0800a7ee
 8008648:	fffffc16 	.word	0xfffffc16
 800864c:	0800a6c5 	.word	0x0800a6c5

08008650 <_GLOBAL__sub_I_restart_callback>:
    CM_SOURCE_BOOTLOADER, CM_EVT_RESTART, codal::CREATE_ONLY);
 8008650:	2300      	movs	r3, #0
 8008652:	f640 029d 	movw	r2, #2205	; 0x89d
 8008656:	f645 0134 	movw	r1, #22580	; 0x5834
 800865a:	4801      	ldr	r0, [pc, #4]	; (8008660 <_GLOBAL__sub_I_restart_callback+0x10>)
 800865c:	f001 bae3 	b.w	8009c26 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
 8008660:	20002184 	.word	0x20002184

08008664 <_ZN5codal13STM32BluePill4initEv>:
  * @note This method must be called before user code utilises any functionality
  *       contained within the GenuinoZero class.
  */
int STM32BluePill::init()
{
    if (status & DEVICE_INITIALIZED)
 8008664:	88c3      	ldrh	r3, [r0, #6]
{
 8008666:	b570      	push	{r4, r5, r6, lr}
    if (status & DEVICE_INITIALIZED)
 8008668:	f013 0501 	ands.w	r5, r3, #1
{
 800866c:	4604      	mov	r4, r0
    if (status & DEVICE_INITIALIZED)
 800866e:	d129      	bne.n	80086c4 <_ZN5codal13STM32BluePill4initEv+0x60>
        return DEVICE_NOT_SUPPORTED;
    status |= DEVICE_INITIALIZED;
 8008670:	f043 0301 	orr.w	r3, r3, #1
 8008674:	80c3      	strh	r3, [r0, #6]

    debug_println("bluepill init scheduler"); debug_flush(); ////
 8008676:	4814      	ldr	r0, [pc, #80]	; (80086c8 <_ZN5codal13STM32BluePill4initEv+0x64>)
 8008678:	f7fa f912 	bl	80028a0 <debug_println>
 800867c:	f7fa f92a 	bl	80028d4 <debug_flush>

    //  Codal initialisation... Bring up fiber scheduler.
    scheduler_init(messageBus);
 8008680:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8008684:	f7ff f938 	bl	80078f8 <_ZN5codal14scheduler_initERNS_10EventModelE>
    debug_println("bluepill init components"); debug_flush(); ////
 8008688:	4810      	ldr	r0, [pc, #64]	; (80086cc <_ZN5codal13STM32BluePill4initEv+0x68>)
 800868a:	f7fa f909 	bl	80028a0 <debug_println>
 800868e:	f7fa f921 	bl	80028d4 <debug_flush>

    //  Init the timer first, all other components depend on the timer.
    timer.init();
 8008692:	f104 0008 	add.w	r0, r4, #8
 8008696:	f7ff feed 	bl	8008474 <_ZN5codal3_cm5Timer4initEv>

    //  Initialise all the Codal components.
    for(int i = 0; i < DEVICE_COMPONENT_COUNT; i++)
    {
        if(CodalComponent::components[i])
 800869a:	4e0d      	ldr	r6, [pc, #52]	; (80086d0 <_ZN5codal13STM32BluePill4initEv+0x6c>)
 800869c:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
 80086a0:	b110      	cbz	r0, 80086a8 <_ZN5codal13STM32BluePill4initEv+0x44>
            CodalComponent::components[i]->init();
 80086a2:	6803      	ldr	r3, [r0, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4798      	blx	r3
    for(int i = 0; i < DEVICE_COMPONENT_COUNT; i++)
 80086a8:	3501      	adds	r5, #1
 80086aa:	2d3c      	cmp	r5, #60	; 0x3c
 80086ac:	d1f6      	bne.n	800869c <_ZN5codal13STM32BluePill4initEv+0x38>
    }
    status |= DEVICE_COMPONENT_STATUS_IDLE_TICK;
 80086ae:	88e3      	ldrh	r3, [r4, #6]
    debug_println("bluepill init ok"); debug_flush(); ////
 80086b0:	4808      	ldr	r0, [pc, #32]	; (80086d4 <_ZN5codal13STM32BluePill4initEv+0x70>)
    status |= DEVICE_COMPONENT_STATUS_IDLE_TICK;
 80086b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80086b6:	80e3      	strh	r3, [r4, #6]
    debug_println("bluepill init ok"); debug_flush(); ////
 80086b8:	f7fa f8f2 	bl	80028a0 <debug_println>
 80086bc:	f7fa f90a 	bl	80028d4 <debug_flush>
 80086c0:	2000      	movs	r0, #0
    return DEVICE_OK;
}
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
        return DEVICE_NOT_SUPPORTED;
 80086c4:	4804      	ldr	r0, [pc, #16]	; (80086d8 <_ZN5codal13STM32BluePill4initEv+0x74>)
 80086c6:	e7fc      	b.n	80086c2 <_ZN5codal13STM32BluePill4initEv+0x5e>
 80086c8:	0800a81d 	.word	0x0800a81d
 80086cc:	0800a835 	.word	0x0800a835
 80086d0:	2000204c 	.word	0x2000204c
 80086d4:	0800a84e 	.word	0x0800a84e
 80086d8:	fffffc16 	.word	0xfffffc16

080086dc <_ZN5codal13STM32BluePillC1Ev>:
STM32BluePill::STM32BluePill() :
 80086dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
            this->id = 0;
 80086de:	2500      	movs	r5, #0
 80086e0:	4604      	mov	r4, r0
        {
 80086e2:	4b24      	ldr	r3, [pc, #144]	; (8008774 <_ZN5codal13STM32BluePillC1Ev+0x98>)
            this->id = 0;
 80086e4:	6045      	str	r5, [r0, #4]
        {
 80086e6:	6003      	str	r3, [r0, #0]
            addComponent();
 80086e8:	f7fe fff4 	bl	80076d4 <_ZN5codal14CodalComponent12addComponentEv>
    usart2(io.tx2, io.rx2) {  //  Port USART2 (USART1, USART3 not supported yet)
 80086ec:	4620      	mov	r0, r4
 80086ee:	4b22      	ldr	r3, [pc, #136]	; (8008778 <_ZN5codal13STM32BluePillC1Ev+0x9c>)
 80086f0:	f840 3b08 	str.w	r3, [r0], #8
 80086f4:	f7ff fea4 	bl	8008440 <_ZN5codal3_cm5TimerC1Ev>
 80086f8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80086fc:	f7ff fcc8 	bl	8008090 <_ZN5codal10MessageBusC1Ev>
 8008700:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008704:	f000 f83c 	bl	8008780 <_ZN5codal15STM32BluePillIOC1Ev>
 8008708:	f504 6241 	add.w	r2, r4, #3088	; 0xc10
 800870c:	f504 6143 	add.w	r1, r4, #3120	; 0xc30
 8008710:	f504 607b 	add.w	r0, r4, #4016	; 0xfb0
 8008714:	f000 fdb4 	bl	8009280 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>
 8008718:	f504 6351 	add.w	r3, r4, #3344	; 0xd10
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	f504 6255 	add.w	r2, r4, #3408	; 0xd50
 8008722:	f504 6353 	add.w	r3, r4, #3376	; 0xd30
 8008726:	f504 6157 	add.w	r1, r4, #3440	; 0xd70
 800872a:	f504 607c 	add.w	r0, r4, #4032	; 0xfc0
 800872e:	f000 fde3 	bl	80092f8 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_>
 8008732:	f504 6361 	add.w	r3, r4, #3600	; 0xe10
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	f504 6265 	add.w	r2, r4, #3664	; 0xe50
 800873c:	f504 6363 	add.w	r3, r4, #3632	; 0xe30
 8008740:	f504 6167 	add.w	r1, r4, #3696	; 0xe70
 8008744:	f604 70e8 	addw	r0, r4, #4072	; 0xfe8
 8008748:	f000 fdd6 	bl	80092f8 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_>
 800874c:	2314      	movs	r3, #20
 800874e:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	f504 6229 	add.w	r2, r4, #2704	; 0xa90
 8008758:	f504 6127 	add.w	r1, r4, #2672	; 0xa70
 800875c:	3010      	adds	r0, #16
 800875e:	f7ff fdf7 	bl	8008350 <_ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh>
    debug_println("bluepill construct"); debug_flush(); ////
 8008762:	4806      	ldr	r0, [pc, #24]	; (800877c <_ZN5codal13STM32BluePillC1Ev+0xa0>)
    status = 0;
 8008764:	80e5      	strh	r5, [r4, #6]
    debug_println("bluepill construct"); debug_flush(); ////
 8008766:	f7fa f89b 	bl	80028a0 <debug_println>
 800876a:	f7fa f8b3 	bl	80028d4 <debug_flush>
}
 800876e:	4620      	mov	r0, r4
 8008770:	b003      	add	sp, #12
 8008772:	bd30      	pop	{r4, r5, pc}
 8008774:	0800a380 	.word	0x0800a380
 8008778:	0800a4e4 	.word	0x0800a4e4
 800877c:	0800a85f 	.word	0x0800a85f

08008780 <_ZN5codal15STM32BluePillIOC1Ev>:
  * Create a representation of all given I/O pins on the edge connector
  *
  * Accepts a sequence of unique ID's used to distinguish events raised
  * by MicroBitPin instances on the default EventModel.
  */
STM32BluePillIO::STM32BluePillIO() :
 8008780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
mosi3        (CM_PIN_SPI_MOSI3       , RCC_GPIOB, GPIOB, GPIO5, PIN_CAPABILITY_DIGITAL),
nss3_remap   (CM_PIN_SPI_NSS3_REMAP  , RCC_GPIOA, GPIOA, GPIO4, PIN_CAPABILITY_DIGITAL),
sck3_remap   (CM_PIN_SPI_SCK3_REMAP  , RCC_GPIOC, GPIOC, GPIO10, PIN_CAPABILITY_DIGITAL),
miso3_remap  (CM_PIN_SPI_MISO3_REMAP , RCC_GPIOC, GPIOC, GPIO11, PIN_CAPABILITY_DIGITAL),
mosi3_remap  (CM_PIN_SPI_MOSI3_REMAP , RCC_GPIOC, GPIOC, GPIO12, PIN_CAPABILITY_DIGITAL),
led         (CM_PIN_LED        , RCC_GPIOC, GPIOC, GPIO13, PIN_CAPABILITY_DIGITAL)
 8008784:	2401      	movs	r4, #1
 8008786:	4fdf      	ldr	r7, [pc, #892]	; (8008b04 <_ZN5codal15STM32BluePillIOC1Ev+0x384>)
 8008788:	e9cd 4400 	strd	r4, r4, [sp]
 800878c:	463b      	mov	r3, r7
 800878e:	f240 3202 	movw	r2, #770	; 0x302
 8008792:	2100      	movs	r1, #0
STM32BluePillIO::STM32BluePillIO() :
 8008794:	4605      	mov	r5, r0
led         (CM_PIN_LED        , RCC_GPIOC, GPIOC, GPIO13, PIN_CAPABILITY_DIGITAL)
 8008796:	f7ff fdbb 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800879a:	2302      	movs	r3, #2
 800879c:	4621      	mov	r1, r4
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	9401      	str	r4, [sp, #4]
 80087a2:	463b      	mov	r3, r7
 80087a4:	f240 3202 	movw	r2, #770	; 0x302
 80087a8:	f105 0020 	add.w	r0, r5, #32
 80087ac:	f7ff fdb0 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80087b0:	2304      	movs	r3, #4
 80087b2:	9401      	str	r4, [sp, #4]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	f240 3202 	movw	r2, #770	; 0x302
 80087ba:	463b      	mov	r3, r7
 80087bc:	2102      	movs	r1, #2
 80087be:	f105 0040 	add.w	r0, r5, #64	; 0x40
 80087c2:	f7ff fda5 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80087c6:	2308      	movs	r3, #8
 80087c8:	f04f 0b10 	mov.w	fp, #16
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	9401      	str	r4, [sp, #4]
 80087d0:	463b      	mov	r3, r7
 80087d2:	f240 3202 	movw	r2, #770	; 0x302
 80087d6:	2103      	movs	r1, #3
 80087d8:	f105 0060 	add.w	r0, r5, #96	; 0x60
 80087dc:	f7ff fd98 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80087e0:	463b      	mov	r3, r7
 80087e2:	9401      	str	r4, [sp, #4]
 80087e4:	f8cd b000 	str.w	fp, [sp]
 80087e8:	f240 3202 	movw	r2, #770	; 0x302
 80087ec:	2104      	movs	r1, #4
 80087ee:	f105 0080 	add.w	r0, r5, #128	; 0x80
 80087f2:	f7ff fd8d 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80087f6:	2320      	movs	r3, #32
 80087f8:	f04f 0a40 	mov.w	sl, #64	; 0x40
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	9401      	str	r4, [sp, #4]
 8008800:	463b      	mov	r3, r7
 8008802:	f240 3202 	movw	r2, #770	; 0x302
 8008806:	2105      	movs	r1, #5
 8008808:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 800880c:	f7ff fd80 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008810:	463b      	mov	r3, r7
 8008812:	9401      	str	r4, [sp, #4]
 8008814:	f8cd a000 	str.w	sl, [sp]
 8008818:	f240 3202 	movw	r2, #770	; 0x302
 800881c:	2106      	movs	r1, #6
 800881e:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
 8008822:	f7ff fd75 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008826:	2380      	movs	r3, #128	; 0x80
 8008828:	9401      	str	r4, [sp, #4]
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	f240 3202 	movw	r2, #770	; 0x302
 8008830:	463b      	mov	r3, r7
 8008832:	2107      	movs	r1, #7
 8008834:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
 8008838:	f7ff fd6a 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800883c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008840:	9401      	str	r4, [sp, #4]
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	f240 3202 	movw	r2, #770	; 0x302
 8008848:	463b      	mov	r3, r7
 800884a:	2108      	movs	r1, #8
 800884c:	f505 7080 	add.w	r0, r5, #256	; 0x100
 8008850:	f7ff fd5e 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008858:	9401      	str	r4, [sp, #4]
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	f240 3202 	movw	r2, #770	; 0x302
 8008860:	463b      	mov	r3, r7
 8008862:	2109      	movs	r1, #9
 8008864:	f505 7090 	add.w	r0, r5, #288	; 0x120
 8008868:	f7ff fd52 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800886c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008870:	9401      	str	r4, [sp, #4]
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	f240 3202 	movw	r2, #770	; 0x302
 8008878:	463b      	mov	r3, r7
 800887a:	210a      	movs	r1, #10
 800887c:	f505 70a0 	add.w	r0, r5, #320	; 0x140
 8008880:	f7ff fd46 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008884:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008888:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	9401      	str	r4, [sp, #4]
 8008890:	463b      	mov	r3, r7
 8008892:	f240 3202 	movw	r2, #770	; 0x302
 8008896:	210b      	movs	r1, #11
 8008898:	f505 70b0 	add.w	r0, r5, #352	; 0x160
 800889c:	f7ff fd38 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80088a0:	463b      	mov	r3, r7
 80088a2:	9401      	str	r4, [sp, #4]
 80088a4:	f8cd 9000 	str.w	r9, [sp]
 80088a8:	f240 3202 	movw	r2, #770	; 0x302
 80088ac:	210c      	movs	r1, #12
 80088ae:	f505 70c0 	add.w	r0, r5, #384	; 0x180
 80088b2:	f7ff fd2d 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80088b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ba:	4e93      	ldr	r6, [pc, #588]	; (8008b08 <_ZN5codal15STM32BluePillIOC1Ev+0x388>)
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	9401      	str	r4, [sp, #4]
 80088c0:	463b      	mov	r3, r7
 80088c2:	f240 3202 	movw	r2, #770	; 0x302
 80088c6:	210d      	movs	r1, #13
 80088c8:	f505 70d0 	add.w	r0, r5, #416	; 0x1a0
 80088cc:	f7ff fd20 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80088d0:	4633      	mov	r3, r6
 80088d2:	e9cd 4400 	strd	r4, r4, [sp]
 80088d6:	f240 3203 	movw	r2, #771	; 0x303
 80088da:	210e      	movs	r1, #14
 80088dc:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
 80088e0:	f7ff fd16 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80088e4:	2302      	movs	r3, #2
 80088e6:	9401      	str	r4, [sp, #4]
 80088e8:	9300      	str	r3, [sp, #0]
 80088ea:	f240 3203 	movw	r2, #771	; 0x303
 80088ee:	4633      	mov	r3, r6
 80088f0:	210f      	movs	r1, #15
 80088f2:	f505 70f0 	add.w	r0, r5, #480	; 0x1e0
 80088f6:	f7ff fd0b 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80088fa:	2308      	movs	r3, #8
 80088fc:	4659      	mov	r1, fp
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	9401      	str	r4, [sp, #4]
 8008902:	4633      	mov	r3, r6
 8008904:	f240 3203 	movw	r2, #771	; 0x303
 8008908:	f505 7000 	add.w	r0, r5, #512	; 0x200
 800890c:	f7ff fd00 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008910:	4633      	mov	r3, r6
 8008912:	e9cd b400 	strd	fp, r4, [sp]
 8008916:	f240 3203 	movw	r2, #771	; 0x303
 800891a:	2111      	movs	r1, #17
 800891c:	f505 7008 	add.w	r0, r5, #544	; 0x220
 8008920:	f7ff fcf6 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008924:	2320      	movs	r3, #32
 8008926:	9401      	str	r4, [sp, #4]
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	f240 3203 	movw	r2, #771	; 0x303
 800892e:	4633      	mov	r3, r6
 8008930:	2112      	movs	r1, #18
 8008932:	f505 7010 	add.w	r0, r5, #576	; 0x240
 8008936:	f7ff fceb 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800893a:	4633      	mov	r3, r6
 800893c:	e9cd a400 	strd	sl, r4, [sp]
 8008940:	f240 3203 	movw	r2, #771	; 0x303
 8008944:	2113      	movs	r1, #19
 8008946:	f505 7018 	add.w	r0, r5, #608	; 0x260
 800894a:	f7ff fce1 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800894e:	2380      	movs	r3, #128	; 0x80
 8008950:	9401      	str	r4, [sp, #4]
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	f240 3203 	movw	r2, #771	; 0x303
 8008958:	4633      	mov	r3, r6
 800895a:	2114      	movs	r1, #20
 800895c:	f505 7020 	add.w	r0, r5, #640	; 0x280
 8008960:	f7ff fcd6 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008968:	9401      	str	r4, [sp, #4]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	f240 3203 	movw	r2, #771	; 0x303
 8008970:	4633      	mov	r3, r6
 8008972:	2115      	movs	r1, #21
 8008974:	f505 7028 	add.w	r0, r5, #672	; 0x2a0
 8008978:	f7ff fcca 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800897c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008980:	9401      	str	r4, [sp, #4]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	f240 3203 	movw	r2, #771	; 0x303
 8008988:	4633      	mov	r3, r6
 800898a:	2116      	movs	r1, #22
 800898c:	f505 7030 	add.w	r0, r5, #704	; 0x2c0
 8008990:	f7ff fcbe 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008998:	9401      	str	r4, [sp, #4]
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	f240 3203 	movw	r2, #771	; 0x303
 80089a0:	4633      	mov	r3, r6
 80089a2:	2117      	movs	r1, #23
 80089a4:	f505 7038 	add.w	r0, r5, #736	; 0x2e0
 80089a8:	f7ff fcb2 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80089ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089b0:	9401      	str	r4, [sp, #4]
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	f240 3203 	movw	r2, #771	; 0x303
 80089b8:	4633      	mov	r3, r6
 80089ba:	2118      	movs	r1, #24
 80089bc:	f505 7040 	add.w	r0, r5, #768	; 0x300
 80089c0:	f7ff fca6 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80089c4:	4633      	mov	r3, r6
 80089c6:	e9cd 9400 	strd	r9, r4, [sp]
 80089ca:	f240 3203 	movw	r2, #771	; 0x303
 80089ce:	2119      	movs	r1, #25
 80089d0:	f505 7048 	add.w	r0, r5, #800	; 0x320
 80089d4:	f7ff fc9c 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80089d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80089dc:	9401      	str	r4, [sp, #4]
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	f240 3203 	movw	r2, #771	; 0x303
 80089e4:	4633      	mov	r3, r6
 80089e6:	211a      	movs	r1, #26
 80089e8:	f505 7050 	add.w	r0, r5, #832	; 0x340
 80089ec:	f7ff fc90 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80089f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80089f4:	9401      	str	r4, [sp, #4]
 80089f6:	9300      	str	r3, [sp, #0]
 80089f8:	f240 3203 	movw	r2, #771	; 0x303
 80089fc:	4633      	mov	r3, r6
 80089fe:	211b      	movs	r1, #27
 8008a00:	f505 7058 	add.w	r0, r5, #864	; 0x360
 8008a04:	f7ff fc84 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a0c:	9401      	str	r4, [sp, #4]
 8008a0e:	9300      	str	r3, [sp, #0]
 8008a10:	f240 3203 	movw	r2, #771	; 0x303
 8008a14:	4633      	mov	r3, r6
 8008a16:	211c      	movs	r1, #28
 8008a18:	f505 7060 	add.w	r0, r5, #896	; 0x380
 8008a1c:	f7ff fc78 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a24:	9401      	str	r4, [sp, #4]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008a2c:	4433      	add	r3, r6
 8008a2e:	211d      	movs	r1, #29
 8008a30:	f505 7068 	add.w	r0, r5, #928	; 0x3a0
 8008a34:	f7ff fc6c 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a3c:	9401      	str	r4, [sp, #4]
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008a44:	443b      	add	r3, r7
 8008a46:	211e      	movs	r1, #30
 8008a48:	f505 7070 	add.w	r0, r5, #960	; 0x3c0
 8008a4c:	f7ff fc60 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a50:	e9cd 9400 	strd	r9, r4, [sp]
 8008a54:	4b2d      	ldr	r3, [pc, #180]	; (8008b0c <_ZN5codal15STM32BluePillIOC1Ev+0x38c>)
 8008a56:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008a5a:	211f      	movs	r1, #31
 8008a5c:	f505 7078 	add.w	r0, r5, #992	; 0x3e0
 8008a60:	f7ff fc56 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a64:	2304      	movs	r3, #4
 8008a66:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8008b10 <_ZN5codal15STM32BluePillIOC1Ev+0x390>
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	9401      	str	r4, [sp, #4]
 8008a6e:	4643      	mov	r3, r8
 8008a70:	f240 3205 	movw	r2, #773	; 0x305
 8008a74:	2120      	movs	r1, #32
 8008a76:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8008a7a:	f7ff fc49 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a7e:	2308      	movs	r3, #8
 8008a80:	9401      	str	r4, [sp, #4]
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	f240 3205 	movw	r2, #773	; 0x305
 8008a88:	4643      	mov	r3, r8
 8008a8a:	2121      	movs	r1, #33	; 0x21
 8008a8c:	f505 6084 	add.w	r0, r5, #1056	; 0x420
 8008a90:	f7ff fc3e 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a94:	4643      	mov	r3, r8
 8008a96:	e9cd b400 	strd	fp, r4, [sp]
 8008a9a:	f240 3205 	movw	r2, #773	; 0x305
 8008a9e:	2122      	movs	r1, #34	; 0x22
 8008aa0:	f505 6088 	add.w	r0, r5, #1088	; 0x440
 8008aa4:	f7ff fc34 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008aa8:	2320      	movs	r3, #32
 8008aaa:	9401      	str	r4, [sp, #4]
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	f240 3205 	movw	r2, #773	; 0x305
 8008ab2:	4643      	mov	r3, r8
 8008ab4:	2123      	movs	r1, #35	; 0x23
 8008ab6:	f505 608c 	add.w	r0, r5, #1120	; 0x460
 8008aba:	f7ff fc29 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008abe:	4643      	mov	r3, r8
 8008ac0:	e9cd a400 	strd	sl, r4, [sp]
 8008ac4:	f240 3205 	movw	r2, #773	; 0x305
 8008ac8:	2124      	movs	r1, #36	; 0x24
 8008aca:	f505 6090 	add.w	r0, r5, #1152	; 0x480
 8008ace:	f7ff fc1f 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ad2:	2380      	movs	r3, #128	; 0x80
 8008ad4:	9401      	str	r4, [sp, #4]
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	f240 3205 	movw	r2, #773	; 0x305
 8008adc:	4643      	mov	r3, r8
 8008ade:	2125      	movs	r1, #37	; 0x25
 8008ae0:	f505 6094 	add.w	r0, r5, #1184	; 0x4a0
 8008ae4:	f7ff fc14 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ae8:	4643      	mov	r3, r8
 8008aea:	e9cd 9400 	strd	r9, r4, [sp]
 8008aee:	f240 3205 	movw	r2, #773	; 0x305
 8008af2:	2126      	movs	r1, #38	; 0x26
 8008af4:	f505 6098 	add.w	r0, r5, #1216	; 0x4c0
 8008af8:	f7ff fc0a 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b00:	9401      	str	r4, [sp, #4]
 8008b02:	e007      	b.n	8008b14 <_ZN5codal15STM32BluePillIOC1Ev+0x394>
 8008b04:	40010800 	.word	0x40010800
 8008b08:	40010c00 	.word	0x40010c00
 8008b0c:	40011000 	.word	0x40011000
 8008b10:	40011400 	.word	0x40011400
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	f240 3205 	movw	r2, #773	; 0x305
 8008b1a:	4643      	mov	r3, r8
 8008b1c:	2127      	movs	r1, #39	; 0x27
 8008b1e:	f505 609c 	add.w	r0, r5, #1248	; 0x4e0
 8008b22:	f7ff fbf5 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008b2a:	9401      	str	r4, [sp, #4]
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	f240 3205 	movw	r2, #773	; 0x305
 8008b32:	4643      	mov	r3, r8
 8008b34:	2128      	movs	r1, #40	; 0x28
 8008b36:	f505 60a0 	add.w	r0, r5, #1280	; 0x500
 8008b3a:	f7ff fbe9 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b42:	9401      	str	r4, [sp, #4]
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	f240 3205 	movw	r2, #773	; 0x305
 8008b4a:	4643      	mov	r3, r8
 8008b4c:	2129      	movs	r1, #41	; 0x29
 8008b4e:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 8008b52:	f7ff fbdd 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b56:	463b      	mov	r3, r7
 8008b58:	e9cd 4400 	strd	r4, r4, [sp]
 8008b5c:	f240 3202 	movw	r2, #770	; 0x302
 8008b60:	212a      	movs	r1, #42	; 0x2a
 8008b62:	f505 60a8 	add.w	r0, r5, #1344	; 0x540
 8008b66:	f7ff fbd3 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b6a:	2302      	movs	r3, #2
 8008b6c:	9401      	str	r4, [sp, #4]
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	f240 3202 	movw	r2, #770	; 0x302
 8008b74:	463b      	mov	r3, r7
 8008b76:	212b      	movs	r1, #43	; 0x2b
 8008b78:	f505 60ac 	add.w	r0, r5, #1376	; 0x560
 8008b7c:	f7ff fbc8 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b80:	2304      	movs	r3, #4
 8008b82:	9401      	str	r4, [sp, #4]
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	f240 3202 	movw	r2, #770	; 0x302
 8008b8a:	463b      	mov	r3, r7
 8008b8c:	212c      	movs	r1, #44	; 0x2c
 8008b8e:	f505 60b0 	add.w	r0, r5, #1408	; 0x580
 8008b92:	f7ff fbbd 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b96:	2308      	movs	r3, #8
 8008b98:	9401      	str	r4, [sp, #4]
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	f240 3202 	movw	r2, #770	; 0x302
 8008ba0:	463b      	mov	r3, r7
 8008ba2:	212d      	movs	r1, #45	; 0x2d
 8008ba4:	f505 60b4 	add.w	r0, r5, #1440	; 0x5a0
 8008ba8:	f7ff fbb2 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008bac:	4633      	mov	r3, r6
 8008bae:	e9cd a400 	strd	sl, r4, [sp]
 8008bb2:	f240 3203 	movw	r2, #771	; 0x303
 8008bb6:	212e      	movs	r1, #46	; 0x2e
 8008bb8:	f505 60b8 	add.w	r0, r5, #1472	; 0x5c0
 8008bbc:	f7ff fba8 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008bc0:	2380      	movs	r3, #128	; 0x80
 8008bc2:	9401      	str	r4, [sp, #4]
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	f240 3203 	movw	r2, #771	; 0x303
 8008bca:	4633      	mov	r3, r6
 8008bcc:	212f      	movs	r1, #47	; 0x2f
 8008bce:	f505 60bc 	add.w	r0, r5, #1504	; 0x5e0
 8008bd2:	f7ff fb9d 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008bd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bda:	9401      	str	r4, [sp, #4]
 8008bdc:	9300      	str	r3, [sp, #0]
 8008bde:	f240 3203 	movw	r2, #771	; 0x303
 8008be2:	4633      	mov	r3, r6
 8008be4:	2130      	movs	r1, #48	; 0x30
 8008be6:	f505 60c0 	add.w	r0, r5, #1536	; 0x600
 8008bea:	f7ff fb91 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bf2:	9401      	str	r4, [sp, #4]
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	f240 3203 	movw	r2, #771	; 0x303
 8008bfa:	4633      	mov	r3, r6
 8008bfc:	2131      	movs	r1, #49	; 0x31
 8008bfe:	f505 60c4 	add.w	r0, r5, #1568	; 0x620
 8008c02:	f7ff fb85 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c06:	4643      	mov	r3, r8
 8008c08:	e9cd 9400 	strd	r9, r4, [sp]
 8008c0c:	f240 3205 	movw	r2, #773	; 0x305
 8008c10:	2132      	movs	r1, #50	; 0x32
 8008c12:	f505 60c8 	add.w	r0, r5, #1600	; 0x640
 8008c16:	f7ff fb7b 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c1e:	9401      	str	r4, [sp, #4]
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	f240 3205 	movw	r2, #773	; 0x305
 8008c26:	4643      	mov	r3, r8
 8008c28:	2133      	movs	r1, #51	; 0x33
 8008c2a:	f505 60cc 	add.w	r0, r5, #1632	; 0x660
 8008c2e:	f7ff fb6f 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008c36:	9401      	str	r4, [sp, #4]
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	f240 3205 	movw	r2, #773	; 0x305
 8008c3e:	4643      	mov	r3, r8
 8008c40:	2134      	movs	r1, #52	; 0x34
 8008c42:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
 8008c46:	f7ff fb63 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c4e:	9401      	str	r4, [sp, #4]
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	f240 3205 	movw	r2, #773	; 0x305
 8008c56:	4643      	mov	r3, r8
 8008c58:	2135      	movs	r1, #53	; 0x35
 8008c5a:	f505 60d4 	add.w	r0, r5, #1696	; 0x6a0
 8008c5e:	f7ff fb57 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c62:	463b      	mov	r3, r7
 8008c64:	e9cd a400 	strd	sl, r4, [sp]
 8008c68:	f240 3202 	movw	r2, #770	; 0x302
 8008c6c:	2136      	movs	r1, #54	; 0x36
 8008c6e:	f505 60d8 	add.w	r0, r5, #1728	; 0x6c0
 8008c72:	f7ff fb4d 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c76:	2380      	movs	r3, #128	; 0x80
 8008c78:	9401      	str	r4, [sp, #4]
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	f240 3202 	movw	r2, #770	; 0x302
 8008c80:	463b      	mov	r3, r7
 8008c82:	2137      	movs	r1, #55	; 0x37
 8008c84:	f505 60dc 	add.w	r0, r5, #1760	; 0x6e0
 8008c88:	f7ff fb42 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c8c:	4633      	mov	r3, r6
 8008c8e:	e9cd 4400 	strd	r4, r4, [sp]
 8008c92:	f240 3203 	movw	r2, #771	; 0x303
 8008c96:	2138      	movs	r1, #56	; 0x38
 8008c98:	f505 60e0 	add.w	r0, r5, #1792	; 0x700
 8008c9c:	f7ff fb38 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	9401      	str	r4, [sp, #4]
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	f240 3203 	movw	r2, #771	; 0x303
 8008caa:	4633      	mov	r3, r6
 8008cac:	2139      	movs	r1, #57	; 0x39
 8008cae:	f505 60e4 	add.w	r0, r5, #1824	; 0x720
 8008cb2:	f7ff fb2d 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	9401      	str	r4, [sp, #4]
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	f240 3202 	movw	r2, #770	; 0x302
 8008cc0:	463b      	mov	r3, r7
 8008cc2:	213a      	movs	r1, #58	; 0x3a
 8008cc4:	f505 60e8 	add.w	r0, r5, #1856	; 0x740
 8008cc8:	f7ff fb22 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ccc:	2304      	movs	r3, #4
 8008cce:	9401      	str	r4, [sp, #4]
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	f240 3202 	movw	r2, #770	; 0x302
 8008cd6:	463b      	mov	r3, r7
 8008cd8:	213b      	movs	r1, #59	; 0x3b
 8008cda:	f505 60ec 	add.w	r0, r5, #1888	; 0x760
 8008cde:	f7ff fb17 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ce2:	2308      	movs	r3, #8
 8008ce4:	9401      	str	r4, [sp, #4]
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	f240 3202 	movw	r2, #770	; 0x302
 8008cec:	463b      	mov	r3, r7
 8008cee:	213c      	movs	r1, #60	; 0x3c
 8008cf0:	f505 60f0 	add.w	r0, r5, #1920	; 0x780
 8008cf4:	f7ff fb0c 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	e9cd 9400 	strd	r9, r4, [sp]
 8008cfe:	f240 3202 	movw	r2, #770	; 0x302
 8008d02:	213d      	movs	r1, #61	; 0x3d
 8008d04:	f505 60f4 	add.w	r0, r5, #1952	; 0x7a0
 8008d08:	f7ff fb02 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d10:	9401      	str	r4, [sp, #4]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	f240 3202 	movw	r2, #770	; 0x302
 8008d18:	463b      	mov	r3, r7
 8008d1a:	213e      	movs	r1, #62	; 0x3e
 8008d1c:	f505 60f8 	add.w	r0, r5, #1984	; 0x7c0
 8008d20:	f7ff faf6 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d28:	9401      	str	r4, [sp, #4]
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	f240 3202 	movw	r2, #770	; 0x302
 8008d30:	463b      	mov	r3, r7
 8008d32:	213f      	movs	r1, #63	; 0x3f
 8008d34:	f505 60fc 	add.w	r0, r5, #2016	; 0x7e0
 8008d38:	f7ff faea 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d40:	4651      	mov	r1, sl
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	9401      	str	r4, [sp, #4]
 8008d46:	463b      	mov	r3, r7
 8008d48:	f240 3202 	movw	r2, #770	; 0x302
 8008d4c:	f505 6000 	add.w	r0, r5, #2048	; 0x800
 8008d50:	f7ff fade 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d58:	9401      	str	r4, [sp, #4]
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	f240 3202 	movw	r2, #770	; 0x302
 8008d60:	463b      	mov	r3, r7
 8008d62:	2141      	movs	r1, #65	; 0x41
 8008d64:	f505 6002 	add.w	r0, r5, #2080	; 0x820
 8008d68:	f7ff fad2 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d6c:	4633      	mov	r3, r6
 8008d6e:	e9cd 9400 	strd	r9, r4, [sp]
 8008d72:	f240 3203 	movw	r2, #771	; 0x303
 8008d76:	2142      	movs	r1, #66	; 0x42
 8008d78:	f505 6004 	add.w	r0, r5, #2112	; 0x840
 8008d7c:	f7ff fac8 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d84:	9401      	str	r4, [sp, #4]
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	f240 3203 	movw	r2, #771	; 0x303
 8008d8c:	4633      	mov	r3, r6
 8008d8e:	2143      	movs	r1, #67	; 0x43
 8008d90:	f505 6006 	add.w	r0, r5, #2144	; 0x860
 8008d94:	f7ff fabc 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d9c:	9401      	str	r4, [sp, #4]
 8008d9e:	9300      	str	r3, [sp, #0]
 8008da0:	f240 3203 	movw	r2, #771	; 0x303
 8008da4:	4633      	mov	r3, r6
 8008da6:	2144      	movs	r1, #68	; 0x44
 8008da8:	f505 6008 	add.w	r0, r5, #2176	; 0x880
 8008dac:	f7ff fab0 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008db0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008db4:	9401      	str	r4, [sp, #4]
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	f240 3203 	movw	r2, #771	; 0x303
 8008dbc:	4633      	mov	r3, r6
 8008dbe:	2145      	movs	r1, #69	; 0x45
 8008dc0:	f505 600a 	add.w	r0, r5, #2208	; 0x8a0
 8008dc4:	f7ff faa4 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008dc8:	e9cd 9400 	strd	r9, r4, [sp]
 8008dcc:	4be1      	ldr	r3, [pc, #900]	; (8009154 <_ZN5codal15STM32BluePillIOC1Ev+0x9d4>)
 8008dce:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008dd2:	2146      	movs	r1, #70	; 0x46
 8008dd4:	f505 600c 	add.w	r0, r5, #2240	; 0x8c0
 8008dd8:	f7ff fa9a 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ddc:	2304      	movs	r3, #4
 8008dde:	9401      	str	r4, [sp, #4]
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	f240 3205 	movw	r2, #773	; 0x305
 8008de6:	4643      	mov	r3, r8
 8008de8:	2147      	movs	r1, #71	; 0x47
 8008dea:	f505 600e 	add.w	r0, r5, #2272	; 0x8e0
 8008dee:	f7ff fa8f 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008df2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008df6:	9401      	str	r4, [sp, #4]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008dfe:	4433      	add	r3, r6
 8008e00:	2148      	movs	r1, #72	; 0x48
 8008e02:	f505 6010 	add.w	r0, r5, #2304	; 0x900
 8008e06:	f7ff fa83 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e0e:	9401      	str	r4, [sp, #4]
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008e16:	443b      	add	r3, r7
 8008e18:	2149      	movs	r1, #73	; 0x49
 8008e1a:	f505 6012 	add.w	r0, r5, #2336	; 0x920
 8008e1e:	f7ff fa77 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e26:	9401      	str	r4, [sp, #4]
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	f240 3203 	movw	r2, #771	; 0x303
 8008e2e:	4633      	mov	r3, r6
 8008e30:	214a      	movs	r1, #74	; 0x4a
 8008e32:	f505 6014 	add.w	r0, r5, #2368	; 0x940
 8008e36:	f7ff fa6b 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e3e:	9401      	str	r4, [sp, #4]
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	f240 3203 	movw	r2, #771	; 0x303
 8008e46:	4633      	mov	r3, r6
 8008e48:	214b      	movs	r1, #75	; 0x4b
 8008e4a:	f505 6016 	add.w	r0, r5, #2400	; 0x960
 8008e4e:	f7ff fa5f 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e52:	4633      	mov	r3, r6
 8008e54:	e9cd 9400 	strd	r9, r4, [sp]
 8008e58:	f240 3203 	movw	r2, #771	; 0x303
 8008e5c:	214c      	movs	r1, #76	; 0x4c
 8008e5e:	f505 6018 	add.w	r0, r5, #2432	; 0x980
 8008e62:	f7ff fa55 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e6a:	9401      	str	r4, [sp, #4]
 8008e6c:	9300      	str	r3, [sp, #0]
 8008e6e:	f240 3203 	movw	r2, #771	; 0x303
 8008e72:	4633      	mov	r3, r6
 8008e74:	214d      	movs	r1, #77	; 0x4d
 8008e76:	f505 601a 	add.w	r0, r5, #2464	; 0x9a0
 8008e7a:	f7ff fa49 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e82:	9401      	str	r4, [sp, #4]
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	f240 3203 	movw	r2, #771	; 0x303
 8008e8a:	4633      	mov	r3, r6
 8008e8c:	214e      	movs	r1, #78	; 0x4e
 8008e8e:	f505 601c 	add.w	r0, r5, #2496	; 0x9c0
 8008e92:	f7ff fa3d 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e96:	463b      	mov	r3, r7
 8008e98:	e9cd 4400 	strd	r4, r4, [sp]
 8008e9c:	f240 3202 	movw	r2, #770	; 0x302
 8008ea0:	214f      	movs	r1, #79	; 0x4f
 8008ea2:	f505 601e 	add.w	r0, r5, #2528	; 0x9e0
 8008ea6:	f7ff fa33 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008eaa:	2302      	movs	r3, #2
 8008eac:	9401      	str	r4, [sp, #4]
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	f240 3202 	movw	r2, #770	; 0x302
 8008eb4:	463b      	mov	r3, r7
 8008eb6:	2150      	movs	r1, #80	; 0x50
 8008eb8:	f505 6020 	add.w	r0, r5, #2560	; 0xa00
 8008ebc:	f7ff fa28 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	9401      	str	r4, [sp, #4]
 8008ec4:	9300      	str	r3, [sp, #0]
 8008ec6:	f240 3202 	movw	r2, #770	; 0x302
 8008eca:	463b      	mov	r3, r7
 8008ecc:	2151      	movs	r1, #81	; 0x51
 8008ece:	f505 6022 	add.w	r0, r5, #2592	; 0xa20
 8008ed2:	f7ff fa1d 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ed6:	2308      	movs	r3, #8
 8008ed8:	9401      	str	r4, [sp, #4]
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	f240 3202 	movw	r2, #770	; 0x302
 8008ee0:	463b      	mov	r3, r7
 8008ee2:	2152      	movs	r1, #82	; 0x52
 8008ee4:	f505 6024 	add.w	r0, r5, #2624	; 0xa40
 8008ee8:	f7ff fa12 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008eec:	463b      	mov	r3, r7
 8008eee:	e9cd b400 	strd	fp, r4, [sp]
 8008ef2:	f240 3202 	movw	r2, #770	; 0x302
 8008ef6:	2153      	movs	r1, #83	; 0x53
 8008ef8:	f505 6026 	add.w	r0, r5, #2656	; 0xa60
 8008efc:	f7ff fa08 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f00:	2308      	movs	r3, #8
 8008f02:	9401      	str	r4, [sp, #4]
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	f240 3205 	movw	r2, #773	; 0x305
 8008f0a:	4643      	mov	r3, r8
 8008f0c:	2154      	movs	r1, #84	; 0x54
 8008f0e:	f505 6028 	add.w	r0, r5, #2688	; 0xa80
 8008f12:	f7ff f9fd 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f16:	4643      	mov	r3, r8
 8008f18:	e9cd b400 	strd	fp, r4, [sp]
 8008f1c:	f240 3205 	movw	r2, #773	; 0x305
 8008f20:	2155      	movs	r1, #85	; 0x55
 8008f22:	f505 602a 	add.w	r0, r5, #2720	; 0xaa0
 8008f26:	f7ff f9f3 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f2a:	2320      	movs	r3, #32
 8008f2c:	9401      	str	r4, [sp, #4]
 8008f2e:	9300      	str	r3, [sp, #0]
 8008f30:	f240 3205 	movw	r2, #773	; 0x305
 8008f34:	4643      	mov	r3, r8
 8008f36:	2156      	movs	r1, #86	; 0x56
 8008f38:	f505 602c 	add.w	r0, r5, #2752	; 0xac0
 8008f3c:	f7ff f9e8 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f40:	4643      	mov	r3, r8
 8008f42:	e9cd a400 	strd	sl, r4, [sp]
 8008f46:	f240 3205 	movw	r2, #773	; 0x305
 8008f4a:	2157      	movs	r1, #87	; 0x57
 8008f4c:	f505 602e 	add.w	r0, r5, #2784	; 0xae0
 8008f50:	f7ff f9de 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f54:	2380      	movs	r3, #128	; 0x80
 8008f56:	9401      	str	r4, [sp, #4]
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	f240 3205 	movw	r2, #773	; 0x305
 8008f5e:	4643      	mov	r3, r8
 8008f60:	2158      	movs	r1, #88	; 0x58
 8008f62:	f505 6030 	add.w	r0, r5, #2816	; 0xb00
 8008f66:	f7ff f9d3 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f6e:	9401      	str	r4, [sp, #4]
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	f240 3202 	movw	r2, #770	; 0x302
 8008f76:	463b      	mov	r3, r7
 8008f78:	2159      	movs	r1, #89	; 0x59
 8008f7a:	f505 6032 	add.w	r0, r5, #2848	; 0xb20
 8008f7e:	f7ff f9c7 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f86:	9401      	str	r4, [sp, #4]
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	f240 3202 	movw	r2, #770	; 0x302
 8008f8e:	463b      	mov	r3, r7
 8008f90:	215a      	movs	r1, #90	; 0x5a
 8008f92:	f505 6034 	add.w	r0, r5, #2880	; 0xb40
 8008f96:	f7ff f9bb 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f9a:	4633      	mov	r3, r6
 8008f9c:	e9cd a400 	strd	sl, r4, [sp]
 8008fa0:	f240 3203 	movw	r2, #771	; 0x303
 8008fa4:	215b      	movs	r1, #91	; 0x5b
 8008fa6:	f505 6036 	add.w	r0, r5, #2912	; 0xb60
 8008faa:	f7ff f9b1 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008fae:	2380      	movs	r3, #128	; 0x80
 8008fb0:	9401      	str	r4, [sp, #4]
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	f240 3203 	movw	r2, #771	; 0x303
 8008fb8:	4633      	mov	r3, r6
 8008fba:	215c      	movs	r1, #92	; 0x5c
 8008fbc:	f505 6038 	add.w	r0, r5, #2944	; 0xb80
 8008fc0:	f7ff f9a6 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008fc4:	2320      	movs	r3, #32
 8008fc6:	9401      	str	r4, [sp, #4]
 8008fc8:	9300      	str	r3, [sp, #0]
 8008fca:	f240 3203 	movw	r2, #771	; 0x303
 8008fce:	4633      	mov	r3, r6
 8008fd0:	215d      	movs	r1, #93	; 0x5d
 8008fd2:	f505 603a 	add.w	r0, r5, #2976	; 0xba0
 8008fd6:	f7ff f99b 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008fda:	4633      	mov	r3, r6
 8008fdc:	e9cd a400 	strd	sl, r4, [sp]
 8008fe0:	f240 3203 	movw	r2, #771	; 0x303
 8008fe4:	215e      	movs	r1, #94	; 0x5e
 8008fe6:	f505 603c 	add.w	r0, r5, #3008	; 0xbc0
 8008fea:	f7ff f991 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008fee:	2380      	movs	r3, #128	; 0x80
 8008ff0:	9401      	str	r4, [sp, #4]
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	f240 3203 	movw	r2, #771	; 0x303
 8008ff8:	4633      	mov	r3, r6
 8008ffa:	215f      	movs	r1, #95	; 0x5f
 8008ffc:	f505 603e 	add.w	r0, r5, #3040	; 0xbe0
 8009000:	f7ff f986 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009004:	2320      	movs	r3, #32
 8009006:	9401      	str	r4, [sp, #4]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	f240 3203 	movw	r2, #771	; 0x303
 800900e:	4633      	mov	r3, r6
 8009010:	2160      	movs	r1, #96	; 0x60
 8009012:	f505 6040 	add.w	r0, r5, #3072	; 0xc00
 8009016:	f7ff f97b 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800901a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800901e:	9401      	str	r4, [sp, #4]
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	f240 3203 	movw	r2, #771	; 0x303
 8009026:	4633      	mov	r3, r6
 8009028:	2161      	movs	r1, #97	; 0x61
 800902a:	f505 6042 	add.w	r0, r5, #3104	; 0xc20
 800902e:	f7ff f96f 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009036:	9401      	str	r4, [sp, #4]
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	f240 3203 	movw	r2, #771	; 0x303
 800903e:	4633      	mov	r3, r6
 8009040:	2162      	movs	r1, #98	; 0x62
 8009042:	f505 6044 	add.w	r0, r5, #3136	; 0xc40
 8009046:	f7ff f963 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800904a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800904e:	9401      	str	r4, [sp, #4]
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	f240 3203 	movw	r2, #771	; 0x303
 8009056:	4633      	mov	r3, r6
 8009058:	2163      	movs	r1, #99	; 0x63
 800905a:	f505 6046 	add.w	r0, r5, #3168	; 0xc60
 800905e:	f7ff f957 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009062:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009066:	9401      	str	r4, [sp, #4]
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	f240 3203 	movw	r2, #771	; 0x303
 800906e:	4633      	mov	r3, r6
 8009070:	2164      	movs	r1, #100	; 0x64
 8009072:	f505 6048 	add.w	r0, r5, #3200	; 0xc80
 8009076:	f7ff f94b 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800907a:	4633      	mov	r3, r6
 800907c:	e9cd 9400 	strd	r9, r4, [sp]
 8009080:	f240 3203 	movw	r2, #771	; 0x303
 8009084:	2165      	movs	r1, #101	; 0x65
 8009086:	f505 604a 	add.w	r0, r5, #3232	; 0xca0
 800908a:	f7ff f941 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800908e:	463b      	mov	r3, r7
 8009090:	e9cd b400 	strd	fp, r4, [sp]
 8009094:	f240 3202 	movw	r2, #770	; 0x302
 8009098:	2166      	movs	r1, #102	; 0x66
 800909a:	f505 604c 	add.w	r0, r5, #3264	; 0xcc0
 800909e:	f7ff f937 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80090a2:	2320      	movs	r3, #32
 80090a4:	9401      	str	r4, [sp, #4]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	f240 3202 	movw	r2, #770	; 0x302
 80090ac:	463b      	mov	r3, r7
 80090ae:	2167      	movs	r1, #103	; 0x67
 80090b0:	f505 604e 	add.w	r0, r5, #3296	; 0xce0
 80090b4:	f7ff f92c 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80090b8:	463b      	mov	r3, r7
 80090ba:	e9cd a400 	strd	sl, r4, [sp]
 80090be:	f240 3202 	movw	r2, #770	; 0x302
 80090c2:	2168      	movs	r1, #104	; 0x68
 80090c4:	f505 6050 	add.w	r0, r5, #3328	; 0xd00
 80090c8:	f7ff f922 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80090cc:	2380      	movs	r3, #128	; 0x80
 80090ce:	9401      	str	r4, [sp, #4]
 80090d0:	9300      	str	r3, [sp, #0]
 80090d2:	f240 3202 	movw	r2, #770	; 0x302
 80090d6:	463b      	mov	r3, r7
 80090d8:	2169      	movs	r1, #105	; 0x69
 80090da:	f505 6052 	add.w	r0, r5, #3360	; 0xd20
 80090de:	f7ff f917 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80090e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090e6:	9401      	str	r4, [sp, #4]
 80090e8:	9300      	str	r3, [sp, #0]
 80090ea:	f240 3202 	movw	r2, #770	; 0x302
 80090ee:	463b      	mov	r3, r7
 80090f0:	216a      	movs	r1, #106	; 0x6a
 80090f2:	f505 6054 	add.w	r0, r5, #3392	; 0xd40
 80090f6:	f7ff f90b 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80090fa:	2308      	movs	r3, #8
 80090fc:	9401      	str	r4, [sp, #4]
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	f240 3203 	movw	r2, #771	; 0x303
 8009104:	4633      	mov	r3, r6
 8009106:	216b      	movs	r1, #107	; 0x6b
 8009108:	f505 6056 	add.w	r0, r5, #3424	; 0xd60
 800910c:	f7ff f900 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009110:	4633      	mov	r3, r6
 8009112:	e9cd b400 	strd	fp, r4, [sp]
 8009116:	f240 3203 	movw	r2, #771	; 0x303
 800911a:	216c      	movs	r1, #108	; 0x6c
 800911c:	f505 6058 	add.w	r0, r5, #3456	; 0xd80
 8009120:	f7ff f8f6 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009124:	2320      	movs	r3, #32
 8009126:	f44f 5800 	mov.w	r8, #8192	; 0x2000
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	9401      	str	r4, [sp, #4]
 800912e:	4633      	mov	r3, r6
 8009130:	f240 3203 	movw	r2, #771	; 0x303
 8009134:	216d      	movs	r1, #109	; 0x6d
 8009136:	f505 605a 	add.w	r0, r5, #3488	; 0xda0
 800913a:	f7ff f8e9 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800913e:	4633      	mov	r3, r6
 8009140:	e9cd 9400 	strd	r9, r4, [sp]
 8009144:	f240 3203 	movw	r2, #771	; 0x303
 8009148:	216e      	movs	r1, #110	; 0x6e
 800914a:	f505 605c 	add.w	r0, r5, #3520	; 0xdc0
 800914e:	f7ff f8df 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009152:	e001      	b.n	8009158 <_ZN5codal15STM32BluePillIOC1Ev+0x9d8>
 8009154:	40011000 	.word	0x40011000
 8009158:	4633      	mov	r3, r6
 800915a:	9401      	str	r4, [sp, #4]
 800915c:	f8cd 8000 	str.w	r8, [sp]
 8009160:	f240 3203 	movw	r2, #771	; 0x303
 8009164:	216f      	movs	r1, #111	; 0x6f
 8009166:	f505 605e 	add.w	r0, r5, #3552	; 0xde0
 800916a:	f7ff f8d1 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800916e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009172:	9401      	str	r4, [sp, #4]
 8009174:	9300      	str	r3, [sp, #0]
 8009176:	f240 3203 	movw	r2, #771	; 0x303
 800917a:	4633      	mov	r3, r6
 800917c:	2170      	movs	r1, #112	; 0x70
 800917e:	f505 6060 	add.w	r0, r5, #3584	; 0xe00
 8009182:	f7ff f8c5 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800918a:	9401      	str	r4, [sp, #4]
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	f240 3203 	movw	r2, #771	; 0x303
 8009192:	4633      	mov	r3, r6
 8009194:	2171      	movs	r1, #113	; 0x71
 8009196:	f505 6062 	add.w	r0, r5, #3616	; 0xe20
 800919a:	f7ff f8b9 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800919e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091a2:	9401      	str	r4, [sp, #4]
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	f240 3202 	movw	r2, #770	; 0x302
 80091aa:	463b      	mov	r3, r7
 80091ac:	2172      	movs	r1, #114	; 0x72
 80091ae:	f505 6064 	add.w	r0, r5, #3648	; 0xe40
 80091b2:	f7ff f8ad 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80091b6:	2308      	movs	r3, #8
 80091b8:	9401      	str	r4, [sp, #4]
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	f240 3203 	movw	r2, #771	; 0x303
 80091c0:	4633      	mov	r3, r6
 80091c2:	2173      	movs	r1, #115	; 0x73
 80091c4:	f505 6066 	add.w	r0, r5, #3680	; 0xe60
 80091c8:	f7ff f8a2 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80091cc:	4633      	mov	r3, r6
 80091ce:	e9cd b400 	strd	fp, r4, [sp]
 80091d2:	f240 3203 	movw	r2, #771	; 0x303
 80091d6:	2174      	movs	r1, #116	; 0x74
 80091d8:	f505 6068 	add.w	r0, r5, #3712	; 0xe80
 80091dc:	f7ff f898 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80091e0:	2320      	movs	r3, #32
 80091e2:	9401      	str	r4, [sp, #4]
 80091e4:	9300      	str	r3, [sp, #0]
 80091e6:	f240 3203 	movw	r2, #771	; 0x303
 80091ea:	4633      	mov	r3, r6
 80091ec:	2175      	movs	r1, #117	; 0x75
 80091ee:	f505 606a 	add.w	r0, r5, #3744	; 0xea0
 80091f2:	f7ff f88d 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80091f6:	463b      	mov	r3, r7
 80091f8:	e9cd b400 	strd	fp, r4, [sp]
 80091fc:	f240 3202 	movw	r2, #770	; 0x302
 8009200:	2176      	movs	r1, #118	; 0x76
 8009202:	f505 606c 	add.w	r0, r5, #3776	; 0xec0
 8009206:	f7ff f883 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800920a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800920e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	9401      	str	r4, [sp, #4]
 8009216:	4633      	mov	r3, r6
 8009218:	f44f 7241 	mov.w	r2, #772	; 0x304
 800921c:	2177      	movs	r1, #119	; 0x77
 800921e:	f505 606e 	add.w	r0, r5, #3808	; 0xee0
 8009222:	f7ff f875 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009226:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800922a:	9401      	str	r4, [sp, #4]
 800922c:	9300      	str	r3, [sp, #0]
 800922e:	f44f 7241 	mov.w	r2, #772	; 0x304
 8009232:	4633      	mov	r3, r6
 8009234:	2178      	movs	r1, #120	; 0x78
 8009236:	f505 6070 	add.w	r0, r5, #3840	; 0xf00
 800923a:	f7ff f869 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800923e:	4633      	mov	r3, r6
 8009240:	e9cd 9400 	strd	r9, r4, [sp]
 8009244:	f44f 7241 	mov.w	r2, #772	; 0x304
 8009248:	2179      	movs	r1, #121	; 0x79
 800924a:	f505 6072 	add.w	r0, r5, #3872	; 0xf20
 800924e:	f7ff f85f 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009252:	e9cd 8400 	strd	r8, r4, [sp]
 8009256:	4633      	mov	r3, r6
 8009258:	f44f 7241 	mov.w	r2, #772	; 0x304
 800925c:	217a      	movs	r1, #122	; 0x7a
 800925e:	f505 6074 	add.w	r0, r5, #3904	; 0xf40
 8009262:	f7ff f855 	bl	8008310 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
vbat        (CM_PIN_VBAT       , RCC_GPIOADC, GPIOADC, GPIOVBAT, PIN_CAPABILITY_DIGITAL),
#endif  //  TODO

//  End of autogenerated section
{
}
 8009266:	4628      	mov	r0, r5
 8009268:	b003      	add	sp, #12
 800926a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926e:	bf00      	nop

08009270 <_GLOBAL__sub_I__ZN13UARTInterfaceC2Ejj>:
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8009270:	2200      	movs	r2, #0
 8009272:	4b02      	ldr	r3, [pc, #8]	; (800927c <_GLOBAL__sub_I__ZN13UARTInterfaceC2Ejj+0xc>)
 8009274:	601a      	str	r2, [r3, #0]
 8009276:	641a      	str	r2, [r3, #64]	; 0x40

void UARTInterface::write(uint8_t ch) {
    //  Send the byte to the UART port.
    //  debug_println("uart_write"); debug_flush();
    usart_send(USART2, ch);
}
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	20002190 	.word	0x20002190

08009280 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>:
            int res = HAL_I2C_Init(&i2c);
            CODAL_ASSERT(res == HAL_OK);
#endif  //  TODO            
        }

        I2C::I2C(codal::Pin &sda, codal::Pin &scl) : codal::I2C(sda, scl), sda(sda), scl(scl)
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	4604      	mov	r4, r0
 8009284:	460e      	mov	r6, r1
 8009286:	4615      	mov	r5, r2
 8009288:	f000 f8c8 	bl	800941c <_ZN5codal3I2CC1ERNS_3PinES2_>
 800928c:	4b02      	ldr	r3, [pc, #8]	; (8009298 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_+0x18>)
 800928e:	60a5      	str	r5, [r4, #8]
 8009290:	e9c4 3600 	strd	r3, r6, [r4]
            i2c.Init.OwnAddress1 = 0xFE;
            i2c.Init.OwnAddress2 = 0xFE;

            needsInit = true;
#endif  //  TODO            
        }
 8009294:	4620      	mov	r0, r4
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	0800a620 	.word	0x0800a620

0800929c <_ZN5codal3_cm3SPI4initEv>:
            p->setup(mode, cnf);
            CODAL_ASSERT(!prev || prev == peri);
            return peri;
        }

        void SPI::init() {
 800929c:	b538      	push	{r3, r4, r5, lr}
            auto res = HAL_OK;
            if (!needsInit) { return; }
 800929e:	f890 3020 	ldrb.w	r3, [r0, #32]
        void SPI::init() {
 80092a2:	4604      	mov	r4, r0
            if (!needsInit) { return; }
 80092a4:	b1eb      	cbz	r3, 80092e2 <_ZN5codal3_cm3SPI4initEv+0x46>
            needsInit = false;
 80092a6:	2500      	movs	r5, #0
            // if (!spi.Instance) {
            uint32_t instance = _codal_setup_pin(sclk, 0, PinMap_SPI_SCK);
 80092a8:	4a0e      	ldr	r2, [pc, #56]	; (80092e4 <_ZN5codal3_cm3SPI4initEv+0x48>)
            needsInit = false;
 80092aa:	f880 5020 	strb.w	r5, [r0, #32]
            uint32_t instance = _codal_setup_pin(sclk, 0, PinMap_SPI_SCK);
 80092ae:	4629      	mov	r1, r5
 80092b0:	68c0      	ldr	r0, [r0, #12]
 80092b2:	f000 ff83 	bl	800a1bc <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            instance = _codal_setup_pin(miso, 0, PinMap_SPI_MISO);
 80092b6:	4629      	mov	r1, r5
 80092b8:	4a0b      	ldr	r2, [pc, #44]	; (80092e8 <_ZN5codal3_cm3SPI4initEv+0x4c>)
 80092ba:	68a0      	ldr	r0, [r4, #8]
 80092bc:	f000 ff7e 	bl	800a1bc <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            instance = _codal_setup_pin(mosi, 0, PinMap_SPI_MOSI);
 80092c0:	4629      	mov	r1, r5
 80092c2:	4a0a      	ldr	r2, [pc, #40]	; (80092ec <_ZN5codal3_cm3SPI4initEv+0x50>)
 80092c4:	6860      	ldr	r0, [r4, #4]
 80092c6:	f000 ff79 	bl	800a1bc <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            instance = _codal_setup_pin(nss, 0, PinMap_SPI_NSS);
 80092ca:	4629      	mov	r1, r5
 80092cc:	4a08      	ldr	r2, [pc, #32]	; (80092f0 <_ZN5codal3_cm3SPI4initEv+0x54>)
 80092ce:	6920      	ldr	r0, [r4, #16]
 80092d0:	f000 ff74 	bl	800a1bc <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            // spi.Instance = (SPI_TypeDef *)instance; }
            LOG("SPI instance %p", instance);
 80092d4:	4807      	ldr	r0, [pc, #28]	; (80092f4 <_ZN5codal3_cm3SPI4initEv+0x58>)
 80092d6:	f7f9 fae3 	bl	80028a0 <debug_println>
            }
            spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
            auto res = HAL_SPI_Init(&spi);
#endif  //  TODO
            CODAL_ASSERT(res == HAL_OK);
        }
 80092da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            LOG("SPI instance %p", instance);
 80092de:	f7f9 baf9 	b.w	80028d4 <debug_flush>
        }
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	0800a5d0 	.word	0x0800a5d0
 80092e8:	0800a4f8 	.word	0x0800a4f8
 80092ec:	0800a540 	.word	0x0800a540
 80092f0:	0800a588 	.word	0x0800a588
 80092f4:	0800a872 	.word	0x0800a872

080092f8 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_>:
            debug_print(" sclk "); debug_print(sclk.name); 
            debug_println(""); debug_flush();
        }

        //  New constructor.  Called by codal-libopencm3.
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk, Pin &nss) : codal::SPI() {
 80092f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fc:	461e      	mov	r6, r3
 80092fe:	4b1e      	ldr	r3, [pc, #120]	; (8009378 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x80>)
 8009300:	9d06      	ldr	r5, [sp, #24]
            this->mosi = &mosi;
 8009302:	e9c0 3100 	strd	r3, r1, [r0]
            this->miso = &miso;
            this->sclk = &sclk;
            this->nss = &nss;
            // ZERO(spi); ZERO(hdma_tx); ZERO(hdma_rx);
            this->needsInit = true;
 8009306:	2301      	movs	r3, #1
            this->sclk = &sclk;
 8009308:	e9c0 2602 	strd	r2, r6, [r0, #8]
            this->needsInit = true;
 800930c:	f880 3020 	strb.w	r3, [r0, #32]
            this->nss = &nss;
 8009310:	6105      	str	r5, [r0, #16]
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk, Pin &nss) : codal::SPI() {
 8009312:	4604      	mov	r4, r0
 8009314:	4617      	mov	r7, r2
 8009316:	4688      	mov	r8, r1
            this->transferCompleteEventCode = codal::allocateNotifyEvent();
 8009318:	f7fe ff50 	bl	80081bc <_ZN5codal19allocateNotifyEventEv>
            for (unsigned i = 0; i < ARRAY_SIZE(_instances); ++i) {
 800931c:	2300      	movs	r3, #0
                if (_instances[i] == NULL) {
 800931e:	4a17      	ldr	r2, [pc, #92]	; (800937c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x84>)
            this->transferCompleteEventCode = codal::allocateNotifyEvent();
 8009320:	84a0      	strh	r0, [r4, #36]	; 0x24
                if (_instances[i] == NULL) {
 8009322:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009326:	bb11      	cbnz	r1, 800936e <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x76>
                    _instances[i] = this;
 8009328:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
                    break;
                }
            }
            debug_print("spi mosi "); debug_print(mosi.name); 
 800932c:	4814      	ldr	r0, [pc, #80]	; (8009380 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x88>)
 800932e:	f7f9 fad4 	bl	80028da <debug_print>
 8009332:	f898 0010 	ldrb.w	r0, [r8, #16]
 8009336:	f7f9 fa9b 	bl	8002870 <_Z11debug_printi>
            debug_print(" miso "); debug_print(miso.name); 
 800933a:	4812      	ldr	r0, [pc, #72]	; (8009384 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x8c>)
 800933c:	f7f9 facd 	bl	80028da <debug_print>
 8009340:	7c38      	ldrb	r0, [r7, #16]
 8009342:	f7f9 fa95 	bl	8002870 <_Z11debug_printi>
            debug_print(" sclk "); debug_print(sclk.name); 
 8009346:	4810      	ldr	r0, [pc, #64]	; (8009388 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x90>)
 8009348:	f7f9 fac7 	bl	80028da <debug_print>
 800934c:	7c30      	ldrb	r0, [r6, #16]
 800934e:	f7f9 fa8f 	bl	8002870 <_Z11debug_printi>
            debug_print(" nss "); debug_print(nss.name); 
 8009352:	480e      	ldr	r0, [pc, #56]	; (800938c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x94>)
 8009354:	f7f9 fac1 	bl	80028da <debug_print>
 8009358:	7c28      	ldrb	r0, [r5, #16]
 800935a:	f7f9 fa89 	bl	8002870 <_Z11debug_printi>
            debug_println(""); debug_flush();
 800935e:	480c      	ldr	r0, [pc, #48]	; (8009390 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x98>)
 8009360:	f7f9 fa9e 	bl	80028a0 <debug_println>
 8009364:	f7f9 fab6 	bl	80028d4 <debug_flush>
        }
 8009368:	4620      	mov	r0, r4
 800936a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            for (unsigned i = 0; i < ARRAY_SIZE(_instances); ++i) {
 800936e:	3301      	adds	r3, #1
 8009370:	2b04      	cmp	r3, #4
 8009372:	d1d6      	bne.n	8009322 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x2a>
 8009374:	e7da      	b.n	800932c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x34>
 8009376:	bf00      	nop
 8009378:	0800a64c 	.word	0x0800a64c
 800937c:	200021fc 	.word	0x200021fc
 8009380:	0800a88c 	.word	0x0800a88c
 8009384:	0800a896 	.word	0x0800a896
 8009388:	0800a89d 	.word	0x0800a89d
 800938c:	0800a8a4 	.word	0x0800a8a4
 8009390:	0800a6c5 	.word	0x0800a6c5

08009394 <pinmap_peripheral>:
static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap *map);

CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    CmPeripheral peripheral = CM_PERIPHERAL_NC;
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 8009394:	28ff      	cmp	r0, #255	; 0xff
CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
 8009396:	b508      	push	{r3, lr}
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 8009398:	d00c      	beq.n	80093b4 <pinmap_peripheral+0x20>
    return cnf;
}

static CmPeripheral pinmap_find_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    while (map->pin != CM_PIN_NC) {
 800939a:	780b      	ldrb	r3, [r1, #0]
 800939c:	2bff      	cmp	r3, #255	; 0xff
 800939e:	d004      	beq.n	80093aa <pinmap_peripheral+0x16>
        if (map->pin == pin) { return map->peripheral; }
 80093a0:	4298      	cmp	r0, r3
 80093a2:	d10a      	bne.n	80093ba <pinmap_peripheral+0x26>
 80093a4:	6848      	ldr	r0, [r1, #4]
    if (peripheral == CM_PERIPHERAL_NC) // no mapping available
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	d106      	bne.n	80093b8 <pinmap_peripheral+0x24>
        { error("pinmap not found for peripheral"); }
 80093aa:	4805      	ldr	r0, [pc, #20]	; (80093c0 <pinmap_peripheral+0x2c>)
 80093ac:	f7f9 fa78 	bl	80028a0 <debug_println>
 80093b0:	f7f9 fa90 	bl	80028d4 <debug_flush>
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 80093b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80093b8:	bd08      	pop	{r3, pc}
        map++;
 80093ba:	310c      	adds	r1, #12
 80093bc:	e7ed      	b.n	800939a <pinmap_peripheral+0x6>
 80093be:	bf00      	nop
 80093c0:	0800a8dd 	.word	0x0800a8dd

080093c4 <pinmap_mode>:
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }
 80093c4:	28ff      	cmp	r0, #255	; 0xff
CmPinMode pinmap_mode(codal::PinNumber pin, const PinMap* map) {
 80093c6:	b508      	push	{r3, lr}
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }
 80093c8:	d00d      	beq.n	80093e6 <pinmap_mode+0x22>
    return CM_PERIPHERAL_NC;
}

static CmPinMode pinmap_find_mode(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin mode for the peripheral e.g. GPIO_MODE_OUTPUT_2_MHZ.
    while (map->pin != CM_PIN_NC) {
 80093ca:	780b      	ldrb	r3, [r1, #0]
 80093cc:	2bff      	cmp	r3, #255	; 0xff
 80093ce:	d004      	beq.n	80093da <pinmap_mode+0x16>
        if (map->pin == pin) { return map->mode; }
 80093d0:	4298      	cmp	r0, r3
 80093d2:	d109      	bne.n	80093e8 <pinmap_mode+0x24>
 80093d4:	7a48      	ldrb	r0, [r1, #9]
    if (mode == CM_PINMODE_NC) // no mapping available
 80093d6:	28ff      	cmp	r0, #255	; 0xff
 80093d8:	d105      	bne.n	80093e6 <pinmap_mode+0x22>
        { error("pinmap not found for mode"); }
 80093da:	4804      	ldr	r0, [pc, #16]	; (80093ec <pinmap_mode+0x28>)
 80093dc:	f7f9 fa60 	bl	80028a0 <debug_println>
 80093e0:	f7f9 fa78 	bl	80028d4 <debug_flush>
 80093e4:	20ff      	movs	r0, #255	; 0xff
}
 80093e6:	bd08      	pop	{r3, pc}
        map++;
 80093e8:	310c      	adds	r1, #12
 80093ea:	e7ee      	b.n	80093ca <pinmap_mode+0x6>
 80093ec:	0800a8c3 	.word	0x0800a8c3

080093f0 <pinmap_cnf>:
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }
 80093f0:	28ff      	cmp	r0, #255	; 0xff
CmPinCnf pinmap_cnf(codal::PinNumber pin, const PinMap* map) {
 80093f2:	b508      	push	{r3, lr}
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }
 80093f4:	d00d      	beq.n	8009412 <pinmap_cnf+0x22>
    return CM_PINMODE_NC;
}

static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin config for the peripheral e.g. GPIO_CNF_OUTPUT_PUSHPULL.
    while (map->pin != CM_PIN_NC) {
 80093f6:	780b      	ldrb	r3, [r1, #0]
 80093f8:	2bff      	cmp	r3, #255	; 0xff
 80093fa:	d004      	beq.n	8009406 <pinmap_cnf+0x16>
        if (map->pin == pin) { return map->cnf; }
 80093fc:	4298      	cmp	r0, r3
 80093fe:	d109      	bne.n	8009414 <pinmap_cnf+0x24>
 8009400:	7a88      	ldrb	r0, [r1, #10]
    if (cnf == CM_PINCNF_NC) // no mapping available
 8009402:	28ff      	cmp	r0, #255	; 0xff
 8009404:	d105      	bne.n	8009412 <pinmap_cnf+0x22>
        { error("pinmap not found for cnf"); }
 8009406:	4804      	ldr	r0, [pc, #16]	; (8009418 <pinmap_cnf+0x28>)
 8009408:	f7f9 fa4a 	bl	80028a0 <debug_println>
 800940c:	f7f9 fa62 	bl	80028d4 <debug_flush>
 8009410:	20ff      	movs	r0, #255	; 0xff
}
 8009412:	bd08      	pop	{r3, pc}
        map++;
 8009414:	310c      	adds	r1, #12
 8009416:	e7ee      	b.n	80093f6 <pinmap_cnf+0x6>
 8009418:	0800a8aa 	.word	0x0800a8aa

0800941c <_ZN5codal3I2CC1ERNS_3PinES2_>:
namespace codal
{
/**
  * Constructor.
  */
I2C::I2C(Pin &sda, Pin &scl)
 800941c:	4b01      	ldr	r3, [pc, #4]	; (8009424 <_ZN5codal3I2CC1ERNS_3PinES2_+0x8>)
 800941e:	6003      	str	r3, [r0, #0]
{
}
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	0800a668 	.word	0x0800a668

08009428 <_ZN5codal14CodalComponent16periodicCallbackEv>:
        virtual void periodicCallback() {}
 8009428:	4770      	bx	lr

0800942a <_ZN5codal14CodalComponent12idleCallbackEv>:
        virtual void idleCallback() {}
 800942a:	4770      	bx	lr

0800942c <_ZN5codal14CodalComponentD0Ev>:
        virtual ~CodalComponent()
 800942c:	b510      	push	{r4, lr}
 800942e:	4604      	mov	r4, r0
        }
 8009430:	f7fe f856 	bl	80074e0 <_ZN5codal14CodalComponentD1Ev>
 8009434:	4620      	mov	r0, r4
 8009436:	f7f9 fb99 	bl	8002b6c <_ZdlPv>
 800943a:	4620      	mov	r0, r4
 800943c:	bd10      	pop	{r4, pc}

0800943e <_ZN5codal13STM32BluePillD0Ev>:
 800943e:	b510      	push	{r4, lr}
 8009440:	4604      	mov	r4, r0
 8009442:	f7fe f8c3 	bl	80075cc <_ZN5codal13STM32BluePillD1Ev>
 8009446:	4620      	mov	r0, r4
 8009448:	f7f9 fb90 	bl	8002b6c <_ZdlPv>
 800944c:	4620      	mov	r0, r4
 800944e:	bd10      	pop	{r4, pc}

08009450 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>:
{
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	460d      	mov	r5, r1
 8009454:	4604      	mov	r4, r0
    target_disable_irq();
 8009456:	f7f7 fca7 	bl	8000da8 <target_disable_irq>
    if (*queue == NULL)
 800945a:	682b      	ldr	r3, [r5, #0]
    f->queue = queue;
 800945c:	6165      	str	r5, [r4, #20]
    if (*queue == NULL)
 800945e:	b93b      	cbnz	r3, 8009470 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x20>
        f->prev = NULL;
 8009460:	e9c4 3306 	strd	r3, r3, [r4, #24]
        *queue = f;
 8009464:	602c      	str	r4, [r5, #0]
}
 8009466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    target_enable_irq();
 800946a:	f7f7 bc9b 	b.w	8000da4 <target_enable_irq>
 800946e:	4613      	mov	r3, r2
        while (last->next != NULL)
 8009470:	699a      	ldr	r2, [r3, #24]
 8009472:	2a00      	cmp	r2, #0
 8009474:	d1fb      	bne.n	800946e <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x1e>
        last->next = f;
 8009476:	619c      	str	r4, [r3, #24]
        f->next = NULL;
 8009478:	e9c4 2306 	strd	r2, r3, [r4, #24]
 800947c:	e7f3      	b.n	8009466 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x16>

0800947e <_ZN5codal13dequeue_fiberEPNS_5FiberE>:
    if (f->queue == NULL)
 800947e:	6943      	ldr	r3, [r0, #20]
{
 8009480:	b510      	push	{r4, lr}
 8009482:	4604      	mov	r4, r0
    if (f->queue == NULL)
 8009484:	b1a3      	cbz	r3, 80094b0 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x32>
    target_disable_irq();
 8009486:	f7f7 fc8f 	bl	8000da8 <target_disable_irq>
 800948a:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
    if (f->prev != NULL)
 800948e:	b162      	cbz	r2, 80094aa <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x2c>
        f->prev->next = f->next;
 8009490:	6193      	str	r3, [r2, #24]
    if(f->next)
 8009492:	69a3      	ldr	r3, [r4, #24]
 8009494:	b10b      	cbz	r3, 800949a <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x1c>
        f->next->prev = f->prev;
 8009496:	69e2      	ldr	r2, [r4, #28]
 8009498:	61da      	str	r2, [r3, #28]
    f->next = NULL;
 800949a:	2300      	movs	r3, #0
    f->prev = NULL;
 800949c:	e9c4 3306 	strd	r3, r3, [r4, #24]
    f->queue = NULL;
 80094a0:	6163      	str	r3, [r4, #20]
}
 80094a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    target_enable_irq();
 80094a6:	f7f7 bc7d 	b.w	8000da4 <target_enable_irq>
        *(f->queue) = f->next;
 80094aa:	6962      	ldr	r2, [r4, #20]
 80094ac:	6013      	str	r3, [r2, #0]
 80094ae:	e7f0      	b.n	8009492 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x14>
}
 80094b0:	bd10      	pop	{r4, pc}

080094b2 <_ZN5codal12create_fiberEPFvvES1_>:
{
 80094b2:	b510      	push	{r4, lr}
 80094b4:	4604      	mov	r4, r0
    if (!fiber_scheduler_running())
 80094b6:	f7fe fa17 	bl	80078e8 <_ZN5codal23fiber_scheduler_runningEv>
 80094ba:	b130      	cbz	r0, 80094ca <_ZN5codal12create_fiberEPFvvES1_+0x18>
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, 0, 0);
 80094bc:	2300      	movs	r3, #0
 80094be:	4620      	mov	r0, r4
}
 80094c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, 0, 0);
 80094c4:	461a      	mov	r2, r3
 80094c6:	f7fe ba9b 	b.w	8007a00 <_Z14__create_fibermmmi>
}
 80094ca:	bd10      	pop	{r4, pc}

080094cc <_ZN5codal12create_fiberEPFvPvES0_S2_>:
{
 80094cc:	b570      	push	{r4, r5, r6, lr}
 80094ce:	460d      	mov	r5, r1
 80094d0:	4604      	mov	r4, r0
 80094d2:	4611      	mov	r1, r2
    if (!fiber_scheduler_running())
 80094d4:	f7fe fa08 	bl	80078e8 <_ZN5codal23fiber_scheduler_runningEv>
 80094d8:	b130      	cbz	r0, 80094e8 <_ZN5codal12create_fiberEPFvPvES0_S2_+0x1c>
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 80094da:	462a      	mov	r2, r5
 80094dc:	4620      	mov	r0, r4
}
 80094de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 80094e2:	2301      	movs	r3, #1
 80094e4:	f7fe ba8c 	b.w	8007a00 <_Z14__create_fibermmmi>
}
 80094e8:	bd70      	pop	{r4, r5, r6, pc}

080094ea <_ZN5codal20fiber_wait_for_eventEtt>:
{
 80094ea:	b510      	push	{r4, lr}
    int ret = fiber_wake_on_event(id, value);
 80094ec:	f7fe fa5a 	bl	80079a4 <_ZN5codal19fiber_wake_on_eventEtt>
    if(ret == DEVICE_OK)
 80094f0:	4604      	mov	r4, r0
 80094f2:	b908      	cbnz	r0, 80094f8 <_ZN5codal20fiber_wait_for_eventEtt+0xe>
        schedule();
 80094f4:	f7fe fafe 	bl	8007af4 <_ZN5codal8scheduleEv>
}
 80094f8:	4620      	mov	r0, r4
 80094fa:	bd10      	pop	{r4, pc}

080094fc <_ZN5codal16launch_new_fiberEPFvvES1_>:
{
 80094fc:	b510      	push	{r4, lr}
 80094fe:	460c      	mov	r4, r1
    ep();
 8009500:	4780      	blx	r0
    cp();
 8009502:	47a0      	blx	r4
}
 8009504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    release_fiber();
 8009508:	f7fe bb96 	b.w	8007c38 <_ZN5codal13release_fiberEv>

0800950c <_ZN5codal13release_fiberEPv>:
{
 800950c:	b508      	push	{r3, lr}
    if (!fiber_scheduler_running())
 800950e:	f7fe f9eb 	bl	80078e8 <_ZN5codal23fiber_scheduler_runningEv>
 8009512:	b118      	cbz	r0, 800951c <_ZN5codal13release_fiberEPv+0x10>
}
 8009514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    release_fiber();
 8009518:	f7fe bb8e 	b.w	8007c38 <_ZN5codal13release_fiberEv>
}
 800951c:	bd08      	pop	{r3, pc}

0800951e <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_>:
{
 800951e:	b538      	push	{r3, r4, r5, lr}
 8009520:	4614      	mov	r4, r2
 8009522:	4603      	mov	r3, r0
    ep(pm);
 8009524:	4610      	mov	r0, r2
{
 8009526:	460d      	mov	r5, r1
    ep(pm);
 8009528:	4798      	blx	r3
    cp(pm);
 800952a:	4620      	mov	r0, r4
 800952c:	47a8      	blx	r5
    release_fiber(pm);
 800952e:	4620      	mov	r0, r4
}
 8009530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    release_fiber(pm);
 8009534:	f7ff bfea 	b.w	800950c <_ZN5codal13release_fiberEPv>

08009538 <_ZN5codal9idle_taskEv>:
  * The idle task, which is called when the runtime has no fibers that require execution.
  *
  * This function typically calls idle().
  */
void codal::idle_task()
{
 8009538:	b508      	push	{r3, lr}
    while(1)
    {
        idle();
 800953a:	f7fe fabd 	bl	8007ab8 <_ZN5codal4idleEv>
        schedule();
 800953e:	f7fe fad9 	bl	8007af4 <_ZN5codal8scheduleEv>
 8009542:	e7fa      	b.n	800953a <_ZN5codal9idle_taskEv+0x2>

08009544 <_Z16device_malloc_injR14HeapDefinition>:
{
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 8009546:	0783      	lsls	r3, r0, #30
{
 8009548:	460f      	mov	r7, r1
 800954a:	ea4f 0590 	mov.w	r5, r0, lsr #2
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 800954e:	d101      	bne.n	8009554 <_Z16device_malloc_injR14HeapDefinition+0x10>
    if (size <= 0)
 8009550:	b908      	cbnz	r0, 8009556 <_Z16device_malloc_injR14HeapDefinition+0x12>
}
 8009552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 8009554:	3501      	adds	r5, #1
    blocksNeeded++;
 8009556:	1c6e      	adds	r6, r5, #1
    target_disable_irq();
 8009558:	f7f7 fc26 	bl	8000da8 <target_disable_irq>
    while (block < heap.heap_end)
 800955c:	e9d7 4100 	ldrd	r4, r1, [r7]
 8009560:	42a1      	cmp	r1, r4
 8009562:	d926      	bls.n	80095b2 <_Z16device_malloc_injR14HeapDefinition+0x6e>
        if(!(*block & DEVICE_HEAP_BLOCK_FREE))
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	db02      	blt.n	8009570 <_Z16device_malloc_injR14HeapDefinition+0x2c>
        block += blockSize;
 800956a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800956e:	e7f7      	b.n	8009560 <_Z16device_malloc_injR14HeapDefinition+0x1c>
        blockSize = *block & ~DEVICE_HEAP_BLOCK_FREE;
 8009570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
        next = block + blockSize;
 8009574:	eb04 0083 	add.w	r0, r4, r3, lsl #2
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 8009578:	6802      	ldr	r2, [r0, #0]
 800957a:	2a00      	cmp	r2, #0
 800957c:	da08      	bge.n	8009590 <_Z16device_malloc_injR14HeapDefinition+0x4c>
            if (next >= heap.heap_end)
 800957e:	4281      	cmp	r1, r0
 8009580:	d906      	bls.n	8009590 <_Z16device_malloc_injR14HeapDefinition+0x4c>
            blockSize += (*next & ~DEVICE_HEAP_BLOCK_FREE);
 8009582:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8009586:	4413      	add	r3, r2
            *block = blockSize | DEVICE_HEAP_BLOCK_FREE;
 8009588:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800958c:	6022      	str	r2, [r4, #0]
 800958e:	e7f1      	b.n	8009574 <_Z16device_malloc_injR14HeapDefinition+0x30>
        if (blockSize >= blocksNeeded)
 8009590:	42b3      	cmp	r3, r6
 8009592:	d3ea      	bcc.n	800956a <_Z16device_malloc_injR14HeapDefinition+0x26>
    if (blockSize <= blocksNeeded+1 || block+blocksNeeded+1 >= heap.heap_end)
 8009594:	3502      	adds	r5, #2
 8009596:	429d      	cmp	r5, r3
 8009598:	d203      	bcs.n	80095a2 <_Z16device_malloc_injR14HeapDefinition+0x5e>
 800959a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800959e:	42a9      	cmp	r1, r5
 80095a0:	d80b      	bhi.n	80095ba <_Z16device_malloc_injR14HeapDefinition+0x76>
        *block &= ~DEVICE_HEAP_BLOCK_FREE;
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095a8:	6023      	str	r3, [r4, #0]
    target_enable_irq();
 80095aa:	f7f7 fbfb 	bl	8000da4 <target_enable_irq>
    return block+1;
 80095ae:	1d20      	adds	r0, r4, #4
 80095b0:	e7cf      	b.n	8009552 <_Z16device_malloc_injR14HeapDefinition+0xe>
        target_enable_irq();
 80095b2:	f7f7 fbf7 	bl	8000da4 <target_enable_irq>
        return NULL;
 80095b6:	2000      	movs	r0, #0
 80095b8:	e7cb      	b.n	8009552 <_Z16device_malloc_injR14HeapDefinition+0xe>
        *splitBlock = blockSize - blocksNeeded;
 80095ba:	1b9b      	subs	r3, r3, r6
        *splitBlock |= DEVICE_HEAP_BLOCK_FREE;
 80095bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095c0:	f845 3c04 	str.w	r3, [r5, #-4]
        *block = blocksNeeded;
 80095c4:	6026      	str	r6, [r4, #0]
 80095c6:	e7f0      	b.n	80095aa <_Z16device_malloc_injR14HeapDefinition+0x66>

080095c8 <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>:
  * @param handler A function pointer to call when the event is detected.
  *
  * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
  * to be tuned.
  */
Listener::Listener(uint16_t id, uint16_t value, void (*handler)(Event), uint16_t flags)
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	4604      	mov	r4, r0
 80095cc:	3010      	adds	r0, #16
 80095ce:	4616      	mov	r6, r2
 80095d0:	461d      	mov	r5, r3
 80095d2:	460f      	mov	r7, r1
 80095d4:	f000 fb1e 	bl	8009c14 <_ZN5codal5EventC1Ev>
{
	this->id = id;
	this->value = value;
	this->cb = handler;
	this->cb_arg = NULL;
 80095d8:	2300      	movs	r3, #0
    this->flags = flags;
 80095da:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	this->id = id;
 80095de:	8027      	strh	r7, [r4, #0]
	this->value = value;
 80095e0:	8066      	strh	r6, [r4, #2]
	this->cb = handler;
 80095e2:	60a5      	str	r5, [r4, #8]
	this->cb_arg = NULL;
 80095e4:	60e3      	str	r3, [r4, #12]
    this->flags = flags;
 80095e6:	80a2      	strh	r2, [r4, #4]
	this->next = NULL;
    this->evt_queue = NULL;
 80095e8:	e9c4 3306 	strd	r3, r3, [r4, #24]
}
 80095ec:	4620      	mov	r0, r4
 80095ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080095f0 <_ZN5codal8ListenerD1Ev>:
/**
  * Destructor. Ensures all resources used by this listener are freed.
  */
Listener::~Listener()
{
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 80095f0:	8883      	ldrh	r3, [r0, #4]
Listener::~Listener()
 80095f2:	b510      	push	{r4, lr}
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 80095f4:	079b      	lsls	r3, r3, #30
Listener::~Listener()
 80095f6:	4604      	mov	r4, r0
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 80095f8:	d502      	bpl.n	8009600 <_ZN5codal8ListenerD1Ev+0x10>
        delete cb_method;
 80095fa:	6880      	ldr	r0, [r0, #8]
 80095fc:	f7f9 fab6 	bl	8002b6c <_ZdlPv>
}
 8009600:	4620      	mov	r0, r4
 8009602:	bd10      	pop	{r4, pc}

08009604 <_ZN5codal8Listener5queueENS_5EventE>:
  * Queues and event up to be processed.
  *
  * @param e The event to queue
  */
void Listener::queue(Event e)
{
 8009604:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009606:	466b      	mov	r3, sp
    int queueDepth;

    EventQueueItem *p = evt_queue;
 8009608:	6984      	ldr	r4, [r0, #24]
{
 800960a:	4605      	mov	r5, r0
 800960c:	e883 0006 	stmia.w	r3, {r1, r2}

    if (evt_queue == NULL)
 8009610:	b97c      	cbnz	r4, 8009632 <_ZN5codal8Listener5queueENS_5EventE+0x2e>
        evt_queue = new EventQueueItem(e);
 8009612:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009616:	ac02      	add	r4, sp, #8
 8009618:	e884 0005 	stmia.w	r4, {r0, r2}
 800961c:	200c      	movs	r0, #12
 800961e:	f7f9 faa3 	bl	8002b68 <_Znwj>
 8009622:	e894 0006 	ldmia.w	r4, {r1, r2}
 8009626:	4606      	mov	r6, r0
 8009628:	f000 fb17 	bl	8009c5a <_ZN5codal14EventQueueItemC1ENS_5EventE>
 800962c:	61ae      	str	r6, [r5, #24]
        }

        if (queueDepth < MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
            p->next = new EventQueueItem(e);
    }
}
 800962e:	b004      	add	sp, #16
 8009630:	bd70      	pop	{r4, r5, r6, pc}
        queueDepth = 1;
 8009632:	2201      	movs	r2, #1
        while (p->next != NULL)
 8009634:	68a1      	ldr	r1, [r4, #8]
 8009636:	b111      	cbz	r1, 800963e <_ZN5codal8Listener5queueENS_5EventE+0x3a>
            queueDepth++;
 8009638:	3201      	adds	r2, #1
        while (p->next != NULL)
 800963a:	460c      	mov	r4, r1
 800963c:	e7fa      	b.n	8009634 <_ZN5codal8Listener5queueENS_5EventE+0x30>
        if (queueDepth < MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 800963e:	2a09      	cmp	r2, #9
 8009640:	dcf5      	bgt.n	800962e <_ZN5codal8Listener5queueENS_5EventE+0x2a>
            p->next = new EventQueueItem(e);
 8009642:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009646:	ad02      	add	r5, sp, #8
 8009648:	e885 0003 	stmia.w	r5, {r0, r1}
 800964c:	200c      	movs	r0, #12
 800964e:	f7f9 fa8b 	bl	8002b68 <_Znwj>
 8009652:	e895 0006 	ldmia.w	r5, {r1, r2}
 8009656:	4606      	mov	r6, r0
 8009658:	f000 faff 	bl	8009c5a <_ZN5codal14EventQueueItemC1ENS_5EventE>
 800965c:	60a6      	str	r6, [r4, #8]
}
 800965e:	e7e6      	b.n	800962e <_ZN5codal8Listener5queueENS_5EventE+0x2a>

08009660 <_ZN5codal6Serial12initialiseRxEv>:
    if((status & CODAL_SERIAL_RX_BUFF_INIT))
 8009660:	88c3      	ldrh	r3, [r0, #6]
{
 8009662:	b570      	push	{r4, r5, r6, lr}
    if((status & CODAL_SERIAL_RX_BUFF_INIT))
 8009664:	075b      	lsls	r3, r3, #29
{
 8009666:	4604      	mov	r4, r0
    if((status & CODAL_SERIAL_RX_BUFF_INIT))
 8009668:	d506      	bpl.n	8009678 <_ZN5codal6Serial12initialiseRxEv+0x18>
        disableInterrupt(RxInterrupt);
 800966a:	6803      	ldr	r3, [r0, #0]
 800966c:	2100      	movs	r1, #0
 800966e:	699b      	ldr	r3, [r3, #24]
 8009670:	4798      	blx	r3
        free(this->rxBuff);
 8009672:	69a0      	ldr	r0, [r4, #24]
 8009674:	f7fe fb98 	bl	8007da8 <device_free>
    status &= ~CODAL_SERIAL_RX_BUFF_INIT;
 8009678:	88e5      	ldrh	r5, [r4, #6]
    if((this->rxBuff = (uint8_t *)malloc(rxBuffSize)) == NULL)
 800967a:	7f20      	ldrb	r0, [r4, #28]
    status &= ~CODAL_SERIAL_RX_BUFF_INIT;
 800967c:	f025 0504 	bic.w	r5, r5, #4
 8009680:	b2ad      	uxth	r5, r5
 8009682:	80e5      	strh	r5, [r4, #6]
    if((this->rxBuff = (uint8_t *)malloc(rxBuffSize)) == NULL)
 8009684:	f7fe fb6c 	bl	8007d60 <device_malloc>
 8009688:	61a0      	str	r0, [r4, #24]
 800968a:	b160      	cbz	r0, 80096a6 <_ZN5codal6Serial12initialiseRxEv+0x46>
    this->rxBuffHead = 0;
 800968c:	2600      	movs	r6, #0
    enableInterrupt(RxInterrupt);
 800968e:	6823      	ldr	r3, [r4, #0]
    status |= CODAL_SERIAL_RX_BUFF_INIT;
 8009690:	f045 0504 	orr.w	r5, r5, #4
    this->rxBuffHead = 0;
 8009694:	83e6      	strh	r6, [r4, #30]
    this->rxBuffTail = 0;
 8009696:	8426      	strh	r6, [r4, #32]
    status |= CODAL_SERIAL_RX_BUFF_INIT;
 8009698:	80e5      	strh	r5, [r4, #6]
    enableInterrupt(RxInterrupt);
 800969a:	695b      	ldr	r3, [r3, #20]
 800969c:	4631      	mov	r1, r6
 800969e:	4620      	mov	r0, r4
 80096a0:	4798      	blx	r3
    return DEVICE_OK;
 80096a2:	4630      	mov	r0, r6
}
 80096a4:	bd70      	pop	{r4, r5, r6, pc}
        return DEVICE_NO_RESOURCES;
 80096a6:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 80096aa:	e7fb      	b.n	80096a4 <_ZN5codal6Serial12initialiseRxEv+0x44>

080096ac <_ZN5codal6Serial12circularCopyEPhhS1_tt>:
{
 80096ac:	b530      	push	{r4, r5, lr}
 80096ae:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 80096b2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80096b6:	3b01      	subs	r3, #1
    while(tailPosition != headPosition)
 80096b8:	42a8      	cmp	r0, r5
 80096ba:	d009      	beq.n	80096d0 <_ZN5codal6Serial12circularCopyEPhhS1_tt+0x24>
        linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 80096bc:	5c0c      	ldrb	r4, [r1, r0]
        tailPosition = (tailPosition + 1) % circularBuffSize;
 80096be:	3001      	adds	r0, #1
        linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 80096c0:	f803 4f01 	strb.w	r4, [r3, #1]!
        tailPosition = (tailPosition + 1) % circularBuffSize;
 80096c4:	fb90 f4f2 	sdiv	r4, r0, r2
 80096c8:	fb02 0014 	mls	r0, r2, r4, r0
 80096cc:	b280      	uxth	r0, r0
    while(tailPosition != headPosition)
 80096ce:	e7f3      	b.n	80096b8 <_ZN5codal6Serial12circularCopyEPhhS1_tt+0xc>
}
 80096d0:	bd30      	pop	{r4, r5, pc}

080096d2 <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>:
    if(mode == SYNC_SPINWAIT)
 80096d2:	2a01      	cmp	r2, #1
{
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4604      	mov	r4, r0
 80096d8:	4615      	mov	r5, r2
    if(mode == SYNC_SPINWAIT)
 80096da:	d00a      	beq.n	80096f2 <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x20>
    this->delimeters = delimeters;
 80096dc:	3010      	adds	r0, #16
 80096de:	f000 fb03 	bl	8009ce8 <_ZN5codal13ManagedStringaSERKS0_>
    if(mode == SYNC_SLEEP)
 80096e2:	2d02      	cmp	r5, #2
 80096e4:	d103      	bne.n	80096ee <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x1c>
        fiber_wait_for_event(this->id, CODAL_SERIAL_EVT_DELIM_MATCH);
 80096e6:	2101      	movs	r1, #1
 80096e8:	88a0      	ldrh	r0, [r4, #4]
 80096ea:	f7ff fefe 	bl	80094ea <_ZN5codal20fiber_wait_for_eventEtt>
    return DEVICE_OK;
 80096ee:	2000      	movs	r0, #0
 80096f0:	e001      	b.n	80096f6 <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x24>
        return DEVICE_INVALID_PARAMETER;
 80096f2:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 80096f6:	bd38      	pop	{r3, r4, r5, pc}

080096f8 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE>:
{
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	b087      	sub	sp, #28
 80096fe:	469a      	mov	sl, r3
    return (status & CODAL_SERIAL_RX_IN_USE);
 8009700:	88cb      	ldrh	r3, [r1, #6]
{
 8009702:	af02      	add	r7, sp, #8
 8009704:	4693      	mov	fp, r2
    if(rxInUse())
 8009706:	07da      	lsls	r2, r3, #31
{
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	460c      	mov	r4, r1
    if(rxInUse())
 800970c:	d502      	bpl.n	8009714 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1c>
    return ManagedString();
 800970e:	f7fe fd87 	bl	8008220 <_ZN5codal13ManagedStringC1Ev>
 8009712:	e009      	b.n	8009728 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x30>
    if(!(status & CODAL_SERIAL_RX_BUFF_INIT))
 8009714:	075b      	lsls	r3, r3, #29
 8009716:	d40c      	bmi.n	8009732 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x3a>
        int result = initialiseRx();
 8009718:	4608      	mov	r0, r1
 800971a:	f7ff ffa1 	bl	8009660 <_ZN5codal6Serial12initialiseRxEv>
        if(result != DEVICE_OK)
 800971e:	4601      	mov	r1, r0
 8009720:	b138      	cbz	r0, 8009732 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x3a>
            return result;
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f000 fac7 	bl	8009cb6 <_ZN5codal13ManagedStringC1Ei>
}
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int localTail = rxBuffTail;
 8009732:	8c26      	ldrh	r6, [r4, #32]
    int foundIndex = -1;
 8009734:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    int localTail = rxBuffTail;
 8009738:	46b1      	mov	r9, r6
    status |= CODAL_SERIAL_RX_IN_USE;
 800973a:	88e3      	ldrh	r3, [r4, #6]
 800973c:	f043 0301 	orr.w	r3, r3, #1
 8009740:	80e3      	strh	r3, [r4, #6]
    while(localTail != rxBuffHead && foundIndex  == -1)
 8009742:	8be5      	ldrh	r5, [r4, #30]
 8009744:	b2ad      	uxth	r5, r5
 8009746:	454d      	cmp	r5, r9
 8009748:	d017      	beq.n	800977a <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x82>
 800974a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800974e:	d168      	bne.n	8009822 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x12a>
        for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 8009750:	2500      	movs	r5, #0
        char c = rxBuff[localTail];
 8009752:	69a2      	ldr	r2, [r4, #24]
 8009754:	f812 2009 	ldrb.w	r2, [r2, r9]
          * display.scroll(s.length()) // scrolls "4"
          * @endcode
          */
        int16_t length() const
        {
            return ptr->len;
 8009758:	f8db 1000 	ldr.w	r1, [fp]
 800975c:	603a      	str	r2, [r7, #0]
        for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800975e:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8009762:	42a9      	cmp	r1, r5
 8009764:	dd28      	ble.n	80097b8 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xc0>
            if(delimeters.charAt(delimeterIterator) == c)
 8009766:	b229      	sxth	r1, r5
 8009768:	4658      	mov	r0, fp
 800976a:	f000 facc 	bl	8009d06 <_ZN5codal13ManagedString6charAtEs>
 800976e:	683a      	ldr	r2, [r7, #0]
        for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 8009770:	3501      	adds	r5, #1
 8009772:	4290      	cmp	r0, r2
 8009774:	bf08      	it	eq
 8009776:	46c8      	moveq	r8, r9
 8009778:	e7ee      	b.n	8009758 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x60>
    if(mode == SYNC_SPINWAIT)
 800977a:	f1ba 0f01 	cmp.w	sl, #1
 800977e:	d12a      	bne.n	80097d6 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
        while(foundIndex == -1)
 8009780:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8009784:	d14d      	bne.n	8009822 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x12a>
            while(localTail == rxBuffHead);
 8009786:	8be2      	ldrh	r2, [r4, #30]
 8009788:	4295      	cmp	r5, r2
 800978a:	d0fc      	beq.n	8009786 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x8e>
            for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800978c:	f04f 0900 	mov.w	r9, #0
            char c = rxBuff[localTail];
 8009790:	69a2      	ldr	r2, [r4, #24]
 8009792:	f812 a005 	ldrb.w	sl, [r2, r5]
 8009796:	f8db 2000 	ldr.w	r2, [fp]
            for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800979a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800979e:	454a      	cmp	r2, r9
 80097a0:	dd12      	ble.n	80097c8 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd0>
                if(delimeters.charAt(delimeterIterator) == c)
 80097a2:	fa0f f189 	sxth.w	r1, r9
 80097a6:	4658      	mov	r0, fp
 80097a8:	f000 faad 	bl	8009d06 <_ZN5codal13ManagedString6charAtEs>
            for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 80097ac:	f109 0901 	add.w	r9, r9, #1
 80097b0:	4550      	cmp	r0, sl
 80097b2:	bf08      	it	eq
 80097b4:	46a8      	moveq	r8, r5
 80097b6:	e7ee      	b.n	8009796 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x9e>
        localTail = (localTail + 1) % rxBuffSize;
 80097b8:	7f22      	ldrb	r2, [r4, #28]
 80097ba:	f109 0901 	add.w	r9, r9, #1
 80097be:	fb99 f1f2 	sdiv	r1, r9, r2
 80097c2:	fb02 9911 	mls	r9, r2, r1, r9
    while(localTail != rxBuffHead && foundIndex  == -1)
 80097c6:	e7bc      	b.n	8009742 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x4a>
            localTail = (localTail + 1) % rxBuffSize;
 80097c8:	7f22      	ldrb	r2, [r4, #28]
 80097ca:	3501      	adds	r5, #1
 80097cc:	fb95 f1f2 	sdiv	r1, r5, r2
 80097d0:	fb02 5511 	mls	r5, r2, r1, r5
        while(foundIndex == -1)
 80097d4:	e7d4      	b.n	8009780 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x88>
    if(mode == SYNC_SLEEP && foundIndex == -1)
 80097d6:	f1ba 0f02 	cmp.w	sl, #2
 80097da:	d122      	bne.n	8009822 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x12a>
 80097dc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80097e0:	d11f      	bne.n	8009822 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x12a>
        eventOn(delimeters, mode);
 80097e2:	4659      	mov	r1, fp
 80097e4:	f107 000c 	add.w	r0, r7, #12
 80097e8:	f000 fa76 	bl	8009cd8 <_ZN5codal13ManagedStringC1ERKS0_>
 80097ec:	4652      	mov	r2, sl
 80097ee:	f107 010c 	add.w	r1, r7, #12
 80097f2:	4620      	mov	r0, r4
 80097f4:	f7ff ff6d 	bl	80096d2 <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>
 80097f8:	f107 000c 	add.w	r0, r7, #12
 80097fc:	f000 fa3d 	bl	8009c7a <_ZN5codal13ManagedStringD1Ev>
        foundIndex = rxBuffHead - 1;
 8009800:	8be3      	ldrh	r3, [r4, #30]
        this->delimeters = ManagedString();
 8009802:	f107 000c 	add.w	r0, r7, #12
        foundIndex = rxBuffHead - 1;
 8009806:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
        this->delimeters = ManagedString();
 800980a:	f7fe fd09 	bl	8008220 <_ZN5codal13ManagedStringC1Ev>
 800980e:	f107 010c 	add.w	r1, r7, #12
 8009812:	f104 0010 	add.w	r0, r4, #16
 8009816:	f000 fa67 	bl	8009ce8 <_ZN5codal13ManagedStringaSERKS0_>
 800981a:	f107 000c 	add.w	r0, r7, #12
 800981e:	f000 fa2c 	bl	8009c7a <_ZN5codal13ManagedStringD1Ev>
    if(foundIndex >= 0)
 8009822:	f1b8 0f00 	cmp.w	r8, #0
 8009826:	db34      	blt.n	8009892 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x19a>
 8009828:	f894 a01c 	ldrb.w	sl, [r4, #28]
        int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 800982c:	45b0      	cmp	r8, r6
 800982e:	bfba      	itte	lt
 8009830:	ebaa 0506 	sublt.w	r5, sl, r6
 8009834:	4445      	addlt	r5, r8
 8009836:	eba8 0506 	subge.w	r5, r8, r6
        uint8_t localBuff[localBuffSize + 1];
 800983a:	f105 0208 	add.w	r2, r5, #8
 800983e:	f022 0207 	bic.w	r2, r2, #7
        return ManagedString((char *)localBuff, localBuffSize);
 8009842:	46eb      	mov	fp, sp
        uint8_t localBuff[localBuffSize + 1];
 8009844:	ebad 0d02 	sub.w	sp, sp, r2
 8009848:	f10d 0908 	add.w	r9, sp, #8
 800984c:	1c6a      	adds	r2, r5, #1
 800984e:	2100      	movs	r1, #0
 8009850:	4648      	mov	r0, r9
 8009852:	f7f8 feff 	bl	8002654 <memset>
        circularCopy(rxBuff, rxBuffSize, localBuff, preservedTail, foundIndex);
 8009856:	fa1f f388 	uxth.w	r3, r8
 800985a:	e9cd 6300 	strd	r6, r3, [sp]
 800985e:	4652      	mov	r2, sl
 8009860:	464b      	mov	r3, r9
 8009862:	69a1      	ldr	r1, [r4, #24]
 8009864:	4620      	mov	r0, r4
 8009866:	f7ff ff21 	bl	80096ac <_ZN5codal6Serial12circularCopyEPhhS1_tt>
        rxBuffTail = (rxBuffTail + localBuffSize + 1) % rxBuffSize;
 800986a:	8c23      	ldrh	r3, [r4, #32]
 800986c:	7f21      	ldrb	r1, [r4, #28]
 800986e:	3301      	adds	r3, #1
 8009870:	442b      	add	r3, r5
 8009872:	fb93 f2f1 	sdiv	r2, r3, r1
 8009876:	fb01 3312 	mls	r3, r1, r2, r3
 800987a:	8423      	strh	r3, [r4, #32]
    status &= ~CODAL_SERIAL_RX_IN_USE;
 800987c:	88e3      	ldrh	r3, [r4, #6]
        return ManagedString((char *)localBuff, localBuffSize);
 800987e:	b22a      	sxth	r2, r5
    status &= ~CODAL_SERIAL_RX_IN_USE;
 8009880:	f023 0301 	bic.w	r3, r3, #1
 8009884:	80e3      	strh	r3, [r4, #6]
        return ManagedString((char *)localBuff, localBuffSize);
 8009886:	4649      	mov	r1, r9
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7fe fcaf 	bl	80081ec <_ZN5codal13ManagedStringC1EPKcs>
 800988e:	46dd      	mov	sp, fp
 8009890:	e74a      	b.n	8009728 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x30>
    status &= ~CODAL_SERIAL_RX_IN_USE;
 8009892:	88e3      	ldrh	r3, [r4, #6]
    return ManagedString();
 8009894:	6878      	ldr	r0, [r7, #4]
    status &= ~CODAL_SERIAL_RX_IN_USE;
 8009896:	f023 0301 	bic.w	r3, r3, #1
 800989a:	80e3      	strh	r3, [r4, #6]
 800989c:	e737      	b.n	800970e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x16>

0800989e <_ZN5codal5Timer17disableInterruptsEv>:
{
 800989e:	b508      	push	{r3, lr}
    target_disable_irq();
 80098a0:	f7f7 fa82 	bl	8000da8 <target_disable_irq>
}
 80098a4:	2000      	movs	r0, #0
 80098a6:	bd08      	pop	{r3, pc}

080098a8 <_ZN5codal5Timer16enableInterruptsEv>:
{
 80098a8:	b508      	push	{r3, lr}
    target_enable_irq();
 80098aa:	f7f7 fa7b 	bl	8000da4 <target_enable_irq>
}
 80098ae:	2000      	movs	r0, #0
 80098b0:	bd08      	pop	{r3, pc}

080098b2 <_ZN5codal5Timer13getTimerEventEv>:
{
 80098b2:	b570      	push	{r4, r5, r6, lr}
    for (int i=0; i<eventListSize; i++)
 80098b4:	2300      	movs	r3, #0
        if (timerEventList[i].id == 0)
 80098b6:	260c      	movs	r6, #12
    for (int i=0; i<eventListSize; i++)
 80098b8:	6985      	ldr	r5, [r0, #24]
 80098ba:	429d      	cmp	r5, r3
 80098bc:	dd07      	ble.n	80098ce <_ZN5codal5Timer13getTimerEventEv+0x1c>
        if (timerEventList[i].id == 0)
 80098be:	fb06 f203 	mul.w	r2, r6, r3
 80098c2:	6904      	ldr	r4, [r0, #16]
 80098c4:	18a1      	adds	r1, r4, r2
 80098c6:	5aa2      	ldrh	r2, [r4, r2]
 80098c8:	b112      	cbz	r2, 80098d0 <_ZN5codal5Timer13getTimerEventEv+0x1e>
    for (int i=0; i<eventListSize; i++)
 80098ca:	3301      	adds	r3, #1
 80098cc:	e7f5      	b.n	80098ba <_ZN5codal5Timer13getTimerEventEv+0x8>
    return NULL;
 80098ce:	2100      	movs	r1, #0
}
 80098d0:	4608      	mov	r0, r1
 80098d2:	bd70      	pop	{r4, r5, r6, pc}

080098d4 <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE>:
    event->id = 0;
 80098d4:	2300      	movs	r3, #0
    if (nextTimerEvent == event)
 80098d6:	6942      	ldr	r2, [r0, #20]
    event->id = 0;
 80098d8:	800b      	strh	r3, [r1, #0]
    if (nextTimerEvent == event)
 80098da:	428a      	cmp	r2, r1
        nextTimerEvent = NULL;
 80098dc:	bf08      	it	eq
 80098de:	6143      	streq	r3, [r0, #20]
}
 80098e0:	4770      	bx	lr

080098e2 <_ZN5codal5Timer7getTimeEv>:
{
 80098e2:	b510      	push	{r4, lr}
 80098e4:	4604      	mov	r4, r0
    syncRequest();
 80098e6:	6803      	ldr	r3, [r0, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	4798      	blx	r3
}
 80098ec:	6860      	ldr	r0, [r4, #4]
 80098ee:	bd10      	pop	{r4, pc}

080098f0 <_ZN5codal5Timer9getTimeUsEv>:
{
 80098f0:	b510      	push	{r4, lr}
 80098f2:	4604      	mov	r4, r0
    syncRequest();
 80098f4:	6803      	ldr	r3, [r0, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	4798      	blx	r3
}
 80098fa:	68a0      	ldr	r0, [r4, #8]
 80098fc:	bd10      	pop	{r4, pc}

080098fe <_ZN5codal5Timer8setEventEmttb>:
{
 80098fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009902:	4604      	mov	r4, r0
 8009904:	460e      	mov	r6, r1
 8009906:	4690      	mov	r8, r2
 8009908:	461f      	mov	r7, r3
    TimerEvent *evt = getTimerEvent();
 800990a:	f7ff ffd2 	bl	80098b2 <_ZN5codal5Timer13getTimerEventEv>
    if (evt == NULL)
 800990e:	4605      	mov	r5, r0
 8009910:	b328      	cbz	r0, 800995e <_ZN5codal5Timer8setEventEmttb+0x60>
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 8009912:	4620      	mov	r0, r4
 8009914:	f7ff ffec 	bl	80098f0 <_ZN5codal5Timer9getTimeUsEv>
 8009918:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800991c:	4430      	add	r0, r6
 800991e:	2b00      	cmp	r3, #0
 8009920:	bf14      	ite	ne
 8009922:	4633      	movne	r3, r6
 8009924:	2300      	moveq	r3, #0
        CODAL_TIMESTAMP timestamp;

        void set(CODAL_TIMESTAMP timestamp, CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
        {
            this->timestamp = timestamp;
            this->period = period;
 8009926:	e9c5 3001 	strd	r3, r0, [r5, #4]
    disableInterrupts();
 800992a:	6823      	ldr	r3, [r4, #0]
            this->id = id;
 800992c:	f8a5 8000 	strh.w	r8, [r5]
 8009930:	68db      	ldr	r3, [r3, #12]
            this->value = value;
 8009932:	806f      	strh	r7, [r5, #2]
 8009934:	4620      	mov	r0, r4
 8009936:	4798      	blx	r3
    if (nextTimerEvent == NULL || evt->timestamp < nextTimerEvent->timestamp)
 8009938:	6963      	ldr	r3, [r4, #20]
 800993a:	b11b      	cbz	r3, 8009944 <_ZN5codal5Timer8setEventEmttb+0x46>
 800993c:	68aa      	ldr	r2, [r5, #8]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	429a      	cmp	r2, r3
 8009942:	d205      	bcs.n	8009950 <_ZN5codal5Timer8setEventEmttb+0x52>
        triggerIn(period);
 8009944:	6823      	ldr	r3, [r4, #0]
        nextTimerEvent = evt;
 8009946:	6165      	str	r5, [r4, #20]
        triggerIn(period);
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4631      	mov	r1, r6
 800994c:	4620      	mov	r0, r4
 800994e:	4798      	blx	r3
    enableInterrupts();
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	4620      	mov	r0, r4
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	4798      	blx	r3
    return DEVICE_OK;
 8009958:	2000      	movs	r0, #0
}
 800995a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return DEVICE_NO_RESOURCES;
 800995e:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 8009962:	e7fa      	b.n	800995a <_ZN5codal5Timer8setEventEmttb+0x5c>

08009964 <_ZN5codal5Timer12eventEveryUsEmtt>:
{
 8009964:	b513      	push	{r0, r1, r4, lr}
    return setEvent(period, id, value, true);
 8009966:	2401      	movs	r4, #1
 8009968:	9400      	str	r4, [sp, #0]
 800996a:	f7ff ffc8 	bl	80098fe <_ZN5codal5Timer8setEventEmttb>
}
 800996e:	b002      	add	sp, #8
 8009970:	bd10      	pop	{r4, pc}

08009972 <_ZN5codal5Timer4syncEm>:
    currentTimeUs += t;
 8009972:	6882      	ldr	r2, [r0, #8]
    overflow += t;
 8009974:	68c3      	ldr	r3, [r0, #12]
    currentTimeUs += t;
 8009976:	440a      	add	r2, r1
    overflow += t;
 8009978:	440b      	add	r3, r1
    currentTimeUs += t;
 800997a:	6082      	str	r2, [r0, #8]
    overflow += t;
 800997c:	60c3      	str	r3, [r0, #12]
    while(overflow >= 1000)
 800997e:	68c3      	ldr	r3, [r0, #12]
 8009980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009984:	d306      	bcc.n	8009994 <_ZN5codal5Timer4syncEm+0x22>
        overflow -= 1000;
 8009986:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800998a:	60c3      	str	r3, [r0, #12]
        currentTime += 1;
 800998c:	6843      	ldr	r3, [r0, #4]
 800998e:	3301      	adds	r3, #1
 8009990:	6043      	str	r3, [r0, #4]
    while(overflow >= 1000)
 8009992:	e7f4      	b.n	800997e <_ZN5codal5Timer4syncEm+0xc>
}
 8009994:	4770      	bx	lr

08009996 <_ZN5codal5Timer7triggerEv>:
{
 8009996:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    syncRequest();
 800999a:	6803      	ldr	r3, [r0, #0]
{
 800999c:	4604      	mov	r4, r0
    syncRequest();
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	4798      	blx	r3
                Event evt(e->id, e->value, currentTime);
 80099a2:	f04f 0801 	mov.w	r8, #1
        for (int i=0; i<eventListSize; i++)
 80099a6:	2700      	movs	r7, #0
        eventsFired = 0;
 80099a8:	463e      	mov	r6, r7
        TimerEvent *e = timerEventList;
 80099aa:	6925      	ldr	r5, [r4, #16]
        for (int i=0; i<eventListSize; i++)
 80099ac:	69a1      	ldr	r1, [r4, #24]
 80099ae:	42b9      	cmp	r1, r7
 80099b0:	dd1a      	ble.n	80099e8 <_ZN5codal5Timer7triggerEv+0x52>
            if (e->id != 0 && currentTimeUs >= e->timestamp)
 80099b2:	8829      	ldrh	r1, [r5, #0]
 80099b4:	b189      	cbz	r1, 80099da <_ZN5codal5Timer7triggerEv+0x44>
 80099b6:	68a2      	ldr	r2, [r4, #8]
 80099b8:	68ab      	ldr	r3, [r5, #8]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d30d      	bcc.n	80099da <_ZN5codal5Timer7triggerEv+0x44>
                Event evt(e->id, e->value, currentTime);
 80099be:	886a      	ldrh	r2, [r5, #2]
 80099c0:	6863      	ldr	r3, [r4, #4]
 80099c2:	f8cd 8000 	str.w	r8, [sp]
 80099c6:	a802      	add	r0, sp, #8
 80099c8:	f000 f93b 	bl	8009c42 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>
                if (e->period == 0)
 80099cc:	686a      	ldr	r2, [r5, #4]
 80099ce:	b93a      	cbnz	r2, 80099e0 <_ZN5codal5Timer7triggerEv+0x4a>
                    releaseTimerEvent(e);
 80099d0:	4629      	mov	r1, r5
 80099d2:	4620      	mov	r0, r4
 80099d4:	f7ff ff7e 	bl	80098d4 <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE>
                eventsFired++;
 80099d8:	3601      	adds	r6, #1
            e++;
 80099da:	350c      	adds	r5, #12
        for (int i=0; i<eventListSize; i++)
 80099dc:	3701      	adds	r7, #1
 80099de:	e7e5      	b.n	80099ac <_ZN5codal5Timer7triggerEv+0x16>
                    e->timestamp += e->period;
 80099e0:	68ab      	ldr	r3, [r5, #8]
 80099e2:	4413      	add	r3, r2
 80099e4:	60ab      	str	r3, [r5, #8]
 80099e6:	e7f7      	b.n	80099d8 <_ZN5codal5Timer7triggerEv+0x42>
    } while (eventsFired);
 80099e8:	2e00      	cmp	r6, #0
 80099ea:	d1dc      	bne.n	80099a6 <_ZN5codal5Timer7triggerEv+0x10>
    TimerEvent *e = timerEventList;
 80099ec:	6923      	ldr	r3, [r4, #16]
    nextTimerEvent = NULL;
 80099ee:	6166      	str	r6, [r4, #20]
    for (int i=0; i<eventListSize; i++)
 80099f0:	42b1      	cmp	r1, r6
 80099f2:	6962      	ldr	r2, [r4, #20]
 80099f4:	dd0a      	ble.n	8009a0c <_ZN5codal5Timer7triggerEv+0x76>
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
 80099f6:	8818      	ldrh	r0, [r3, #0]
 80099f8:	b128      	cbz	r0, 8009a06 <_ZN5codal5Timer7triggerEv+0x70>
 80099fa:	b11a      	cbz	r2, 8009a04 <_ZN5codal5Timer7triggerEv+0x6e>
 80099fc:	6898      	ldr	r0, [r3, #8]
 80099fe:	6892      	ldr	r2, [r2, #8]
 8009a00:	4290      	cmp	r0, r2
 8009a02:	d200      	bcs.n	8009a06 <_ZN5codal5Timer7triggerEv+0x70>
            nextTimerEvent = e;
 8009a04:	6163      	str	r3, [r4, #20]
        e++;
 8009a06:	330c      	adds	r3, #12
    for (int i=0; i<eventListSize; i++)
 8009a08:	3601      	adds	r6, #1
 8009a0a:	e7f1      	b.n	80099f0 <_ZN5codal5Timer7triggerEv+0x5a>
    if (nextTimerEvent) {
 8009a0c:	b14a      	cbz	r2, 8009a22 <_ZN5codal5Timer7triggerEv+0x8c>
        if (currentTimeUs < nextTimerEvent->timestamp)
 8009a0e:	68a1      	ldr	r1, [r4, #8]
 8009a10:	6892      	ldr	r2, [r2, #8]
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	4291      	cmp	r1, r2
 8009a16:	681b      	ldr	r3, [r3, #0]
            triggerIn(nextTimerEvent->timestamp - currentTimeUs);
 8009a18:	bf34      	ite	cc
 8009a1a:	1a51      	subcc	r1, r2, r1
            triggerIn(1);
 8009a1c:	2101      	movcs	r1, #1
 8009a1e:	4620      	mov	r0, r4
 8009a20:	4798      	blx	r3
}
 8009a22:	b004      	add	sp, #16
 8009a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a28 <_ZN5codal5TimerD1Ev>:
}
 8009a28:	4770      	bx	lr

08009a2a <_ZN5codal10MessageBus9elementAtEi>:
    Listener *l = listeners;
 8009a2a:	6940      	ldr	r0, [r0, #20]
    while (n > 0)
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	dd03      	ble.n	8009a38 <_ZN5codal10MessageBus9elementAtEi+0xe>
        if (l == NULL)
 8009a30:	b110      	cbz	r0, 8009a38 <_ZN5codal10MessageBus9elementAtEi+0xe>
        n--;
 8009a32:	3901      	subs	r1, #1
        l = l->next;
 8009a34:	69c0      	ldr	r0, [r0, #28]
    while (n > 0)
 8009a36:	e7f9      	b.n	8009a2c <_ZN5codal10MessageBus9elementAtEi+0x2>
}
 8009a38:	4770      	bx	lr

08009a3a <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE>:
      * @param method The method to invoke.
      *
      * @param method The Event to supply to the given member function.
      */
    template <typename T>
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 8009a3a:	b43f      	push	{r0, r1, r2, r3, r4, r5}
 8009a3c:	466c      	mov	r4, sp
 8009a3e:	4605      	mov	r5, r0
    {
        T* o = (T*)object;
        void (T::*m)(Event);
        memcpy(&m, method, sizeof(m));
 8009a40:	6808      	ldr	r0, [r1, #0]
 8009a42:	6849      	ldr	r1, [r1, #4]
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 8009a44:	e884 000c 	stmia.w	r4, {r2, r3}
        memcpy(&m, method, sizeof(m));
 8009a48:	ab02      	add	r3, sp, #8
 8009a4a:	c303      	stmia	r3!, {r0, r1}

        (o->*m)(e);
 8009a4c:	9b03      	ldr	r3, [sp, #12]
 8009a4e:	105a      	asrs	r2, r3, #1
 8009a50:	f013 0f01 	tst.w	r3, #1
 8009a54:	eb05 0002 	add.w	r0, r5, r2
 8009a58:	9b02      	ldr	r3, [sp, #8]
 8009a5a:	bf1c      	itt	ne
 8009a5c:	58aa      	ldrne	r2, [r5, r2]
 8009a5e:	58d3      	ldrne	r3, [r2, r3]
 8009a60:	e894 0006 	ldmia.w	r4, {r1, r2}
    }
 8009a64:	b004      	add	sp, #16
 8009a66:	bc30      	pop	{r4, r5}
        (o->*m)(e);
 8009a68:	4718      	bx	r3

08009a6a <_Z14async_callbackPv>:
{
 8009a6a:	b538      	push	{r3, r4, r5, lr}
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 8009a6c:	8883      	ldrh	r3, [r0, #4]
{
 8009a6e:	4604      	mov	r4, r0
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 8009a70:	0759      	lsls	r1, r3, #29
 8009a72:	d50a      	bpl.n	8009a8a <_Z14async_callbackPv+0x20>
        if (listener->flags & MESSAGE_BUS_LISTENER_DROP_IF_BUSY)
 8009a74:	069a      	lsls	r2, r3, #26
 8009a76:	d435      	bmi.n	8009ae4 <_Z14async_callbackPv+0x7a>
        if (listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY)
 8009a78:	06dd      	lsls	r5, r3, #27
 8009a7a:	d506      	bpl.n	8009a8a <_Z14async_callbackPv+0x20>
            listener->queue(listener->evt);
 8009a7c:	3410      	adds	r4, #16
 8009a7e:	e894 0006 	ldmia.w	r4, {r1, r2}
}
 8009a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            listener->queue(listener->evt);
 8009a86:	f7ff bdbd 	b.w	8009604 <_ZN5codal8Listener5queueENS_5EventE>
    listener->flags |= MESSAGE_BUS_LISTENER_BUSY;
 8009a8a:	f043 0304 	orr.w	r3, r3, #4
 8009a8e:	80a3      	strh	r3, [r4, #4]
 8009a90:	f104 0510 	add.w	r5, r4, #16
        if (listener->flags & MESSAGE_BUS_LISTENER_METHOD)
 8009a94:	88a2      	ldrh	r2, [r4, #4]
 8009a96:	68a3      	ldr	r3, [r4, #8]
 8009a98:	0791      	lsls	r1, r2, #30
 8009a9a:	d515      	bpl.n	8009ac8 <_Z14async_callbackPv+0x5e>
            listener->cb_method->fire(listener->evt);
 8009a9c:	e895 0006 	ldmia.w	r5, {r1, r2}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f000 f9a9 	bl	8009df8 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
 8009aa6:	88a2      	ldrh	r2, [r4, #4]
 8009aa8:	06d3      	lsls	r3, r2, #27
 8009aaa:	d518      	bpl.n	8009ade <_Z14async_callbackPv+0x74>
 8009aac:	69a3      	ldr	r3, [r4, #24]
 8009aae:	b1b3      	cbz	r3, 8009ade <_Z14async_callbackPv+0x74>
            listener->evt = item->evt;
 8009ab0:	e893 0003 	ldmia.w	r3, {r0, r1}
            listener->evt_queue = listener->evt_queue->next;
 8009ab4:	689a      	ldr	r2, [r3, #8]
            listener->evt = item->evt;
 8009ab6:	e885 0003 	stmia.w	r5, {r0, r1}
            listener->evt_queue = listener->evt_queue->next;
 8009aba:	61a2      	str	r2, [r4, #24]
            delete item;
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7f9 f855 	bl	8002b6c <_ZdlPv>
            schedule();
 8009ac2:	f7fe f817 	bl	8007af4 <_ZN5codal8scheduleEv>
 8009ac6:	e7e5      	b.n	8009a94 <_Z14async_callbackPv+0x2a>
        else if (listener->flags & MESSAGE_BUS_LISTENER_PARAMETERISED)
 8009ac8:	07d2      	lsls	r2, r2, #31
 8009aca:	d504      	bpl.n	8009ad6 <_Z14async_callbackPv+0x6c>
            listener->cb_param(listener->evt, listener->cb_arg);
 8009acc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ad0:	68e2      	ldr	r2, [r4, #12]
 8009ad2:	4798      	blx	r3
 8009ad4:	e7e7      	b.n	8009aa6 <_Z14async_callbackPv+0x3c>
            listener->cb(listener->evt);
 8009ad6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009ada:	4798      	blx	r3
 8009adc:	e7e3      	b.n	8009aa6 <_Z14async_callbackPv+0x3c>
    listener->flags &= ~MESSAGE_BUS_LISTENER_BUSY;
 8009ade:	f022 0204 	bic.w	r2, r2, #4
 8009ae2:	80a2      	strh	r2, [r4, #4]
}
 8009ae4:	bd38      	pop	{r3, r4, r5, pc}

08009ae6 <_ZThn8_N5codal10MessageBusD1Ev>:
        virtual Listener *elementAt(int n);

        /**
          * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
          */
        ~MessageBus();
 8009ae6:	f1a0 0008 	sub.w	r0, r0, #8
 8009aea:	f7fe ba95 	b.w	8008018 <_ZN5codal10MessageBusD1Ev>

08009aee <_ZN5codal10MessageBusD0Ev>:
MessageBus::~MessageBus()
 8009aee:	b510      	push	{r4, lr}
 8009af0:	4604      	mov	r4, r0
}
 8009af2:	f7fe fa91 	bl	8008018 <_ZN5codal10MessageBusD1Ev>
 8009af6:	4620      	mov	r0, r4
 8009af8:	f7f9 f838 	bl	8002b6c <_ZdlPv>
 8009afc:	4620      	mov	r0, r4
 8009afe:	bd10      	pop	{r4, pc}

08009b00 <_ZThn8_N5codal10MessageBusD0Ev>:
 8009b00:	f1a0 0008 	sub.w	r0, r0, #8
 8009b04:	f7ff bff3 	b.w	8009aee <_ZN5codal10MessageBusD0Ev>

08009b08 <_ZN5codal10MessageBus12dequeueEventEv>:
{
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4604      	mov	r4, r0
    target_disable_irq();
 8009b0c:	f7f7 f94c 	bl	8000da8 <target_disable_irq>
    if (evt_queue_head != NULL)
 8009b10:	69a5      	ldr	r5, [r4, #24]
 8009b12:	b135      	cbz	r5, 8009b22 <_ZN5codal10MessageBus12dequeueEventEv+0x1a>
        evt_queue_head = item->next;
 8009b14:	68ab      	ldr	r3, [r5, #8]
 8009b16:	61a3      	str	r3, [r4, #24]
        if (evt_queue_head == NULL)
 8009b18:	b903      	cbnz	r3, 8009b1c <_ZN5codal10MessageBus12dequeueEventEv+0x14>
            evt_queue_tail = NULL;
 8009b1a:	61e3      	str	r3, [r4, #28]
        queueLength--;
 8009b1c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	8463      	strh	r3, [r4, #34]	; 0x22
    target_enable_irq();
 8009b22:	f7f7 f93f 	bl	8000da4 <target_enable_irq>
}
 8009b26:	4628      	mov	r0, r5
 8009b28:	bd38      	pop	{r3, r4, r5, pc}

08009b2a <_ZN5codal10MessageBus21deleteMarkedListenersEv>:
{
 8009b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int removed = 0;
 8009b2e:	2500      	movs	r5, #0
{
 8009b30:	4680      	mov	r8, r0
    p = NULL;
 8009b32:	462e      	mov	r6, r5
    l = listeners;
 8009b34:	6944      	ldr	r4, [r0, #20]
    while (l != NULL)
 8009b36:	b1b4      	cbz	r4, 8009b66 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x3c>
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 8009b38:	88a3      	ldrh	r3, [r4, #4]
 8009b3a:	69e7      	ldr	r7, [r4, #28]
 8009b3c:	041a      	lsls	r2, r3, #16
 8009b3e:	d50d      	bpl.n	8009b5c <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x32>
 8009b40:	075b      	lsls	r3, r3, #29
 8009b42:	d40b      	bmi.n	8009b5c <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x32>
            if (p == NULL)
 8009b44:	b96e      	cbnz	r6, 8009b62 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x38>
                listeners = l->next;
 8009b46:	f8c8 7014 	str.w	r7, [r8, #20]
            delete t;
 8009b4a:	4620      	mov	r0, r4
            l = l->next;
 8009b4c:	69e7      	ldr	r7, [r4, #28]
            delete t;
 8009b4e:	f7ff fd4f 	bl	80095f0 <_ZN5codal8ListenerD1Ev>
 8009b52:	4620      	mov	r0, r4
 8009b54:	f7f9 f80a 	bl	8002b6c <_ZdlPv>
            continue;
 8009b58:	4634      	mov	r4, r6
            removed++;
 8009b5a:	3501      	adds	r5, #1
            continue;
 8009b5c:	4626      	mov	r6, r4
 8009b5e:	463c      	mov	r4, r7
 8009b60:	e7e9      	b.n	8009b36 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0xc>
                p->next = l->next;
 8009b62:	61f7      	str	r7, [r6, #28]
 8009b64:	e7f1      	b.n	8009b4a <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x20>
}
 8009b66:	4628      	mov	r0, r5
 8009b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009b6c <_ZN5codal10MessageBus10queueEventERNS_5EventE>:
{
 8009b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    processingComplete = this->process(evt, true);
 8009b6e:	2201      	movs	r2, #1
{
 8009b70:	4604      	mov	r4, r0
 8009b72:	460d      	mov	r5, r1
    EventQueueItem *prev = evt_queue_tail;
 8009b74:	69c7      	ldr	r7, [r0, #28]
    processingComplete = this->process(evt, true);
 8009b76:	f7fe fadf 	bl	8008138 <_ZN5codal10MessageBus7processERNS_5EventEb>
    if (processingComplete)
 8009b7a:	bb20      	cbnz	r0, 8009bc6 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x5a>
    if (queueLength >= MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 8009b7c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8009b7e:	2b09      	cmp	r3, #9
 8009b80:	d821      	bhi.n	8009bc6 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x5a>
    EventQueueItem *item = new EventQueueItem(evt);
 8009b82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009b86:	466e      	mov	r6, sp
 8009b88:	e886 0003 	stmia.w	r6, {r0, r1}
 8009b8c:	200c      	movs	r0, #12
 8009b8e:	f7f8 ffeb 	bl	8002b68 <_Znwj>
 8009b92:	e896 0006 	ldmia.w	r6, {r1, r2}
 8009b96:	4605      	mov	r5, r0
 8009b98:	f000 f85f 	bl	8009c5a <_ZN5codal14EventQueueItemC1ENS_5EventE>
    target_disable_irq();
 8009b9c:	f7f7 f904 	bl	8000da8 <target_disable_irq>
    if (prev == NULL)
 8009ba0:	b96f      	cbnz	r7, 8009bbe <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x52>
        item->next = evt_queue_head;
 8009ba2:	69a3      	ldr	r3, [r4, #24]
        evt_queue_head = item;
 8009ba4:	61a5      	str	r5, [r4, #24]
        item->next = evt_queue_head;
 8009ba6:	60ab      	str	r3, [r5, #8]
    if (item->next == NULL)
 8009ba8:	68ab      	ldr	r3, [r5, #8]
 8009baa:	b903      	cbnz	r3, 8009bae <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x42>
        evt_queue_tail = item;
 8009bac:	61e5      	str	r5, [r4, #28]
    queueLength++;
 8009bae:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	8463      	strh	r3, [r4, #34]	; 0x22
}
 8009bb4:	b003      	add	sp, #12
 8009bb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    target_enable_irq();
 8009bba:	f7f7 b8f3 	b.w	8000da4 <target_enable_irq>
        item->next = prev->next;
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	60ab      	str	r3, [r5, #8]
        prev->next = item;
 8009bc2:	60bd      	str	r5, [r7, #8]
 8009bc4:	e7f0      	b.n	8009ba8 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x3c>
}
 8009bc6:	b003      	add	sp, #12
 8009bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009bca <_ZN5codal10MessageBus4sendENS_5EventE>:
{
 8009bca:	b507      	push	{r0, r1, r2, lr}
 8009bcc:	466b      	mov	r3, sp
 8009bce:	e883 0006 	stmia.w	r3, {r1, r2}
    this->queueEvent(evt);
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	f7ff ffca 	bl	8009b6c <_ZN5codal10MessageBus10queueEventERNS_5EventE>
}
 8009bd8:	2000      	movs	r0, #0
 8009bda:	b003      	add	sp, #12
 8009bdc:	f85d fb04 	ldr.w	pc, [sp], #4

08009be0 <_ZN5codal10MessageBus4idleENS_5EventE>:
{
 8009be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009be2:	ab02      	add	r3, sp, #8
 8009be4:	4605      	mov	r5, r0
 8009be6:	e903 0006 	stmdb	r3, {r1, r2}
    this->deleteMarkedListeners();
 8009bea:	f7ff ff9e 	bl	8009b2a <_ZN5codal10MessageBus21deleteMarkedListenersEv>
    EventQueueItem *item = this->dequeueEvent();
 8009bee:	4628      	mov	r0, r5
 8009bf0:	f7ff ff8a 	bl	8009b08 <_ZN5codal10MessageBus12dequeueEventEv>
 8009bf4:	4604      	mov	r4, r0
    while (item)
 8009bf6:	b158      	cbz	r0, 8009c10 <_ZN5codal10MessageBus4idleENS_5EventE+0x30>
        this->process(item->evt);
 8009bf8:	4601      	mov	r1, r0
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	f7fe fa9b 	bl	8008138 <_ZN5codal10MessageBus7processERNS_5EventEb>
        delete item;
 8009c02:	4620      	mov	r0, r4
 8009c04:	f7f8 ffb2 	bl	8002b6c <_ZdlPv>
        if(!scheduler_runqueue_empty())
 8009c08:	f7fd ff4e 	bl	8007aa8 <_ZN5codal24scheduler_runqueue_emptyEv>
 8009c0c:	2800      	cmp	r0, #0
 8009c0e:	d1ee      	bne.n	8009bee <_ZN5codal10MessageBus4idleENS_5EventE+0xe>
}
 8009c10:	b003      	add	sp, #12
 8009c12:	bd30      	pop	{r4, r5, pc}

08009c14 <_ZN5codal5EventC1Ev>:
    this->source = 0;
 8009c14:	2300      	movs	r3, #0
Event::Event()
 8009c16:	b510      	push	{r4, lr}
    this->source = 0;
 8009c18:	6003      	str	r3, [r0, #0]
Event::Event()
 8009c1a:	4604      	mov	r4, r0
    this->timestamp = system_timer_current_time();
 8009c1c:	f7fe f93a 	bl	8007e94 <_ZN5codal25system_timer_current_timeEv>
 8009c20:	6060      	str	r0, [r4, #4]
}
 8009c22:	4620      	mov	r0, r4
 8009c24:	bd10      	pop	{r4, pc}

08009c26 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>:
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 8009c26:	b538      	push	{r3, r4, r5, lr}
    this->source = source;
 8009c28:	8001      	strh	r1, [r0, #0]
    this->value = value;
 8009c2a:	8042      	strh	r2, [r0, #2]
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	461d      	mov	r5, r3
    this->timestamp = system_timer_current_time();
 8009c30:	f7fe f930 	bl	8007e94 <_ZN5codal25system_timer_current_timeEv>
 8009c34:	6060      	str	r0, [r4, #4]
    if(mode != CREATE_ONLY)
 8009c36:	b115      	cbz	r5, 8009c3e <_ZN5codal5EventC1EttNS_15EventLaunchModeE+0x18>
        this->fire();
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f7fe fac7 	bl	80081cc <_ZN5codal5Event4fireEv>
}
 8009c3e:	4620      	mov	r0, r4
 8009c40:	bd38      	pop	{r3, r4, r5, pc}

08009c42 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>:
  Event::Event(uint16_t source, uint16_t value, CODAL_TIMESTAMP currentTimeUs, EventLaunchMode mode)
 8009c42:	b538      	push	{r3, r4, r5, lr}
 8009c44:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8009c48:	4604      	mov	r4, r0
      this->source = source;
 8009c4a:	8001      	strh	r1, [r0, #0]
      this->value = value;
 8009c4c:	8042      	strh	r2, [r0, #2]
      this->timestamp = currentTimeUs;
 8009c4e:	6043      	str	r3, [r0, #4]
      if(mode != CREATE_ONLY)
 8009c50:	b10d      	cbz	r5, 8009c56 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE+0x14>
          this->fire();
 8009c52:	f7fe fabb 	bl	80081cc <_ZN5codal5Event4fireEv>
  }
 8009c56:	4620      	mov	r0, r4
 8009c58:	bd38      	pop	{r3, r4, r5, pc}

08009c5a <_ZN5codal14EventQueueItemC1ENS_5EventE>:
  * Constructor.
  * Create a new EventQueueItem.
  *
  * @param evt The event to be queued.
  */
EventQueueItem::EventQueueItem(Event evt)
 8009c5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c5c:	4604      	mov	r4, r0
 8009c5e:	466d      	mov	r5, sp
 8009c60:	e885 0006 	stmia.w	r5, {r1, r2}
 8009c64:	f7ff ffd6 	bl	8009c14 <_ZN5codal5EventC1Ev>
{
    this->evt = evt;
 8009c68:	e895 0003 	ldmia.w	r5, {r0, r1}
    this->next = NULL;
 8009c6c:	2300      	movs	r3, #0
    this->evt = evt;
 8009c6e:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8009c72:	4620      	mov	r0, r4
    this->next = NULL;
 8009c74:	60a3      	str	r3, [r4, #8]
}
 8009c76:	b003      	add	sp, #12
 8009c78:	bd30      	pop	{r4, r5, pc}

08009c7a <_ZN5codal13ManagedStringD1Ev>:
ManagedString::~ManagedString()
 8009c7a:	b510      	push	{r4, lr}
 8009c7c:	4604      	mov	r4, r0
    ptr->decr();
 8009c7e:	6800      	ldr	r0, [r0, #0]
 8009c80:	f000 f867 	bl	8009d52 <_ZN5codal10RefCounted4decrEv>
}
 8009c84:	4620      	mov	r0, r4
 8009c86:	bd10      	pop	{r4, pc}

08009c88 <_ZN5codal13ManagedString10initStringEPKci>:
{
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	4605      	mov	r5, r0
    ptr = (StringData *) malloc(sizeof(StringData) + len + 1);
 8009c8c:	1d50      	adds	r0, r2, #5
{
 8009c8e:	4614      	mov	r4, r2
 8009c90:	460e      	mov	r6, r1
    ptr = (StringData *) malloc(sizeof(StringData) + len + 1);
 8009c92:	f7fe f865 	bl	8007d60 <device_malloc>
 8009c96:	6028      	str	r0, [r5, #0]
    REF_COUNTED_INIT(ptr);
 8009c98:	f000 f86e 	bl	8009d78 <_ZN5codal10RefCounted4initEv>
    ptr->len = len;
 8009c9c:	682b      	ldr	r3, [r5, #0]
    memcpy(ptr->data, str, len);
 8009c9e:	4622      	mov	r2, r4
    ptr->len = len;
 8009ca0:	805c      	strh	r4, [r3, #2]
    memcpy(ptr->data, str, len);
 8009ca2:	6828      	ldr	r0, [r5, #0]
 8009ca4:	4631      	mov	r1, r6
 8009ca6:	3004      	adds	r0, #4
 8009ca8:	f7f8 fcc6 	bl	8002638 <memcpy>
    ptr->data[len] = 0;
 8009cac:	682b      	ldr	r3, [r5, #0]
 8009cae:	441c      	add	r4, r3
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	7123      	strb	r3, [r4, #4]
}
 8009cb4:	bd70      	pop	{r4, r5, r6, pc}

08009cb6 <_ZN5codal13ManagedStringC1Ei>:
ManagedString::ManagedString(const int value)
 8009cb6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cb8:	4604      	mov	r4, r0
 8009cba:	4608      	mov	r0, r1
    itoa(value, str);
 8009cbc:	a901      	add	r1, sp, #4
 8009cbe:	f000 f873 	bl	8009da8 <_ZN5codal4itoaEiPc>
    initString(str, strlen(str));
 8009cc2:	a801      	add	r0, sp, #4
 8009cc4:	f7f8 fcd6 	bl	8002674 <strlen>
 8009cc8:	a901      	add	r1, sp, #4
 8009cca:	4602      	mov	r2, r0
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f7ff ffdb 	bl	8009c88 <_ZN5codal13ManagedString10initStringEPKci>
}
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	b004      	add	sp, #16
 8009cd6:	bd10      	pop	{r4, pc}

08009cd8 <_ZN5codal13ManagedStringC1ERKS0_>:
ManagedString::ManagedString(const ManagedString &s)
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	4604      	mov	r4, r0
    ptr = s.ptr;
 8009cdc:	6808      	ldr	r0, [r1, #0]
 8009cde:	6020      	str	r0, [r4, #0]
    ptr->incr();
 8009ce0:	f000 f82e 	bl	8009d40 <_ZN5codal10RefCounted4incrEv>
}
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	bd10      	pop	{r4, pc}

08009ce8 <_ZN5codal13ManagedStringaSERKS0_>:
{
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4604      	mov	r4, r0
    if (this->ptr == s.ptr)
 8009cec:	680b      	ldr	r3, [r1, #0]
 8009cee:	6800      	ldr	r0, [r0, #0]
{
 8009cf0:	460d      	mov	r5, r1
    if (this->ptr == s.ptr)
 8009cf2:	4298      	cmp	r0, r3
 8009cf4:	d005      	beq.n	8009d02 <_ZN5codal13ManagedStringaSERKS0_+0x1a>
    ptr->decr();
 8009cf6:	f000 f82c 	bl	8009d52 <_ZN5codal10RefCounted4decrEv>
    ptr = s.ptr;
 8009cfa:	6828      	ldr	r0, [r5, #0]
 8009cfc:	6020      	str	r0, [r4, #0]
    ptr->incr();
 8009cfe:	f000 f81f 	bl	8009d40 <_ZN5codal10RefCounted4incrEv>
}
 8009d02:	4620      	mov	r0, r4
 8009d04:	bd38      	pop	{r3, r4, r5, pc}

08009d06 <_ZN5codal13ManagedString6charAtEs>:
    return (index >=0 && index < length()) ? ptr->data[index] : 0;
 8009d06:	2900      	cmp	r1, #0
 8009d08:	db07      	blt.n	8009d1a <_ZN5codal13ManagedString6charAtEs+0x14>
 8009d0a:	6803      	ldr	r3, [r0, #0]
 8009d0c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009d10:	428a      	cmp	r2, r1
 8009d12:	dd02      	ble.n	8009d1a <_ZN5codal13ManagedString6charAtEs+0x14>
 8009d14:	440b      	add	r3, r1
 8009d16:	7918      	ldrb	r0, [r3, #4]
 8009d18:	4770      	bx	lr
 8009d1a:	2000      	movs	r0, #0
}
 8009d1c:	4770      	bx	lr

08009d1e <_ZL16isReadOnlyInlinePN5codal10RefCountedE>:
  */
static inline bool isReadOnlyInline(RefCounted *t)
{
    uint32_t refCount = t->refCount;

    if (refCount == 0xffff)
 8009d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
 8009d22:	b508      	push	{r3, lr}
    uint32_t refCount = t->refCount;
 8009d24:	8803      	ldrh	r3, [r0, #0]
    if (refCount == 0xffff)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d008      	beq.n	8009d3c <_ZL16isReadOnlyInlinePN5codal10RefCountedE+0x1e>
        return true; // object in flash

    // Do some sanity checking while we're here
    if (refCount == 1 ||        // object should have been deleted
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d001      	beq.n	8009d32 <_ZL16isReadOnlyInlinePN5codal10RefCountedE+0x14>
 8009d2e:	07db      	lsls	r3, r3, #31
 8009d30:	d402      	bmi.n	8009d38 <_ZL16isReadOnlyInlinePN5codal10RefCountedE+0x1a>
        (refCount & 1) == 0)    // refCount doesn't look right
        target_panic(DEVICE_HEAP_ERROR);
 8009d32:	201e      	movs	r0, #30
 8009d34:	f7f6 ffd2 	bl	8000cdc <target_panic>

    // Not read only
    return false;
 8009d38:	2000      	movs	r0, #0
 8009d3a:	e000      	b.n	8009d3e <_ZL16isReadOnlyInlinePN5codal10RefCountedE+0x20>
        return true; // object in flash
 8009d3c:	2001      	movs	r0, #1
}
 8009d3e:	bd08      	pop	{r3, pc}

08009d40 <_ZN5codal10RefCounted4incrEv>:

/**
  * Increment reference count.
  */
void RefCounted::incr()
{
 8009d40:	b510      	push	{r4, lr}
 8009d42:	4604      	mov	r4, r0
    if (!isReadOnlyInline(this))
 8009d44:	f7ff ffeb 	bl	8009d1e <_ZL16isReadOnlyInlinePN5codal10RefCountedE>
 8009d48:	b910      	cbnz	r0, 8009d50 <_ZN5codal10RefCounted4incrEv+0x10>
        refCount += 2;
 8009d4a:	8823      	ldrh	r3, [r4, #0]
 8009d4c:	3302      	adds	r3, #2
 8009d4e:	8023      	strh	r3, [r4, #0]
}
 8009d50:	bd10      	pop	{r4, pc}

08009d52 <_ZN5codal10RefCounted4decrEv>:

/**
  * Decrement reference count.
  */
void RefCounted::decr()
{
 8009d52:	b510      	push	{r4, lr}
 8009d54:	4604      	mov	r4, r0
    if (isReadOnlyInline(this))
 8009d56:	f7ff ffe2 	bl	8009d1e <_ZL16isReadOnlyInlinePN5codal10RefCountedE>
 8009d5a:	b950      	cbnz	r0, 8009d72 <_ZN5codal10RefCounted4decrEv+0x20>
        return;

    refCount -= 2;
 8009d5c:	8823      	ldrh	r3, [r4, #0]
 8009d5e:	3b02      	subs	r3, #2
 8009d60:	b29b      	uxth	r3, r3
    if (refCount == 1) {
 8009d62:	2b01      	cmp	r3, #1
    refCount -= 2;
 8009d64:	8023      	strh	r3, [r4, #0]
    if (refCount == 1) {
 8009d66:	d104      	bne.n	8009d72 <_ZN5codal10RefCounted4decrEv+0x20>
        // if we just call plain free(), the write to refCount will
        // be optimized away, and it will stay '3'; this way we make
        // sure to get a panic on next incr()/decr()
        destroy();
 8009d68:	4620      	mov	r0, r4
    }
}
 8009d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        destroy();
 8009d6e:	f000 b801 	b.w	8009d74 <_ZN5codal10RefCounted7destroyEv>
}
 8009d72:	bd10      	pop	{r4, pc}

08009d74 <_ZN5codal10RefCounted7destroyEv>:
/**
  * Releases the current instance.
  */
void RefCounted::destroy()
{
    free(this);
 8009d74:	f7fe b818 	b.w	8007da8 <device_free>

08009d78 <_ZN5codal10RefCounted4initEv>:
  * Initializes for one outstanding reference.
  */
void RefCounted::init()
{
    // Initialize to one reference (lowest bit set to 1)
    refCount = 3;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	8003      	strh	r3, [r0, #0]
}
 8009d7c:	4770      	bx	lr

08009d7e <_ZN5codal14string_reverseEPc>:
  * @param s the string to reverse.
  *
  * @return DEVICE_OK, or DEVICE_INVALID_PARAMETER.
  */
int codal::string_reverse(char *s)
{
 8009d7e:	b510      	push	{r4, lr}
    //sanity check...
    if(s == NULL)
 8009d80:	4604      	mov	r4, r0
 8009d82:	b160      	cbz	r0, 8009d9e <_ZN5codal14string_reverseEPc+0x20>
        return DEVICE_INVALID_PARAMETER;

    char *j;
    int c;

    j = s + strlen(s) - 1;
 8009d84:	f7f8 fc76 	bl	8002674 <strlen>
 8009d88:	3801      	subs	r0, #1
 8009d8a:	4420      	add	r0, r4

    while(s < j)
 8009d8c:	4284      	cmp	r4, r0
 8009d8e:	d209      	bcs.n	8009da4 <_ZN5codal14string_reverseEPc+0x26>
    {
        c = *s;
 8009d90:	7823      	ldrb	r3, [r4, #0]
        *s++ = *j;
 8009d92:	7802      	ldrb	r2, [r0, #0]
 8009d94:	f804 2b01 	strb.w	r2, [r4], #1
        *j-- = c;
 8009d98:	f800 3901 	strb.w	r3, [r0], #-1
    while(s < j)
 8009d9c:	e7f6      	b.n	8009d8c <_ZN5codal14string_reverseEPc+0xe>
        return DEVICE_INVALID_PARAMETER;
 8009d9e:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
    }

    return DEVICE_OK;
}
 8009da2:	bd10      	pop	{r4, pc}
    return DEVICE_OK;
 8009da4:	2000      	movs	r0, #0
 8009da6:	e7fc      	b.n	8009da2 <_ZN5codal14string_reverseEPc+0x24>

08009da8 <_ZN5codal4itoaEiPc>:
  * @param s A pointer to the buffer where the resulting string will be stored.
  *
  * @return DEVICE_OK, or DEVICE_INVALID_PARAMETER.
  */
int codal::itoa(int n, char *s)
{
 8009da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int i = 0;
    int positive = (n >= 0);

    if (s == NULL)
 8009daa:	b311      	cbz	r1, 8009df2 <_ZN5codal4itoaEiPc+0x4a>
 8009dac:	2500      	movs	r5, #0
    if (positive)
        n = -n;

    // Calculate each character, starting with the LSB.
    do {
         s[i++] = abs(n % 10) + '0';
 8009dae:	270a      	movs	r7, #10
 8009db0:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8009db4:	ebc3 73e0 	rsb	r3, r3, r0, asr #31
 8009db8:	1e4e      	subs	r6, r1, #1
 8009dba:	fb93 f4f7 	sdiv	r4, r3, r7
 8009dbe:	fb07 3314 	mls	r3, r7, r4, r3
 8009dc2:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 8009dc6:	f806 3f01 	strb.w	r3, [r6, #1]!
    } while (abs(n /= 10) > 0);
 8009dca:	4623      	mov	r3, r4
 8009dcc:	4264      	negs	r4, r4
         s[i++] = abs(n % 10) + '0';
 8009dce:	1c6a      	adds	r2, r5, #1
    } while (abs(n /= 10) > 0);
 8009dd0:	b96c      	cbnz	r4, 8009dee <_ZN5codal4itoaEiPc+0x46>

    // Add a negative sign as needed
    if (!positive)
 8009dd2:	2800      	cmp	r0, #0
        s[i++] = '-';
 8009dd4:	bfbc      	itt	lt
 8009dd6:	232d      	movlt	r3, #45	; 0x2d
 8009dd8:	548b      	strblt	r3, [r1, r2]

    // Terminate the string.
    s[i] = '\0';
 8009dda:	f04f 0300 	mov.w	r3, #0
        s[i++] = '-';
 8009dde:	bfb8      	it	lt
 8009de0:	1caa      	addlt	r2, r5, #2
    s[i] = '\0';
 8009de2:	548b      	strb	r3, [r1, r2]

    // Flip the order.
    string_reverse(s);
 8009de4:	4608      	mov	r0, r1
 8009de6:	f7ff ffca 	bl	8009d7e <_ZN5codal14string_reverseEPc>

    return DEVICE_OK;
}
 8009dea:	4620      	mov	r0, r4
 8009dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         s[i++] = abs(n % 10) + '0';
 8009dee:	4615      	mov	r5, r2
 8009df0:	e7e3      	b.n	8009dba <_ZN5codal4itoaEiPc+0x12>
        return DEVICE_INVALID_PARAMETER;
 8009df2:	f46f 747a 	mvn.w	r4, #1000	; 0x3e8
 8009df6:	e7f8      	b.n	8009dea <_ZN5codal4itoaEiPc+0x42>

08009df8 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>:
  * Calls the method reference held by this MemberFunctionCallback.
  *
  * @param e The event to deliver to the method
  */
void MemberFunctionCallback::fire(Event e)
{
 8009df8:	b417      	push	{r0, r1, r2, r4}
 8009dfa:	466b      	mov	r3, sp
    invoke(object, method, e);
 8009dfc:	6944      	ldr	r4, [r0, #20]
{
 8009dfe:	e883 0006 	stmia.w	r3, {r1, r2}
    invoke(object, method, e);
 8009e02:	46a4      	mov	ip, r4
 8009e04:	cb0c      	ldmia	r3, {r2, r3}
 8009e06:	1d01      	adds	r1, r0, #4
 8009e08:	6800      	ldr	r0, [r0, #0]
}
 8009e0a:	b003      	add	sp, #12
 8009e0c:	bc10      	pop	{r4}
    invoke(object, method, e);
 8009e0e:	4760      	bx	ip

08009e10 <_ZN5codal22MemberFunctionCallbackeqERKS0_>:
  * A comparison of two MemberFunctionCallback objects.
  *
  * @return true if the given MemberFunctionCallback is equivalent to this one, false otherwise.
  */
bool MemberFunctionCallback::operator==(const MemberFunctionCallback &mfc)
{
 8009e10:	b508      	push	{r3, lr}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 8009e12:	6802      	ldr	r2, [r0, #0]
 8009e14:	680b      	ldr	r3, [r1, #0]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d108      	bne.n	8009e2c <_ZN5codal22MemberFunctionCallbackeqERKS0_+0x1c>
 8009e1a:	2210      	movs	r2, #16
 8009e1c:	3104      	adds	r1, #4
 8009e1e:	3004      	adds	r0, #4
 8009e20:	f7f8 fbfb 	bl	800261a <memcmp>
 8009e24:	fab0 f080 	clz	r0, r0
 8009e28:	0940      	lsrs	r0, r0, #5
}
 8009e2a:	bd08      	pop	{r3, pc}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	e7fc      	b.n	8009e2a <_ZN5codal22MemberFunctionCallbackeqERKS0_+0x1a>

08009e30 <_ZN5codal3Pin15setServoPulseUsEm>:
          *         if the given pin does not have analog capability.
          */
        virtual int setServoPulseUs(uint32_t pulseWidth)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 8009e30:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 8009e34:	4770      	bx	lr

08009e36 <_ZN5codal3Pin17setAnalogPeriodUsEm>:
          *         given pin is not configured as an analog output.
          */
        virtual int setAnalogPeriodUs(uint32_t period)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 8009e36:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 8009e3a:	4770      	bx	lr

08009e3c <_ZN5codal3Pin8drainPinEv>:
          *         than a digital input, otherwise DEVICE_OK.
          */
        virtual int drainPin()
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 8009e3c:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 8009e40:	4770      	bx	lr

08009e42 <_ZN5codal3_cm3Pin15getDigitalValueEv>:
}
 8009e42:	2001      	movs	r0, #1
 8009e44:	4770      	bx	lr

08009e46 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE>:
{
 8009e46:	b510      	push	{r4, lr}
 8009e48:	4604      	mov	r4, r0
    setPull(pull);
 8009e4a:	6803      	ldr	r3, [r0, #0]
 8009e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e4e:	4798      	blx	r3
    return getDigitalValue();
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	4620      	mov	r0, r4
}
 8009e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getDigitalValue();
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	4718      	bx	r3

08009e5c <_ZN5codal3_cm3Pin14getAnalogValueEv>:
}
 8009e5c:	20e1      	movs	r0, #225	; 0xe1
 8009e5e:	4770      	bx	lr

08009e60 <_ZN5codal3_cm3Pin7isInputEv>:
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_ANALOG_IN)) == 0 ? 0 : 1;
 8009e60:	8980      	ldrh	r0, [r0, #12]
 8009e62:	f000 0005 	and.w	r0, r0, #5
}
 8009e66:	3000      	adds	r0, #0
 8009e68:	bf18      	it	ne
 8009e6a:	2001      	movne	r0, #1
 8009e6c:	4770      	bx	lr

08009e6e <_ZN5codal3_cm3Pin8isOutputEv>:
    return (status & (IO_STATUS_DIGITAL_OUT | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 8009e6e:	8980      	ldrh	r0, [r0, #12]
 8009e70:	f000 000a 	and.w	r0, r0, #10
}
 8009e74:	3000      	adds	r0, #0
 8009e76:	bf18      	it	ne
 8009e78:	2001      	movne	r0, #1
 8009e7a:	4770      	bx	lr

08009e7c <_ZN5codal3_cm3Pin9isDigitalEv>:
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_DIGITAL_OUT)) == 0 ? 0 : 1;
 8009e7c:	8980      	ldrh	r0, [r0, #12]
}
 8009e7e:	f010 0003 	ands.w	r0, r0, #3
 8009e82:	bf18      	it	ne
 8009e84:	2001      	movne	r0, #1
 8009e86:	4770      	bx	lr

08009e88 <_ZN5codal3_cm3Pin8isAnalogEv>:
    return (status & (IO_STATUS_ANALOG_IN | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 8009e88:	8980      	ldrh	r0, [r0, #12]
 8009e8a:	f000 000c 	and.w	r0, r0, #12
}
 8009e8e:	3000      	adds	r0, #0
 8009e90:	bf18      	it	ne
 8009e92:	2001      	movne	r0, #1
 8009e94:	4770      	bx	lr

08009e96 <_ZN5codal3_cm3Pin15getAnalogPeriodEv>:
  *
  * @return the period on success, or DEVICE_NOT_SUPPORTED if the
  *         given pin is not configured as an analog output.
  */
int Pin::getAnalogPeriod()
{
 8009e96:	b508      	push	{r3, lr}
    return getAnalogPeriodUs()/1000;
 8009e98:	6803      	ldr	r3, [r0, #0]
 8009e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e9c:	4798      	blx	r3
}
 8009e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009ea2:	fbb0 f0f3 	udiv	r0, r0, r3
 8009ea6:	bd08      	pop	{r3, pc}

08009ea8 <_ZN5codal3_cm3Pin7setPullENS_8PullModeE>:
  * @return DEVICE_NOT_SUPPORTED if the current pin configuration is anything other
  *         than a digital input, otherwise DEVICE_OK.
  */
int Pin::setPull(PullMode pull)
{
    pullMode = pull;
 8009ea8:	6081      	str	r1, [r0, #8]
        return DEVICE_OK;
    }

    return DEVICE_NOT_SUPPORTED;
#endif  //  TODO
}
 8009eaa:	2000      	movs	r0, #0
 8009eac:	4770      	bx	lr

08009eae <_ZN5codal3_cm3Pin5setupEhh>:
) {
 8009eae:	b570      	push	{r4, r5, r6, lr}
 8009eb0:	4604      	mov	r4, r0
 8009eb2:	460d      	mov	r5, r1
 8009eb4:	4616      	mov	r6, r2
	rcc_periph_clock_enable((enum rcc_periph_clken) this->rcc);
 8009eb6:	8a80      	ldrh	r0, [r0, #20]
 8009eb8:	f7f7 fe26 	bl	8001b08 <rcc_periph_clock_enable>
	gpio_set_mode(this->port, mode, cnf, this->pin);
 8009ebc:	8ba3      	ldrh	r3, [r4, #28]
 8009ebe:	4632      	mov	r2, r6
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	69a0      	ldr	r0, [r4, #24]
}
 8009ec4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gpio_set_mode(this->port, mode, cnf, this->pin);
 8009ec8:	f7f7 bde4 	b.w	8001a94 <gpio_set_mode>

08009ecc <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>:
    if (!(status & IO_STATUS_ANALOG_OUT))
 8009ecc:	8981      	ldrh	r1, [r0, #12]
 8009ece:	f011 0108 	ands.w	r1, r1, #8
 8009ed2:	d102      	bne.n	8009eda <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi+0xe>
        ret = setAnalogValue(0);
 8009ed4:	6803      	ldr	r3, [r0, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	4718      	bx	r3
}
 8009eda:	2000      	movs	r0, #0
 8009edc:	4770      	bx	lr

08009ede <_ZN5codal3_cm3Pin15setAnalogPeriodEi>:
    return setAnalogPeriodUs(period*1000);
 8009ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009ee2:	4359      	muls	r1, r3
 8009ee4:	f7ff bff2 	b.w	8009ecc <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>

08009ee8 <_ZN5codal3_cm3Pin13disableEventsEv>:
  *
  * @return DEVICE_OK on success.
  */
int Pin::disableEvents()
{
    if (status & (IO_STATUS_EVENT_ON_EDGE | IO_STATUS_EVENT_PULSE_ON_EDGE | IO_STATUS_TOUCH_IN))
 8009ee8:	8983      	ldrh	r3, [r0, #12]
 8009eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009eee:	b10b      	cbz	r3, 8009ef4 <_ZN5codal3_cm3Pin13disableEventsEv+0xc>
    this->status = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	8183      	strh	r3, [r0, #12]
        disconnect();

    return DEVICE_OK;
}
 8009ef4:	2000      	movs	r0, #0
 8009ef6:	4770      	bx	lr

08009ef8 <_ZN5codal3_cm3Pin7eventOnEi>:
  *
  * @note In the DEVICE_PIN_EVENT_ON_PULSE mode, the smallest pulse that was reliably detected was 85us, around 5khz. If more precision is required,
  *       please use the InterruptIn class supplied by ARM mbed.
  */
int Pin::eventOn(int eventType)
{
 8009ef8:	b508      	push	{r3, lr}
    switch(eventType)
 8009efa:	2903      	cmp	r1, #3
 8009efc:	d80c      	bhi.n	8009f18 <_ZN5codal3_cm3Pin7eventOnEi+0x20>
 8009efe:	e8df f001 	tbb	[pc, r1]
 8009f02:	0508      	.short	0x0508
 8009f04:	0205      	.short	0x0205
        case DEVICE_PIN_EVENT_ON_PULSE:
            enableRiseFallEvents(eventType);
            break;

        case DEVICE_PIN_EVENT_ON_TOUCH:
            isTouched();
 8009f06:	6803      	ldr	r3, [r0, #0]
 8009f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0a:	4798      	blx	r3
 8009f0c:	2100      	movs	r1, #0
        default:
            return DEVICE_INVALID_PARAMETER;
    }

    return DEVICE_OK;
}
 8009f0e:	4608      	mov	r0, r1
 8009f10:	bd08      	pop	{r3, pc}
            disableEvents();
 8009f12:	f7ff ffe9 	bl	8009ee8 <_ZN5codal3_cm3Pin13disableEventsEv>
            break;
 8009f16:	e7fa      	b.n	8009f0e <_ZN5codal3_cm3Pin7eventOnEi+0x16>
            return DEVICE_INVALID_PARAMETER;
 8009f18:	f46f 717a 	mvn.w	r1, #1000	; 0x3e8
 8009f1c:	e7f7      	b.n	8009f0e <_ZN5codal3_cm3Pin7eventOnEi+0x16>

08009f1e <_ZN5codal3_cm6Serial15enableInterruptENS_19SerialInterruptTypeE>:
        {
            ////TODO
            int enableInterrupt(SerialInterruptType t) { return 0; }
 8009f1e:	2000      	movs	r0, #0
 8009f20:	4770      	bx	lr

08009f22 <_ZN5codal3_cm6Serial16disableInterruptENS_19SerialInterruptTypeE>:
            int disableInterrupt(SerialInterruptType t) { return 0; }
 8009f22:	2000      	movs	r0, #0
 8009f24:	4770      	bx	lr

08009f26 <_ZN5codal3_cm6Serial11setBaudrateEm>:
            int setBaudrate(uint32_t baudrate) { return 0; }
 8009f26:	2000      	movs	r0, #0
 8009f28:	4770      	bx	lr

08009f2a <_ZN5codal3_cm6Serial13configurePinsERNS_3PinES3_>:
            int configurePins(codal::Pin& tx, codal::Pin& rx) { return 0; }
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	4770      	bx	lr

08009f2e <_ZN5codal3_cm6Serial4putcEc>:
            int putc(char c) { return 1; }
 8009f2e:	2001      	movs	r0, #1
 8009f30:	4770      	bx	lr

08009f32 <_ZN5codal3_cm6Serial4getcEv>:
            int getc() { return -1; }
 8009f32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f36:	4770      	bx	lr

08009f38 <_ZN5codal3_cm6SerialD0Ev>:
        class Serial : public codal::Serial
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	f7fe f9fe 	bl	800833c <_ZN5codal3_cm6SerialD1Ev>
 8009f40:	4620      	mov	r0, r4
 8009f42:	f7f8 fe13 	bl	8002b6c <_ZdlPv>
 8009f46:	4620      	mov	r0, r4
 8009f48:	bd10      	pop	{r4, pc}

08009f4a <_ZN5codal3_cm6Serial12initialiseRxEv>:
        {
 8009f4a:	b538      	push	{r3, r4, r5, lr}
            if((status & CODAL_SERIAL_RX_BUFF_INIT))
 8009f4c:	88c3      	ldrh	r3, [r0, #6]
        {
 8009f4e:	4604      	mov	r4, r0
            if((status & CODAL_SERIAL_RX_BUFF_INIT))
 8009f50:	075b      	lsls	r3, r3, #29
 8009f52:	d502      	bpl.n	8009f5a <_ZN5codal3_cm6Serial12initialiseRxEv+0x10>
                free(this->rxBuff);
 8009f54:	6980      	ldr	r0, [r0, #24]
 8009f56:	f7fd ff27 	bl	8007da8 <device_free>
            status &= ~CODAL_SERIAL_RX_BUFF_INIT;
 8009f5a:	88e5      	ldrh	r5, [r4, #6]
            if((this->rxBuff = (uint8_t *)malloc(rxBuffSize)) == NULL)
 8009f5c:	7f20      	ldrb	r0, [r4, #28]
            status &= ~CODAL_SERIAL_RX_BUFF_INIT;
 8009f5e:	f025 0504 	bic.w	r5, r5, #4
 8009f62:	b2ad      	uxth	r5, r5
 8009f64:	80e5      	strh	r5, [r4, #6]
            if((this->rxBuff = (uint8_t *)malloc(rxBuffSize)) == NULL)
 8009f66:	f7fd fefb 	bl	8007d60 <device_malloc>
 8009f6a:	61a0      	str	r0, [r4, #24]
 8009f6c:	b130      	cbz	r0, 8009f7c <_ZN5codal3_cm6Serial12initialiseRxEv+0x32>
            this->rxBuffHead = 0;
 8009f6e:	2000      	movs	r0, #0
            status |= CODAL_SERIAL_RX_BUFF_INIT;
 8009f70:	f045 0504 	orr.w	r5, r5, #4
            this->rxBuffHead = 0;
 8009f74:	83e0      	strh	r0, [r4, #30]
            this->rxBuffTail = 0;
 8009f76:	8420      	strh	r0, [r4, #32]
            status |= CODAL_SERIAL_RX_BUFF_INIT;
 8009f78:	80e5      	strh	r5, [r4, #6]
        }
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
                return DEVICE_NO_RESOURCES;
 8009f7c:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 8009f80:	e7fb      	b.n	8009f7a <_ZN5codal3_cm6Serial12initialiseRxEv+0x30>

08009f82 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt>:
        {
 8009f82:	b530      	push	{r4, r5, lr}
 8009f84:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8009f88:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8009f8c:	3b01      	subs	r3, #1
            while(tailPosition != headPosition)
 8009f8e:	42a8      	cmp	r0, r5
 8009f90:	d009      	beq.n	8009fa6 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt+0x24>
                linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 8009f92:	5c0c      	ldrb	r4, [r1, r0]
                tailPosition = (tailPosition + 1) % circularBuffSize;
 8009f94:	3001      	adds	r0, #1
                linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 8009f96:	f803 4f01 	strb.w	r4, [r3, #1]!
                tailPosition = (tailPosition + 1) % circularBuffSize;
 8009f9a:	fb90 f4f2 	sdiv	r4, r0, r2
 8009f9e:	fb02 0014 	mls	r0, r2, r4, r0
 8009fa2:	b280      	uxth	r0, r0
            while(tailPosition != headPosition)
 8009fa4:	e7f3      	b.n	8009f8e <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt+0xc>
        }
 8009fa6:	bd30      	pop	{r4, r5, pc}

08009fa8 <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>:
          *
          * @note delimeters are matched on a per byte basis.
          */
        int Serial::eventOn(ManagedString delimeters, SerialMode mode)
        {
            if(mode == SYNC_SPINWAIT)
 8009fa8:	2a01      	cmp	r2, #1
        {
 8009faa:	b510      	push	{r4, lr}
 8009fac:	4614      	mov	r4, r2
            if(mode == SYNC_SPINWAIT)
 8009fae:	d00a      	beq.n	8009fc6 <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x1e>
                return DEVICE_INVALID_PARAMETER;

            //configure our head match...
            this->delimeters = delimeters;
 8009fb0:	3010      	adds	r0, #16
 8009fb2:	f7ff fe99 	bl	8009ce8 <_ZN5codal13ManagedStringaSERKS0_>

            //block!
            if(mode == SYNC_SLEEP)
 8009fb6:	2c02      	cmp	r4, #2
 8009fb8:	d103      	bne.n	8009fc2 <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x1a>
                fiber_wait_for_event(DEVICE_ID_SERIAL, CODAL_SERIAL_EVT_DELIM_MATCH);
 8009fba:	2101      	movs	r1, #1
 8009fbc:	200c      	movs	r0, #12
 8009fbe:	f7ff fa94 	bl	80094ea <_ZN5codal20fiber_wait_for_eventEtt>

            return DEVICE_OK;
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	e001      	b.n	8009fca <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x22>
                return DEVICE_INVALID_PARAMETER;
 8009fc6:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
        }
 8009fca:	bd10      	pop	{r4, pc}

08009fcc <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE>:
        {
 8009fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd0:	b087      	sub	sp, #28
 8009fd2:	469a      	mov	sl, r3
          *
          * @note Only one fiber can call read at a time
          */
        int Serial::rxInUse()
        {
            return (status & CODAL_SERIAL_RX_IN_USE);
 8009fd4:	88cb      	ldrh	r3, [r1, #6]
        {
 8009fd6:	af02      	add	r7, sp, #8
 8009fd8:	4693      	mov	fp, r2
            if(rxInUse())
 8009fda:	07da      	lsls	r2, r3, #31
        {
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	460c      	mov	r4, r1
            if(rxInUse())
 8009fe0:	d502      	bpl.n	8009fe8 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1c>
            return ManagedString();
 8009fe2:	f7fe f91d 	bl	8008220 <_ZN5codal13ManagedStringC1Ev>
 8009fe6:	e009      	b.n	8009ffc <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x30>
            if(!(status & CODAL_SERIAL_RX_BUFF_INIT))
 8009fe8:	075b      	lsls	r3, r3, #29
 8009fea:	d40c      	bmi.n	800a006 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x3a>
                int result = initialiseRx();
 8009fec:	4608      	mov	r0, r1
 8009fee:	f7ff ffac 	bl	8009f4a <_ZN5codal3_cm6Serial12initialiseRxEv>
                if(result != DEVICE_OK)
 8009ff2:	4601      	mov	r1, r0
 8009ff4:	b138      	cbz	r0, 800a006 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x3a>
                    return result;
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7ff fe5d 	bl	8009cb6 <_ZN5codal13ManagedStringC1Ei>
        }
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            int localTail = rxBuffTail;
 800a006:	8c26      	ldrh	r6, [r4, #32]
            int foundIndex = -1;
 800a008:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
            int localTail = rxBuffTail;
 800a00c:	46b1      	mov	r9, r6
            status |= CODAL_SERIAL_RX_IN_USE;
 800a00e:	88e3      	ldrh	r3, [r4, #6]
 800a010:	f043 0301 	orr.w	r3, r3, #1
 800a014:	80e3      	strh	r3, [r4, #6]
            while(localTail != rxBuffHead && foundIndex  == -1)
 800a016:	8be5      	ldrh	r5, [r4, #30]
 800a018:	b2ad      	uxth	r5, r5
 800a01a:	454d      	cmp	r5, r9
 800a01c:	d017      	beq.n	800a04e <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x82>
 800a01e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a022:	d168      	bne.n	800a0f6 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x12a>
                for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800a024:	2500      	movs	r5, #0
                char c = rxBuff[localTail];
 800a026:	69a2      	ldr	r2, [r4, #24]
 800a028:	f812 2009 	ldrb.w	r2, [r2, r9]
 800a02c:	f8db 1000 	ldr.w	r1, [fp]
 800a030:	603a      	str	r2, [r7, #0]
                for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800a032:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800a036:	42a9      	cmp	r1, r5
 800a038:	dd28      	ble.n	800a08c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xc0>
                    if(delimeters.charAt(delimeterIterator) == c)
 800a03a:	b229      	sxth	r1, r5
 800a03c:	4658      	mov	r0, fp
 800a03e:	f7ff fe62 	bl	8009d06 <_ZN5codal13ManagedString6charAtEs>
 800a042:	683a      	ldr	r2, [r7, #0]
                for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800a044:	3501      	adds	r5, #1
 800a046:	4290      	cmp	r0, r2
 800a048:	bf08      	it	eq
 800a04a:	46c8      	moveq	r8, r9
 800a04c:	e7ee      	b.n	800a02c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x60>
            if(mode == SYNC_SPINWAIT)
 800a04e:	f1ba 0f01 	cmp.w	sl, #1
 800a052:	d12a      	bne.n	800a0aa <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
                while(foundIndex == -1)
 800a054:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a058:	d14d      	bne.n	800a0f6 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x12a>
                    while(localTail == rxBuffHead);
 800a05a:	8be2      	ldrh	r2, [r4, #30]
 800a05c:	4295      	cmp	r5, r2
 800a05e:	d0fc      	beq.n	800a05a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x8e>
                    for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800a060:	f04f 0900 	mov.w	r9, #0
                    char c = rxBuff[localTail];
 800a064:	69a2      	ldr	r2, [r4, #24]
 800a066:	f812 a005 	ldrb.w	sl, [r2, r5]
 800a06a:	f8db 2000 	ldr.w	r2, [fp]
                    for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800a06e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800a072:	454a      	cmp	r2, r9
 800a074:	dd12      	ble.n	800a09c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd0>
                        if(delimeters.charAt(delimeterIterator) == c)
 800a076:	fa0f f189 	sxth.w	r1, r9
 800a07a:	4658      	mov	r0, fp
 800a07c:	f7ff fe43 	bl	8009d06 <_ZN5codal13ManagedString6charAtEs>
                    for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800a080:	f109 0901 	add.w	r9, r9, #1
 800a084:	4550      	cmp	r0, sl
 800a086:	bf08      	it	eq
 800a088:	46a8      	moveq	r8, r5
 800a08a:	e7ee      	b.n	800a06a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x9e>
                localTail = (localTail + 1) % rxBuffSize;
 800a08c:	7f22      	ldrb	r2, [r4, #28]
 800a08e:	f109 0901 	add.w	r9, r9, #1
 800a092:	fb99 f1f2 	sdiv	r1, r9, r2
 800a096:	fb02 9911 	mls	r9, r2, r1, r9
            while(localTail != rxBuffHead && foundIndex  == -1)
 800a09a:	e7bc      	b.n	800a016 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x4a>
                    localTail = (localTail + 1) % rxBuffSize;
 800a09c:	7f22      	ldrb	r2, [r4, #28]
 800a09e:	3501      	adds	r5, #1
 800a0a0:	fb95 f1f2 	sdiv	r1, r5, r2
 800a0a4:	fb02 5511 	mls	r5, r2, r1, r5
                while(foundIndex == -1)
 800a0a8:	e7d4      	b.n	800a054 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x88>
            if(mode == SYNC_SLEEP && foundIndex == -1)
 800a0aa:	f1ba 0f02 	cmp.w	sl, #2
 800a0ae:	d122      	bne.n	800a0f6 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x12a>
 800a0b0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800a0b4:	d11f      	bne.n	800a0f6 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x12a>
                eventOn(delimeters, mode);
 800a0b6:	4659      	mov	r1, fp
 800a0b8:	f107 000c 	add.w	r0, r7, #12
 800a0bc:	f7ff fe0c 	bl	8009cd8 <_ZN5codal13ManagedStringC1ERKS0_>
 800a0c0:	4652      	mov	r2, sl
 800a0c2:	f107 010c 	add.w	r1, r7, #12
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f7ff ff6e 	bl	8009fa8 <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>
 800a0cc:	f107 000c 	add.w	r0, r7, #12
 800a0d0:	f7ff fdd3 	bl	8009c7a <_ZN5codal13ManagedStringD1Ev>
                foundIndex = rxBuffHead - 1;
 800a0d4:	8be3      	ldrh	r3, [r4, #30]
                this->delimeters = ManagedString();
 800a0d6:	f107 000c 	add.w	r0, r7, #12
                foundIndex = rxBuffHead - 1;
 800a0da:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
                this->delimeters = ManagedString();
 800a0de:	f7fe f89f 	bl	8008220 <_ZN5codal13ManagedStringC1Ev>
 800a0e2:	f107 010c 	add.w	r1, r7, #12
 800a0e6:	f104 0010 	add.w	r0, r4, #16
 800a0ea:	f7ff fdfd 	bl	8009ce8 <_ZN5codal13ManagedStringaSERKS0_>
 800a0ee:	f107 000c 	add.w	r0, r7, #12
 800a0f2:	f7ff fdc2 	bl	8009c7a <_ZN5codal13ManagedStringD1Ev>
            if(foundIndex >= 0)
 800a0f6:	f1b8 0f00 	cmp.w	r8, #0
 800a0fa:	db34      	blt.n	800a166 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x19a>
 800a0fc:	f894 a01c 	ldrb.w	sl, [r4, #28]
                int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 800a100:	45b0      	cmp	r8, r6
 800a102:	bfba      	itte	lt
 800a104:	ebaa 0506 	sublt.w	r5, sl, r6
 800a108:	4445      	addlt	r5, r8
 800a10a:	eba8 0506 	subge.w	r5, r8, r6
                uint8_t localBuff[localBuffSize + 1];
 800a10e:	f105 0208 	add.w	r2, r5, #8
 800a112:	f022 0207 	bic.w	r2, r2, #7
                return ManagedString((char *)localBuff, localBuffSize);
 800a116:	46eb      	mov	fp, sp
                uint8_t localBuff[localBuffSize + 1];
 800a118:	ebad 0d02 	sub.w	sp, sp, r2
 800a11c:	f10d 0908 	add.w	r9, sp, #8
 800a120:	1c6a      	adds	r2, r5, #1
 800a122:	2100      	movs	r1, #0
 800a124:	4648      	mov	r0, r9
 800a126:	f7f8 fa95 	bl	8002654 <memset>
                circularCopy(rxBuff, rxBuffSize, localBuff, preservedTail, foundIndex);
 800a12a:	fa1f f388 	uxth.w	r3, r8
 800a12e:	e9cd 6300 	strd	r6, r3, [sp]
 800a132:	4652      	mov	r2, sl
 800a134:	464b      	mov	r3, r9
 800a136:	69a1      	ldr	r1, [r4, #24]
 800a138:	4620      	mov	r0, r4
 800a13a:	f7ff ff22 	bl	8009f82 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt>
                rxBuffTail = (rxBuffTail + localBuffSize + 1) % rxBuffSize;
 800a13e:	8c23      	ldrh	r3, [r4, #32]
 800a140:	7f21      	ldrb	r1, [r4, #28]
 800a142:	3301      	adds	r3, #1
 800a144:	442b      	add	r3, r5
 800a146:	fb93 f2f1 	sdiv	r2, r3, r1
 800a14a:	fb01 3312 	mls	r3, r1, r2, r3
 800a14e:	8423      	strh	r3, [r4, #32]
            status &= ~CODAL_SERIAL_RX_IN_USE;
 800a150:	88e3      	ldrh	r3, [r4, #6]
                return ManagedString((char *)localBuff, localBuffSize);
 800a152:	b22a      	sxth	r2, r5
            status &= ~CODAL_SERIAL_RX_IN_USE;
 800a154:	f023 0301 	bic.w	r3, r3, #1
 800a158:	80e3      	strh	r3, [r4, #6]
                return ManagedString((char *)localBuff, localBuffSize);
 800a15a:	4649      	mov	r1, r9
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f7fe f845 	bl	80081ec <_ZN5codal13ManagedStringC1EPKcs>
 800a162:	46dd      	mov	sp, fp
 800a164:	e74a      	b.n	8009ffc <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x30>
            status &= ~CODAL_SERIAL_RX_IN_USE;
 800a166:	88e3      	ldrh	r3, [r4, #6]
            return ManagedString();
 800a168:	6878      	ldr	r0, [r7, #4]
            status &= ~CODAL_SERIAL_RX_IN_USE;
 800a16a:	f023 0301 	bic.w	r3, r3, #1
 800a16e:	80e3      	strh	r3, [r4, #6]
 800a170:	e737      	b.n	8009fe2 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x16>

0800a172 <_ZN5codal13STM32BluePill16periodicCallbackEv>:
    codal_dmesg_flush();
}

void STM32BluePill::periodicCallback() {
    //  TODO
}
 800a172:	4770      	bx	lr

0800a174 <_ZN5codal13STM32BluePill12idleCallbackEv>:
    codal_dmesg_flush();
 800a174:	f7fd baf6 	b.w	8007764 <codal_dmesg_flush>

0800a178 <_ZN13UARTInterfaceC1Ejj>:
}
 800a178:	4770      	bx	lr

0800a17a <_ZN5codal3_cm3I2C12setFrequencyEm>:
#ifdef TODO            
            i2c.Init.ClockSpeed = frequency;
            needsInit = true;
#endif  //  TODO
            return DEVICE_OK;
        }
 800a17a:	2000      	movs	r0, #0
 800a17c:	4770      	bx	lr

0800a17e <_ZN5codal3_cm3I2C4readEtPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800a17e:	2000      	movs	r0, #0
 800a180:	4770      	bx	lr

0800a182 <_ZN5codal3_cm3I2C12readRegisterEthPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800a182:	2000      	movs	r0, #0
 800a184:	4770      	bx	lr

0800a186 <_ZN5codal3_cm3SPI12setFrequencyEm>:

        int SPI::setFrequency(uint32_t frequency) {
            freq = frequency;
            needsInit = true;
 800a186:	2301      	movs	r3, #1
            freq = frequency;
 800a188:	6141      	str	r1, [r0, #20]
            needsInit = true;
 800a18a:	f880 3020 	strb.w	r3, [r0, #32]
            return DEVICE_OK;
        }
 800a18e:	2000      	movs	r0, #0
 800a190:	4770      	bx	lr

0800a192 <_ZN5codal3_cm3SPI5writeEi>:
            CODAL_ASSERT(bits == 8);
            return DEVICE_OK;
        }

        int SPI::write(int data) {
            rxCh = 0;
 800a192:	2300      	movs	r3, #0
            txCh = data;
 800a194:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
            rxCh = 0;
 800a198:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
#ifdef TODO
            if (transfer(&txCh, 1, &rxCh, 1) < 0) { return DEVICE_SPI_ERROR; }
#endif  //  TODO
            return rxCh;
        }
 800a19c:	4618      	mov	r0, r3
 800a19e:	4770      	bx	lr

0800a1a0 <_ZN5codal3_cm3SPI8transferEPKhmPhm>:
            LOG("SPI ->");
            schedule();
            LOG("SPI <-");
            return res;
#endif  //  TODO
        }
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	4770      	bx	lr

0800a1a4 <_ZN5codal3_cm3SPI7setModeEii>:
        int SPI::setMode(int mode, int bits) {
 800a1a4:	b508      	push	{r3, lr}
            needsInit = true;
 800a1a6:	2301      	movs	r3, #1
            CODAL_ASSERT(bits == 8);
 800a1a8:	2a08      	cmp	r2, #8
            needsInit = true;
 800a1aa:	f880 3020 	strb.w	r3, [r0, #32]
            CODAL_ASSERT(bits == 8);
 800a1ae:	d003      	beq.n	800a1b8 <_ZN5codal3_cm3SPI7setModeEii+0x14>
 800a1b0:	f240 308d 	movw	r0, #909	; 0x38d
 800a1b4:	f7f6 fd92 	bl	8000cdc <target_panic>
        }
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	bd08      	pop	{r3, pc}

0800a1bc <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>:
        uint32_t _codal_setup_pin(Pin *p, uint32_t prev, const PinMap *map) {
 800a1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1c0:	4688      	mov	r8, r1
 800a1c2:	4617      	mov	r7, r2
            if (!p) { return 0; }
 800a1c4:	4605      	mov	r5, r0
 800a1c6:	b308      	cbz	r0, 800a20c <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x50>
            auto pin = p->name;
 800a1c8:	7c06      	ldrb	r6, [r0, #16]
            CmPeripheral peri = pinmap_peripheral(pin, map);
 800a1ca:	4611      	mov	r1, r2
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f7ff f8e1 	bl	8009394 <pinmap_peripheral>
            if (peri == CM_PERIPHERAL_NC) { return peri; }
 800a1d2:	1c43      	adds	r3, r0, #1
            CmPeripheral peri = pinmap_peripheral(pin, map);
 800a1d4:	4604      	mov	r4, r0
            if (peri == CM_PERIPHERAL_NC) { return peri; }
 800a1d6:	d016      	beq.n	800a206 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4a>
            auto mode = pinmap_mode(pin, map);
 800a1d8:	4639      	mov	r1, r7
 800a1da:	4630      	mov	r0, r6
 800a1dc:	f7ff f8f2 	bl	80093c4 <pinmap_mode>
            auto cnf = pinmap_cnf(pin, map);
 800a1e0:	4639      	mov	r1, r7
            auto mode = pinmap_mode(pin, map);
 800a1e2:	4681      	mov	r9, r0
            auto cnf = pinmap_cnf(pin, map);
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f7ff f903 	bl	80093f0 <pinmap_cnf>
            p->setup(mode, cnf);
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f7ff fe5d 	bl	8009eae <_ZN5codal3_cm3Pin5setupEhh>
            CODAL_ASSERT(!prev || prev == peri);
 800a1f4:	f1b8 0f00 	cmp.w	r8, #0
 800a1f8:	d005      	beq.n	800a206 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4a>
 800a1fa:	45a0      	cmp	r8, r4
 800a1fc:	d003      	beq.n	800a206 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4a>
 800a1fe:	f240 308d 	movw	r0, #909	; 0x38d
 800a202:	f7f6 fd6b 	bl	8000cdc <target_panic>
        }
 800a206:	4620      	mov	r0, r4
 800a208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            if (!p) { return 0; }
 800a20c:	4604      	mov	r4, r0
 800a20e:	e7fa      	b.n	800a206 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4a>

0800a210 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_>:

        int SPI::startTransfer(const uint8_t *txBuffer, uint32_t txSize, uint8_t *rxBuffer,
                                uint32_t rxSize, PVoidCallback doneHandler, void *arg) {
 800a210:	b570      	push	{r4, r5, r6, lr}
 800a212:	4606      	mov	r6, r0
 800a214:	4615      	mov	r5, r2
 800a216:	9c04      	ldr	r4, [sp, #16]
            int res = HAL_OK;
            init();
 800a218:	f7ff f840 	bl	800929c <_ZN5codal3_cm3SPI4initEv>
            ////LOG("SPI start %p/%d %p/%d D=%p", txBuffer, txSize, rxBuffer, rxSize, doneHandler);
            this->doneHandler = doneHandler;
 800a21c:	9b05      	ldr	r3, [sp, #20]
 800a21e:	61b3      	str	r3, [r6, #24]
            this->doneHandlerArg = arg;
 800a220:	9b06      	ldr	r3, [sp, #24]
 800a222:	61f3      	str	r3, [r6, #28]
            if (txSize && rxSize) {
 800a224:	b135      	cbz	r5, 800a234 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x24>
 800a226:	b12c      	cbz	r4, 800a234 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x24>
                CODAL_ASSERT(txSize == rxSize); // we could support this if needed
 800a228:	42a5      	cmp	r5, r4
 800a22a:	d003      	beq.n	800a234 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x24>
 800a22c:	f240 308d 	movw	r0, #909	; 0x38d
 800a230:	f7f6 fd54 	bl	8000cdc <target_panic>
            } else {
                return 0; // nothing to do
            }
            CODAL_ASSERT(res == HAL_OK);
            return 0;
        }
 800a234:	2000      	movs	r0, #0
 800a236:	bd70      	pop	{r4, r5, r6, pc}

0800a238 <_ZN5codal3I2C12setFrequencyEm>:
  * @param frequency The bus frequency in hertz
  */
int I2C::setFrequency(uint32_t frequency)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800a238:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a23c:	4770      	bx	lr

0800a23e <_ZN5codal3I2C4stopEv>:
 * Issues a START condition on the I2C bus
 */
int I2C::start()
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800a23e:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a242:	4770      	bx	lr

0800a244 <_ZN5codal3I2C4readENS_15AcknowledgeTypeE>:
* @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
*/
int I2C::write(uint8_t data)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800a244:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a248:	4770      	bx	lr

0800a24a <_ZN5codal3I2C13writeRegisterEthh>:
  * @param value The value to write.
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::writeRegister(uint16_t address, uint8_t reg, uint8_t value)
  {
 800a24a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
      uint8_t command[2];
      command[0] = reg;
 800a24c:	f88d 200c 	strb.w	r2, [sp, #12]
      command[1] = value;

      return write(address, command, 2);
 800a250:	2200      	movs	r2, #0
      command[1] = value;
 800a252:	f88d 300d 	strb.w	r3, [sp, #13]
      return write(address, command, 2);
 800a256:	6803      	ldr	r3, [r0, #0]
 800a258:	9200      	str	r2, [sp, #0]
 800a25a:	695c      	ldr	r4, [r3, #20]
 800a25c:	aa03      	add	r2, sp, #12
 800a25e:	2302      	movs	r3, #2
 800a260:	47a0      	blx	r4
}
 800a262:	b004      	add	sp, #16
 800a264:	bd10      	pop	{r4, pc}

0800a266 <_ZN5codal3I2C5writeEtPhib>:
  {
 800a266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a26a:	4605      	mov	r5, r0
 800a26c:	4688      	mov	r8, r1
 800a26e:	461f      	mov	r7, r3
 800a270:	f89d 4018 	ldrb.w	r4, [sp, #24]
      if (data == NULL || len <= 0)
 800a274:	4616      	mov	r6, r2
 800a276:	b1d2      	cbz	r2, 800a2ae <_ZN5codal3I2C5writeEtPhib+0x48>
 800a278:	2b00      	cmp	r3, #0
 800a27a:	dd18      	ble.n	800a2ae <_ZN5codal3I2C5writeEtPhib+0x48>
      start();
 800a27c:	6803      	ldr	r3, [r0, #0]
 800a27e:	4437      	add	r7, r6
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	4798      	blx	r3
      write((uint8_t)address);
 800a284:	682b      	ldr	r3, [r5, #0]
 800a286:	fa5f f188 	uxtb.w	r1, r8
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	4628      	mov	r0, r5
 800a28e:	4798      	blx	r3
          write(data[i]);
 800a290:	682b      	ldr	r3, [r5, #0]
 800a292:	f816 1b01 	ldrb.w	r1, [r6], #1
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	4628      	mov	r0, r5
 800a29a:	4798      	blx	r3
      for (int i = 0; i < len; i++)
 800a29c:	42b7      	cmp	r7, r6
 800a29e:	d1f7      	bne.n	800a290 <_ZN5codal3I2C5writeEtPhib+0x2a>
      if (!repeated)
 800a2a0:	b91c      	cbnz	r4, 800a2aa <_ZN5codal3I2C5writeEtPhib+0x44>
          stop();
 800a2a2:	682b      	ldr	r3, [r5, #0]
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	4798      	blx	r3
      return DEVICE_OK;
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	e001      	b.n	800a2b2 <_ZN5codal3I2C5writeEtPhib+0x4c>
          return DEVICE_INVALID_PARAMETER; // Send a start condition
 800a2ae:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
  }
 800a2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a2b6 <_ZN5codal3I2C4readEtPhib>:
* @param len the number of bytes to read into the buffer
*
* @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::read(uint16_t address, uint8_t *data, int len, bool repeated)
{
 800a2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	4688      	mov	r8, r1
 800a2be:	461e      	mov	r6, r3
 800a2c0:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int i = 0;

    if (data == NULL || len <= 0)
 800a2c4:	4617      	mov	r7, r2
 800a2c6:	b322      	cbz	r2, 800a312 <_ZN5codal3I2C4readEtPhib+0x5c>
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	dd22      	ble.n	800a312 <_ZN5codal3I2C4readEtPhib+0x5c>
        return DEVICE_INVALID_PARAMETER;

    // Send a start condition
    start();
 800a2cc:	6803      	ldr	r3, [r0, #0]

    // Send the address of the slave, with a read bit set.
    write((uint8_t)(address | 0x01));

    // Read the body of the data
    for (i = 0; i < len-1; i++)
 800a2ce:	3e01      	subs	r6, #1
    start();
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	4798      	blx	r3
    write((uint8_t)(address | 0x01));
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	f048 0101 	orr.w	r1, r8, #1
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	b2c9      	uxtb	r1, r1
 800a2de:	4620      	mov	r0, r4
 800a2e0:	4798      	blx	r3
 800a2e2:	46b8      	mov	r8, r7
 800a2e4:	6823      	ldr	r3, [r4, #0]
    for (i = 0; i < len-1; i++)
 800a2e6:	eba8 0207 	sub.w	r2, r8, r7
 800a2ea:	4296      	cmp	r6, r2
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	dd05      	ble.n	800a2fc <_ZN5codal3I2C4readEtPhib+0x46>
        data[i] = read();
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	4798      	blx	r3
 800a2f6:	f808 0b01 	strb.w	r0, [r8], #1
 800a2fa:	e7f3      	b.n	800a2e4 <_ZN5codal3I2C4readEtPhib+0x2e>

    data[i] = read(NACK);
 800a2fc:	2101      	movs	r1, #1
 800a2fe:	4620      	mov	r0, r4
 800a300:	4798      	blx	r3
 800a302:	55b8      	strb	r0, [r7, r6]

    // Send a stop condition
    if (!repeated)
 800a304:	b91d      	cbnz	r5, 800a30e <_ZN5codal3I2C4readEtPhib+0x58>
        stop();
 800a306:	6823      	ldr	r3, [r4, #0]
 800a308:	4620      	mov	r0, r4
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	4798      	blx	r3
    if (!repeated)
 800a30e:	2000      	movs	r0, #0
 800a310:	e001      	b.n	800a316 <_ZN5codal3I2C4readEtPhib+0x60>
        return DEVICE_INVALID_PARAMETER;
 800a312:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8

    return DEVICE_OK;
}
 800a316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a31a <_ZN5codal3I2C5writeEth>:
  {
 800a31a:	b530      	push	{r4, r5, lr}
 800a31c:	b085      	sub	sp, #20
 800a31e:	ac04      	add	r4, sp, #16
 800a320:	f804 2d01 	strb.w	r2, [r4, #-1]!
      return write(address, &data, 1);
 800a324:	2200      	movs	r2, #0
 800a326:	6803      	ldr	r3, [r0, #0]
 800a328:	9200      	str	r2, [sp, #0]
 800a32a:	695d      	ldr	r5, [r3, #20]
 800a32c:	4622      	mov	r2, r4
 800a32e:	2301      	movs	r3, #1
 800a330:	47a8      	blx	r5
  }
 800a332:	b005      	add	sp, #20
 800a334:	bd30      	pop	{r4, r5, pc}

0800a336 <_ZN5codal3I2C12readRegisterEthPhib>:
* @param repeated Use a repeated START/START/STOP transaction if true, or independent START/STOP/START/STOP transactions if fasle. Default: true
*
* @return DEVICE_OK or DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::readRegister(uint16_t address, uint8_t reg, uint8_t *data, int length, bool repeated)
{
 800a336:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a338:	b085      	sub	sp, #20
 800a33a:	461f      	mov	r7, r3
 800a33c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800a340:	4604      	mov	r4, r0
 800a342:	460e      	mov	r6, r1
 800a344:	f88d 200f 	strb.w	r2, [sp, #15]
    int result;

    if (repeated)
 800a348:	b18b      	cbz	r3, 800a36e <_ZN5codal3I2C12readRegisterEthPhib+0x38>
        result = write(address, &reg, 1, true);
 800a34a:	2301      	movs	r3, #1
 800a34c:	6802      	ldr	r2, [r0, #0]
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	6955      	ldr	r5, [r2, #20]
 800a352:	f10d 020f 	add.w	r2, sp, #15
 800a356:	47a8      	blx	r5
    else
        result = write(address, reg);

    if (result != DEVICE_OK)
 800a358:	b938      	cbnz	r0, 800a36a <_ZN5codal3I2C12readRegisterEthPhib+0x34>
        return result;

    result = read(address, data, length);
 800a35a:	6823      	ldr	r3, [r4, #0]
 800a35c:	9000      	str	r0, [sp, #0]
 800a35e:	69dd      	ldr	r5, [r3, #28]
 800a360:	463a      	mov	r2, r7
 800a362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a364:	4631      	mov	r1, r6
 800a366:	4620      	mov	r0, r4
 800a368:	47a8      	blx	r5
    if (result != DEVICE_OK)
        return result;

    return DEVICE_OK;
}
 800a36a:	b005      	add	sp, #20
 800a36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        result = write(address, reg);
 800a36e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800a372:	f7ff ffd2 	bl	800a31a <_ZN5codal3I2C5writeEth>
 800a376:	e7ef      	b.n	800a358 <_ZN5codal3I2C12readRegisterEthPhib+0x22>

0800a378 <_ZTVN5codal14CodalComponentE>:
	...
 800a380:	74d9 0800 9429 0800 942b 0800 74e1 0800     .t..)...+....t..
 800a390:	942d 0800                                   -...

0800a394 <_ZTVN5codal6SerialE>:
	...
 800a39c:	74d9 0800 9429 0800 942b 0800 0000 0000     .t..)...+.......
 800a3ac:	0000 0000 2b61 0800 2b61 0800 2b61 0800     ....a+..a+..a+..
 800a3bc:	2b61 0800 2b61 0800 2b61 0800 96f9 0800     a+..a+..a+......

0800a3cc <_ZTVN5codal5TimerE>:
	...
 800a3d4:	2b61 0800 2b61 0800 98a9 0800 989f 0800     a+..a+..........

0800a3e4 <_ZTVN5codal10EventModelE>:
	...
 800a3ec:	7ec9 0800 7edd 0800 7ee5 0800               .~...~...~..

0800a3f8 <_ZTVN5codal10MessageBusE>:
	...
 800a400:	9bcb 0800 7f5d 0800 7eed 0800 9a2b 0800     ....]....~..+...
 800a410:	8019 0800 9aef 0800 fff8 ffff 0000 0000     ................
 800a420:	74d9 0800 9429 0800 942b 0800 9ae7 0800     .t..)...+.......
 800a430:	9b01 0800                                   ....

0800a434 <_ZL9emptyData>:
 800a434:	ffff 0000                                   ....

0800a438 <_ZTVN5codal3_cm3PinE>:
	...
 800a440:	82b1 0800 9e43 0800 9e47 0800 8259 0800     ....C...G...Y...
 800a450:	8275 0800 9e5d 0800 9e61 0800 9e6f 0800     u...]...a...o...
 800a460:	9e7d 0800 9e89 0800 82a1 0800 9e31 0800     }...........1...
 800a470:	9edf 0800 9e37 0800 82a9 0800 9e97 0800     ....7...........
 800a480:	9ea9 0800 9e3d 0800 9ef9 0800               ....=.......

0800a48c <_ZTVN5codal3_cm6SerialE>:
	...
 800a494:	74d9 0800 9429 0800 942b 0800 833d 0800     .t..)...+...=...
 800a4a4:	9f39 0800 9f1f 0800 9f23 0800 9f27 0800     9.......#...'...
 800a4b4:	9f2b 0800 9f2f 0800 9f33 0800 9fcd 0800     +.../...3.......

0800a4c4 <_ZTVN5codal3_cm5TimerE>:
	...
 800a4cc:	83ad 0800 83f9 0800 98a9 0800 989f 0800     ................

0800a4dc <_ZTVN5codal13STM32BluePillE>:
	...
 800a4e4:	8665 0800 a173 0800 a175 0800 75cd 0800     e...s...u....u..
 800a4f4:	943f 0800                                   ?...

0800a4f8 <PinMap_SPI_MISO>:
 800a4f8:	0068 0000 3000 4001 0000 0001 0070 0000     h....0.@....p...
 800a508:	3800 4000 0000 0001 0074 0000 3c00 4000     .8.@....t....<.@
 800a518:	0000 0001 006c 0000 3000 4001 0001 0001     ....l....0.@....
 800a528:	0078 0000 3c00 4000 0001 0001 00ff 0000     x....<.@........
 800a538:	ffff ffff ff00 00ff                         ........

0800a540 <PinMap_SPI_MOSI>:
 800a540:	0069 0000 3000 4001 0300 0002 0071 0000     i....0.@....q...
 800a550:	3800 4000 0300 0002 0075 0000 3c00 4000     .8.@....u....<.@
 800a560:	0300 0002 006d 0000 3000 4001 0301 0002     ....m....0.@....
 800a570:	0079 0000 3c00 4000 0301 0002 00ff 0000     y....<.@........
 800a580:	ffff ffff ff00 00ff                         ........

0800a588 <PinMap_SPI_NSS>:
 800a588:	0066 0000 3000 4001 0300 0002 006e 0000     f....0.@....n...
 800a598:	3800 4000 0300 0002 0072 0000 3c00 4000     .8.@....r....<.@
 800a5a8:	0300 0002 006a 0000 3000 4001 0301 0002     ....j....0.@....
 800a5b8:	0076 0000 3c00 4000 0301 0002 00ff 0000     v....<.@........
 800a5c8:	ffff ffff ff00 00ff                         ........

0800a5d0 <PinMap_SPI_SCK>:
 800a5d0:	0067 0000 3000 4001 0300 0002 006f 0000     g....0.@....o...
 800a5e0:	3800 4000 0300 0002 0073 0000 3c00 4000     .8.@....s....<.@
 800a5f0:	0300 0002 006b 0000 3000 4001 0301 0002     ....k....0.@....
 800a600:	0077 0000 3c00 4000 0301 0002 00ff 0000     w....<.@........
 800a610:	ffff ffff ff00 00ff                         ........

0800a618 <_ZTVN5codal3_cm3I2CE>:
	...
 800a620:	a17b 0800 a23f 0800 a23f 0800 a245 0800     {...?...?...E...
 800a630:	a245 0800 a17f 0800 a24b 0800 a17f 0800     E.......K.......
 800a640:	a183 0800                                   ....

0800a644 <_ZTVN5codal3_cm3SPIE>:
	...
 800a64c:	a187 0800 a1a5 0800 a193 0800 a1a1 0800     ................
 800a65c:	a211 0800                                   ....

0800a660 <_ZTVN5codal3I2CE>:
	...
 800a668:	a239 0800 a23f 0800 a23f 0800 a245 0800     9...?...?...E...
 800a678:	a245 0800 a267 0800 a24b 0800 a2b7 0800     E...g...K.......
 800a688:	a337 0800 6573 2074 656c 0064 6174 6772     7...set led.targ
 800a698:	7465 7720 6961 0074 6c73 6565 0070 6f6c     et wait.sleep.lo
 800a6a8:	706f 7300 706c 2000 2074 2c00 6120 6d6c     op.slp. t ., alm
 800a6b8:	0020 6970 206e 7300 6e79 2163 0020 6974      .pin .sync! .ti
 800a6c8:	656d 2072 6e69 7469 7400 6972 6767 7265     mer init.trigger
 800a6d8:	6e49 6220 2034 6e69 7469 0021 2a2a 202a     In b4 init!.*** 
 800a6e8:	7061 2070 7362 2f73 6164 6174 6620 6961     app bss/data fai
 800a6f8:	656c 2c64 6220 7373 745f 7365 2074 203d     led, bss_test = 
 800a708:	2c00 6420 7461 5f61 6574 7473 3d20 0020     ., data_test = .
 800a718:	6c66 7375 2068 6174 6b73 7200 7365 6174     flush task.resta
 800a728:	7472 6820 6e61 6c64 7265 7200 7365 6174     rt handler.resta
 800a738:	7472 6e69 2e67 2e2e 6400 6e6f 0065 6572     rting....done.re
 800a748:	7473 7261 2074 6163 6c6c 6162 6b63 2a00     start callback.*
 800a758:	2a2a 4520 5252 524f 203a 696d 7373 6e69     ** ERROR: missin
 800a768:	2067 7665 6e65 2074 7562 0073 2a2a 202a     g event bus.*** 
 800a778:	5245 4f52 3a52 7520 616e 6c62 2065 6f74     ERROR: unable to
 800a788:	7320 6e65 2064 6572 7473 7261 2074 7665      send restart ev
 800a798:	6e65 2074 6e00 206f 6373 6568 7564 656c     ent .no schedule
 800a7a8:	2c72 7320 6174 7472 6220 2067 6174 6b73     r, start bg task
 800a7b8:	2073 616c 6574 0072 7473 7261 2074 6762     s later.start bg
 800a7c8:	7420 7361 736b 2a00 2a2a 4520 5252 524f      tasks.*** ERROR
 800a7d8:	203a 7263 6165 6574 6620 6269 6572 6620     : create fibre f
 800a7e8:	6961 656c 0064 2a2a 202a 5245 4f52 3a52     ailed.*** ERROR:
 800a7f8:	7520 616e 6c62 2065 6f74 6c20 7369 6574      unable to liste
 800a808:	206e 6f66 2072 6572 7473 7261 2074 7665     n for restart ev
 800a818:	6e65 2074 6200 756c 7065 6c69 206c 6e69     ent .bluepill in
 800a828:	7469 7320 6863 6465 6c75 7265 6200 756c     it scheduler.blu
 800a838:	7065 6c69 206c 6e69 7469 6320 6d6f 6f70     epill init compo
 800a848:	656e 746e 0073 6c62 6575 6970 6c6c 6920     nents.bluepill i
 800a858:	696e 2074 6b6f 6200 756c 7065 6c69 206c     nit ok.bluepill 
 800a868:	6f63 736e 7274 6375 0074 5053 2049 6e69     construct.SPI in
 800a878:	7473 6e61 6563 2520 0070 2a2a 202a 6f63     stance %p.*** co
 800a888:	6164 206c 7073 2069 6f6d 6973 0020 6d20     dal spi mosi . m
 800a898:	7369 206f 2000 6373 6b6c 0020 6e20 7373     iso . sclk . nss
 800a8a8:	0020 6970 6d6e 7061 6e20 746f 6620 756f      .pinmap not fou
 800a8b8:	646e 6620 726f 6320 666e 7000 6e69 616d     nd for cnf.pinma
 800a8c8:	2070 6f6e 2074 6f66 6e75 2064 6f66 2072     p not found for 
 800a8d8:	6f6d 6564 7000 6e69 616d 2070 6f6e 2074     mode.pinmap not 
 800a8e8:	6f66 6e75 2064 6f66 2072 6570 6972 6870     found for periph
 800a8f8:	7265 6c61 0000 0000                         eral....
