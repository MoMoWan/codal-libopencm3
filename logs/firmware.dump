
.pioenvs/bluepill_f103c8/firmware.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .boot_text	00000000 .boot_text
08007400 l    d  .text	00000000 .text
0800557c l    d  .boot_preinit_array	00000000 .boot_preinit_array
0800b000 l    d  .preinit_array	00000000 .preinit_array
0800557c l    d  .boot_init_array	00000000 .boot_init_array
0800b000 l    d  .init_array	00000000 .init_array
0800557c l    d  .boot_fini_array	00000000 .boot_fini_array
0800b014 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .boot_data	00000000 .boot_data
20001000 l    d  .data	00000000 .data
2000016c l    d  .boot_bss	00000000 .boot_bss
20001008 l    d  .bss	00000000 .bss
200047bc l    d  .boot_buf	00000000 .boot_buf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 vector.c
00000000 l    df *ABS*	00000000 baseloader.c
00000000 l    df *ABS*	00000000 timer.cpp
08002bc0 l     F .boot_text	00000074 _ZL25custom_rtc_awake_from_off7rcc_osc
08002c34 l     F .boot_text	00000090 _ZL9rtc_setupv
20000464 l     O .boot_bss	00000004 _ZL10alarmCount
20000468 l     O .boot_bss	00000004 _ZL8tickFunc
2000046c l     O .boot_bss	00000004 _ZL9alarmFunc
20000470 l     O .boot_bss	00000004 _ZL9tickCount
20000475 l     O .boot_bss	00000001 _ZZ20platform_start_timerE12timerStarted
00000000 l    df *ABS*	00000000 uartint.cpp
08009650 l     F .text	0000001c _Z41__static_initialization_and_destruction_0ii
0800a7b2 l     F .text	0000000e _GLOBAL__sub_I__ZN13UARTInterfaceC2Ejj
20002194 l     O .bss	0000006c _ZL13responseQueue
00000000 l    df *ABS*	00000000 reset_handler.c
08000808 l     F .boot_text	00000050 pre_main
00000000 l    df *ABS*	00000000 codal_target_hal.cpp
080008f0 l     F .boot_text	00000024 _ZL11timer_alarmv
08000914 l     F .boot_text	00000070 _ZL15poll_bootloaderv
08000984 l     F .boot_text	00000018 _ZL10timer_tickv
0800099c l     F .boot_text	0000002c _ZL11os_schedulev
20000184 l     O .boot_bss	00000001 _ZL11initialised
2000016c l     O .boot_bss	00000004 _ZL11poll_status
20000170 l     O .boot_bss	00000004 _ZL13tick_callback
20000174 l     O .boot_bss	00000004 _ZL14alarm_callback
20000178 l     O .boot_bss	00000004 _ZL16prev_poll_status
2000017c l     O .boot_bss	00000004 _ZL19bootloader_callback
00000000 l    df *ABS*	00000000 asm/CortexContextSwitch.s.o
08000ba8 l       .boot_text	00000000 store_context_complete
08000bba l       .boot_text	00000000 store_stack_complete
08000bae l       .boot_text	00000000 store_stack
08000bd4 l       .boot_text	00000000 restore_stack_complete
08000bc8 l       .boot_text	00000000 restore_stack
08000c28 l       .boot_text	00000000 store_stack1
00000000 l    df *ABS*	00000000 desig.c
08004a10 l     O .boot_text	00000011 chars.4166
00000000 l    df *ABS*	00000000 rcc.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 pwr_common_all.c
00000000 l    df *ABS*	00000000 exti_common_all.c
00000000 l    df *ABS*	00000000 flash_common_f01.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_standard.c
08001c1a l     F .boot_text	00000004 usb_descriptor_type
08001c1e l     F .boot_text	00000004 usb_descriptor_index
08001c22 l     F .boot_text	00000030 usb_standard_set_address
08001c52 l     F .boot_text	000000ba usb_standard_set_configuration
08001d0c l     F .boot_text	00000024 usb_standard_get_configuration
08001d30 l     F .boot_text	00000056 usb_standard_set_interface
08001d86 l     F .boot_text	0000003e usb_standard_get_interface
08001dc4 l     F .boot_text	00000018 usb_standard_device_get_status
08001ddc l     F .boot_text	00000018 usb_standard_interface_get_status
08001df4 l     F .boot_text	000001ba build_config_descriptor
08001fae l     F .boot_text	000000e6 usb_standard_get_descriptor
08002094 l     F .boot_text	0000002a usb_standard_endpoint_get_status
080020be l     F .boot_text	00000010 usb_standard_endpoint_stall
080020ce l     F .boot_text	00000010 usb_standard_endpoint_unstall
00000000 l    df *ABS*	00000000 st_usbfs_v1.c
0800132c l     F .boot_text	00000030 st_usbfs_v1_usbd_init
00000000 l    df *ABS*	00000000 scb.c
00000000 l    df *ABS*	00000000 st_usbfs_core.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 gpio_common_all.c
00000000 l    df *ABS*	00000000 usart_common_f124.c
00000000 l    df *ABS*	00000000 rcc_common_all.c
00000000 l    df *ABS*	00000000 usb_control.c
0800195c l     F .boot_text	00000014 stall_transaction
08001970 l     F .boot_text	00000032 usb_control_setup_write
080019a2 l     F .boot_text	0000003c usb_control_recv_chunk
080019de l     F .boot_text	00000048 usb_control_send_chunk
08001a26 l     F .boot_text	00000060 usb_control_request_dispatch
08001a86 l     F .boot_text	0000003a usb_control_setup_read
00000000 l    df *ABS*	00000000 nvic.c
00000000 l    df *ABS*	00000000 os_event.c
20000188 l     O .boot_bss	0000000e eventList
20000246 l     O .boot_bss	00000001 nEvents
20000054 l     O .boot_data	00000001 lastSignaledEvent
00000000 l    df *ABS*	00000000 os_kernel.c
00000000 l    df *ABS*	00000000 os_msgqueue.c
20000198 l     O .boot_bss	00000020 msgQList
20000247 l     O .boot_bss	00000001 nQueues
00000000 l    df *ABS*	00000000 os_sem.c
20000248 l     O .boot_bss	00000001 nSemaphores
00000000 l    df *ABS*	00000000 os_task.c
08002464 l     F .boot_text	0000001c os_task_wait_queue_empty
08002480 l     F .boot_text	00000014 task_ready_set
20000249 l     O .boot_bss	00000001 nTasks
200001b8 l     O .boot_bss	0000008c task_list
00000000 l    df *ABS*	00000000 os_assert.c
20000244 l     O .boot_bss	00000002 l.4990
00000000 l    df *ABS*	00000000 os_cbk.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 logger.cpp
080027bc l     F .boot_text	00000024 _ZL10__semihostiPv
08002a28 l     F .boot_text	0000001e _ZL14semihost_writemPKhj
080027e0 l     F .boot_text	0000003c _ZL16write_all_outputPKhtb
0800281c l     F .boot_text	0000005c _ZL12debug_appendPKcj
20000462 l     O .boot_bss	00000001 _ZL10logEnabled
2000024c l     O .boot_bss	00000201 _ZL11debugBuffer
20000450 l     O .boot_bss	00000010 _ZL12output_funcs
20000460 l     O .boot_bss	00000002 _ZL17debugBufferLength
00000000 l    df *ABS*	00000000 bluepill.cpp
20000474 l     O .boot_bss	00000001 _ZL12debugEnabled
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 bootloader.c
08002d5c l     F .boot_text	00000034 get_serial_number
08002de0 l     F .boot_text	000000cc poll_loop
20000478 l     O .boot_bss	00000004 baseloader_addr
2000047c l     O .boot_bss	00000004 baseloader_status
20000480 l     O .boot_bss	00000004 byte_count
20000484 l     O .boot_bss	00000004 cycleCount
20000488 l     O .boot_bss	00000004 dest
2000048c l     O .boot_bss	00000004 last_status
20000490 l     O .boot_bss	00000004 msTimer
2000074c l     O .boot_bss	00000001 poll_restart_requested
20000494 l     O .boot_bss	00000004 src
20000498 l     O .boot_bss	00000004 status
2000049c l     O .boot_bss	00000004 tmp_vector_table
200004a0 l     O .boot_bss	00000004 usbd_dev
20000058 l     O .boot_data	00000004 flushCount
00000000 l    df *ABS*	00000000 ghostfat.c
200004a4 l     O .boot_bss	00000004 lastFlush
200004a8 l     O .boot_bss	00000004 ms
20000168 l     O .boot_data	00000001 firstFlush
2000005c l     O .boot_data	00000004 flashAddr
00000000 l    df *ABS*	00000000 target_stm32f103.c
080048ae l     F .boot_text	00000014 sleep_us
08003344 l     F .boot_text	0000005c validate_application
2000074d l     O .boot_bss	00000001 forced_startup_mode
2000074e l     O .boot_bss	00000001 startup_mode
00000000 l    df *ABS*	00000000 usb_conf.c
080035c8 l     F .boot_text	00000014 hf2_connected
080048cc l     F .boot_text	00000004 usb_descriptor_type
080048d0 l     F .boot_text	00000004 usb_descriptor_index
080035dc l     F .boot_text	00000020 cdc_connected
080035fc l     F .boot_text	00000030 usb_cdc_transmit
0800362c l     F .boot_text	00000010 sof_callback
0800363c l     F .boot_text	00000050 set_aggregate_callback
08003a3c l     F .boot_text	000000a8 aggregate_callback
2000074f l     O .boot_bss	00000001 cdc_is_connected
200004ac l     O .boot_bss	00000028 config_callback
200004d4 l     O .boot_bss	00000050 control_callback
20000750 l     O .boot_bss	00000001 hf2_is_connected
20000524 l     O .boot_bss	00000004 last_busy_time
20000528 l     O .boot_bss	00000004 last_frame_time
2000052c l     O .boot_bss	00000019 serial_number
2000064c l     O .boot_bss	00000100 usbd_control_buffer
20000060 l     O .boot_data	00000008 capabilities
20000068 l     O .boot_data	00000024 usb_strings
08004e54 l     O .boot_text	00000009 bos_descriptor
08004e60 l     O .boot_text	00000008 cdc_iface_assoc
08004e68 l     O .boot_text	00000013 cdcacm_functional_descriptors
08004e7c l     O .boot_text	0000000f comm_endp
08004e8c l     O .boot_text	00000015 comm_iface
08004ea4 l     O .boot_text	0000000d config
08004fc4 l     O .boot_text	00000030 interfaces
08004eb4 l     O .boot_text	0000001e data_endp
08004ed4 l     O .boot_text	00000015 data_iface
08004eec l     O .boot_text	00000012 dev
08004f8c l     O .boot_text	0000001e hf2_endp
08004fac l     O .boot_text	00000015 hf2_iface
00000000 l    df *ABS*	00000000 webusb.c
08003ae4 l     F .boot_text	00000028 webusb_set_config
08003b0c l     F .boot_text	000000d0 webusb_control_vendor_request
2000054c l     O .boot_bss	00000004 webusb_https_url
00000000 l    df *ABS*	00000000 winusb.c
080048d4 l     F .boot_text	00000004 usb_descriptor_type
080048d8 l     F .boot_text	00000004 usb_descriptor_index
08003c28 l     F .boot_text	00000028 winusb_set_config
08003cb0 l     F .boot_text	000000c0 winusb_control_vendor_request
08003c50 l     F .boot_text	00000060 winusb_descriptor_request
2000008c l     O .boot_data	000000b2 msos20_descriptor_set
20000140 l     O .boot_data	00000028 winusb_wcid
0800516c l     O .boot_text	00000092 guid
08005274 l     O .boot_text	00000012 winusb_string_descriptor
00000000 l    df *ABS*	00000000 cdc.c
08003dc8 l     F .boot_text	00000010 cdcacm_comm_cb
08003dd8 l     F .boot_text	00000064 cdcacm_set_config
08003f30 l     F .boot_text	0000004c cdcacm_data_rx_cb
08003e3c l     F .boot_text	0000008c cdcacm_control_request
20000751 l     O .boot_bss	00000001 connected
20000550 l     O .boot_bss	00000004 connected_func
20000554 l     O .boot_bss	00000041 rx_buf
080052f0 l     O .boot_text	00000007 line_coding
00000000 l    df *ABS*	00000000 hf2.c
08003fa8 l     F .boot_text	00000020 assert
08003fc8 l     F .boot_text	00000040 hf2_set_config
080046c8 l     F .boot_text	00000058 hf2_data_tx_cb
08004604 l     F .boot_text	000000c4 hf2_data_rx_cb
08004008 l     F .boot_text	000000c8 pokeSend
080048dc l     F .boot_text	00000018 send_hf2_response
080040d0 l     F .boot_text	00000320 handle_flash_write
080043f0 l     F .boot_text	00000214 handle_command
20000598 l     O .boot_bss	00000004 _usbd_dev
2000059c l     O .boot_bss	00000004 cmdId.6015
20000752 l     O .boot_bss	00000001 connected
200005a0 l     O .boot_bss	00000004 connected_func
20000753 l     O .boot_bss	00000001 flush_count.6017
200005a4 l     O .boot_bss	00000004 new_app_start.6019
200005a8 l     O .boot_bss	00000004 new_base_vector.6018
200005ac l     O .boot_bss	00000004 new_baseloader_size.6021
200005b0 l     O .boot_bss	00000004 new_bootloader_size.6020
200005b4 l     O .boot_bss	00000004 pkt.6050
200005b8 l     O .boot_bss	00000004 prevCmdId.6016
200005bc l     O .boot_bss	00000004 remDataToSend
20000754 l     O .boot_bss	00000001 remDataToSendFlag
200005c0 l     O .boot_bss	00000004 remDataToSendLength
20000755 l     O .boot_bss	00000001 restart_request
200005c4 l     O .boot_bss	00000040 rx_buf
20000604 l     O .boot_bss	00000004 rx_time
20000608 l     O .boot_bss	00000040 tx_buf
08005304 l     O .boot_text	0000000b bad_packet_message
00000000 l    df *ABS*	00000000 backup.c
00000000 l    df *ABS*	00000000 usb21_standard.c
080047ec l     F .boot_text	00000028 usb21_set_config
08004814 l     F .boot_text	0000005c usb21_standard_get_descriptor
080048f4 l     F .boot_text	0000007c build_bos_descriptor
20000648 l     O .boot_bss	00000004 usb21_bos
00000000 l    df *ABS*	00000000 application.cpp
080087bc l     F .text	00000048 _ZL8pre_mainv
00000000 l    df *ABS*	00000000 main.cpp
080074a4 l     F .text	00000044 _ZL10debug_dumpRN5codal13STM32BluePillEPKc
080074e8 l     F .text	00000030 _Z41__static_initialization_and_destruction_0ii
0800980c l     F .text	0000000e _GLOBAL__sub_I_bluepill
00000000 l    df *ABS*	00000000 uart.cpp
08007664 l     F .text	00000024 _Z41__static_initialization_and_destruction_0ii
0800981a l     F .text	0000000e _GLOBAL__sub_I_serialPort
00000000 l    df *ABS*	00000000 CodalComponent.cpp
00000000 l    df *ABS*	00000000 CodalDmesg.cpp
20002140 l     O .bss	00000004 _ZL14dmesg_flush_fn
00000000 l    df *ABS*	00000000 CodalFiber.cpp
08007948 l     F .text	00000034 _ZL10handle_fobv
20002148 l     O .bss	00000004 _ZN5codalL10messageBusE
2000214c l     O .bss	00000004 _ZN5codalL10sleepQueueE
20002211 l     O .bss	00000001 _ZN5codalL11fiber_flagsE
20002150 l     O .bss	00000004 _ZN5codalL11forkedFiberE
20002154 l     O .bss	00000004 _ZN5codalL8runQueueE
20002158 l     O .bss	00000004 _ZN5codalL9fiberPoolE
2000215c l     O .bss	00000004 _ZN5codalL9idleFiberE
20002160 l     O .bss	00000004 _ZN5codalL9waitQueueE
00000000 l    df *ABS*	00000000 CodalHeapAllocator.cpp
20002212 l     O .bss	00000001 _ZZ13device_mallocE11initialised
00000000 l    df *ABS*	00000000 Serial.cpp
00000000 l    df *ABS*	00000000 Timer.cpp
00000000 l    df *ABS*	00000000 MessageBus.cpp
20001004 l     O .data	00000002 _ZL12userNotifyId
00000000 l    df *ABS*	00000000 Event.cpp
00000000 l    df *ABS*	00000000 ManagedString.cpp
08008404 l     F .text	00000038 _Z41__static_initialization_and_destruction_0ii
0800a31c l     F .text	0000000e _GLOBAL__sub_I__ZN5codal13ManagedString9initEmptyEv
0800ab2c l     O .text	00000004 _ZL9emptyData
00000000 l    df *ABS*	00000000 CodalCompat.cpp
00000000 l    df *ABS*	00000000 CmPin.cpp
00000000 l    df *ABS*	00000000 CmSerial.cpp
00000000 l    df *ABS*	00000000 CmTimer.cpp
2000217c l     O .bss	00000004 _ZN5codal3_cmL12last_triggerE
20002180 l     O .bss	00000004 _ZN5codal3_cmL14trigger_periodE
00000000 l    df *ABS*	00000000 tasks.cpp
08008804 l     F .text	00000050 _ZL15restart_handlerN5codal5EventE
08008854 l     F .text	00000018 _ZL10flush_taskv
0800886c l     F .text	00000028 _Z41__static_initialization_and_destruction_0ii
0800a798 l     F .text	0000000e _GLOBAL__sub_I_restart_callback
20002188 l     O .bss	00000008 _ZL13restart_event
20002190 l     O .bss	00000004 _ZL16flush_task_fibre
20002214 l     O .bss	00000001 _ZL24restart_listener_started
00000000 l    df *ABS*	00000000 STM32BluePill.cpp
00000000 l    df *ABS*	00000000 STM32BluePillIO.cpp
00000000 l    df *ABS*	00000000 CmI2C.cpp
00000000 l    df *ABS*	00000000 CmSPI.cpp
20002200 l     O .bss	00000010 _ZN5codal3_cmL10_instancesE
00000000 l    df *ABS*	00000000 CmPinMap.cpp
0800a884 l     F .text	00000018 _ZL22pinmap_find_peripheralhPK6PinMap
0800a89c l     F .text	00000016 _ZL16pinmap_find_modehPK6PinMap
0800a8b2 l     F .text	00000016 _ZL15pinmap_find_cnfhPK6PinMap
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 CodalListener.cpp
00000000 l    df *ABS*	00000000 RefCounted.cpp
00000000 l    df *ABS*	00000000 RefCountedInit.cpp
00000000 l    df *ABS*	00000000 MemberFunctionCallback.cpp
080097ac g     F .text	00000028 pinmap_mode
08008048 g     F .text	00000034 _ZN5codal5TimerC1Ev
0800326c g     F .boot_text	000000d8 flash_write
08009b1e g     F .text	000001cc _ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE
0800a48e g     F .text	00000004 _ZN5codal3_cm3Pin15setServoPulseUsEi
0800a194 g     F .text	00000012 _ZN5codal10MessageBusD0Ev
08009808  w    F .text	00000002 _ZN5codal14CodalComponent16periodicCallbackEv
080075c4  w    F .text	0000004c _ZN5codal13STM32BluePillD1Ev
08002300 g     F .boot_text	00000044 st_usbfs_ep_stall_get
080077f4 g     F .text	0000003c _ZN5codal14scheduler_tickENS_5EventE
0800a5c4 g     F .text	00000008 _ZN5codal3_cm6Serial7rxInUseEv
0800557c g     O .boot_preinit_array	00000004 __boot_preinit_array_start
08001b3a g     F .boot_text	0000008a _usbd_control_out
08000b52 g     F .boot_text	00000004 tcb_configure_stack_base
0800a7d0 g     F .text	0000000c _ZN5codal3_cm3SPI12setFrequencyEm
08000858 g     F .boot_text	00000098 reset_handler
0800a51e g     F .text	0000000a _ZN5codal3_cm6Serial8unlockRxEv
08000a98 g     F .boot_text	00000008 fiber_initial_stack_base
00007400 g       *ABS*	00000000 _bootrom_size
20002213 g     O .bss	00000001 heap_count
0800a7b0 g     F .text	00000002 _ZN13UARTInterfaceC1Ejj
0800312c g     F .boot_text	00000070 bootloader_start
08007fc0 g     F .text	00000060 _ZN5codal6SerialC1ERNS_3PinES2_hht
0800192c g     F .boot_text	0000000c usbd_ep_write_packet
080085f8  w    F .text	00000014 _ZN5codal3_cm6SerialD1Ev
08003548 g     F .boot_text	00000020 boot_target_set_restart_callback
08001944 g     F .boot_text	0000000c usbd_ep_stall_set
0800a43e g     F .text	0000000e _ZN5codal3_cm3Pin8isOutputEv
0800ae14 g     O .text	00000048 PinMap_SPI_MOSI
080099e6 g     F .text	00000018 _ZN5codal8ListenerD2Ev
08000b4e g     F .boot_text	00000004 tcb_configure_sp
0800074c  w    F .boot_text	00000002 usart3_isr
080075c4  w    F .text	0000004c _ZN5codal13STM32BluePillD2Ev
08000750  w    F .boot_text	00000030 rtc_isr
0800074c g       .boot_text	00000000 _base_etext
08003568 g     F .boot_text	00000020 boot_target_manifest_app
0800abec g     O .text	00000018 _ZTVN5codal3_cm5TimerE
080029c4 g     F .boot_text	00000034 _Z11debug_printi
08008318 g     F .text	00000074 _ZN5codal10MessageBusC2Ev
08002a14 g     F .boot_text	00000014 _Z13debug_printlni
0800a2e2 g     F .text	0000001e _ZN5codal13ManagedStringaSERKS0_
0800074c  w    F .boot_text	00000002 tim7_isr
0800a58c g     F .text	00000010 _ZN5codal3_cm6Serial4baudEi
080011f0 g     F .boot_text	0000000c exti_reset_request
2000085c g     O .boot_bss	00000001 running_tid
0800074c  w    F .boot_text	00000002 adc1_2_isr
0800a1fc g     F .text	00000022 _ZN5codal14EventQueueItemC2ENS_5EventE
08008020 g     F .text	00000028 _ZN5codal6SerialD1Ev
0800a21e g     F .text	0000000e _ZN5codal13ManagedStringD1Ev
0800adb0 g     O .text	0000001c _ZTVN5codal13STM32BluePillE
08000b5a g     F .boot_text	00000004 get_current_sp
0800074c  w    F .boot_text	00000002 tim1_trg_com_isr
08009b16 g     F .text	00000008 _ZN5codal6Serial7rxInUseEv
08008020 g     F .text	00000028 _ZN5codal6SerialD2Ev
0800a7cc g     F .text	00000004 _ZN5codal3_cm3I2C12readRegisterEthPhib
0800a396 g     F .text	00000032 _ZN5codal14string_reverseEPc
0800a9f6 g     F .text	00000046 _ZN5codal3I2C12readRegisterEthPhib
080077bc g     F .text	00000028 _ZN5codal14CodalComponent15removeComponentEv
08002106 g     F .boot_text	00000032 _usbd_standard_request
0800a506  w    F .text	00000004 _ZN5codal3_cm6Serial13configurePinsERNS_3PinES3_
0800270e g     F .boot_text	0000000c os_tick
0800a4ba g     F .text	00000014 _ZN5codal3_cm3Pin13disableEventsEv
0800074c  w    F .boot_text	00000002 usb_hp_can_tx_isr
0800a4fa  w    F .text	00000004 _ZN5codal3_cm6Serial15enableInterruptENS_19SerialInterruptTypeE
080096e4 g     F .text	0000009c _ZN5codal3_cm3SPIC2ERNS0_3PinES3_S3_S3_
08007518  w    F .text	00000018 _ZN5codal14CodalComponentD2Ev
0800a944 g     F .text	0000001e _ZN5codal3I2C13writeRegisterEthh
20000000 g     O .boot_data	0000001c base_para
0800a962 g     F .text	00000078 _ZN5codal3I2C4readEtPhib
0800074c  w    F .boot_text	00000002 tim6_isr
0800557c g       *ABS*	00000000 _boot_data_loadaddr
0800a4fe  w    F .text	00000004 _ZN5codal3_cm6Serial16disableInterruptENS_19SerialInterruptTypeE
0800b014 g       .init_array	00000000 _etext
0800181c g     F .boot_text	0000006c gpio_set_mode
0800557c g     O .boot_fini_array	00000004 __boot_fini_array_start
08009828 g     F .text	0000002e _ZN5codal11queue_fiberEPNS_5FiberEPS1_
0800074c  w    F .boot_text	00000002 usb_wakeup_isr
0800074c g     F .boot_text	00000002 blocking_handler
2000085d g     O .boot_bss	00000001 running
08002b64 g     F .boot_text	00000020 led_setup
0800074c  w    F .boot_text	00000002 tim5_isr
08009a74 g     F .text	00000050 _ZN5codal6Serial12initialiseRxEv
0800a296 g     F .text	00000030 _ZN5codal13ManagedStringC2EPKcs
080029f8 g     F .boot_text	0000001c debug_println
20004bbc g     O .boot_buf	00000442 hf2_buffer
0800074c  w    F .boot_text	00000002 otg_fs_isr
08000aa0 g     F .boot_text	00000074 test_codal
0800a42c g     F .text	00000004 _ZN5codal3_cm3Pin14getAnalogValueEv
08009780 g     F .text	0000002c pinmap_peripheral
0800074c  w    F .boot_text	00000002 spi1_isr
08009a6a g     F .text	0000000a _ZN5codal6Serial8unlockRxEv
08000a64 g     F .boot_text	00000014 target_wait_us
08002884 g     F .boot_text	00000048 logger_add_output
08007eec g     F .text	0000003c _Z18device_create_heapmm
080018d8 g     F .boot_text	00000004 usbd_register_sof_callback
0800991e g     F .text	000000a0 _Z16device_malloc_injR14HeapDefinition
08003d70 g     F .boot_text	00000058 winusb_setup
08000e00 g     F .boot_text	00000014 rcc_set_pll_multiplication_factor
0800a4ce g     F .text	0000002c _ZN5codal3_cm3Pin7eventOnEi
0800273a g     F .boot_text	0000001a memcpy
0800074c  w    F .boot_text	00000002 exti2_isr
0800074c  w    F .boot_text	00000002 dma1_channel6_isr
20001000 g     O .data	00000004 app_data_test
0800074e g     F .boot_text	00000002 null_handler
20000048 g     O .boot_data	00000004 rcc_ahb_frequency
08008a50 g     F .text	000000a8 _ZN5codal13STM32BluePillC2Ev
0800a806 g     F .text	00000054 _ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap
0800a3c8 g     F .text	00000018 _ZN5codal22MemberFunctionCallback4fireENS_5EventE
08002d90 g     F .boot_text	00000020 poll_restart_callback
08000b62 g     F .boot_text	00000008 tcb_configure_args
20002184 g     O .bss	00000004 app_bss_test
08004720 g     F .boot_text	00000080 hf2_setup
0800074c  w    F .boot_text	00000002 can_rx1_isr
0800b014 g       .fini_array	00000000 __fini_array_end
0800074c  w    F .boot_text	00000002 dma1_channel5_isr
08000678 g     F .boot_text	000000d4 baseloader_fetch
0800a85a g     F .text	0000002a _ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_
08001892 g     F .boot_text	00000008 usart_recv
08008554 g     F .text	0000002c _ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE
0800a388 g     F .text	00000008 _ZN5codal10RefCounted7destroyEv
08007f28  w    F .text	00000054 malloc
0800074c  w    F .boot_text	00000002 dma2_channel5_isr
080099e6 g     F .text	00000018 _ZN5codal8ListenerD1Ev
08004a24 g     O .boot_text	00000034 st_usbfs_v1_usb_driver
080048a4 g     F .boot_text	0000000a bootloader_set_restart_callback
08001108 g     F .boot_text	00000034 rtc_clear_flag
08000c9c g     F .boot_text	00000020 desig_get_unique_id
08009d50 g     F .text	0000006a _ZN5codal5Timer8setEventEmttb
08007b40 g     F .text	00000068 _Z14__create_fibermmmi
080077e4 g     F .text	00000010 codal_dmesg_flush
08000b2c g     F .boot_text	0000000c target_set_bootloader_callback
0800074c  w    F .boot_text	00000002 usart1_isr
0800828c  w    F .text	0000008c _ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt
00000844 g       *ABS*	00000000 _bootbuf_size
08007bb8 g     F .text	00000044 _ZN5codal4idleEv
20000180 g     O .boot_bss	00000004 .hidden __dso_handle
080097d4 g     F .text	00000028 pinmap_cnf
08000b5e g     F .boot_text	00000004 tcb_get_sp
080020de g     F .boot_text	00000028 usbd_register_set_config_callback
0800a502  w    F .text	00000004 _ZN5codal3_cm6Serial11setBaudrateEm
080013dc g     F .boot_text	00000160 st_usbfs_ep_setup
080084cc g     F .text	00000008 _ZN5codal3_cm3Pin17getAnalogPeriodUsEv
0800a7c8 g     F .text	00000004 _ZN5codal3_cm3I2C4readEtPhib
08009d34 g     F .text	0000000e _ZN5codal5Timer7getTimeEv
080098ea g     F .text	00000010 _ZN5codal13release_fiberEPv
08007f7c g     F .text	00000044 device_free
0800a40e  w    F .text	00000006 _ZN5codal3Pin8drainPinEv
0800074c  w    F .boot_text	00000002 usage_fault_handler
0800074c  w    F .boot_text	00000002 tim8_trg_com_isr
08008728 g     F .text	00000034 _ZN5codal3_cm5TimerC1Ev
0800074c  w    F .boot_text	00000002 can2_rx0_isr
08002a78 g     F .boot_text	00000070 debug_printhex
08000e28 g     F .boot_text	00000014 rcc_set_pllxtpre
0800a8e0 g     F .text	00000006 _ZN5codal3I2C4readENS_15AcknowledgeTypeE
08002508 g     F .boot_text	00000044 os_task_highest_prio_ready_task
0800074c  w    F .boot_text	00000002 tim1_brk_isr
080088f0 g     F .text	000000e0 start_background_tasks
080081c4 g     F .text	00000088 _ZN5codal10MessageBus7processERNS_5EventEb
0800a7b0 g     F .text	00000002 _ZN13UARTInterfaceC2Ejj
08007518  w    F .text	00000018 _ZN5codal14CodalComponentD1Ev
08002a46 g     F .boot_text	0000000a debug_flush
08003bdc g     F .boot_text	0000004c webusb_setup
2000204c g     O .bss	00000001 serialPort
0800a8c8 g     F .text	00000006 _ZN5codal3I2C12setFrequencyEm
08007db4 g     F .text	00000038 _ZN5codal11fiber_sleepEm
0800a0b4 g     F .text	00000018 _ZN5codal10MessageBus4sendENS_5EventE
08000ff0 g     F .boot_text	00000024 rtc_exit_config_mode
08000dec g     F .boot_text	00000014 rcc_set_sysclk_source
0800aeec g     O .text	0000002c _ZTVN5codal3_cm3I2CE
0800074c  w    F .boot_text	00000002 can2_rx1_isr
08002d4c g     F .boot_text	00000008 _ZdlPv
0800116c g     F .boot_text	00000010 pwr_disable_backup_domain_write_protect
080086a8 g     F .text	00000014 _ZN5codal3_cm14alarm_callbackEv
08000000 g       .boot_text	00000000 _boot_text
0800074c  w    F .boot_text	00000002 tim1_cc_isr
0800a272 g     F .text	00000024 _ZN5codal13ManagedStringC1Ei
08008094 g     F .text	00000024 _ZN5codal27system_timer_event_every_usEmtt
0800a50a  w    F .text	00000004 _ZN5codal3_cm6Serial4putcEc
080084d4 g     F .text	00000018 _ZN5codal3_cm3Pin15getAnalogPeriodEv
080031d0 g     F .boot_text	0000009c flash_flush
0800189a g     F .boot_text	0000001c rcc_periph_clock_enable
080018fc g     F .boot_text	00000030 _usbd_reset
08002db0 g     F .boot_text	00000030 bootloader_poll
0800a9da g     F .text	0000001c _ZN5codal3I2C5writeEth
08003850 g     F .boot_text	00000048 dump_buffer
080086bc g     F .text	00000024 _ZN5codal3_cm5Timer9triggerInEm
0800074c  w    F .boot_text	00000002 sdio_isr
08000f14 g     F .boot_text	00000014 rcc_set_ppre1
08002d2c g     F .boot_text	0000000c platform_alarm_count
08001bc4 g     F .boot_text	00000056 _usbd_control_in
080047a0 g     F .boot_text	00000034 backup_write
0800074c  w    F .boot_text	00000002 eth_isr
0800a8da g     F .text	00000006 _ZN5codal3I2C5writeEh
2000004c g     O .boot_data	00000004 rcc_apb1_frequency
080047d4 g     F .boot_text	00000018 backup_read
20002210 g     O .bss	00000001 _ZN5codal14CodalComponent13configurationE
080033a0 g     F .boot_text	000000e8 boot_target_get_startup_mode
08000f28 g     F .boot_text	00000014 rcc_set_hpre
0800074c  w    F .boot_text	00000002 dma1_channel4_isr
0800074c  w    F .boot_text	00000002 tim8_brk_isr
0800807c g     F .text	00000018 _ZN5codal25system_timer_current_timeEv
0800a50e  w    F .text	00000006 _ZN5codal3_cm6Serial4getcEv
0800074c  w    F .boot_text	00000002 dma2_channel4_5_isr
0800254c g     F .boot_text	0000001c os_task_clear_wait_queue
08009a60 g     F .text	0000000a _ZN5codal6Serial6lockRxEv
0800a1fc g     F .text	00000022 _ZN5codal14EventQueueItemC1ENS_5EventE
080035a8 g     F .boot_text	00000020 boot_target_manifest_bootloader
20002144 g     O .bss	00000004 _ZN5codal12currentFiberE
08009e92 g     F .text	00000002 _ZN5codal5TimerD2Ev
08000b20 g     F .boot_text	0000000c target_set_alarm_callback
080048c2 g     F .boot_text	0000000a boot_target_get_serial_number
20002170 g     O .bss	00000004 _ZN5codal10EventModel15defaultEventBusE
08007ba8 g     F .text	00000010 _ZN5codal24scheduler_runqueue_emptyEv
08007688 g     F .text	00000068 _Z18component_callbackN5codal5EventE
08003754 g     F .boot_text	00000038 get_usb_status
20002218 g       .bss	00000000 _ebss
0800a1c2 g     F .text	0000001e _ZN5codal5EventC1EttNS_15EventLaunchModeE
08002370 g     F .boot_text	00000030 os_init
080018e8 g     F .boot_text	00000014 usbd_ep_setup
0800749c  w    F .text	00000008 _ZN5codal14CodalComponent4initEv
08000c6e g       .boot_text	00000000 restore_register_context
08001ac0 g     F .boot_text	00000030 usbd_register_control_callback
08009dca g     F .text	00000024 _ZN5codal5Timer4syncEm
20000040 g     O .boot_data	00000004 hal_data_test
0800074c  w    F .boot_text	00000002 pvd_isr
08001938 g     F .boot_text	0000000c usbd_ep_read_packet
080097fc g     F .text	0000000c _ZN5codal3I2CC2ERNS_3PinES2_
0800825c  w    F .text	00000030 _ZN5codal22MemberFunctionCallbackC1INS_10MessageBusEEEPT_MS3_FvNS_5EventEE
0800a1e0 g     F .text	0000001c _ZN5codal5EventC1EttmNS_15EventLaunchModeE
08002b04 g     F .boot_text	0000004c platform_setup
0800860c  w    F .text	0000001c _ZN5codal3_cm6SerialD0Ev
0800825c  w    F .text	00000030 _ZN5codal22MemberFunctionCallbackC2INS_10MessageBusEEEPT_MS3_FvNS_5EventEE
080080d4  w    F .text	00000008 _ZN5codal10EventModel6removeEPNS_8ListenerE
08002344 g     F .boot_text	0000000c os_event_init
08008af8 g     F .text	00000b58 _ZN5codal15STM32BluePillIOC2Ev
0800988a g     F .text	0000001e _ZN5codal12create_fiberEPFvvES1_
0800a296 g     F .text	00000030 _ZN5codal13ManagedStringC1EPKcs
20000548 g     O .boot_bss	00000004 usbd_dev
0800a300 g     F .text	0000001c _ZN5codal13ManagedString6charAtEs
08000b3c g     F .boot_text	00000004 target_disable_irq
08002b84 g     F .boot_text	00000014 led_on
080098dc g     F .text	0000000e _ZN5codal16launch_new_fiberEPFvvES1_
00001000 g       *ABS*	00000000 _bootram_size
08000168 g     F .boot_text	00000510 baseloader_start
080023a0 g     F .boot_text	0000000c os_running
2000085e g     O .boot_bss	00000001 last_running_task
0800838c g     F .text	00000050 _ZN5codal10MessageBusD2Ev
0800074e  w    F .boot_text	00000002 sv_call_handler
20001008 g     O .bss	00001044 bluepill
0800074c  w    F .boot_text	00000002 rcc_isr
08009dba g     F .text	00000010 _ZN5codal5Timer12eventEveryUsEmtt
20002174 g     O .bss	00000004 _ZN5codal13ManagedString11EmptyStringE
08000000 g     O .boot_text	00000150 vector_table
08000cbc g     F .boot_text	00000050 desig_get_unique_id_as_string
08000c3e g       .boot_text	00000000 save_register_context
080037cc g     F .boot_text	00000060 aggregate_register_callback
0800aa8c g     O .text	00000038 _ZTVN5codal6SerialE
08007400 g     F .text	00000088 application_start
0800074c  w    F .boot_text	00000002 flash_isr
0800b014 g       *ABS*	00000000 _data_loadaddr
08007ab0 g     F .text	00000090 _ZN5codal19fiber_wake_on_eventEtt
20005000 g       .boot_buf	00000000 end
0800074c  w    F .boot_text	00000002 uart4_isr
0800a7a6 g     F .text	00000002 _ZN5codal13STM32BluePill16periodicCallbackEv
08001088 g     F .boot_text	00000040 rtc_interrupt_enable
080089d0 g     F .text	00000080 _ZN5codal13STM32BluePill4initEv
080084ec g     F .text	00000068 _ZN5codal3_cm3Pin15setDigitalValueEi
08000780  w    F .boot_text	0000002c rtc_alarm_isr
0800074c  w    F .boot_text	00000002 exti15_10_isr
0800557c g     O .boot_init_array	00000004 __boot_init_array_end
0800797c g     F .text	00000018 _ZN5codal23fiber_scheduler_runningEv
08009dee g     F .text	000000a4 _ZN5codal5Timer7triggerEv
08003588 g     F .boot_text	00000020 boot_target_manifest_baseloader
0800a414 g     F .text	00000004 _ZN5codal3_cm3Pin15getDigitalValueEv
08000e14 g     F .boot_text	00000014 rcc_set_pll_source
08000b56 g     F .boot_text	00000004 tcb_get_stack_base
0800a5cc g     F .text	000001cc _ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE
0800a1ae g     F .text	00000014 _ZN5codal5EventC2Ev
0800a7a8 g     F .text	00000008 _ZN5codal13STM32BluePill12idleCallbackEv
08003ec8 g     F .boot_text	00000068 cdcadm_transmit
080023e4 g     F .boot_text	00000074 os_msgQ_tick
08000b40 g     F .boot_text	0000000a tcb_allocate
0800aac4 g     O .text	00000018 _ZTVN5codal5TimerE
08009d22 g     F .text	00000012 _ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE
0800af60 g     O .text	0000001c _ZTVN5codal3_cm3SPIE
0800ae5c g     O .text	00000048 PinMap_SPI_NSS
0800074c  w    F .boot_text	00000002 hard_fault_handler
0800a8e6 g     F .text	0000005e _ZN5codal3I2C5writeEtPhib
0800074c  w    F .boot_text	00000002 exti1_isr
0800a466 g     F .text	00000006 _ZN5codal3_cm3Pin7setPullENS_8PullModeE
0800875c g     F .text	00000060 _ZN5codal3_cm5Timer4initEv
08002568 g     F .boot_text	000000ac os_task_tick
0800382c g     F .boot_text	00000024 usb_set_serial_number
0800074c  w    F .boot_text	00000002 i2c1_ev_isr
08007dec g     F .text	00000070 _ZN5codal13release_fiberEv
080018b6 g     F .boot_text	00000022 rcc_periph_reset_pulse
0800a25a g     F .text	00000018 _ZN5codal13ManagedStringC2EPNS_10StringDataE
0800aea4 g     O .text	00000048 PinMap_SPI_SCK
080015bc g     F .boot_text	00000090 st_usbfs_ep_write_packet
0800218c g     F .boot_text	0000006c st_usbfs_endpoints_reset
0800074c  w    F .boot_text	00000002 dma2_channel1_isr
08009ea4  w    F .text	00000036 _ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE
080080cc  w    F .text	00000008 _ZN5codal10EventModel3addEPNS_8ListenerE
08007f28 g     F .text	00000054 device_malloc
08002878 g     F .boot_text	0000000c enable_log
0800074e  w    F .boot_text	00000002 pend_sv_handler
08002d38 g     F .boot_text	0000000c __cxa_pure_virtual
08007830 g     F .text	000000c0 _ZN5codal15scheduler_eventENS_5EventE
0800113c g     F .boot_text	00000030 rtc_check_flag
0800a59c g     F .text	00000028 _ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE
0800adcc g     O .text	00000048 PinMap_SPI_MISO
0800074c  w    F .boot_text	00000002 spi2_isr
080084a4 g     F .text	00000020 _ZN5codal3_cm3Pin14setAnalogValueEi
080009c8 g     F .boot_text	00000030 target_init
200008bc g       .boot_bss	00000000 boot_end
08007994 g     F .text	0000011c _ZN5codal14scheduler_initERNS_10EventModelE
08009d42 g     F .text	0000000e _ZN5codal5Timer9getTimeUsEv
080026ac g     F .boot_text	00000038 os_task_run
08000eec g     F .boot_text	00000014 rcc_set_adcpre
0800a7c4 g     F .text	00000004 _ZN5codal3_cm3I2C5writeEtPhib
08001950 g     F .boot_text	0000000c usbd_ep_stall_get
0800a352 g     F .text	00000036 _ZN5codal10RefCounted4decrEv
0800074c  w    F .boot_text	00000002 tim8_up_isr
0800277a g     F .boot_text	00000040 strncpy
08002458 g     F .boot_text	0000000c os_sem_init
0800824c g     F .text	00000010 _ZN5codal19allocateNotifyEventEv
0800a10a  w    F .text	0000003e _ZN5codal8ListenerC2INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt
08007610  w    F .text	00000054 _ZN5codal13STM32BluePillD0Ev
0800a148  w    F .text	00000044 _ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE
08009856 g     F .text	00000034 _ZN5codal13dequeue_fiberEPNS_5FiberE
0800074c  w    F .boot_text	00000002 dma2_channel2_isr
080011fc g     F .boot_text	00000014 flash_set_ws
0800557c g     O .boot_fini_array	00000004 __boot_fini_array_end
0800a21e g     F .text	0000000e _ZN5codal13ManagedStringD2Ev
08000e4c g     F .boot_text	000000a0 rcc_set_rtc_clock_source
0800137c g     F .boot_text	00000060 st_usbfs_set_ep_rx_bufsize
08008628 g     F .text	00000050 _ZN5codal3_cm6SerialC2ERNS0_3PinES3_hh
08003898 g     F .boot_text	000001a4 dump_usb_request
0800aa3c  w    O .text	0000001c _ZTVN5codal14CodalComponentE
0800557c g       .boot_init_array	00000000 _boot_etext
0800271a g     F .boot_text	00000020 memcmp
08009ac4 g     F .text	00000028 _ZN5codal6Serial12circularCopyEPhhS1_tt
08001af0 g     F .boot_text	0000004a _usbd_control_setup
0800a458 g     F .text	0000000e _ZN5codal3_cm3Pin8isAnalogEv
08000f00 g     F .boot_text	00000014 rcc_set_ppre2
0800074e  w    F .boot_text	00000002 debug_monitor_handler
0800074c  w    F .boot_text	00000002 exti3_isr
0800074c  w    F .boot_text	00000002 adc3_isr
08007530  w    F .text	00000020 _ZN5codal14CodalComponentD0Ev
08000bfa g       .boot_text	00000000 save_context
0800074c  w    F .boot_text	00000002 tim3_isr
080007ac  w    F .boot_text	0000005c usart2_isr
0800135c g     F .boot_text	00000010 scb_reset_system
08000a78 g     F .boot_text	00000020 target_panic
08009cfe g     F .text	00000024 _ZN5codal5Timer13getTimerEventEv
08002a50 g     F .boot_text	00000018 debug_print
0800074c  w    F .boot_text	00000002 usb_lp_can_rx0_isr
08007400 g       .text	00000000 _text
08000b78 g       .boot_text	00000000 swap_context
200047bc g     O .boot_buf	00000400 flashBuf
2000001c g     O .boot_data	00000024 base_tmp
08002350 g     F .boot_text	00000010 os_signal_event
0800b014 g       .fini_array	00000000 __fini_array_start
0800074c  w    F .boot_text	00000002 i2c2_er_isr
0800270c g     F .boot_text	00000002 os_cbkSleep
0800153c g     F .boot_text	00000080 st_usbfs_ep_nak_set
0800a2d6 g     F .text	0000000c _ZN5codal13ManagedStringC1Ev
08002754 g     F .boot_text	00000016 memset
2000216c g     O .bss	00000004 _ZN5codal12system_timerE
08007488 g     F .text	00000014 main
080098a8 g     F .text	00000020 _ZN5codal12create_fiberEPFvPvES0_S2_
08001210 g     F .boot_text	00000058 usbd_init
20002050 g     O .bss	000000f0 _ZN5codal14CodalComponent10componentsE
080097fc g     F .text	0000000c _ZN5codal3I2CC1ERNS_3PinES2_
0800074c  w    F .boot_text	00000002 i2c2_ev_isr
08002360 g     F .boot_text	00000010 os_event_set_signaling_tid
08007550 g     F .text	00000074 _Z10Blink_mainRN5codal13STM32BluePillE
0800074c  w    F .boot_text	00000002 uart5_isr
20002164 g     O .bss	00000008 heap
08002cf8 g     F .boot_text	00000034 platform_set_alarm
20000860 g     O .boot_bss	0000005b hf2_buffer_mini
0800a7ee g     F .text	00000018 _ZN5codal3_cm3SPI7setModeEii
0800074e  w    F .boot_text	00000002 sys_tick_handler
0800aadc  w    O .text	00000014 _ZTVN5codal10EventModelE
080026e4 g     F .boot_text	00000028 os_on_assert
0800838c g     F .text	00000050 _ZN5codal10MessageBusD1Ev
0800b014 g       .init_array	00000000 __init_array_end
0800074c  w    F .boot_text	00000002 fsmc_isr
0800074c  w    F .boot_text	00000002 dma1_channel1_isr
0800074c  w    F .boot_text	00000002 exti4_isr
08008728 g     F .text	00000034 _ZN5codal3_cm5TimerC2Ev
0800ab38 g     O .text	00000054 _ZTVN5codal3_cm3PinE
20000044 g     O .boot_data	00000004 codal_heap_start
0800a7dc g     F .text	0000000e _ZN5codal3_cm3SPI5writeEi
080085f8  w    F .text	00000014 _ZN5codal3_cm6SerialD2Ev
08008048 g     F .text	00000034 _ZN5codal5TimerC2Ev
080098c8 g     F .text	00000014 _ZN5codal20fiber_wait_for_eventEtt
080009f8 g     F .boot_text	00000010 target_wait_for_event
080099be g     F .text	00000028 _ZN5codal8ListenerC2EttPFvNS_5EventEEt
08004870 g     F .boot_text	00000034 usb21_setup
08007fc0 g     F .text	00000060 _ZN5codal6SerialC2ERNS_3PinES2_hht
08000d0c g     F .boot_text	00000070 rcc_wait_for_osc_ready
0800291c g     F .boot_text	00000020 debug_force_flush
0800a492 g     F .text	00000018 _ZN5codal3_cm3Pin17setAnalogPeriodUsEi
0800293c g     F .boot_text	00000088 _Z11debug_printj
0800a7c0 g     F .text	00000004 _ZN5codal3_cm3I2C12setFrequencyEm
08008318 g     F .text	00000074 _ZN5codal10MessageBusC1Ev
08009f70 g     F .text	00000076 _ZN5codal10MessageBus6removeEPNS_8ListenerE
080011d8 g     F .boot_text	00000018 exti_enable_request
0800118c g     F .boot_text	0000004c exti_set_trigger
0800074c  w    F .boot_text	00000002 mem_manage_handler
08008894 g     F .text	0000005c restart_callback
0800a430 g     F .text	0000000e _ZN5codal3_cm3Pin7isInputEv
0800a44c g     F .text	0000000c _ZN5codal3_cm3Pin9isDigitalEv
20000050 g     O .boot_data	00000004 rcc_apb2_frequency
0800a1ae g     F .text	00000014 _ZN5codal5EventC1Ev
08001014 g     F .boot_text	00000020 rtc_set_alarm_time
080018dc g     F .boot_text	0000000c usbd_poll
0800a8d4 g     F .text	00000006 _ZN5codal3I2C4stopEv
08000b6a g     F .boot_text	00000002 _fini
0800a22c g     F .text	0000002e _ZN5codal13ManagedString10initStringEPKci
08000a08 g     F .boot_text	0000005c target_wait
0800074c  w    F .boot_text	00000002 can2_tx_isr
0800966c g     F .text	0000001c _ZN5codal3_cm3I2CC1ERNS_3PinES3_
08007e5c g     F .text	00000090 _ZN5codal6invokeEPFvPvES0_
0800074c  w    F .boot_text	00000002 exti9_5_isr
08002b98 g     F .boot_text	00000014 led_off
0800a402  w    F .text	00000006 _ZN5codal3Pin15setServoPulseUsEm
0800074c  w    F .boot_text	00000002 dma2_channel3_isr
0800a32a g     F .text	00000028 _ZN5codal10RefCounted4incrEv
08000e3c g     F .boot_text	00000010 rcc_enable_rtc_clock
08009eda g     F .text	00000096 _Z14async_callbackPv
080012b4 g     F .boot_text	00000034 _usbd_standard_request_interface
080012e8 g     F .boot_text	00000044 _usbd_standard_request_endpoint
0800980a  w    F .text	00000002 _ZN5codal14CodalComponent12idleCallbackEv
08002614 g     F .boot_text	00000098 os_task_signal_event
0800b000 g       .preinit_array	00000000 __preinit_array_end
08002174 g     F .boot_text	00000018 nvic_enable_irq
08002bac g     F .boot_text	00000014 led_wait
08000b70 g     F .boot_text	00000008 target_enable_debug
08008af8 g     F .text	00000b58 _ZN5codal15STM32BluePillIOC1Ev
0800074c  w    F .boot_text	00000002 dma1_channel7_isr
08003514 g     F .boot_text	00000034 boot_target_usb_init
08002cc4 g     F .boot_text	00000034 platform_start_timer
080099be g     F .text	00000028 _ZN5codal8ListenerC1EttPFvNS_5EventEEt
08003f7c g     F .boot_text	0000002c cdc_setup
0800074c  w    F .boot_text	00000002 tim1_up_isr
20001000 g       .data	00000000 _data
08001034 g     F .boot_text	00000020 rtc_set_prescale_val
0800319c g     F .boot_text	00000034 base_flash_program_array
080086e0 g     F .text	00000048 _ZN5codal3_cm5Timer11syncRequestEv
0800a418 g     F .text	00000014 _ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE
20002178 g     O .bss	00000004 _ZN5codal3_cm5Timer8instanceE
0800966c g     F .text	0000001c _ZN5codal3_cm3I2CC2ERNS_3PinES3_
08000f3c g     F .boot_text	00000090 rcc_clock_setup_in_hse_8mhz_out_72mhz
0800a488 g     F .text	00000006 _ZN5codal3_cm3Pin10disconnectEv
0800a390 g     F .text	00000006 _ZN5codal10RefCounted4initEv
08008678 g     F .text	00000030 _ZN5codal3_cm13tick_callbackEv
0800a2c6 g     F .text	00000010 _ZN5codal13ManagedStringC2ERKS0_
0800a2d6 g     F .text	0000000c _ZN5codal13ManagedStringC2Ev
0800a3e0 g     F .text	00000022 _ZN5codal22MemberFunctionCallbackeqERKS0_
08001054 g     F .boot_text	00000014 rtc_get_counter_val
0800a408  w    F .text	00000006 _ZN5codal3Pin17setAnalogPeriodUsEm
0800a4aa g     F .text	00000010 _ZN5codal3_cm3Pin15setAnalogPeriodEi
0800074c  w    F .boot_text	00000002 can2_sce_isr
0800117c g     F .boot_text	00000010 pwr_enable_backup_domain_write_protect
0800074c  w    F .boot_text	00000002 tim4_isr
0800afd4 g     O .text	0000002c _ZTVN5codal3I2CE
08009fe6 g     F .text	00000024 _ZN5codal10MessageBus12dequeueEventEv
080021f8 g     F .boot_text	00000108 st_usbfs_ep_stall_set
0800a00a g     F .text	0000004c _ZN5codal10MessageBus21deleteMarkedListenersEv
0800368c g     F .boot_text	000000ac usb_setup
200008bc g       .boot_bss	00000000 _boot_ebss
08008554 g     F .text	0000002c _ZN5codal3_cm3PinC2EhmmtNS_13PinCapabilityE
20001008 g       .data	00000000 _edata
080098fa g     F .text	00000018 _ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_
080080dc g     F .text	000000e8 _ZN5codal10MessageBus3addEPNS_8ListenerE
0800ab8c g     O .text	00000038 _ZTVN5codal3_cm6SerialE
0800074c  w    F .boot_text	00000002 dma1_channel2_isr
0800a2c6 g     F .text	00000010 _ZN5codal13ManagedStringC1ERKS0_
0800074c  w    F .boot_text	00000002 i2c1_er_isr
0800a1e0 g     F .text	0000001c _ZN5codal5EventC2EttmNS_15EventLaunchModeE
08001268 g     F .boot_text	0000004c _usbd_standard_request_device
080078f0 g     F .text	00000058 _Z15getFiberContextv
08000b38 g     F .boot_text	00000004 target_enable_irq
08009cea g     F .text	0000000a _ZN5codal5Timer17disableInterruptsEv
0800074c  w    F .boot_text	00000002 can_sce_isr
0800a7ea g     F .text	00000004 _ZN5codal3_cm3SPI8transferEPKhmPhm
0800074e  w    F .boot_text	00000002 nmi_handler
0800a10a  w    F .text	0000003e _ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt
080010c8 g     F .boot_text	00000040 rtc_interrupt_disable
08002eac g     F .boot_text	00000280 prepare_baseloader
0800557c g     O .boot_preinit_array	00000004 __boot_preinit_array_end
080028cc g     F .boot_text	00000050 _Z20debug_flush_internalb
08002d44 g     F .boot_text	00000008 _Znwj
2000075c g     O .boot_bss	00000008 st_usbfs_force_nak
0800aaf0 g     O .text	0000003c _ZTVN5codal10MessageBusE
20000000 g       .boot_data	00000000 _boot_data
08009912 g     F .text	0000000c _ZN5codal9idle_taskEv
0800a1a6 g     F .text	00000008 _ZThn8_N5codal10MessageBusD0Ev
0800074c  w    F .boot_text	00000002 tim8_cc_isr
08009688 g     F .text	0000005c _ZN5codal3_cm3SPI4initEv
08008a50 g     F .text	000000a8 _ZN5codal13STM32BluePillC1Ev
08000d7c g     F .boot_text	00000070 rcc_osc_on
200047bc g       .boot_buf	00000000 _boot_stack
08009e94 g     F .text	00000010 _ZN5codal10MessageBus9elementAtEi
08001720 g     F .boot_text	000000fc st_usbfs_poll
0800a18c g     F .text	00000008 _ZThn8_N5codal10MessageBusD1Ev
0800511c g     O .boot_text	00000018 webusb_platform_capability_descriptor
08007bfc g     F .text	000001b8 _ZN5codal8scheduleEv
0800557c g     O .boot_init_array	00000004 __boot_init_array_start
0800a564 g     F .text	00000028 _ZN5codal3_cm6Serial12circularCopyEPhhS2_tt
08008580 g     F .text	00000078 _ZN5codal3_cm3Pin13setServoValueEiii
080034a8 g     F .boot_text	0000006c boot_target_gpio_setup
20000758 g     O .boot_bss	00000004 hal_bss_test
0800074c  w    F .boot_text	00000002 tamper_isr
0800b000 g       .init_array	00000000 __init_array_start
0800188c g     F .boot_text	00000006 gpio_clear
0800378c g     F .boot_text	00000040 aggregate_register_config_callback
080076f0 g     F .text	000000cc _ZN5codal14CodalComponent12addComponentEv
0800074c  w    F .boot_text	00000002 eth_wkup_isr
08002b50 g     F .boot_text	00000014 enable_debug
08002138 g     F .boot_text	00000018 st_usbfs_copy_to_pm
0800a0cc g     F .text	0000003e _ZN5codal10MessageBus4idleENS_5EventE
0800a1c2 g     F .text	0000001e _ZN5codal5EventC2EttNS_15EventLaunchModeE
080080b8  w    F .text	00000014 _ZN5codal10EventModel4sendENS_5EventE
08002494 g     F .boot_text	00000074 os_task_init
0800a25a g     F .text	00000018 _ZN5codal13ManagedStringC1EPNS_10StringDataE
0800a056 g     F .text	0000005e _ZN5codal10MessageBus10queueEventERNS_5EventE
08002150 g     F .boot_text	00000024 st_usbfs_copy_from_pm
08003488 g     F .boot_text	00000020 boot_target_set_led
0800276a g     F .boot_text	00000010 strlen
08002ae8 g     F .boot_text	0000001c debug_printhex_unsigned
08000b4a g     F .boot_text	00000004 tcb_configure_lr
2000016c g       .boot_data	00000000 _boot_edata
20005000 g       .boot_buf	00000000 _stack
0800a514 g     F .text	0000000a _ZN5codal3_cm6Serial6lockRxEv
080083f8 g     F .text	0000000c _ZN5codal13ManagedString9initEmptyEv
20005000 g       .boot_buf	00000000 _eboot_buf
080083dc g     F .text	0000001c _ZN5codal5Event4fireEv
08001888 g     F .boot_text	00000004 gpio_set
0800a46c g     F .text	0000001c _ZN5codal3_cm3Pin5setupEhh
080099fe g     F .text	00000062 _ZN5codal8Listener5queueENS_5EventE
0800074c  w    F .boot_text	00000002 bus_fault_handler
0800074c  w    F .boot_text	00000002 wwdg_isr
0800074c  w    F .boot_text	00000002 dma1_channel3_isr
08009cf4 g     F .text	0000000a _ZN5codal5Timer16enableInterruptsEv
0800843c g     F .text	00000068 _ZN5codal4itoaEiPc
08001068 g     F .boot_text	00000020 rtc_set_counter_val
20000764 g     O .boot_bss	000000f8 st_usbfs_dev
08009e92 g     F .text	00000002 _ZN5codal5TimerD1Ev
0800a528 g     F .text	0000003c _ZN5codal3_cm6Serial12initialiseRxEv
0800a272 g     F .text	00000024 _ZN5codal13ManagedStringC2Ei
080023ac g     F .boot_text	00000038 os_msgQ_init
0800b000 g       .preinit_array	00000000 __preinit_array_start
0800164c g     F .boot_text	000000d4 st_usbfs_ep_read_packet
0800074c  w    F .boot_text	00000002 spi3_isr
080096e4 g     F .text	0000009c _ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_
08000b6c g     F .boot_text	00000004 __aeabi_atexit
08002a68 g     F .boot_text	00000008 debug_print_int
08004cb8 g     O .boot_text	00000055 infoUf2File
08000150 g     O .boot_text	00000018 base_vector_table
08002d54 g     F .boot_text	00000008 millis
08008628 g     F .text	00000050 _ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh
080084c4 g     F .text	00000008 _ZN5codal3_cm3Pin9isTouchedEv
08000b14 g     F .boot_text	0000000c target_set_tick_callback
08003738 g     F .boot_text	0000001c set_usb_busy
0800074c  w    F .boot_text	00000002 tim2_isr
08002a70 g     F .boot_text	00000008 debug_print_unsigned
08005200 g     O .boot_text	0000001c microsoft_platform_capability_descriptor
08007f7c  w    F .text	00000044 free
08000fcc g     F .boot_text	00000024 rtc_enter_config_mode
0800074c  w    F .boot_text	00000002 exti0_isr
0800136c g     F .boot_text	00000010 st_usbfs_set_address
0800a8ce g     F .text	00000006 _ZN5codal3I2C5startEv
08009aec g     F .text	0000002a _ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE



Disassembly of section .boot_text:

08000000 <vector_table>:
 8000000:	00 50 00 20 59 08 00 08 4f 07 00 08 4d 07 00 08     .P. Y...O...M...
 8000010:	4d 07 00 08 4d 07 00 08 4d 07 00 08 00 00 00 00     M...M...M.......
	...
 800002c:	4f 07 00 08 4f 07 00 08 00 00 00 00 4f 07 00 08     O...O.......O...
 800003c:	4f 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     O...M...M...M...
 800004c:	51 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     Q...M...M...M...
 800005c:	4d 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     M...M...M...M...
 800006c:	4d 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     M...M...M...M...
 800007c:	4d 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     M...M...M...M...
 800008c:	4d 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     M...M...M...M...
 800009c:	4d 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     M...M...M...M...
 80000ac:	4d 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     M...M...M...M...
 80000bc:	4d 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     M...M...M...M...
 80000cc:	4d 07 00 08 4d 07 00 08 4d 07 00 08 ad 07 00 08     M...M...M.......
 80000dc:	4d 07 00 08 4d 07 00 08 81 07 00 08 4d 07 00 08     M...M.......M...
 80000ec:	4d 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     M...M...M...M...
 80000fc:	4d 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     M...M...M...M...
 800010c:	4d 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     M...M...M...M...
 800011c:	4d 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     M...M...M...M...
 800012c:	4d 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     M...M...M...M...
 800013c:	4d 07 00 08 4d 07 00 08 4d 07 00 08 4d 07 00 08     M...M...M...M...
 800014c:	4d 07 00 08                                         M...

08000150 <base_vector_table>:
 8000150:	69 19 05 22 01 00 01 00 69 01 00 08 4c 07 00 08     i.."....i...L...
 8000160:	01 74 00 08 22 05 69 19                             .t..".i.

08000168 <baseloader_start>:
	8000170:	fa22 fc05 	lsr.w	ip, r2, r5
		dest = (uint16_t *) dest0;
	8000174:	4aa9      	ldr	r2, [pc, #676]	; (800041c <baseloader_start+0x2b4>)  */

//  This must be the first function in the file.  Macros appearing before the function are OK.
void baseloader_start(void) {
 8000168:	b430      	push	{r4, r5}
	//  uint32_t byte_count;	//  Byte size of new Bootloader.
	//  uint32_t restart;  		//  Set to 1 if we should restart the device after copying Bootloader.
	//  int result;				//  Number of bytes copied, or negative for error.
	//  uint32_t fail;  		//  Address that caused the Baseloader to fail.

	base_tmp.dest_hw = (uint16_t *) base_para.dest;
 800016a:	498d      	ldr	r1, [pc, #564]	; (80003a0 <baseloader_start+0x238>)
 800016c:	6808      	ldr	r0, [r1, #0]
 800016e:	4b8d      	ldr	r3, [pc, #564]	; (80003a4 <baseloader_start+0x23c>)
 8000170:	6018      	str	r0, [r3, #0]
	base_tmp.src_hw  = (uint16_t *) base_para.src;
 8000172:	684d      	ldr	r5, [r1, #4]
 8000174:	605d      	str	r5, [r3, #4]
	base_tmp.half_word_count = base_para.byte_count / 2;
 8000176:	688c      	ldr	r4, [r1, #8]
 8000178:	0862      	lsrs	r2, r4, #1
 800017a:	609a      	str	r2, [r3, #8]
	base_para.result = 0;
 800017c:	2200      	movs	r2, #0
 800017e:	614a      	str	r2, [r1, #20]
	base_para.fail = 0;
 8000180:	618a      	str	r2, [r1, #24]
	base_tmp.bytes_flashed = 0;
 8000182:	60da      	str	r2, [r3, #12]
    base_tmp.verified = true; base_tmp.erase_start = NULL; base_tmp.erase_end = NULL;
 8000184:	2101      	movs	r1, #1
 8000186:	6119      	str	r1, [r3, #16]
 8000188:	615a      	str	r2, [r3, #20]
 800018a:	619a      	str	r2, [r3, #24]
    base_tmp.flash_end = base_get_flash_end();  //  Remember the bounds of erased data in the current page
 800018c:	4a86      	ldr	r2, [pc, #536]	; (80003a8 <baseloader_start+0x240>)
 800018e:	61da      	str	r2, [r3, #28]

	//  Validate dest, src, byte_count before flashing.
    //  TODO: Support other memory sizes.
	if ((uint32_t) base_para.dest < 0x08000000) {  //  Dest ROM address too low.
 8000190:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8000194:	d320      	bcc.n	80001d8 <baseloader_start+0x70>
		base_para.result = -2;
		base_para.fail = (uint32_t) base_para.dest;
		return;
	}
	if (((uint32_t) base_para.dest) + base_para.byte_count > 0x08010000) {  //  Dest ROM address too high.
 8000196:	4420      	add	r0, r4
 8000198:	4b83      	ldr	r3, [pc, #524]	; (80003a8 <baseloader_start+0x240>)
 800019a:	4298      	cmp	r0, r3
 800019c:	d823      	bhi.n	80001e6 <baseloader_start+0x7e>
		base_para.result = -3;
		base_para.fail = ((uint32_t) base_para.dest) + base_para.byte_count;
		return;
	}
	if ((uint32_t) base_para.src >= 0x08000000 &&
 800019e:	f105 4378 	add.w	r3, r5, #4160749568	; 0xf8000000
 80001a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80001a6:	d22a      	bcs.n	80001fe <baseloader_start+0x96>
		(uint32_t) base_para.src < 0x08010000) {  //  If src is in ROM...

		if (((uint32_t) base_para.src) + base_para.byte_count > 0x08010000) {  //  Too many ROM bytes to copy.
 80001a8:	442c      	add	r4, r5
 80001aa:	4b7f      	ldr	r3, [pc, #508]	; (80003a8 <baseloader_start+0x240>)
 80001ac:	429c      	cmp	r4, r3
 80001ae:	d820      	bhi.n	80001f2 <baseloader_start+0x8a>
		base_para.fail = (uint32_t) base_para.src;
		return;
	}

	//  Disable interrupts while flashing Bootloader because the System Vector Table may have been overwritten during flashing.
	if (base_para.restart) { base_disable_interrupts(); }
 80001b0:	4b7b      	ldr	r3, [pc, #492]	; (80003a0 <baseloader_start+0x238>)
 80001b2:	68db      	ldr	r3, [r3, #12]
 80001b4:	b12b      	cbz	r3, 80001c2 <baseloader_start+0x5a>
 80001b6:	b672      	cpsid	i
 80001b8:	2300      	movs	r3, #0
 80001ba:	4a7c      	ldr	r2, [pc, #496]	; (80003ac <baseloader_start+0x244>)
 80001bc:	6013      	str	r3, [r2, #0]
 80001be:	4a7c      	ldr	r2, [pc, #496]	; (80003b0 <baseloader_start+0x248>)
 80001c0:	6013      	str	r3, [r2, #0]

	base_flash_unlock();  if (base_para.result < 0) { return; }  //  Quit if error.
 80001c2:	4b7c      	ldr	r3, [pc, #496]	; (80003b4 <baseloader_start+0x24c>)
 80001c4:	4a7c      	ldr	r2, [pc, #496]	; (80003b8 <baseloader_start+0x250>)
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	4b74      	ldr	r3, [pc, #464]	; (80003a0 <baseloader_start+0x238>)
 80001d0:	695b      	ldr	r3, [r3, #20]
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	da74      	bge.n	80002c0 <baseloader_start+0x158>
 80001d6:	e004      	b.n	80001e2 <baseloader_start+0x7a>
		base_para.result = -2;
 80001d8:	4b71      	ldr	r3, [pc, #452]	; (80003a0 <baseloader_start+0x238>)
 80001da:	f06f 0201 	mvn.w	r2, #1
 80001de:	615a      	str	r2, [r3, #20]
		base_para.fail = (uint32_t) base_para.dest;
 80001e0:	6198      	str	r0, [r3, #24]
        asm("dsb");
		base_scb_reset_system();  //  Restart.
	}
	
	base_para.result = base_tmp.verified ? base_tmp.bytes_flashed : -1;  //  Returns -1 if verification failed.
}
 80001e2:	bc30      	pop	{r4, r5}
 80001e4:	4770      	bx	lr
		base_para.result = -3;
 80001e6:	4b6e      	ldr	r3, [pc, #440]	; (80003a0 <baseloader_start+0x238>)
 80001e8:	f06f 0202 	mvn.w	r2, #2
 80001ec:	615a      	str	r2, [r3, #20]
		base_para.fail = ((uint32_t) base_para.dest) + base_para.byte_count;
 80001ee:	6198      	str	r0, [r3, #24]
		return;
 80001f0:	e7f7      	b.n	80001e2 <baseloader_start+0x7a>
			base_para.result = -4;
 80001f2:	4b6b      	ldr	r3, [pc, #428]	; (80003a0 <baseloader_start+0x238>)
 80001f4:	f06f 0203 	mvn.w	r2, #3
 80001f8:	615a      	str	r2, [r3, #20]
			base_para.fail = ((uint32_t) base_para.src) + base_para.byte_count;
 80001fa:	619c      	str	r4, [r3, #24]
			return;
 80001fc:	e7f1      	b.n	80001e2 <baseloader_start+0x7a>
	} else if ((uint32_t) base_para.src >= 0x20000000 &&
 80001fe:	f105 4360 	add.w	r3, r5, #3758096384	; 0xe0000000
 8000202:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000206:	d209      	bcs.n	800021c <baseloader_start+0xb4>
		if (((uint32_t) base_para.src) + base_para.byte_count > 0x20005000) {  //  Too many RAM bytes to copy.
 8000208:	442c      	add	r4, r5
 800020a:	4b6c      	ldr	r3, [pc, #432]	; (80003bc <baseloader_start+0x254>)
 800020c:	429c      	cmp	r4, r3
 800020e:	d9cf      	bls.n	80001b0 <baseloader_start+0x48>
			base_para.result = -5;
 8000210:	4b63      	ldr	r3, [pc, #396]	; (80003a0 <baseloader_start+0x238>)
 8000212:	f06f 0204 	mvn.w	r2, #4
 8000216:	615a      	str	r2, [r3, #20]
			base_para.fail = ((uint32_t) base_para.src) + base_para.byte_count;
 8000218:	619c      	str	r4, [r3, #24]
			return;
 800021a:	e7e2      	b.n	80001e2 <baseloader_start+0x7a>
		base_para.result = -6;
 800021c:	4b60      	ldr	r3, [pc, #384]	; (80003a0 <baseloader_start+0x238>)
 800021e:	f06f 0205 	mvn.w	r2, #5
 8000222:	615a      	str	r2, [r3, #20]
		base_para.fail = (uint32_t) base_para.src;
 8000224:	619d      	str	r5, [r3, #24]
		return;
 8000226:	e7dc      	b.n	80001e2 <baseloader_start+0x7a>
            base_tmp.verified = false;
 8000228:	4b5e      	ldr	r3, [pc, #376]	; (80003a4 <baseloader_start+0x23c>)
 800022a:	2200      	movs	r2, #0
 800022c:	611a      	str	r2, [r3, #16]
	base_flash_lock();  if (base_para.result < 0) { return; }  //  Quit if error.
 800022e:	4a64      	ldr	r2, [pc, #400]	; (80003c0 <baseloader_start+0x258>)
 8000230:	6813      	ldr	r3, [r2, #0]
 8000232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000236:	6013      	str	r3, [r2, #0]
 8000238:	4b59      	ldr	r3, [pc, #356]	; (80003a0 <baseloader_start+0x238>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	2b00      	cmp	r3, #0
 800023e:	dbd0      	blt.n	80001e2 <baseloader_start+0x7a>
    if (!base_para.preview && base_para.restart) { 
 8000240:	4b57      	ldr	r3, [pc, #348]	; (80003a0 <baseloader_start+0x238>)
 8000242:	691b      	ldr	r3, [r3, #16]
 8000244:	2b00      	cmp	r3, #0
 8000246:	f040 81f6 	bne.w	8000636 <baseloader_start+0x4ce>
 800024a:	4b55      	ldr	r3, [pc, #340]	; (80003a0 <baseloader_start+0x238>)
 800024c:	68db      	ldr	r3, [r3, #12]
 800024e:	2b00      	cmp	r3, #0
 8000250:	f000 81f1 	beq.w	8000636 <baseloader_start+0x4ce>
        asm("dmb");
 8000254:	f3bf 8f5f 	dmb	sy
		SCB_VTOR = (uint32_t) &vector_table;  
 8000258:	4a5a      	ldr	r2, [pc, #360]	; (80003c4 <baseloader_start+0x25c>)
 800025a:	4b5b      	ldr	r3, [pc, #364]	; (80003c8 <baseloader_start+0x260>)
 800025c:	601a      	str	r2, [r3, #0]
        asm("dsb");
 800025e:	f3bf 8f4f 	dsb	sy
		base_scb_reset_system();  //  Restart.
 8000262:	3304      	adds	r3, #4
 8000264:	4a59      	ldr	r2, [pc, #356]	; (80003cc <baseloader_start+0x264>)
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	e7fe      	b.n	8000268 <baseloader_start+0x100>
            base_tmp.erase_start = base_get_flash_page_address(base_tmp.dest_hw);
 800026a:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 800026e:	f020 0003 	bic.w	r0, r0, #3
 8000272:	4b4c      	ldr	r3, [pc, #304]	; (80003a4 <baseloader_start+0x23c>)
 8000274:	6158      	str	r0, [r3, #20]
            base_tmp.erase_end = base_tmp.erase_start + ((FLASH_PAGE_SIZE) / sizeof(uint16_t));
 8000276:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 800027a:	619a      	str	r2, [r3, #24]
			if (!base_para.preview) {  //  Erase the ROM page.
 800027c:	4b48      	ldr	r3, [pc, #288]	; (80003a0 <baseloader_start+0x238>)
 800027e:	691b      	ldr	r3, [r3, #16]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d02f      	beq.n	80002e4 <baseloader_start+0x17c>
		if (!base_para.preview) {  //  Write the ROM half-word.
 8000284:	4b46      	ldr	r3, [pc, #280]	; (80003a0 <baseloader_start+0x238>)
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	2b00      	cmp	r3, #0
 800028a:	f000 8115 	beq.w	80004b8 <baseloader_start+0x350>
        base_tmp.erase_start = base_tmp.dest_hw + 1;
 800028e:	4b45      	ldr	r3, [pc, #276]	; (80003a4 <baseloader_start+0x23c>)
 8000290:	6819      	ldr	r1, [r3, #0]
 8000292:	1c8a      	adds	r2, r1, #2
 8000294:	615a      	str	r2, [r3, #20]
        if (!base_para.preview && *base_tmp.dest_hw != *base_tmp.src_hw) {
 8000296:	4b42      	ldr	r3, [pc, #264]	; (80003a0 <baseloader_start+0x238>)
 8000298:	691b      	ldr	r3, [r3, #16]
 800029a:	b933      	cbnz	r3, 80002aa <baseloader_start+0x142>
 800029c:	8809      	ldrh	r1, [r1, #0]
 800029e:	4b41      	ldr	r3, [pc, #260]	; (80003a4 <baseloader_start+0x23c>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	4299      	cmp	r1, r3
 80002a6:	f040 81c2 	bne.w	800062e <baseloader_start+0x4c6>
        base_tmp.dest_hw++;
 80002aa:	4b3e      	ldr	r3, [pc, #248]	; (80003a4 <baseloader_start+0x23c>)
 80002ac:	601a      	str	r2, [r3, #0]
        base_tmp.src_hw++;
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	3202      	adds	r2, #2
 80002b2:	605a      	str	r2, [r3, #4]
        base_tmp.half_word_count--;
 80002b4:	689a      	ldr	r2, [r3, #8]
 80002b6:	3a01      	subs	r2, #1
 80002b8:	609a      	str	r2, [r3, #8]
		base_tmp.bytes_flashed += 2;
 80002ba:	68da      	ldr	r2, [r3, #12]
 80002bc:	3202      	adds	r2, #2
 80002be:	60da      	str	r2, [r3, #12]
    while (base_tmp.half_word_count > 0) {        
 80002c0:	4b38      	ldr	r3, [pc, #224]	; (80003a4 <baseloader_start+0x23c>)
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0b2      	beq.n	800022e <baseloader_start+0xc6>
        if (base_tmp.dest_hw >= base_tmp.flash_end) {  /* Avoid writing past the end of flash */
 80002c8:	4a36      	ldr	r2, [pc, #216]	; (80003a4 <baseloader_start+0x23c>)
 80002ca:	6810      	ldr	r0, [r2, #0]
 80002cc:	69d2      	ldr	r2, [r2, #28]
 80002ce:	4290      	cmp	r0, r2
 80002d0:	d2aa      	bcs.n	8000228 <baseloader_start+0xc0>
        if (base_tmp.dest_hw >= base_tmp.erase_end || base_tmp.dest_hw < base_tmp.erase_start) {
 80002d2:	4a34      	ldr	r2, [pc, #208]	; (80003a4 <baseloader_start+0x23c>)
 80002d4:	6992      	ldr	r2, [r2, #24]
 80002d6:	4290      	cmp	r0, r2
 80002d8:	d2c7      	bcs.n	800026a <baseloader_start+0x102>
 80002da:	4a32      	ldr	r2, [pc, #200]	; (80003a4 <baseloader_start+0x23c>)
 80002dc:	6952      	ldr	r2, [r2, #20]
 80002de:	4290      	cmp	r0, r2
 80002e0:	d2d0      	bcs.n	8000284 <baseloader_start+0x11c>
 80002e2:	e7c2      	b.n	800026a <baseloader_start+0x102>
            	base_flash_erase_page((uint32_t) base_tmp.erase_start);
 80002e4:	4a2e      	ldr	r2, [pc, #184]	; (80003a0 <baseloader_start+0x238>)
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	6193      	str	r3, [r2, #24]
 80002ea:	4a2e      	ldr	r2, [pc, #184]	; (80003a4 <baseloader_start+0x23c>)
 80002ec:	6213      	str	r3, [r2, #32]
 80002ee:	4b38      	ldr	r3, [pc, #224]	; (80003d0 <baseloader_start+0x268>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 0335 	and.w	r3, r3, #53	; 0x35
 80002f6:	6213      	str	r3, [r2, #32]
 80002f8:	4b36      	ldr	r3, [pc, #216]	; (80003d4 <baseloader_start+0x26c>)
 80002fa:	881b      	ldrh	r3, [r3, #0]
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000302:	d907      	bls.n	8000314 <baseloader_start+0x1ac>
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <baseloader_start+0x270>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	f002 0235 	and.w	r2, r2, #53	; 0x35
 800030c:	4925      	ldr	r1, [pc, #148]	; (80003a4 <baseloader_start+0x23c>)
 800030e:	6a0b      	ldr	r3, [r1, #32]
 8000310:	4313      	orrs	r3, r2
 8000312:	620b      	str	r3, [r1, #32]
 8000314:	4b23      	ldr	r3, [pc, #140]	; (80003a4 <baseloader_start+0x23c>)
 8000316:	6a1b      	ldr	r3, [r3, #32]
 8000318:	f013 0f01 	tst.w	r3, #1
 800031c:	d020      	beq.n	8000360 <baseloader_start+0x1f8>
 800031e:	4a20      	ldr	r2, [pc, #128]	; (80003a0 <baseloader_start+0x238>)
 8000320:	6993      	ldr	r3, [r2, #24]
 8000322:	1c59      	adds	r1, r3, #1
 8000324:	6191      	str	r1, [r2, #24]
 8000326:	2bff      	cmp	r3, #255	; 0xff
 8000328:	d816      	bhi.n	8000358 <baseloader_start+0x1f0>
 800032a:	4a1e      	ldr	r2, [pc, #120]	; (80003a4 <baseloader_start+0x23c>)
 800032c:	2300      	movs	r3, #0
 800032e:	6213      	str	r3, [r2, #32]
 8000330:	4b27      	ldr	r3, [pc, #156]	; (80003d0 <baseloader_start+0x268>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f003 0335 	and.w	r3, r3, #53	; 0x35
 8000338:	6213      	str	r3, [r2, #32]
 800033a:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <baseloader_start+0x26c>)
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b29b      	uxth	r3, r3
 8000340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000344:	d9e6      	bls.n	8000314 <baseloader_start+0x1ac>
 8000346:	4b24      	ldr	r3, [pc, #144]	; (80003d8 <baseloader_start+0x270>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	f002 0235 	and.w	r2, r2, #53	; 0x35
 800034e:	4915      	ldr	r1, [pc, #84]	; (80003a4 <baseloader_start+0x23c>)
 8000350:	6a0b      	ldr	r3, [r1, #32]
 8000352:	4313      	orrs	r3, r2
 8000354:	620b      	str	r3, [r1, #32]
 8000356:	e7dd      	b.n	8000314 <baseloader_start+0x1ac>
 8000358:	4613      	mov	r3, r2
 800035a:	f06f 020b 	mvn.w	r2, #11
 800035e:	615a      	str	r2, [r3, #20]
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <baseloader_start+0x238>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	b123      	cbz	r3, 8000370 <baseloader_start+0x208>
				if (base_para.result < 0) { return; }  //  Quit if error.
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <baseloader_start+0x238>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	2b00      	cmp	r3, #0
 800036c:	da8a      	bge.n	8000284 <baseloader_start+0x11c>
 800036e:	e738      	b.n	80001e2 <baseloader_start+0x7a>
            	base_flash_erase_page((uint32_t) base_tmp.erase_start);
 8000370:	4b18      	ldr	r3, [pc, #96]	; (80003d4 <baseloader_start+0x26c>)
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	b29b      	uxth	r3, r3
 8000376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800037a:	d935      	bls.n	80003e8 <baseloader_start+0x280>
 800037c:	4b17      	ldr	r3, [pc, #92]	; (80003dc <baseloader_start+0x274>)
 800037e:	4298      	cmp	r0, r3
 8000380:	d932      	bls.n	80003e8 <baseloader_start+0x280>
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <baseloader_start+0x278>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	f042 0202 	orr.w	r2, r2, #2
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	4a05      	ldr	r2, [pc, #20]	; (80003a4 <baseloader_start+0x23c>)
 800038e:	6951      	ldr	r1, [r2, #20]
 8000390:	4a14      	ldr	r2, [pc, #80]	; (80003e4 <baseloader_start+0x27c>)
 8000392:	6011      	str	r1, [r2, #0]
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	e031      	b.n	8000402 <baseloader_start+0x29a>
 800039e:	bf00      	nop
 80003a0:	20000000 	.word	0x20000000
 80003a4:	2000001c 	.word	0x2000001c
 80003a8:	08010000 	.word	0x08010000
 80003ac:	e000e010 	.word	0xe000e010
 80003b0:	40021008 	.word	0x40021008
 80003b4:	40022004 	.word	0x40022004
 80003b8:	45670123 	.word	0x45670123
 80003bc:	20005000 	.word	0x20005000
 80003c0:	40022010 	.word	0x40022010
 80003c4:	08000000 	.word	0x08000000
 80003c8:	e000ed08 	.word	0xe000ed08
 80003cc:	05fa0004 	.word	0x05fa0004
 80003d0:	4002200c 	.word	0x4002200c
 80003d4:	1ffff7e0 	.word	0x1ffff7e0
 80003d8:	4002204c 	.word	0x4002204c
 80003dc:	0807ffff 	.word	0x0807ffff
 80003e0:	40022050 	.word	0x40022050
 80003e4:	40022054 	.word	0x40022054
 80003e8:	4b96      	ldr	r3, [pc, #600]	; (8000644 <baseloader_start+0x4dc>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	f042 0202 	orr.w	r2, r2, #2
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	4a95      	ldr	r2, [pc, #596]	; (8000648 <baseloader_start+0x4e0>)
 80003f4:	6951      	ldr	r1, [r2, #20]
 80003f6:	4a95      	ldr	r2, [pc, #596]	; (800064c <baseloader_start+0x4e4>)
 80003f8:	6011      	str	r1, [r2, #0]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	4a93      	ldr	r2, [pc, #588]	; (8000650 <baseloader_start+0x4e8>)
 8000404:	2300      	movs	r3, #0
 8000406:	6153      	str	r3, [r2, #20]
 8000408:	6193      	str	r3, [r2, #24]
 800040a:	4a8f      	ldr	r2, [pc, #572]	; (8000648 <baseloader_start+0x4e0>)
 800040c:	6213      	str	r3, [r2, #32]
 800040e:	4b91      	ldr	r3, [pc, #580]	; (8000654 <baseloader_start+0x4ec>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	f003 0335 	and.w	r3, r3, #53	; 0x35
 8000416:	6213      	str	r3, [r2, #32]
 8000418:	4b8f      	ldr	r3, [pc, #572]	; (8000658 <baseloader_start+0x4f0>)
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	b29b      	uxth	r3, r3
 800041e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000422:	d907      	bls.n	8000434 <baseloader_start+0x2cc>
 8000424:	4b8d      	ldr	r3, [pc, #564]	; (800065c <baseloader_start+0x4f4>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	f002 0235 	and.w	r2, r2, #53	; 0x35
 800042c:	4986      	ldr	r1, [pc, #536]	; (8000648 <baseloader_start+0x4e0>)
 800042e:	6a0b      	ldr	r3, [r1, #32]
 8000430:	4313      	orrs	r3, r2
 8000432:	620b      	str	r3, [r1, #32]
 8000434:	4b84      	ldr	r3, [pc, #528]	; (8000648 <baseloader_start+0x4e0>)
 8000436:	6a1b      	ldr	r3, [r3, #32]
 8000438:	f013 0f01 	tst.w	r3, #1
 800043c:	d020      	beq.n	8000480 <baseloader_start+0x318>
 800043e:	4a84      	ldr	r2, [pc, #528]	; (8000650 <baseloader_start+0x4e8>)
 8000440:	6993      	ldr	r3, [r2, #24]
 8000442:	1c59      	adds	r1, r3, #1
 8000444:	6191      	str	r1, [r2, #24]
 8000446:	2bff      	cmp	r3, #255	; 0xff
 8000448:	d816      	bhi.n	8000478 <baseloader_start+0x310>
 800044a:	4a7f      	ldr	r2, [pc, #508]	; (8000648 <baseloader_start+0x4e0>)
 800044c:	2300      	movs	r3, #0
 800044e:	6213      	str	r3, [r2, #32]
 8000450:	4b80      	ldr	r3, [pc, #512]	; (8000654 <baseloader_start+0x4ec>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f003 0335 	and.w	r3, r3, #53	; 0x35
 8000458:	6213      	str	r3, [r2, #32]
 800045a:	4b7f      	ldr	r3, [pc, #508]	; (8000658 <baseloader_start+0x4f0>)
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	b29b      	uxth	r3, r3
 8000460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000464:	d9e6      	bls.n	8000434 <baseloader_start+0x2cc>
 8000466:	4b7d      	ldr	r3, [pc, #500]	; (800065c <baseloader_start+0x4f4>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	f002 0235 	and.w	r2, r2, #53	; 0x35
 800046e:	4976      	ldr	r1, [pc, #472]	; (8000648 <baseloader_start+0x4e0>)
 8000470:	6a0b      	ldr	r3, [r1, #32]
 8000472:	4313      	orrs	r3, r2
 8000474:	620b      	str	r3, [r1, #32]
 8000476:	e7dd      	b.n	8000434 <baseloader_start+0x2cc>
 8000478:	4613      	mov	r3, r2
 800047a:	f06f 020c 	mvn.w	r2, #12
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b73      	ldr	r3, [pc, #460]	; (8000650 <baseloader_start+0x4e8>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	2b00      	cmp	r3, #0
 8000486:	f47f af6e 	bne.w	8000366 <baseloader_start+0x1fe>
 800048a:	4b73      	ldr	r3, [pc, #460]	; (8000658 <baseloader_start+0x4f0>)
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	b29b      	uxth	r3, r3
 8000490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000494:	d90a      	bls.n	80004ac <baseloader_start+0x344>
 8000496:	4b6c      	ldr	r3, [pc, #432]	; (8000648 <baseloader_start+0x4e0>)
 8000498:	695a      	ldr	r2, [r3, #20]
 800049a:	4b71      	ldr	r3, [pc, #452]	; (8000660 <baseloader_start+0x4f8>)
 800049c:	429a      	cmp	r2, r3
 800049e:	d905      	bls.n	80004ac <baseloader_start+0x344>
 80004a0:	4a70      	ldr	r2, [pc, #448]	; (8000664 <baseloader_start+0x4fc>)
 80004a2:	6813      	ldr	r3, [r2, #0]
 80004a4:	f023 0302 	bic.w	r3, r3, #2
 80004a8:	6013      	str	r3, [r2, #0]
 80004aa:	e75c      	b.n	8000366 <baseloader_start+0x1fe>
 80004ac:	4a65      	ldr	r2, [pc, #404]	; (8000644 <baseloader_start+0x4dc>)
 80004ae:	6813      	ldr	r3, [r2, #0]
 80004b0:	f023 0302 	bic.w	r3, r3, #2
 80004b4:	6013      	str	r3, [r2, #0]
 80004b6:	e756      	b.n	8000366 <baseloader_start+0x1fe>
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 80004b8:	4a65      	ldr	r2, [pc, #404]	; (8000650 <baseloader_start+0x4e8>)
 80004ba:	6153      	str	r3, [r2, #20]
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4a62      	ldr	r2, [pc, #392]	; (8000648 <baseloader_start+0x4e0>)
 80004c0:	6213      	str	r3, [r2, #32]
 80004c2:	4b64      	ldr	r3, [pc, #400]	; (8000654 <baseloader_start+0x4ec>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f003 0335 	and.w	r3, r3, #53	; 0x35
 80004ca:	6213      	str	r3, [r2, #32]
 80004cc:	4b62      	ldr	r3, [pc, #392]	; (8000658 <baseloader_start+0x4f0>)
 80004ce:	881b      	ldrh	r3, [r3, #0]
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004d6:	d907      	bls.n	80004e8 <baseloader_start+0x380>
 80004d8:	4b60      	ldr	r3, [pc, #384]	; (800065c <baseloader_start+0x4f4>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	f002 0235 	and.w	r2, r2, #53	; 0x35
 80004e0:	4959      	ldr	r1, [pc, #356]	; (8000648 <baseloader_start+0x4e0>)
 80004e2:	6a0b      	ldr	r3, [r1, #32]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	620b      	str	r3, [r1, #32]
 80004e8:	4b57      	ldr	r3, [pc, #348]	; (8000648 <baseloader_start+0x4e0>)
 80004ea:	6a1b      	ldr	r3, [r3, #32]
 80004ec:	f013 0f01 	tst.w	r3, #1
 80004f0:	d020      	beq.n	8000534 <baseloader_start+0x3cc>
 80004f2:	4a57      	ldr	r2, [pc, #348]	; (8000650 <baseloader_start+0x4e8>)
 80004f4:	6993      	ldr	r3, [r2, #24]
 80004f6:	1c59      	adds	r1, r3, #1
 80004f8:	6191      	str	r1, [r2, #24]
 80004fa:	2bff      	cmp	r3, #255	; 0xff
 80004fc:	d816      	bhi.n	800052c <baseloader_start+0x3c4>
 80004fe:	4a52      	ldr	r2, [pc, #328]	; (8000648 <baseloader_start+0x4e0>)
 8000500:	2300      	movs	r3, #0
 8000502:	6213      	str	r3, [r2, #32]
 8000504:	4b53      	ldr	r3, [pc, #332]	; (8000654 <baseloader_start+0x4ec>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f003 0335 	and.w	r3, r3, #53	; 0x35
 800050c:	6213      	str	r3, [r2, #32]
 800050e:	4b52      	ldr	r3, [pc, #328]	; (8000658 <baseloader_start+0x4f0>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	b29b      	uxth	r3, r3
 8000514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000518:	d9e6      	bls.n	80004e8 <baseloader_start+0x380>
 800051a:	4b50      	ldr	r3, [pc, #320]	; (800065c <baseloader_start+0x4f4>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	f002 0235 	and.w	r2, r2, #53	; 0x35
 8000522:	4949      	ldr	r1, [pc, #292]	; (8000648 <baseloader_start+0x4e0>)
 8000524:	6a0b      	ldr	r3, [r1, #32]
 8000526:	4313      	orrs	r3, r2
 8000528:	620b      	str	r3, [r1, #32]
 800052a:	e7dd      	b.n	80004e8 <baseloader_start+0x380>
 800052c:	4613      	mov	r3, r2
 800052e:	f06f 0209 	mvn.w	r2, #9
 8000532:	615a      	str	r2, [r3, #20]
 8000534:	4b46      	ldr	r3, [pc, #280]	; (8000650 <baseloader_start+0x4e8>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	b12b      	cbz	r3, 8000546 <baseloader_start+0x3de>
			if (base_para.result < 0) { return; }  //  Quit if error.
 800053a:	4b45      	ldr	r3, [pc, #276]	; (8000650 <baseloader_start+0x4e8>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	2b00      	cmp	r3, #0
 8000540:	f6bf aea5 	bge.w	800028e <baseloader_start+0x126>
 8000544:	e64d      	b.n	80001e2 <baseloader_start+0x7a>
        	base_flash_program_half_word((uint32_t) base_tmp.dest_hw, *base_tmp.src_hw);
 8000546:	4b44      	ldr	r3, [pc, #272]	; (8000658 <baseloader_start+0x4f0>)
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	b29b      	uxth	r3, r3
 800054c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000550:	d90a      	bls.n	8000568 <baseloader_start+0x400>
 8000552:	4b3d      	ldr	r3, [pc, #244]	; (8000648 <baseloader_start+0x4e0>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b42      	ldr	r3, [pc, #264]	; (8000660 <baseloader_start+0x4f8>)
 8000558:	429a      	cmp	r2, r3
 800055a:	d905      	bls.n	8000568 <baseloader_start+0x400>
 800055c:	4a41      	ldr	r2, [pc, #260]	; (8000664 <baseloader_start+0x4fc>)
 800055e:	6813      	ldr	r3, [r2, #0]
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6013      	str	r3, [r2, #0]
 8000566:	e004      	b.n	8000572 <baseloader_start+0x40a>
 8000568:	4a36      	ldr	r2, [pc, #216]	; (8000644 <baseloader_start+0x4dc>)
 800056a:	6813      	ldr	r3, [r2, #0]
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]
 8000572:	4b35      	ldr	r3, [pc, #212]	; (8000648 <baseloader_start+0x4e0>)
 8000574:	6859      	ldr	r1, [r3, #4]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	8809      	ldrh	r1, [r1, #0]
 800057a:	8011      	strh	r1, [r2, #0]
 800057c:	4934      	ldr	r1, [pc, #208]	; (8000650 <baseloader_start+0x4e8>)
 800057e:	2200      	movs	r2, #0
 8000580:	614a      	str	r2, [r1, #20]
 8000582:	618a      	str	r2, [r1, #24]
 8000584:	621a      	str	r2, [r3, #32]
 8000586:	4a33      	ldr	r2, [pc, #204]	; (8000654 <baseloader_start+0x4ec>)
 8000588:	6812      	ldr	r2, [r2, #0]
 800058a:	f002 0235 	and.w	r2, r2, #53	; 0x35
 800058e:	621a      	str	r2, [r3, #32]
 8000590:	4b31      	ldr	r3, [pc, #196]	; (8000658 <baseloader_start+0x4f0>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	b29b      	uxth	r3, r3
 8000596:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800059a:	d907      	bls.n	80005ac <baseloader_start+0x444>
 800059c:	4b2f      	ldr	r3, [pc, #188]	; (800065c <baseloader_start+0x4f4>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	f002 0235 	and.w	r2, r2, #53	; 0x35
 80005a4:	4928      	ldr	r1, [pc, #160]	; (8000648 <baseloader_start+0x4e0>)
 80005a6:	6a0b      	ldr	r3, [r1, #32]
 80005a8:	4313      	orrs	r3, r2
 80005aa:	620b      	str	r3, [r1, #32]
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <baseloader_start+0x4e0>)
 80005ae:	6a1b      	ldr	r3, [r3, #32]
 80005b0:	f013 0f01 	tst.w	r3, #1
 80005b4:	d020      	beq.n	80005f8 <baseloader_start+0x490>
 80005b6:	4a26      	ldr	r2, [pc, #152]	; (8000650 <baseloader_start+0x4e8>)
 80005b8:	6993      	ldr	r3, [r2, #24]
 80005ba:	1c59      	adds	r1, r3, #1
 80005bc:	6191      	str	r1, [r2, #24]
 80005be:	2bff      	cmp	r3, #255	; 0xff
 80005c0:	d816      	bhi.n	80005f0 <baseloader_start+0x488>
 80005c2:	4a21      	ldr	r2, [pc, #132]	; (8000648 <baseloader_start+0x4e0>)
 80005c4:	2300      	movs	r3, #0
 80005c6:	6213      	str	r3, [r2, #32]
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <baseloader_start+0x4ec>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f003 0335 	and.w	r3, r3, #53	; 0x35
 80005d0:	6213      	str	r3, [r2, #32]
 80005d2:	4b21      	ldr	r3, [pc, #132]	; (8000658 <baseloader_start+0x4f0>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	b29b      	uxth	r3, r3
 80005d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005dc:	d9e6      	bls.n	80005ac <baseloader_start+0x444>
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <baseloader_start+0x4f4>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	f002 0235 	and.w	r2, r2, #53	; 0x35
 80005e6:	4918      	ldr	r1, [pc, #96]	; (8000648 <baseloader_start+0x4e0>)
 80005e8:	6a0b      	ldr	r3, [r1, #32]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	620b      	str	r3, [r1, #32]
 80005ee:	e7dd      	b.n	80005ac <baseloader_start+0x444>
 80005f0:	4613      	mov	r3, r2
 80005f2:	f06f 020a 	mvn.w	r2, #10
 80005f6:	615a      	str	r2, [r3, #20]
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <baseloader_start+0x4e8>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d19c      	bne.n	800053a <baseloader_start+0x3d2>
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <baseloader_start+0x4f0>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	b29b      	uxth	r3, r3
 8000606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800060a:	d90a      	bls.n	8000622 <baseloader_start+0x4ba>
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <baseloader_start+0x4e0>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <baseloader_start+0x4f8>)
 8000612:	429a      	cmp	r2, r3
 8000614:	d905      	bls.n	8000622 <baseloader_start+0x4ba>
 8000616:	4a13      	ldr	r2, [pc, #76]	; (8000664 <baseloader_start+0x4fc>)
 8000618:	6813      	ldr	r3, [r2, #0]
 800061a:	f023 0301 	bic.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	e78b      	b.n	800053a <baseloader_start+0x3d2>
 8000622:	4a08      	ldr	r2, [pc, #32]	; (8000644 <baseloader_start+0x4dc>)
 8000624:	6813      	ldr	r3, [r2, #0]
 8000626:	f023 0301 	bic.w	r3, r3, #1
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	e785      	b.n	800053a <baseloader_start+0x3d2>
            base_tmp.verified = false;
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <baseloader_start+0x4e0>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
            break;
 8000634:	e5fb      	b.n	800022e <baseloader_start+0xc6>
	base_para.result = base_tmp.verified ? base_tmp.bytes_flashed : -1;  //  Returns -1 if verification failed.
 8000636:	4b04      	ldr	r3, [pc, #16]	; (8000648 <baseloader_start+0x4e0>)
 8000638:	691b      	ldr	r3, [r3, #16]
 800063a:	b1ab      	cbz	r3, 8000668 <baseloader_start+0x500>
 800063c:	4b02      	ldr	r3, [pc, #8]	; (8000648 <baseloader_start+0x4e0>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	e014      	b.n	800066c <baseloader_start+0x504>
 8000642:	bf00      	nop
 8000644:	40022010 	.word	0x40022010
 8000648:	2000001c 	.word	0x2000001c
 800064c:	40022014 	.word	0x40022014
 8000650:	20000000 	.word	0x20000000
 8000654:	4002200c 	.word	0x4002200c
 8000658:	1ffff7e0 	.word	0x1ffff7e0
 800065c:	4002204c 	.word	0x4002204c
 8000660:	0807ffff 	.word	0x0807ffff
 8000664:	40022050 	.word	0x40022050
 8000668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800066c:	4a01      	ldr	r2, [pc, #4]	; (8000674 <baseloader_start+0x50c>)
 800066e:	6153      	str	r3, [r2, #20]
 8000670:	e5b7      	b.n	80001e2 <baseloader_start+0x7a>
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <baseloader_fetch>:

int baseloader_fetch(baseloader_func *baseloader_addr, uint32_t **dest, const uint32_t **src, size_t *byte_count) {
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
	//  Return the address of the baseloader function, located in the Second Base Vector Table.
	//  Also return the parameters to be passed to the baseloader function: dest, src, byte_count.
	if (!baseloader_addr || !dest || !src || !byte_count) { 
 800067a:	4607      	mov	r7, r0
 800067c:	2800      	cmp	r0, #0
 800067e:	d043      	beq.n	8000708 <baseloader_fetch+0x90>
 8000680:	2900      	cmp	r1, #0
 8000682:	d041      	beq.n	8000708 <baseloader_fetch+0x90>
 8000684:	2a00      	cmp	r2, #0
 8000686:	d03f      	beq.n	8000708 <baseloader_fetch+0x90>
 8000688:	2b00      	cmp	r3, #0
 800068a:	d03d      	beq.n	8000708 <baseloader_fetch+0x90>
		base_para.fail = (uint32_t) baseloader_addr;
		return -1; 
	}
	//  Search for the First and Second Base Vector Tables and find the bootloader range.
	//  First Base Vector Table is in the start of the application ROM.
	if (!IS_VALID_BASE_VECTOR_TABLE(application_start)) {  //  Quit if First Base Vector Table is not found.
 800068c:	4829      	ldr	r0, [pc, #164]	; (8000734 <baseloader_fetch+0xbc>)
 800068e:	f420 767f 	bic.w	r6, r0, #1020	; 0x3fc
 8000692:	f026 0603 	bic.w	r6, r6, #3
 8000696:	4c28      	ldr	r4, [pc, #160]	; (8000738 <baseloader_fetch+0xc0>)
 8000698:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800069c:	ea46 0504 	orr.w	r5, r6, r4
 80006a0:	f8d5 e000 	ldr.w	lr, [r5]
 80006a4:	f8df c094 	ldr.w	ip, [pc, #148]	; 800073c <baseloader_fetch+0xc4>
 80006a8:	45e6      	cmp	lr, ip
 80006aa:	d132      	bne.n	8000712 <baseloader_fetch+0x9a>
 80006ac:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80006b0:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8000740 <baseloader_fetch+0xc8>
 80006b4:	45e6      	cmp	lr, ip
 80006b6:	d12c      	bne.n	8000712 <baseloader_fetch+0x9a>
		return -2; 
	}
	base_vector_table_t *begin_base_vector = BASE_VECTOR_TABLE(application_start);

	//  Get size of new bootloader from the First Base Vector Table (same as the Application ROM start address).
	uint32_t bootloader_size = (uint32_t) FLASH_ADDRESS(begin_base_vector->application) - FLASH_BASE;
 80006b8:	692d      	ldr	r5, [r5, #16]
 80006ba:	f425 757f 	bic.w	r5, r5, #1020	; 0x3fc
 80006be:	f025 0503 	bic.w	r5, r5, #3
 80006c2:	f105 4578 	add.w	r5, r5, #4160749568	; 0xf8000000
	if ((uint32_t) application_start + bootloader_size + FLASH_PAGE_SIZE 
 80006c6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80006ca:	4428      	add	r0, r5
 80006cc:	f8df c078 	ldr.w	ip, [pc, #120]	; 8000748 <baseloader_fetch+0xd0>
 80006d0:	4560      	cmp	r0, ip
 80006d2:	d823      	bhi.n	800071c <baseloader_fetch+0xa4>
		base_para.fail = bootloader_size;
		return -3; 
	} 

	//  Second Base Vector Table is at start of application ROM + bootloader size.  TODO: Round up to the next flash page?
	uint32_t flash_page_addr = (uint32_t) FLASH_ADDRESS(application_start) + bootloader_size;
 80006d4:	eb06 0c05 	add.w	ip, r6, r5
	if (!IS_VALID_BASE_VECTOR_TABLE(flash_page_addr)) {  //  Quit if Second Base Vector Table is not found.
 80006d8:	ea44 000c 	orr.w	r0, r4, ip
 80006dc:	f8d0 e000 	ldr.w	lr, [r0]
 80006e0:	4c16      	ldr	r4, [pc, #88]	; (800073c <baseloader_fetch+0xc4>)
 80006e2:	45a6      	cmp	lr, r4
 80006e4:	d11f      	bne.n	8000726 <baseloader_fetch+0xae>
 80006e6:	f8d0 e014 	ldr.w	lr, [r0, #20]
 80006ea:	4c15      	ldr	r4, [pc, #84]	; (8000740 <baseloader_fetch+0xc8>)
 80006ec:	45a6      	cmp	lr, r4
 80006ee:	d11a      	bne.n	8000726 <baseloader_fetch+0xae>
		return -4;
	}
	base_vector_table_t *end_base_vector = BASE_VECTOR_TABLE(flash_page_addr);

	//  Tell caller to jump to the baseloader in the Second Base Vector Table.
	*baseloader_addr = (baseloader_func) ((uint32_t) (end_base_vector->baseloader) - FLASH_BASE + flash_page_addr);
 80006f0:	6880      	ldr	r0, [r0, #8]
 80006f2:	4460      	add	r0, ip
 80006f4:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 80006f8:	6038      	str	r0, [r7, #0]
	*dest = (uint32_t *) FLASH_BASE;  		 //  Overwrite the old bootloader...
 80006fa:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80006fe:	6008      	str	r0, [r1, #0]
	*src  = (uint32_t *) FLASH_ADDRESS(application_start);  //  By the new bootloader from the Application space.
 8000700:	6016      	str	r6, [r2, #0]
	*byte_count = bootloader_size;			 //  For this number of bytes.
 8000702:	601d      	str	r5, [r3, #0]
	return 0;
 8000704:	2000      	movs	r0, #0
}
 8000706:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base_para.fail = (uint32_t) baseloader_addr;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <baseloader_fetch+0xcc>)
 800070a:	619f      	str	r7, [r3, #24]
		return -1; 
 800070c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000710:	e7f9      	b.n	8000706 <baseloader_fetch+0x8e>
		base_para.fail = (uint32_t) FLASH_ADDRESS(application_start);
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <baseloader_fetch+0xcc>)
 8000714:	619e      	str	r6, [r3, #24]
		return -2; 
 8000716:	f06f 0001 	mvn.w	r0, #1
 800071a:	e7f4      	b.n	8000706 <baseloader_fetch+0x8e>
		base_para.fail = bootloader_size;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <baseloader_fetch+0xcc>)
 800071e:	619d      	str	r5, [r3, #24]
		return -3; 
 8000720:	f06f 0002 	mvn.w	r0, #2
 8000724:	e7ef      	b.n	8000706 <baseloader_fetch+0x8e>
		base_para.fail = flash_page_addr;
 8000726:	4a07      	ldr	r2, [pc, #28]	; (8000744 <baseloader_fetch+0xcc>)
 8000728:	f8c2 c018 	str.w	ip, [r2, #24]
		*byte_count = bootloader_size;
 800072c:	601d      	str	r5, [r3, #0]
		return -4;
 800072e:	f06f 0003 	mvn.w	r0, #3
 8000732:	e7e8      	b.n	8000706 <baseloader_fetch+0x8e>
 8000734:	08007401 	.word	0x08007401
 8000738:	08000150 	.word	0x08000150
 800073c:	22051969 	.word	0x22051969
 8000740:	19690522 	.word	0x19690522
 8000744:	20000000 	.word	0x20000000
 8000748:	0800ffff 	.word	0x0800ffff

0800074c <blocking_handler>:
	}

}

void blocking_handler(void)
{
 800074c:	e7fe      	b.n	800074c <blocking_handler>

0800074e <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 800074e:	4770      	bx	lr

08000750 <rtc_isr>:
volatile uint32_t platform_get_alarm(void) {
	//  Get alarm time.
	return rtc_get_alarm_val();
}

void rtc_isr(void) {
 8000750:	b508      	push	{r3, lr}
	//  Interrupt Service Routine for RTC Tick, Alarm, Overflow.  Don't call any I/O functions here.
	if (rtc_check_flag(RTC_SEC)) {
 8000752:	2000      	movs	r0, #0
 8000754:	f000 fcf2 	bl	800113c <rtc_check_flag>
 8000758:	b900      	cbnz	r0, 800075c <rtc_isr+0xc>
		//  Call the alarm function.
		if (alarmFunc != NULL) { alarmFunc(); }
		return;
	}
#endif  //  NOTUSED
}
 800075a:	bd08      	pop	{r3, pc}
		rtc_clear_flag(RTC_SEC);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fcd3 	bl	8001108 <rtc_clear_flag>
		tickCount++;
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <rtc_isr+0x28>)
 8000764:	6813      	ldr	r3, [r2, #0]
 8000766:	3301      	adds	r3, #1
 8000768:	6013      	str	r3, [r2, #0]
		if (tickFunc != NULL) { tickFunc(); }
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <rtc_isr+0x2c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d0f3      	beq.n	800075a <rtc_isr+0xa>
 8000772:	4798      	blx	r3
 8000774:	e7f1      	b.n	800075a <rtc_isr+0xa>
 8000776:	bf00      	nop
 8000778:	20000470 	.word	0x20000470
 800077c:	20000468 	.word	0x20000468

08000780 <rtc_alarm_isr>:

void rtc_alarm_isr(void) {
 8000780:	b508      	push	{r3, lr}
	//  Interrupt Service Routine for RTC Alarm Wakeup.  Don't call any I/O functions here.
	//  The RTC alarm appears as EXTI 17 which must be reset independently of the RTC alarm flag.
	exti_reset_request(EXTI17);
 8000782:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000786:	f000 fd33 	bl	80011f0 <exti_reset_request>
	rtc_clear_flag(RTC_ALR);
 800078a:	2001      	movs	r0, #1
 800078c:	f000 fcbc 	bl	8001108 <rtc_clear_flag>
	alarmCount++;
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <rtc_alarm_isr+0x24>)
 8000792:	6813      	ldr	r3, [r2, #0]
 8000794:	3301      	adds	r3, #1
 8000796:	6013      	str	r3, [r2, #0]
	//  Call the alarm function.
	if (alarmFunc != NULL) { alarmFunc(); }
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <rtc_alarm_isr+0x28>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	b103      	cbz	r3, 80007a0 <rtc_alarm_isr+0x20>
 800079e:	4798      	blx	r3
}
 80007a0:	bd08      	pop	{r3, pc}
 80007a2:	bf00      	nop
 80007a4:	20000464 	.word	0x20000464
 80007a8:	2000046c 	.word	0x2000046c

080007ac <usart2_isr>:
	usart_set_stopbits(USART2, USART_STOPBITS_1);
	usart_set_flow_control(USART2, USART_FLOWCONTROL_NONE);
	usart_set_mode(USART2, USART_MODE_TX_RX);
}

void usart2_isr(void) {
 80007ac:	b508      	push	{r3, lr}
    //  Interrupt service routine for USART2. We enqueue each byte received.
	//  Check if we were called because of received data (RXNE). */
	if (((USART_CR1(USART2) & USART_CR1_RXNEIE) != 0) &&
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <usart2_isr+0x4c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f013 0f20 	tst.w	r3, #32
 80007b6:	d004      	beq.n	80007c2 <usart2_isr+0x16>
	    ((USART_SR(USART2) & USART_SR_RXNE) != 0)) {
 80007b8:	4b10      	ldr	r3, [pc, #64]	; (80007fc <usart2_isr+0x50>)
 80007ba:	681b      	ldr	r3, [r3, #0]
	if (((USART_CR1(USART2) & USART_CR1_RXNEIE) != 0) &&
 80007bc:	f013 0f20 	tst.w	r3, #32
 80007c0:	d100      	bne.n	80007c4 <usart2_isr+0x18>
		//  Read the next received byte and add to response queue.
		uint8_t ch = usart_recv(USART2);
        responseQueue.push(ch);
	}
}
 80007c2:	bd08      	pop	{r3, pc}
		uint8_t ch = usart_recv(USART2);
 80007c4:	480d      	ldr	r0, [pc, #52]	; (80007fc <usart2_isr+0x50>)
 80007c6:	f001 f864 	bl	8001892 <usart_recv>
 80007ca:	b2c0      	uxtb	r0, r0
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <usart2_isr+0x54>)
 80007ce:	681a      	ldr	r2, [r3, #0]
        write_index_(0), read_index_(0)
    {}

    static size_t next_index(size_t arg, size_t max_size)
    {
        size_t ret = arg + 1;
 80007d0:	1c53      	adds	r3, r2, #1
        while (BOOST_UNLIKELY(ret >= max_size))
 80007d2:	2b25      	cmp	r3, #37	; 0x25
 80007d4:	d80e      	bhi.n	80007f4 <usart2_isr+0x48>
 80007d6:	490a      	ldr	r1, [pc, #40]	; (8000800 <usart2_isr+0x54>)
 80007d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007da:	f3bf 8f5b 	dmb	ish
    bool push(T const & t, T * buffer, size_t max_size)
    {
        const size_t write_index = write_index_.load(memory_order_relaxed);  // only written from push thread
        const size_t next = next_index(write_index, max_size);

        if (next == read_index_.load(memory_order_acquire))
 80007de:	428b      	cmp	r3, r1
 80007e0:	d0ef      	beq.n	80007c2 <usart2_isr+0x16>
            return false; /* ringbuffer is full */

        new (buffer + write_index) T(t); // copy-construct
 80007e2:	4908      	ldr	r1, [pc, #32]	; (8000804 <usart2_isr+0x58>)
 80007e4:	42d1      	cmn	r1, r2
 80007e6:	d000      	beq.n	80007ea <usart2_isr+0x3e>
 80007e8:	5488      	strb	r0, [r1, r2]
	__atomic_store_n(&_M_i, __i, __m);
 80007ea:	f3bf 8f5b 	dmb	ish
 80007ee:	4a04      	ldr	r2, [pc, #16]	; (8000800 <usart2_isr+0x54>)
 80007f0:	6013      	str	r3, [r2, #0]
}
 80007f2:	e7e6      	b.n	80007c2 <usart2_isr+0x16>
            ret -= max_size;
 80007f4:	3b26      	subs	r3, #38	; 0x26
 80007f6:	e7ec      	b.n	80007d2 <usart2_isr+0x26>
 80007f8:	4000440c 	.word	0x4000440c
 80007fc:	40004400 	.word	0x40004400
 8000800:	20002194 	.word	0x20002194
 8000804:	200021d8 	.word	0x200021d8

08000808 <pre_main>:
extern void application_start(void);

uint32_t hal_bss_test;                   //  Test whether BSS Section is loaded correctly.
uint32_t hal_data_test = 0x87654321;     //  Test whether Data Section is loaded correctly.

static void pre_main() {
 8000808:	b508      	push	{r3, lr}
	//  Init the STM32 platform and start the timer.  Note: Constructors are not called yet.
    //  Note: Must disable debug when testing Deep Sleep.  Else device will not run without ST Link.
    target_enable_debug();       //  Uncomment to allow display of debug messages in development devices. NOTE: This will hang if no Arm Semihosting debugger is attached.
 800080a:	f000 f9b1 	bl	8000b70 <target_enable_debug>
    //  target_disable_debug();  //  Uncomment to disable display of debug messages.  For use in production devices.
    target_init();               //  Init the STM32 platform.
 800080e:	f000 f8db 	bl	80009c8 <target_init>

	//  Test whether Bootloader BSS and Data Sections are loaded correctly.
    if (hal_bss_test != 0x0 || hal_data_test != 0x87654321) {
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <pre_main+0x3c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	b923      	cbnz	r3, 8000822 <pre_main+0x1a>
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <pre_main+0x40>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b0b      	ldr	r3, [pc, #44]	; (800084c <pre_main+0x44>)
 800081e:	429a      	cmp	r2, r3
 8000820:	d00e      	beq.n	8000840 <pre_main+0x38>
        debug_print("*** hal bss/data failed, bss_test = "); debug_printhex_unsigned(hal_bss_test);
 8000822:	480b      	ldr	r0, [pc, #44]	; (8000850 <pre_main+0x48>)
 8000824:	f002 f914 	bl	8002a50 <debug_print>
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <pre_main+0x3c>)
 800082a:	6818      	ldr	r0, [r3, #0]
 800082c:	f002 f95c 	bl	8002ae8 <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(hal_data_test);
 8000830:	4808      	ldr	r0, [pc, #32]	; (8000854 <pre_main+0x4c>)
 8000832:	f002 f90d 	bl	8002a50 <debug_print>
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <pre_main+0x40>)
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	f002 f955 	bl	8002ae8 <debug_printhex_unsigned>
 800083e:	e7fe      	b.n	800083e <pre_main+0x36>
    }
#ifdef UNIT_TEST
    //  Run the unit tests if any.  Don't run unit test in bootloader, because we will run out of space in bootrom.
    run_unit_test();	
#endif  //  UNIT_TEST
}
 8000840:	bd08      	pop	{r3, pc}
 8000842:	bf00      	nop
 8000844:	20000758 	.word	0x20000758
 8000848:	20000040 	.word	0x20000040
 800084c:	87654321 	.word	0x87654321
 8000850:	08004970 	.word	0x08004970
 8000854:	08004998 	.word	0x08004998

08000858 <reset_handler>:

void reset_handler(void) {
 8000858:	b510      	push	{r4, lr}
	//  We also call the constructors.  The vector table points to this function.
	volatile unsigned *src, *boot_dest;
	funcp_t *fp;

	//  Copy Bootloader data section from ROM to RAM.
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <reset_handler+0x6c>)
 800085c:	491a      	ldr	r1, [pc, #104]	; (80008c8 <reset_handler+0x70>)
 800085e:	e003      	b.n	8000868 <reset_handler+0x10>
		boot_dest < &_boot_edata;  //  Bootloader
		src++, boot_dest++) {
		*boot_dest = *src;
 8000860:	f851 2b04 	ldr.w	r2, [r1], #4
 8000864:	f843 2b04 	str.w	r2, [r3], #4
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 8000868:	4a18      	ldr	r2, [pc, #96]	; (80008cc <reset_handler+0x74>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d3f8      	bcc.n	8000860 <reset_handler+0x8>
 800086e:	e002      	b.n	8000876 <reset_handler+0x1e>
	}

	//  Init variables in Bootloader BSS section to null.
	while (boot_dest < &_boot_ebss) { *boot_dest++ = 0; }
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	3304      	adds	r3, #4
 8000876:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <reset_handler+0x78>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d3f9      	bcc.n	8000870 <reset_handler+0x18>

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 800087c:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <reset_handler+0x7c>)
 800087e:	6813      	ldr	r3, [r2, #0]
 8000880:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000884:	6013      	str	r3, [r2, #0]

	//  Perform our platform initialisation.  pre_main() will not return if bootloader decides to run in Bootloader Mode.
	pre_main();
 8000886:	f7ff ffbf 	bl	8000808 <pre_main>
	//  Application constructors will be called by application_start().
	//  TODO: Fix these bootloader constructors:
	// .init_array    0x0000000008009778        0x4 .pioenvs/bluepill_f103c8/src/uart.o
 	// .init_array    0x000000000800977c        0x4 .pioenvs/bluepill_f103c8/lib33e/libuartint.a(uartint.o)
 	// .init_array    0x0000000008009780        0x4 .pioenvs/bluepill_f103c8/lib3e7/libcodal-core.a(ManagedString.o)
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 800088a:	4c13      	ldr	r4, [pc, #76]	; (80008d8 <reset_handler+0x80>)
 800088c:	e002      	b.n	8000894 <reset_handler+0x3c>
		(*fp)();
 800088e:	f854 3b04 	ldr.w	r3, [r4], #4
 8000892:	4798      	blx	r3
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <reset_handler+0x84>)
 8000896:	429c      	cmp	r4, r3
 8000898:	d3f9      	bcc.n	800088e <reset_handler+0x36>
	}
	for (fp = &__boot_init_array_start; fp < &__boot_init_array_end; fp++) {
 800089a:	4c11      	ldr	r4, [pc, #68]	; (80008e0 <reset_handler+0x88>)
 800089c:	e002      	b.n	80008a4 <reset_handler+0x4c>
		(*fp)();
 800089e:	f854 3b04 	ldr.w	r3, [r4], #4
 80008a2:	4798      	blx	r3
	for (fp = &__boot_init_array_start; fp < &__boot_init_array_end; fp++) {
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <reset_handler+0x8c>)
 80008a6:	429c      	cmp	r4, r3
 80008a8:	d3f9      	bcc.n	800089e <reset_handler+0x46>
	}

    //  Start the bootloader.  This function will not return if the bootloader decides to run in Bootloader Mode (polling forever for USB commands).
    bootloader_start();
 80008aa:	f002 fc3f 	bl	800312c <bootloader_start>

	//  If we return here, that means we are running in Application Mode.
	//  Call the application's entry point. application_start() is always located at a fixed address (_text) so we can change the application easily.
	application_start();
 80008ae:	f006 fda7 	bl	8007400 <application_start>

	//  TODO: We should not allow our low-level STM32 functions to have C++ destructors.
	//  Application destructors will be called by application_start().
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 80008b2:	4c0d      	ldr	r4, [pc, #52]	; (80008e8 <reset_handler+0x90>)
 80008b4:	e002      	b.n	80008bc <reset_handler+0x64>
		(*fp)();
 80008b6:	f854 3b04 	ldr.w	r3, [r4], #4
 80008ba:	4798      	blx	r3
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <reset_handler+0x94>)
 80008be:	429c      	cmp	r4, r3
 80008c0:	d3f9      	bcc.n	80008b6 <reset_handler+0x5e>
	}

}
 80008c2:	bd10      	pop	{r4, pc}
 80008c4:	20000000 	.word	0x20000000
 80008c8:	0800557c 	.word	0x0800557c
 80008cc:	2000016c 	.word	0x2000016c
 80008d0:	200008bc 	.word	0x200008bc
 80008d4:	e000ed14 	.word	0xe000ed14
 80008d8:	0800557c 	.word	0x0800557c
 80008dc:	0800557c 	.word	0x0800557c
 80008e0:	0800557c 	.word	0x0800557c
 80008e4:	0800557c 	.word	0x0800557c
 80008e8:	0800557c 	.word	0x0800557c
 80008ec:	0800557c 	.word	0x0800557c

080008f0 <_ZL11timer_alarmv>:
    if (tick_callback) { tick_callback(); }
    //  Call cocoOS at every tick.
    os_tick();
}

static void timer_alarm() {
 80008f0:	b508      	push	{r3, lr}
        debug_print(";");
        poll_bootloader();
    }
#endif  //  NOTUSED
    //  If Codal Timer exists, update the timer.
    if (alarm_callback) { alarm_callback(); }
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <_ZL11timer_alarmv+0x1c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	b10b      	cbz	r3, 80008fc <_ZL11timer_alarmv+0xc>
 80008f8:	4798      	blx	r3
    else { if (millis() < 200) { debug_print("a? "); } }
}
 80008fa:	bd08      	pop	{r3, pc}
    else { if (millis() < 200) { debug_print("a? "); } }
 80008fc:	f002 fa2a 	bl	8002d54 <millis>
 8000900:	28c7      	cmp	r0, #199	; 0xc7
 8000902:	d8fa      	bhi.n	80008fa <_ZL11timer_alarmv+0xa>
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <_ZL11timer_alarmv+0x20>)
 8000906:	f002 f8a3 	bl	8002a50 <debug_print>
}
 800090a:	e7f6      	b.n	80008fa <_ZL11timer_alarmv+0xa>
 800090c:	20000174 	.word	0x20000174
 8000910:	080049a8 	.word	0x080049a8

08000914 <_ZL15poll_bootloaderv>:
    if (!bootloader_callback) { return; }
 8000914:	4b16      	ldr	r3, [pc, #88]	; (8000970 <_ZL15poll_bootloaderv+0x5c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	b343      	cbz	r3, 800096c <_ZL15poll_bootloaderv+0x58>
static void poll_bootloader() {
 800091a:	b510      	push	{r4, lr}
    poll_status = bootloader_callback();
 800091c:	4798      	blx	r3
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <_ZL15poll_bootloaderv+0x60>)
 8000920:	6018      	str	r0, [r3, #0]
    prev_poll_status = poll_status;
 8000922:	6819      	ldr	r1, [r3, #0]
 8000924:	4a14      	ldr	r2, [pc, #80]	; (8000978 <_ZL15poll_bootloaderv+0x64>)
 8000926:	6011      	str	r1, [r2, #0]
    if (poll_status > 0) { debug_print("u{ "); }
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	dc12      	bgt.n	8000954 <_ZL15poll_bootloaderv+0x40>
    while (poll_status > 0) {  //  If we receive any USB requests,,,
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <_ZL15poll_bootloaderv+0x60>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	dd12      	ble.n	800095c <_ZL15poll_bootloaderv+0x48>
        poll_status = 0;       //  Continue polling a few times for subsequent USB requests.
 8000936:	2400      	movs	r4, #0
 8000938:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <_ZL15poll_bootloaderv+0x60>)
 800093a:	601c      	str	r4, [r3, #0]
        for (uint16_t i = 0; i < MAX_BURST_POLL; i++) {
 800093c:	2c09      	cmp	r4, #9
 800093e:	d8f6      	bhi.n	800092e <_ZL15poll_bootloaderv+0x1a>
            poll_status = poll_status | bootloader_callback();
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <_ZL15poll_bootloaderv+0x5c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4798      	blx	r3
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <_ZL15poll_bootloaderv+0x60>)
 8000948:	6813      	ldr	r3, [r2, #0]
 800094a:	4318      	orrs	r0, r3
 800094c:	6010      	str	r0, [r2, #0]
        for (uint16_t i = 0; i < MAX_BURST_POLL; i++) {
 800094e:	3401      	adds	r4, #1
 8000950:	b2a4      	uxth	r4, r4
 8000952:	e7f3      	b.n	800093c <_ZL15poll_bootloaderv+0x28>
    if (poll_status > 0) { debug_print("u{ "); }
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <_ZL15poll_bootloaderv+0x68>)
 8000956:	f002 f87b 	bl	8002a50 <debug_print>
 800095a:	e7e8      	b.n	800092e <_ZL15poll_bootloaderv+0x1a>
    if (prev_poll_status > 0) { debug_print("} "); }
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <_ZL15poll_bootloaderv+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	dd02      	ble.n	800096a <_ZL15poll_bootloaderv+0x56>
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <_ZL15poll_bootloaderv+0x6c>)
 8000966:	f002 f873 	bl	8002a50 <debug_print>
}
 800096a:	bd10      	pop	{r4, pc}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	2000017c 	.word	0x2000017c
 8000974:	2000016c 	.word	0x2000016c
 8000978:	20000178 	.word	0x20000178
 800097c:	080049ac 	.word	0x080049ac
 8000980:	080049b0 	.word	0x080049b0

08000984 <_ZL10timer_tickv>:
static void timer_tick() {
 8000984:	b508      	push	{r3, lr}
    poll_bootloader();
 8000986:	f7ff ffc5 	bl	8000914 <_ZL15poll_bootloaderv>
    if (tick_callback) { tick_callback(); }
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <_ZL10timer_tickv+0x14>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	b103      	cbz	r3, 8000992 <_ZL10timer_tickv+0xe>
 8000990:	4798      	blx	r3
    os_tick();
 8000992:	f001 febc 	bl	800270e <os_tick>
}
 8000996:	bd08      	pop	{r3, pc}
 8000998:	20000170 	.word	0x20000170

0800099c <_ZL11os_schedulev>:
    if (os_running()) { return; }  //  Already running.
    running = 1;
    os_enable_interrupts();
}

static void os_schedule( void ) {
 800099c:	b510      	push	{r4, lr}
    //  Call this to schedule a task.
    if (!os_running()) { return; }  //  Don't schedule if cocoOS scheduler is not started.
 800099e:	f001 fcff 	bl	80023a0 <os_running>
 80009a2:	b900      	cbnz	r0, 80009a6 <_ZL11os_schedulev+0xa>
        os_task_run();
    }
    else {
        os_cbkSleep();
    }
}
 80009a4:	bd10      	pop	{r4, pc}
    running_tid = NO_TID;
 80009a6:	4c07      	ldr	r4, [pc, #28]	; (80009c4 <_ZL11os_schedulev+0x28>)
 80009a8:	23ff      	movs	r3, #255	; 0xff
 80009aa:	7023      	strb	r3, [r4, #0]
    running_tid = os_task_highest_prio_ready_task();   
 80009ac:	f001 fdac 	bl	8002508 <os_task_highest_prio_ready_task>
 80009b0:	7020      	strb	r0, [r4, #0]
    if ( running_tid != NO_TID ) {
 80009b2:	28ff      	cmp	r0, #255	; 0xff
 80009b4:	d002      	beq.n	80009bc <_ZL11os_schedulev+0x20>
        os_task_run();
 80009b6:	f001 fe79 	bl	80026ac <os_task_run>
 80009ba:	e7f3      	b.n	80009a4 <_ZL11os_schedulev+0x8>
        os_cbkSleep();
 80009bc:	f001 fea6 	bl	800270c <os_cbkSleep>
 80009c0:	e7f0      	b.n	80009a4 <_ZL11os_schedulev+0x8>
 80009c2:	bf00      	nop
 80009c4:	2000085c 	.word	0x2000085c

080009c8 <target_init>:
void target_init(void) {
 80009c8:	b508      	push	{r3, lr}
    if (initialised) { return; }  //  Already initialised, skip.
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <target_init+0x24>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b103      	cbz	r3, 80009d2 <target_init+0xa>
}
 80009d0:	bd08      	pop	{r3, pc}
    initialised = true;
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <target_init+0x24>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
    platform_setup();  //  STM32 platform setup.
 80009d8:	f002 f894 	bl	8002b04 <platform_setup>
    os_init();         //  Init cocoOS before creating any multitasking objects.
 80009dc:	f001 fcc8 	bl	8002370 <os_init>
    platform_start_timer(timer_tick, timer_alarm);
 80009e0:	4903      	ldr	r1, [pc, #12]	; (80009f0 <target_init+0x28>)
 80009e2:	4804      	ldr	r0, [pc, #16]	; (80009f4 <target_init+0x2c>)
 80009e4:	f002 f96e 	bl	8002cc4 <platform_start_timer>
 80009e8:	e7f2      	b.n	80009d0 <target_init+0x8>
 80009ea:	bf00      	nop
 80009ec:	20000184 	.word	0x20000184
 80009f0:	080008f1 	.word	0x080008f1
 80009f4:	08000985 	.word	0x08000985

080009f8 <target_wait_for_event>:
    if (!initialised) { return; }  //  If not initialised, quit.
 80009f8:	4b02      	ldr	r3, [pc, #8]	; (8000a04 <target_wait_for_event+0xc>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b103      	cbz	r3, 8000a00 <target_wait_for_event+0x8>
    __asm("wfe");  //  Allow CPU to go to sleep.
 80009fe:	bf20      	wfe
}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000184 	.word	0x20000184

08000a08 <target_wait>:
    if (milliseconds <= 0) { return; }
 8000a08:	b310      	cbz	r0, 8000a50 <target_wait+0x48>
void target_wait(uint32_t milliseconds) {
 8000a0a:	b510      	push	{r4, lr}
 8000a0c:	4604      	mov	r4, r0
    if (!initialised) { return; }  //  If not initialised, quit.
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <target_wait+0x4c>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	b903      	cbnz	r3, 8000a16 <target_wait+0xe>
}
 8000a14:	bd10      	pop	{r4, pc}
    debug_print("wt <"); debug_print_unsigned(milliseconds / 1000);
 8000a16:	4810      	ldr	r0, [pc, #64]	; (8000a58 <target_wait+0x50>)
 8000a18:	f002 f81a 	bl	8002a50 <debug_print>
 8000a1c:	480f      	ldr	r0, [pc, #60]	; (8000a5c <target_wait+0x54>)
 8000a1e:	fba0 3004 	umull	r3, r0, r0, r4
 8000a22:	0980      	lsrs	r0, r0, #6
 8000a24:	f002 f824 	bl	8002a70 <debug_print_unsigned>
    uint32_t end = millis() + milliseconds;
 8000a28:	f002 f994 	bl	8002d54 <millis>
 8000a2c:	4404      	add	r4, r0
 8000a2e:	e000      	b.n	8000a32 <target_wait+0x2a>
        __asm("wfe");  //  Allow CPU to go to sleep.
 8000a30:	bf20      	wfe
        if (millis() >= end) { break; }
 8000a32:	f002 f98f 	bl	8002d54 <millis>
 8000a36:	42a0      	cmp	r0, r4
 8000a38:	d206      	bcs.n	8000a48 <target_wait+0x40>
        if (os_running()) { os_schedule(); }  //  Schedule a cocoOS task to run.
 8000a3a:	f001 fcb1 	bl	80023a0 <os_running>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	d0f6      	beq.n	8000a30 <target_wait+0x28>
 8000a42:	f7ff ffab 	bl	800099c <_ZL11os_schedulev>
 8000a46:	e7f3      	b.n	8000a30 <target_wait+0x28>
    debug_print("> ");
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <target_wait+0x58>)
 8000a4a:	f002 f801 	bl	8002a50 <debug_print>
 8000a4e:	e7e1      	b.n	8000a14 <target_wait+0xc>
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000184 	.word	0x20000184
 8000a58:	080049c8 	.word	0x080049c8
 8000a5c:	10624dd3 	.word	0x10624dd3
 8000a60:	080049d0 	.word	0x080049d0

08000a64 <target_wait_us>:
void target_wait_us(unsigned long microseconds) {
 8000a64:	b508      	push	{r3, lr}
    return target_wait(microseconds / 1000);
 8000a66:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <target_wait_us+0x10>)
 8000a68:	fba3 3000 	umull	r3, r0, r3, r0
 8000a6c:	0980      	lsrs	r0, r0, #6
 8000a6e:	f7ff ffcb 	bl	8000a08 <target_wait>
}
 8000a72:	bd08      	pop	{r3, pc}
 8000a74:	10624dd3 	.word	0x10624dd3

08000a78 <target_panic>:
void target_panic(int statusCode) {
 8000a78:	b508      	push	{r3, lr}
 8000a7a:	4604      	mov	r4, r0
    target_disable_irq();
 8000a7c:	f000 f85e 	bl	8000b3c <target_disable_irq>
	debug_print("*****target_panic ");
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <target_panic+0x1c>)
 8000a82:	f001 ffe5 	bl	8002a50 <debug_print>
	debug_println((int) statusCode);
 8000a86:	4620      	mov	r0, r4
 8000a88:	f001 ffc4 	bl	8002a14 <_Z13debug_printlni>
	debug_flush();
 8000a8c:	f001 ffdb 	bl	8002a46 <debug_flush>
        __asm("wfe");  //  Allow CPU to go to sleep.
 8000a90:	bf20      	wfe
 8000a92:	e7fd      	b.n	8000a90 <target_panic+0x18>
 8000a94:	080049b4 	.word	0x080049b4

08000a98 <fiber_initial_stack_base>:
}
 8000a98:	4800      	ldr	r0, [pc, #0]	; (8000a9c <fiber_initial_stack_base+0x4>)
 8000a9a:	4770      	bx	lr
 8000a9c:	20005000 	.word	0x20005000

08000aa0 <test_codal>:
void test_codal() {
 8000aa0:	b538      	push	{r3, r4, r5, lr}
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <test_codal+0x58>)
 8000aa4:	681d      	ldr	r5, [r3, #0]
	PROCESSOR_WORD_TYPE size = end - start;
 8000aa6:	f1c5 5400 	rsb	r4, r5, #536870912	; 0x20000000
 8000aaa:	f504 4490 	add.w	r4, r4, #18432	; 0x4800
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <test_codal+0x5c>)
 8000ab0:	f001 ffce 	bl	8002a50 <debug_print>
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	f002 f817 	bl	8002ae8 <debug_printhex_unsigned>
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
 8000aba:	4811      	ldr	r0, [pc, #68]	; (8000b00 <test_codal+0x60>)
 8000abc:	f001 ffc8 	bl	8002a50 <debug_print>
 8000ac0:	4810      	ldr	r0, [pc, #64]	; (8000b04 <test_codal+0x64>)
 8000ac2:	f002 f811 	bl	8002ae8 <debug_printhex_unsigned>
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
 8000ac6:	4810      	ldr	r0, [pc, #64]	; (8000b08 <test_codal+0x68>)
 8000ac8:	f001 ffc2 	bl	8002a50 <debug_print>
 8000acc:	0aa0      	lsrs	r0, r4, #10
 8000ace:	f001 ff35 	bl	800293c <_Z11debug_printj>
	debug_print(" KB, stack used: "); debug_print((size_t) 
 8000ad2:	480e      	ldr	r0, [pc, #56]	; (8000b0c <test_codal+0x6c>)
 8000ad4:	f001 ffbc 	bl	8002a50 <debug_print>
        ((PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - get_current_sp()) >> 10);
 8000ad8:	f000 f83f 	bl	8000b5a <get_current_sp>
 8000adc:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
 8000ae0:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
	debug_print(" KB, stack used: "); debug_print((size_t) 
 8000ae4:	0a80      	lsrs	r0, r0, #10
 8000ae6:	f001 ff29 	bl	800293c <_Z11debug_printj>
    debug_println(" KB"); debug_flush();
 8000aea:	4809      	ldr	r0, [pc, #36]	; (8000b10 <test_codal+0x70>)
 8000aec:	f001 ff84 	bl	80029f8 <debug_println>
 8000af0:	f001 ffa9 	bl	8002a46 <debug_flush>
}
 8000af4:	bd38      	pop	{r3, r4, r5, pc}
 8000af6:	bf00      	nop
 8000af8:	20000044 	.word	0x20000044
 8000afc:	080049d4 	.word	0x080049d4
 8000b00:	080049e4 	.word	0x080049e4
 8000b04:	20004800 	.word	0x20004800
 8000b08:	080049ec 	.word	0x080049ec
 8000b0c:	080049f8 	.word	0x080049f8
 8000b10:	08004a0c 	.word	0x08004a0c

08000b14 <target_set_tick_callback>:
    tick_callback = tick_callback0;
 8000b14:	4b01      	ldr	r3, [pc, #4]	; (8000b1c <target_set_tick_callback+0x8>)
 8000b16:	6018      	str	r0, [r3, #0]
}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000170 	.word	0x20000170

08000b20 <target_set_alarm_callback>:
    alarm_callback = alarm_callback0;
 8000b20:	4b01      	ldr	r3, [pc, #4]	; (8000b28 <target_set_alarm_callback+0x8>)
 8000b22:	6018      	str	r0, [r3, #0]
}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000174 	.word	0x20000174

08000b2c <target_set_bootloader_callback>:
    bootloader_callback = bootloader_callback0;
 8000b2c:	4b01      	ldr	r3, [pc, #4]	; (8000b34 <target_set_bootloader_callback+0x8>)
 8000b2e:	6018      	str	r0, [r3, #0]
}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	2000017c 	.word	0x2000017c

08000b38 <target_enable_irq>:
 *
 * Disable the interrupt mask and enable interrupts globally
 */
static inline void cm_enable_interrupts(void)
{
	__asm__("CPSIE I\n");
 8000b38:	b662      	cpsie	i
}
 8000b3a:	4770      	bx	lr

08000b3c <target_disable_irq>:
 *
 * Mask all interrupts globally
 */
static inline void cm_disable_interrupts(void)
{
	__asm__("CPSID I\n");
 8000b3c:	b672      	cpsid	i
}
 8000b3e:	4770      	bx	lr

08000b40 <tcb_allocate>:
void *tcb_allocate() {
 8000b40:	b508      	push	{r3, lr}
    return (void *)malloc(sizeof(PROCESSOR_TCB));
 8000b42:	2040      	movs	r0, #64	; 0x40
 8000b44:	f007 f9f0 	bl	8007f28 <device_malloc>
}
 8000b48:	bd08      	pop	{r3, pc}

08000b4a <tcb_configure_lr>:
    tcbPointer->LR = function;
 8000b4a:	6381      	str	r1, [r0, #56]	; 0x38
}
 8000b4c:	4770      	bx	lr

08000b4e <tcb_configure_sp>:
    tcbPointer->SP = sp;
 8000b4e:	6341      	str	r1, [r0, #52]	; 0x34
}
 8000b50:	4770      	bx	lr

08000b52 <tcb_configure_stack_base>:
    tcbPointer->stack_base = stack_base;
 8000b52:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8000b54:	4770      	bx	lr

08000b56 <tcb_get_stack_base>:
}
 8000b56:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000b58:	4770      	bx	lr

08000b5a <get_current_sp>:
}
 8000b5a:	4668      	mov	r0, sp
 8000b5c:	4770      	bx	lr

08000b5e <tcb_get_sp>:
}
 8000b5e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000b60:	4770      	bx	lr

08000b62 <tcb_configure_args>:
    tcbPointer->R0 = (uint32_t)ep;
 8000b62:	6001      	str	r1, [r0, #0]
    tcbPointer->R1 = (uint32_t)cp;
 8000b64:	6042      	str	r2, [r0, #4]
    tcbPointer->R2 = (uint32_t)pm;
 8000b66:	6083      	str	r3, [r0, #8]
}
 8000b68:	4770      	bx	lr

08000b6a <_fini>:
    void _fini(void) { }
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_atexit>:
    }
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <target_enable_debug>:
void target_enable_debug(void) {
 8000b70:	b508      	push	{r3, lr}
    enable_debug();   
 8000b72:	f001 ffed 	bl	8002b50 <enable_debug>
}
 8000b76:	bd08      	pop	{r3, pc}

08000b78 <swap_context>:

    @ Write our core registers into the TCB
    @ First, store the general registers

    @ Skip this is we're given a NULL parameter for the TCB
    CMP     R0, #0
 8000b78:	2800      	cmp	r0, #0
    BEQ     store_context_complete
 8000b7a:	d015      	beq.n	8000ba8 <store_context_complete>

    STR     R0, [R0,#0]
 8000b7c:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000b7e:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000b80:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000b82:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000b84:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000b86:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000b88:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000b8a:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000b8c:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000b8e:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000b90:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000b92:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000b94:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000b96:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000b98:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000b9a:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000b9c:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000b9e:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 8000ba0:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8000ba2:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8000ba4:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000ba6:	6384      	str	r4, [r0, #56]	; 0x38

08000ba8 <store_context_complete>:
store_context_complete:
    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stack is usually very small at the point
    @ of scheduling, but we need a lot of capacity for interrupt handling and other functions.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R1, #0
 8000ba8:	2900      	cmp	r1, #0
    BEQ     store_stack_complete
 8000baa:	d006      	beq.n	8000bba <store_stack_complete>

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 8000bac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

08000bae <store_stack>:
store_stack:
    SUBS    R4, #4
 8000bae:	3c04      	subs	r4, #4
    SUBS    R1, #4
 8000bb0:	3904      	subs	r1, #4

    LDR     R5, [R4]
 8000bb2:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 8000bb4:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 8000bb6:	42b4      	cmp	r4, r6
    BNE     store_stack
 8000bb8:	d1f9      	bne.n	8000bae <store_stack>

08000bba <store_stack_complete>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R2, #56]
 8000bba:	6b94      	ldr	r4, [r2, #56]	; 0x38
    MOV     LR, R4
 8000bbc:	46a6      	mov	lr, r4
    LDR     R6, [R2, #52]
 8000bbe:	6b56      	ldr	r6, [r2, #52]	; 0x34
    MOV     SP, R6
 8000bc0:	46b5      	mov	sp, r6

    @ Copy the stack in.
    @ n.b. we do this after setting the SP to make comparisons easier.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R3, #0
 8000bc2:	2b00      	cmp	r3, #0
    BEQ     restore_stack_complete
 8000bc4:	d006      	beq.n	8000bd4 <restore_stack_complete>

    LDR     R4, [R2,#60]         @ Load R4 with the fiber's defined stack_base.
 8000bc6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c

08000bc8 <restore_stack>:

restore_stack:
    SUBS    R4, #4
 8000bc8:	3c04      	subs	r4, #4
    SUBS    R3, #4
 8000bca:	3b04      	subs	r3, #4

    LDR     R5, [R3]
 8000bcc:	681d      	ldr	r5, [r3, #0]
    STR     R5, [R4]
 8000bce:	6025      	str	r5, [r4, #0]

    CMP     R4, R6
 8000bd0:	42b4      	cmp	r4, r6
    BNE     restore_stack
 8000bd2:	d1f9      	bne.n	8000bc8 <restore_stack>

08000bd4 <restore_stack_complete>:

restore_stack_complete:
    LDR     R4, [R2, #48]
 8000bd4:	6b14      	ldr	r4, [r2, #48]	; 0x30
    MOV     R12, R4
 8000bd6:	46a4      	mov	ip, r4
    LDR     R4, [R2, #44]
 8000bd8:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    MOV     R11, R4
 8000bda:	46a3      	mov	fp, r4
    LDR     R4, [R2, #40]
 8000bdc:	6a94      	ldr	r4, [r2, #40]	; 0x28
    MOV     R10, R4
 8000bde:	46a2      	mov	sl, r4
    LDR     R4, [R2, #36]
 8000be0:	6a54      	ldr	r4, [r2, #36]	; 0x24
    MOV     R9, R4
 8000be2:	46a1      	mov	r9, r4
    LDR     R4, [R2, #32]
 8000be4:	6a14      	ldr	r4, [r2, #32]
    MOV     R8, R4
 8000be6:	46a0      	mov	r8, r4

    LDR     R7, [R2, #28]
 8000be8:	69d7      	ldr	r7, [r2, #28]
    LDR     R6, [R2, #24]
 8000bea:	6996      	ldr	r6, [r2, #24]
    LDR     R5, [R2, #20]
 8000bec:	6955      	ldr	r5, [r2, #20]
    LDR     R4, [R2, #16]
 8000bee:	6914      	ldr	r4, [r2, #16]
    LDR     R3, [R2, #12]
 8000bf0:	68d3      	ldr	r3, [r2, #12]
    LDR     R1, [R2, #4]
 8000bf2:	6851      	ldr	r1, [r2, #4]
    LDR     R0, [R2, #0]
 8000bf4:	6810      	ldr	r0, [r2, #0]
    LDR     R2, [R2, #8]
 8000bf6:	6892      	ldr	r2, [r2, #8]

    @ Return to caller (scheduler).
    BX      LR
 8000bf8:	4770      	bx	lr

08000bfa <save_context>:
save_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 8000bfa:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000bfc:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000bfe:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000c00:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000c02:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000c04:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000c06:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000c08:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000c0a:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000c0c:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000c0e:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000c10:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000c12:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000c14:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000c16:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000c18:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000c1a:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000c1c:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 8000c1e:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8000c20:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8000c22:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000c24:	6384      	str	r4, [r0, #56]	; 0x38

    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stackis usually very small at the point
    @ of sceduling, but we need a lot of capacity for interrupt handling and other functions.

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 8000c26:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

08000c28 <store_stack1>:

store_stack1:
    SUBS    R4, #4
 8000c28:	3c04      	subs	r4, #4
    SUBS    R1, #4
 8000c2a:	3904      	subs	r1, #4

    LDR     R5, [R4]
 8000c2c:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 8000c2e:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 8000c30:	42b4      	cmp	r4, r6
    BNE     store_stack1
 8000c32:	d1f9      	bne.n	8000c28 <store_stack1>

    @ Restore scratch registers.

    LDR     R7, [R0, #28]
 8000c34:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 8000c36:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 8000c38:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 8000c3a:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 8000c3c:	4770      	bx	lr

08000c3e <save_register_context>:
save_register_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 8000c3e:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000c40:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000c42:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000c44:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000c46:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000c48:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000c4a:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000c4c:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000c4e:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000c50:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000c52:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000c54:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000c56:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000c58:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000c5a:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000c5c:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000c5e:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000c60:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack Pointer and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R4, SP
 8000c62:	466c      	mov	r4, sp
    STR     R4, [R0,#52]
 8000c64:	6344      	str	r4, [r0, #52]	; 0x34
    MOV     R4, LR
 8000c66:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000c68:	6384      	str	r4, [r0, #56]	; 0x38

    @ Restore scratch registers.
    LDR     R4, [R0, #16]
 8000c6a:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 8000c6c:	4770      	bx	lr

08000c6e <restore_register_context>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R0, #56]
 8000c6e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    MOV     LR, R4
 8000c70:	46a6      	mov	lr, r4
    LDR     R4, [R0, #52]
 8000c72:	6b44      	ldr	r4, [r0, #52]	; 0x34
    MOV     SP, R4
 8000c74:	46a5      	mov	sp, r4

    @ High registers...
    LDR     R4, [R0, #48]
 8000c76:	6b04      	ldr	r4, [r0, #48]	; 0x30
    MOV     R12, R4
 8000c78:	46a4      	mov	ip, r4
    LDR     R4, [R0, #44]
 8000c7a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    MOV     R11, R4
 8000c7c:	46a3      	mov	fp, r4
    LDR     R4, [R0, #40]
 8000c7e:	6a84      	ldr	r4, [r0, #40]	; 0x28
    MOV     R10, R4
 8000c80:	46a2      	mov	sl, r4
    LDR     R4, [R0, #36]
 8000c82:	6a44      	ldr	r4, [r0, #36]	; 0x24
    MOV     R9, R4
 8000c84:	46a1      	mov	r9, r4
    LDR     R4, [R0, #32]
 8000c86:	6a04      	ldr	r4, [r0, #32]
    MOV     R8, R4
 8000c88:	46a0      	mov	r8, r4

    @ Low registers...
    LDR     R7, [R0, #28]
 8000c8a:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 8000c8c:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 8000c8e:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 8000c90:	6904      	ldr	r4, [r0, #16]
    LDR     R3, [R0, #12]
 8000c92:	68c3      	ldr	r3, [r0, #12]
    LDR     R2, [R0, #8]
 8000c94:	6882      	ldr	r2, [r0, #8]
    LDR     R0, [R0, #0]
 8000c96:	6800      	ldr	r0, [r0, #0]
    LDR     R1, [R0, #4]
 8000c98:	6841      	ldr	r1, [r0, #4]

    @ Return to caller (normally the scheduler).
    BX      LR
 8000c9a:	4770      	bx	lr

08000c9c <desig_get_unique_id>:
	return DESIG_FLASH_SIZE;
}

void desig_get_unique_id(uint32_t result[])
{
	result[0] = DESIG_UNIQUE_ID2;
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <desig_get_unique_id+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6003      	str	r3, [r0, #0]
	result[1] = DESIG_UNIQUE_ID1;
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <desig_get_unique_id+0x18>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	6043      	str	r3, [r0, #4]
	result[2] = DESIG_UNIQUE_ID0;
 8000ca8:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <desig_get_unique_id+0x1c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6083      	str	r3, [r0, #8]
}
 8000cae:	4770      	bx	lr
 8000cb0:	1ffff7f0 	.word	0x1ffff7f0
 8000cb4:	1ffff7ec 	.word	0x1ffff7ec
 8000cb8:	1ffff7e8 	.word	0x1ffff7e8

08000cbc <desig_get_unique_id_as_string>:

void desig_get_unique_id_as_string(char *string,
				   unsigned int string_len)
{
 8000cbc:	b570      	push	{r4, r5, r6, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460d      	mov	r5, r1
	int i, len;
	uint8_t device_id[12];
	static const char chars[] = "0123456789ABCDEF";

	desig_get_unique_id((uint32_t *)device_id);
 8000cc4:	a801      	add	r0, sp, #4
 8000cc6:	f7ff ffe9 	bl	8000c9c <desig_get_unique_id>

	/* Each byte produces two characters */
	len = (2 * sizeof(device_id) < string_len) ?
		2 * sizeof(device_id) : string_len - 1;
 8000cca:	2d19      	cmp	r5, #25
 8000ccc:	bf28      	it	cs
 8000cce:	2519      	movcs	r5, #25
 8000cd0:	1e69      	subs	r1, r5, #1
	len = (2 * sizeof(device_id) < string_len) ?
 8000cd2:	460e      	mov	r6, r1

	for (i = 0; i < len; i += 2) {
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	e010      	b.n	8000cfa <desig_get_unique_id_as_string+0x3e>
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 8000cd8:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8000cdc:	a804      	add	r0, sp, #16
 8000cde:	eb00 0262 	add.w	r2, r0, r2, asr #1
 8000ce2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000ce6:	0915      	lsrs	r5, r2, #4
 8000ce8:	4807      	ldr	r0, [pc, #28]	; (8000d08 <desig_get_unique_id_as_string+0x4c>)
 8000cea:	5d45      	ldrb	r5, [r0, r5]
 8000cec:	54e5      	strb	r5, [r4, r3]
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000cee:	f002 020f 	and.w	r2, r2, #15
 8000cf2:	1c5d      	adds	r5, r3, #1
 8000cf4:	5c82      	ldrb	r2, [r0, r2]
 8000cf6:	5562      	strb	r2, [r4, r5]
	for (i = 0; i < len; i += 2) {
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	42b3      	cmp	r3, r6
 8000cfc:	dbec      	blt.n	8000cd8 <desig_get_unique_id_as_string+0x1c>
	}

	string[len] = '\0';
 8000cfe:	2300      	movs	r3, #0
 8000d00:	5463      	strb	r3, [r4, r1]
}
 8000d02:	b004      	add	sp, #16
 8000d04:	bd70      	pop	{r4, r5, r6, pc}
 8000d06:	bf00      	nop
 8000d08:	08004a10 	.word	0x08004a10

08000d0c <rcc_wait_for_osc_ready>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
 8000d0c:	2806      	cmp	r0, #6
 8000d0e:	d82e      	bhi.n	8000d6e <rcc_wait_for_osc_ready+0x62>
 8000d10:	e8df f000 	tbb	[pc, r0]
 8000d14:	16100a04 	.word	0x16100a04
 8000d18:	221c      	.short	0x221c
 8000d1a:	28          	.byte	0x28
 8000d1b:	00          	.byte	0x00
	case PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <rcc_wait_for_osc_ready+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d24:	d0fa      	beq.n	8000d1c <rcc_wait_for_osc_ready+0x10>
 8000d26:	4770      	bx	lr
		break;
	case PLL2:
		while ((RCC_CR & RCC_CR_PLL2RDY) == 0);
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <rcc_wait_for_osc_ready+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8000d30:	d0fa      	beq.n	8000d28 <rcc_wait_for_osc_ready+0x1c>
 8000d32:	4770      	bx	lr
		break;
	case PLL3:
		while ((RCC_CR & RCC_CR_PLL3RDY) == 0);
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <rcc_wait_for_osc_ready+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8000d3c:	d0fa      	beq.n	8000d34 <rcc_wait_for_osc_ready+0x28>
 8000d3e:	4770      	bx	lr
		break;
	case HSE:
		while ((RCC_CR & RCC_CR_HSERDY) == 0);
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <rcc_wait_for_osc_ready+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d48:	d0fa      	beq.n	8000d40 <rcc_wait_for_osc_ready+0x34>
 8000d4a:	4770      	bx	lr
		break;
	case HSI:
		while ((RCC_CR & RCC_CR_HSIRDY) == 0);
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <rcc_wait_for_osc_ready+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f013 0f02 	tst.w	r3, #2
 8000d54:	d0fa      	beq.n	8000d4c <rcc_wait_for_osc_ready+0x40>
 8000d56:	4770      	bx	lr
		break;
	case LSE:
		while ((RCC_BDCR & RCC_BDCR_LSERDY) == 0);
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <rcc_wait_for_osc_ready+0x68>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f013 0f02 	tst.w	r3, #2
 8000d60:	d0fa      	beq.n	8000d58 <rcc_wait_for_osc_ready+0x4c>
 8000d62:	4770      	bx	lr
		break;
	case LSI:
		while ((RCC_CSR & RCC_CSR_LSIRDY) == 0);
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <rcc_wait_for_osc_ready+0x6c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f013 0f02 	tst.w	r3, #2
 8000d6c:	d0fa      	beq.n	8000d64 <rcc_wait_for_osc_ready+0x58>
		break;
	}
}
 8000d6e:	4770      	bx	lr
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40021020 	.word	0x40021020
 8000d78:	40021024 	.word	0x40021024

08000d7c <rcc_osc_on>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
 8000d7c:	2806      	cmp	r0, #6
 8000d7e:	d82e      	bhi.n	8000dde <rcc_osc_on+0x62>
 8000d80:	e8df f000 	tbb	[pc, r0]
 8000d84:	16100a04 	.word	0x16100a04
 8000d88:	221c      	.short	0x221c
 8000d8a:	28          	.byte	0x28
 8000d8b:	00          	.byte	0x00
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	; (8000de0 <rcc_osc_on+0x64>)
 8000d8e:	6813      	ldr	r3, [r2, #0]
 8000d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d94:	6013      	str	r3, [r2, #0]
		break;
 8000d96:	4770      	bx	lr
	case PLL2:
		RCC_CR |= RCC_CR_PLL2ON;
 8000d98:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <rcc_osc_on+0x64>)
 8000d9a:	6813      	ldr	r3, [r2, #0]
 8000d9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000da0:	6013      	str	r3, [r2, #0]
		break;
 8000da2:	4770      	bx	lr
	case PLL3:
		RCC_CR |= RCC_CR_PLL3ON;
 8000da4:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <rcc_osc_on+0x64>)
 8000da6:	6813      	ldr	r3, [r2, #0]
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	6013      	str	r3, [r2, #0]
		break;
 8000dae:	4770      	bx	lr
	case HSE:
		RCC_CR |= RCC_CR_HSEON;
 8000db0:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <rcc_osc_on+0x64>)
 8000db2:	6813      	ldr	r3, [r2, #0]
 8000db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db8:	6013      	str	r3, [r2, #0]
		break;
 8000dba:	4770      	bx	lr
	case HSI:
		RCC_CR |= RCC_CR_HSION;
 8000dbc:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <rcc_osc_on+0x64>)
 8000dbe:	6813      	ldr	r3, [r2, #0]
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6013      	str	r3, [r2, #0]
		break;
 8000dc6:	4770      	bx	lr
	case LSE:
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <rcc_osc_on+0x68>)
 8000dca:	6813      	ldr	r3, [r2, #0]
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6013      	str	r3, [r2, #0]
		break;
 8000dd2:	4770      	bx	lr
	case LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <rcc_osc_on+0x6c>)
 8000dd6:	6813      	ldr	r3, [r2, #0]
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000dde:	4770      	bx	lr
 8000de0:	40021000 	.word	0x40021000
 8000de4:	40021020 	.word	0x40021020
 8000de8:	40021024 	.word	0x40021024

08000dec <rcc_set_sysclk_source>:
@param[in] clk Unsigned int32. System Clock Selection @ref rcc_cfgr_scs
*/

void rcc_set_sysclk_source(uint32_t clk)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <rcc_set_sysclk_source+0x10>)
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	f023 0303 	bic.w	r3, r3, #3
 8000df4:	4318      	orrs	r0, r3
 8000df6:	6010      	str	r0, [r2, #0]
			(clk << RCC_CFGR_SW_SHIFT);
}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	40021004 	.word	0x40021004

08000e00 <rcc_set_pll_multiplication_factor>:
@param[in] mul Unsigned int32. PLL multiplication factor @ref rcc_cfgr_pmf
*/

void rcc_set_pll_multiplication_factor(uint32_t mul)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) |
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <rcc_set_pll_multiplication_factor+0x10>)
 8000e02:	6813      	ldr	r3, [r2, #0]
 8000e04:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000e08:	ea43 4080 	orr.w	r0, r3, r0, lsl #18
 8000e0c:	6010      	str	r0, [r2, #0]
			(mul << RCC_CFGR_PLLMUL_SHIFT);
}
 8000e0e:	4770      	bx	lr
 8000e10:	40021004 	.word	0x40021004

08000e14 <rcc_set_pll_source>:
@param[in] pllsrc Unsigned int32. PLL clock source @ref rcc_cfgr_pcs
*/

void rcc_set_pll_source(uint32_t pllsrc)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 8000e14:	4a03      	ldr	r2, [pc, #12]	; (8000e24 <rcc_set_pll_source+0x10>)
 8000e16:	6813      	ldr	r3, [r2, #0]
 8000e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e20:	6010      	str	r0, [r2, #0]
			(pllsrc << 16);
}
 8000e22:	4770      	bx	lr
 8000e24:	40021004 	.word	0x40021004

08000e28 <rcc_set_pllxtpre>:
@param[in] pllxtpre Unsigned int32. HSE division factor @ref rcc_cfgr_hsepre
*/

void rcc_set_pllxtpre(uint32_t pllxtpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 8000e28:	4a03      	ldr	r2, [pc, #12]	; (8000e38 <rcc_set_pllxtpre+0x10>)
 8000e2a:	6813      	ldr	r3, [r2, #0]
 8000e2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e30:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
 8000e34:	6010      	str	r0, [r2, #0]
			(pllxtpre << 17);
}
 8000e36:	4770      	bx	lr
 8000e38:	40021004 	.word	0x40021004

08000e3c <rcc_enable_rtc_clock>:

*/

void rcc_enable_rtc_clock(void)
{
	RCC_BDCR |= RCC_BDCR_RTCEN;
 8000e3c:	4a02      	ldr	r2, [pc, #8]	; (8000e48 <rcc_enable_rtc_clock+0xc>)
 8000e3e:	6813      	ldr	r3, [r2, #0]
 8000e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e44:	6013      	str	r3, [r2, #0]
}
 8000e46:	4770      	bx	lr
 8000e48:	40021020 	.word	0x40021020

08000e4c <rcc_set_rtc_clock_source>:

void rcc_set_rtc_clock_source(enum rcc_osc clock_source)
{
	uint32_t reg32;

	switch (clock_source) {
 8000e4c:	2806      	cmp	r0, #6
 8000e4e:	d846      	bhi.n	8000ede <rcc_set_rtc_clock_source+0x92>
 8000e50:	e8df f000 	tbb	[pc, r0]
 8000e54:	2c404040 	.word	0x2c404040
 8000e58:	0440      	.short	0x0440
 8000e5a:	18          	.byte	0x18
 8000e5b:	00          	.byte	0x00
	case LSE:
		/* Turn the LSE on and wait while it stabilises. */
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000e5c:	4a20      	ldr	r2, [pc, #128]	; (8000ee0 <rcc_set_rtc_clock_source+0x94>)
 8000e5e:	6813      	ldr	r3, [r2, #0]
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6013      	str	r3, [r2, #0]
		while ((reg32 = (RCC_BDCR & RCC_BDCR_LSERDY)) == 0);
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <rcc_set_rtc_clock_source+0x94>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f013 0f02 	tst.w	r3, #2
 8000e6e:	d0fa      	beq.n	8000e66 <rcc_set_rtc_clock_source+0x1a>

		/* Choose LSE as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000e70:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <rcc_set_rtc_clock_source+0x94>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000e78:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 8);
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e80:	601a      	str	r2, [r3, #0]
		break;
 8000e82:	4770      	bx	lr
	case LSI:
		/* Turn the LSI on and wait while it stabilises. */
		RCC_CSR |= RCC_CSR_LSION;
 8000e84:	4a17      	ldr	r2, [pc, #92]	; (8000ee4 <rcc_set_rtc_clock_source+0x98>)
 8000e86:	6813      	ldr	r3, [r2, #0]
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6013      	str	r3, [r2, #0]
		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <rcc_set_rtc_clock_source+0x98>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f013 0f02 	tst.w	r3, #2
 8000e96:	d0fa      	beq.n	8000e8e <rcc_set_rtc_clock_source+0x42>

		/* Choose LSI as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <rcc_set_rtc_clock_source+0x94>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ea0:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9);
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ea8:	601a      	str	r2, [r3, #0]
		break;
 8000eaa:	4770      	bx	lr
	case HSE:
		/* Turn the HSE on and wait while it stabilises. */
		RCC_CR |= RCC_CR_HSEON;
 8000eac:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <rcc_set_rtc_clock_source+0x9c>)
 8000eae:	6813      	ldr	r3, [r2, #0]
 8000eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb4:	6013      	str	r3, [r2, #0]
		while ((reg32 = (RCC_CR & RCC_CR_HSERDY)) == 0);
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <rcc_set_rtc_clock_source+0x9c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ebe:	d0fa      	beq.n	8000eb6 <rcc_set_rtc_clock_source+0x6a>

		/* Choose HSE as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <rcc_set_rtc_clock_source+0x94>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ec8:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9) | (1 << 8);
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000ed0:	601a      	str	r2, [r3, #0]
		break;
 8000ed2:	4770      	bx	lr
	case PLL2:
	case PLL3:
	case HSI:
		/* Unusable clock source, here to prevent warnings. */
		/* Turn off clock sources to RTC. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000ed4:	4a02      	ldr	r2, [pc, #8]	; (8000ee0 <rcc_set_rtc_clock_source+0x94>)
 8000ed6:	6813      	ldr	r3, [r2, #0]
 8000ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000edc:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000ede:	4770      	bx	lr
 8000ee0:	40021020 	.word	0x40021020
 8000ee4:	40021024 	.word	0x40021024
 8000ee8:	40021000 	.word	0x40021000

08000eec <rcc_set_adcpre>:
@param[in] adcpre uint32_t. Prescale divider taken from @ref rcc_cfgr_adcpre
*/

void rcc_set_adcpre(uint32_t adcpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_ADCPRE) |
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <rcc_set_adcpre+0x10>)
 8000eee:	6813      	ldr	r3, [r2, #0]
 8000ef0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ef4:	ea43 3080 	orr.w	r0, r3, r0, lsl #14
 8000ef8:	6010      	str	r0, [r2, #0]
			(adcpre << RCC_CFGR_ADCPRE_SHIFT);
}
 8000efa:	4770      	bx	lr
 8000efc:	40021004 	.word	0x40021004

08000f00 <rcc_set_ppre2>:
@param[in] ppre2 Unsigned int32. APB2 prescale factor @ref rcc_cfgr_apb2pre
*/

void rcc_set_ppre2(uint32_t ppre2)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE2) |
 8000f00:	4a03      	ldr	r2, [pc, #12]	; (8000f10 <rcc_set_ppre2+0x10>)
 8000f02:	6813      	ldr	r3, [r2, #0]
 8000f04:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000f08:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 8000f0c:	6010      	str	r0, [r2, #0]
			(ppre2 << RCC_CFGR_PPRE2_SHIFT);
}
 8000f0e:	4770      	bx	lr
 8000f10:	40021004 	.word	0x40021004

08000f14 <rcc_set_ppre1>:
@param[in] ppre1 Unsigned int32. APB1 prescale factor @ref rcc_cfgr_apb1pre
*/

void rcc_set_ppre1(uint32_t ppre1)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE1) |
 8000f14:	4a03      	ldr	r2, [pc, #12]	; (8000f24 <rcc_set_ppre1+0x10>)
 8000f16:	6813      	ldr	r3, [r2, #0]
 8000f18:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f1c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8000f20:	6010      	str	r0, [r2, #0]
			(ppre1 << RCC_CFGR_PPRE1_SHIFT);

}
 8000f22:	4770      	bx	lr
 8000f24:	40021004 	.word	0x40021004

08000f28 <rcc_set_hpre>:
@param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
*/

void rcc_set_hpre(uint32_t hpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) |
 8000f28:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <rcc_set_hpre+0x10>)
 8000f2a:	6813      	ldr	r3, [r2, #0]
 8000f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f30:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8000f34:	6010      	str	r0, [r2, #0]
			(hpre << RCC_CFGR_HPRE_SHIFT);

}
 8000f36:	4770      	bx	lr
 8000f38:	40021004 	.word	0x40021004

08000f3c <rcc_clock_setup_in_hse_8mhz_out_72mhz>:
/** @brief RCC Set System Clock PLL at 72MHz from HSE at 8MHz

*/

void rcc_clock_setup_in_hse_8mhz_out_72mhz(void)
{
 8000f3c:	b508      	push	{r3, lr}
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(HSI);
 8000f3e:	2004      	movs	r0, #4
 8000f40:	f7ff ff1c 	bl	8000d7c <rcc_osc_on>
	rcc_wait_for_osc_ready(HSI);
 8000f44:	2004      	movs	r0, #4
 8000f46:	f7ff fee1 	bl	8000d0c <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff ff4e 	bl	8000dec <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(HSE);
 8000f50:	2003      	movs	r0, #3
 8000f52:	f7ff ff13 	bl	8000d7c <rcc_osc_on>
	rcc_wait_for_osc_ready(HSE);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f7ff fed8 	bl	8000d0c <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSECLK);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f7ff ff45 	bl	8000dec <rcc_set_sysclk_source>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(RCC_CFGR_HPRE_SYSCLK_NODIV);    /* Set. 72MHz Max. 72MHz */
 8000f62:	2000      	movs	r0, #0
 8000f64:	f7ff ffe0 	bl	8000f28 <rcc_set_hpre>
	rcc_set_adcpre(RCC_CFGR_ADCPRE_PCLK2_DIV8);  /* Set.  9MHz Max. 14MHz */
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f7ff ffbf 	bl	8000eec <rcc_set_adcpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_HCLK_DIV2);     /* Set. 36MHz Max. 36MHz */
 8000f6e:	2004      	movs	r0, #4
 8000f70:	f7ff ffd0 	bl	8000f14 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_HCLK_NODIV);    /* Set. 72MHz Max. 72MHz */
 8000f74:	2000      	movs	r0, #0
 8000f76:	f7ff ffc3 	bl	8000f00 <rcc_set_ppre2>
	 * Sysclk runs with 72MHz -> 2 waitstates.
	 * 0WS from 0-24MHz
	 * 1WS from 24-48MHz
	 * 2WS from 48-72MHz
	 */
	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f000 f93e 	bl	80011fc <flash_set_ws>

	/*
	 * Set the PLL multiplication factor to 9.
	 * 8MHz (external) * 9 (multiplier) = 72MHz
	 */
	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL9);
 8000f80:	2007      	movs	r0, #7
 8000f82:	f7ff ff3d 	bl	8000e00 <rcc_set_pll_multiplication_factor>

	/* Select HSE as PLL source. */
	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f7ff ff44 	bl	8000e14 <rcc_set_pll_source>

	/*
	 * External frequency undivided before entering PLL
	 * (only valid/needed for HSE).
	 */
	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	f7ff ff4b 	bl	8000e28 <rcc_set_pllxtpre>

	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(PLL);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff fef2 	bl	8000d7c <rcc_osc_on>
	rcc_wait_for_osc_ready(PLL);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f7ff feb7 	bl	8000d0c <rcc_wait_for_osc_ready>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 8000f9e:	2002      	movs	r0, #2
 8000fa0:	f7ff ff24 	bl	8000dec <rcc_set_sysclk_source>

	/* Set the peripheral clock frequencies used */
	rcc_ahb_frequency = 72000000;
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x7c>)
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x80>)
 8000fa8:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 36000000;
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x84>)
 8000fac:	4905      	ldr	r1, [pc, #20]	; (8000fc4 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x88>)
 8000fae:	6011      	str	r1, [r2, #0]
	rcc_apb2_frequency = 72000000;
 8000fb0:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x8c>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bd08      	pop	{r3, pc}
 8000fb6:	bf00      	nop
 8000fb8:	044aa200 	.word	0x044aa200
 8000fbc:	20000048 	.word	0x20000048
 8000fc0:	2000004c 	.word	0x2000004c
 8000fc4:	02255100 	.word	0x02255100
 8000fc8:	20000050 	.word	0x20000050

08000fcc <rtc_enter_config_mode>:
Prime the RTC for configuration changes by giving access to the prescaler,
and counter and alarm registers.
*/

void rtc_enter_config_mode(void)
{
 8000fcc:	b082      	sub	sp, #8
	volatile uint32_t reg32;  ////  Added volatile.

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <rtc_enter_config_mode+0x20>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0320 	and.w	r3, r3, #32
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f8      	beq.n	8000fce <rtc_enter_config_mode+0x2>

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <rtc_enter_config_mode+0x20>)
 8000fde:	6813      	ldr	r3, [r2, #0]
 8000fe0:	f043 0310 	orr.w	r3, r3, #16
 8000fe4:	6013      	str	r3, [r2, #0]
}
 8000fe6:	b002      	add	sp, #8
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40002804 	.word	0x40002804

08000ff0 <rtc_exit_config_mode>:

Revert the RTC to operational state.
*/

void rtc_exit_config_mode(void)
{
 8000ff0:	b082      	sub	sp, #8
	volatile uint32_t reg32;  ////  Added volatile.

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8000ff2:	4a07      	ldr	r2, [pc, #28]	; (8001010 <rtc_exit_config_mode+0x20>)
 8000ff4:	6813      	ldr	r3, [r2, #0]
 8000ff6:	f023 0310 	bic.w	r3, r3, #16
 8000ffa:	6013      	str	r3, [r2, #0]

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8000ffc:	4b04      	ldr	r3, [pc, #16]	; (8001010 <rtc_exit_config_mode+0x20>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0320 	and.w	r3, r3, #32
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f8      	beq.n	8000ffc <rtc_exit_config_mode+0xc>
}
 800100a:	b002      	add	sp, #8
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40002804 	.word	0x40002804

08001014 <rtc_set_alarm_time>:

@param[in] alarm_time uint32_t. time at which the alarm event is triggered.
*/

void rtc_set_alarm_time(uint32_t alarm_time)
{
 8001014:	b510      	push	{r4, lr}
 8001016:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 8001018:	f7ff ffd8 	bl	8000fcc <rtc_enter_config_mode>
	RTC_ALRL = (alarm_time & 0x0000ffff);
 800101c:	b2a2      	uxth	r2, r4
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <rtc_set_alarm_time+0x1c>)
 8001020:	601a      	str	r2, [r3, #0]
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 8001022:	0c24      	lsrs	r4, r4, #16
 8001024:	3b04      	subs	r3, #4
 8001026:	601c      	str	r4, [r3, #0]
	rtc_exit_config_mode();
 8001028:	f7ff ffe2 	bl	8000ff0 <rtc_exit_config_mode>
}
 800102c:	bd10      	pop	{r4, pc}
 800102e:	bf00      	nop
 8001030:	40002824 	.word	0x40002824

08001034 <rtc_set_prescale_val>:

@param[in] prescale_val uint32_t. 20 bit prescale divider.
*/

void rtc_set_prescale_val(uint32_t prescale_val)
{
 8001034:	b510      	push	{r4, lr}
 8001036:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 8001038:	f7ff ffc8 	bl	8000fcc <rtc_enter_config_mode>
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 800103c:	b2a2      	uxth	r2, r4
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <rtc_set_prescale_val+0x1c>)
 8001040:	601a      	str	r2, [r3, #0]
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8001042:	f3c4 4403 	ubfx	r4, r4, #16, #4
 8001046:	3b04      	subs	r3, #4
 8001048:	601c      	str	r4, [r3, #0]
	rtc_exit_config_mode();
 800104a:	f7ff ffd1 	bl	8000ff0 <rtc_exit_config_mode>
}
 800104e:	bd10      	pop	{r4, pc}
 8001050:	4000280c 	.word	0x4000280c

08001054 <rtc_get_counter_val>:
@returns uint32_t: the 32 bit counter value.
*/

uint32_t rtc_get_counter_val(void)
{
	return (RTC_CNTH << 16) | RTC_CNTL;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <rtc_get_counter_val+0x10>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	3304      	adds	r3, #4
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40002818 	.word	0x40002818

08001068 <rtc_set_counter_val>:

@param[in] uint32_t counter_val: 32 bit time setting for the counter.
*/

void rtc_set_counter_val(uint32_t counter_val)
{
 8001068:	b510      	push	{r4, lr}
 800106a:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 800106c:	f7ff ffae 	bl	8000fcc <rtc_enter_config_mode>
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8001070:	0c22      	lsrs	r2, r4, #16
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <rtc_set_counter_val+0x1c>)
 8001074:	601a      	str	r2, [r3, #0]
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 8001076:	b2a4      	uxth	r4, r4
 8001078:	3304      	adds	r3, #4
 800107a:	601c      	str	r4, [r3, #0]
	rtc_exit_config_mode();
 800107c:	f7ff ffb8 	bl	8000ff0 <rtc_exit_config_mode>
}
 8001080:	bd10      	pop	{r4, pc}
 8001082:	bf00      	nop
 8001084:	40002818 	.word	0x40002818

08001088 <rtc_interrupt_enable>:

@param[in] flag_val ::rtcflag_t: The flag to enable.
*/

void rtc_interrupt_enable(rtcflag_t flag_val)
{
 8001088:	b510      	push	{r4, lr}
 800108a:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 800108c:	f7ff ff9e 	bl	8000fcc <rtc_enter_config_mode>

	/* Set the correct interrupt enable. */
	switch (flag_val) {
 8001090:	2c01      	cmp	r4, #1
 8001092:	d00b      	beq.n	80010ac <rtc_interrupt_enable+0x24>
 8001094:	b124      	cbz	r4, 80010a0 <rtc_interrupt_enable+0x18>
 8001096:	2c02      	cmp	r4, #2
 8001098:	d00e      	beq.n	80010b8 <rtc_interrupt_enable+0x30>
	case RTC_OW:
		RTC_CRH |= RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
 800109a:	f7ff ffa9 	bl	8000ff0 <rtc_exit_config_mode>
}
 800109e:	bd10      	pop	{r4, pc}
		RTC_CRH |= RTC_CRH_SECIE;
 80010a0:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <rtc_interrupt_enable+0x3c>)
 80010a2:	6813      	ldr	r3, [r2, #0]
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6013      	str	r3, [r2, #0]
		break;
 80010aa:	e7f6      	b.n	800109a <rtc_interrupt_enable+0x12>
		RTC_CRH |= RTC_CRH_ALRIE;
 80010ac:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <rtc_interrupt_enable+0x3c>)
 80010ae:	6813      	ldr	r3, [r2, #0]
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6013      	str	r3, [r2, #0]
		break;
 80010b6:	e7f0      	b.n	800109a <rtc_interrupt_enable+0x12>
		RTC_CRH |= RTC_CRH_OWIE;
 80010b8:	4a02      	ldr	r2, [pc, #8]	; (80010c4 <rtc_interrupt_enable+0x3c>)
 80010ba:	6813      	ldr	r3, [r2, #0]
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	6013      	str	r3, [r2, #0]
		break;
 80010c2:	e7ea      	b.n	800109a <rtc_interrupt_enable+0x12>
 80010c4:	40002800 	.word	0x40002800

080010c8 <rtc_interrupt_disable>:

@param[in] flag_val ::rtcflag_t: The flag to disable.
*/

void rtc_interrupt_disable(rtcflag_t flag_val)
{
 80010c8:	b510      	push	{r4, lr}
 80010ca:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 80010cc:	f7ff ff7e 	bl	8000fcc <rtc_enter_config_mode>

	/* Disable the correct interrupt enable. */
	switch (flag_val) {
 80010d0:	2c01      	cmp	r4, #1
 80010d2:	d00b      	beq.n	80010ec <rtc_interrupt_disable+0x24>
 80010d4:	b124      	cbz	r4, 80010e0 <rtc_interrupt_disable+0x18>
 80010d6:	2c02      	cmp	r4, #2
 80010d8:	d00e      	beq.n	80010f8 <rtc_interrupt_disable+0x30>
	case RTC_OW:
		RTC_CRH &= ~RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
 80010da:	f7ff ff89 	bl	8000ff0 <rtc_exit_config_mode>
}
 80010de:	bd10      	pop	{r4, pc}
		RTC_CRH &= ~RTC_CRH_SECIE;
 80010e0:	4a08      	ldr	r2, [pc, #32]	; (8001104 <rtc_interrupt_disable+0x3c>)
 80010e2:	6813      	ldr	r3, [r2, #0]
 80010e4:	f023 0301 	bic.w	r3, r3, #1
 80010e8:	6013      	str	r3, [r2, #0]
		break;
 80010ea:	e7f6      	b.n	80010da <rtc_interrupt_disable+0x12>
		RTC_CRH &= ~RTC_CRH_ALRIE;
 80010ec:	4a05      	ldr	r2, [pc, #20]	; (8001104 <rtc_interrupt_disable+0x3c>)
 80010ee:	6813      	ldr	r3, [r2, #0]
 80010f0:	f023 0302 	bic.w	r3, r3, #2
 80010f4:	6013      	str	r3, [r2, #0]
		break;
 80010f6:	e7f0      	b.n	80010da <rtc_interrupt_disable+0x12>
		RTC_CRH &= ~RTC_CRH_OWIE;
 80010f8:	4a02      	ldr	r2, [pc, #8]	; (8001104 <rtc_interrupt_disable+0x3c>)
 80010fa:	6813      	ldr	r3, [r2, #0]
 80010fc:	f023 0304 	bic.w	r3, r3, #4
 8001100:	6013      	str	r3, [r2, #0]
		break;
 8001102:	e7ea      	b.n	80010da <rtc_interrupt_disable+0x12>
 8001104:	40002800 	.word	0x40002800

08001108 <rtc_clear_flag>:
void rtc_clear_flag(rtcflag_t flag_val)
{
	/* Configuration mode not needed. */

	/* Clear the correct flag. */
	switch (flag_val) {
 8001108:	2801      	cmp	r0, #1
 800110a:	d009      	beq.n	8001120 <rtc_clear_flag+0x18>
 800110c:	b110      	cbz	r0, 8001114 <rtc_clear_flag+0xc>
 800110e:	2802      	cmp	r0, #2
 8001110:	d00c      	beq.n	800112c <rtc_clear_flag+0x24>
 8001112:	4770      	bx	lr
	case RTC_SEC:
		RTC_CRL &= ~RTC_CRL_SECF;
 8001114:	4a08      	ldr	r2, [pc, #32]	; (8001138 <rtc_clear_flag+0x30>)
 8001116:	6813      	ldr	r3, [r2, #0]
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	6013      	str	r3, [r2, #0]
		break;
 800111e:	4770      	bx	lr
	case RTC_ALR:
		RTC_CRL &= ~RTC_CRL_ALRF;
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <rtc_clear_flag+0x30>)
 8001122:	6813      	ldr	r3, [r2, #0]
 8001124:	f023 0302 	bic.w	r3, r3, #2
 8001128:	6013      	str	r3, [r2, #0]
		break;
 800112a:	4770      	bx	lr
	case RTC_OW:
		RTC_CRL &= ~RTC_CRL_OWF;
 800112c:	4a02      	ldr	r2, [pc, #8]	; (8001138 <rtc_clear_flag+0x30>)
 800112e:	6813      	ldr	r3, [r2, #0]
 8001130:	f023 0304 	bic.w	r3, r3, #4
 8001134:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8001136:	4770      	bx	lr
 8001138:	40002804 	.word	0x40002804

0800113c <rtc_check_flag>:
uint32_t rtc_check_flag(rtcflag_t flag_val)
{
	uint32_t reg32;

	/* Read correct flag. */
	switch (flag_val) {
 800113c:	2801      	cmp	r0, #1
 800113e:	d009      	beq.n	8001154 <rtc_check_flag+0x18>
 8001140:	b118      	cbz	r0, 800114a <rtc_check_flag+0xe>
 8001142:	2802      	cmp	r0, #2
 8001144:	d00b      	beq.n	800115e <rtc_check_flag+0x22>
		break;
	case RTC_OW:
		reg32 = RTC_CRL & RTC_CRL_OWF;
		break;
	default:
		reg32 = 0;
 8001146:	2000      	movs	r0, #0
		break;
	}

	return reg32;
}
 8001148:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_SECF;
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <rtc_check_flag+0x2c>)
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	f000 0001 	and.w	r0, r0, #1
		break;
 8001152:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_ALRF;
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <rtc_check_flag+0x2c>)
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	f000 0002 	and.w	r0, r0, #2
		break;
 800115c:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_OWF;
 800115e:	4b02      	ldr	r3, [pc, #8]	; (8001168 <rtc_check_flag+0x2c>)
 8001160:	6818      	ldr	r0, [r3, #0]
 8001162:	f000 0004 	and.w	r0, r0, #4
		break;
 8001166:	4770      	bx	lr
 8001168:	40002804 	.word	0x40002804

0800116c <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 800116c:	4a02      	ldr	r2, [pc, #8]	; (8001178 <pwr_disable_backup_domain_write_protect+0xc>)
 800116e:	6813      	ldr	r3, [r2, #0]
 8001170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001174:	6013      	str	r3, [r2, #0]
}
 8001176:	4770      	bx	lr
 8001178:	40007000 	.word	0x40007000

0800117c <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 800117c:	4a02      	ldr	r2, [pc, #8]	; (8001188 <pwr_enable_backup_domain_write_protect+0xc>)
 800117e:	6813      	ldr	r3, [r2, #0]
 8001180:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001184:	6013      	str	r3, [r2, #0]
}
 8001186:	4770      	bx	lr
 8001188:	40007000 	.word	0x40007000

0800118c <exti_set_trigger>:
#       include <libopencm3/stm32/syscfg.h>
#endif

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
 800118c:	2901      	cmp	r1, #1
 800118e:	d00d      	beq.n	80011ac <exti_set_trigger+0x20>
 8001190:	b111      	cbz	r1, 8001198 <exti_set_trigger+0xc>
 8001192:	2902      	cmp	r1, #2
 8001194:	d014      	beq.n	80011c0 <exti_set_trigger+0x34>
 8001196:	4770      	bx	lr
	case EXTI_TRIGGER_RISING:
		EXTI_RTSR |= extis;
 8001198:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <exti_set_trigger+0x48>)
 800119a:	6813      	ldr	r3, [r2, #0]
 800119c:	4303      	orrs	r3, r0
 800119e:	6013      	str	r3, [r2, #0]
		EXTI_FTSR &= ~extis;
 80011a0:	3204      	adds	r2, #4
 80011a2:	6813      	ldr	r3, [r2, #0]
 80011a4:	ea23 0000 	bic.w	r0, r3, r0
 80011a8:	6010      	str	r0, [r2, #0]
		break;
 80011aa:	4770      	bx	lr
	case EXTI_TRIGGER_FALLING:
		EXTI_RTSR &= ~extis;
 80011ac:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <exti_set_trigger+0x48>)
 80011ae:	6813      	ldr	r3, [r2, #0]
 80011b0:	ea23 0300 	bic.w	r3, r3, r0
 80011b4:	6013      	str	r3, [r2, #0]
		EXTI_FTSR |= extis;
 80011b6:	3204      	adds	r2, #4
 80011b8:	6813      	ldr	r3, [r2, #0]
 80011ba:	4318      	orrs	r0, r3
 80011bc:	6010      	str	r0, [r2, #0]
		break;
 80011be:	4770      	bx	lr
	case EXTI_TRIGGER_BOTH:
		EXTI_RTSR |= extis;
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <exti_set_trigger+0x48>)
 80011c2:	6813      	ldr	r3, [r2, #0]
 80011c4:	4303      	orrs	r3, r0
 80011c6:	6013      	str	r3, [r2, #0]
		EXTI_FTSR |= extis;
 80011c8:	3204      	adds	r2, #4
 80011ca:	6813      	ldr	r3, [r2, #0]
 80011cc:	4318      	orrs	r0, r3
 80011ce:	6010      	str	r0, [r2, #0]
		break;
	}
}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40010408 	.word	0x40010408

080011d8 <exti_enable_request>:

void exti_enable_request(uint32_t extis)
{
	/* Enable interrupts. */
	EXTI_IMR |= extis;
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <exti_enable_request+0x14>)
 80011da:	6813      	ldr	r3, [r2, #0]
 80011dc:	4303      	orrs	r3, r0
 80011de:	6013      	str	r3, [r2, #0]

	/* Enable events. */
	EXTI_EMR |= extis;
 80011e0:	3204      	adds	r2, #4
 80011e2:	6813      	ldr	r3, [r2, #0]
 80011e4:	4318      	orrs	r0, r3
 80011e6:	6010      	str	r0, [r2, #0]
}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40010400 	.word	0x40010400

080011f0 <exti_reset_request>:
 * Reset the interrupt request by writing a 1 to the corresponding
 * pending bit register.
 */
void exti_reset_request(uint32_t extis)
{
	EXTI_PR = extis;
 80011f0:	4b01      	ldr	r3, [pc, #4]	; (80011f8 <exti_reset_request+0x8>)
 80011f2:	6018      	str	r0, [r3, #0]
}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40010414 	.word	0x40010414

080011fc <flash_set_ws>:
@param[in] uint32_t ws: values from @ref flash_latency.
*/

void flash_set_ws(uint32_t ws)
{
	FLASH_ACR = (FLASH_ACR & ~FLASH_ACR_LATENCY) | ws;
 80011fc:	4a03      	ldr	r2, [pc, #12]	; (800120c <flash_set_ws+0x10>)
 80011fe:	6813      	ldr	r3, [r2, #0]
 8001200:	f023 0307 	bic.w	r3, r3, #7
 8001204:	4318      	orrs	r0, r3
 8001206:	6010      	str	r0, [r2, #0]
}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40022000 	.word	0x40022000

08001210 <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char **strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 8001210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001212:	4604      	mov	r4, r0
 8001214:	460f      	mov	r7, r1
 8001216:	4616      	mov	r6, r2
 8001218:	461d      	mov	r5, r3
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 800121a:	6803      	ldr	r3, [r0, #0]
 800121c:	4798      	blx	r3

	usbd_dev->driver = driver;
 800121e:	f8c0 40d8 	str.w	r4, [r0, #216]	; 0xd8
	usbd_dev->desc = dev;
 8001222:	6007      	str	r7, [r0, #0]
	usbd_dev->config = conf;
 8001224:	6046      	str	r6, [r0, #4]
	usbd_dev->strings = strings;
 8001226:	6085      	str	r5, [r0, #8]
	usbd_dev->num_strings = num_strings;
 8001228:	9b06      	ldr	r3, [sp, #24]
 800122a:	60c3      	str	r3, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 800122c:	9b07      	ldr	r3, [sp, #28]
 800122e:	6103      	str	r3, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 8001230:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8001234:	8283      	strh	r3, [r0, #20]

	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <usbd_init+0x4c>)
 8001238:	66c3      	str	r3, [r0, #108]	; 0x6c
	    _usbd_control_setup;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <usbd_init+0x50>)
 800123c:	6683      	str	r3, [r0, #104]	; 0x68
	    _usbd_control_out;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <usbd_init+0x54>)
 8001240:	6643      	str	r3, [r0, #100]	; 0x64
	    _usbd_control_in;

	int i;
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001242:	2300      	movs	r3, #0
 8001244:	e006      	b.n	8001254 <usbd_init+0x44>
		usbd_dev->user_callback_set_config[i] = NULL;
 8001246:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800124a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800124e:	2100      	movs	r1, #0
 8001250:	6051      	str	r1, [r2, #4]
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001252:	3301      	adds	r3, #1
 8001254:	2b03      	cmp	r3, #3
 8001256:	ddf6      	ble.n	8001246 <usbd_init+0x36>
	}

	return usbd_dev;
}
 8001258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800125a:	bf00      	nop
 800125c:	08001af1 	.word	0x08001af1
 8001260:	08001b3b 	.word	0x08001b3b
 8001264:	08001bc5 	.word	0x08001bc5

08001268 <_usbd_standard_request_device>:
/**@}*/

int _usbd_standard_request_device(usbd_device *usbd_dev,
				  struct usb_setup_data *req, uint8_t **buf,
				  uint16_t *len)
{
 8001268:	b510      	push	{r4, lr}
	int (*command)(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 800126a:	784c      	ldrb	r4, [r1, #1]
 800126c:	2c09      	cmp	r4, #9
 800126e:	d812      	bhi.n	8001296 <_usbd_standard_request_device+0x2e>
 8001270:	e8df f004 	tbb	[pc, r4]
 8001274:	1111110b 	.word	0x1111110b
 8001278:	11090511 	.word	0x11090511
 800127c:	0d07      	.short	0x0d07
	case USB_REQ_SET_ADDRESS:
		/*
		 * SET ADDRESS is an exception.
		 * It is only processed at STATUS stage.
		 */
		command = usb_standard_set_address;
 800127e:	4c08      	ldr	r4, [pc, #32]	; (80012a0 <_usbd_standard_request_device+0x38>)
 8001280:	e006      	b.n	8001290 <_usbd_standard_request_device+0x28>
		break;
	case USB_REQ_SET_CONFIGURATION:
		command = usb_standard_set_configuration;
		break;
	case USB_REQ_GET_CONFIGURATION:
		command = usb_standard_get_configuration;
 8001282:	4c08      	ldr	r4, [pc, #32]	; (80012a4 <_usbd_standard_request_device+0x3c>)
		break;
 8001284:	e004      	b.n	8001290 <_usbd_standard_request_device+0x28>
	case USB_REQ_GET_DESCRIPTOR:
		command = usb_standard_get_descriptor;
 8001286:	4c08      	ldr	r4, [pc, #32]	; (80012a8 <_usbd_standard_request_device+0x40>)
		break;
 8001288:	e002      	b.n	8001290 <_usbd_standard_request_device+0x28>
	case USB_REQ_GET_STATUS:
		/*
		 * GET_STATUS always responds with zero reply.
		 * The application may override this behaviour.
		 */
		command = usb_standard_device_get_status;
 800128a:	4c08      	ldr	r4, [pc, #32]	; (80012ac <_usbd_standard_request_device+0x44>)
		break;
 800128c:	e000      	b.n	8001290 <_usbd_standard_request_device+0x28>
		command = usb_standard_set_configuration;
 800128e:	4c08      	ldr	r4, [pc, #32]	; (80012b0 <_usbd_standard_request_device+0x48>)
	case USB_REQ_SET_DESCRIPTOR:
		/* SET_DESCRIPTOR is optional and not implemented. */
		break;
	}

	if (!command) {
 8001290:	b11c      	cbz	r4, 800129a <_usbd_standard_request_device+0x32>
		return 0;
	}

	return command(usbd_dev, req, buf, len);
 8001292:	47a0      	blx	r4
}
 8001294:	bd10      	pop	{r4, pc}
		return 0;
 8001296:	2000      	movs	r0, #0
 8001298:	e7fc      	b.n	8001294 <_usbd_standard_request_device+0x2c>
 800129a:	2000      	movs	r0, #0
 800129c:	e7fa      	b.n	8001294 <_usbd_standard_request_device+0x2c>
 800129e:	bf00      	nop
 80012a0:	08001c23 	.word	0x08001c23
 80012a4:	08001d0d 	.word	0x08001d0d
 80012a8:	08001faf 	.word	0x08001faf
 80012ac:	08001dc5 	.word	0x08001dc5
 80012b0:	08001c53 	.word	0x08001c53

080012b4 <_usbd_standard_request_interface>:

int _usbd_standard_request_interface(usbd_device *usbd_dev,
				     struct usb_setup_data *req, uint8_t **buf,
				     uint16_t *len)
{
 80012b4:	b510      	push	{r4, lr}
	int (*command)(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80012b6:	784c      	ldrb	r4, [r1, #1]
 80012b8:	2c0a      	cmp	r4, #10
 80012ba:	d004      	beq.n	80012c6 <_usbd_standard_request_interface+0x12>
 80012bc:	2c0b      	cmp	r4, #11
 80012be:	d008      	beq.n	80012d2 <_usbd_standard_request_interface+0x1e>
 80012c0:	b12c      	cbz	r4, 80012ce <_usbd_standard_request_interface+0x1a>
		command = usb_standard_interface_get_status;
		break;
	}

	if (!command) {
		return 0;
 80012c2:	2000      	movs	r0, #0
 80012c4:	e002      	b.n	80012cc <_usbd_standard_request_interface+0x18>
		command = usb_standard_get_interface;
 80012c6:	4c05      	ldr	r4, [pc, #20]	; (80012dc <_usbd_standard_request_interface+0x28>)
	if (!command) {
 80012c8:	b12c      	cbz	r4, 80012d6 <_usbd_standard_request_interface+0x22>
	}

	return command(usbd_dev, req, buf, len);
 80012ca:	47a0      	blx	r4
}
 80012cc:	bd10      	pop	{r4, pc}
		command = usb_standard_interface_get_status;
 80012ce:	4c04      	ldr	r4, [pc, #16]	; (80012e0 <_usbd_standard_request_interface+0x2c>)
		break;
 80012d0:	e7fa      	b.n	80012c8 <_usbd_standard_request_interface+0x14>
		command = usb_standard_set_interface;
 80012d2:	4c04      	ldr	r4, [pc, #16]	; (80012e4 <_usbd_standard_request_interface+0x30>)
 80012d4:	e7f8      	b.n	80012c8 <_usbd_standard_request_interface+0x14>
		return 0;
 80012d6:	2000      	movs	r0, #0
 80012d8:	e7f8      	b.n	80012cc <_usbd_standard_request_interface+0x18>
 80012da:	bf00      	nop
 80012dc:	08001d87 	.word	0x08001d87
 80012e0:	08001ddd 	.word	0x08001ddd
 80012e4:	08001d31 	.word	0x08001d31

080012e8 <_usbd_standard_request_endpoint>:

int _usbd_standard_request_endpoint(usbd_device *usbd_dev,
				    struct usb_setup_data *req, uint8_t **buf,
				    uint16_t *len)
{
 80012e8:	b510      	push	{r4, lr}
	int (*command) (usbd_device *usbd_dev, struct usb_setup_data *req,
			uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80012ea:	784c      	ldrb	r4, [r1, #1]
 80012ec:	2c01      	cmp	r4, #1
 80012ee:	d004      	beq.n	80012fa <_usbd_standard_request_endpoint+0x12>
 80012f0:	b16c      	cbz	r4, 800130e <_usbd_standard_request_endpoint+0x26>
 80012f2:	2c03      	cmp	r4, #3
 80012f4:	d007      	beq.n	8001306 <_usbd_standard_request_endpoint+0x1e>
		 */
		break;
	}

	if (!command) {
		return 0;
 80012f6:	2000      	movs	r0, #0
 80012f8:	e00c      	b.n	8001314 <_usbd_standard_request_endpoint+0x2c>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 80012fa:	884c      	ldrh	r4, [r1, #2]
 80012fc:	b90c      	cbnz	r4, 8001302 <_usbd_standard_request_endpoint+0x1a>
			command = usb_standard_endpoint_unstall;
 80012fe:	4c08      	ldr	r4, [pc, #32]	; (8001320 <_usbd_standard_request_endpoint+0x38>)
 8001300:	e006      	b.n	8001310 <_usbd_standard_request_endpoint+0x28>
		return 0;
 8001302:	2000      	movs	r0, #0
 8001304:	e006      	b.n	8001314 <_usbd_standard_request_endpoint+0x2c>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001306:	884c      	ldrh	r4, [r1, #2]
 8001308:	b92c      	cbnz	r4, 8001316 <_usbd_standard_request_endpoint+0x2e>
			command = usb_standard_endpoint_stall;
 800130a:	4c06      	ldr	r4, [pc, #24]	; (8001324 <_usbd_standard_request_endpoint+0x3c>)
 800130c:	e000      	b.n	8001310 <_usbd_standard_request_endpoint+0x28>
		command = usb_standard_endpoint_get_status;
 800130e:	4c06      	ldr	r4, [pc, #24]	; (8001328 <_usbd_standard_request_endpoint+0x40>)
	if (!command) {
 8001310:	b11c      	cbz	r4, 800131a <_usbd_standard_request_endpoint+0x32>
	}

	return command(usbd_dev, req, buf, len);
 8001312:	47a0      	blx	r4
}
 8001314:	bd10      	pop	{r4, pc}
		return 0;
 8001316:	2000      	movs	r0, #0
 8001318:	e7fc      	b.n	8001314 <_usbd_standard_request_endpoint+0x2c>
 800131a:	2000      	movs	r0, #0
 800131c:	e7fa      	b.n	8001314 <_usbd_standard_request_endpoint+0x2c>
 800131e:	bf00      	nop
 8001320:	080020cf 	.word	0x080020cf
 8001324:	080020bf 	.word	0x080020bf
 8001328:	08002095 	.word	0x08002095

0800132c <st_usbfs_v1_usbd_init>:
	.poll = st_usbfs_poll,
};

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *st_usbfs_v1_usbd_init(void)
{
 800132c:	b508      	push	{r3, lr}
	rcc_periph_clock_enable(RCC_USB);
 800132e:	f240 3097 	movw	r0, #919	; 0x397
 8001332:	f000 fab2 	bl	800189a <rcc_periph_clock_enable>
	SET_REG(USB_CNTR_REG, 0);
 8001336:	4a06      	ldr	r2, [pc, #24]	; (8001350 <st_usbfs_v1_usbd_init+0x24>)
 8001338:	2300      	movs	r3, #0
 800133a:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BTABLE_REG, 0);
 800133c:	4905      	ldr	r1, [pc, #20]	; (8001354 <st_usbfs_v1_usbd_init+0x28>)
 800133e:	600b      	str	r3, [r1, #0]
	SET_REG(USB_ISTR_REG, 0);
 8001340:	390c      	subs	r1, #12
 8001342:	600b      	str	r3, [r1, #0]

	/* Enable RESET, SUSPEND, RESUME and CTR interrupts. */
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 8001344:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 8001348:	6013      	str	r3, [r2, #0]
		USB_CNTR_SUSPM | USB_CNTR_WKUPM);
	return &st_usbfs_dev;
}
 800134a:	4803      	ldr	r0, [pc, #12]	; (8001358 <st_usbfs_v1_usbd_init+0x2c>)
 800134c:	bd08      	pop	{r3, pc}
 800134e:	bf00      	nop
 8001350:	40005c40 	.word	0x40005c40
 8001354:	40005c50 	.word	0x40005c50
 8001358:	20000764 	.word	0x20000764

0800135c <scb_reset_system>:
}
#endif

void scb_reset_system(void)
{
	SCB_AIRCR = SCB_AIRCR_VECTKEY | SCB_AIRCR_SYSRESETREQ;
 800135c:	4b01      	ldr	r3, [pc, #4]	; (8001364 <scb_reset_system+0x8>)
 800135e:	4a02      	ldr	r2, [pc, #8]	; (8001368 <scb_reset_system+0xc>)
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	e7fe      	b.n	8001362 <scb_reset_system+0x6>
 8001364:	e000ed0c 	.word	0xe000ed0c
 8001368:	05fa0004 	.word	0x05fa0004

0800136c <st_usbfs_set_address>:

void st_usbfs_set_address(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	/* Set device address and enable. */
	SET_REG(USB_DADDR_REG, (addr & USB_DADDR_ADDR) | USB_DADDR_EF);
 800136c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001370:	4b01      	ldr	r3, [pc, #4]	; (8001378 <st_usbfs_set_address+0xc>)
 8001372:	6019      	str	r1, [r3, #0]
}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40005c4c 	.word	0x40005c4c

0800137c <st_usbfs_set_ep_rx_bufsize>:
 * @param size Size in bytes of the RX buffer.
 */
void st_usbfs_set_ep_rx_bufsize(usbd_device *dev, uint8_t ep, uint32_t size)
{
	(void)dev;
	if (size > 62) {
 800137c:	2a3e      	cmp	r2, #62	; 0x3e
 800137e:	d915      	bls.n	80013ac <st_usbfs_set_ep_rx_bufsize+0x30>
		if (size & 0x1f) {
 8001380:	f012 0f1f 	tst.w	r2, #31
 8001384:	d000      	beq.n	8001388 <st_usbfs_set_ep_rx_bufsize+0xc>
			size -= 32;
 8001386:	3a20      	subs	r2, #32
		}
		USB_SET_EP_RX_COUNT(ep, (size << 5) | 0x8000);
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <st_usbfs_set_ep_rx_bufsize+0x58>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001392:	3306      	adds	r3, #6
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800139a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800139e:	ea6f 5282 	mvn.w	r2, r2, lsl #22
 80013a2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80013a6:	b292      	uxth	r2, r2
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	4770      	bx	lr
	} else {
		if (size & 1) {
 80013ac:	f012 0f01 	tst.w	r2, #1
 80013b0:	d000      	beq.n	80013b4 <st_usbfs_set_ep_rx_bufsize+0x38>
			size++;
 80013b2:	3201      	adds	r2, #1
		}
		USB_SET_EP_RX_COUNT(ep, size << 10);
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <st_usbfs_set_ep_rx_bufsize+0x58>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80013be:	3306      	adds	r3, #6
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013c6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80013ca:	4903      	ldr	r1, [pc, #12]	; (80013d8 <st_usbfs_set_ep_rx_bufsize+0x5c>)
 80013cc:	ea01 2282 	and.w	r2, r1, r2, lsl #10
 80013d0:	601a      	str	r2, [r3, #0]
	}
}
 80013d2:	4770      	bx	lr
 80013d4:	40005c50 	.word	0x40005c50
 80013d8:	03fffc00 	.word	0x03fffc00

080013dc <st_usbfs_ep_setup>:

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 80013dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	4684      	mov	ip, r0
 80013e4:	460c      	mov	r4, r1
 80013e6:	f8dd 8020 	ldr.w	r8, [sp, #32]
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 80013ea:	4952      	ldr	r1, [pc, #328]	; (8001534 <st_usbfs_ep_setup+0x158>)
 80013ec:	c903      	ldmia	r1, {r0, r1}
 80013ee:	ad02      	add	r5, sp, #8
 80013f0:	e905 0003 	stmdb	r5, {r0, r1}
		[USB_ENDPOINT_ATTR_ISOCHRONOUS] = USB_EP_TYPE_ISO,
		[USB_ENDPOINT_ATTR_BULK] = USB_EP_TYPE_BULK,
		[USB_ENDPOINT_ATTR_INTERRUPT] = USB_EP_TYPE_INTERRUPT,
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;
 80013f4:	f004 077f 	and.w	r7, r4, #127	; 0x7f

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 80013f8:	00be      	lsls	r6, r7, #2
 80013fa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80013fe:	f506 46b8 	add.w	r6, r6, #23552	; 0x5c00
 8001402:	6831      	ldr	r1, [r6, #0]
 8001404:	b209      	sxth	r1, r1
 8001406:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800140a:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800140e:	4339      	orrs	r1, r7
 8001410:	b289      	uxth	r1, r1
 8001412:	6031      	str	r1, [r6, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001414:	6831      	ldr	r1, [r6, #0]
 8001416:	f421 41ec 	bic.w	r1, r1, #30208	; 0x7600
 800141a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800141e:	0409      	lsls	r1, r1, #16
 8001420:	0c09      	lsrs	r1, r1, #16
 8001422:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001426:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 800142a:	4311      	orrs	r1, r2
 800142c:	6031      	str	r1, [r6, #0]
 800142e:	b262      	sxtb	r2, r4

	if (dir || (addr == 0)) {
 8001430:	2a00      	cmp	r2, #0
 8001432:	db01      	blt.n	8001438 <st_usbfs_ep_setup+0x5c>
 8001434:	2f00      	cmp	r7, #0
 8001436:	d138      	bne.n	80014aa <st_usbfs_ep_setup+0xce>
		USB_SET_EP_TX_ADDR(addr, dev->pm_top);
 8001438:	f8bc 0018 	ldrh.w	r0, [ip, #24]
 800143c:	493e      	ldr	r1, [pc, #248]	; (8001538 <st_usbfs_ep_setup+0x15c>)
 800143e:	6809      	ldr	r1, [r1, #0]
 8001440:	b289      	uxth	r1, r1
 8001442:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8001446:	0049      	lsls	r1, r1, #1
 8001448:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800144c:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
 8001450:	6008      	str	r0, [r1, #0]
		if (callback) {
 8001452:	f1b8 0f00 	cmp.w	r8, #0
 8001456:	d005      	beq.n	8001464 <st_usbfs_ep_setup+0x88>
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 8001458:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 800145c:	0081      	lsls	r1, r0, #2
 800145e:	4461      	add	r1, ip
 8001460:	f8c1 8064 	str.w	r8, [r1, #100]	; 0x64
			    (void *)callback;
		}
		USB_CLR_EP_TX_DTOG(addr);
 8001464:	6831      	ldr	r1, [r6, #0]
 8001466:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800146a:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800146e:	0409      	lsls	r1, r1, #16
 8001470:	0c09      	lsrs	r1, r1, #16
 8001472:	6031      	str	r1, [r6, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 8001474:	6835      	ldr	r5, [r6, #0]
 8001476:	b2ad      	uxth	r5, r5
 8001478:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
 800147c:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 8001480:	b2ad      	uxth	r5, r5
 8001482:	2401      	movs	r4, #1
 8001484:	e001      	b.n	800148a <st_usbfs_ep_setup+0xae>
 8001486:	0064      	lsls	r4, r4, #1
 8001488:	b2a4      	uxth	r4, r4
 800148a:	b124      	cbz	r4, 8001496 <st_usbfs_ep_setup+0xba>
 800148c:	f014 0f20 	tst.w	r4, #32
 8001490:	d0f9      	beq.n	8001486 <st_usbfs_ep_setup+0xaa>
 8001492:	4065      	eors	r5, r4
 8001494:	e7f7      	b.n	8001486 <st_usbfs_ep_setup+0xaa>
 8001496:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 800149a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800149e:	6035      	str	r5, [r6, #0]
		dev->pm_top += max_size;
 80014a0:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 80014a4:	4419      	add	r1, r3
 80014a6:	f8ac 1018 	strh.w	r1, [ip, #24]
	}

	if (!dir) {
 80014aa:	2a00      	cmp	r2, #0
 80014ac:	db3e      	blt.n	800152c <st_usbfs_ep_setup+0x150>
 80014ae:	461c      	mov	r4, r3
 80014b0:	4665      	mov	r5, ip
		USB_SET_EP_RX_ADDR(addr, dev->pm_top);
 80014b2:	f8bc 2018 	ldrh.w	r2, [ip, #24]
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <st_usbfs_ep_setup+0x15c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80014c0:	3304      	adds	r3, #4
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014c8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80014cc:	601a      	str	r2, [r3, #0]
		st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
 80014ce:	4622      	mov	r2, r4
 80014d0:	4639      	mov	r1, r7
 80014d2:	4660      	mov	r0, ip
 80014d4:	f7ff ff52 	bl	800137c <st_usbfs_set_ep_rx_bufsize>
		if (callback) {
 80014d8:	f1b8 0f00 	cmp.w	r8, #0
 80014dc:	d005      	beq.n	80014ea <st_usbfs_ep_setup+0x10e>
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 80014de:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80014e2:	00bb      	lsls	r3, r7, #2
 80014e4:	442b      	add	r3, r5
 80014e6:	f8c3 8068 	str.w	r8, [r3, #104]	; 0x68
			    (void *)callback;
		}
		USB_CLR_EP_RX_DTOG(addr);
 80014ea:	6833      	ldr	r3, [r6, #0]
 80014ec:	f423 5341 	bic.w	r3, r3, #12352	; 0x3040
 80014f0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80014f4:	041b      	lsls	r3, r3, #16
 80014f6:	0c1b      	lsrs	r3, r3, #16
 80014f8:	6033      	str	r3, [r6, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 80014fa:	6833      	ldr	r3, [r6, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001506:	b29b      	uxth	r3, r3
 8001508:	2201      	movs	r2, #1
 800150a:	e001      	b.n	8001510 <st_usbfs_ep_setup+0x134>
 800150c:	0052      	lsls	r2, r2, #1
 800150e:	b292      	uxth	r2, r2
 8001510:	b122      	cbz	r2, 800151c <st_usbfs_ep_setup+0x140>
 8001512:	f412 5f40 	tst.w	r2, #12288	; 0x3000
 8001516:	d0f9      	beq.n	800150c <st_usbfs_ep_setup+0x130>
 8001518:	4053      	eors	r3, r2
 800151a:	e7f7      	b.n	800150c <st_usbfs_ep_setup+0x130>
 800151c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001524:	6033      	str	r3, [r6, #0]
		dev->pm_top += max_size;
 8001526:	8b2b      	ldrh	r3, [r5, #24]
 8001528:	4423      	add	r3, r4
 800152a:	832b      	strh	r3, [r5, #24]
	}
}
 800152c:	b002      	add	sp, #8
 800152e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001532:	bf00      	nop
 8001534:	08004a58 	.word	0x08004a58
 8001538:	40005c50 	.word	0x40005c50

0800153c <st_usbfs_ep_nak_set>:

void st_usbfs_ep_nak_set(usbd_device *dev, uint8_t addr, uint8_t nak)
{
	(void)dev;
	/* It does not make sence to force NAK on IN endpoints. */
	if (addr & 0x80) {
 800153c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001540:	d139      	bne.n	80015b6 <st_usbfs_ep_nak_set+0x7a>
		return;
	}

	st_usbfs_force_nak[addr] = nak;
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <st_usbfs_ep_nak_set+0x7c>)
 8001544:	545a      	strb	r2, [r3, r1]

	if (nak) {
 8001546:	b1da      	cbz	r2, 8001580 <st_usbfs_ep_nak_set+0x44>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 8001548:	0089      	lsls	r1, r1, #2
 800154a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800154e:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001552:	680a      	ldr	r2, [r1, #0]
 8001554:	b292      	uxth	r2, r2
 8001556:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800155a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800155e:	b292      	uxth	r2, r2
 8001560:	2301      	movs	r3, #1
 8001562:	e001      	b.n	8001568 <st_usbfs_ep_nak_set+0x2c>
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	b29b      	uxth	r3, r3
 8001568:	b123      	cbz	r3, 8001574 <st_usbfs_ep_nak_set+0x38>
 800156a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800156e:	d0f9      	beq.n	8001564 <st_usbfs_ep_nak_set+0x28>
 8001570:	405a      	eors	r2, r3
 8001572:	e7f7      	b.n	8001564 <st_usbfs_ep_nak_set+0x28>
 8001574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001578:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800157c:	600a      	str	r2, [r1, #0]
 800157e:	4770      	bx	lr
	} else {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001580:	0089      	lsls	r1, r1, #2
 8001582:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001586:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800158a:	680a      	ldr	r2, [r1, #0]
 800158c:	b292      	uxth	r2, r2
 800158e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001592:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001596:	b292      	uxth	r2, r2
 8001598:	2301      	movs	r3, #1
 800159a:	e001      	b.n	80015a0 <st_usbfs_ep_nak_set+0x64>
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	b29b      	uxth	r3, r3
 80015a0:	b123      	cbz	r3, 80015ac <st_usbfs_ep_nak_set+0x70>
 80015a2:	f413 5f40 	tst.w	r3, #12288	; 0x3000
 80015a6:	d0f9      	beq.n	800159c <st_usbfs_ep_nak_set+0x60>
 80015a8:	405a      	eors	r2, r3
 80015aa:	e7f7      	b.n	800159c <st_usbfs_ep_nak_set+0x60>
 80015ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015b4:	600a      	str	r2, [r1, #0]
	}
}
 80015b6:	4770      	bx	lr
 80015b8:	2000075c 	.word	0x2000075c

080015bc <st_usbfs_ep_write_packet>:

uint16_t st_usbfs_ep_write_packet(usbd_device *dev, uint8_t addr,
				     const void *buf, uint16_t len)
{
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)dev;
	addr &= 0x7F;
 80015be:	f001 067f 	and.w	r6, r1, #127	; 0x7f

	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 80015c2:	00b4      	lsls	r4, r6, #2
 80015c4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80015c8:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 80015cc:	6827      	ldr	r7, [r4, #0]
 80015ce:	f007 0730 	and.w	r7, r7, #48	; 0x30
 80015d2:	2f30      	cmp	r7, #48	; 0x30
 80015d4:	d036      	beq.n	8001644 <st_usbfs_ep_write_packet+0x88>
 80015d6:	461d      	mov	r5, r3
 80015d8:	4611      	mov	r1, r2
		return 0;
	}

	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
 80015da:	4f1b      	ldr	r7, [pc, #108]	; (8001648 <st_usbfs_ep_write_packet+0x8c>)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	00f6      	lsls	r6, r6, #3
 80015e2:	4433      	add	r3, r6
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015ea:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80015ee:	8818      	ldrh	r0, [r3, #0]
 80015f0:	0040      	lsls	r0, r0, #1
 80015f2:	462a      	mov	r2, r5
 80015f4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80015f8:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 80015fc:	f000 fd9c 	bl	8002138 <st_usbfs_copy_to_pm>
	USB_SET_EP_TX_COUNT(addr, len);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	4433      	add	r3, r6
 8001606:	3302      	adds	r3, #2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800160e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001612:	601d      	str	r5, [r3, #0]
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8001614:	6821      	ldr	r1, [r4, #0]
 8001616:	b289      	uxth	r1, r1
 8001618:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800161c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001620:	b289      	uxth	r1, r1
 8001622:	2201      	movs	r2, #1
 8001624:	e001      	b.n	800162a <st_usbfs_ep_write_packet+0x6e>
 8001626:	0052      	lsls	r2, r2, #1
 8001628:	b292      	uxth	r2, r2
 800162a:	b122      	cbz	r2, 8001636 <st_usbfs_ep_write_packet+0x7a>
 800162c:	f012 0f30 	tst.w	r2, #48	; 0x30
 8001630:	d0f9      	beq.n	8001626 <st_usbfs_ep_write_packet+0x6a>
 8001632:	4051      	eors	r1, r2
 8001634:	e7f7      	b.n	8001626 <st_usbfs_ep_write_packet+0x6a>
 8001636:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800163a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800163e:	6021      	str	r1, [r4, #0]

	return len;
 8001640:	4628      	mov	r0, r5
}
 8001642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 8001644:	2000      	movs	r0, #0
 8001646:	e7fc      	b.n	8001642 <st_usbfs_ep_write_packet+0x86>
 8001648:	40005c50 	.word	0x40005c50

0800164c <st_usbfs_ep_read_packet>:

uint16_t st_usbfs_ep_read_packet(usbd_device *dev, uint8_t addr,
					 void *buf, uint16_t len)
{
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 800164e:	008c      	lsls	r4, r1, #2
 8001650:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001654:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001658:	6820      	ldr	r0, [r4, #0]
 800165a:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
 800165e:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
 8001662:	d056      	beq.n	8001712 <st_usbfs_ep_read_packet+0xc6>
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 8001664:	482c      	ldr	r0, [pc, #176]	; (8001718 <st_usbfs_ep_read_packet+0xcc>)
 8001666:	6806      	ldr	r6, [r0, #0]
 8001668:	b2b6      	uxth	r6, r6
 800166a:	00cf      	lsls	r7, r1, #3
 800166c:	443e      	add	r6, r7
 800166e:	3606      	adds	r6, #6
 8001670:	0076      	lsls	r6, r6, #1
 8001672:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001676:	f506 46c0 	add.w	r6, r6, #24576	; 0x6000
 800167a:	8830      	ldrh	r0, [r6, #0]
 800167c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8001680:	4298      	cmp	r0, r3
 8001682:	da0d      	bge.n	80016a0 <st_usbfs_ep_read_packet+0x54>
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <st_usbfs_ep_read_packet+0xcc>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	b29b      	uxth	r3, r3
 800168a:	443b      	add	r3, r7
 800168c:	3306      	adds	r3, #6
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001694:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001698:	881d      	ldrh	r5, [r3, #0]
 800169a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800169e:	e000      	b.n	80016a2 <st_usbfs_ep_read_packet+0x56>
 80016a0:	461d      	mov	r5, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	460e      	mov	r6, r1
	st_usbfs_copy_from_pm(buf, USB_GET_EP_RX_BUFF(addr), len);
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <st_usbfs_ep_read_packet+0xcc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	443b      	add	r3, r7
 80016ae:	3304      	adds	r3, #4
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016b6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80016ba:	8819      	ldrh	r1, [r3, #0]
 80016bc:	0049      	lsls	r1, r1, #1
 80016be:	462a      	mov	r2, r5
 80016c0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80016c4:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
 80016c8:	f000 fd42 	bl	8002150 <st_usbfs_copy_from_pm>
	USB_CLR_EP_RX_CTR(addr);
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016d2:	051b      	lsls	r3, r3, #20
 80016d4:	0d1b      	lsrs	r3, r3, #20
 80016d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016da:	6023      	str	r3, [r4, #0]

	if (!st_usbfs_force_nak[addr]) {
 80016dc:	4b0f      	ldr	r3, [pc, #60]	; (800171c <st_usbfs_ep_read_packet+0xd0>)
 80016de:	5d9b      	ldrb	r3, [r3, r6]
 80016e0:	b9ab      	cbnz	r3, 800170e <st_usbfs_ep_read_packet+0xc2>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 80016e2:	6821      	ldr	r1, [r4, #0]
 80016e4:	b289      	uxth	r1, r1
 80016e6:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 80016ea:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80016ee:	b289      	uxth	r1, r1
 80016f0:	2201      	movs	r2, #1
 80016f2:	e001      	b.n	80016f8 <st_usbfs_ep_read_packet+0xac>
 80016f4:	0052      	lsls	r2, r2, #1
 80016f6:	b292      	uxth	r2, r2
 80016f8:	b122      	cbz	r2, 8001704 <st_usbfs_ep_read_packet+0xb8>
 80016fa:	f412 5f40 	tst.w	r2, #12288	; 0x3000
 80016fe:	d0f9      	beq.n	80016f4 <st_usbfs_ep_read_packet+0xa8>
 8001700:	4051      	eors	r1, r2
 8001702:	e7f7      	b.n	80016f4 <st_usbfs_ep_read_packet+0xa8>
 8001704:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001708:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800170c:	6021      	str	r1, [r4, #0]
	}

	return len;
}
 800170e:	4628      	mov	r0, r5
 8001710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 8001712:	2500      	movs	r5, #0
 8001714:	e7fb      	b.n	800170e <st_usbfs_ep_read_packet+0xc2>
 8001716:	bf00      	nop
 8001718:	40005c50 	.word	0x40005c50
 800171c:	2000075c 	.word	0x2000075c

08001720 <st_usbfs_poll>:

void st_usbfs_poll(usbd_device *dev)
{
 8001720:	b538      	push	{r3, r4, r5, lr}
 8001722:	4605      	mov	r5, r0
	uint16_t istr = *USB_ISTR_REG;
 8001724:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <st_usbfs_poll+0xf4>)
 8001726:	6819      	ldr	r1, [r3, #0]

	if (istr & USB_ISTR_RESET) {
 8001728:	b28c      	uxth	r4, r1
 800172a:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800172e:	d129      	bne.n	8001784 <st_usbfs_poll+0x64>
		dev->pm_top = USBD_PM_TOP;
		_usbd_reset(dev);
		return;
	}

	if (istr & USB_ISTR_CTR) {
 8001730:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8001734:	d12e      	bne.n	8001794 <st_usbfs_poll+0x74>
		} else {
			USB_CLR_EP_RX_CTR(ep);
		}
	}

	if (istr & USB_ISTR_SUSP) {
 8001736:	f414 6f00 	tst.w	r4, #2048	; 0x800
 800173a:	d006      	beq.n	800174a <st_usbfs_poll+0x2a>
		USB_CLR_ISTR_SUSP();
 800173c:	4b35      	ldr	r3, [pc, #212]	; (8001814 <st_usbfs_poll+0xf4>)
 800173e:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 8001742:	601a      	str	r2, [r3, #0]
		if (dev->user_callback_suspend) {
 8001744:	6a2b      	ldr	r3, [r5, #32]
 8001746:	b103      	cbz	r3, 800174a <st_usbfs_poll+0x2a>
			dev->user_callback_suspend();
 8001748:	4798      	blx	r3
		}
	}

	if (istr & USB_ISTR_WKUP) {
 800174a:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 800174e:	d006      	beq.n	800175e <st_usbfs_poll+0x3e>
		USB_CLR_ISTR_WKUP();
 8001750:	4b30      	ldr	r3, [pc, #192]	; (8001814 <st_usbfs_poll+0xf4>)
 8001752:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8001756:	601a      	str	r2, [r3, #0]
		if (dev->user_callback_resume) {
 8001758:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800175a:	b103      	cbz	r3, 800175e <st_usbfs_poll+0x3e>
			dev->user_callback_resume();
 800175c:	4798      	blx	r3
		}
	}

	if (istr & USB_ISTR_SOF) {
 800175e:	f414 7f00 	tst.w	r4, #512	; 0x200
 8001762:	d006      	beq.n	8001772 <st_usbfs_poll+0x52>
		USB_CLR_ISTR_SOF();
 8001764:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <st_usbfs_poll+0xf4>)
 8001766:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 800176a:	601a      	str	r2, [r3, #0]
		if (dev->user_callback_sof) {
 800176c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800176e:	b103      	cbz	r3, 8001772 <st_usbfs_poll+0x52>
			dev->user_callback_sof();
 8001770:	4798      	blx	r3
		}
	}

	if (dev->user_callback_sof) {
 8001772:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001774:	2b00      	cmp	r3, #0
 8001776:	d046      	beq.n	8001806 <st_usbfs_poll+0xe6>
		*USB_CNTR_REG |= USB_CNTR_SOFM;
 8001778:	4a27      	ldr	r2, [pc, #156]	; (8001818 <st_usbfs_poll+0xf8>)
 800177a:	6813      	ldr	r3, [r2, #0]
 800177c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001780:	6013      	str	r3, [r2, #0]
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
	}
}
 8001782:	bd38      	pop	{r3, r4, r5, pc}
		USB_CLR_ISTR_RESET();
 8001784:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 8001788:	601a      	str	r2, [r3, #0]
		dev->pm_top = USBD_PM_TOP;
 800178a:	2340      	movs	r3, #64	; 0x40
 800178c:	8303      	strh	r3, [r0, #24]
		_usbd_reset(dev);
 800178e:	f000 f8b5 	bl	80018fc <_usbd_reset>
		return;
 8001792:	e7f6      	b.n	8001782 <st_usbfs_poll+0x62>
		uint8_t ep = istr & USB_ISTR_EP_ID;
 8001794:	f001 010f 	and.w	r1, r1, #15
		if (istr & USB_ISTR_DIR) {
 8001798:	f014 0f10 	tst.w	r4, #16
 800179c:	d00a      	beq.n	80017b4 <st_usbfs_poll+0x94>
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 800179e:	008b      	lsls	r3, r1, #2
 80017a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017a4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80017ae:	d01a      	beq.n	80017e6 <st_usbfs_poll+0xc6>
				type = USB_TRANSACTION_SETUP;
 80017b0:	2202      	movs	r2, #2
 80017b2:	e00d      	b.n	80017d0 <st_usbfs_poll+0xb0>
			USB_CLR_EP_TX_CTR(ep);
 80017b4:	008b      	lsls	r3, r1, #2
 80017b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017ba:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80017c4:	0512      	lsls	r2, r2, #20
 80017c6:	0d12      	lsrs	r2, r2, #20
 80017c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017cc:	601a      	str	r2, [r3, #0]
			type = USB_TRANSACTION_IN;
 80017ce:	2200      	movs	r2, #0
		if (dev->user_callback_ctr[ep][type]) {
 80017d0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80017d4:	4413      	add	r3, r2
 80017d6:	3318      	adds	r3, #24
 80017d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	b123      	cbz	r3, 80017ea <st_usbfs_poll+0xca>
			dev->user_callback_ctr[ep][type] (dev, ep);
 80017e0:	4628      	mov	r0, r5
 80017e2:	4798      	blx	r3
 80017e4:	e7a7      	b.n	8001736 <st_usbfs_poll+0x16>
				type = USB_TRANSACTION_OUT;
 80017e6:	2201      	movs	r2, #1
 80017e8:	e7f2      	b.n	80017d0 <st_usbfs_poll+0xb0>
			USB_CLR_EP_RX_CTR(ep);
 80017ea:	0089      	lsls	r1, r1, #2
 80017ec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80017f0:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80017f4:	680b      	ldr	r3, [r1, #0]
 80017f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017fa:	051b      	lsls	r3, r3, #20
 80017fc:	0d1b      	lsrs	r3, r3, #20
 80017fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001802:	600b      	str	r3, [r1, #0]
 8001804:	e797      	b.n	8001736 <st_usbfs_poll+0x16>
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <st_usbfs_poll+0xf8>)
 8001808:	6813      	ldr	r3, [r2, #0]
 800180a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e7b7      	b.n	8001782 <st_usbfs_poll+0x62>
 8001812:	bf00      	nop
 8001814:	40005c44 	.word	0x40005c44
 8001818:	40005c40 	.word	0x40005c40

0800181c <gpio_set_mode>:
	     If multiple pins are to be set, use logical OR '|' to separate
	     them.
*/

void gpio_set_mode(uint32_t gpioport, uint8_t mode, uint8_t cnf, uint16_t gpios)
{
 800181c:	b5f0      	push	{r4, r5, r6, r7, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	crl = GPIO_CRL(gpioport);
 800181e:	6807      	ldr	r7, [r0, #0]
	crh = GPIO_CRH(gpioport);
 8001820:	6846      	ldr	r6, [r0, #4]

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 8001822:	2400      	movs	r4, #0
 8001824:	e009      	b.n	800183a <gpio_set_mode+0x1e>
		if (!((1 << i) & gpios)) {
			continue;
		}

		/* Calculate bit offset. */
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 8001826:	f504 557f 	add.w	r5, r4, #16320	; 0x3fc0
 800182a:	3538      	adds	r5, #56	; 0x38
 800182c:	00ad      	lsls	r5, r5, #2
 800182e:	b2ad      	uxth	r5, r5
 8001830:	e00e      	b.n	8001850 <gpio_set_mode+0x34>

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;
 8001832:	46b6      	mov	lr, r6
 8001834:	e00f      	b.n	8001856 <gpio_set_mode+0x3a>
	for (i = 0; i < 16; i++) {
 8001836:	3401      	adds	r4, #1
 8001838:	b2a4      	uxth	r4, r4
 800183a:	2c0f      	cmp	r4, #15
 800183c:	d821      	bhi.n	8001882 <gpio_set_mode+0x66>
		if (!((1 << i) & gpios)) {
 800183e:	fa43 f504 	asr.w	r5, r3, r4
 8001842:	f015 0f01 	tst.w	r5, #1
 8001846:	d0f6      	beq.n	8001836 <gpio_set_mode+0x1a>
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 8001848:	2c07      	cmp	r4, #7
 800184a:	d8ec      	bhi.n	8001826 <gpio_set_mode+0xa>
 800184c:	00a5      	lsls	r5, r4, #2
 800184e:	b2ad      	uxth	r5, r5
		tmp32 = (i < 8) ? crl : crh;
 8001850:	2c07      	cmp	r4, #7
 8001852:	d8ee      	bhi.n	8001832 <gpio_set_mode+0x16>
 8001854:	46be      	mov	lr, r7

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 8001856:	f04f 0c0f 	mov.w	ip, #15
 800185a:	fa0c fc05 	lsl.w	ip, ip, r5
 800185e:	ea2e 0e0c 	bic.w	lr, lr, ip
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 8001862:	fa01 fc05 	lsl.w	ip, r1, r5
 8001866:	3502      	adds	r5, #2
 8001868:	fa02 f505 	lsl.w	r5, r2, r5
 800186c:	ea4c 0505 	orr.w	r5, ip, r5
 8001870:	ea45 050e 	orr.w	r5, r5, lr

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 8001874:	2c07      	cmp	r4, #7
 8001876:	d800      	bhi.n	800187a <gpio_set_mode+0x5e>
 8001878:	462f      	mov	r7, r5
		crh = (i >= 8) ? tmp32 : crh;
 800187a:	2c07      	cmp	r4, #7
 800187c:	d9db      	bls.n	8001836 <gpio_set_mode+0x1a>
 800187e:	462e      	mov	r6, r5
 8001880:	e7d9      	b.n	8001836 <gpio_set_mode+0x1a>
	}

	GPIO_CRL(gpioport) = crl;
 8001882:	6007      	str	r7, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 8001884:	6046      	str	r6, [r0, #4]
}
 8001886:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001888 <gpio_set>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8001888:	6101      	str	r1, [r0, #16]
}
 800188a:	4770      	bx	lr

0800188c <gpio_clear>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 800188c:	0409      	lsls	r1, r1, #16
 800188e:	6101      	str	r1, [r0, #16]
}
 8001890:	4770      	bx	lr

08001892 <usart_recv>:
*/

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_DR(usart) & USART_DR_MASK;
 8001892:	6840      	ldr	r0, [r0, #4]
}
 8001894:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001898:	4770      	bx	lr

0800189a <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 800189a:	0943      	lsrs	r3, r0, #5
 800189c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	f000 001f 	and.w	r0, r0, #31
 80018aa:	2101      	movs	r1, #1
 80018ac:	fa01 f000 	lsl.w	r0, r1, r0
 80018b0:	4310      	orrs	r0, r2
 80018b2:	6018      	str	r0, [r3, #0]
}
 80018b4:	4770      	bx	lr

080018b6 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 80018b6:	0943      	lsrs	r3, r0, #5
 80018b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018bc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80018c0:	6819      	ldr	r1, [r3, #0]
 80018c2:	f000 021f 	and.w	r2, r0, #31
 80018c6:	2001      	movs	r0, #1
 80018c8:	4090      	lsls	r0, r2
 80018ca:	4301      	orrs	r1, r0
 80018cc:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	ea22 0000 	bic.w	r0, r2, r0
 80018d4:	6018      	str	r0, [r3, #0]
}
 80018d6:	4770      	bx	lr

080018d8 <usbd_register_sof_callback>:
	usbd_dev->user_callback_resume = callback;
}

void usbd_register_sof_callback(usbd_device *usbd_dev, void (*callback)(void))
{
	usbd_dev->user_callback_sof = callback;
 80018d8:	6281      	str	r1, [r0, #40]	; 0x28
}
 80018da:	4770      	bx	lr

080018dc <usbd_poll>:
	}
}

/* Functions to wrap the low-level driver */
void usbd_poll(usbd_device *usbd_dev)
{
 80018dc:	b508      	push	{r3, lr}
	usbd_dev->driver->poll(usbd_dev);
 80018de:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	4798      	blx	r3
}
 80018e6:	bd08      	pop	{r3, pc}

080018e8 <usbd_ep_setup>:
	}
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
 80018e8:	b530      	push	{r4, r5, lr}
 80018ea:	b083      	sub	sp, #12
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 80018ec:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
 80018f0:	68a4      	ldr	r4, [r4, #8]
 80018f2:	9d06      	ldr	r5, [sp, #24]
 80018f4:	9500      	str	r5, [sp, #0]
 80018f6:	47a0      	blx	r4
}
 80018f8:	b003      	add	sp, #12
 80018fa:	bd30      	pop	{r4, r5, pc}

080018fc <_usbd_reset>:
{
 80018fc:	b530      	push	{r4, r5, lr}
 80018fe:	b083      	sub	sp, #12
 8001900:	4604      	mov	r4, r0
	usbd_dev->current_address = 0;
 8001902:	2500      	movs	r5, #0
 8001904:	7585      	strb	r5, [r0, #22]
	usbd_dev->current_config = 0;
 8001906:	75c5      	strb	r5, [r0, #23]
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 8001908:	6803      	ldr	r3, [r0, #0]
 800190a:	79db      	ldrb	r3, [r3, #7]
 800190c:	9500      	str	r5, [sp, #0]
 800190e:	462a      	mov	r2, r5
 8001910:	4629      	mov	r1, r5
 8001912:	f7ff ffe9 	bl	80018e8 <usbd_ep_setup>
	usbd_dev->driver->set_address(usbd_dev, 0);
 8001916:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	4629      	mov	r1, r5
 800191e:	4620      	mov	r0, r4
 8001920:	4798      	blx	r3
	if (usbd_dev->user_callback_reset) {
 8001922:	69e3      	ldr	r3, [r4, #28]
 8001924:	b103      	cbz	r3, 8001928 <_usbd_reset+0x2c>
		usbd_dev->user_callback_reset();
 8001926:	4798      	blx	r3
}
 8001928:	b003      	add	sp, #12
 800192a:	bd30      	pop	{r4, r5, pc}

0800192c <usbd_ep_write_packet>:

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 800192c:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 800192e:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
 8001932:	69e4      	ldr	r4, [r4, #28]
 8001934:	47a0      	blx	r4
}
 8001936:	bd10      	pop	{r4, pc}

08001938 <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 8001938:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 800193a:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
 800193e:	6a24      	ldr	r4, [r4, #32]
 8001940:	47a0      	blx	r4
}
 8001942:	bd10      	pop	{r4, pc}

08001944 <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
 8001944:	b508      	push	{r3, lr}
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 8001946:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	4798      	blx	r3
}
 800194e:	bd08      	pop	{r3, pc}

08001950 <usbd_ep_stall_get>:

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
 8001950:	b508      	push	{r3, lr}
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 8001952:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4798      	blx	r3
}
 800195a:	bd08      	pop	{r3, pc}

0800195c <stall_transaction>:
 * According to the USB 2.0 specification, section 8.5.3, when a control
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
 800195c:	b510      	push	{r4, lr}
 800195e:	4604      	mov	r4, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 8001960:	2201      	movs	r2, #1
 8001962:	2100      	movs	r1, #0
 8001964:	f7ff ffee 	bl	8001944 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 8001968:	2300      	movs	r3, #0
 800196a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800196e:	bd10      	pop	{r4, pc}

08001970 <usb_control_setup_write>:
	}
}

static void usb_control_setup_write(usbd_device *usbd_dev,
				    struct usb_setup_data *req)
{
 8001970:	b508      	push	{r3, lr}
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 8001972:	88ca      	ldrh	r2, [r1, #6]
 8001974:	8a83      	ldrh	r3, [r0, #20]
 8001976:	429a      	cmp	r2, r3
 8001978:	d80c      	bhi.n	8001994 <usb_control_setup_write+0x24>
		stall_transaction(usbd_dev);
		return;
	}

	/* Buffer into which to write received data. */
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 800197a:	6903      	ldr	r3, [r0, #16]
 800197c:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	8783      	strh	r3, [r0, #60]	; 0x3c
	/* Wait for DATA OUT stage. */
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 8001982:	88ca      	ldrh	r2, [r1, #6]
 8001984:	6803      	ldr	r3, [r0, #0]
 8001986:	79db      	ldrb	r3, [r3, #7]
 8001988:	429a      	cmp	r2, r3
 800198a:	d806      	bhi.n	800199a <usb_control_setup_write+0x2a>
		usbd_dev->control_state.state = DATA_OUT;
	} else {
		usbd_dev->control_state.state = LAST_DATA_OUT;
 800198c:	2306      	movs	r3, #6
 800198e:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	}
}
 8001992:	bd08      	pop	{r3, pc}
		stall_transaction(usbd_dev);
 8001994:	f7ff ffe2 	bl	800195c <stall_transaction>
		return;
 8001998:	e7fb      	b.n	8001992 <usb_control_setup_write+0x22>
		usbd_dev->control_state.state = DATA_OUT;
 800199a:	2305      	movs	r3, #5
 800199c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80019a0:	e7f7      	b.n	8001992 <usb_control_setup_write+0x22>

080019a2 <usb_control_recv_chunk>:
{
 80019a2:	b570      	push	{r4, r5, r6, lr}
 80019a4:	4605      	mov	r5, r0
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 80019a6:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 80019a8:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 80019aa:	1aa4      	subs	r4, r4, r2
 80019ac:	6803      	ldr	r3, [r0, #0]
 80019ae:	79db      	ldrb	r3, [r3, #7]
 80019b0:	429c      	cmp	r4, r3
 80019b2:	bfa8      	it	ge
 80019b4:	461c      	movge	r4, r3
 80019b6:	b2a6      	uxth	r6, r4
				       usbd_dev->control_state.ctrl_buf +
 80019b8:	6b81      	ldr	r1, [r0, #56]	; 0x38
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 80019ba:	4633      	mov	r3, r6
 80019bc:	440a      	add	r2, r1
 80019be:	2100      	movs	r1, #0
 80019c0:	f7ff ffba 	bl	8001938 <usbd_ep_read_packet>
	if (size != packetsize) {
 80019c4:	4286      	cmp	r6, r0
 80019c6:	d104      	bne.n	80019d2 <usb_control_recv_chunk+0x30>
	usbd_dev->control_state.ctrl_len += size;
 80019c8:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 80019ca:	4418      	add	r0, r3
 80019cc:	87a8      	strh	r0, [r5, #60]	; 0x3c
 80019ce:	b2a0      	uxth	r0, r4
}
 80019d0:	bd70      	pop	{r4, r5, r6, pc}
		stall_transaction(usbd_dev);
 80019d2:	4628      	mov	r0, r5
 80019d4:	f7ff ffc2 	bl	800195c <stall_transaction>
		return -1;
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019dc:	e7f8      	b.n	80019d0 <usb_control_recv_chunk+0x2e>

080019de <usb_control_send_chunk>:
{
 80019de:	b510      	push	{r4, lr}
 80019e0:	4604      	mov	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 80019e2:	6803      	ldr	r3, [r0, #0]
 80019e4:	79da      	ldrb	r2, [r3, #7]
			usbd_dev->control_state.ctrl_len) {
 80019e6:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
	if (usbd_dev->desc->bMaxPacketSize0 <
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d30a      	bcc.n	8001a02 <usb_control_send_chunk+0x24>
		usbd_ep_write_packet(usbd_dev, 0,
 80019ec:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80019ee:	2100      	movs	r1, #0
 80019f0:	f7ff ff9c 	bl	800192c <usbd_ep_write_packet>
		usbd_dev->control_state.state = LAST_DATA_IN;
 80019f4:	2303      	movs	r3, #3
 80019f6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_len = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	87a3      	strh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf = NULL;
 80019fe:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001a00:	bd10      	pop	{r4, pc}
		usbd_ep_write_packet(usbd_dev, 0,
 8001a02:	4613      	mov	r3, r2
 8001a04:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001a06:	2100      	movs	r1, #0
 8001a08:	f7ff ff90 	bl	800192c <usbd_ep_write_packet>
		usbd_dev->control_state.state = DATA_IN;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			usbd_dev->desc->bMaxPacketSize0;
 8001a12:	6822      	ldr	r2, [r4, #0]
 8001a14:	79d1      	ldrb	r1, [r2, #7]
		usbd_dev->control_state.ctrl_buf +=
 8001a16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a18:	440b      	add	r3, r1
 8001a1a:	63a3      	str	r3, [r4, #56]	; 0x38
			usbd_dev->desc->bMaxPacketSize0;
 8001a1c:	79d2      	ldrb	r2, [r2, #7]
		usbd_dev->control_state.ctrl_len -=
 8001a1e:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8001a20:	1a9b      	subs	r3, r3, r2
 8001a22:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8001a24:	e7ec      	b.n	8001a00 <usb_control_send_chunk+0x22>

08001a26 <usb_control_request_dispatch>:
{
 8001a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	4605      	mov	r5, r0
 8001a2e:	4688      	mov	r8, r1
	struct user_control_callback *cb = usbd_dev->user_control_callback;
 8001a30:	f100 0744 	add.w	r7, r0, #68	; 0x44
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001a34:	2400      	movs	r4, #0
 8001a36:	e000      	b.n	8001a3a <usb_control_request_dispatch+0x14>
 8001a38:	3401      	adds	r4, #1
 8001a3a:	2c03      	cmp	r4, #3
 8001a3c:	dc18      	bgt.n	8001a70 <usb_control_request_dispatch+0x4a>
		if (cb[i].cb == NULL) {
 8001a3e:	eb07 02c4 	add.w	r2, r7, r4, lsl #3
 8001a42:	f857 6034 	ldr.w	r6, [r7, r4, lsl #3]
 8001a46:	b19e      	cbz	r6, 8001a70 <usb_control_request_dispatch+0x4a>
		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 8001a48:	f898 3000 	ldrb.w	r3, [r8]
 8001a4c:	7951      	ldrb	r1, [r2, #5]
 8001a4e:	400b      	ands	r3, r1
 8001a50:	7912      	ldrb	r2, [r2, #4]
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d1f0      	bne.n	8001a38 <usb_control_request_dispatch+0x12>
			result = cb[i].cb(usbd_dev, req,
 8001a56:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8001a60:	f105 0238 	add.w	r2, r5, #56	; 0x38
 8001a64:	4641      	mov	r1, r8
 8001a66:	4628      	mov	r0, r5
 8001a68:	47b0      	blx	r6
			if (result == USBD_REQ_HANDLED ||
 8001a6a:	2801      	cmp	r0, #1
 8001a6c:	d8e4      	bhi.n	8001a38 <usb_control_request_dispatch+0x12>
 8001a6e:	e007      	b.n	8001a80 <usb_control_request_dispatch+0x5a>
	return _usbd_standard_request(usbd_dev, req,
 8001a70:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8001a74:	f105 0238 	add.w	r2, r5, #56	; 0x38
 8001a78:	4641      	mov	r1, r8
 8001a7a:	4628      	mov	r0, r5
 8001a7c:	f000 fb43 	bl	8002106 <_usbd_standard_request>
}
 8001a80:	b002      	add	sp, #8
 8001a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001a86 <usb_control_setup_read>:
{
 8001a86:	b510      	push	{r4, lr}
 8001a88:	4604      	mov	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 8001a8a:	6903      	ldr	r3, [r0, #16]
 8001a8c:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 8001a8e:	88cb      	ldrh	r3, [r1, #6]
 8001a90:	8783      	strh	r3, [r0, #60]	; 0x3c
	if (usb_control_request_dispatch(usbd_dev, req)) {
 8001a92:	f7ff ffc8 	bl	8001a26 <usb_control_request_dispatch>
 8001a96:	b178      	cbz	r0, 8001ab8 <usb_control_setup_read+0x32>
		if (usbd_dev->control_state.ctrl_len) {
 8001a98:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8001a9a:	b11b      	cbz	r3, 8001aa4 <usb_control_setup_read+0x1e>
			usb_control_send_chunk(usbd_dev);
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f7ff ff9e 	bl	80019de <usb_control_send_chunk>
}
 8001aa2:	bd10      	pop	{r4, pc}
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff ff3e 	bl	800192c <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001ab6:	e7f4      	b.n	8001aa2 <usb_control_setup_read+0x1c>
		stall_transaction(usbd_dev);
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff ff4f 	bl	800195c <stall_transaction>
}
 8001abe:	e7f0      	b.n	8001aa2 <usb_control_setup_read+0x1c>

08001ac0 <usbd_register_control_callback>:
{
 8001ac0:	b430      	push	{r4, r5}
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001ac2:	2400      	movs	r4, #0
 8001ac4:	2c03      	cmp	r4, #3
 8001ac6:	dc10      	bgt.n	8001aea <usbd_register_control_callback+0x2a>
		if (usbd_dev->user_control_callback[i].cb) {
 8001ac8:	f104 0508 	add.w	r5, r4, #8
 8001acc:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8001ad0:	686d      	ldr	r5, [r5, #4]
 8001ad2:	b10d      	cbz	r5, 8001ad8 <usbd_register_control_callback+0x18>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001ad4:	3401      	adds	r4, #1
 8001ad6:	e7f5      	b.n	8001ac4 <usbd_register_control_callback+0x4>
		usbd_dev->user_control_callback[i].type = type;
 8001ad8:	3408      	adds	r4, #8
 8001ada:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8001ade:	7221      	strb	r1, [r4, #8]
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 8001ae0:	7262      	strb	r2, [r4, #9]
		usbd_dev->user_control_callback[i].cb = callback;
 8001ae2:	6063      	str	r3, [r4, #4]
		return 0;
 8001ae4:	2000      	movs	r0, #0
}
 8001ae6:	bc30      	pop	{r4, r5}
 8001ae8:	4770      	bx	lr
	return -1;
 8001aea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001aee:	e7fa      	b.n	8001ae6 <usbd_register_control_callback+0x26>

08001af0 <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 8001af0:	b538      	push	{r3, r4, r5, lr}
 8001af2:	4604      	mov	r4, r0
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 8001af4:	f100 0530 	add.w	r5, r0, #48	; 0x30
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 8001af8:	2100      	movs	r1, #0
 8001afa:	6401      	str	r1, [r0, #64]	; 0x40

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 8001afc:	2308      	movs	r3, #8
 8001afe:	462a      	mov	r2, r5
 8001b00:	f7ff ff1a 	bl	8001938 <usbd_ep_read_packet>
 8001b04:	2808      	cmp	r0, #8
 8001b06:	d10a      	bne.n	8001b1e <_usbd_control_setup+0x2e>
		stall_transaction(usbd_dev);
		return;
	}

	if (req->wLength == 0) {
 8001b08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001b0a:	b163      	cbz	r3, 8001b26 <_usbd_control_setup+0x36>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
 8001b0c:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0d      	blt.n	8001b30 <_usbd_control_setup+0x40>
		usb_control_setup_read(usbd_dev, req);
	} else {
		usb_control_setup_write(usbd_dev, req);
 8001b14:	4629      	mov	r1, r5
 8001b16:	4620      	mov	r0, r4
 8001b18:	f7ff ff2a 	bl	8001970 <usb_control_setup_write>
 8001b1c:	e002      	b.n	8001b24 <_usbd_control_setup+0x34>
		stall_transaction(usbd_dev);
 8001b1e:	4620      	mov	r0, r4
 8001b20:	f7ff ff1c 	bl	800195c <stall_transaction>
	}
}
 8001b24:	bd38      	pop	{r3, r4, r5, pc}
		usb_control_setup_read(usbd_dev, req);
 8001b26:	4629      	mov	r1, r5
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f7ff ffac 	bl	8001a86 <usb_control_setup_read>
 8001b2e:	e7f9      	b.n	8001b24 <_usbd_control_setup+0x34>
		usb_control_setup_read(usbd_dev, req);
 8001b30:	4629      	mov	r1, r5
 8001b32:	4620      	mov	r0, r4
 8001b34:	f7ff ffa7 	bl	8001a86 <usb_control_setup_read>
 8001b38:	e7f4      	b.n	8001b24 <_usbd_control_setup+0x34>

08001b3a <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 8001b3a:	b510      	push	{r4, lr}
 8001b3c:	4604      	mov	r4, r0
	(void)ea;

	switch (usbd_dev->control_state.state) {
 8001b3e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d015      	beq.n	8001b72 <_usbd_control_out+0x38>
 8001b46:	2b07      	cmp	r3, #7
 8001b48:	d02b      	beq.n	8001ba2 <_usbd_control_out+0x68>
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	d002      	beq.n	8001b54 <_usbd_control_out+0x1a>
					&(usbd_dev->control_state.req));
		}
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
 8001b4e:	f7ff ff05 	bl	800195c <stall_transaction>
	}
}
 8001b52:	e036      	b.n	8001bc2 <_usbd_control_out+0x88>
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8001b54:	f7ff ff25 	bl	80019a2 <usb_control_recv_chunk>
 8001b58:	2800      	cmp	r0, #0
 8001b5a:	db32      	blt.n	8001bc2 <_usbd_control_out+0x88>
		if ((usbd_dev->control_state.req.wLength -
 8001b5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
					usbd_dev->control_state.ctrl_len) <=
 8001b5e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
		if ((usbd_dev->control_state.req.wLength -
 8001b60:	1a9b      	subs	r3, r3, r2
					usbd_dev->desc->bMaxPacketSize0) {
 8001b62:	6822      	ldr	r2, [r4, #0]
 8001b64:	79d2      	ldrb	r2, [r2, #7]
		if ((usbd_dev->control_state.req.wLength -
 8001b66:	4293      	cmp	r3, r2
 8001b68:	dc2b      	bgt.n	8001bc2 <_usbd_control_out+0x88>
			usbd_dev->control_state.state = LAST_DATA_OUT;
 8001b6a:	2306      	movs	r3, #6
 8001b6c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001b70:	e027      	b.n	8001bc2 <_usbd_control_out+0x88>
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 8001b72:	f7ff ff16 	bl	80019a2 <usb_control_recv_chunk>
 8001b76:	2800      	cmp	r0, #0
 8001b78:	db23      	blt.n	8001bc2 <_usbd_control_out+0x88>
		if (usb_control_request_dispatch(usbd_dev,
 8001b7a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001b7e:	4620      	mov	r0, r4
 8001b80:	f7ff ff51 	bl	8001a26 <usb_control_request_dispatch>
 8001b84:	b148      	cbz	r0, 8001b9a <_usbd_control_out+0x60>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8001b86:	2300      	movs	r3, #0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f7ff fecd 	bl	800192c <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 8001b92:	2304      	movs	r3, #4
 8001b94:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001b98:	e013      	b.n	8001bc2 <_usbd_control_out+0x88>
			stall_transaction(usbd_dev);
 8001b9a:	4620      	mov	r0, r4
 8001b9c:	f7ff fede 	bl	800195c <stall_transaction>
 8001ba0:	e00f      	b.n	8001bc2 <_usbd_control_out+0x88>
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7ff fec6 	bl	8001938 <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (usbd_dev->control_state.complete) {
 8001bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bb4:	b11b      	cbz	r3, 8001bbe <_usbd_control_out+0x84>
			usbd_dev->control_state.complete(usbd_dev,
 8001bb6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001bba:	4620      	mov	r0, r4
 8001bbc:	4798      	blx	r3
		usbd_dev->control_state.complete = NULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001bc2:	bd10      	pop	{r4, pc}

08001bc4 <_usbd_control_in>:
void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8001bc4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d00b      	beq.n	8001be4 <_usbd_control_in+0x20>
{
 8001bcc:	b510      	push	{r4, lr}
 8001bce:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d00b      	beq.n	8001bec <_usbd_control_in+0x28>
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d002      	beq.n	8001bde <_usbd_control_in+0x1a>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
		}
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
 8001bd8:	f7ff fec0 	bl	800195c <stall_transaction>
	}
}
 8001bdc:	e001      	b.n	8001be2 <_usbd_control_in+0x1e>
		usb_control_send_chunk(usbd_dev);
 8001bde:	f7ff fefe 	bl	80019de <usb_control_send_chunk>
}
 8001be2:	bd10      	pop	{r4, pc}
		usbd_dev->control_state.state = STATUS_OUT;
 8001be4:	2307      	movs	r3, #7
 8001be6:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8001bea:	4770      	bx	lr
		if (usbd_dev->control_state.complete) {
 8001bec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bee:	b113      	cbz	r3, 8001bf6 <_usbd_control_in+0x32>
			usbd_dev->control_state.complete(usbd_dev,
 8001bf0:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001bf4:	4798      	blx	r3
		if ((req->bmRequestType == 0) &&
 8001bf6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001bfa:	b953      	cbnz	r3, 8001c12 <_usbd_control_in+0x4e>
		    (req->bRequest == USB_REQ_SET_ADDRESS)) {
 8001bfc:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
		if ((req->bmRequestType == 0) &&
 8001c00:	2b05      	cmp	r3, #5
 8001c02:	d106      	bne.n	8001c12 <_usbd_control_in+0x4e>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001c04:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8001c0c:	b2c9      	uxtb	r1, r1
 8001c0e:	4620      	mov	r0, r4
 8001c10:	4798      	blx	r3
		usbd_dev->control_state.state = IDLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		break;
 8001c18:	e7e3      	b.n	8001be2 <_usbd_control_in+0x1e>

08001c1a <usb_descriptor_type>:
}
 8001c1a:	0a00      	lsrs	r0, r0, #8
 8001c1c:	4770      	bx	lr

08001c1e <usb_descriptor_index>:
}
 8001c1e:	b2c0      	uxtb	r0, r0
 8001c20:	4770      	bx	lr

08001c22 <usb_standard_set_address>:
{
 8001c22:	b508      	push	{r3, lr}
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8001c24:	780b      	ldrb	r3, [r1, #0]
 8001c26:	b973      	cbnz	r3, 8001c46 <usb_standard_set_address+0x24>
 8001c28:	884b      	ldrh	r3, [r1, #2]
 8001c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8001c2c:	d80d      	bhi.n	8001c4a <usb_standard_set_address+0x28>
	usbd_dev->current_address = req->wValue;
 8001c2e:	7583      	strb	r3, [r0, #22]
	if (usbd_dev->driver->set_address_before_status) {
 8001c30:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8001c34:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001c38:	b14a      	cbz	r2, 8001c4e <usb_standard_set_address+0x2c>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	8849      	ldrh	r1, [r1, #2]
 8001c3e:	b2c9      	uxtb	r1, r1
 8001c40:	4798      	blx	r3
	return 1;
 8001c42:	2001      	movs	r0, #1
 8001c44:	e000      	b.n	8001c48 <usb_standard_set_address+0x26>
		return 0;
 8001c46:	2000      	movs	r0, #0
}
 8001c48:	bd08      	pop	{r3, pc}
		return 0;
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	e7fc      	b.n	8001c48 <usb_standard_set_address+0x26>
	return 1;
 8001c4e:	2001      	movs	r0, #1
 8001c50:	e7fa      	b.n	8001c48 <usb_standard_set_address+0x26>

08001c52 <usb_standard_set_configuration>:
{
 8001c52:	b570      	push	{r4, r5, r6, lr}
	if(req->wValue > 0) {
 8001c54:	884c      	ldrh	r4, [r1, #2]
 8001c56:	b974      	cbnz	r4, 8001c76 <usb_standard_set_configuration+0x24>
	int found_index = -1;
 8001c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	usbd_dev->current_config = found_index + 1;
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	75c3      	strb	r3, [r0, #23]
	if (usbd_dev->current_config > 0) {
 8001c62:	b35b      	cbz	r3, 8001cbc <usb_standard_set_configuration+0x6a>
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];
 8001c64:	6842      	ldr	r2, [r0, #4]
 8001c66:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8001c6a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001c6e:	3b0d      	subs	r3, #13
 8001c70:	4413      	add	r3, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001c72:	2200      	movs	r2, #0
 8001c74:	e016      	b.n	8001ca4 <usb_standard_set_configuration+0x52>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8001c76:	2300      	movs	r3, #0
 8001c78:	6802      	ldr	r2, [r0, #0]
 8001c7a:	7c52      	ldrb	r2, [r2, #17]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d90a      	bls.n	8001c96 <usb_standard_set_configuration+0x44>
			if (req->wValue == usbd_dev->config[i].bConfigurationValue) {
 8001c80:	6842      	ldr	r2, [r0, #4]
 8001c82:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8001c86:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001c8a:	442a      	add	r2, r5
 8001c8c:	7952      	ldrb	r2, [r2, #5]
 8001c8e:	4294      	cmp	r4, r2
 8001c90:	d003      	beq.n	8001c9a <usb_standard_set_configuration+0x48>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8001c92:	3301      	adds	r3, #1
 8001c94:	e7f0      	b.n	8001c78 <usb_standard_set_configuration+0x26>
	int found_index = -1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		if (found_index < 0) {
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	dade      	bge.n	8001c5c <usb_standard_set_configuration+0xa>
			return USBD_REQ_NOTSUPP;
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	e033      	b.n	8001d0a <usb_standard_set_configuration+0xb8>
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001ca2:	3201      	adds	r2, #1
 8001ca4:	791c      	ldrb	r4, [r3, #4]
 8001ca6:	4294      	cmp	r4, r2
 8001ca8:	d908      	bls.n	8001cbc <usb_standard_set_configuration+0x6a>
			if (cfg->interface[i].cur_altsetting) {
 8001caa:	f8d3 5009 	ldr.w	r5, [r3, #9]
 8001cae:	0114      	lsls	r4, r2, #4
 8001cb0:	592c      	ldr	r4, [r5, r4]
 8001cb2:	2c00      	cmp	r4, #0
 8001cb4:	d0f5      	beq.n	8001ca2 <usb_standard_set_configuration+0x50>
				*cfg->interface[i].cur_altsetting = 0;
 8001cb6:	2500      	movs	r5, #0
 8001cb8:	7025      	strb	r5, [r4, #0]
 8001cba:	e7f2      	b.n	8001ca2 <usb_standard_set_configuration+0x50>
 8001cbc:	460e      	mov	r6, r1
 8001cbe:	4604      	mov	r4, r0
	usbd_dev->driver->ep_reset(usbd_dev);
 8001cc0:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	4798      	blx	r3
	if (usbd_dev->user_callback_set_config[0]) {
 8001cc8:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8001ccc:	b10b      	cbz	r3, 8001cd2 <usb_standard_set_configuration+0x80>
		for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e008      	b.n	8001ce4 <usb_standard_set_configuration+0x92>
	return 1;
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	e019      	b.n	8001d0a <usb_standard_set_configuration+0xb8>
			usbd_dev->user_control_callback[i].cb = NULL;
 8001cd6:	f103 0208 	add.w	r2, r3, #8
 8001cda:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001cde:	2100      	movs	r1, #0
 8001ce0:	6051      	str	r1, [r2, #4]
		for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d9f6      	bls.n	8001cd6 <usb_standard_set_configuration+0x84>
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001ce8:	2500      	movs	r5, #0
 8001cea:	e000      	b.n	8001cee <usb_standard_set_configuration+0x9c>
 8001cec:	3501      	adds	r5, #1
 8001cee:	2d03      	cmp	r5, #3
 8001cf0:	d80a      	bhi.n	8001d08 <usb_standard_set_configuration+0xb6>
			if (usbd_dev->user_callback_set_config[i]) {
 8001cf2:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8001cf6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f5      	beq.n	8001cec <usb_standard_set_configuration+0x9a>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 8001d00:	8871      	ldrh	r1, [r6, #2]
 8001d02:	4620      	mov	r0, r4
 8001d04:	4798      	blx	r3
 8001d06:	e7f1      	b.n	8001cec <usb_standard_set_configuration+0x9a>
	return 1;
 8001d08:	2001      	movs	r0, #1
}
 8001d0a:	bd70      	pop	{r4, r5, r6, pc}

08001d0c <usb_standard_get_configuration>:
	if (*len > 1) {
 8001d0c:	8819      	ldrh	r1, [r3, #0]
 8001d0e:	2901      	cmp	r1, #1
 8001d10:	d901      	bls.n	8001d16 <usb_standard_get_configuration+0xa>
		*len = 1;
 8001d12:	2101      	movs	r1, #1
 8001d14:	8019      	strh	r1, [r3, #0]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[usbd_dev->current_config - 1];
 8001d16:	6841      	ldr	r1, [r0, #4]
 8001d18:	7dc3      	ldrb	r3, [r0, #23]
 8001d1a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8001d1e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001d22:	3b0d      	subs	r3, #13
 8001d24:	440b      	add	r3, r1
	(*buf)[0] = cfg->bConfigurationValue;
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	795b      	ldrb	r3, [r3, #5]
 8001d2a:	7013      	strb	r3, [r2, #0]
}
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	4770      	bx	lr

08001d30 <usb_standard_set_interface>:
{
 8001d30:	b570      	push	{r4, r5, r6, lr}
	const struct usb_config_descriptor *cfx = &usbd_dev->config[usbd_dev->current_config - 1];
 8001d32:	6844      	ldr	r4, [r0, #4]
 8001d34:	7dc2      	ldrb	r2, [r0, #23]
 8001d36:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8001d3a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8001d3e:	3a0d      	subs	r2, #13
 8001d40:	4422      	add	r2, r4
	if (req->wIndex >= cfx->bNumInterfaces) {
 8001d42:	888c      	ldrh	r4, [r1, #4]
 8001d44:	7915      	ldrb	r5, [r2, #4]
 8001d46:	42ac      	cmp	r4, r5
 8001d48:	d219      	bcs.n	8001d7e <usb_standard_set_interface+0x4e>
	iface = &cfx->interface[req->wIndex];
 8001d4a:	f8d2 5009 	ldr.w	r5, [r2, #9]
 8001d4e:	0124      	lsls	r4, r4, #4
 8001d50:	192e      	adds	r6, r5, r4
	if (req->wValue >= iface->num_altsetting) {
 8001d52:	884a      	ldrh	r2, [r1, #2]
 8001d54:	7936      	ldrb	r6, [r6, #4]
 8001d56:	42b2      	cmp	r2, r6
 8001d58:	d213      	bcs.n	8001d82 <usb_standard_set_interface+0x52>
	if (iface->cur_altsetting) {
 8001d5a:	592c      	ldr	r4, [r5, r4]
 8001d5c:	b15c      	cbz	r4, 8001d76 <usb_standard_set_interface+0x46>
		*iface->cur_altsetting = req->wValue;
 8001d5e:	7022      	strb	r2, [r4, #0]
 8001d60:	461c      	mov	r4, r3
	if (usbd_dev->user_callback_set_altsetting) {
 8001d62:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8001d66:	b113      	cbz	r3, 8001d6e <usb_standard_set_interface+0x3e>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 8001d68:	884a      	ldrh	r2, [r1, #2]
 8001d6a:	8889      	ldrh	r1, [r1, #4]
 8001d6c:	4798      	blx	r3
	*len = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	8023      	strh	r3, [r4, #0]
	return USBD_REQ_HANDLED;
 8001d72:	2001      	movs	r0, #1
 8001d74:	e004      	b.n	8001d80 <usb_standard_set_interface+0x50>
	} else if (req->wValue > 0) {
 8001d76:	2a00      	cmp	r2, #0
 8001d78:	d0f2      	beq.n	8001d60 <usb_standard_set_interface+0x30>
		return USBD_REQ_NOTSUPP;
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	e000      	b.n	8001d80 <usb_standard_set_interface+0x50>
		return USBD_REQ_NOTSUPP;
 8001d7e:	2000      	movs	r0, #0
}
 8001d80:	bd70      	pop	{r4, r5, r6, pc}
		return USBD_REQ_NOTSUPP;
 8001d82:	2000      	movs	r0, #0
 8001d84:	e7fc      	b.n	8001d80 <usb_standard_set_interface+0x50>

08001d86 <usb_standard_get_interface>:
{
 8001d86:	b430      	push	{r4, r5}
	const struct usb_config_descriptor *cfx = &usbd_dev->config[usbd_dev->current_config - 1];
 8001d88:	6844      	ldr	r4, [r0, #4]
 8001d8a:	7dc0      	ldrb	r0, [r0, #23]
 8001d8c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001d90:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8001d94:	380d      	subs	r0, #13
 8001d96:	4420      	add	r0, r4
	if (req->wIndex >= cfx->bNumInterfaces) {
 8001d98:	888d      	ldrh	r5, [r1, #4]
 8001d9a:	7904      	ldrb	r4, [r0, #4]
 8001d9c:	42a5      	cmp	r5, r4
 8001d9e:	d20f      	bcs.n	8001dc0 <usb_standard_get_interface+0x3a>
	*len = 1;
 8001da0:	2401      	movs	r4, #1
 8001da2:	801c      	strh	r4, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 8001da4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8001da8:	888b      	ldrh	r3, [r1, #4]
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	58c3      	ldr	r3, [r0, r3]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8001dae:	b12b      	cbz	r3, 8001dbc <usb_standard_get_interface+0x36>
 8001db0:	7819      	ldrb	r1, [r3, #0]
 8001db2:	6813      	ldr	r3, [r2, #0]
 8001db4:	7019      	strb	r1, [r3, #0]
	return USBD_REQ_HANDLED;
 8001db6:	2001      	movs	r0, #1
}
 8001db8:	bc30      	pop	{r4, r5}
 8001dba:	4770      	bx	lr
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	e7f8      	b.n	8001db2 <usb_standard_get_interface+0x2c>
		return USBD_REQ_NOTSUPP;
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	e7f9      	b.n	8001db8 <usb_standard_get_interface+0x32>

08001dc4 <usb_standard_device_get_status>:
	if (*len > 2) {
 8001dc4:	8819      	ldrh	r1, [r3, #0]
 8001dc6:	2902      	cmp	r1, #2
 8001dc8:	d901      	bls.n	8001dce <usb_standard_device_get_status+0xa>
		*len = 2;
 8001dca:	2102      	movs	r1, #2
 8001dcc:	8019      	strh	r1, [r3, #0]
	(*buf)[0] = 0;
 8001dce:	6811      	ldr	r1, [r2, #0]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	7053      	strb	r3, [r2, #1]
}
 8001dd8:	2001      	movs	r0, #1
 8001dda:	4770      	bx	lr

08001ddc <usb_standard_interface_get_status>:
	if (*len > 2) {
 8001ddc:	8819      	ldrh	r1, [r3, #0]
 8001dde:	2902      	cmp	r1, #2
 8001de0:	d901      	bls.n	8001de6 <usb_standard_interface_get_status+0xa>
		*len = 2;
 8001de2:	2102      	movs	r1, #2
 8001de4:	8019      	strh	r1, [r3, #0]
	(*buf)[0] = 0;
 8001de6:	6811      	ldr	r1, [r2, #0]
 8001de8:	2300      	movs	r3, #0
 8001dea:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	7053      	strb	r3, [r2, #1]
}
 8001df0:	2001      	movs	r0, #1
 8001df2:	4770      	bx	lr

08001df4 <build_config_descriptor>:
{
 8001df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df8:	b089      	sub	sp, #36	; 0x24
 8001dfa:	4617      	mov	r7, r2
 8001dfc:	9207      	str	r2, [sp, #28]
 8001dfe:	461d      	mov	r5, r3
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8001e00:	6846      	ldr	r6, [r0, #4]
 8001e02:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001e06:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8001e0a:	1931      	adds	r1, r6, r4
 8001e0c:	9104      	str	r1, [sp, #16]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8001e0e:	5d33      	ldrb	r3, [r6, r4]
 8001e10:	42ab      	cmp	r3, r5
 8001e12:	bf28      	it	cs
 8001e14:	462b      	movcs	r3, r5
 8001e16:	469b      	mov	fp, r3
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4638      	mov	r0, r7
 8001e1c:	f000 fc8d 	bl	800273a <memcpy>
	buf += count;
 8001e20:	eb07 0a0b 	add.w	sl, r7, fp
	len -= count;
 8001e24:	eba5 050b 	sub.w	r5, r5, fp
 8001e28:	fa1f f985 	uxth.w	r9, r5
	totallen += cfg->bLength;
 8001e2c:	5d33      	ldrb	r3, [r6, r4]
 8001e2e:	9301      	str	r3, [sp, #4]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001e30:	2300      	movs	r3, #0
 8001e32:	9306      	str	r3, [sp, #24]
 8001e34:	e08c      	b.n	8001f50 <build_config_descriptor+0x15c>
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8001e36:	3501      	adds	r5, #1
 8001e38:	b2ad      	uxth	r5, r5
 8001e3a:	9b02      	ldr	r3, [sp, #8]
 8001e3c:	791b      	ldrb	r3, [r3, #4]
 8001e3e:	42ab      	cmp	r3, r5
 8001e40:	d93a      	bls.n	8001eb8 <build_config_descriptor+0xc4>
				    &iface->endpoint[k];
 8001e42:	9b02      	ldr	r3, [sp, #8]
 8001e44:	f8d3 8009 	ldr.w	r8, [r3, #9]
 8001e48:	ebc5 1705 	rsb	r7, r5, r5, lsl #4
				const struct usb_endpoint_descriptor *ep =
 8001e4c:	eb08 0607 	add.w	r6, r8, r7
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 8001e50:	f818 4007 	ldrb.w	r4, [r8, r7]
 8001e54:	454c      	cmp	r4, r9
 8001e56:	bf28      	it	cs
 8001e58:	464c      	movcs	r4, r9
 8001e5a:	4622      	mov	r2, r4
 8001e5c:	4631      	mov	r1, r6
 8001e5e:	4650      	mov	r0, sl
 8001e60:	f000 fc6b 	bl	800273a <memcpy>
				buf += count;
 8001e64:	44a2      	add	sl, r4
				len -= count;
 8001e66:	eba9 0904 	sub.w	r9, r9, r4
 8001e6a:	fa1f f989 	uxth.w	r9, r9
				total += count;
 8001e6e:	44a3      	add	fp, r4
 8001e70:	fa1f fb8b 	uxth.w	fp, fp
				totallen += ep->bLength;
 8001e74:	f818 3007 	ldrb.w	r3, [r8, r7]
 8001e78:	9a01      	ldr	r2, [sp, #4]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	b29f      	uxth	r7, r3
 8001e7e:	9701      	str	r7, [sp, #4]
				if (ep->extra) {
 8001e80:	f8d6 1007 	ldr.w	r1, [r6, #7]
 8001e84:	2900      	cmp	r1, #0
 8001e86:	d0d6      	beq.n	8001e36 <build_config_descriptor+0x42>
					       count = MIN(len, ep->extralen));
 8001e88:	f8d6 400b 	ldr.w	r4, [r6, #11]
 8001e8c:	454c      	cmp	r4, r9
 8001e8e:	bfa8      	it	ge
 8001e90:	464c      	movge	r4, r9
 8001e92:	b2a4      	uxth	r4, r4
					memcpy(buf, ep->extra,
 8001e94:	4622      	mov	r2, r4
 8001e96:	4650      	mov	r0, sl
 8001e98:	f000 fc4f 	bl	800273a <memcpy>
					buf += count;
 8001e9c:	44a2      	add	sl, r4
					len -= count;
 8001e9e:	eba9 0904 	sub.w	r9, r9, r4
 8001ea2:	fa1f f989 	uxth.w	r9, r9
					total += count;
 8001ea6:	44a3      	add	fp, r4
 8001ea8:	fa1f fb8b 	uxth.w	fp, fp
					totallen += ep->extralen;
 8001eac:	f8d6 300b 	ldr.w	r3, [r6, #11]
 8001eb0:	443b      	add	r3, r7
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	e7be      	b.n	8001e36 <build_config_descriptor+0x42>
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8001eb8:	9b03      	ldr	r3, [sp, #12]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	9303      	str	r3, [sp, #12]
 8001ec0:	9b04      	ldr	r3, [sp, #16]
 8001ec2:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8001ec6:	9a05      	ldr	r2, [sp, #20]
 8001ec8:	4413      	add	r3, r2
 8001eca:	791a      	ldrb	r2, [r3, #4]
 8001ecc:	9903      	ldr	r1, [sp, #12]
 8001ece:	428a      	cmp	r2, r1
 8001ed0:	d93a      	bls.n	8001f48 <build_config_descriptor+0x154>
					&cfg->interface[i].altsetting[j];
 8001ed2:	68de      	ldr	r6, [r3, #12]
 8001ed4:	9b03      	ldr	r3, [sp, #12]
 8001ed6:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8001eda:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
			const struct usb_interface_descriptor *iface =
 8001ede:	1973      	adds	r3, r6, r5
 8001ee0:	461f      	mov	r7, r3
 8001ee2:	9302      	str	r3, [sp, #8]
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001ee4:	5d74      	ldrb	r4, [r6, r5]
 8001ee6:	454c      	cmp	r4, r9
 8001ee8:	bf28      	it	cs
 8001eea:	464c      	movcs	r4, r9
 8001eec:	4622      	mov	r2, r4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4650      	mov	r0, sl
 8001ef2:	f000 fc22 	bl	800273a <memcpy>
			buf += count;
 8001ef6:	44a2      	add	sl, r4
			len -= count;
 8001ef8:	eba9 0904 	sub.w	r9, r9, r4
 8001efc:	fa1f f989 	uxth.w	r9, r9
			total += count;
 8001f00:	44a3      	add	fp, r4
 8001f02:	fa1f fb8b 	uxth.w	fp, fp
			totallen += iface->bLength;
 8001f06:	5d73      	ldrb	r3, [r6, r5]
 8001f08:	9a01      	ldr	r2, [sp, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	b29e      	uxth	r6, r3
 8001f0e:	9601      	str	r6, [sp, #4]
			if (iface->extra) {
 8001f10:	f8d7 100d 	ldr.w	r1, [r7, #13]
 8001f14:	b1b1      	cbz	r1, 8001f44 <build_config_descriptor+0x150>
				       count = MIN(len, iface->extralen));
 8001f16:	f8d7 4011 	ldr.w	r4, [r7, #17]
 8001f1a:	454c      	cmp	r4, r9
 8001f1c:	bfa8      	it	ge
 8001f1e:	464c      	movge	r4, r9
 8001f20:	b2a4      	uxth	r4, r4
				memcpy(buf, iface->extra,
 8001f22:	4622      	mov	r2, r4
 8001f24:	4650      	mov	r0, sl
 8001f26:	f000 fc08 	bl	800273a <memcpy>
				buf += count;
 8001f2a:	44a2      	add	sl, r4
				len -= count;
 8001f2c:	eba9 0904 	sub.w	r9, r9, r4
 8001f30:	fa1f f989 	uxth.w	r9, r9
				total += count;
 8001f34:	44a3      	add	fp, r4
 8001f36:	fa1f fb8b 	uxth.w	fp, fp
				totallen += iface->extralen;
 8001f3a:	f8d7 3011 	ldr.w	r3, [r7, #17]
 8001f3e:	4433      	add	r3, r6
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	9301      	str	r3, [sp, #4]
{
 8001f44:	2500      	movs	r5, #0
 8001f46:	e778      	b.n	8001e3a <build_config_descriptor+0x46>
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001f48:	9b06      	ldr	r3, [sp, #24]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	9306      	str	r3, [sp, #24]
 8001f50:	9b04      	ldr	r3, [sp, #16]
 8001f52:	791b      	ldrb	r3, [r3, #4]
 8001f54:	9a06      	ldr	r2, [sp, #24]
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d921      	bls.n	8001f9e <build_config_descriptor+0x1aa>
		if (cfg->interface[i].iface_assoc) {
 8001f5a:	9b04      	ldr	r3, [sp, #16]
 8001f5c:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8001f60:	9a06      	ldr	r2, [sp, #24]
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	9205      	str	r2, [sp, #20]
 8001f66:	4413      	add	r3, r2
 8001f68:	689d      	ldr	r5, [r3, #8]
 8001f6a:	b1ad      	cbz	r5, 8001f98 <build_config_descriptor+0x1a4>
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 8001f6c:	782c      	ldrb	r4, [r5, #0]
 8001f6e:	454c      	cmp	r4, r9
 8001f70:	bf28      	it	cs
 8001f72:	464c      	movcs	r4, r9
 8001f74:	4622      	mov	r2, r4
 8001f76:	4629      	mov	r1, r5
 8001f78:	4650      	mov	r0, sl
 8001f7a:	f000 fbde 	bl	800273a <memcpy>
			buf += count;
 8001f7e:	44a2      	add	sl, r4
			len -= count;
 8001f80:	eba9 0904 	sub.w	r9, r9, r4
 8001f84:	fa1f f989 	uxth.w	r9, r9
			total += count;
 8001f88:	445c      	add	r4, fp
 8001f8a:	fa1f fb84 	uxth.w	fp, r4
			totallen += assoc->bLength;
 8001f8e:	782b      	ldrb	r3, [r5, #0]
 8001f90:	9a01      	ldr	r2, [sp, #4]
 8001f92:	4413      	add	r3, r2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	9301      	str	r3, [sp, #4]
{
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9303      	str	r3, [sp, #12]
 8001f9c:	e790      	b.n	8001ec0 <build_config_descriptor+0xcc>
	*(uint16_t *)(tmpbuf + 2) = totallen;
 8001f9e:	9b07      	ldr	r3, [sp, #28]
 8001fa0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001fa4:	805a      	strh	r2, [r3, #2]
}
 8001fa6:	4658      	mov	r0, fp
 8001fa8:	b009      	add	sp, #36	; 0x24
 8001faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001fae <usb_standard_get_descriptor>:
{
 8001fae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fb2:	4605      	mov	r5, r0
 8001fb4:	460f      	mov	r7, r1
 8001fb6:	4691      	mov	r9, r2
 8001fb8:	461e      	mov	r6, r3
	descr_idx = usb_descriptor_index(req->wValue);
 8001fba:	884c      	ldrh	r4, [r1, #2]
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff fe2e 	bl	8001c1e <usb_descriptor_index>
 8001fc2:	4680      	mov	r8, r0
	switch (usb_descriptor_type(req->wValue)) {
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7ff fe28 	bl	8001c1a <usb_descriptor_type>
 8001fca:	2802      	cmp	r0, #2
 8001fcc:	d011      	beq.n	8001ff2 <usb_standard_get_descriptor+0x44>
 8001fce:	2803      	cmp	r0, #3
 8001fd0:	d01b      	beq.n	800200a <usb_standard_get_descriptor+0x5c>
 8001fd2:	2801      	cmp	r0, #1
 8001fd4:	d001      	beq.n	8001fda <usb_standard_get_descriptor+0x2c>
	return USBD_REQ_NOTSUPP;
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	e009      	b.n	8001fee <usb_standard_get_descriptor+0x40>
		*buf = (uint8_t *) usbd_dev->desc;
 8001fda:	682b      	ldr	r3, [r5, #0]
 8001fdc:	f8c9 3000 	str.w	r3, [r9]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8001fe0:	682b      	ldr	r3, [r5, #0]
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	8832      	ldrh	r2, [r6, #0]
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	bf28      	it	cs
 8001fea:	4613      	movcs	r3, r2
 8001fec:	8033      	strh	r3, [r6, #0]
}
 8001fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		*buf = usbd_dev->ctrl_buf;
 8001ff2:	692a      	ldr	r2, [r5, #16]
 8001ff4:	f8c9 2000 	str.w	r2, [r9]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8001ff8:	8833      	ldrh	r3, [r6, #0]
 8001ffa:	fa5f f188 	uxtb.w	r1, r8
 8001ffe:	4628      	mov	r0, r5
 8002000:	f7ff fef8 	bl	8001df4 <build_config_descriptor>
 8002004:	8030      	strh	r0, [r6, #0]
		return USBD_REQ_HANDLED;
 8002006:	2001      	movs	r0, #1
 8002008:	e7f1      	b.n	8001fee <usb_standard_get_descriptor+0x40>
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 800200a:	692c      	ldr	r4, [r5, #16]
		if (descr_idx == 0) {
 800200c:	f1b8 0f00 	cmp.w	r8, #0
 8002010:	d10f      	bne.n	8002032 <usb_standard_get_descriptor+0x84>
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 8002012:	2309      	movs	r3, #9
 8002014:	70a3      	strb	r3, [r4, #2]
 8002016:	2304      	movs	r3, #4
 8002018:	70e3      	strb	r3, [r4, #3]
			sd->bLength = sizeof(sd->bLength) +
 800201a:	7023      	strb	r3, [r4, #0]
			*len = MIN(*len, sd->bLength);
 800201c:	8833      	ldrh	r3, [r6, #0]
 800201e:	2b04      	cmp	r3, #4
 8002020:	bf28      	it	cs
 8002022:	2304      	movcs	r3, #4
 8002024:	8033      	strh	r3, [r6, #0]
		sd->bDescriptorType = USB_DT_STRING;
 8002026:	2303      	movs	r3, #3
 8002028:	7063      	strb	r3, [r4, #1]
		*buf = (uint8_t *)sd;
 800202a:	f8c9 4000 	str.w	r4, [r9]
		return USBD_REQ_HANDLED;
 800202e:	2001      	movs	r0, #1
 8002030:	e7dd      	b.n	8001fee <usb_standard_get_descriptor+0x40>
			array_idx = descr_idx - 1;
 8002032:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (!usbd_dev->strings) {
 8002036:	68ab      	ldr	r3, [r5, #8]
 8002038:	b343      	cbz	r3, 800208c <usb_standard_get_descriptor+0xde>
			if (array_idx >= usbd_dev->num_strings) {
 800203a:	68ea      	ldr	r2, [r5, #12]
 800203c:	4542      	cmp	r2, r8
 800203e:	dd27      	ble.n	8002090 <usb_standard_get_descriptor+0xe2>
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8002040:	88b9      	ldrh	r1, [r7, #4]
 8002042:	f240 4209 	movw	r2, #1033	; 0x409
 8002046:	4291      	cmp	r1, r2
 8002048:	d001      	beq.n	800204e <usb_standard_get_descriptor+0xa0>
				return USBD_REQ_NOTSUPP;
 800204a:	2000      	movs	r0, #0
 800204c:	e7cf      	b.n	8001fee <usb_standard_get_descriptor+0x40>
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 800204e:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8002052:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002056:	f000 fb88 	bl	800276a <strlen>
 800205a:	1c43      	adds	r3, r0, #1
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	b2db      	uxtb	r3, r3
 8002060:	7023      	strb	r3, [r4, #0]
			*len = MIN(*len, sd->bLength);
 8002062:	b29b      	uxth	r3, r3
 8002064:	8832      	ldrh	r2, [r6, #0]
 8002066:	4293      	cmp	r3, r2
 8002068:	bf28      	it	cs
 800206a:	4613      	movcs	r3, r2
 800206c:	8033      	strh	r3, [r6, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 800206e:	2200      	movs	r2, #0
 8002070:	e006      	b.n	8002080 <usb_standard_get_descriptor+0xd2>
					usbd_dev->strings[array_idx][i];
 8002072:	68ab      	ldr	r3, [r5, #8]
 8002074:	59db      	ldr	r3, [r3, r7]
 8002076:	5c99      	ldrb	r1, [r3, r2]
				sd->wData[i] =
 8002078:	eb04 0342 	add.w	r3, r4, r2, lsl #1
 800207c:	8059      	strh	r1, [r3, #2]
			for (i = 0; i < (*len / 2) - 1; i++) {
 800207e:	3201      	adds	r2, #1
 8002080:	8833      	ldrh	r3, [r6, #0]
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	3b01      	subs	r3, #1
 8002086:	4293      	cmp	r3, r2
 8002088:	dcf3      	bgt.n	8002072 <usb_standard_get_descriptor+0xc4>
 800208a:	e7cc      	b.n	8002026 <usb_standard_get_descriptor+0x78>
				return USBD_REQ_NOTSUPP;
 800208c:	2000      	movs	r0, #0
 800208e:	e7ae      	b.n	8001fee <usb_standard_get_descriptor+0x40>
				return USBD_REQ_NOTSUPP;
 8002090:	2000      	movs	r0, #0
 8002092:	e7ac      	b.n	8001fee <usb_standard_get_descriptor+0x40>

08002094 <usb_standard_endpoint_get_status>:
{
 8002094:	b510      	push	{r4, lr}
 8002096:	4614      	mov	r4, r2
	if (*len > 2) {
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	2a02      	cmp	r2, #2
 800209c:	d901      	bls.n	80020a2 <usb_standard_endpoint_get_status+0xe>
		*len = 2;
 800209e:	2202      	movs	r2, #2
 80020a0:	801a      	strh	r2, [r3, #0]
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 80020a2:	8889      	ldrh	r1, [r1, #4]
 80020a4:	b2c9      	uxtb	r1, r1
 80020a6:	f7ff fc53 	bl	8001950 <usbd_ep_stall_get>
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	3000      	adds	r0, #0
 80020ae:	bf18      	it	ne
 80020b0:	2001      	movne	r0, #1
 80020b2:	7018      	strb	r0, [r3, #0]
	(*buf)[1] = 0;
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	2200      	movs	r2, #0
 80020b8:	705a      	strb	r2, [r3, #1]
}
 80020ba:	2001      	movs	r0, #1
 80020bc:	bd10      	pop	{r4, pc}

080020be <usb_standard_endpoint_stall>:
{
 80020be:	b508      	push	{r3, lr}
	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 80020c0:	8889      	ldrh	r1, [r1, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	b2c9      	uxtb	r1, r1
 80020c6:	f7ff fc3d 	bl	8001944 <usbd_ep_stall_set>
}
 80020ca:	2001      	movs	r0, #1
 80020cc:	bd08      	pop	{r3, pc}

080020ce <usb_standard_endpoint_unstall>:
{
 80020ce:	b508      	push	{r3, lr}
	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 80020d0:	8889      	ldrh	r1, [r1, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	b2c9      	uxtb	r1, r1
 80020d6:	f7ff fc35 	bl	8001944 <usbd_ep_stall_set>
}
 80020da:	2001      	movs	r0, #1
 80020dc:	bd08      	pop	{r3, pc}

080020de <usbd_register_set_config_callback>:
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80020de:	2300      	movs	r3, #0
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	dc0d      	bgt.n	8002100 <usbd_register_set_config_callback+0x22>
		if (usbd_dev->user_callback_set_config[i])
 80020e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80020e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80020ec:	6852      	ldr	r2, [r2, #4]
 80020ee:	b10a      	cbz	r2, 80020f4 <usbd_register_set_config_callback+0x16>
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80020f0:	3301      	adds	r3, #1
 80020f2:	e7f5      	b.n	80020e0 <usbd_register_set_config_callback+0x2>
		usbd_dev->user_callback_set_config[i] = callback;
 80020f4:	3330      	adds	r3, #48	; 0x30
 80020f6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80020fa:	6059      	str	r1, [r3, #4]
		return 0;
 80020fc:	2000      	movs	r0, #0
 80020fe:	4770      	bx	lr
	return -1;
 8002100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002104:	4770      	bx	lr

08002106 <_usbd_standard_request>:

int _usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 8002106:	b510      	push	{r4, lr}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 8002108:	780c      	ldrb	r4, [r1, #0]
 800210a:	f014 0f60 	tst.w	r4, #96	; 0x60
 800210e:	d111      	bne.n	8002134 <_usbd_standard_request+0x2e>
		return 0;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 8002110:	f004 041f 	and.w	r4, r4, #31
 8002114:	2c01      	cmp	r4, #1
 8002116:	d007      	beq.n	8002128 <_usbd_standard_request+0x22>
 8002118:	b11c      	cbz	r4, 8002122 <_usbd_standard_request+0x1c>
 800211a:	2c02      	cmp	r4, #2
 800211c:	d007      	beq.n	800212e <_usbd_standard_request+0x28>
		return _usbd_standard_request_interface(usbd_dev, req,
							buf, len);
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return 0;
 800211e:	2000      	movs	r0, #0
 8002120:	e009      	b.n	8002136 <_usbd_standard_request+0x30>
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8002122:	f7ff f8a1 	bl	8001268 <_usbd_standard_request_device>
 8002126:	e006      	b.n	8002136 <_usbd_standard_request+0x30>
		return _usbd_standard_request_interface(usbd_dev, req,
 8002128:	f7ff f8c4 	bl	80012b4 <_usbd_standard_request_interface>
 800212c:	e003      	b.n	8002136 <_usbd_standard_request+0x30>
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 800212e:	f7ff f8db 	bl	80012e8 <_usbd_standard_request_endpoint>
 8002132:	e000      	b.n	8002136 <_usbd_standard_request+0x30>
		return 0;
 8002134:	2000      	movs	r0, #0
	}
}
 8002136:	bd10      	pop	{r4, pc}

08002138 <st_usbfs_copy_to_pm>:

void st_usbfs_copy_to_pm(volatile void *vPM, const void *buf, uint16_t len)
{
	const uint16_t *lbuf = buf;
	volatile uint32_t *PM = vPM;
	for (len = (len + 1) >> 1; len; len--) {
 8002138:	3201      	adds	r2, #1
 800213a:	0852      	lsrs	r2, r2, #1
 800213c:	e005      	b.n	800214a <st_usbfs_copy_to_pm+0x12>
		*PM++ = *lbuf++;
 800213e:	880b      	ldrh	r3, [r1, #0]
 8002140:	6003      	str	r3, [r0, #0]
	for (len = (len + 1) >> 1; len; len--) {
 8002142:	3a01      	subs	r2, #1
 8002144:	b292      	uxth	r2, r2
		*PM++ = *lbuf++;
 8002146:	3004      	adds	r0, #4
 8002148:	3102      	adds	r1, #2
	for (len = (len + 1) >> 1; len; len--) {
 800214a:	2a00      	cmp	r2, #0
 800214c:	d1f7      	bne.n	800213e <st_usbfs_copy_to_pm+0x6>
	}
}
 800214e:	4770      	bx	lr

08002150 <st_usbfs_copy_from_pm>:
 * @param buf Source pointer to data buffer.
 * @param vPM Destination pointer into packet memory.
 * @param len Number of bytes to copy.
 */
void st_usbfs_copy_from_pm(void *buf, const volatile void *vPM, uint16_t len)
{
 8002150:	b410      	push	{r4}
	uint16_t *lbuf = buf;
	const volatile uint16_t *PM = vPM;
	uint8_t odd = len & 1;
 8002152:	f002 0401 	and.w	r4, r2, #1

	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 8002156:	0852      	lsrs	r2, r2, #1
 8002158:	e005      	b.n	8002166 <st_usbfs_copy_from_pm+0x16>
		*lbuf = *PM;
 800215a:	f831 3b04 	ldrh.w	r3, [r1], #4
 800215e:	f820 3b02 	strh.w	r3, [r0], #2
	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 8002162:	3a01      	subs	r2, #1
 8002164:	b292      	uxth	r2, r2
 8002166:	2a00      	cmp	r2, #0
 8002168:	d1f7      	bne.n	800215a <st_usbfs_copy_from_pm+0xa>
	}

	if (odd) {
 800216a:	b10c      	cbz	r4, 8002170 <st_usbfs_copy_from_pm+0x20>
		*(uint8_t *) lbuf = *(uint8_t *) PM;
 800216c:	780b      	ldrb	r3, [r1, #0]
 800216e:	7003      	strb	r3, [r0, #0]
	}
}
 8002170:	bc10      	pop	{r4}
 8002172:	4770      	bx	lr

08002174 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8002174:	f000 021f 	and.w	r2, r0, #31
 8002178:	0940      	lsrs	r0, r0, #5
 800217a:	0080      	lsls	r0, r0, #2
 800217c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002180:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002184:	2301      	movs	r3, #1
 8002186:	4093      	lsls	r3, r2
 8002188:	6003      	str	r3, [r0, #0]
}
 800218a:	4770      	bx	lr

0800218c <st_usbfs_endpoints_reset>:
{
 800218c:	b410      	push	{r4}
	for (i = 1; i < 8; i++) {
 800218e:	2401      	movs	r4, #1
 8002190:	e01b      	b.n	80021ca <st_usbfs_endpoints_reset+0x3e>
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1fb      	bne.n	8002192 <st_usbfs_endpoints_reset+0x6>
 800219a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800219e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021a2:	600a      	str	r2, [r1, #0]
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 80021a4:	680b      	ldr	r3, [r1, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	2301      	movs	r3, #1
 80021b4:	e001      	b.n	80021ba <st_usbfs_endpoints_reset+0x2e>
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1fb      	bne.n	80021b6 <st_usbfs_endpoints_reset+0x2a>
 80021be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021c6:	600a      	str	r2, [r1, #0]
	for (i = 1; i < 8; i++) {
 80021c8:	3401      	adds	r4, #1
 80021ca:	2c07      	cmp	r4, #7
 80021cc:	dc0d      	bgt.n	80021ea <st_usbfs_endpoints_reset+0x5e>
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 80021ce:	00a1      	lsls	r1, r4, #2
 80021d0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80021d4:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80021d8:	680b      	ldr	r3, [r1, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	2301      	movs	r3, #1
 80021e8:	e7d5      	b.n	8002196 <st_usbfs_endpoints_reset+0xa>
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
 80021ea:	6803      	ldr	r3, [r0, #0]
 80021ec:	79db      	ldrb	r3, [r3, #7]
 80021ee:	3320      	adds	r3, #32
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	8303      	strh	r3, [r0, #24]
}
 80021f4:	bc10      	pop	{r4}
 80021f6:	4770      	bx	lr

080021f8 <st_usbfs_ep_stall_set>:
{
 80021f8:	b470      	push	{r4, r5, r6}
	if (addr == 0) {
 80021fa:	460d      	mov	r5, r1
 80021fc:	b9f9      	cbnz	r1, 800223e <st_usbfs_ep_stall_set+0x46>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 80021fe:	008e      	lsls	r6, r1, #2
 8002200:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002204:	f506 46b8 	add.w	r6, r6, #23552	; 0x5c00
 8002208:	6834      	ldr	r4, [r6, #0]
 800220a:	b2a4      	uxth	r4, r4
 800220c:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 8002210:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8002214:	b2a4      	uxth	r4, r4
 8002216:	2301      	movs	r3, #1
 8002218:	e003      	b.n	8002222 <st_usbfs_ep_stall_set+0x2a>
 800221a:	2020      	movs	r0, #32
 800221c:	e006      	b.n	800222c <st_usbfs_ep_stall_set+0x34>
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	b29b      	uxth	r3, r3
 8002222:	b13b      	cbz	r3, 8002234 <st_usbfs_ep_stall_set+0x3c>
 8002224:	4619      	mov	r1, r3
 8002226:	2a00      	cmp	r2, #0
 8002228:	d0f7      	beq.n	800221a <st_usbfs_ep_stall_set+0x22>
 800222a:	2010      	movs	r0, #16
 800222c:	4201      	tst	r1, r0
 800222e:	d0f6      	beq.n	800221e <st_usbfs_ep_stall_set+0x26>
 8002230:	405c      	eors	r4, r3
 8002232:	e7f4      	b.n	800221e <st_usbfs_ep_stall_set+0x26>
 8002234:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002238:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800223c:	6034      	str	r4, [r6, #0]
	if (addr & 0x80) {
 800223e:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002242:	d11b      	bne.n	800227c <st_usbfs_ep_stall_set+0x84>
		if (!stall) {
 8002244:	b962      	cbnz	r2, 8002260 <st_usbfs_ep_stall_set+0x68>
			USB_CLR_EP_RX_DTOG(addr);
 8002246:	00ab      	lsls	r3, r5, #2
 8002248:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800224c:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8002250:	6819      	ldr	r1, [r3, #0]
 8002252:	f421 5141 	bic.w	r1, r1, #12352	; 0x3040
 8002256:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 800225a:	0409      	lsls	r1, r1, #16
 800225c:	0c09      	lsrs	r1, r1, #16
 800225e:	6019      	str	r1, [r3, #0]
		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 8002260:	00ad      	lsls	r5, r5, #2
 8002262:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002266:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 800226a:	682c      	ldr	r4, [r5, #0]
 800226c:	b2a4      	uxth	r4, r4
 800226e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8002272:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 8002276:	b2a4      	uxth	r4, r4
 8002278:	2301      	movs	r3, #1
 800227a:	e030      	b.n	80022de <st_usbfs_ep_stall_set+0xe6>
		addr &= 0x7F;
 800227c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 8002280:	00ad      	lsls	r5, r5, #2
 8002282:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002286:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 800228a:	682c      	ldr	r4, [r5, #0]
 800228c:	b2a4      	uxth	r4, r4
 800228e:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 8002292:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8002296:	b2a4      	uxth	r4, r4
 8002298:	2301      	movs	r3, #1
 800229a:	e003      	b.n	80022a4 <st_usbfs_ep_stall_set+0xac>
 800229c:	2020      	movs	r0, #32
 800229e:	e006      	b.n	80022ae <st_usbfs_ep_stall_set+0xb6>
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	b13b      	cbz	r3, 80022b6 <st_usbfs_ep_stall_set+0xbe>
 80022a6:	4619      	mov	r1, r3
 80022a8:	2a00      	cmp	r2, #0
 80022aa:	d0f7      	beq.n	800229c <st_usbfs_ep_stall_set+0xa4>
 80022ac:	2010      	movs	r0, #16
 80022ae:	4201      	tst	r1, r0
 80022b0:	d0f6      	beq.n	80022a0 <st_usbfs_ep_stall_set+0xa8>
 80022b2:	405c      	eors	r4, r3
 80022b4:	e7f4      	b.n	80022a0 <st_usbfs_ep_stall_set+0xa8>
 80022b6:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80022ba:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80022be:	602c      	str	r4, [r5, #0]
		if (!stall) {
 80022c0:	b9e2      	cbnz	r2, 80022fc <st_usbfs_ep_stall_set+0x104>
			USB_CLR_EP_TX_DTOG(addr);
 80022c2:	682b      	ldr	r3, [r5, #0]
 80022c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022c8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	0c1b      	lsrs	r3, r3, #16
 80022d0:	602b      	str	r3, [r5, #0]
 80022d2:	e013      	b.n	80022fc <st_usbfs_ep_stall_set+0x104>
		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 80022d4:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80022d8:	e007      	b.n	80022ea <st_usbfs_ep_stall_set+0xf2>
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	b29b      	uxth	r3, r3
 80022de:	b143      	cbz	r3, 80022f2 <st_usbfs_ep_stall_set+0xfa>
 80022e0:	4619      	mov	r1, r3
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d0f6      	beq.n	80022d4 <st_usbfs_ep_stall_set+0xdc>
 80022e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80022ea:	4201      	tst	r1, r0
 80022ec:	d0f5      	beq.n	80022da <st_usbfs_ep_stall_set+0xe2>
 80022ee:	405c      	eors	r4, r3
 80022f0:	e7f3      	b.n	80022da <st_usbfs_ep_stall_set+0xe2>
 80022f2:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80022f6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80022fa:	602c      	str	r4, [r5, #0]
}
 80022fc:	bc70      	pop	{r4, r5, r6}
 80022fe:	4770      	bx	lr

08002300 <st_usbfs_ep_stall_get>:
	if (addr & 0x80) {
 8002300:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002304:	d10c      	bne.n	8002320 <st_usbfs_ep_stall_get+0x20>
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 8002306:	0089      	lsls	r1, r1, #2
 8002308:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800230c:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8002310:	680b      	ldr	r3, [r1, #0]
 8002312:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231a:	d011      	beq.n	8002340 <st_usbfs_ep_stall_get+0x40>
	return 0;
 800231c:	2000      	movs	r0, #0
 800231e:	4770      	bx	lr
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
 8002320:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002324:	0089      	lsls	r1, r1, #2
 8002326:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800232a:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800232e:	680b      	ldr	r3, [r1, #0]
 8002330:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002334:	2b10      	cmp	r3, #16
 8002336:	d001      	beq.n	800233c <st_usbfs_ep_stall_get+0x3c>
	return 0;
 8002338:	2000      	movs	r0, #0
 800233a:	4770      	bx	lr
			return 1;
 800233c:	2001      	movs	r0, #1
 800233e:	4770      	bx	lr
			return 1;
 8002340:	2001      	movs	r0, #1
}
 8002342:	4770      	bx	lr

08002344 <os_event_init>:
static Evt_t lastSignaledEvent = NO_EVENT;
#endif

void os_event_init(void) {
#if( N_TOTAL_EVENTS > 0 )
    nEvents = 0;
 8002344:	4b01      	ldr	r3, [pc, #4]	; (800234c <os_event_init+0x8>)
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
#endif
}
 800234a:	4770      	bx	lr
 800234c:	20000246 	.word	0x20000246

08002350 <os_signal_event>:
    }
#endif
}


void os_signal_event( Evt_t ev ) {
 8002350:	b508      	push	{r3, lr}
	lastSignaledEvent = ev;
 8002352:	4b02      	ldr	r3, [pc, #8]	; (800235c <os_signal_event+0xc>)
 8002354:	7018      	strb	r0, [r3, #0]
    os_task_signal_event( ev );
 8002356:	f000 f95d 	bl	8002614 <os_task_signal_event>
}
 800235a:	bd08      	pop	{r3, pc}
 800235c:	20000054 	.word	0x20000054

08002360 <os_event_set_signaling_tid>:


void os_event_set_signaling_tid( Evt_t ev, uint8_t tid ) {
#if( N_TOTAL_EVENTS > 0 )
	eventList[ ev ].signaledByTid = tid;
 8002360:	4b02      	ldr	r3, [pc, #8]	; (800236c <os_event_set_signaling_tid+0xc>)
 8002362:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002366:	7041      	strb	r1, [r0, #1]
#endif
}
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000188 	.word	0x20000188

08002370 <os_init>:
*   }
*   @endcode
*       
*		 */
/*********************************************************************************/
void os_init( void ) {
 8002370:	b508      	push	{r3, lr}
	running_tid = NO_TID;
 8002372:	23ff      	movs	r3, #255	; 0xff
 8002374:	4a07      	ldr	r2, [pc, #28]	; (8002394 <os_init+0x24>)
 8002376:	7013      	strb	r3, [r2, #0]
    last_running_task = NO_TID;
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <os_init+0x28>)
 800237a:	7013      	strb	r3, [r2, #0]
    running = 0;
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <os_init+0x2c>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
    os_sem_init();
 8002382:	f000 f869 	bl	8002458 <os_sem_init>
    os_event_init();
 8002386:	f7ff ffdd 	bl	8002344 <os_event_init>
    os_msgQ_init();
 800238a:	f000 f80f 	bl	80023ac <os_msgQ_init>
    os_task_init();
 800238e:	f000 f881 	bl	8002494 <os_task_init>
}
 8002392:	bd08      	pop	{r3, pc}
 8002394:	2000085c 	.word	0x2000085c
 8002398:	2000085e 	.word	0x2000085e
 800239c:	2000085d 	.word	0x2000085d

080023a0 <os_running>:
}


uint8_t os_running( void ) {
    return running;
}
 80023a0:	4b01      	ldr	r3, [pc, #4]	; (80023a8 <os_running+0x8>)
 80023a2:	7818      	ldrb	r0, [r3, #0]
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	2000085d 	.word	0x2000085d

080023ac <os_msgQ_init>:

void os_msgQ_init() {
    
#if( N_QUEUES > 0 )
    uint8_t i;
    nQueues = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <os_msgQ_init+0x30>)
 80023b0:	7013      	strb	r3, [r2, #0]
    for ( i = 0; i < N_QUEUES; ++i  ) {
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d811      	bhi.n	80023da <os_msgQ_init+0x2e>
void os_msgQ_init() {
 80023b6:	b410      	push	{r4}
        msgQList[ i ].q.list = 0;
 80023b8:	4c09      	ldr	r4, [pc, #36]	; (80023e0 <os_msgQ_init+0x34>)
 80023ba:	0118      	lsls	r0, r3, #4
 80023bc:	1821      	adds	r1, r4, r0
 80023be:	2200      	movs	r2, #0
 80023c0:	5022      	str	r2, [r4, r0]
        msgQList[ i ].q.head = 0;
 80023c2:	718a      	strb	r2, [r1, #6]
        msgQList[ i ].q.tail = 0;
 80023c4:	71ca      	strb	r2, [r1, #7]
        msgQList[ i ].q.size = 0;
 80023c6:	720a      	strb	r2, [r1, #8]
        msgQList[ i ].q.messageSize = 0;
 80023c8:	808a      	strh	r2, [r1, #4]
        msgQList[ i ].taskId = 0;
 80023ca:	730a      	strb	r2, [r1, #12]
        msgQList[ i ].change = 0;
 80023cc:	734a      	strb	r2, [r1, #13]
    for ( i = 0; i < N_QUEUES; ++i  ) {
 80023ce:	3301      	adds	r3, #1
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d9f0      	bls.n	80023b8 <os_msgQ_init+0xc>
    }
#endif
}
 80023d6:	bc10      	pop	{r4}
 80023d8:	4770      	bx	lr
 80023da:	4770      	bx	lr
 80023dc:	20000247 	.word	0x20000247
 80023e0:	20000198 	.word	0x20000198

080023e4 <os_msgQ_tick>:
#else
    return 0;
#endif
}

void os_msgQ_tick( MsgQ_t queue ) {
 80023e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023e8:	4604      	mov	r4, r0
#if( N_QUEUES > 0 )
    uint8_t nextMessage;
    Msg_t *pMsg;
    OSQueue_t *q = &msgQList[ queue ].q;
    nextMessage = (q->tail+1) % q->size;
 80023ea:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <os_msgQ_tick+0x70>)
 80023ec:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 80023f0:	79d3      	ldrb	r3, [r2, #7]
 80023f2:	1c59      	adds	r1, r3, #1
 80023f4:	7a10      	ldrb	r0, [r2, #8]
 80023f6:	fb91 f3f0 	sdiv	r3, r1, r0
 80023fa:	fb00 1313 	mls	r3, r0, r3, r1
 80023fe:	b2db      	uxtb	r3, r3

    uint8_t head = q->head;
 8002400:	7995      	ldrb	r5, [r2, #6]
    uint16_t msgSz = q->messageSize;
 8002402:	8896      	ldrh	r6, [r2, #4]

    while ( nextMessage != head ) {
 8002404:	e009      	b.n	800241a <os_msgQ_tick+0x36>
            --(pMsg->delay);
            if ( pMsg->delay == 0 ) {
                event_ISR_signal( msgQList[ queue ].change );
            }
        }
        nextMessage = (nextMessage + 1) % q->size;
 8002406:	1c7a      	adds	r2, r7, #1
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <os_msgQ_tick+0x70>)
 800240a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800240e:	7a19      	ldrb	r1, [r3, #8]
 8002410:	fb92 f3f1 	sdiv	r3, r2, r1
 8002414:	fb01 2313 	mls	r3, r1, r3, r2
 8002418:	b2db      	uxtb	r3, r3
    while ( nextMessage != head ) {
 800241a:	42ab      	cmp	r3, r5
 800241c:	d018      	beq.n	8002450 <os_msgQ_tick+0x6c>
        pMsg = (Msg_t*)( (Mem_t)q->list + nextMessage * msgSz );
 800241e:	0122      	lsls	r2, r4, #4
 8002420:	490c      	ldr	r1, [pc, #48]	; (8002454 <os_msgQ_tick+0x70>)
 8002422:	588a      	ldr	r2, [r1, r2]
 8002424:	461f      	mov	r7, r3
 8002426:	fb03 2306 	mla	r3, r3, r6, r2
        if ( pMsg->delay > 0 ) {
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	2a00      	cmp	r2, #0
 800242e:	d0ea      	beq.n	8002406 <os_msgQ_tick+0x22>
            --(pMsg->delay);
 8002430:	3a01      	subs	r2, #1
 8002432:	605a      	str	r2, [r3, #4]
            if ( pMsg->delay == 0 ) {
 8002434:	2a00      	cmp	r2, #0
 8002436:	d1e6      	bne.n	8002406 <os_msgQ_tick+0x22>
                event_ISR_signal( msgQList[ queue ].change );
 8002438:	eb01 1804 	add.w	r8, r1, r4, lsl #4
 800243c:	f898 000d 	ldrb.w	r0, [r8, #13]
 8002440:	f7ff ff86 	bl	8002350 <os_signal_event>
 8002444:	21fe      	movs	r1, #254	; 0xfe
 8002446:	f898 000d 	ldrb.w	r0, [r8, #13]
 800244a:	f7ff ff89 	bl	8002360 <os_event_set_signaling_tid>
 800244e:	e7da      	b.n	8002406 <os_msgQ_tick+0x22>

    }
#endif    
}
 8002450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002454:	20000198 	.word	0x20000198

08002458 <os_sem_init>:
static Sem_t nSemaphores;
#endif							   

void os_sem_init(void) {
#if ( N_TOTAL_SEMAPHORES > 0 )
    nSemaphores = 0;
 8002458:	4b01      	ldr	r3, [pc, #4]	; (8002460 <os_sem_init+0x8>)
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
#endif
}
 800245e:	4770      	bx	lr
 8002460:	20000248 	.word	0x20000248

08002464 <os_task_wait_queue_empty>:
    result = 1;
    event = EVENT_QUEUE_SIZE;

    do {
        --event;
        if ( task_list[ tid ].eventQueue.eventList[ event ] != 0 ) {
 8002464:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002468:	0082      	lsls	r2, r0, #2
 800246a:	4b04      	ldr	r3, [pc, #16]	; (800247c <os_task_wait_queue_empty+0x18>)
 800246c:	4413      	add	r3, r2
 800246e:	7d5b      	ldrb	r3, [r3, #21]
 8002470:	b10b      	cbz	r3, 8002476 <os_task_wait_queue_empty+0x12>
            result = 0;
 8002472:	2000      	movs	r0, #0
        }
    } while ( event != 0 );
        

    return result;
}
 8002474:	4770      	bx	lr
        if ( task_list[ tid ].eventQueue.eventList[ event ] != 0 ) {
 8002476:	2001      	movs	r0, #1
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	200001b8 	.word	0x200001b8

08002480 <task_ready_set>:
    task_list[ tid ].semaphore = sem;
}


static void task_ready_set( uint8_t tid ) {
    task_list[ tid ].state = READY;
 8002480:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002484:	0082      	lsls	r2, r0, #2
 8002486:	4b02      	ldr	r3, [pc, #8]	; (8002490 <task_ready_set+0x10>)
 8002488:	4413      	add	r3, r2
 800248a:	2205      	movs	r2, #5
 800248c:	711a      	strb	r2, [r3, #4]
}
 800248e:	4770      	bx	lr
 8002490:	200001b8 	.word	0x200001b8

08002494 <os_task_init>:
    nTasks = 0;
 8002494:	2100      	movs	r1, #0
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <os_task_init+0x6c>)
 8002498:	7019      	strb	r1, [r3, #0]
    for ( i = 0; i < N_TASKS; ++i ) {
 800249a:	2904      	cmp	r1, #4
 800249c:	d82f      	bhi.n	80024fe <os_task_init+0x6a>
void os_task_init( void ) {
 800249e:	b470      	push	{r4, r5, r6}
        task = &task_list[i];
 80024a0:	4608      	mov	r0, r1
        task->clockId = 0xff;
 80024a2:	4e18      	ldr	r6, [pc, #96]	; (8002504 <os_task_init+0x70>)
 80024a4:	00cb      	lsls	r3, r1, #3
 80024a6:	1a5b      	subs	r3, r3, r1
 80024a8:	009d      	lsls	r5, r3, #2
 80024aa:	1972      	adds	r2, r6, r5
 80024ac:	24ff      	movs	r4, #255	; 0xff
 80024ae:	7514      	strb	r4, [r2, #20]
        task->internal_state = 0xff;
 80024b0:	80d4      	strh	r4, [r2, #6]
        task->msgQ = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	73d3      	strb	r3, [r2, #15]
        task->waitQ = 0;
 80024b6:	7413      	strb	r3, [r2, #16]
        task->msgChangeEvent = 0;
 80024b8:	7453      	strb	r3, [r2, #17]
        task->msgResult = 0;
 80024ba:	7493      	strb	r3, [r2, #18]
        task->prio = 0;
 80024bc:	7353      	strb	r3, [r2, #13]
        task->savedState = SUSPENDED;
 80024be:	7153      	strb	r3, [r2, #5]
        task->semaphore = NO_SEM;
 80024c0:	7394      	strb	r4, [r2, #14]
        task->state = SUSPENDED;
 80024c2:	7113      	strb	r3, [r2, #4]
        task->taskproc = 0;
 80024c4:	5173      	str	r3, [r6, r5]
        task->tid = NO_TID;
 80024c6:	7314      	strb	r4, [r2, #12]
        task->time = 0;
 80024c8:	6093      	str	r3, [r2, #8]
        task->waitSingleEvent = 0;
 80024ca:	74d3      	strb	r3, [r2, #19]
        for ( j = 0; j < sizeof( task->eventQueue.eventList); j++ ) {
 80024cc:	b163      	cbz	r3, 80024e8 <os_task_init+0x54>
        task->data = 0;
 80024ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80024d2:	0082      	lsls	r2, r0, #2
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <os_task_init+0x70>)
 80024d6:	4413      	add	r3, r2
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]
    for ( i = 0; i < N_TASKS; ++i ) {
 80024dc:	3101      	adds	r1, #1
 80024de:	b2c9      	uxtb	r1, r1
 80024e0:	2904      	cmp	r1, #4
 80024e2:	d9dd      	bls.n	80024a0 <os_task_init+0xc>
}
 80024e4:	bc70      	pop	{r4, r5, r6}
 80024e6:	4770      	bx	lr
            task->eventQueue.eventList[j] = 0xff;
 80024e8:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 80024ec:	0094      	lsls	r4, r2, #2
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <os_task_init+0x70>)
 80024f0:	4422      	add	r2, r4
 80024f2:	441a      	add	r2, r3
 80024f4:	24ff      	movs	r4, #255	; 0xff
 80024f6:	7554      	strb	r4, [r2, #21]
        for ( j = 0; j < sizeof( task->eventQueue.eventList); j++ ) {
 80024f8:	3301      	adds	r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	e7e6      	b.n	80024cc <os_task_init+0x38>
 80024fe:	4770      	bx	lr
 8002500:	20000249 	.word	0x20000249
 8002504:	200001b8 	.word	0x200001b8

08002508 <os_task_highest_prio_ready_task>:
uint8_t os_task_highest_prio_ready_task( void ) {
 8002508:	b470      	push	{r4, r5, r6}
    uint8_t highest_prio = 255;
 800250a:	26ff      	movs	r6, #255	; 0xff
    uint8_t highest_prio_task = NO_TID;
 800250c:	4630      	mov	r0, r6
    for ( index = 0; index != nTasks; ++index ) {
 800250e:	2300      	movs	r3, #0
 8002510:	e001      	b.n	8002516 <os_task_highest_prio_ready_task+0xe>
 8002512:	3301      	adds	r3, #1
 8002514:	b29b      	uxth	r3, r3
 8002516:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <os_task_highest_prio_ready_task+0x3c>)
 8002518:	7812      	ldrb	r2, [r2, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d010      	beq.n	8002540 <os_task_highest_prio_ready_task+0x38>
        prio = task->prio;
 800251e:	490a      	ldr	r1, [pc, #40]	; (8002548 <os_task_highest_prio_ready_task+0x40>)
 8002520:	00da      	lsls	r2, r3, #3
 8002522:	1ad5      	subs	r5, r2, r3
 8002524:	00ac      	lsls	r4, r5, #2
 8002526:	440c      	add	r4, r1
 8002528:	7b65      	ldrb	r5, [r4, #13]
        state = task->state;
 800252a:	1ad2      	subs	r2, r2, r3
 800252c:	0094      	lsls	r4, r2, #2
 800252e:	4421      	add	r1, r4
 8002530:	790a      	ldrb	r2, [r1, #4]
        if ( READY == state ) {
 8002532:	2a05      	cmp	r2, #5
 8002534:	d1ed      	bne.n	8002512 <os_task_highest_prio_ready_task+0xa>
            if ( prio < highest_prio ) {
 8002536:	42ae      	cmp	r6, r5
 8002538:	d9eb      	bls.n	8002512 <os_task_highest_prio_ready_task+0xa>
                highest_prio_task = index;
 800253a:	b2d8      	uxtb	r0, r3
                highest_prio = prio;
 800253c:	462e      	mov	r6, r5
 800253e:	e7e8      	b.n	8002512 <os_task_highest_prio_ready_task+0xa>
}
 8002540:	bc70      	pop	{r4, r5, r6}
 8002542:	4770      	bx	lr
 8002544:	20000249 	.word	0x20000249
 8002548:	200001b8 	.word	0x200001b8

0800254c <os_task_clear_wait_queue>:
void os_task_clear_wait_queue( uint8_t tid ) {
 800254c:	b410      	push	{r4}
    task->waitSingleEvent = 0;
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <os_task_clear_wait_queue+0x18>)
 8002550:	00c3      	lsls	r3, r0, #3
 8002552:	1a1c      	subs	r4, r3, r0
 8002554:	00a1      	lsls	r1, r4, #2
 8002556:	4411      	add	r1, r2
 8002558:	2400      	movs	r4, #0
 800255a:	74cc      	strb	r4, [r1, #19]
        task->eventQueue.eventList[ event ] = 0;
 800255c:	754c      	strb	r4, [r1, #21]
}
 800255e:	bc10      	pop	{r4}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	200001b8 	.word	0x200001b8

08002568 <os_task_tick>:
void os_task_tick( uint8_t id, uint32_t tickSize ) {
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256a:	4606      	mov	r6, r0
 800256c:	460f      	mov	r7, r1
    for ( index = 0; index != nTasks; ++index ) {
 800256e:	2400      	movs	r4, #0
 8002570:	e012      	b.n	8002598 <os_task_tick+0x30>
        if ( task_list[ index ].clockId == id ) {
 8002572:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8002576:	0091      	lsls	r1, r2, #2
 8002578:	4a24      	ldr	r2, [pc, #144]	; (800260c <os_task_tick+0xa4>)
 800257a:	440a      	add	r2, r1
 800257c:	7d12      	ldrb	r2, [r2, #20]
 800257e:	42b2      	cmp	r2, r6
 8002580:	d024      	beq.n	80025cc <os_task_tick+0x64>
        if ( id == 0 ) {
 8002582:	b93e      	cbnz	r6, 8002594 <os_task_tick+0x2c>
            if ( task_list[ index ].msgQ != NO_QUEUE ) {
 8002584:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8002588:	00aa      	lsls	r2, r5, #2
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <os_task_tick+0xa4>)
 800258c:	4413      	add	r3, r2
 800258e:	7bd8      	ldrb	r0, [r3, #15]
 8002590:	28ff      	cmp	r0, #255	; 0xff
 8002592:	d136      	bne.n	8002602 <os_task_tick+0x9a>
    for ( index = 0; index != nTasks; ++index ) {
 8002594:	3401      	adds	r4, #1
 8002596:	b2e4      	uxtb	r4, r4
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <os_task_tick+0xa8>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	42a3      	cmp	r3, r4
 800259e:	d033      	beq.n	8002608 <os_task_tick+0xa0>
		state = task_list[ index ].state;
 80025a0:	4625      	mov	r5, r4
 80025a2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80025a6:	009a      	lsls	r2, r3, #2
 80025a8:	4b18      	ldr	r3, [pc, #96]	; (800260c <os_task_tick+0xa4>)
 80025aa:	4413      	add	r3, r2
 80025ac:	791b      	ldrb	r3, [r3, #4]
    if (( state == WAITING_TIME ) || ( state == WAITING_EVENT_TIMEOUT )){
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d0df      	beq.n	8002572 <os_task_tick+0xa>
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d0dd      	beq.n	8002572 <os_task_tick+0xa>
		else if ( state ==  WAITING_SEM ) {
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d1e3      	bne.n	8002582 <os_task_tick+0x1a>
			task_list[ index ].time++;
 80025ba:	00e2      	lsls	r2, r4, #3
 80025bc:	1b12      	subs	r2, r2, r4
 80025be:	0091      	lsls	r1, r2, #2
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <os_task_tick+0xa4>)
 80025c2:	440b      	add	r3, r1
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	3201      	adds	r2, #1
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	e7da      	b.n	8002582 <os_task_tick+0x1a>
          if ( task_list[ index ].time <= tickSize ) {
 80025cc:	4a0f      	ldr	r2, [pc, #60]	; (800260c <os_task_tick+0xa4>)
 80025ce:	440a      	add	r2, r1
 80025d0:	6892      	ldr	r2, [r2, #8]
 80025d2:	42ba      	cmp	r2, r7
 80025d4:	d80d      	bhi.n	80025f2 <os_task_tick+0x8a>
            task_list[ index ].time = 0;
 80025d6:	4a0d      	ldr	r2, [pc, #52]	; (800260c <os_task_tick+0xa4>)
 80025d8:	440a      	add	r2, r1
 80025da:	2100      	movs	r1, #0
 80025dc:	6091      	str	r1, [r2, #8]
            if ( state == WAITING_EVENT_TIMEOUT ) {
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d003      	beq.n	80025ea <os_task_tick+0x82>
            task_ready_set( index );
 80025e2:	4620      	mov	r0, r4
 80025e4:	f7ff ff4c 	bl	8002480 <task_ready_set>
 80025e8:	e7cb      	b.n	8002582 <os_task_tick+0x1a>
              os_task_clear_wait_queue( index );
 80025ea:	4620      	mov	r0, r4
 80025ec:	f7ff ffae 	bl	800254c <os_task_clear_wait_queue>
 80025f0:	e7f7      	b.n	80025e2 <os_task_tick+0x7a>
            task_list[ index ].time -= tickSize;
 80025f2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80025f6:	0099      	lsls	r1, r3, #2
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <os_task_tick+0xa4>)
 80025fa:	440b      	add	r3, r1
 80025fc:	1bd2      	subs	r2, r2, r7
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	e7bf      	b.n	8002582 <os_task_tick+0x1a>
                os_msgQ_tick( task_list[ index ].msgQ );
 8002602:	f7ff feef 	bl	80023e4 <os_msgQ_tick>
 8002606:	e7c5      	b.n	8002594 <os_task_tick+0x2c>
}
 8002608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800260a:	bf00      	nop
 800260c:	200001b8 	.word	0x200001b8
 8002610:	20000249 	.word	0x20000249

08002614 <os_task_signal_event>:
void os_task_signal_event( Evt_t eventId ) {
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eventListIndex = eventId / 8;
 8002616:	08c6      	lsrs	r6, r0, #3
    shift = eventId & 0x07;
 8002618:	f000 0507 	and.w	r5, r0, #7
    for ( index = 0; index != nTasks; index++ ) {
 800261c:	2400      	movs	r4, #0
 800261e:	e009      	b.n	8002634 <os_task_signal_event+0x20>
		    taskWaitStateOK = 1;
 8002620:	2001      	movs	r0, #1
 8002622:	e017      	b.n	8002654 <os_task_signal_event+0x40>
                os_task_clear_wait_queue( index );
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ff91 	bl	800254c <os_task_clear_wait_queue>
                task_ready_set( index );
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff ff28 	bl	8002480 <task_ready_set>
    for ( index = 0; index != nTasks; index++ ) {
 8002630:	3401      	adds	r4, #1
 8002632:	b2e4      	uxtb	r4, r4
 8002634:	4b1b      	ldr	r3, [pc, #108]	; (80026a4 <os_task_signal_event+0x90>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	42a3      	cmp	r3, r4
 800263a:	d032      	beq.n	80026a2 <os_task_signal_event+0x8e>
		state = task_list[ index ].state;
 800263c:	4622      	mov	r2, r4
 800263e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8002642:	0099      	lsls	r1, r3, #2
 8002644:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <os_task_signal_event+0x94>)
 8002646:	440b      	add	r3, r1
 8002648:	791b      	ldrb	r3, [r3, #4]
		if (( state == WAITING_EVENT ) || ( state == WAITING_EVENT_TIMEOUT )) {
 800264a:	3b03      	subs	r3, #3
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d9e6      	bls.n	8002620 <os_task_signal_event+0xc>
		taskWaitStateOK = 0;
 8002652:	2000      	movs	r0, #0
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 8002654:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8002658:	0099      	lsls	r1, r3, #2
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <os_task_signal_event+0x94>)
 800265c:	440b      	add	r3, r1
 800265e:	4433      	add	r3, r6
 8002660:	f993 1015 	ldrsb.w	r1, [r3, #21]
 8002664:	2301      	movs	r3, #1
 8002666:	40ab      	lsls	r3, r5
 8002668:	b25b      	sxtb	r3, r3
        if ( taskWaitingForEvent  &&  taskWaitStateOK ) {
 800266a:	4219      	tst	r1, r3
 800266c:	d0e0      	beq.n	8002630 <os_task_signal_event+0x1c>
 800266e:	2800      	cmp	r0, #0
 8002670:	d0de      	beq.n	8002630 <os_task_signal_event+0x1c>
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 8002672:	f8df c034 	ldr.w	ip, [pc, #52]	; 80026a8 <os_task_signal_event+0x94>
 8002676:	00d7      	lsls	r7, r2, #3
 8002678:	eba7 0e02 	sub.w	lr, r7, r2
 800267c:	ea4f 008e 	mov.w	r0, lr, lsl #2
 8002680:	4686      	mov	lr, r0
 8002682:	4460      	add	r0, ip
 8002684:	4430      	add	r0, r6
 8002686:	ea21 0303 	bic.w	r3, r1, r3
 800268a:	7543      	strb	r3, [r0, #21]
            if ( task_list[ index ].waitSingleEvent || os_task_wait_queue_empty( index ) ) {
 800268c:	44f4      	add	ip, lr
 800268e:	f89c 3013 	ldrb.w	r3, [ip, #19]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1c6      	bne.n	8002624 <os_task_signal_event+0x10>
 8002696:	4620      	mov	r0, r4
 8002698:	f7ff fee4 	bl	8002464 <os_task_wait_queue_empty>
 800269c:	2800      	cmp	r0, #0
 800269e:	d0c7      	beq.n	8002630 <os_task_signal_event+0x1c>
 80026a0:	e7c0      	b.n	8002624 <os_task_signal_event+0x10>
}
 80026a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026a4:	20000249 	.word	0x20000249
 80026a8:	200001b8 	.word	0x200001b8

080026ac <os_task_run>:
void os_task_run( void ) {
 80026ac:	b508      	push	{r3, lr}
    os_assert( running_tid < nTasks );
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <os_task_run+0x2c>)
 80026b0:	781a      	ldrb	r2, [r3, #0]
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <os_task_run+0x30>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d208      	bcs.n	80026cc <os_task_run+0x20>
    task_list[ running_tid ].taskproc();
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <os_task_run+0x2c>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80026c2:	009a      	lsls	r2, r3, #2
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <os_task_run+0x34>)
 80026c6:	589b      	ldr	r3, [r3, r2]
 80026c8:	4798      	blx	r3
}
 80026ca:	bd08      	pop	{r3, pc}
    os_assert( running_tid < nTasks );
 80026cc:	f44f 701c 	mov.w	r0, #624	; 0x270
 80026d0:	f000 f808 	bl	80026e4 <os_on_assert>
 80026d4:	e7f1      	b.n	80026ba <os_task_run+0xe>
 80026d6:	bf00      	nop
 80026d8:	2000085c 	.word	0x2000085c
 80026dc:	20000249 	.word	0x20000249
 80026e0:	200001b8 	.word	0x200001b8

080026e4 <os_on_assert>:


#include "cocoos.h"
#include <logger.h> ////

void os_on_assert( uint16_t line ) {
 80026e4:	b508      	push	{r3, lr}
 80026e6:	4604      	mov	r4, r0
    debug_print("*** cocoos assert failed "); debug_print_unsigned(line); debug_flush();
 80026e8:	4806      	ldr	r0, [pc, #24]	; (8002704 <os_on_assert+0x20>)
 80026ea:	f000 f9b1 	bl	8002a50 <debug_print>
 80026ee:	4620      	mov	r0, r4
 80026f0:	f000 f9be 	bl	8002a70 <debug_print_unsigned>
 80026f4:	f000 f9a7 	bl	8002a46 <debug_flush>
    static volatile uint16_t l;
    os_disable_interrupts();
    l = line;
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <os_on_assert+0x24>)
 80026fa:	801c      	strh	r4, [r3, #0]
    l = l;
 80026fc:	881a      	ldrh	r2, [r3, #0]
 80026fe:	b292      	uxth	r2, r2
 8002700:	801a      	strh	r2, [r3, #0]
 8002702:	e7fe      	b.n	8002702 <os_on_assert+0x1e>
 8002704:	08004a60 	.word	0x08004a60
 8002708:	20000244 	.word	0x20000244

0800270c <os_cbkSleep>:
*       
*/
/*********************************************************************************/
void os_cbkSleep( void ) {
    /* Enter low power mode here */
}
 800270c:	4770      	bx	lr

0800270e <os_tick>:
void os_tick( void ) {
 800270e:	b508      	push	{r3, lr}
    os_task_tick( 0, 1 );
 8002710:	2101      	movs	r1, #1
 8002712:	2000      	movs	r0, #0
 8002714:	f7ff ff28 	bl	8002568 <os_task_tick>
}
 8002718:	bd08      	pop	{r3, pc}

0800271a <memcmp>:

int
memcmp (const void *m1,
	const void *m2,
	size_t n)
{
 800271a:	b410      	push	{r4}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  unsigned char *s1 = (unsigned char *) m1;
  unsigned char *s2 = (unsigned char *) m2;

  while (n--)
 800271c:	1e54      	subs	r4, r2, #1
 800271e:	b14a      	cbz	r2, 8002734 <memcmp+0x1a>
    {
      if (*s1 != *s2)
 8002720:	7803      	ldrb	r3, [r0, #0]
 8002722:	780a      	ldrb	r2, [r1, #0]
 8002724:	4293      	cmp	r3, r2
 8002726:	d103      	bne.n	8002730 <memcmp+0x16>
	{
	  return *s1 - *s2;
	}
      s1++;
 8002728:	3001      	adds	r0, #1
      s2++;
 800272a:	3101      	adds	r1, #1
  while (n--)
 800272c:	4622      	mov	r2, r4
 800272e:	e7f5      	b.n	800271c <memcmp+0x2>
	  return *s1 - *s2;
 8002730:	1a98      	subs	r0, r3, r2
 8002732:	e000      	b.n	8002736 <memcmp+0x1c>
    }
  return 0;
 8002734:	2000      	movs	r0, #0
      s2++;
    }

  return 0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8002736:	bc10      	pop	{r4}
 8002738:	4770      	bx	lr

0800273a <memcpy>:
void *
__inhibit_loop_to_libcall
memcpy (void *__restrict dst0,
	const void *__restrict src0,
	size_t len0)
{
 800273a:	b410      	push	{r4}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *dst = (char *) dst0;
 800273c:	4603      	mov	r3, r0
  char *src = (char *) src0;

  void *save = dst0;

  while (len0--)
 800273e:	e004      	b.n	800274a <memcpy+0x10>
    {
      *dst++ = *src++;
 8002740:	780a      	ldrb	r2, [r1, #0]
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	3101      	adds	r1, #1
 8002746:	3301      	adds	r3, #1
  while (len0--)
 8002748:	4622      	mov	r2, r4
 800274a:	1e54      	subs	r4, r2, #1
 800274c:	2a00      	cmp	r2, #0
 800274e:	d1f7      	bne.n	8002740 <memcpy+0x6>
  while (len0--)
    *dst++ = *src++;

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8002750:	bc10      	pop	{r4}
 8002752:	4770      	bx	lr

08002754 <memset>:
void *
__inhibit_loop_to_libcall
memset (void *m,
	int c,
	size_t n)
{
 8002754:	b410      	push	{r4}
  char *s = (char *) m;
 8002756:	4603      	mov	r3, r0
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 8002758:	e002      	b.n	8002760 <memset+0xc>
    *s++ = (char) c;
 800275a:	7019      	strb	r1, [r3, #0]
 800275c:	3301      	adds	r3, #1
  while (n--)
 800275e:	4622      	mov	r2, r4
 8002760:	1e54      	subs	r4, r2, #1
 8002762:	2a00      	cmp	r2, #0
 8002764:	d1f9      	bne.n	800275a <memset+0x6>

  return m;
}
 8002766:	bc10      	pop	{r4}
 8002768:	4770      	bx	lr

0800276a <strlen>:
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 800276a:	4603      	mov	r3, r0
 800276c:	e000      	b.n	8002770 <strlen+0x6>
    str++;
 800276e:	3301      	adds	r3, #1
  while (*str)
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	2a00      	cmp	r2, #0
 8002774:	d1fb      	bne.n	800276e <strlen+0x4>
  return str - start;
}
 8002776:	1a18      	subs	r0, r3, r0
 8002778:	4770      	bx	lr

0800277a <strncpy>:
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *dscan;
  const char *sscan;

  dscan = dst0;
 800277a:	4603      	mov	r3, r0
  sscan = src0;
  while (count > 0)
 800277c:	b1ca      	cbz	r2, 80027b2 <strncpy+0x38>
{
 800277e:	b430      	push	{r4, r5}
    {
      --count;
 8002780:	3a01      	subs	r2, #1
      if ((*dscan++ = *sscan++) == '\0')
 8002782:	1c4d      	adds	r5, r1, #1
 8002784:	1c5c      	adds	r4, r3, #1
 8002786:	7809      	ldrb	r1, [r1, #0]
 8002788:	7019      	strb	r1, [r3, #0]
 800278a:	b121      	cbz	r1, 8002796 <strncpy+0x1c>
 800278c:	4629      	mov	r1, r5
 800278e:	4623      	mov	r3, r4
  while (count > 0)
 8002790:	2a00      	cmp	r2, #0
 8002792:	d1f5      	bne.n	8002780 <strncpy+0x6>
 8002794:	e000      	b.n	8002798 <strncpy+0x1e>
      if ((*dscan++ = *sscan++) == '\0')
 8002796:	4623      	mov	r3, r4
	break;
    }
  while (count-- > 0)
 8002798:	1e51      	subs	r1, r2, #1
 800279a:	b122      	cbz	r2, 80027a6 <strncpy+0x2c>
    *dscan++ = '\0';
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	3301      	adds	r3, #1
  while (count-- > 0)
 80027a2:	460a      	mov	r2, r1
 80027a4:	e7f8      	b.n	8002798 <strncpy+0x1e>
  while (count-- > 0)
    *dst++ = '\0';

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 80027a6:	bc30      	pop	{r4, r5}
 80027a8:	4770      	bx	lr
    *dscan++ = '\0';
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	3301      	adds	r3, #1
  while (count-- > 0)
 80027b0:	460a      	mov	r2, r1
 80027b2:	1e51      	subs	r1, r2, #1
 80027b4:	2a00      	cmp	r2, #0
 80027b6:	d1f8      	bne.n	80027aa <strncpy+0x30>
 80027b8:	4770      	bx	lr
	...

080027bc <_ZL10__semihostiPv>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/connect.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!logEnabled) return -1;
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <_ZL10__semihostiPv+0x20>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	b143      	cbz	r3, 80027d4 <_ZL10__semihostiPv+0x18>
static int __semihost(int command, void* message) {
 80027c2:	b410      	push	{r4}
 80027c4:	4602      	mov	r2, r0
 80027c6:	460c      	mov	r4, r1
	:  //  Input operand list:
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
 80027c8:	4610      	mov	r0, r2
 80027ca:	4621      	mov	r1, r4
 80027cc:	beab      	bkpt	0x00ab
	return 0;  //  TODO
 80027ce:	2000      	movs	r0, #0
}
 80027d0:	bc10      	pop	{r4}
 80027d2:	4770      	bx	lr
    if (!logEnabled) return -1;
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000462 	.word	0x20000462

080027e0 <_ZL16write_all_outputPKhtb>:
#define MAX_OUTPUT_LENGTH 60  //  Output at most 60 bytes at a time.

static uint16_t write_all_output(
    const uint8_t *buf,
	uint16_t len,
    bool forced) {
 80027e0:	b570      	push	{r4, r5, r6, lr}
 80027e2:	4606      	mov	r6, r0
    //  Write the buffer to all outputs: Arm Semihosting, USB Serial, HF2, ...
    //  We must flush as quickly as possible and USB Serial can only handle 64 bytes, so we just flush the next 60 bytes.
    //  Return the number of bytes flushed.
    ////if (!forced && target_in_isr()) { return 0; }      //  Can't write when called by interrupt routine, unless it's forced.
    //  if (target_in_isr()) { return 0; }      //  Can't write when called by interrupt routine
    uint16_t outlen = (len > MAX_OUTPUT_LENGTH) ? MAX_OUTPUT_LENGTH : len;
 80027e4:	293c      	cmp	r1, #60	; 0x3c
 80027e6:	bf28      	it	cs
 80027e8:	213c      	movcs	r1, #60	; 0x3c
 80027ea:	460d      	mov	r5, r1
#define ENABLE_SEMIHOSTING 
#endif  //  PLATFORMIO

#ifdef ENABLE_SEMIHOSTING
    #warning Semihosting ENABLED
    semihost_write(SEMIHOST_HANDLE, (const unsigned char *) buf, outlen);
 80027ec:	460a      	mov	r2, r1
 80027ee:	4601      	mov	r1, r0
 80027f0:	2002      	movs	r0, #2
 80027f2:	f000 f919 	bl	8002a28 <_ZL14semihost_writemPKhj>
#else
    #warning Semihosting DISABLED
#endif  //  ENABLE_SEMIHOSTING
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 80027f6:	2400      	movs	r4, #0
 80027f8:	e000      	b.n	80027fc <_ZL16write_all_outputPKhtb+0x1c>
 80027fa:	3401      	adds	r4, #1
 80027fc:	2c03      	cmp	r4, #3
 80027fe:	dc08      	bgt.n	8002812 <_ZL16write_all_outputPKhtb+0x32>
        if (output_funcs[i]) {
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <_ZL16write_all_outputPKhtb+0x38>)
 8002802:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f7      	beq.n	80027fa <_ZL16write_all_outputPKhtb+0x1a>
            logger_output_func *func = output_funcs[i];
            func(buf, outlen);
 800280a:	4629      	mov	r1, r5
 800280c:	4630      	mov	r0, r6
 800280e:	4798      	blx	r3
 8002810:	e7f3      	b.n	80027fa <_ZL16write_all_outputPKhtb+0x1a>
        }
    }
    return outlen;
}
 8002812:	4628      	mov	r0, r5
 8002814:	bd70      	pop	{r4, r5, r6, pc}
 8002816:	bf00      	nop
 8002818:	20000450 	.word	0x20000450

0800281c <_ZL12debug_appendPKcj>:
    }
}

static void debug_append(const char *buffer, unsigned int length) {
    //  Append "length" number of bytes from "buffer" to the debug buffer.
    if (length >= DEBUG_BUFFER_SIZE) { return; }  //  Don't allow logging of very long messages.
 800281c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002820:	d223      	bcs.n	800286a <_ZL12debug_appendPKcj+0x4e>
static void debug_append(const char *buffer, unsigned int length) {
 8002822:	b538      	push	{r3, r4, r5, lr}
 8002824:	4605      	mov	r5, r0
 8002826:	460b      	mov	r3, r1
    if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) {
 8002828:	4a10      	ldr	r2, [pc, #64]	; (800286c <_ZL12debug_appendPKcj+0x50>)
 800282a:	8812      	ldrh	r2, [r2, #0]
 800282c:	440a      	add	r2, r1
 800282e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002832:	d30c      	bcc.n	800284e <_ZL12debug_appendPKcj+0x32>
        //  Erase the entire buffer.  Latest log is more important than old log.
        strcpy(debugBuffer, "[DROPPED]");
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <_ZL12debug_appendPKcj+0x54>)
 8002836:	4c0f      	ldr	r4, [pc, #60]	; (8002874 <_ZL12debug_appendPKcj+0x58>)
 8002838:	ca07      	ldmia	r2, {r0, r1, r2}
 800283a:	c403      	stmia	r4!, {r0, r1}
 800283c:	8022      	strh	r2, [r4, #0]
        debugBufferLength = 9;
 800283e:	4a0b      	ldr	r2, [pc, #44]	; (800286c <_ZL12debug_appendPKcj+0x50>)
 8002840:	2109      	movs	r1, #9
 8002842:	8011      	strh	r1, [r2, #0]
        //  Still can't fit after clearing.  Quit.
        if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) { return; }
 8002844:	8812      	ldrh	r2, [r2, #0]
 8002846:	441a      	add	r2, r3
 8002848:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800284c:	d20c      	bcs.n	8002868 <_ZL12debug_appendPKcj+0x4c>
 800284e:	461c      	mov	r4, r3
 8002850:	4629      	mov	r1, r5
    }
    //  Else append to the buffer.
    memcpy(&debugBuffer[debugBufferLength], buffer, length);
 8002852:	4d06      	ldr	r5, [pc, #24]	; (800286c <_ZL12debug_appendPKcj+0x50>)
 8002854:	882b      	ldrh	r3, [r5, #0]
 8002856:	4622      	mov	r2, r4
 8002858:	4806      	ldr	r0, [pc, #24]	; (8002874 <_ZL12debug_appendPKcj+0x58>)
 800285a:	4418      	add	r0, r3
 800285c:	f7ff ff6d 	bl	800273a <memcpy>
    debugBufferLength += length;
 8002860:	882b      	ldrh	r3, [r5, #0]
 8002862:	4423      	add	r3, r4
 8002864:	b29b      	uxth	r3, r3
 8002866:	802b      	strh	r3, [r5, #0]
}
 8002868:	bd38      	pop	{r3, r4, r5, pc}
 800286a:	4770      	bx	lr
 800286c:	20000460 	.word	0x20000460
 8002870:	08004a90 	.word	0x08004a90
 8002874:	2000024c 	.word	0x2000024c

08002878 <enable_log>:
void enable_log(void) { logEnabled = true; }
 8002878:	4b01      	ldr	r3, [pc, #4]	; (8002880 <enable_log+0x8>)
 800287a:	2201      	movs	r2, #1
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	4770      	bx	lr
 8002880:	20000462 	.word	0x20000462

08002884 <logger_add_output>:
    if (!func) { return -1; }
 8002884:	4601      	mov	r1, r0
 8002886:	b1b8      	cbz	r0, 80028b8 <logger_add_output+0x34>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8002888:	2300      	movs	r3, #0
 800288a:	2b03      	cmp	r3, #3
 800288c:	dc06      	bgt.n	800289c <logger_add_output+0x18>
        if (output_funcs[i] == func) {
 800288e:	4a0e      	ldr	r2, [pc, #56]	; (80028c8 <logger_add_output+0x44>)
 8002890:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002894:	428a      	cmp	r2, r1
 8002896:	d012      	beq.n	80028be <logger_add_output+0x3a>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8002898:	3301      	adds	r3, #1
 800289a:	e7f6      	b.n	800288a <logger_add_output+0x6>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 800289c:	2300      	movs	r3, #0
 800289e:	2b03      	cmp	r3, #3
 80028a0:	dc0f      	bgt.n	80028c2 <logger_add_output+0x3e>
        if (!output_funcs[i]) {
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <logger_add_output+0x44>)
 80028a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028a8:	b10a      	cbz	r2, 80028ae <logger_add_output+0x2a>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 80028aa:	3301      	adds	r3, #1
 80028ac:	e7f7      	b.n	800289e <logger_add_output+0x1a>
            output_funcs[i] = func;
 80028ae:	4a06      	ldr	r2, [pc, #24]	; (80028c8 <logger_add_output+0x44>)
 80028b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            return 0;
 80028b4:	2000      	movs	r0, #0
 80028b6:	4770      	bx	lr
    if (!func) { return -1; }
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028bc:	4770      	bx	lr
            return 0;  //  Already added.
 80028be:	2000      	movs	r0, #0
 80028c0:	4770      	bx	lr
    return -1;  //  Too many outputs.
 80028c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80028c6:	4770      	bx	lr
 80028c8:	20000450 	.word	0x20000450

080028cc <_Z20debug_flush_internalb>:
void debug_flush_internal(bool forced) {
 80028cc:	b538      	push	{r3, r4, r5, lr}
    if (debugBufferLength == 0) { return; }  //  Debug buffer is empty, nothing to write.
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <_Z20debug_flush_internalb+0x48>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	b903      	cbnz	r3, 80028d8 <_Z20debug_flush_internalb+0xc>
}
 80028d6:	bd38      	pop	{r3, r4, r5, pc}
 80028d8:	4602      	mov	r2, r0
	uint16_t outlen = write_all_output((const uint8_t *) debugBuffer, debugBufferLength, forced);
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <_Z20debug_flush_internalb+0x48>)
 80028dc:	8819      	ldrh	r1, [r3, #0]
 80028de:	480e      	ldr	r0, [pc, #56]	; (8002918 <_Z20debug_flush_internalb+0x4c>)
 80028e0:	f7ff ff7e 	bl	80027e0 <_ZL16write_all_outputPKhtb>
    if (outlen == 0) {
 80028e4:	4604      	mov	r4, r0
 80028e6:	2800      	cmp	r0, #0
 80028e8:	d0f5      	beq.n	80028d6 <_Z20debug_flush_internalb+0xa>
    } else if (outlen >= debugBufferLength) {
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <_Z20debug_flush_internalb+0x48>)
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	4283      	cmp	r3, r0
 80028f2:	d803      	bhi.n	80028fc <_Z20debug_flush_internalb+0x30>
        debugBufferLength = 0;
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <_Z20debug_flush_internalb+0x48>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	801a      	strh	r2, [r3, #0]
        return;
 80028fa:	e7ec      	b.n	80028d6 <_Z20debug_flush_internalb+0xa>
    memcpy(debugBuffer, &debugBuffer[outlen], debugBufferLength - outlen);
 80028fc:	4806      	ldr	r0, [pc, #24]	; (8002918 <_Z20debug_flush_internalb+0x4c>)
 80028fe:	4d05      	ldr	r5, [pc, #20]	; (8002914 <_Z20debug_flush_internalb+0x48>)
 8002900:	882a      	ldrh	r2, [r5, #0]
 8002902:	1b12      	subs	r2, r2, r4
 8002904:	1901      	adds	r1, r0, r4
 8002906:	f7ff ff18 	bl	800273a <memcpy>
    debugBufferLength -= outlen;
 800290a:	882b      	ldrh	r3, [r5, #0]
 800290c:	1b1c      	subs	r4, r3, r4
 800290e:	b2a4      	uxth	r4, r4
 8002910:	802c      	strh	r4, [r5, #0]
 8002912:	e7e0      	b.n	80028d6 <_Z20debug_flush_internalb+0xa>
 8002914:	20000460 	.word	0x20000460
 8002918:	2000024c 	.word	0x2000024c

0800291c <debug_force_flush>:
void debug_force_flush(void) {
 800291c:	b510      	push	{r4, lr}
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 800291e:	2400      	movs	r4, #0
 8002920:	2c63      	cmp	r4, #99	; 0x63
 8002922:	dc08      	bgt.n	8002936 <debug_force_flush+0x1a>
        if (debugBufferLength == 0) { return; }  //  No more chunks.
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <debug_force_flush+0x1c>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	b123      	cbz	r3, 8002936 <debug_force_flush+0x1a>
        debug_flush_internal(true);
 800292c:	2001      	movs	r0, #1
 800292e:	f7ff ffcd 	bl	80028cc <_Z20debug_flush_internalb>
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 8002932:	3401      	adds	r4, #1
 8002934:	e7f4      	b.n	8002920 <debug_force_flush+0x4>
}
 8002936:	bd10      	pop	{r4, pc}
 8002938:	20000460 	.word	0x20000460

0800293c <_Z11debug_printj>:

void debug_print(size_t l) {
 800293c:	b510      	push	{r4, lr}
 800293e:	b084      	sub	sp, #16
    #define MAX_INT_LENGTH 10
    char buffer[MAX_INT_LENGTH + 1];
    int size = MAX_INT_LENGTH + 1;
    bool prefixByZero = false;
    int length = 0;
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8002940:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <_Z11debug_printj+0x7c>)
    int length = 0;
 8002942:	2100      	movs	r1, #0
 8002944:	e012      	b.n	800296c <_Z11debug_printj+0x30>
        char digit = '0' + (char)(l / divisor);
        if (digit > '9') {
            debug_print("(Overflow)");
 8002946:	481d      	ldr	r0, [pc, #116]	; (80029bc <_Z11debug_printj+0x80>)
 8002948:	f000 f882 	bl	8002a50 <debug_print>
 800294c:	e032      	b.n	80029b4 <_Z11debug_printj+0x78>
            return;
        }
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
 800294e:	290a      	cmp	r1, #10
 8002950:	dc04      	bgt.n	800295c <_Z11debug_printj+0x20>
                buffer[length++] = digit;
 8002952:	ac04      	add	r4, sp, #16
 8002954:	440c      	add	r4, r1
 8002956:	f804 2c0c 	strb.w	r2, [r4, #-12]
 800295a:	3101      	adds	r1, #1
            }
        }
        l = l % divisor;
 800295c:	fbb0 f2f3 	udiv	r2, r0, r3
 8002960:	fb03 0012 	mls	r0, r3, r2, r0
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8002964:	4a16      	ldr	r2, [pc, #88]	; (80029c0 <_Z11debug_printj+0x84>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	08db      	lsrs	r3, r3, #3
 800296c:	b153      	cbz	r3, 8002984 <_Z11debug_printj+0x48>
        char digit = '0' + (char)(l / divisor);
 800296e:	fbb0 f2f3 	udiv	r2, r0, r3
 8002972:	3230      	adds	r2, #48	; 0x30
 8002974:	b2d2      	uxtb	r2, r2
        if (digit > '9') {
 8002976:	2a39      	cmp	r2, #57	; 0x39
 8002978:	d8e5      	bhi.n	8002946 <_Z11debug_printj+0xa>
        if (digit > '0' || length > 0 || prefixByZero) {
 800297a:	2a30      	cmp	r2, #48	; 0x30
 800297c:	d8e7      	bhi.n	800294e <_Z11debug_printj+0x12>
 800297e:	2900      	cmp	r1, #0
 8002980:	dce5      	bgt.n	800294e <_Z11debug_printj+0x12>
 8002982:	e7eb      	b.n	800295c <_Z11debug_printj+0x20>
    }
    if (length == 0) { buffer[length++] = '0'; };
 8002984:	b929      	cbnz	r1, 8002992 <_Z11debug_printj+0x56>
 8002986:	ab04      	add	r3, sp, #16
 8002988:	440b      	add	r3, r1
 800298a:	2230      	movs	r2, #48	; 0x30
 800298c:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8002990:	3101      	adds	r1, #1
    if (length < size) buffer[length] = 0;
 8002992:	290a      	cmp	r1, #10
 8002994:	dc04      	bgt.n	80029a0 <_Z11debug_printj+0x64>
 8002996:	ab04      	add	r3, sp, #16
 8002998:	4419      	add	r1, r3
 800299a:	2300      	movs	r3, #0
 800299c:	f801 3c0c 	strb.w	r3, [r1, #-12]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 80029a0:	2300      	movs	r3, #0
 80029a2:	f88d 300e 	strb.w	r3, [sp, #14]

    debug_append(buffer, strlen(buffer));
 80029a6:	a801      	add	r0, sp, #4
 80029a8:	f7ff fedf 	bl	800276a <strlen>
 80029ac:	4601      	mov	r1, r0
 80029ae:	a801      	add	r0, sp, #4
 80029b0:	f7ff ff34 	bl	800281c <_ZL12debug_appendPKcj>
}
 80029b4:	b004      	add	sp, #16
 80029b6:	bd10      	pop	{r4, pc}
 80029b8:	3b9aca00 	.word	0x3b9aca00
 80029bc:	08004a84 	.word	0x08004a84
 80029c0:	cccccccd 	.word	0xcccccccd

080029c4 <_Z11debug_printi>:

void debug_print(int i) {
 80029c4:	b510      	push	{r4, lr}
    if (i == 0) { debug_append("0", 1); } 
 80029c6:	b128      	cbz	r0, 80029d4 <_Z11debug_printi+0x10>
 80029c8:	4604      	mov	r4, r0
    else if (i >= 0) { debug_print((size_t) i); }
 80029ca:	2800      	cmp	r0, #0
 80029cc:	db07      	blt.n	80029de <_Z11debug_printi+0x1a>
 80029ce:	f7ff ffb5 	bl	800293c <_Z11debug_printj>
    else {  // i < 0.
        debug_append("-", 1);
        debug_print((size_t) -i);
    }
}
 80029d2:	bd10      	pop	{r4, pc}
    if (i == 0) { debug_append("0", 1); } 
 80029d4:	2101      	movs	r1, #1
 80029d6:	4806      	ldr	r0, [pc, #24]	; (80029f0 <_Z11debug_printi+0x2c>)
 80029d8:	f7ff ff20 	bl	800281c <_ZL12debug_appendPKcj>
 80029dc:	e7f9      	b.n	80029d2 <_Z11debug_printi+0xe>
        debug_append("-", 1);
 80029de:	2101      	movs	r1, #1
 80029e0:	4804      	ldr	r0, [pc, #16]	; (80029f4 <_Z11debug_printi+0x30>)
 80029e2:	f7ff ff1b 	bl	800281c <_ZL12debug_appendPKcj>
        debug_print((size_t) -i);
 80029e6:	4260      	negs	r0, r4
 80029e8:	f7ff ffa8 	bl	800293c <_Z11debug_printj>
}
 80029ec:	e7f1      	b.n	80029d2 <_Z11debug_printi+0xe>
 80029ee:	bf00      	nop
 80029f0:	08004a7c 	.word	0x08004a7c
 80029f4:	08004a80 	.word	0x08004a80

080029f8 <debug_println>:
void debug_print(const char *s) {
    if (s[0] == 0) return;
	debug_append(s, strlen(s));
}

void debug_println(const char *s) {
 80029f8:	b508      	push	{r3, lr}
    if (s[0] != 0) { debug_print(s); }
 80029fa:	7803      	ldrb	r3, [r0, #0]
 80029fc:	b923      	cbnz	r3, 8002a08 <debug_println+0x10>
    debug_append("\r\n", 2);
 80029fe:	2102      	movs	r1, #2
 8002a00:	4803      	ldr	r0, [pc, #12]	; (8002a10 <debug_println+0x18>)
 8002a02:	f7ff ff0b 	bl	800281c <_ZL12debug_appendPKcj>
}
 8002a06:	bd08      	pop	{r3, pc}
    if (s[0] != 0) { debug_print(s); }
 8002a08:	f000 f822 	bl	8002a50 <debug_print>
 8002a0c:	e7f7      	b.n	80029fe <debug_println+0x6>
 8002a0e:	bf00      	nop
 8002a10:	08004a9c 	.word	0x08004a9c

08002a14 <_Z13debug_printlni>:

void debug_print(char ch) {
	debug_append(&ch, 1);
}

void debug_println(int i) {
 8002a14:	b508      	push	{r3, lr}
    debug_print(i);
 8002a16:	f7ff ffd5 	bl	80029c4 <_Z11debug_printi>
    debug_append("\r\n", 2);
 8002a1a:	2102      	movs	r1, #2
 8002a1c:	4801      	ldr	r0, [pc, #4]	; (8002a24 <_Z13debug_printlni+0x10>)
 8002a1e:	f7ff fefd 	bl	800281c <_ZL12debug_appendPKcj>
}
 8002a22:	bd08      	pop	{r3, pc}
 8002a24:	08004a9c 	.word	0x08004a9c

08002a28 <_ZL14semihost_writemPKhj>:
    if (length == 0) { return 0; }
 8002a28:	b90a      	cbnz	r2, 8002a2e <_ZL14semihost_writemPKhj+0x6>
 8002a2a:	2000      	movs	r0, #0
}
 8002a2c:	4770      	bx	lr
static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
 8002a2e:	b500      	push	{lr}
 8002a30:	b085      	sub	sp, #20
    args[0] = (uint32_t)fh;
 8002a32:	9001      	str	r0, [sp, #4]
    args[1] = (uint32_t)buffer;
 8002a34:	9102      	str	r1, [sp, #8]
    args[2] = (uint32_t)length;
 8002a36:	9203      	str	r2, [sp, #12]
    return __semihost(SYS_WRITE, args);
 8002a38:	a901      	add	r1, sp, #4
 8002a3a:	2005      	movs	r0, #5
 8002a3c:	f7ff febe 	bl	80027bc <_ZL10__semihostiPv>
}
 8002a40:	b005      	add	sp, #20
 8002a42:	f85d fb04 	ldr.w	pc, [sp], #4

08002a46 <debug_flush>:
void debug_flush(void) {
 8002a46:	b508      	push	{r3, lr}
    return debug_flush_internal(false);
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f7ff ff3f 	bl	80028cc <_Z20debug_flush_internalb>
}
 8002a4e:	bd08      	pop	{r3, pc}

08002a50 <debug_print>:
    if (s[0] == 0) return;
 8002a50:	7803      	ldrb	r3, [r0, #0]
 8002a52:	b903      	cbnz	r3, 8002a56 <debug_print+0x6>
 8002a54:	4770      	bx	lr
void debug_print(const char *s) {
 8002a56:	b510      	push	{r4, lr}
 8002a58:	4604      	mov	r4, r0
	debug_append(s, strlen(s));
 8002a5a:	f7ff fe86 	bl	800276a <strlen>
 8002a5e:	4601      	mov	r1, r0
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7ff fedb 	bl	800281c <_ZL12debug_appendPKcj>
}
 8002a66:	bd10      	pop	{r4, pc}

08002a68 <debug_print_int>:
void debug_println(float f) {
    debug_print(f);
    debug_append("\r\n", 2);
}

void debug_print_int(int i) { debug_print(i); }
 8002a68:	b508      	push	{r3, lr}
 8002a6a:	f7ff ffab 	bl	80029c4 <_Z11debug_printi>
 8002a6e:	bd08      	pop	{r3, pc}

08002a70 <debug_print_unsigned>:
void debug_print_unsigned(size_t l) { debug_print(l); }
 8002a70:	b508      	push	{r3, lr}
 8002a72:	f7ff ff63 	bl	800293c <_Z11debug_printj>
 8002a76:	bd08      	pop	{r3, pc}

08002a78 <debug_printhex>:
void debug_print_char(char ch) { debug_print(ch); }
void debug_print_float(float f) { debug_print(f); }

void debug_printhex(uint8_t v) {
 8002a78:	b510      	push	{r4, lr}
 8002a7a:	b082      	sub	sp, #8
    #define MAX_BYTE_LENGTH 2
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 8002a7c:	2310      	movs	r3, #16
    int length = 0;
 8002a7e:	2200      	movs	r2, #0
 8002a80:	e005      	b.n	8002a8e <debug_printhex+0x16>
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
                buffer[length++] = digit;
            }
        }
        v = v % divisor;
 8002a82:	fbb0 f1f3 	udiv	r1, r0, r3
 8002a86:	fb03 0011 	mls	r0, r3, r1, r0
 8002a8a:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	b18b      	cbz	r3, 8002ab4 <debug_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
 8002a90:	fbb0 f1f3 	udiv	r1, r0, r3
 8002a94:	b249      	sxtb	r1, r1
 8002a96:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8002a9a:	b2e4      	uxtb	r4, r4
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8002a9c:	2c39      	cmp	r4, #57	; 0x39
 8002a9e:	d901      	bls.n	8002aa4 <debug_printhex+0x2c>
 8002aa0:	3157      	adds	r1, #87	; 0x57
 8002aa2:	b2cc      	uxtb	r4, r1
            if (length < size) {
 8002aa4:	2a02      	cmp	r2, #2
 8002aa6:	dcec      	bgt.n	8002a82 <debug_printhex+0xa>
                buffer[length++] = digit;
 8002aa8:	a902      	add	r1, sp, #8
 8002aaa:	4411      	add	r1, r2
 8002aac:	f801 4c04 	strb.w	r4, [r1, #-4]
 8002ab0:	3201      	adds	r2, #1
 8002ab2:	e7e6      	b.n	8002a82 <debug_printhex+0xa>
    }
    if (length == 0) { buffer[length++] = '0'; };
 8002ab4:	b92a      	cbnz	r2, 8002ac2 <debug_printhex+0x4a>
 8002ab6:	ab02      	add	r3, sp, #8
 8002ab8:	4413      	add	r3, r2
 8002aba:	2130      	movs	r1, #48	; 0x30
 8002abc:	f803 1c04 	strb.w	r1, [r3, #-4]
 8002ac0:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
 8002ac2:	2a02      	cmp	r2, #2
 8002ac4:	dc04      	bgt.n	8002ad0 <debug_printhex+0x58>
 8002ac6:	ab02      	add	r3, sp, #8
 8002ac8:	441a      	add	r2, r3
 8002aca:	2300      	movs	r3, #0
 8002acc:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f88d 3006 	strb.w	r3, [sp, #6]

    debug_append(buffer, strlen(buffer));
 8002ad6:	a801      	add	r0, sp, #4
 8002ad8:	f7ff fe47 	bl	800276a <strlen>
 8002adc:	4601      	mov	r1, r0
 8002ade:	a801      	add	r0, sp, #4
 8002ae0:	f7ff fe9c 	bl	800281c <_ZL12debug_appendPKcj>
}
 8002ae4:	b002      	add	sp, #8
 8002ae6:	bd10      	pop	{r4, pc}

08002ae8 <debug_printhex_unsigned>:

void debug_printhex_unsigned(size_t l) {
 8002ae8:	b538      	push	{r3, r4, r5, lr}
 8002aea:	4605      	mov	r5, r0
    //  Write an unsigned int in hexadecimal to the buffered debug log.
    for (int i = sizeof(l) - 1; i >= 0; i--) {
 8002aec:	2403      	movs	r4, #3
 8002aee:	2c00      	cmp	r4, #0
 8002af0:	db07      	blt.n	8002b02 <debug_printhex_unsigned+0x1a>
        uint8_t b = 0xff & (l >> (8 * i));
 8002af2:	00e0      	lsls	r0, r4, #3
 8002af4:	fa25 f000 	lsr.w	r0, r5, r0
        debug_printhex(b);
 8002af8:	b2c0      	uxtb	r0, r0
 8002afa:	f7ff ffbd 	bl	8002a78 <debug_printhex>
    for (int i = sizeof(l) - 1; i >= 0; i--) {
 8002afe:	3c01      	subs	r4, #1
 8002b00:	e7f5      	b.n	8002aee <debug_printhex_unsigned+0x6>
    }
}
 8002b02:	bd38      	pop	{r3, r4, r5, pc}

08002b04 <platform_setup>:
extern "C" void target_panic(int statusCode); ////

//  Debugging is off by default.  Developer must switch it on with enable_debug().
static bool debugEnabled = false;

void platform_setup(void) {
 8002b04:	b508      	push	{r3, lr}
    //  Initialise the STM32 platform. At startup, the onboard LED will blink on-off-on-off-on and stays on.
	//  If LED blinks on-off-on-off and stays off, then debug mode is enabled and no debugger is connected.
	rcc_clock_setup_in_hse_8mhz_out_72mhz();
 8002b06:	f7fe fa19 	bl	8000f3c <rcc_clock_setup_in_hse_8mhz_out_72mhz>
	led_setup();
 8002b0a:	f000 f82b 	bl	8002b64 <led_setup>
	if (debugEnabled) {
 8002b0e:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <platform_setup+0x44>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	b913      	cbnz	r3, 8002b1a <platform_setup+0x16>
  		debug_println("----platform_setup");
		led_on();
	}

	////TODO
	test_codal();
 8002b14:	f7fd ffc4 	bl	8000aa0 <test_codal>
}
 8002b18:	bd08      	pop	{r3, pc}
		led_on(); led_wait();
 8002b1a:	f000 f833 	bl	8002b84 <led_on>
 8002b1e:	f000 f845 	bl	8002bac <led_wait>
		led_off(); led_wait();
 8002b22:	f000 f839 	bl	8002b98 <led_off>
 8002b26:	f000 f841 	bl	8002bac <led_wait>
		led_on(); led_wait();
 8002b2a:	f000 f82b 	bl	8002b84 <led_on>
 8002b2e:	f000 f83d 	bl	8002bac <led_wait>
		led_off(); led_wait();
 8002b32:	f000 f831 	bl	8002b98 <led_off>
 8002b36:	f000 f839 	bl	8002bac <led_wait>
  		debug_println("----platform_setup");
 8002b3a:	4804      	ldr	r0, [pc, #16]	; (8002b4c <platform_setup+0x48>)
 8002b3c:	f7ff ff5c 	bl	80029f8 <debug_println>
		led_on();
 8002b40:	f000 f820 	bl	8002b84 <led_on>
 8002b44:	e7e6      	b.n	8002b14 <platform_setup+0x10>
 8002b46:	bf00      	nop
 8002b48:	20000474 	.word	0x20000474
 8002b4c:	08004aa0 	.word	0x08004aa0

08002b50 <enable_debug>:

void enable_debug(void) {
 8002b50:	b508      	push	{r3, lr}
	//  Enable ARM Semihosting for displaying debug messages.
	debugEnabled = true;
 8002b52:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <enable_debug+0x10>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	701a      	strb	r2, [r3, #0]
	enable_log();
 8002b58:	f7ff fe8e 	bl	8002878 <enable_log>
}
 8002b5c:	bd08      	pop	{r3, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000474 	.word	0x20000474

08002b64 <led_setup>:
//  Blink code from https://github.com/Apress/Beg-STM32-Devel-FreeRTOS-libopencm3-GCC
#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/gpio.h>
#include "bluepill.h"

void led_setup(void) {
 8002b64:	b508      	push	{r3, lr}
	//  Set up Blue Pill LED GPIO.
	//  Enable GPIOC clock.
	rcc_periph_clock_enable(RCC_GPIOC);
 8002b66:	f44f 7041 	mov.w	r0, #772	; 0x304
 8002b6a:	f7fe fe96 	bl	800189a <rcc_periph_clock_enable>
	//  Set GPIO13 (in GPIO port C) to 'output push-pull'.
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 8002b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b72:	2200      	movs	r2, #0
 8002b74:	2102      	movs	r1, #2
 8002b76:	4802      	ldr	r0, [pc, #8]	; (8002b80 <led_setup+0x1c>)
 8002b78:	f7fe fe50 	bl	800181c <gpio_set_mode>
}
 8002b7c:	bd08      	pop	{r3, pc}
 8002b7e:	bf00      	nop
 8002b80:	40011000 	.word	0x40011000

08002b84 <led_on>:

void led_on(void) {
 8002b84:	b508      	push	{r3, lr}
	//  Switch Blue Pill LED on.
	gpio_clear(GPIOC, GPIO13);
 8002b86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b8a:	4802      	ldr	r0, [pc, #8]	; (8002b94 <led_on+0x10>)
 8002b8c:	f7fe fe7e 	bl	800188c <gpio_clear>
}
 8002b90:	bd08      	pop	{r3, pc}
 8002b92:	bf00      	nop
 8002b94:	40011000 	.word	0x40011000

08002b98 <led_off>:

void led_off(void) {
 8002b98:	b508      	push	{r3, lr}
	//  Switch Blue Pill LED off.
	gpio_set(GPIOC, GPIO13);
 8002b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b9e:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <led_off+0x10>)
 8002ba0:	f7fe fe72 	bl	8001888 <gpio_set>
}
 8002ba4:	bd08      	pop	{r3, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40011000 	.word	0x40011000

08002bac <led_wait>:
	//  Toggle Blue Pill LED.
	gpio_toggle(GPIOC, GPIO13);
}

void led_wait(void) {
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
 8002bac:	2300      	movs	r3, #0
 8002bae:	4a03      	ldr	r2, [pc, #12]	; (8002bbc <led_wait+0x10>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	dc02      	bgt.n	8002bba <led_wait+0xe>
		__asm__("nop");
 8002bb4:	bf00      	nop
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	e7f9      	b.n	8002bae <led_wait+0x2>
}
 8002bba:	4770      	bx	lr
 8002bbc:	0016e35f 	.word	0x0016e35f

08002bc0 <_ZL25custom_rtc_awake_from_off7rcc_osc>:
select the clock source, clear the RTC registers and enable the RTC.
@param[in] clock_source ::rcc_osc. RTC clock source. Only the values HSE, LSE
    and LSI are permitted.
*/
static void custom_rtc_awake_from_off(enum rcc_osc clock_source)
{
 8002bc0:	b538      	push	{r3, r4, r5, lr}
 8002bc2:	4604      	mov	r4, r0
	uint32_t reg32;

	/* Enable power and backup interface clocks. */
	rcc_periph_clock_enable(RCC_PWR);
 8002bc4:	f44f 7067 	mov.w	r0, #924	; 0x39c
 8002bc8:	f7fe fe67 	bl	800189a <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_BKP);
 8002bcc:	f240 309b 	movw	r0, #923	; 0x39b
 8002bd0:	f7fe fe63 	bl	800189a <rcc_periph_clock_enable>

	/* Enable access to the backup registers and the RTC. */
	pwr_disable_backup_domain_write_protect();
 8002bd4:	f7fe faca 	bl	800116c <pwr_disable_backup_domain_write_protect>

	/* Set the clock source */
	rcc_set_rtc_clock_source(clock_source);
 8002bd8:	4620      	mov	r0, r4
 8002bda:	f7fe f937 	bl	8000e4c <rcc_set_rtc_clock_source>

	/* Clear the RTC Control Register */
	RTC_CRH = 0;
 8002bde:	2400      	movs	r4, #0
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x64>)
 8002be2:	601c      	str	r4, [r3, #0]
	RTC_CRL = 0;
 8002be4:	4d10      	ldr	r5, [pc, #64]	; (8002c28 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x68>)
 8002be6:	602c      	str	r4, [r5, #0]

	/* Enable the RTC. */
	rcc_enable_rtc_clock();
 8002be8:	f7fe f928 	bl	8000e3c <rcc_enable_rtc_clock>

	/* Clear the Registers */
	rtc_enter_config_mode();
 8002bec:	f7fe f9ee 	bl	8000fcc <rtc_enter_config_mode>
	RTC_PRLH = 0;
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	; (8002c2c <_ZL25custom_rtc_awake_from_off7rcc_osc+0x6c>)
 8002bf2:	601c      	str	r4, [r3, #0]
	RTC_PRLL = 0;
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	601c      	str	r4, [r3, #0]
	RTC_CNTH = 0;
 8002bf8:	330c      	adds	r3, #12
 8002bfa:	601c      	str	r4, [r3, #0]
	RTC_CNTL = 0;
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	601c      	str	r4, [r3, #0]
	RTC_ALRH = 0xFFFF;
 8002c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c04:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x70>)
 8002c06:	6013      	str	r3, [r2, #0]
	RTC_ALRL = 0xFFFF;
 8002c08:	3204      	adds	r2, #4
 8002c0a:	6013      	str	r3, [r2, #0]
	rtc_exit_config_mode();
 8002c0c:	f7fe f9f0 	bl	8000ff0 <rtc_exit_config_mode>

	/* Wait for the RSF bit in RTC_CRL to be set by hardware. */
	RTC_CRL &= ~RTC_CRL_RSF;
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	f023 0308 	bic.w	r3, r3, #8
 8002c16:	602b      	str	r3, [r5, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RSF)) == 0);
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x68>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f013 0f08 	tst.w	r3, #8
 8002c20:	d0fa      	beq.n	8002c18 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x58>
}
 8002c22:	bd38      	pop	{r3, r4, r5, pc}
 8002c24:	40002800 	.word	0x40002800
 8002c28:	40002804 	.word	0x40002804
 8002c2c:	40002808 	.word	0x40002808
 8002c30:	40002820 	.word	0x40002820

08002c34 <_ZL9rtc_setupv>:
static void rtc_setup(void) {
 8002c34:	b508      	push	{r3, lr}
	rcc_enable_rtc_clock();
 8002c36:	f7fe f901 	bl	8000e3c <rcc_enable_rtc_clock>
	rtc_interrupt_disable(RTC_SEC);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f7fe fa44 	bl	80010c8 <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_ALR);
 8002c40:	2001      	movs	r0, #1
 8002c42:	f7fe fa41 	bl	80010c8 <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_OW);
 8002c46:	2002      	movs	r0, #2
 8002c48:	f7fe fa3e 	bl	80010c8 <rtc_interrupt_disable>
	debug_println("rtc awake..."); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 8002c4c:	481b      	ldr	r0, [pc, #108]	; (8002cbc <_ZL9rtc_setupv+0x88>)
 8002c4e:	f7ff fed3 	bl	80029f8 <debug_println>
 8002c52:	f7ff fef8 	bl	8002a46 <debug_flush>
	custom_rtc_awake_from_off(clock_source);  //  This will enable RTC.
 8002c56:	2005      	movs	r0, #5
 8002c58:	f7ff ffb2 	bl	8002bc0 <_ZL25custom_rtc_awake_from_off7rcc_osc>
	rtc_set_prescale_val(prescale);
 8002c5c:	2020      	movs	r0, #32
 8002c5e:	f7fe f9e9 	bl	8001034 <rtc_set_prescale_val>
	debug_println("rtc awake ok"); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 8002c62:	4817      	ldr	r0, [pc, #92]	; (8002cc0 <_ZL9rtc_setupv+0x8c>)
 8002c64:	f7ff fec8 	bl	80029f8 <debug_println>
 8002c68:	f7ff feed 	bl	8002a46 <debug_flush>
	rtc_set_counter_val(0);              //  Start counting millisecond ticks from 0.
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7fe f9fb 	bl	8001068 <rtc_set_counter_val>
	rtc_set_alarm_time((uint32_t) -1);   //  Reset alarm to -1 or 0xffffffff so we don't trigger now.
 8002c72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c76:	f7fe f9cd 	bl	8001014 <rtc_set_alarm_time>
	exti_set_trigger(EXTI17, EXTI_TRIGGER_RISING);  //  Enable alarm wakeup via the interrupt.
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c80:	f7fe fa84 	bl	800118c <exti_set_trigger>
	exti_enable_request(EXTI17);
 8002c84:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c88:	f7fe faa6 	bl	80011d8 <exti_enable_request>
	nvic_enable_irq(NVIC_RTC_IRQ);        //  Enable RTC tick interrupt processing.
 8002c8c:	2003      	movs	r0, #3
 8002c8e:	f7ff fa71 	bl	8002174 <nvic_enable_irq>
	nvic_enable_irq(NVIC_RTC_ALARM_IRQ);  //  Enable RTC alarm wakeup interrupt processing.
 8002c92:	2029      	movs	r0, #41	; 0x29
 8002c94:	f7ff fa6e 	bl	8002174 <nvic_enable_irq>
 8002c98:	b672      	cpsid	i
	rtc_clear_flag(RTC_SEC);
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	f7fe fa34 	bl	8001108 <rtc_clear_flag>
	rtc_clear_flag(RTC_ALR);
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	f7fe fa31 	bl	8001108 <rtc_clear_flag>
	rtc_clear_flag(RTC_OW);
 8002ca6:	2002      	movs	r0, #2
 8002ca8:	f7fe fa2e 	bl	8001108 <rtc_clear_flag>
	rtc_interrupt_enable(RTC_SEC);  //  Allow RTC to generate tick interrupts.
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7fe f9eb 	bl	8001088 <rtc_interrupt_enable>
	rtc_interrupt_enable(RTC_ALR);  //  Allow RTC to generate alarm interrupts.
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f7fe f9e8 	bl	8001088 <rtc_interrupt_enable>
	__asm__("CPSIE I\n");
 8002cb8:	b662      	cpsie	i
}
 8002cba:	bd08      	pop	{r3, pc}
 8002cbc:	08004ab4 	.word	0x08004ab4
 8002cc0:	08004ac4 	.word	0x08004ac4

08002cc4 <platform_start_timer>:
void platform_start_timer(void (*tickFunc0)(void), void (*alarmFunc0)(void)) {
 8002cc4:	b508      	push	{r3, lr}
  	tickFunc = tickFunc0;    //  Allow tickFunc to be modified at every call to platform_start_timer().
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <platform_start_timer+0x24>)
 8002cc8:	6018      	str	r0, [r3, #0]
  	alarmFunc = alarmFunc0;  //  Allow alarmFunc to be modified at every call to platform_start_timer().
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <platform_start_timer+0x28>)
 8002ccc:	6019      	str	r1, [r3, #0]
	if (timerStarted) { return; }
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <platform_start_timer+0x2c>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b103      	cbz	r3, 8002cd6 <platform_start_timer+0x12>
}
 8002cd4:	bd08      	pop	{r3, pc}
	timerStarted = true;
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <platform_start_timer+0x2c>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
	debug_println("platform_start_timer"); ////
 8002cdc:	4805      	ldr	r0, [pc, #20]	; (8002cf4 <platform_start_timer+0x30>)
 8002cde:	f7ff fe8b 	bl	80029f8 <debug_println>
	rtc_setup();
 8002ce2:	f7ff ffa7 	bl	8002c34 <_ZL9rtc_setupv>
 8002ce6:	e7f5      	b.n	8002cd4 <platform_start_timer+0x10>
 8002ce8:	20000468 	.word	0x20000468
 8002cec:	2000046c 	.word	0x2000046c
 8002cf0:	20000475 	.word	0x20000475
 8002cf4:	08004adc 	.word	0x08004adc

08002cf8 <platform_set_alarm>:
void platform_set_alarm(uint32_t millisec) {
 8002cf8:	b510      	push	{r4, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	4604      	mov	r4, r0
	if (!alarmFunc) { debug_print("alm? "); } ////
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <platform_set_alarm+0x2c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	b153      	cbz	r3, 8002d1a <platform_set_alarm+0x22>
	volatile uint32_t now = rtc_get_counter_val();
 8002d04:	f7fe f9a6 	bl	8001054 <rtc_get_counter_val>
 8002d08:	9001      	str	r0, [sp, #4]
	pwr_disable_backup_domain_write_protect();
 8002d0a:	f7fe fa2f 	bl	800116c <pwr_disable_backup_domain_write_protect>
	rtc_set_alarm_time(now + millisec);
 8002d0e:	9801      	ldr	r0, [sp, #4]
 8002d10:	4420      	add	r0, r4
 8002d12:	f7fe f97f 	bl	8001014 <rtc_set_alarm_time>
}
 8002d16:	b002      	add	sp, #8
 8002d18:	bd10      	pop	{r4, pc}
	if (!alarmFunc) { debug_print("alm? "); } ////
 8002d1a:	4803      	ldr	r0, [pc, #12]	; (8002d28 <platform_set_alarm+0x30>)
 8002d1c:	f7ff fe98 	bl	8002a50 <debug_print>
 8002d20:	e7f0      	b.n	8002d04 <platform_set_alarm+0xc>
 8002d22:	bf00      	nop
 8002d24:	2000046c 	.word	0x2000046c
 8002d28:	08004ad4 	.word	0x08004ad4

08002d2c <platform_alarm_count>:
	return alarmCount;  //  For testing whether alarm ISR was called.
 8002d2c:	4b01      	ldr	r3, [pc, #4]	; (8002d34 <platform_alarm_count+0x8>)
 8002d2e:	6818      	ldr	r0, [r3, #0]
}
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	20000464 	.word	0x20000464

08002d38 <__cxa_pure_virtual>:
}

//  These functions must be located here or the compiler will pull in the standard C library versions.
//  From https://github.com/lancaster-university/codal-arduino-uno/blob/master/source/codal_target_hal.cpp

extern "C" void __cxa_pure_virtual() {
 8002d38:	b508      	push	{r3, lr}
	//  Disable exceptions for abstract classes. See https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/abstract_classes.html
    target_panic(1000);
 8002d3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d3e:	f7fd fe9b 	bl	8000a78 <target_panic>
}
 8002d42:	bd08      	pop	{r3, pc}

08002d44 <_Znwj>:

// define new and delete.
extern "C" void *operator new(size_t objsize) {
 8002d44:	b508      	push	{r3, lr}
    return malloc(objsize);
 8002d46:	f005 f8ef 	bl	8007f28 <device_malloc>
}
 8002d4a:	bd08      	pop	{r3, pc}

08002d4c <_ZdlPv>:

extern "C" void operator delete(void* obj) {
 8002d4c:	b508      	push	{r3, lr}
    free(obj);
 8002d4e:	f005 f915 	bl	8007f7c <device_free>
}
 8002d52:	bd08      	pop	{r3, pc}

08002d54 <millis>:
volatile uint32_t millis(void) {
 8002d54:	b508      	push	{r3, lr}
	return rtc_get_counter_val();  //  More accurate, uses hardware counters.
 8002d56:	f7fe f97d 	bl	8001054 <rtc_get_counter_val>
}
 8002d5a:	bd08      	pop	{r3, pc}

08002d5c <get_serial_number>:
    void test_baseloader_end(void) {
        dest = NULL; src = NULL; half_word_count = 0; debug_dump2(); ////
    }
#endif  //  NOTUSED

static void get_serial_number(void) {
 8002d5c:	b510      	push	{r4, lr}
 8002d5e:	b088      	sub	sp, #32
    char serial[USB_SERIAL_NUM_LENGTH+1];
    serial[0] = '\0';
 8002d60:	ac08      	add	r4, sp, #32
 8002d62:	2300      	movs	r3, #0
 8002d64:	f804 3d1c 	strb.w	r3, [r4, #-28]!
    debug_println("boot_target_get_serial_number");  // debug_flush();
 8002d68:	4807      	ldr	r0, [pc, #28]	; (8002d88 <get_serial_number+0x2c>)
 8002d6a:	f7ff fe45 	bl	80029f8 <debug_println>
    boot_target_get_serial_number(serial, USB_SERIAL_NUM_LENGTH);
 8002d6e:	2118      	movs	r1, #24
 8002d70:	4620      	mov	r0, r4
 8002d72:	f001 fda6 	bl	80048c2 <boot_target_get_serial_number>

    debug_println("usb_set_serial_number");  // debug_flush();
 8002d76:	4805      	ldr	r0, [pc, #20]	; (8002d8c <get_serial_number+0x30>)
 8002d78:	f7ff fe3e 	bl	80029f8 <debug_println>
    usb_set_serial_number(serial);
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f000 fd55 	bl	800382c <usb_set_serial_number>
}
 8002d82:	b008      	add	sp, #32
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	bf00      	nop
 8002d88:	08004b10 	.word	0x08004b10
 8002d8c:	08004b30 	.word	0x08004b30

08002d90 <poll_restart_callback>:
int poll_restart_callback(void) {
 8002d90:	b508      	push	{r3, lr}
    debug_println("restart callback");  debug_flush(); 
 8002d92:	4805      	ldr	r0, [pc, #20]	; (8002da8 <poll_restart_callback+0x18>)
 8002d94:	f7ff fe30 	bl	80029f8 <debug_println>
 8002d98:	f7ff fe55 	bl	8002a46 <debug_flush>
    poll_restart_requested = true;
 8002d9c:	4b03      	ldr	r3, [pc, #12]	; (8002dac <poll_restart_callback+0x1c>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
}
 8002da2:	2000      	movs	r0, #0
 8002da4:	bd08      	pop	{r3, pc}
 8002da6:	bf00      	nop
 8002da8:	08004b70 	.word	0x08004b70
 8002dac:	2000074c 	.word	0x2000074c

08002db0 <bootloader_poll>:
int bootloader_poll(void) {
 8002db0:	b508      	push	{r3, lr}
    if (!usbd_dev) { return -1; }
 8002db2:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <bootloader_poll+0x24>)
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	b150      	cbz	r0, 8002dce <bootloader_poll+0x1e>
	usbd_poll(usbd_dev);
 8002db8:	f7fe fd90 	bl	80018dc <usbd_poll>
    status = get_usb_status();  //  if (status != last_status) { debug_print("@"); debug_print_unsigned(status); debug_print(" "); } ////
 8002dbc:	f000 fcca 	bl	8003754 <get_usb_status>
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <bootloader_poll+0x28>)
 8002dc2:	6018      	str	r0, [r3, #0]
    last_status = status;
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	4a05      	ldr	r2, [pc, #20]	; (8002ddc <bootloader_poll+0x2c>)
 8002dc8:	6011      	str	r1, [r2, #0]
    return status;  // if (delay > 0) { debug_print("p"); debug_print_unsigned(delay); debug_print(" / "); }
 8002dca:	6818      	ldr	r0, [r3, #0]
}
 8002dcc:	bd08      	pop	{r3, pc}
    if (!usbd_dev) { return -1; }
 8002dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dd2:	e7fb      	b.n	8002dcc <bootloader_poll+0x1c>
 8002dd4:	200004a0 	.word	0x200004a0
 8002dd8:	20000498 	.word	0x20000498
 8002ddc:	2000048c 	.word	0x2000048c

08002de0 <poll_loop>:
static void poll_loop(void) {
 8002de0:	b510      	push	{r4, lr}
    debug_println("usbd polling...");  debug_flush();  debug_flush();  // test_hf2(); test_backup();          //  Test backup.
 8002de2:	4828      	ldr	r0, [pc, #160]	; (8002e84 <poll_loop+0xa4>)
 8002de4:	f7ff fe08 	bl	80029f8 <debug_println>
 8002de8:	f7ff fe2d 	bl	8002a46 <debug_flush>
 8002dec:	f7ff fe2b 	bl	8002a46 <debug_flush>
    boot_target_set_restart_callback(poll_restart_callback);
 8002df0:	4825      	ldr	r0, [pc, #148]	; (8002e88 <poll_loop+0xa8>)
 8002df2:	f000 fba9 	bl	8003548 <boot_target_set_restart_callback>
        usbd_poll(usbd_dev);
 8002df6:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <poll_loop+0xac>)
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	f7fe fd6f 	bl	80018dc <usbd_poll>
        cycleCount++;
 8002dfe:	4a24      	ldr	r2, [pc, #144]	; (8002e90 <poll_loop+0xb0>)
 8002e00:	6813      	ldr	r3, [r2, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	6013      	str	r3, [r2, #0]
        if (cycleCount >= 700) {
 8002e06:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002e0a:	d3f4      	bcc.n	8002df6 <poll_loop+0x16>
            cycleCount = 0;
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
            boot_target_set_led((msTimer++ % 500) < 50);
 8002e12:	4a20      	ldr	r2, [pc, #128]	; (8002e94 <poll_loop+0xb4>)
 8002e14:	6813      	ldr	r3, [r2, #0]
 8002e16:	1c59      	adds	r1, r3, #1
 8002e18:	6011      	str	r1, [r2, #0]
 8002e1a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8002e22:	fb02 3010 	mls	r0, r2, r0, r3
 8002e26:	2831      	cmp	r0, #49	; 0x31
 8002e28:	bf8c      	ite	hi
 8002e2a:	2000      	movhi	r0, #0
 8002e2c:	2001      	movls	r0, #1
 8002e2e:	f000 fb2b 	bl	8003488 <boot_target_set_led>
            if (flushCount++ % 1000 == 0 && get_usb_status() == 0) {  //  If USB is not busy...
 8002e32:	4b19      	ldr	r3, [pc, #100]	; (8002e98 <poll_loop+0xb8>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	1c51      	adds	r1, r2, #1
 8002e38:	6019      	str	r1, [r3, #0]
 8002e3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e3e:	fbb2 f3f1 	udiv	r3, r2, r1
 8002e42:	fb01 2313 	mls	r3, r1, r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1d5      	bne.n	8002df6 <poll_loop+0x16>
 8002e4a:	f000 fc83 	bl	8003754 <get_usb_status>
 8002e4e:	4604      	mov	r4, r0
 8002e50:	2800      	cmp	r0, #0
 8002e52:	d1d0      	bne.n	8002df6 <poll_loop+0x16>
                debug_flush(); 
 8002e54:	f7ff fdf7 	bl	8002a46 <debug_flush>
                if (poll_restart_requested) {  //  Flush the log and restart.
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <poll_loop+0xbc>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ca      	beq.n	8002df6 <poll_loop+0x16>
                    debug_println("restarting...");
 8002e60:	480f      	ldr	r0, [pc, #60]	; (8002ea0 <poll_loop+0xc0>)
 8002e62:	f7ff fdc9 	bl	80029f8 <debug_println>
                    debug_force_flush();
 8002e66:	f7ff fd59 	bl	800291c <debug_force_flush>
                    for (int i = 0; i < us*10; i++) { __asm__("nop"); }
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <poll_loop+0xc4>)
 8002e6c:	429c      	cmp	r4, r3
 8002e6e:	dd06      	ble.n	8002e7e <poll_loop+0x9e>
                    debug_println("done");
 8002e70:	480d      	ldr	r0, [pc, #52]	; (8002ea8 <poll_loop+0xc8>)
 8002e72:	f7ff fdc1 	bl	80029f8 <debug_println>
                    debug_force_flush();
 8002e76:	f7ff fd51 	bl	800291c <debug_force_flush>
                    scb_reset_system();
 8002e7a:	f7fe fa6f 	bl	800135c <scb_reset_system>
                    for (int i = 0; i < us*10; i++) { __asm__("nop"); }
 8002e7e:	bf00      	nop
 8002e80:	3401      	adds	r4, #1
 8002e82:	e7f2      	b.n	8002e6a <poll_loop+0x8a>
 8002e84:	08004b48 	.word	0x08004b48
 8002e88:	08002d91 	.word	0x08002d91
 8002e8c:	200004a0 	.word	0x200004a0
 8002e90:	20000484 	.word	0x20000484
 8002e94:	20000490 	.word	0x20000490
 8002e98:	20000058 	.word	0x20000058
 8002e9c:	2000074c 	.word	0x2000074c
 8002ea0:	08004b58 	.word	0x08004b58
 8002ea4:	0098967f 	.word	0x0098967f
 8002ea8:	08004b68 	.word	0x08004b68

08002eac <prepare_baseloader>:
void prepare_baseloader(void) {
 8002eac:	b538      	push	{r3, r4, r5, lr}
    __set_MSP((uint32_t) &_boot_stack);
 8002eae:	4b80      	ldr	r3, [pc, #512]	; (80030b0 <prepare_baseloader+0x204>)
    asm("msr msp, %0" : : "r" (topOfMainStack));
 8002eb0:	f383 8808 	msr	MSP, r3
    tmp_vector_table = (vector_table_t *) flashBuf;
 8002eb4:	4b7f      	ldr	r3, [pc, #508]	; (80030b4 <prepare_baseloader+0x208>)
 8002eb6:	4a80      	ldr	r2, [pc, #512]	; (80030b8 <prepare_baseloader+0x20c>)
 8002eb8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < sizeof(vector_table_t); i++) { flashBuf[i] = 0; }   //  Zero the temp vector table. Don't use any library functions here.
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e003      	b.n	8002ec6 <prepare_baseloader+0x1a>
 8002ebe:	4a7e      	ldr	r2, [pc, #504]	; (80030b8 <prepare_baseloader+0x20c>)
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	54d1      	strb	r1, [r2, r3]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8002eca:	d3f8      	bcc.n	8002ebe <prepare_baseloader+0x12>
    tmp_vector_table->initial_sp_value = vector_table.initial_sp_value;
 8002ecc:	4a7b      	ldr	r2, [pc, #492]	; (80030bc <prepare_baseloader+0x210>)
 8002ece:	6811      	ldr	r1, [r2, #0]
 8002ed0:	4b79      	ldr	r3, [pc, #484]	; (80030b8 <prepare_baseloader+0x20c>)
 8002ed2:	6019      	str	r1, [r3, #0]
    tmp_vector_table->reset = vector_table.reset;
 8002ed4:	6852      	ldr	r2, [r2, #4]
 8002ed6:	605a      	str	r2, [r3, #4]
    baseloader_addr = NULL;
 8002ed8:	4879      	ldr	r0, [pc, #484]	; (80030c0 <prepare_baseloader+0x214>)
 8002eda:	2300      	movs	r3, #0
 8002edc:	6003      	str	r3, [r0, #0]
	baseloader_status = baseloader_fetch(&baseloader_addr, &dest, &src, &byte_count);  //  Fetch the baseloader address, which will be at a temporary location.
 8002ede:	4b79      	ldr	r3, [pc, #484]	; (80030c4 <prepare_baseloader+0x218>)
 8002ee0:	4a79      	ldr	r2, [pc, #484]	; (80030c8 <prepare_baseloader+0x21c>)
 8002ee2:	497a      	ldr	r1, [pc, #488]	; (80030cc <prepare_baseloader+0x220>)
 8002ee4:	f7fd fbc8 	bl	8000678 <baseloader_fetch>
 8002ee8:	4c79      	ldr	r4, [pc, #484]	; (80030d0 <prepare_baseloader+0x224>)
 8002eea:	6020      	str	r0, [r4, #0]
	debug_print("----baseloader "); if (baseloader_status == 0) { 
 8002eec:	4879      	ldr	r0, [pc, #484]	; (80030d4 <prepare_baseloader+0x228>)
 8002eee:	f7ff fdaf 	bl	8002a50 <debug_print>
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f040 8092 	bne.w	800301e <prepare_baseloader+0x172>
        debug_print("found "); debug_printhex_unsigned((uint32_t) baseloader_addr); 
 8002efa:	4877      	ldr	r0, [pc, #476]	; (80030d8 <prepare_baseloader+0x22c>)
 8002efc:	f7ff fda8 	bl	8002a50 <debug_print>
 8002f00:	4c6f      	ldr	r4, [pc, #444]	; (80030c0 <prepare_baseloader+0x214>)
 8002f02:	6820      	ldr	r0, [r4, #0]
 8002f04:	f7ff fdf0 	bl	8002ae8 <debug_printhex_unsigned>
		debug_print(", dest "); debug_printhex_unsigned((uint32_t) dest);
 8002f08:	4874      	ldr	r0, [pc, #464]	; (80030dc <prepare_baseloader+0x230>)
 8002f0a:	f7ff fda1 	bl	8002a50 <debug_print>
 8002f0e:	4b6f      	ldr	r3, [pc, #444]	; (80030cc <prepare_baseloader+0x220>)
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	f7ff fde9 	bl	8002ae8 <debug_printhex_unsigned>
		debug_print(", src "); debug_printhex_unsigned((uint32_t) src);
 8002f16:	4872      	ldr	r0, [pc, #456]	; (80030e0 <prepare_baseloader+0x234>)
 8002f18:	f7ff fd9a 	bl	8002a50 <debug_print>
 8002f1c:	4b6a      	ldr	r3, [pc, #424]	; (80030c8 <prepare_baseloader+0x21c>)
 8002f1e:	6818      	ldr	r0, [r3, #0]
 8002f20:	f7ff fde2 	bl	8002ae8 <debug_printhex_unsigned>
		debug_print(", len "); debug_printhex_unsigned(byte_count); debug_force_flush();  
 8002f24:	486f      	ldr	r0, [pc, #444]	; (80030e4 <prepare_baseloader+0x238>)
 8002f26:	f7ff fd93 	bl	8002a50 <debug_print>
 8002f2a:	4b66      	ldr	r3, [pc, #408]	; (80030c4 <prepare_baseloader+0x218>)
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	f7ff fddb 	bl	8002ae8 <debug_printhex_unsigned>
 8002f32:	f7ff fcf3 	bl	800291c <debug_force_flush>
		debug_print(", *func "); debug_printhex_unsigned(*(uint32_t *) baseloader_addr); debug_force_flush();  
 8002f36:	486c      	ldr	r0, [pc, #432]	; (80030e8 <prepare_baseloader+0x23c>)
 8002f38:	f7ff fd8a 	bl	8002a50 <debug_print>
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	6818      	ldr	r0, [r3, #0]
 8002f40:	f7ff fdd2 	bl	8002ae8 <debug_printhex_unsigned>
 8002f44:	f7ff fcea 	bl	800291c <debug_force_flush>
    }; debug_println(""); debug_force_flush();
 8002f48:	4868      	ldr	r0, [pc, #416]	; (80030ec <prepare_baseloader+0x240>)
 8002f4a:	f7ff fd55 	bl	80029f8 <debug_println>
 8002f4e:	f7ff fce5 	bl	800291c <debug_force_flush>
    if (baseloader_status != 0 || baseloader_addr == NULL) { return; }
 8002f52:	4b5f      	ldr	r3, [pc, #380]	; (80030d0 <prepare_baseloader+0x224>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d160      	bne.n	800301c <prepare_baseloader+0x170>
 8002f5a:	4b59      	ldr	r3, [pc, #356]	; (80030c0 <prepare_baseloader+0x214>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d05c      	beq.n	800301c <prepare_baseloader+0x170>
    asm("dmb");
 8002f62:	f3bf 8f5f 	dmb	sy
    SCB_VTOR = (uint32_t) tmp_vector_table;
 8002f66:	4b53      	ldr	r3, [pc, #332]	; (80030b4 <prepare_baseloader+0x208>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4c61      	ldr	r4, [pc, #388]	; (80030f0 <prepare_baseloader+0x244>)
 8002f6c:	6023      	str	r3, [r4, #0]
    asm("dsb");
 8002f6e:	f3bf 8f4f 	dsb	sy
    debug_print("system vector table "); debug_printhex_unsigned(SCB_VTOR); 
 8002f72:	4860      	ldr	r0, [pc, #384]	; (80030f4 <prepare_baseloader+0x248>)
 8002f74:	f7ff fd6c 	bl	8002a50 <debug_print>
 8002f78:	6820      	ldr	r0, [r4, #0]
 8002f7a:	f7ff fdb5 	bl	8002ae8 <debug_printhex_unsigned>
    debug_print(", len "); debug_printhex_unsigned(sizeof(vector_table_t)); 
 8002f7e:	4859      	ldr	r0, [pc, #356]	; (80030e4 <prepare_baseloader+0x238>)
 8002f80:	f7ff fd66 	bl	8002a50 <debug_print>
 8002f84:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8002f88:	f7ff fdae 	bl	8002ae8 <debug_printhex_unsigned>
    debug_println(""); debug_force_flush();
 8002f8c:	4857      	ldr	r0, [pc, #348]	; (80030ec <prepare_baseloader+0x240>)
 8002f8e:	f7ff fd33 	bl	80029f8 <debug_println>
 8002f92:	f7ff fcc3 	bl	800291c <debug_force_flush>
    base_para.dest = (uint32_t) dest;
 8002f96:	4b4d      	ldr	r3, [pc, #308]	; (80030cc <prepare_baseloader+0x220>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4c57      	ldr	r4, [pc, #348]	; (80030f8 <prepare_baseloader+0x24c>)
 8002f9c:	6023      	str	r3, [r4, #0]
    base_para.src = (uint32_t) src;
 8002f9e:	4b4a      	ldr	r3, [pc, #296]	; (80030c8 <prepare_baseloader+0x21c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6063      	str	r3, [r4, #4]
    base_para.byte_count = byte_count;
 8002fa4:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <prepare_baseloader+0x218>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60a3      	str	r3, [r4, #8]
    base_para.restart = 1;
 8002faa:	2300      	movs	r3, #0
 8002fac:	2201      	movs	r2, #1
 8002fae:	7322      	strb	r2, [r4, #12]
 8002fb0:	7363      	strb	r3, [r4, #13]
 8002fb2:	73a3      	strb	r3, [r4, #14]
 8002fb4:	73e3      	strb	r3, [r4, #15]
    base_para.preview = 1;
 8002fb6:	7422      	strb	r2, [r4, #16]
 8002fb8:	7463      	strb	r3, [r4, #17]
 8002fba:	74a3      	strb	r3, [r4, #18]
 8002fbc:	74e3      	strb	r3, [r4, #19]
    baseloader_addr();
 8002fbe:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <prepare_baseloader+0x214>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4798      	blx	r3
    baseloader_status = base_para.result;  
 8002fc4:	6963      	ldr	r3, [r4, #20]
 8002fc6:	4a42      	ldr	r2, [pc, #264]	; (80030d0 <prepare_baseloader+0x224>)
 8002fc8:	6013      	str	r3, [r2, #0]
    if (baseloader_status > 0) {
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	dd5b      	ble.n	8003086 <prepare_baseloader+0x1da>
        debug_print("baseloader preview ok "); debug_printhex_unsigned(baseloader_status); 
 8002fce:	484b      	ldr	r0, [pc, #300]	; (80030fc <prepare_baseloader+0x250>)
 8002fd0:	f7ff fd3e 	bl	8002a50 <debug_print>
 8002fd4:	4d3e      	ldr	r5, [pc, #248]	; (80030d0 <prepare_baseloader+0x224>)
 8002fd6:	6828      	ldr	r0, [r5, #0]
 8002fd8:	f7ff fd86 	bl	8002ae8 <debug_printhex_unsigned>
        debug_println(", call actual baseloader..."); debug_force_flush();
 8002fdc:	4848      	ldr	r0, [pc, #288]	; (8003100 <prepare_baseloader+0x254>)
 8002fde:	f7ff fd0b 	bl	80029f8 <debug_println>
 8002fe2:	f7ff fc9b 	bl	800291c <debug_force_flush>
    base_para.preview = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	7423      	strb	r3, [r4, #16]
 8002fea:	7463      	strb	r3, [r4, #17]
 8002fec:	74a3      	strb	r3, [r4, #18]
 8002fee:	74e3      	strb	r3, [r4, #19]
    baseloader_addr();  
 8002ff0:	4b33      	ldr	r3, [pc, #204]	; (80030c0 <prepare_baseloader+0x214>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4798      	blx	r3
    baseloader_status = base_para.result;  
 8002ff6:	6963      	ldr	r3, [r4, #20]
 8002ff8:	602b      	str	r3, [r5, #0]
    debug_print("baseloader failed "); debug_print_int(baseloader_status); 
 8002ffa:	4842      	ldr	r0, [pc, #264]	; (8003104 <prepare_baseloader+0x258>)
 8002ffc:	f7ff fd28 	bl	8002a50 <debug_print>
 8003000:	6828      	ldr	r0, [r5, #0]
 8003002:	f7ff fd31 	bl	8002a68 <debug_print_int>
    debug_println(", fail "); debug_printhex_unsigned(base_para.fail); 
 8003006:	4840      	ldr	r0, [pc, #256]	; (8003108 <prepare_baseloader+0x25c>)
 8003008:	f7ff fcf6 	bl	80029f8 <debug_println>
 800300c:	69a0      	ldr	r0, [r4, #24]
 800300e:	f7ff fd6b 	bl	8002ae8 <debug_printhex_unsigned>
    debug_println(""); debug_force_flush();
 8003012:	4836      	ldr	r0, [pc, #216]	; (80030ec <prepare_baseloader+0x240>)
 8003014:	f7ff fcf0 	bl	80029f8 <debug_println>
 8003018:	f7ff fc80 	bl	800291c <debug_force_flush>
}
 800301c:	bd38      	pop	{r3, r4, r5, pc}
        debug_print("not found "); debug_print_int(baseloader_status); debug_print(" ");
 800301e:	483b      	ldr	r0, [pc, #236]	; (800310c <prepare_baseloader+0x260>)
 8003020:	f7ff fd16 	bl	8002a50 <debug_print>
 8003024:	4c2a      	ldr	r4, [pc, #168]	; (80030d0 <prepare_baseloader+0x224>)
 8003026:	6820      	ldr	r0, [r4, #0]
 8003028:	f7ff fd1e 	bl	8002a68 <debug_print_int>
 800302c:	4838      	ldr	r0, [pc, #224]	; (8003110 <prepare_baseloader+0x264>)
 800302e:	f7ff fd0f 	bl	8002a50 <debug_print>
            (baseloader_status == -3) ? "too big " :
 8003032:	6823      	ldr	r3, [r4, #0]
        debug_print(
 8003034:	f113 0f03 	cmn.w	r3, #3
 8003038:	d023      	beq.n	8003082 <prepare_baseloader+0x1d6>
            (baseloader_status == -3) ? "too big " :
 800303a:	f113 0f04 	cmn.w	r3, #4
 800303e:	d01e      	beq.n	800307e <prepare_baseloader+0x1d2>
 8003040:	482a      	ldr	r0, [pc, #168]	; (80030ec <prepare_baseloader+0x240>)
        debug_print(
 8003042:	f7ff fd05 	bl	8002a50 <debug_print>
        debug_printhex_unsigned(base_para.fail);
 8003046:	4b2c      	ldr	r3, [pc, #176]	; (80030f8 <prepare_baseloader+0x24c>)
 8003048:	6998      	ldr	r0, [r3, #24]
 800304a:	f7ff fd4d 	bl	8002ae8 <debug_printhex_unsigned>
        if (baseloader_status == -4) { 
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <prepare_baseloader+0x224>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f113 0f04 	cmn.w	r3, #4
 8003056:	f47f af77 	bne.w	8002f48 <prepare_baseloader+0x9c>
            debug_print(", oldapp "); debug_printhex_unsigned((uint32_t) FLASH_ADDRESS(application_start)); 
 800305a:	482e      	ldr	r0, [pc, #184]	; (8003114 <prepare_baseloader+0x268>)
 800305c:	f7ff fcf8 	bl	8002a50 <debug_print>
 8003060:	482d      	ldr	r0, [pc, #180]	; (8003118 <prepare_baseloader+0x26c>)
 8003062:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8003066:	f020 0003 	bic.w	r0, r0, #3
 800306a:	f7ff fd3d 	bl	8002ae8 <debug_printhex_unsigned>
            debug_print(", bootlen "); debug_printhex_unsigned(byte_count); 
 800306e:	482b      	ldr	r0, [pc, #172]	; (800311c <prepare_baseloader+0x270>)
 8003070:	f7ff fcee 	bl	8002a50 <debug_print>
 8003074:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <prepare_baseloader+0x218>)
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	f7ff fd36 	bl	8002ae8 <debug_printhex_unsigned>
 800307c:	e764      	b.n	8002f48 <prepare_baseloader+0x9c>
            (baseloader_status == -3) ? "too big " :
 800307e:	4828      	ldr	r0, [pc, #160]	; (8003120 <prepare_baseloader+0x274>)
 8003080:	e7df      	b.n	8003042 <prepare_baseloader+0x196>
        debug_print(
 8003082:	4828      	ldr	r0, [pc, #160]	; (8003124 <prepare_baseloader+0x278>)
 8003084:	e7dd      	b.n	8003042 <prepare_baseloader+0x196>
        debug_print("baseloader preview failed "); debug_print_int(baseloader_status);
 8003086:	4828      	ldr	r0, [pc, #160]	; (8003128 <prepare_baseloader+0x27c>)
 8003088:	f7ff fce2 	bl	8002a50 <debug_print>
 800308c:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <prepare_baseloader+0x224>)
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	f7ff fcea 	bl	8002a68 <debug_print_int>
        debug_println(", fail "); debug_printhex_unsigned(base_para.fail); 
 8003094:	481c      	ldr	r0, [pc, #112]	; (8003108 <prepare_baseloader+0x25c>)
 8003096:	f7ff fcaf 	bl	80029f8 <debug_println>
 800309a:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <prepare_baseloader+0x24c>)
 800309c:	6998      	ldr	r0, [r3, #24]
 800309e:	f7ff fd23 	bl	8002ae8 <debug_printhex_unsigned>
        debug_println(""); debug_force_flush();
 80030a2:	4812      	ldr	r0, [pc, #72]	; (80030ec <prepare_baseloader+0x240>)
 80030a4:	f7ff fca8 	bl	80029f8 <debug_println>
 80030a8:	f7ff fc38 	bl	800291c <debug_force_flush>
        return;
 80030ac:	e7b6      	b.n	800301c <prepare_baseloader+0x170>
 80030ae:	bf00      	nop
 80030b0:	200047bc 	.word	0x200047bc
 80030b4:	2000049c 	.word	0x2000049c
 80030b8:	200047bc 	.word	0x200047bc
 80030bc:	08000000 	.word	0x08000000
 80030c0:	20000478 	.word	0x20000478
 80030c4:	20000480 	.word	0x20000480
 80030c8:	20000494 	.word	0x20000494
 80030cc:	20000488 	.word	0x20000488
 80030d0:	2000047c 	.word	0x2000047c
 80030d4:	08004b94 	.word	0x08004b94
 80030d8:	08004bcc 	.word	0x08004bcc
 80030dc:	08004ba4 	.word	0x08004ba4
 80030e0:	08004bac 	.word	0x08004bac
 80030e4:	08004bb4 	.word	0x08004bb4
 80030e8:	08004bbc 	.word	0x08004bbc
 80030ec:	080049f4 	.word	0x080049f4
 80030f0:	e000ed08 	.word	0xe000ed08
 80030f4:	08004bec 	.word	0x08004bec
 80030f8:	20000000 	.word	0x20000000
 80030fc:	08004c04 	.word	0x08004c04
 8003100:	08004c1c 	.word	0x08004c1c
 8003104:	08004c38 	.word	0x08004c38
 8003108:	08004c4c 	.word	0x08004c4c
 800310c:	08004bc8 	.word	0x08004bc8
 8003110:	08004f7c 	.word	0x08004f7c
 8003114:	08004bd4 	.word	0x08004bd4
 8003118:	08007401 	.word	0x08007401
 800311c:	08004be0 	.word	0x08004be0
 8003120:	08004b90 	.word	0x08004b90
 8003124:	08004b84 	.word	0x08004b84
 8003128:	08004c54 	.word	0x08004c54

0800312c <bootloader_start>:
int bootloader_start(void) {
 800312c:	b508      	push	{r3, lr}
    if (usbd_dev) { return 1; }  // Already started, quit.
 800312e:	4b16      	ldr	r3, [pc, #88]	; (8003188 <bootloader_start+0x5c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	b10b      	cbz	r3, 8003138 <bootloader_start+0xc>
 8003134:	2001      	movs	r0, #1
}
 8003136:	bd08      	pop	{r3, pc}
    if (boot_target_get_startup_mode() == BASELOADER_MODE) { 
 8003138:	f000 f932 	bl	80033a0 <boot_target_get_startup_mode>
 800313c:	2801      	cmp	r0, #1
 800313e:	d01a      	beq.n	8003176 <bootloader_start+0x4a>
    debug_println("----bootloader");  // debug_flush();    
 8003140:	4812      	ldr	r0, [pc, #72]	; (800318c <bootloader_start+0x60>)
 8003142:	f7ff fc59 	bl	80029f8 <debug_println>
    boot_target_gpio_setup();  //  Initialize GPIO/LEDs if needed
 8003146:	f000 f9af 	bl	80034a8 <boot_target_gpio_setup>
    get_serial_number();  //  Get the unique Blue Pill serial number.
 800314a:	f7ff fe07 	bl	8002d5c <get_serial_number>
    if (boot_target_get_startup_mode() == BOOTLOADER_MODE) { 
 800314e:	f000 f927 	bl	80033a0 <boot_target_get_startup_mode>
 8003152:	2802      	cmp	r0, #2
 8003154:	d012      	beq.n	800317c <bootloader_start+0x50>
    debug_println("usb_setup");  // debug_flush();
 8003156:	480e      	ldr	r0, [pc, #56]	; (8003190 <bootloader_start+0x64>)
 8003158:	f7ff fc4e 	bl	80029f8 <debug_println>
    usbd_dev = usb_setup();
 800315c:	f000 fa96 	bl	800368c <usb_setup>
 8003160:	4b09      	ldr	r3, [pc, #36]	; (8003188 <bootloader_start+0x5c>)
 8003162:	6018      	str	r0, [r3, #0]
    if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 8003164:	f000 f91c 	bl	80033a0 <boot_target_get_startup_mode>
 8003168:	2803      	cmp	r0, #3
 800316a:	d10b      	bne.n	8003184 <bootloader_start+0x58>
        target_set_bootloader_callback(bootloader_poll);
 800316c:	4809      	ldr	r0, [pc, #36]	; (8003194 <bootloader_start+0x68>)
 800316e:	f7fd fcdd 	bl	8000b2c <target_set_bootloader_callback>
        return 0; 
 8003172:	2000      	movs	r0, #0
 8003174:	e7df      	b.n	8003136 <bootloader_start+0xa>
        prepare_baseloader();
 8003176:	f7ff fe99 	bl	8002eac <prepare_baseloader>
 800317a:	e7e1      	b.n	8003140 <bootloader_start+0x14>
        __set_MSP((uint32_t) &_boot_stack);
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <bootloader_start+0x6c>)
    asm("msr msp, %0" : : "r" (topOfMainStack));
 800317e:	f383 8808 	msr	MSP, r3
 8003182:	e7e8      	b.n	8003156 <bootloader_start+0x2a>
    poll_loop();
 8003184:	f7ff fe2c 	bl	8002de0 <poll_loop>
 8003188:	200004a0 	.word	0x200004a0
 800318c:	08004af4 	.word	0x08004af4
 8003190:	08004b04 	.word	0x08004b04
 8003194:	08002db1 	.word	0x08002db1
 8003198:	200047bc 	.word	0x200047bc

0800319c <base_flash_program_array>:
static bool hadWrite = false;
static uint32_t ms;
static uint32_t resetTime;
static uint32_t lastFlush;

int base_flash_program_array(uint16_t *dest0, const uint16_t *src0, size_t half_word_count0) {
 800319c:	b510      	push	{r4, lr}
	//  Return the number of half-words flashed.
    base_para.dest = (uint32_t) dest0;
 800319e:	4c0b      	ldr	r4, [pc, #44]	; (80031cc <base_flash_program_array+0x30>)
 80031a0:	6020      	str	r0, [r4, #0]
    base_para.src = (uint32_t) src0;
 80031a2:	6061      	str	r1, [r4, #4]
    base_para.byte_count = half_word_count0 * 2;
 80031a4:	0052      	lsls	r2, r2, #1
 80031a6:	60a2      	str	r2, [r4, #8]
    base_para.restart = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	7323      	strb	r3, [r4, #12]
 80031ac:	7363      	strb	r3, [r4, #13]
 80031ae:	73a3      	strb	r3, [r4, #14]
 80031b0:	73e3      	strb	r3, [r4, #15]
    base_para.preview = 0;
 80031b2:	7423      	strb	r3, [r4, #16]
 80031b4:	7463      	strb	r3, [r4, #17]
 80031b6:	74a3      	strb	r3, [r4, #18]
 80031b8:	74e3      	strb	r3, [r4, #19]
    baseloader_start();
 80031ba:	f7fc ffd5 	bl	8000168 <baseloader_start>
	int bytes_flashed = base_para.result;
 80031be:	6960      	ldr	r0, [r4, #20]
	return (bytes_flashed > 0) ? bytes_flashed / 2 : bytes_flashed;
 80031c0:	2800      	cmp	r0, #0
 80031c2:	dd02      	ble.n	80031ca <base_flash_program_array+0x2e>
 80031c4:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 80031c8:	1040      	asrs	r0, r0, #1
}
 80031ca:	bd10      	pop	{r4, pc}
 80031cc:	20000000 	.word	0x20000000

080031d0 <flash_flush>:

void flash_flush(void) {
    //  Flush the page of cached flashing data to ROM.
    lastFlush = ms;
 80031d0:	4b1d      	ldr	r3, [pc, #116]	; (8003248 <flash_flush+0x78>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <flash_flush+0x7c>)
 80031d6:	601a      	str	r2, [r3, #0]
    if (flashAddr == NO_CACHE) { return; }
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <flash_flush+0x80>)
 80031da:	6819      	ldr	r1, [r3, #0]
 80031dc:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80031e0:	d031      	beq.n	8003246 <flash_flush+0x76>
void flash_flush(void) {
 80031e2:	b510      	push	{r4, lr}
    if (firstFlush) { firstFlush = false; }  //  TODO: disable bootloader or something
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <flash_flush+0x84>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b113      	cbz	r3, 80031f0 <flash_flush+0x20>
 80031ea:	4b1a      	ldr	r3, [pc, #104]	; (8003254 <flash_flush+0x84>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
    DBG("Flush at %x", flashAddr);
    if (memcmp(flashBuf, (void *)flashAddr, FLASH_PAGE_SIZE) != 0) {
 80031f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031f4:	4818      	ldr	r0, [pc, #96]	; (8003258 <flash_flush+0x88>)
 80031f6:	f7ff fa90 	bl	800271a <memcmp>
 80031fa:	b920      	cbnz	r0, 8003206 <flash_flush+0x36>
        //  If the page contents are different, write to ROM.
        debug_print("-> "); debug_printhex_unsigned((size_t) flashAddr); debug_print(" "); //// DBG("Write flush at %x", flashAddr);
        int words_flashed = base_flash_program_array((void *)flashAddr, (void*)flashBuf, FLASH_PAGE_SIZE / 2);
        if (words_flashed != FLASH_PAGE_SIZE / 2) { debug_print("*** ERROR: Flash failed "); debug_print_int(words_flashed); debug_println(""); debug_force_flush(); }
    }
    flashAddr = NO_CACHE;
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <flash_flush+0x80>)
 80031fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003202:	601a      	str	r2, [r3, #0]
}
 8003204:	bd10      	pop	{r4, pc}
        debug_print("-> "); debug_printhex_unsigned((size_t) flashAddr); debug_print(" "); //// DBG("Write flush at %x", flashAddr);
 8003206:	4815      	ldr	r0, [pc, #84]	; (800325c <flash_flush+0x8c>)
 8003208:	f7ff fc22 	bl	8002a50 <debug_print>
 800320c:	4c10      	ldr	r4, [pc, #64]	; (8003250 <flash_flush+0x80>)
 800320e:	6820      	ldr	r0, [r4, #0]
 8003210:	f7ff fc6a 	bl	8002ae8 <debug_printhex_unsigned>
 8003214:	4812      	ldr	r0, [pc, #72]	; (8003260 <flash_flush+0x90>)
 8003216:	f7ff fc1b 	bl	8002a50 <debug_print>
        int words_flashed = base_flash_program_array((void *)flashAddr, (void*)flashBuf, FLASH_PAGE_SIZE / 2);
 800321a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800321e:	490e      	ldr	r1, [pc, #56]	; (8003258 <flash_flush+0x88>)
 8003220:	6820      	ldr	r0, [r4, #0]
 8003222:	f7ff ffbb 	bl	800319c <base_flash_program_array>
 8003226:	4604      	mov	r4, r0
        if (words_flashed != FLASH_PAGE_SIZE / 2) { debug_print("*** ERROR: Flash failed "); debug_print_int(words_flashed); debug_println(""); debug_force_flush(); }
 8003228:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800322c:	d0e6      	beq.n	80031fc <flash_flush+0x2c>
 800322e:	480d      	ldr	r0, [pc, #52]	; (8003264 <flash_flush+0x94>)
 8003230:	f7ff fc0e 	bl	8002a50 <debug_print>
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff fc17 	bl	8002a68 <debug_print_int>
 800323a:	480b      	ldr	r0, [pc, #44]	; (8003268 <flash_flush+0x98>)
 800323c:	f7ff fbdc 	bl	80029f8 <debug_println>
 8003240:	f7ff fb6c 	bl	800291c <debug_force_flush>
 8003244:	e7da      	b.n	80031fc <flash_flush+0x2c>
 8003246:	4770      	bx	lr
 8003248:	200004a8 	.word	0x200004a8
 800324c:	200004a4 	.word	0x200004a4
 8003250:	2000005c 	.word	0x2000005c
 8003254:	20000168 	.word	0x20000168
 8003258:	200047bc 	.word	0x200047bc
 800325c:	08004c70 	.word	0x08004c70
 8003260:	08004f7c 	.word	0x08004f7c
 8003264:	08004c74 	.word	0x08004c74
 8003268:	080049f4 	.word	0x080049f4

0800326c <flash_write>:

void flash_write(uint32_t dst, const uint8_t *src, int byte_count) {
 800326c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003270:	4604      	mov	r4, r0
 8003272:	460e      	mov	r6, r1
 8003274:	4615      	mov	r5, r2
    //  Write len bytes from src to ROM at address dst.  The writing is buffered in RAM until flash_flush() is called.    
    //  TODO: Support other memory sizes.
    int valid = 
        (dst >= 0x08000000 && (dst + byte_count) < 0x8010000 &&
 8003276:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 800327a:	d313      	bcc.n	80032a4 <flash_write+0x38>
 800327c:	4611      	mov	r1, r2
 800327e:	4402      	add	r2, r0
 8003280:	4b28      	ldr	r3, [pc, #160]	; (8003324 <flash_write+0xb8>)
 8003282:	429a      	cmp	r2, r3
 8003284:	d80e      	bhi.n	80032a4 <flash_write+0x38>
        (
            ((uint32_t) src >= 0x08000000 && ((uint32_t) src + byte_count) < 0x08010000) ||
 8003286:	4633      	mov	r3, r6
        (dst >= 0x08000000 && (dst + byte_count) < 0x8010000 &&
 8003288:	f1b6 6f00 	cmp.w	r6, #134217728	; 0x8000000
 800328c:	d303      	bcc.n	8003296 <flash_write+0x2a>
            ((uint32_t) src >= 0x08000000 && ((uint32_t) src + byte_count) < 0x08010000) ||
 800328e:	1970      	adds	r0, r6, r5
 8003290:	4a24      	ldr	r2, [pc, #144]	; (8003324 <flash_write+0xb8>)
 8003292:	4290      	cmp	r0, r2
 8003294:	d92a      	bls.n	80032ec <flash_write+0x80>
 8003296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800329a:	d303      	bcc.n	80032a4 <flash_write+0x38>
            ((uint32_t) src >= 0x20000000 && ((uint32_t) src + byte_count) < 0x20005000)
 800329c:	4419      	add	r1, r3
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <flash_write+0xbc>)
 80032a0:	4299      	cmp	r1, r3
 80032a2:	d923      	bls.n	80032ec <flash_write+0x80>
        ));
    if (!valid) {
        debug_print("**** ERROR: Invalid flash write, dst "); debug_printhex_unsigned(dst); 
 80032a4:	4821      	ldr	r0, [pc, #132]	; (800332c <flash_write+0xc0>)
 80032a6:	f7ff fbd3 	bl	8002a50 <debug_print>
 80032aa:	4620      	mov	r0, r4
 80032ac:	f7ff fc1c 	bl	8002ae8 <debug_printhex_unsigned>
        debug_print(", src "); debug_printhex_unsigned((uint32_t) src);
 80032b0:	481f      	ldr	r0, [pc, #124]	; (8003330 <flash_write+0xc4>)
 80032b2:	f7ff fbcd 	bl	8002a50 <debug_print>
 80032b6:	4630      	mov	r0, r6
 80032b8:	f7ff fc16 	bl	8002ae8 <debug_printhex_unsigned>
        debug_print(", len "); debug_printhex_unsigned(byte_count); debug_println(""); debug_force_flush();
 80032bc:	481d      	ldr	r0, [pc, #116]	; (8003334 <flash_write+0xc8>)
 80032be:	f7ff fbc7 	bl	8002a50 <debug_print>
 80032c2:	4628      	mov	r0, r5
 80032c4:	f7ff fc10 	bl	8002ae8 <debug_printhex_unsigned>
 80032c8:	481b      	ldr	r0, [pc, #108]	; (8003338 <flash_write+0xcc>)
 80032ca:	f7ff fb95 	bl	80029f8 <debug_println>
 80032ce:	f7ff fb25 	bl	800291c <debug_force_flush>
        //  Copy next page.
        dst += len;
        src += len;
        byte_count -= len;
    }
}
 80032d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint32_t offset = dst & (FLASH_PAGE_SIZE - 1);
 80032d6:	f3c4 0309 	ubfx	r3, r4, #0, #10
        memcpy(flashBuf + offset, src, len);
 80032da:	463a      	mov	r2, r7
 80032dc:	4631      	mov	r1, r6
 80032de:	4817      	ldr	r0, [pc, #92]	; (800333c <flash_write+0xd0>)
 80032e0:	4418      	add	r0, r3
 80032e2:	f7ff fa2a 	bl	800273a <memcpy>
        dst += len;
 80032e6:	443c      	add	r4, r7
        src += len;
 80032e8:	443e      	add	r6, r7
        byte_count -= len;
 80032ea:	1bed      	subs	r5, r5, r7
    while (byte_count > 0) {
 80032ec:	2d00      	cmp	r5, #0
 80032ee:	ddf0      	ble.n	80032d2 <flash_write+0x66>
        int len = (byte_count > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : byte_count;
 80032f0:	462f      	mov	r7, r5
 80032f2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80032f6:	bfa8      	it	ge
 80032f8:	f44f 6780 	movge.w	r7, #1024	; 0x400
        uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);
 80032fc:	f424 787f 	bic.w	r8, r4, #1020	; 0x3fc
 8003300:	f028 0803 	bic.w	r8, r8, #3
        if (newAddr != flashAddr) {  //  If the cache has a different page...
 8003304:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <flash_write+0xd4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4543      	cmp	r3, r8
 800330a:	d0e4      	beq.n	80032d6 <flash_write+0x6a>
            flash_flush();           //  Flush the previous cached page.
 800330c:	f7ff ff60 	bl	80031d0 <flash_flush>
            flashAddr = newAddr;
 8003310:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <flash_write+0xd4>)
 8003312:	f8c3 8000 	str.w	r8, [r3]
            memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);  //  Copy the current ROM page into the buffer.
 8003316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800331a:	4641      	mov	r1, r8
 800331c:	4807      	ldr	r0, [pc, #28]	; (800333c <flash_write+0xd0>)
 800331e:	f7ff fa0c 	bl	800273a <memcpy>
 8003322:	e7d8      	b.n	80032d6 <flash_write+0x6a>
 8003324:	0800ffff 	.word	0x0800ffff
 8003328:	20004fff 	.word	0x20004fff
 800332c:	08004c90 	.word	0x08004c90
 8003330:	08004bac 	.word	0x08004bac
 8003334:	08004bb4 	.word	0x08004bb4
 8003338:	080049f4 	.word	0x080049f4
 800333c:	200047bc 	.word	0x200047bc
 8003340:	2000005c 	.word	0x2000005c

08003344 <validate_application>:
static const uint32_t CMD_BOOT = 0x544F4F42UL;  //  Forced startup into Bootloader Mode.
static const uint32_t CMD_APP  = 0x3f82722aUL;  //  Forced startup into Application Mode.
static enum StartupMode startup_mode        = UNKNOWN_MODE;  //  Current startup mode.
static enum StartupMode forced_startup_mode = UNKNOWN_MODE;  //  Forced startup mode, if we were forced into this mode before restarting. If we were not forced, set to UNKNOWN_MODE.

static bool validate_application(void) {
 8003344:	b510      	push	{r4, lr}
    //  Return true if there is a valid application in firmware.  The second or fourth byte should be 0xb5, the "push" instruction.
    uint32_t first_word = *(volatile uint32_t *)APP_BASE_ADDRESS;
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <validate_application+0x48>)
 8003348:	681c      	ldr	r4, [r3, #0]
    if ((first_word & 0xff00) == 0xb500 || (first_word & 0xff000000) == 0xb5000000) {
 800334a:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 800334e:	f5b3 4f35 	cmp.w	r3, #46336	; 0xb500
 8003352:	d015      	beq.n	8003380 <validate_application+0x3c>
 8003354:	f004 437f 	and.w	r3, r4, #4278190080	; 0xff000000
 8003358:	f1b3 4f35 	cmp.w	r3, #3036676096	; 0xb5000000
 800335c:	d010      	beq.n	8003380 <validate_application+0x3c>
        debug_println("app exists");
        return true;
    }
    debug_print("app missing "); debug_printhex_unsigned((size_t) APP_BASE_ADDRESS);
 800335e:	480c      	ldr	r0, [pc, #48]	; (8003390 <validate_application+0x4c>)
 8003360:	f7ff fb76 	bl	8002a50 <debug_print>
 8003364:	4809      	ldr	r0, [pc, #36]	; (800338c <validate_application+0x48>)
 8003366:	f7ff fbbf 	bl	8002ae8 <debug_printhex_unsigned>
    debug_print(" = "); debug_printhex_unsigned(first_word); debug_println("");
 800336a:	480a      	ldr	r0, [pc, #40]	; (8003394 <validate_application+0x50>)
 800336c:	f7ff fb70 	bl	8002a50 <debug_print>
 8003370:	4620      	mov	r0, r4
 8003372:	f7ff fbb9 	bl	8002ae8 <debug_printhex_unsigned>
 8003376:	4808      	ldr	r0, [pc, #32]	; (8003398 <validate_application+0x54>)
 8003378:	f7ff fb3e 	bl	80029f8 <debug_println>
    return false;
 800337c:	2000      	movs	r0, #0
 800337e:	e003      	b.n	8003388 <validate_application+0x44>
        debug_println("app exists");
 8003380:	4806      	ldr	r0, [pc, #24]	; (800339c <validate_application+0x58>)
 8003382:	f7ff fb39 	bl	80029f8 <debug_println>
        return true;
 8003386:	2001      	movs	r0, #1
}
 8003388:	bd10      	pop	{r4, pc}
 800338a:	bf00      	nop
 800338c:	08007400 	.word	0x08007400
 8003390:	08004de4 	.word	0x08004de4
 8003394:	08004df4 	.word	0x08004df4
 8003398:	080049f4 	.word	0x080049f4
 800339c:	08004dd8 	.word	0x08004dd8

080033a0 <boot_target_get_startup_mode>:

enum StartupMode boot_target_get_startup_mode(void) {
 80033a0:	b538      	push	{r3, r4, r5, lr}
    //  Get the startup mode: Bootloader or Application.
    //  return BOOTLOADER_MODE; ////
    
    if (startup_mode != UNKNOWN_MODE) { return startup_mode; }
 80033a2:	4b2e      	ldr	r3, [pc, #184]	; (800345c <boot_target_get_startup_mode+0xbc>)
 80033a4:	7818      	ldrb	r0, [r3, #0]
 80033a6:	b100      	cbz	r0, 80033aa <boot_target_get_startup_mode+0xa>
        //  Else go to Application Mode.
        debug_print("----application mode"); debug_println((forced_startup_mode == APPLICATION_MODE) ? " (forced)" : "");
        startup_mode = APPLICATION_MODE;
    }
    return startup_mode;
}
 80033a8:	bd38      	pop	{r3, r4, r5, pc}
    bool appValid = validate_application();
 80033aa:	f7ff ffcb 	bl	8003344 <validate_application>
 80033ae:	4605      	mov	r5, r0
    uint32_t cmd = backup_read(BKP0);  //  Returns 0, CMD_BOOT, CMD_APP.
 80033b0:	2000      	movs	r0, #0
 80033b2:	f001 fa0f 	bl	80047d4 <backup_read>
 80033b6:	4604      	mov	r4, r0
    backup_write(BKP0, 0);  //  Clear the backup register so it will boot back into Application Mode next time.
 80033b8:	2100      	movs	r1, #0
 80033ba:	4608      	mov	r0, r1
 80033bc:	f001 f9f0 	bl	80047a0 <backup_write>
    switch(cmd) {
 80033c0:	4b27      	ldr	r3, [pc, #156]	; (8003460 <boot_target_get_startup_mode+0xc0>)
 80033c2:	429c      	cmp	r4, r3
 80033c4:	d00c      	beq.n	80033e0 <boot_target_get_startup_mode+0x40>
 80033c6:	f103 230e 	add.w	r3, r3, #234884608	; 0xe000e00
 80033ca:	f503 037c 	add.w	r3, r3, #16515072	; 0xfc0000
 80033ce:	429c      	cmp	r4, r3
 80033d0:	d01d      	beq.n	800340e <boot_target_get_startup_mode+0x6e>
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <boot_target_get_startup_mode+0xc4>)
 80033d4:	429c      	cmp	r4, r3
 80033d6:	d01e      	beq.n	8003416 <boot_target_get_startup_mode+0x76>
        default:             forced_startup_mode = UNKNOWN_MODE; break;
 80033d8:	4b23      	ldr	r3, [pc, #140]	; (8003468 <boot_target_get_startup_mode+0xc8>)
 80033da:	2200      	movs	r2, #0
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e006      	b.n	80033ee <boot_target_get_startup_mode+0x4e>
        case (int) CMD_BASE: forced_startup_mode = BASELOADER_MODE; backup_write(BKP0, CMD_BOOT); break;  //  Reboot as bootloader to complete.
 80033e0:	4b21      	ldr	r3, [pc, #132]	; (8003468 <boot_target_get_startup_mode+0xc8>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
 80033e6:	4921      	ldr	r1, [pc, #132]	; (800346c <boot_target_get_startup_mode+0xcc>)
 80033e8:	2000      	movs	r0, #0
 80033ea:	f001 f9d9 	bl	80047a0 <backup_write>
    if (cmd == CMD_BASE) {
 80033ee:	4b1c      	ldr	r3, [pc, #112]	; (8003460 <boot_target_get_startup_mode+0xc0>)
 80033f0:	429c      	cmp	r4, r3
 80033f2:	d014      	beq.n	800341e <boot_target_get_startup_mode+0x7e>
    } else if (cmd == CMD_BOOT) {
 80033f4:	4b1d      	ldr	r3, [pc, #116]	; (800346c <boot_target_get_startup_mode+0xcc>)
 80033f6:	429c      	cmp	r4, r3
 80033f8:	d018      	beq.n	800342c <boot_target_get_startup_mode+0x8c>
    } else if (!appValid) {
 80033fa:	b9f5      	cbnz	r5, 800343a <boot_target_get_startup_mode+0x9a>
        debug_println("----bootloader mode (no app)");
 80033fc:	481c      	ldr	r0, [pc, #112]	; (8003470 <boot_target_get_startup_mode+0xd0>)
 80033fe:	f7ff fafb 	bl	80029f8 <debug_println>
        startup_mode = BOOTLOADER_MODE;
 8003402:	4b16      	ldr	r3, [pc, #88]	; (800345c <boot_target_get_startup_mode+0xbc>)
 8003404:	2202      	movs	r2, #2
 8003406:	701a      	strb	r2, [r3, #0]
    return startup_mode;
 8003408:	4b14      	ldr	r3, [pc, #80]	; (800345c <boot_target_get_startup_mode+0xbc>)
 800340a:	7818      	ldrb	r0, [r3, #0]
 800340c:	e7cc      	b.n	80033a8 <boot_target_get_startup_mode+0x8>
        case (int) CMD_BOOT: forced_startup_mode = BOOTLOADER_MODE; break;
 800340e:	4b16      	ldr	r3, [pc, #88]	; (8003468 <boot_target_get_startup_mode+0xc8>)
 8003410:	2202      	movs	r2, #2
 8003412:	701a      	strb	r2, [r3, #0]
 8003414:	e7eb      	b.n	80033ee <boot_target_get_startup_mode+0x4e>
        case (int) CMD_APP:  forced_startup_mode = APPLICATION_MODE; break;
 8003416:	4b14      	ldr	r3, [pc, #80]	; (8003468 <boot_target_get_startup_mode+0xc8>)
 8003418:	2203      	movs	r2, #3
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	e7e7      	b.n	80033ee <boot_target_get_startup_mode+0x4e>
        debug_println("----baseloader mode (forced)");
 800341e:	4815      	ldr	r0, [pc, #84]	; (8003474 <boot_target_get_startup_mode+0xd4>)
 8003420:	f7ff faea 	bl	80029f8 <debug_println>
        startup_mode = BASELOADER_MODE;
 8003424:	4b0d      	ldr	r3, [pc, #52]	; (800345c <boot_target_get_startup_mode+0xbc>)
 8003426:	2201      	movs	r2, #1
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e7ed      	b.n	8003408 <boot_target_get_startup_mode+0x68>
        debug_println("----bootloader mode (forced)");
 800342c:	4812      	ldr	r0, [pc, #72]	; (8003478 <boot_target_get_startup_mode+0xd8>)
 800342e:	f7ff fae3 	bl	80029f8 <debug_println>
        startup_mode = BOOTLOADER_MODE;
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <boot_target_get_startup_mode+0xbc>)
 8003434:	2202      	movs	r2, #2
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	e7e6      	b.n	8003408 <boot_target_get_startup_mode+0x68>
        debug_print("----application mode"); debug_println((forced_startup_mode == APPLICATION_MODE) ? " (forced)" : "");
 800343a:	4810      	ldr	r0, [pc, #64]	; (800347c <boot_target_get_startup_mode+0xdc>)
 800343c:	f7ff fb08 	bl	8002a50 <debug_print>
 8003440:	4b09      	ldr	r3, [pc, #36]	; (8003468 <boot_target_get_startup_mode+0xc8>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d006      	beq.n	8003456 <boot_target_get_startup_mode+0xb6>
 8003448:	480d      	ldr	r0, [pc, #52]	; (8003480 <boot_target_get_startup_mode+0xe0>)
 800344a:	f7ff fad5 	bl	80029f8 <debug_println>
        startup_mode = APPLICATION_MODE;
 800344e:	4b03      	ldr	r3, [pc, #12]	; (800345c <boot_target_get_startup_mode+0xbc>)
 8003450:	2203      	movs	r2, #3
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	e7d8      	b.n	8003408 <boot_target_get_startup_mode+0x68>
        debug_print("----application mode"); debug_println((forced_startup_mode == APPLICATION_MODE) ? " (forced)" : "");
 8003456:	480b      	ldr	r0, [pc, #44]	; (8003484 <boot_target_get_startup_mode+0xe4>)
 8003458:	e7f7      	b.n	800344a <boot_target_get_startup_mode+0xaa>
 800345a:	bf00      	nop
 800345c:	2000074e 	.word	0x2000074e
 8003460:	45534142 	.word	0x45534142
 8003464:	3f82722a 	.word	0x3f82722a
 8003468:	2000074d 	.word	0x2000074d
 800346c:	544f4f42 	.word	0x544f4f42
 8003470:	08004d5c 	.word	0x08004d5c
 8003474:	08004d1c 	.word	0x08004d1c
 8003478:	08004d3c 	.word	0x08004d3c
 800347c:	08004d7c 	.word	0x08004d7c
 8003480:	080049f4 	.word	0x080049f4
 8003484:	08004d10 	.word	0x08004d10

08003488 <boot_target_set_led>:
    //  Return the forced startup mode, if we were forced into this mode before restarting.  If we were not forced, return UNKNOWN_MODE.
    boot_target_get_startup_mode();
    return forced_startup_mode;
}

void boot_target_set_led(int on) {
 8003488:	b508      	push	{r3, lr}
#if HAVE_LED
        if ((on && LED_OPEN_DRAIN) || (!on && !LED_OPEN_DRAIN)) {
 800348a:	b928      	cbnz	r0, 8003498 <boot_target_set_led+0x10>
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
        } else {
            gpio_set(LED_GPIO_PORT, LED_GPIO_PIN);
 800348c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003490:	4804      	ldr	r0, [pc, #16]	; (80034a4 <boot_target_set_led+0x1c>)
 8003492:	f7fe f9f9 	bl	8001888 <gpio_set>
        }
#else
    (void)on;
#endif
}
 8003496:	bd08      	pop	{r3, pc}
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
 8003498:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800349c:	4801      	ldr	r0, [pc, #4]	; (80034a4 <boot_target_set_led+0x1c>)
 800349e:	f7fe f9f5 	bl	800188c <gpio_clear>
 80034a2:	e7f8      	b.n	8003496 <boot_target_set_led+0xe>
 80034a4:	40011000 	.word	0x40011000

080034a8 <boot_target_gpio_setup>:
    for (int i = 0; i < us*10; i++) {
        __asm__("nop");
    }
}

void boot_target_gpio_setup(void) {
 80034a8:	b510      	push	{r4, lr}
    /* Enable GPIO and USB clocks */
    rcc_periph_clock_enable(RCC_GPIOA);  //  USB on PA11, PA12.
 80034aa:	f240 3002 	movw	r0, #770	; 0x302
 80034ae:	f7fe f9f4 	bl	800189a <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOB);
 80034b2:	f240 3003 	movw	r0, #771	; 0x303
 80034b6:	f7fe f9f0 	bl	800189a <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOC);  //  LED on PC13.
 80034ba:	f44f 7041 	mov.w	r0, #772	; 0x304
 80034be:	f7fe f9ec 	bl	800189a <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_USB);
 80034c2:	f240 3097 	movw	r0, #919	; 0x397
 80034c6:	f7fe f9e8 	bl	800189a <rcc_periph_clock_enable>
    {
        const uint8_t mode = GPIO_MODE_OUTPUT_10_MHZ;
        const uint8_t conf = (LED_OPEN_DRAIN ? GPIO_CNF_OUTPUT_OPENDRAIN
                                             : GPIO_CNF_OUTPUT_PUSHPULL);
        if (LED_OPEN_DRAIN) {
            gpio_set(LED_GPIO_PORT, LED_GPIO_PIN);
 80034ca:	4c10      	ldr	r4, [pc, #64]	; (800350c <boot_target_gpio_setup+0x64>)
 80034cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034d0:	4620      	mov	r0, r4
 80034d2:	f7fe f9d9 	bl	8001888 <gpio_set>
        } else {
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
        }
        gpio_set_mode(LED_GPIO_PORT, mode, conf, LED_GPIO_PIN);
 80034d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034da:	2201      	movs	r2, #1
 80034dc:	4611      	mov	r1, r2
 80034de:	4620      	mov	r0, r4
 80034e0:	f7fe f99c 	bl	800181c <gpio_set_mode>
        gpio_set_mode(USB_PULLUP_GPIO_PORT, mode, conf, USB_PULLUP_GPIO_PIN);
    }
#else
    {
        /* Drive the USB DP pin to override the pull-up */
        gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_10_MHZ,
 80034e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034e8:	2200      	movs	r2, #0
 80034ea:	2101      	movs	r1, #1
 80034ec:	4808      	ldr	r0, [pc, #32]	; (8003510 <boot_target_gpio_setup+0x68>)
 80034ee:	f7fe f995 	bl	800181c <gpio_set_mode>
    }
#endif

    // TFT
    // RST
    gpio_clear(GPIOC, (1 << 4));
 80034f2:	2110      	movs	r1, #16
 80034f4:	4620      	mov	r0, r4
 80034f6:	f7fe f9c9 	bl	800188c <gpio_clear>
    sleep_us(20000);
 80034fa:	f644 6020 	movw	r0, #20000	; 0x4e20
 80034fe:	f001 f9d6 	bl	80048ae <sleep_us>
    //gpio_set(GPIOC, (1 << 4));
    sleep_us(20000);
 8003502:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003506:	f001 f9d2 	bl	80048ae <sleep_us>
}
 800350a:	bd10      	pop	{r4, pc}
 800350c:	40011000 	.word	0x40011000
 8003510:	40010800 	.word	0x40010800

08003514 <boot_target_usb_init>:

const usbd_driver* boot_target_usb_init(void) {
 8003514:	b508      	push	{r3, lr}
    rcc_periph_reset_pulse(RST_USB);
 8003516:	f240 2017 	movw	r0, #535	; 0x217
 800351a:	f7fe f9cc 	bl	80018b6 <rcc_periph_reset_pulse>
    } else {
        gpio_clear(USB_PULLUP_GPIO_PORT, USB_PULLUP_GPIO_PIN);
    }
#else
    /* Override hard-wired USB pullup to disconnect and reconnect */
    gpio_clear(GPIOA, GPIO12);
 800351e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003522:	4806      	ldr	r0, [pc, #24]	; (800353c <boot_target_usb_init+0x28>)
 8003524:	f7fe f9b2 	bl	800188c <gpio_clear>
    int i;
    for (i = 0; i < 800000; i++) {
 8003528:	2300      	movs	r3, #0
 800352a:	e001      	b.n	8003530 <boot_target_usb_init+0x1c>
        __asm__("nop");
 800352c:	bf00      	nop
    for (i = 0; i < 800000; i++) {
 800352e:	3301      	adds	r3, #1
 8003530:	4a03      	ldr	r2, [pc, #12]	; (8003540 <boot_target_usb_init+0x2c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	ddfa      	ble.n	800352c <boot_target_usb_init+0x18>
    }
#endif

    return &st_usbfs_v1_usb_driver;
}
 8003536:	4803      	ldr	r0, [pc, #12]	; (8003544 <boot_target_usb_init+0x30>)
 8003538:	bd08      	pop	{r3, pc}
 800353a:	bf00      	nop
 800353c:	40010800 	.word	0x40010800
 8003540:	000c34ff 	.word	0x000c34ff
 8003544:	08004a24 	.word	0x08004a24

08003548 <boot_target_set_restart_callback>:

static restart_callback_type *restart_callback_func = NULL;

void boot_target_set_restart_callback(restart_callback_type *func) {
 8003548:	b510      	push	{r4, lr}
 800354a:	4604      	mov	r4, r0
    //  Call this function when we need to restart.  Used in Application Mode only.
    debug_print("set restart callback "); debug_printhex_unsigned((size_t) func); debug_println("");
 800354c:	4804      	ldr	r0, [pc, #16]	; (8003560 <boot_target_set_restart_callback+0x18>)
 800354e:	f7ff fa7f 	bl	8002a50 <debug_print>
 8003552:	4620      	mov	r0, r4
 8003554:	f7ff fac8 	bl	8002ae8 <debug_printhex_unsigned>
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <boot_target_set_restart_callback+0x1c>)
 800355a:	f7ff fa4d 	bl	80029f8 <debug_println>
    restart_callback_func = func;
}
 800355e:	bd10      	pop	{r4, pc}
 8003560:	08004dc0 	.word	0x08004dc0
 8003564:	080049f4 	.word	0x080049f4

08003568 <boot_target_manifest_app>:

void boot_target_manifest_app(void) {
 8003568:	b508      	push	{r3, lr}
    //  Restart into Application Mode to run the application.
    debug_println("boot app");
 800356a:	4805      	ldr	r0, [pc, #20]	; (8003580 <boot_target_manifest_app+0x18>)
 800356c:	f7ff fa44 	bl	80029f8 <debug_println>
    debug_force_flush(); ////
 8003570:	f7ff f9d4 	bl	800291c <debug_force_flush>
    backup_write(BKP0, CMD_APP);
 8003574:	4903      	ldr	r1, [pc, #12]	; (8003584 <boot_target_manifest_app+0x1c>)
 8003576:	2000      	movs	r0, #0
 8003578:	f001 f912 	bl	80047a0 <backup_write>
    scb_reset_system();  //  Restart now.
 800357c:	f7fd feee 	bl	800135c <scb_reset_system>
 8003580:	08004d94 	.word	0x08004d94
 8003584:	3f82722a 	.word	0x3f82722a

08003588 <boot_target_manifest_baseloader>:
}

void boot_target_manifest_baseloader(void) {
 8003588:	b508      	push	{r3, lr}
    //  Restart into Baseloader Mode to update the bootloader ROM.
    debug_println("boot baseloader"); 
 800358a:	4805      	ldr	r0, [pc, #20]	; (80035a0 <boot_target_manifest_baseloader+0x18>)
 800358c:	f7ff fa34 	bl	80029f8 <debug_println>
    debug_force_flush(); ////
 8003590:	f7ff f9c4 	bl	800291c <debug_force_flush>
    backup_write(BKP0, CMD_BASE);
 8003594:	4903      	ldr	r1, [pc, #12]	; (80035a4 <boot_target_manifest_baseloader+0x1c>)
 8003596:	2000      	movs	r0, #0
 8003598:	f001 f902 	bl	80047a0 <backup_write>
    scb_reset_system();  //  Restart now.
 800359c:	f7fd fede 	bl	800135c <scb_reset_system>
 80035a0:	08004da0 	.word	0x08004da0
 80035a4:	45534142 	.word	0x45534142

080035a8 <boot_target_manifest_bootloader>:
}

void boot_target_manifest_bootloader(void) {
 80035a8:	b508      	push	{r3, lr}
    //  Restart into Bootloader Mode to run the bootloader.
    debug_println("boot bootloader"); 
 80035aa:	4805      	ldr	r0, [pc, #20]	; (80035c0 <boot_target_manifest_bootloader+0x18>)
 80035ac:	f7ff fa24 	bl	80029f8 <debug_println>
    debug_force_flush(); ////
 80035b0:	f7ff f9b4 	bl	800291c <debug_force_flush>
    backup_write(BKP0, CMD_BOOT);
 80035b4:	4903      	ldr	r1, [pc, #12]	; (80035c4 <boot_target_manifest_bootloader+0x1c>)
 80035b6:	2000      	movs	r0, #0
 80035b8:	f001 f8f2 	bl	80047a0 <backup_write>
    scb_reset_system();  //  Restart now.
 80035bc:	f7fd fece 	bl	800135c <scb_reset_system>
 80035c0:	08004db0 	.word	0x08004db0
 80035c4:	544f4f42 	.word	0x544f4f42

080035c8 <hf2_connected>:
    return hf2_transmit(usbd_dev, buf, len);
}

static void hf2_connected(void) {
    //  Called when HF2 is connected.  We set the HF2 port as a logger output.
    if (hf2_is_connected) { return; }
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <hf2_connected+0x10>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	b913      	cbnz	r3, 80035d4 <hf2_connected+0xc>
    hf2_is_connected = 1;
 80035ce:	4b02      	ldr	r3, [pc, #8]	; (80035d8 <hf2_connected+0x10>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
    ////logger_add_output(usb_hf2_transmit);
}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	20000750 	.word	0x20000750

080035dc <cdc_connected>:
static void cdc_connected(void) {
 80035dc:	b508      	push	{r3, lr}
    if (cdc_is_connected) { return; }
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <cdc_connected+0x18>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b103      	cbz	r3, 80035e6 <cdc_connected+0xa>
}
 80035e4:	bd08      	pop	{r3, pc}
    cdc_is_connected = 1;
 80035e6:	4b03      	ldr	r3, [pc, #12]	; (80035f4 <cdc_connected+0x18>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]
    logger_add_output(usb_cdc_transmit);
 80035ec:	4802      	ldr	r0, [pc, #8]	; (80035f8 <cdc_connected+0x1c>)
 80035ee:	f7ff f949 	bl	8002884 <logger_add_output>
 80035f2:	e7f7      	b.n	80035e4 <cdc_connected+0x8>
 80035f4:	2000074f 	.word	0x2000074f
 80035f8:	080035fd 	.word	0x080035fd

080035fc <usb_cdc_transmit>:
	uint16_t len) {
 80035fc:	b508      	push	{r3, lr}
    if (!usbd_dev || !cdc_is_connected) { return -1; }
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <usb_cdc_transmit+0x28>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	b143      	cbz	r3, 8003616 <usb_cdc_transmit+0x1a>
 8003604:	4a08      	ldr	r2, [pc, #32]	; (8003628 <usb_cdc_transmit+0x2c>)
 8003606:	7812      	ldrb	r2, [r2, #0]
 8003608:	b142      	cbz	r2, 800361c <usb_cdc_transmit+0x20>
 800360a:	460a      	mov	r2, r1
 800360c:	4601      	mov	r1, r0
    return cdcadm_transmit(usbd_dev, buf, len);
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fc5a 	bl	8003ec8 <cdcadm_transmit>
}
 8003614:	bd08      	pop	{r3, pc}
    if (!usbd_dev || !cdc_is_connected) { return -1; }
 8003616:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800361a:	e7fb      	b.n	8003614 <usb_cdc_transmit+0x18>
 800361c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003620:	e7f8      	b.n	8003614 <usb_cdc_transmit+0x18>
 8003622:	bf00      	nop
 8003624:	20000548 	.word	0x20000548
 8003628:	2000074f 	.word	0x2000074f

0800362c <sof_callback>:
static void sof_callback(void) {
 800362c:	b508      	push	{r3, lr}
    last_frame_time = millis();
 800362e:	f7ff fb91 	bl	8002d54 <millis>
 8003632:	4b01      	ldr	r3, [pc, #4]	; (8003638 <sof_callback+0xc>)
 8003634:	6018      	str	r0, [r3, #0]
}
 8003636:	bd08      	pop	{r3, pc}
 8003638:	20000528 	.word	0x20000528

0800363c <set_aggregate_callback>:
	return USBD_REQ_NEXT_CALLBACK;
}

static void set_aggregate_callback(
  usbd_device *usbd_dev,
  uint16_t wValue) {
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	4605      	mov	r5, r0
    //  This callback is called when the device is updated.  We set our control callback.
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
 8003640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003644:	4299      	cmp	r1, r3
 8003646:	d00c      	beq.n	8003662 <set_aggregate_callback+0x26>
 8003648:	460e      	mov	r6, r1
        //  Call the config functions before setting our callback.
        //  debug_println("set_aggregate_callback"); ////
        int i;
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 800364a:	2400      	movs	r4, #0
 800364c:	2c09      	cmp	r4, #9
 800364e:	dc08      	bgt.n	8003662 <set_aggregate_callback+0x26>
            if (!config_callback[i]) { break; }
 8003650:	4b0b      	ldr	r3, [pc, #44]	; (8003680 <set_aggregate_callback+0x44>)
 8003652:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8003656:	b123      	cbz	r3, 8003662 <set_aggregate_callback+0x26>
            (config_callback[i])(usbd_dev, wValue);
 8003658:	4631      	mov	r1, r6
 800365a:	4628      	mov	r0, r5
 800365c:	4798      	blx	r3
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 800365e:	3401      	adds	r4, #1
 8003660:	e7f4      	b.n	800364c <set_aggregate_callback+0x10>
        }
    }
    //  Set our callback.
	int status;
        status = usbd_register_control_callback(
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <set_aggregate_callback+0x48>)
 8003664:	2200      	movs	r2, #0
 8003666:	4611      	mov	r1, r2
 8003668:	4628      	mov	r0, r5
 800366a:	f7fe fa29 	bl	8001ac0 <usbd_register_control_callback>
		usbd_dev,
        0,  //  Register for all notifications.
        0,
		aggregate_callback);
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 800366e:	2800      	cmp	r0, #0
 8003670:	db00      	blt.n	8003674 <set_aggregate_callback+0x38>
}
 8003672:	bd70      	pop	{r4, r5, r6, pc}
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 8003674:	4804      	ldr	r0, [pc, #16]	; (8003688 <set_aggregate_callback+0x4c>)
 8003676:	f7ff f9bf 	bl	80029f8 <debug_println>
 800367a:	f7ff f9e4 	bl	8002a46 <debug_flush>
}
 800367e:	e7f8      	b.n	8003672 <set_aggregate_callback+0x36>
 8003680:	200004ac 	.word	0x200004ac
 8003684:	08003a3d 	.word	0x08003a3d
 8003688:	08004ff4 	.word	0x08004ff4

0800368c <usb_setup>:
usbd_device* usb_setup(void) {
 800368c:	b510      	push	{r4, lr}
 800368e:	b084      	sub	sp, #16
    const usbd_driver* driver = boot_target_usb_init();
 8003690:	f7ff ff40 	bl	8003514 <boot_target_usb_init>
    usbd_dev = usbd_init(driver, &dev, &config, 
 8003694:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003698:	9302      	str	r3, [sp, #8]
 800369a:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <usb_setup+0x7c>)
 800369c:	9301      	str	r3, [sp, #4]
 800369e:	2309      	movs	r3, #9
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <usb_setup+0x80>)
 80036a4:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <usb_setup+0x84>)
 80036a6:	491b      	ldr	r1, [pc, #108]	; (8003714 <usb_setup+0x88>)
 80036a8:	f7fd fdb2 	bl	8001210 <usbd_init>
 80036ac:	4c1a      	ldr	r4, [pc, #104]	; (8003718 <usb_setup+0x8c>)
 80036ae:	6020      	str	r0, [r4, #0]
    usbd_register_sof_callback(usbd_dev, sof_callback);
 80036b0:	491a      	ldr	r1, [pc, #104]	; (800371c <usb_setup+0x90>)
 80036b2:	f7fe f911 	bl	80018d8 <usbd_register_sof_callback>
    cdc_setup(usbd_dev, cdc_connected);
 80036b6:	491a      	ldr	r1, [pc, #104]	; (8003720 <usb_setup+0x94>)
 80036b8:	6820      	ldr	r0, [r4, #0]
 80036ba:	f000 fc5f 	bl	8003f7c <cdc_setup>
    hf2_setup(usbd_dev, hf2_connected);
 80036be:	4919      	ldr	r1, [pc, #100]	; (8003724 <usb_setup+0x98>)
 80036c0:	6820      	ldr	r0, [r4, #0]
 80036c2:	f001 f82d 	bl	8004720 <hf2_setup>
	usb21_setup(usbd_dev, &bos_descriptor);
 80036c6:	4918      	ldr	r1, [pc, #96]	; (8003728 <usb_setup+0x9c>)
 80036c8:	6820      	ldr	r0, [r4, #0]
 80036ca:	f001 f8d1 	bl	8004870 <usb21_setup>
	webusb_setup(usbd_dev, origin_url);
 80036ce:	4917      	ldr	r1, [pc, #92]	; (800372c <usb_setup+0xa0>)
 80036d0:	6820      	ldr	r0, [r4, #0]
 80036d2:	f000 fa83 	bl	8003bdc <webusb_setup>
	winusb_setup(usbd_dev, INTF_HF2);
 80036d6:	2100      	movs	r1, #0
 80036d8:	6820      	ldr	r0, [r4, #0]
 80036da:	f000 fb49 	bl	8003d70 <winusb_setup>
	int status = usbd_register_set_config_callback(usbd_dev, set_aggregate_callback);
 80036de:	4914      	ldr	r1, [pc, #80]	; (8003730 <usb_setup+0xa4>)
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	f7fe fcfc 	bl	80020de <usbd_register_set_config_callback>
    if (status < 0) { debug_println("*** usb_setup failed"); debug_flush(); }
 80036e6:	2800      	cmp	r0, #0
 80036e8:	db08      	blt.n	80036fc <usb_setup+0x70>
    set_aggregate_callback(usbd_dev, (uint16_t) -1);
 80036ea:	4c0b      	ldr	r4, [pc, #44]	; (8003718 <usb_setup+0x8c>)
 80036ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80036f0:	6820      	ldr	r0, [r4, #0]
 80036f2:	f7ff ffa3 	bl	800363c <set_aggregate_callback>
}
 80036f6:	6820      	ldr	r0, [r4, #0]
 80036f8:	b004      	add	sp, #16
 80036fa:	bd10      	pop	{r4, pc}
    if (status < 0) { debug_println("*** usb_setup failed"); debug_flush(); }
 80036fc:	480d      	ldr	r0, [pc, #52]	; (8003734 <usb_setup+0xa8>)
 80036fe:	f7ff f97b 	bl	80029f8 <debug_println>
 8003702:	f7ff f9a0 	bl	8002a46 <debug_flush>
 8003706:	e7f0      	b.n	80036ea <usb_setup+0x5e>
 8003708:	2000064c 	.word	0x2000064c
 800370c:	20000068 	.word	0x20000068
 8003710:	08004ea4 	.word	0x08004ea4
 8003714:	08004eec 	.word	0x08004eec
 8003718:	20000548 	.word	0x20000548
 800371c:	0800362d 	.word	0x0800362d
 8003720:	080035dd 	.word	0x080035dd
 8003724:	080035c9 	.word	0x080035c9
 8003728:	08004e54 	.word	0x08004e54
 800372c:	080050a8 	.word	0x080050a8
 8003730:	0800363d 	.word	0x0800363d
 8003734:	080050c4 	.word	0x080050c4

08003738 <set_usb_busy>:
void set_usb_busy(void) {
 8003738:	b508      	push	{r3, lr}
    last_busy_time = millis();
 800373a:	f7ff fb0b 	bl	8002d54 <millis>
 800373e:	4b03      	ldr	r3, [pc, #12]	; (800374c <set_usb_busy+0x14>)
 8003740:	6018      	str	r0, [r3, #0]
    debug_print(".");
 8003742:	4803      	ldr	r0, [pc, #12]	; (8003750 <set_usb_busy+0x18>)
 8003744:	f7ff f984 	bl	8002a50 <debug_print>
}
 8003748:	bd08      	pop	{r3, pc}
 800374a:	bf00      	nop
 800374c:	20000524 	.word	0x20000524
 8003750:	08004b64 	.word	0x08004b64

08003754 <get_usb_status>:
    if (last_busy_time == 0) { return 0; }
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <get_usb_status+0x34>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	b90b      	cbnz	r3, 800375e <get_usb_status+0xa>
 800375a:	2000      	movs	r0, #0
}
 800375c:	4770      	bx	lr
volatile int get_usb_status(void) { 
 800375e:	b500      	push	{lr}
 8003760:	b083      	sub	sp, #12
    volatile uint32_t now = millis();
 8003762:	f7ff faf7 	bl	8002d54 <millis>
 8003766:	9001      	str	r0, [sp, #4]
    if (now < (last_busy_time + BUSY_DURATION)) { 
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <get_usb_status+0x34>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003770:	3308      	adds	r3, #8
 8003772:	9a01      	ldr	r2, [sp, #4]
 8003774:	4293      	cmp	r3, r2
 8003776:	d805      	bhi.n	8003784 <get_usb_status+0x30>
    last_busy_time = 0;
 8003778:	2000      	movs	r0, #0
 800377a:	4b03      	ldr	r3, [pc, #12]	; (8003788 <get_usb_status+0x34>)
 800377c:	6018      	str	r0, [r3, #0]
}
 800377e:	b003      	add	sp, #12
 8003780:	f85d fb04 	ldr.w	pc, [sp], #4
        return 1; 
 8003784:	2001      	movs	r0, #1
 8003786:	e7fa      	b.n	800377e <get_usb_status+0x2a>
 8003788:	20000524 	.word	0x20000524

0800378c <aggregate_register_config_callback>:
	usbd_set_config_callback callback) {
 800378c:	b508      	push	{r3, lr}
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 800378e:	2300      	movs	r3, #0
 8003790:	2b09      	cmp	r3, #9
 8003792:	dc0c      	bgt.n	80037ae <aggregate_register_config_callback+0x22>
		if (config_callback[i]) {
 8003794:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <aggregate_register_config_callback+0x38>)
 8003796:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800379a:	b11a      	cbz	r2, 80037a4 <aggregate_register_config_callback+0x18>
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 800379c:	428a      	cmp	r2, r1
 800379e:	d00e      	beq.n	80037be <aggregate_register_config_callback+0x32>
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80037a0:	3301      	adds	r3, #1
 80037a2:	e7f5      	b.n	8003790 <aggregate_register_config_callback+0x4>
		config_callback[i] = callback;
 80037a4:	4a07      	ldr	r2, [pc, #28]	; (80037c4 <aggregate_register_config_callback+0x38>)
 80037a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 0;
 80037aa:	2000      	movs	r0, #0
 80037ac:	e008      	b.n	80037c0 <aggregate_register_config_callback+0x34>
    debug_println("*** ERROR: Too many config callbacks"); debug_flush();
 80037ae:	4806      	ldr	r0, [pc, #24]	; (80037c8 <aggregate_register_config_callback+0x3c>)
 80037b0:	f7ff f922 	bl	80029f8 <debug_println>
 80037b4:	f7ff f947 	bl	8002a46 <debug_flush>
	return -1;
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037bc:	e000      	b.n	80037c0 <aggregate_register_config_callback+0x34>
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 80037be:	2000      	movs	r0, #0
}
 80037c0:	bd08      	pop	{r3, pc}
 80037c2:	bf00      	nop
 80037c4:	200004ac 	.word	0x200004ac
 80037c8:	08004e2c 	.word	0x08004e2c

080037cc <aggregate_register_callback>:
    usbd_control_callback callback) {
 80037cc:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80037ce:	2000      	movs	r0, #0
 80037d0:	e000      	b.n	80037d4 <aggregate_register_callback+0x8>
 80037d2:	3001      	adds	r0, #1
 80037d4:	2809      	cmp	r0, #9
 80037d6:	dc1c      	bgt.n	8003812 <aggregate_register_callback+0x46>
		if (control_callback[i].cb) { 
 80037d8:	4c12      	ldr	r4, [pc, #72]	; (8003824 <aggregate_register_callback+0x58>)
 80037da:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 80037de:	6864      	ldr	r4, [r4, #4]
 80037e0:	b174      	cbz	r4, 8003800 <aggregate_register_callback+0x34>
            if (control_callback[i].type == type &&
 80037e2:	4d10      	ldr	r5, [pc, #64]	; (8003824 <aggregate_register_callback+0x58>)
 80037e4:	f815 5030 	ldrb.w	r5, [r5, r0, lsl #3]
 80037e8:	428d      	cmp	r5, r1
 80037ea:	d1f2      	bne.n	80037d2 <aggregate_register_callback+0x6>
                control_callback[i].type_mask == type_mask &&
 80037ec:	4d0d      	ldr	r5, [pc, #52]	; (8003824 <aggregate_register_callback+0x58>)
 80037ee:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 80037f2:	786d      	ldrb	r5, [r5, #1]
            if (control_callback[i].type == type &&
 80037f4:	4295      	cmp	r5, r2
 80037f6:	d1ec      	bne.n	80037d2 <aggregate_register_callback+0x6>
                control_callback[i].type_mask == type_mask &&
 80037f8:	429c      	cmp	r4, r3
 80037fa:	d1ea      	bne.n	80037d2 <aggregate_register_callback+0x6>
                    return 0;
 80037fc:	2000      	movs	r0, #0
}
 80037fe:	bd38      	pop	{r3, r4, r5, pc}
		control_callback[i].type = type;
 8003800:	4c08      	ldr	r4, [pc, #32]	; (8003824 <aggregate_register_callback+0x58>)
 8003802:	f804 1030 	strb.w	r1, [r4, r0, lsl #3]
		control_callback[i].type_mask = type_mask;
 8003806:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800380a:	7042      	strb	r2, [r0, #1]
		control_callback[i].cb = callback;
 800380c:	6043      	str	r3, [r0, #4]
		return 0;
 800380e:	2000      	movs	r0, #0
 8003810:	e7f5      	b.n	80037fe <aggregate_register_callback+0x32>
    debug_println("*** ERROR: Too many control callbacks"); debug_flush();
 8003812:	4805      	ldr	r0, [pc, #20]	; (8003828 <aggregate_register_callback+0x5c>)
 8003814:	f7ff f8f0 	bl	80029f8 <debug_println>
 8003818:	f7ff f915 	bl	8002a46 <debug_flush>
	return -1;
 800381c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003820:	e7ed      	b.n	80037fe <aggregate_register_callback+0x32>
 8003822:	bf00      	nop
 8003824:	200004d4 	.word	0x200004d4
 8003828:	08004e04 	.word	0x08004e04

0800382c <usb_set_serial_number>:

void usb_set_serial_number(const char* serial) {
    serial_number[0] = '\0';
 800382c:	4b07      	ldr	r3, [pc, #28]	; (800384c <usb_set_serial_number+0x20>)
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]
    if (serial) {
 8003832:	b148      	cbz	r0, 8003848 <usb_set_serial_number+0x1c>
void usb_set_serial_number(const char* serial) {
 8003834:	b510      	push	{r4, lr}
 8003836:	4601      	mov	r1, r0
        strncpy(serial_number, serial, USB_SERIAL_NUM_LENGTH);
 8003838:	461c      	mov	r4, r3
 800383a:	2218      	movs	r2, #24
 800383c:	4618      	mov	r0, r3
 800383e:	f7fe ff9c 	bl	800277a <strncpy>
        serial_number[USB_SERIAL_NUM_LENGTH] = '\0';
 8003842:	2300      	movs	r3, #0
 8003844:	7623      	strb	r3, [r4, #24]
    }
}
 8003846:	bd10      	pop	{r4, pc}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	2000052c 	.word	0x2000052c

08003850 <dump_buffer>:

void dump_buffer(const char *msg, const uint8_t *buf, int len) {
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	460e      	mov	r6, r1
 8003854:	4615      	mov	r5, r2
    debug_print(msg); debug_print(" ");
 8003856:	f7ff f8fb 	bl	8002a50 <debug_print>
 800385a:	480c      	ldr	r0, [pc, #48]	; (800388c <dump_buffer+0x3c>)
 800385c:	f7ff f8f8 	bl	8002a50 <debug_print>
    debug_print_unsigned(len); debug_print(" / ");
 8003860:	4628      	mov	r0, r5
 8003862:	f7ff f905 	bl	8002a70 <debug_print_unsigned>
 8003866:	480a      	ldr	r0, [pc, #40]	; (8003890 <dump_buffer+0x40>)
 8003868:	f7ff f8f2 	bl	8002a50 <debug_print>
    int i;
    for (i = 0; i < len; i++) { 
 800386c:	2400      	movs	r4, #0
 800386e:	e006      	b.n	800387e <dump_buffer+0x2e>
        debug_printhex(buf[i]); debug_print(" "); 
 8003870:	5d30      	ldrb	r0, [r6, r4]
 8003872:	f7ff f901 	bl	8002a78 <debug_printhex>
 8003876:	4805      	ldr	r0, [pc, #20]	; (800388c <dump_buffer+0x3c>)
 8003878:	f7ff f8ea 	bl	8002a50 <debug_print>
    for (i = 0; i < len; i++) { 
 800387c:	3401      	adds	r4, #1
 800387e:	42ac      	cmp	r4, r5
 8003880:	dbf6      	blt.n	8003870 <dump_buffer+0x20>
    }
    debug_println("");
 8003882:	4804      	ldr	r0, [pc, #16]	; (8003894 <dump_buffer+0x44>)
 8003884:	f7ff f8b8 	bl	80029f8 <debug_println>
}
 8003888:	bd70      	pop	{r4, r5, r6, pc}
 800388a:	bf00      	nop
 800388c:	08004f7c 	.word	0x08004f7c
 8003890:	08004f00 	.word	0x08004f00
 8003894:	080049f4 	.word	0x080049f4

08003898 <dump_usb_request>:

void dump_usb_request(const char *msg, struct usb_setup_data *req) {
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	460c      	mov	r4, r1
    debug_print(msg);
 800389c:	f7ff f8d8 	bl	8002a50 <debug_print>
    ////debug_println(""); return; ////

    uint8_t desc_type = usb_descriptor_type(req->wValue);
 80038a0:	8865      	ldrh	r5, [r4, #2]
 80038a2:	4628      	mov	r0, r5
 80038a4:	f001 f812 	bl	80048cc <usb_descriptor_type>
 80038a8:	4606      	mov	r6, r0
    uint8_t desc_index = usb_descriptor_index(req->wValue);
 80038aa:	4628      	mov	r0, r5
 80038ac:	f001 f810 	bl	80048d0 <usb_descriptor_index>
 80038b0:	4605      	mov	r5, r0
    debug_print(" typ "); debug_printhex(req->bmRequestType);
 80038b2:	4850      	ldr	r0, [pc, #320]	; (80039f4 <dump_usb_request+0x15c>)
 80038b4:	f7ff f8cc 	bl	8002a50 <debug_print>
 80038b8:	7820      	ldrb	r0, [r4, #0]
 80038ba:	f7ff f8dd 	bl	8002a78 <debug_printhex>
    debug_print(", req "); debug_printhex(req->bRequest);
 80038be:	484e      	ldr	r0, [pc, #312]	; (80039f8 <dump_usb_request+0x160>)
 80038c0:	f7ff f8c6 	bl	8002a50 <debug_print>
 80038c4:	7860      	ldrb	r0, [r4, #1]
 80038c6:	f7ff f8d7 	bl	8002a78 <debug_printhex>
    debug_print(", val "); debug_printhex(req->wValue >> 8); debug_printhex(req->wValue & 0xff);
 80038ca:	484c      	ldr	r0, [pc, #304]	; (80039fc <dump_usb_request+0x164>)
 80038cc:	f7ff f8c0 	bl	8002a50 <debug_print>
 80038d0:	8860      	ldrh	r0, [r4, #2]
 80038d2:	0a00      	lsrs	r0, r0, #8
 80038d4:	f7ff f8d0 	bl	8002a78 <debug_printhex>
 80038d8:	8860      	ldrh	r0, [r4, #2]
 80038da:	b2c0      	uxtb	r0, r0
 80038dc:	f7ff f8cc 	bl	8002a78 <debug_printhex>
    debug_print(", idx "); debug_printhex(req->wIndex >> 8); debug_printhex(req->wIndex & 0xff);
 80038e0:	4847      	ldr	r0, [pc, #284]	; (8003a00 <dump_usb_request+0x168>)
 80038e2:	f7ff f8b5 	bl	8002a50 <debug_print>
 80038e6:	88a0      	ldrh	r0, [r4, #4]
 80038e8:	0a00      	lsrs	r0, r0, #8
 80038ea:	f7ff f8c5 	bl	8002a78 <debug_printhex>
 80038ee:	88a0      	ldrh	r0, [r4, #4]
 80038f0:	b2c0      	uxtb	r0, r0
 80038f2:	f7ff f8c1 	bl	8002a78 <debug_printhex>
    debug_print(", len "); debug_printhex(req->wLength >> 8); debug_printhex(req->wLength & 0xff);
 80038f6:	4843      	ldr	r0, [pc, #268]	; (8003a04 <dump_usb_request+0x16c>)
 80038f8:	f7ff f8aa 	bl	8002a50 <debug_print>
 80038fc:	88e0      	ldrh	r0, [r4, #6]
 80038fe:	0a00      	lsrs	r0, r0, #8
 8003900:	f7ff f8ba 	bl	8002a78 <debug_printhex>
 8003904:	88e0      	ldrh	r0, [r4, #6]
 8003906:	b2c0      	uxtb	r0, r0
 8003908:	f7ff f8b6 	bl	8002a78 <debug_printhex>
    ////debug_println(""); return; ////

    if (req->bmRequestType == 0x00 || req->bmRequestType == 0x80) {
 800390c:	7823      	ldrb	r3, [r4, #0]
 800390e:	b10b      	cbz	r3, 8003914 <dump_usb_request+0x7c>
 8003910:	2b80      	cmp	r3, #128	; 0x80
 8003912:	d11d      	bne.n	8003950 <dump_usb_request+0xb8>
        //  Dump USB standard requests.
        if (req->bmRequestType == 0x80 && req->bRequest == 0x06) {
 8003914:	2b80      	cmp	r3, #128	; 0x80
 8003916:	d01f      	beq.n	8003958 <dump_usb_request+0xc0>
                case 3: debug_print("_STR"); break;
                case 4: debug_print("_INF"); break;
                case 5: debug_print("_ENP"); break;
                case 15: debug_print("_BOS"); break;
            }
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x05) {
 8003918:	b913      	cbnz	r3, 8003920 <dump_usb_request+0x88>
 800391a:	7862      	ldrb	r2, [r4, #1]
 800391c:	2a05      	cmp	r2, #5
 800391e:	d05d      	beq.n	80039dc <dump_usb_request+0x144>
            //  Note: We should see SET_ADDRESS only once per session.  If we see this again, it means
            //  we have previously returned invalid data to the host and the host is attempting to reset our connection.
            debug_print(", SET_ADR    ");
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x09) {
 8003920:	b913      	cbnz	r3, 8003928 <dump_usb_request+0x90>
 8003922:	7862      	ldrb	r2, [r4, #1]
 8003924:	2a09      	cmp	r2, #9
 8003926:	d05d      	beq.n	80039e4 <dump_usb_request+0x14c>
            debug_print(", SET_CFG    ");
        } else if (req->bmRequestType == 0x80 && req->bRequest == 0x09) {
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d102      	bne.n	8003932 <dump_usb_request+0x9a>
 800392c:	7863      	ldrb	r3, [r4, #1]
 800392e:	2b09      	cmp	r3, #9
 8003930:	d05c      	beq.n	80039ec <dump_usb_request+0x154>
            debug_print(", SET_CFG    ");
        } else {
            debug_print(",");
 8003932:	4835      	ldr	r0, [pc, #212]	; (8003a08 <dump_usb_request+0x170>)
 8003934:	f7ff f88c 	bl	8002a50 <debug_print>
        }
        debug_print(" t "); debug_printhex(desc_type); 	
 8003938:	4834      	ldr	r0, [pc, #208]	; (8003a0c <dump_usb_request+0x174>)
 800393a:	f7ff f889 	bl	8002a50 <debug_print>
 800393e:	4630      	mov	r0, r6
 8003940:	f7ff f89a 	bl	8002a78 <debug_printhex>
        debug_print(" i "); debug_printhex(desc_index); 	
 8003944:	4832      	ldr	r0, [pc, #200]	; (8003a10 <dump_usb_request+0x178>)
 8003946:	f7ff f883 	bl	8002a50 <debug_print>
 800394a:	4628      	mov	r0, r5
 800394c:	f7ff f894 	bl	8002a78 <debug_printhex>
    }
    debug_println("");
 8003950:	4830      	ldr	r0, [pc, #192]	; (8003a14 <dump_usb_request+0x17c>)
 8003952:	f7ff f851 	bl	80029f8 <debug_println>
}
 8003956:	bd70      	pop	{r4, r5, r6, pc}
        if (req->bmRequestType == 0x80 && req->bRequest == 0x06) {
 8003958:	7862      	ldrb	r2, [r4, #1]
 800395a:	2a06      	cmp	r2, #6
 800395c:	d1dc      	bne.n	8003918 <dump_usb_request+0x80>
            debug_print(", GET_DES");
 800395e:	482e      	ldr	r0, [pc, #184]	; (8003a18 <dump_usb_request+0x180>)
 8003960:	f7ff f876 	bl	8002a50 <debug_print>
            switch(desc_type) {
 8003964:	1e73      	subs	r3, r6, #1
 8003966:	2b0e      	cmp	r3, #14
 8003968:	d8e6      	bhi.n	8003938 <dump_usb_request+0xa0>
 800396a:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <dump_usb_request+0xd8>)
 800396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003970:	080039ad 	.word	0x080039ad
 8003974:	080039b5 	.word	0x080039b5
 8003978:	080039bd 	.word	0x080039bd
 800397c:	080039c5 	.word	0x080039c5
 8003980:	080039cd 	.word	0x080039cd
 8003984:	08003939 	.word	0x08003939
 8003988:	08003939 	.word	0x08003939
 800398c:	08003939 	.word	0x08003939
 8003990:	08003939 	.word	0x08003939
 8003994:	08003939 	.word	0x08003939
 8003998:	08003939 	.word	0x08003939
 800399c:	08003939 	.word	0x08003939
 80039a0:	08003939 	.word	0x08003939
 80039a4:	08003939 	.word	0x08003939
 80039a8:	080039d5 	.word	0x080039d5
                case 1: debug_print("_DEV"); break;
 80039ac:	481b      	ldr	r0, [pc, #108]	; (8003a1c <dump_usb_request+0x184>)
 80039ae:	f7ff f84f 	bl	8002a50 <debug_print>
 80039b2:	e7c1      	b.n	8003938 <dump_usb_request+0xa0>
                case 2: debug_print("_CFG"); break;
 80039b4:	481a      	ldr	r0, [pc, #104]	; (8003a20 <dump_usb_request+0x188>)
 80039b6:	f7ff f84b 	bl	8002a50 <debug_print>
 80039ba:	e7bd      	b.n	8003938 <dump_usb_request+0xa0>
                case 3: debug_print("_STR"); break;
 80039bc:	4819      	ldr	r0, [pc, #100]	; (8003a24 <dump_usb_request+0x18c>)
 80039be:	f7ff f847 	bl	8002a50 <debug_print>
 80039c2:	e7b9      	b.n	8003938 <dump_usb_request+0xa0>
                case 4: debug_print("_INF"); break;
 80039c4:	4818      	ldr	r0, [pc, #96]	; (8003a28 <dump_usb_request+0x190>)
 80039c6:	f7ff f843 	bl	8002a50 <debug_print>
 80039ca:	e7b5      	b.n	8003938 <dump_usb_request+0xa0>
                case 5: debug_print("_ENP"); break;
 80039cc:	4817      	ldr	r0, [pc, #92]	; (8003a2c <dump_usb_request+0x194>)
 80039ce:	f7ff f83f 	bl	8002a50 <debug_print>
 80039d2:	e7b1      	b.n	8003938 <dump_usb_request+0xa0>
                case 15: debug_print("_BOS"); break;
 80039d4:	4816      	ldr	r0, [pc, #88]	; (8003a30 <dump_usb_request+0x198>)
 80039d6:	f7ff f83b 	bl	8002a50 <debug_print>
 80039da:	e7ad      	b.n	8003938 <dump_usb_request+0xa0>
            debug_print(", SET_ADR    ");
 80039dc:	4815      	ldr	r0, [pc, #84]	; (8003a34 <dump_usb_request+0x19c>)
 80039de:	f7ff f837 	bl	8002a50 <debug_print>
 80039e2:	e7a9      	b.n	8003938 <dump_usb_request+0xa0>
            debug_print(", SET_CFG    ");
 80039e4:	4814      	ldr	r0, [pc, #80]	; (8003a38 <dump_usb_request+0x1a0>)
 80039e6:	f7ff f833 	bl	8002a50 <debug_print>
 80039ea:	e7a5      	b.n	8003938 <dump_usb_request+0xa0>
            debug_print(", SET_CFG    ");
 80039ec:	4812      	ldr	r0, [pc, #72]	; (8003a38 <dump_usb_request+0x1a0>)
 80039ee:	f7ff f82f 	bl	8002a50 <debug_print>
 80039f2:	e7a1      	b.n	8003938 <dump_usb_request+0xa0>
 80039f4:	08004f04 	.word	0x08004f04
 80039f8:	08004f0c 	.word	0x08004f0c
 80039fc:	08004f14 	.word	0x08004f14
 8003a00:	08004f1c 	.word	0x08004f1c
 8003a04:	08004bb4 	.word	0x08004bb4
 8003a08:	08004f80 	.word	0x08004f80
 8003a0c:	08004f84 	.word	0x08004f84
 8003a10:	08004f88 	.word	0x08004f88
 8003a14:	080049f4 	.word	0x080049f4
 8003a18:	08004f24 	.word	0x08004f24
 8003a1c:	08004f30 	.word	0x08004f30
 8003a20:	08004f38 	.word	0x08004f38
 8003a24:	08004f40 	.word	0x08004f40
 8003a28:	08004f48 	.word	0x08004f48
 8003a2c:	08004f50 	.word	0x08004f50
 8003a30:	08004f58 	.word	0x08004f58
 8003a34:	08004f60 	.word	0x08004f60
 8003a38:	08004f70 	.word	0x08004f70

08003a3c <aggregate_callback>:
	usbd_control_complete_callback *complete) {
 8003a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	4681      	mov	r9, r0
 8003a44:	460d      	mov	r5, r1
 8003a46:	4690      	mov	r8, r2
 8003a48:	469a      	mov	sl, r3
 8003a4a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if (req->bmRequestType == 0 && req->bRequest == 5) {
 8003a4c:	780b      	ldrb	r3, [r1, #0]
 8003a4e:	bb73      	cbnz	r3, 8003aae <aggregate_callback+0x72>
 8003a50:	784b      	ldrb	r3, [r1, #1]
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d001      	beq.n	8003a5a <aggregate_callback+0x1e>
 8003a56:	2400      	movs	r4, #0
 8003a58:	e00f      	b.n	8003a7a <aggregate_callback+0x3e>
        set_usb_busy();
 8003a5a:	f7ff fe6d 	bl	8003738 <set_usb_busy>
        debug_println("SET_ADR");
 8003a5e:	481e      	ldr	r0, [pc, #120]	; (8003ad8 <aggregate_callback+0x9c>)
 8003a60:	f7fe ffca 	bl	80029f8 <debug_println>
        *len = 0;          //  Return an empty message.
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8aa 3000 	strh.w	r3, [sl]
        return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8003a6a:	4653      	mov	r3, sl
 8003a6c:	4642      	mov	r2, r8
 8003a6e:	4629      	mov	r1, r5
 8003a70:	4648      	mov	r0, r9
 8003a72:	f7fd fbf9 	bl	8001268 <_usbd_standard_request_device>
 8003a76:	e029      	b.n	8003acc <aggregate_callback+0x90>
    for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8003a78:	3401      	adds	r4, #1
 8003a7a:	2c09      	cmp	r4, #9
 8003a7c:	dc19      	bgt.n	8003ab2 <aggregate_callback+0x76>
        if (control_callback[i].cb == NULL) { break; }
 8003a7e:	4b17      	ldr	r3, [pc, #92]	; (8003adc <aggregate_callback+0xa0>)
 8003a80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003a84:	685e      	ldr	r6, [r3, #4]
 8003a86:	b1a6      	cbz	r6, 8003ab2 <aggregate_callback+0x76>
        if ((req->bmRequestType & control_callback[i].type_mask) == control_callback[i].type) {
 8003a88:	782b      	ldrb	r3, [r5, #0]
 8003a8a:	4a14      	ldr	r2, [pc, #80]	; (8003adc <aggregate_callback+0xa0>)
 8003a8c:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
 8003a90:	7849      	ldrb	r1, [r1, #1]
 8003a92:	400b      	ands	r3, r1
 8003a94:	f812 2034 	ldrb.w	r2, [r2, r4, lsl #3]
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d1ed      	bne.n	8003a78 <aggregate_callback+0x3c>
            result = control_callback[i].cb(
 8003a9c:	9700      	str	r7, [sp, #0]
 8003a9e:	4653      	mov	r3, sl
 8003aa0:	4642      	mov	r2, r8
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	4648      	mov	r0, r9
 8003aa6:	47b0      	blx	r6
            if (result == USBD_REQ_HANDLED ||
 8003aa8:	2801      	cmp	r0, #1
 8003aaa:	d8e5      	bhi.n	8003a78 <aggregate_callback+0x3c>
 8003aac:	e00e      	b.n	8003acc <aggregate_callback+0x90>
 8003aae:	2400      	movs	r4, #0
 8003ab0:	e7e3      	b.n	8003a7a <aggregate_callback+0x3e>
    set_usb_busy();
 8003ab2:	f7ff fe41 	bl	8003738 <set_usb_busy>
    if (!(req->bmRequestType == 0x80 && req->bRequest == 0x06)) {
 8003ab6:	782b      	ldrb	r3, [r5, #0]
 8003ab8:	2b80      	cmp	r3, #128	; 0x80
 8003aba:	d102      	bne.n	8003ac2 <aggregate_callback+0x86>
 8003abc:	786b      	ldrb	r3, [r5, #1]
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	d007      	beq.n	8003ad2 <aggregate_callback+0x96>
	    dump_usb_request(">> ", req);
 8003ac2:	4629      	mov	r1, r5
 8003ac4:	4806      	ldr	r0, [pc, #24]	; (8003ae0 <aggregate_callback+0xa4>)
 8003ac6:	f7ff fee7 	bl	8003898 <dump_usb_request>
	return USBD_REQ_NEXT_CALLBACK;
 8003aca:	2002      	movs	r0, #2
}
 8003acc:	b002      	add	sp, #8
 8003ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return USBD_REQ_NEXT_CALLBACK;
 8003ad2:	2002      	movs	r0, #2
 8003ad4:	e7fa      	b.n	8003acc <aggregate_callback+0x90>
 8003ad6:	bf00      	nop
 8003ad8:	08004df8 	.word	0x08004df8
 8003adc:	200004d4 	.word	0x200004d4
 8003ae0:	08004e00 	.word	0x08004e00

08003ae4 <webusb_set_config>:
	}

	return status;
}

static void webusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8003ae4:	b508      	push	{r3, lr}
    //  debug_println("webusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 8003ae6:	4b07      	ldr	r3, [pc, #28]	; (8003b04 <webusb_set_config+0x20>)
 8003ae8:	227f      	movs	r2, #127	; 0x7f
 8003aea:	2140      	movs	r1, #64	; 0x40
 8003aec:	f7ff fe6e 	bl	80037cc <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 8003af0:	2800      	cmp	r0, #0
 8003af2:	db00      	blt.n	8003af6 <webusb_set_config+0x12>
}
 8003af4:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 8003af6:	4804      	ldr	r0, [pc, #16]	; (8003b08 <webusb_set_config+0x24>)
 8003af8:	f7fe ff7e 	bl	80029f8 <debug_println>
 8003afc:	f7fe ffa3 	bl	8002a46 <debug_flush>
}
 8003b00:	e7f8      	b.n	8003af4 <webusb_set_config+0x10>
 8003b02:	bf00      	nop
 8003b04:	08003b0d 	.word	0x08003b0d
 8003b08:	08005134 	.word	0x08005134

08003b0c <webusb_control_vendor_request>:
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8003b0c:	7808      	ldrb	r0, [r1, #0]
 8003b0e:	3040      	adds	r0, #64	; 0x40
 8003b10:	b2c0      	uxtb	r0, r0
 8003b12:	2801      	cmp	r0, #1
 8003b14:	d853      	bhi.n	8003bbe <webusb_control_vendor_request+0xb2>
	if (req->bRequest != WEBUSB_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 8003b16:	7848      	ldrb	r0, [r1, #1]
 8003b18:	2822      	cmp	r0, #34	; 0x22
 8003b1a:	d152      	bne.n	8003bc2 <webusb_control_vendor_request+0xb6>
									 usbd_control_complete_callback* complete) {
 8003b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b20:	461d      	mov	r5, r3
 8003b22:	460c      	mov	r4, r1
	switch (req->wIndex) {
 8003b24:	888b      	ldrh	r3, [r1, #4]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d13b      	bne.n	8003ba2 <webusb_control_vendor_request+0x96>
			struct webusb_url_descriptor* url = (struct webusb_url_descriptor*)(*buf);
 8003b2a:	6817      	ldr	r7, [r2, #0]
			uint16_t index = req->wValue;
 8003b2c:	884e      	ldrh	r6, [r1, #2]
			if (index == 0) {
 8003b2e:	b176      	cbz	r6, 8003b4e <webusb_control_vendor_request+0x42>
			if (index == 1) {
 8003b30:	2e01      	cmp	r6, #1
 8003b32:	d019      	beq.n	8003b68 <webusb_control_vendor_request+0x5c>
    			debug_print("*** webusb notsupp index "); debug_print_unsigned(index); debug_println(""); debug_flush(); ////
 8003b34:	4824      	ldr	r0, [pc, #144]	; (8003bc8 <webusb_control_vendor_request+0xbc>)
 8003b36:	f7fe ff8b 	bl	8002a50 <debug_print>
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f7fe ff98 	bl	8002a70 <debug_print_unsigned>
 8003b40:	4822      	ldr	r0, [pc, #136]	; (8003bcc <webusb_control_vendor_request+0xc0>)
 8003b42:	f7fe ff59 	bl	80029f8 <debug_println>
 8003b46:	f7fe ff7e 	bl	8002a46 <debug_flush>
				status = USBD_REQ_NOTSUPP;
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	e035      	b.n	8003bba <webusb_control_vendor_request+0xae>
    			debug_print("*** webusb notsupp index "); debug_print_unsigned(index); debug_println(""); debug_flush(); ////
 8003b4e:	481e      	ldr	r0, [pc, #120]	; (8003bc8 <webusb_control_vendor_request+0xbc>)
 8003b50:	f7fe ff7e 	bl	8002a50 <debug_print>
 8003b54:	4630      	mov	r0, r6
 8003b56:	f7fe ff8b 	bl	8002a70 <debug_print_unsigned>
 8003b5a:	481c      	ldr	r0, [pc, #112]	; (8003bcc <webusb_control_vendor_request+0xc0>)
 8003b5c:	f7fe ff4c 	bl	80029f8 <debug_println>
 8003b60:	f7fe ff71 	bl	8002a46 <debug_flush>
				return USBD_REQ_NOTSUPP;
 8003b64:	2000      	movs	r0, #0
 8003b66:	e028      	b.n	8003bba <webusb_control_vendor_request+0xae>
				dump_usb_request("weburl", req); // debug_flush(); ////
 8003b68:	4819      	ldr	r0, [pc, #100]	; (8003bd0 <webusb_control_vendor_request+0xc4>)
 8003b6a:	f7ff fe95 	bl	8003898 <dump_usb_request>
				size_t url_len = strlen(webusb_https_url);
 8003b6e:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <webusb_control_vendor_request+0xc8>)
 8003b70:	f8d3 8000 	ldr.w	r8, [r3]
 8003b74:	4640      	mov	r0, r8
 8003b76:	f7fe fdf8 	bl	800276a <strlen>
 8003b7a:	4602      	mov	r2, r0
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
 8003b7c:	1cc6      	adds	r6, r0, #3
 8003b7e:	b2f6      	uxtb	r6, r6
 8003b80:	703e      	strb	r6, [r7, #0]
				url->bDescriptorType = WEBUSB_DT_URL;
 8003b82:	2303      	movs	r3, #3
 8003b84:	707b      	strb	r3, [r7, #1]
				url->bScheme = WEBUSB_URL_SCHEME_HTTPS;
 8003b86:	2401      	movs	r4, #1
 8003b88:	70bc      	strb	r4, [r7, #2]
				memcpy(&url->URL, webusb_https_url, url_len);
 8003b8a:	4641      	mov	r1, r8
 8003b8c:	18f8      	adds	r0, r7, r3
 8003b8e:	f7fe fdd4 	bl	800273a <memcpy>
				*len = MIN(*len, url->bLength);
 8003b92:	882b      	ldrh	r3, [r5, #0]
 8003b94:	b2b6      	uxth	r6, r6
 8003b96:	429e      	cmp	r6, r3
 8003b98:	bf28      	it	cs
 8003b9a:	461e      	movcs	r6, r3
 8003b9c:	802e      	strh	r6, [r5, #0]
				status = USBD_REQ_HANDLED;
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	e00b      	b.n	8003bba <webusb_control_vendor_request+0xae>
    		debug_print("*** webusb notsupp wIndex "); debug_print_unsigned(req->wIndex); debug_println(""); debug_flush(); ////
 8003ba2:	480d      	ldr	r0, [pc, #52]	; (8003bd8 <webusb_control_vendor_request+0xcc>)
 8003ba4:	f7fe ff54 	bl	8002a50 <debug_print>
 8003ba8:	88a0      	ldrh	r0, [r4, #4]
 8003baa:	f7fe ff61 	bl	8002a70 <debug_print_unsigned>
 8003bae:	4807      	ldr	r0, [pc, #28]	; (8003bcc <webusb_control_vendor_request+0xc0>)
 8003bb0:	f7fe ff22 	bl	80029f8 <debug_println>
 8003bb4:	f7fe ff47 	bl	8002a46 <debug_flush>
			status = USBD_REQ_NOTSUPP;
 8003bb8:	2000      	movs	r0, #0
}
 8003bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8003bbe:	2002      	movs	r0, #2
 8003bc0:	4770      	bx	lr
	if (req->bRequest != WEBUSB_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 8003bc2:	2002      	movs	r0, #2
}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	080050dc 	.word	0x080050dc
 8003bcc:	080049f4 	.word	0x080049f4
 8003bd0:	080050f8 	.word	0x080050f8
 8003bd4:	2000054c 	.word	0x2000054c
 8003bd8:	08005100 	.word	0x08005100

08003bdc <webusb_setup>:

void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
 8003bdc:	b510      	push	{r4, lr}
 8003bde:	4604      	mov	r4, r0
    // debug_println("webusb_setup"); // debug_flush(); ////
	webusb_https_url = https_url;
 8003be0:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <webusb_setup+0x3c>)
 8003be2:	6019      	str	r1, [r3, #0]

	//  Register the callback now because WebUSB requests come earlier.
	int status = aggregate_register_callback(
 8003be4:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <webusb_setup+0x40>)
 8003be6:	227f      	movs	r2, #127	; 0x7f
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	f7ff fdef 	bl	80037cc <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	db06      	blt.n	8003c00 <webusb_setup+0x24>

    //  Re-register the callback in case the USB restarts.
	status = aggregate_register_config_callback(usbd_dev, webusb_set_config);
 8003bf2:	490b      	ldr	r1, [pc, #44]	; (8003c20 <webusb_setup+0x44>)
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f7ff fdc9 	bl	800378c <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8003bfa:	2800      	cmp	r0, #0
 8003bfc:	db06      	blt.n	8003c0c <webusb_setup+0x30>
}
 8003bfe:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8003c00:	4808      	ldr	r0, [pc, #32]	; (8003c24 <webusb_setup+0x48>)
 8003c02:	f7fe fef9 	bl	80029f8 <debug_println>
 8003c06:	f7fe ff1e 	bl	8002a46 <debug_flush>
 8003c0a:	e7f2      	b.n	8003bf2 <webusb_setup+0x16>
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8003c0c:	4805      	ldr	r0, [pc, #20]	; (8003c24 <webusb_setup+0x48>)
 8003c0e:	f7fe fef3 	bl	80029f8 <debug_println>
 8003c12:	f7fe ff18 	bl	8002a46 <debug_flush>
}
 8003c16:	e7f2      	b.n	8003bfe <webusb_setup+0x22>
 8003c18:	2000054c 	.word	0x2000054c
 8003c1c:	08003b0d 	.word	0x08003b0d
 8003c20:	08003ae5 	.word	0x08003ae5
 8003c24:	08005154 	.word	0x08005154

08003c28 <winusb_set_config>:
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	}
	return status;
}

static void winusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8003c28:	b508      	push	{r3, lr}
	//  debug_println("winusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <winusb_set_config+0x20>)
 8003c2c:	2260      	movs	r2, #96	; 0x60
 8003c2e:	2140      	movs	r1, #64	; 0x40
 8003c30:	f7ff fdcc 	bl	80037cc <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	if (status < 0) {
 8003c34:	2800      	cmp	r0, #0
 8003c36:	db00      	blt.n	8003c3a <winusb_set_config+0x12>
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
	}
}
 8003c38:	bd08      	pop	{r3, pc}
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
 8003c3a:	4804      	ldr	r0, [pc, #16]	; (8003c4c <winusb_set_config+0x24>)
 8003c3c:	f7fe fedc 	bl	80029f8 <debug_println>
 8003c40:	f7fe ff01 	bl	8002a46 <debug_flush>
}
 8003c44:	e7f8      	b.n	8003c38 <winusb_set_config+0x10>
 8003c46:	bf00      	nop
 8003c48:	08003cb1 	.word	0x08003cb1
 8003c4c:	0800523c 	.word	0x0800523c

08003c50 <winusb_descriptor_request>:
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 8003c50:	7808      	ldrb	r0, [r1, #0]
 8003c52:	f010 0f60 	tst.w	r0, #96	; 0x60
 8003c56:	d120      	bne.n	8003c9a <winusb_descriptor_request+0x4a>
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR && usb_descriptor_type(req->wValue) == USB_DT_STRING) {
 8003c58:	7848      	ldrb	r0, [r1, #1]
 8003c5a:	2806      	cmp	r0, #6
 8003c5c:	d11f      	bne.n	8003c9e <winusb_descriptor_request+0x4e>
	usbd_control_complete_callback* complete) { (void)complete; (void)usbd_dev;
 8003c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c60:	461e      	mov	r6, r3
 8003c62:	4615      	mov	r5, r2
 8003c64:	460c      	mov	r4, r1
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR && usb_descriptor_type(req->wValue) == USB_DT_STRING) {
 8003c66:	884f      	ldrh	r7, [r1, #2]
 8003c68:	4638      	mov	r0, r7
 8003c6a:	f000 fe33 	bl	80048d4 <usb_descriptor_type>
 8003c6e:	2803      	cmp	r0, #3
 8003c70:	d117      	bne.n	8003ca2 <winusb_descriptor_request+0x52>
		if (usb_descriptor_index(req->wValue) == WINUSB_EXTRA_STRING_INDEX) {
 8003c72:	4638      	mov	r0, r7
 8003c74:	f000 fe30 	bl	80048d8 <usb_descriptor_index>
 8003c78:	28ee      	cmp	r0, #238	; 0xee
 8003c7a:	d001      	beq.n	8003c80 <winusb_descriptor_request+0x30>
	return USBD_REQ_NEXT_CALLBACK;
 8003c7c:	2002      	movs	r0, #2
 8003c7e:	e011      	b.n	8003ca4 <winusb_descriptor_request+0x54>
			dump_usb_request("winee", req); // debug_flush(); ////
 8003c80:	4621      	mov	r1, r4
 8003c82:	4809      	ldr	r0, [pc, #36]	; (8003ca8 <winusb_descriptor_request+0x58>)
 8003c84:	f7ff fe08 	bl	8003898 <dump_usb_request>
			*buf = (uint8_t*) &winusb_string_descriptor;
 8003c88:	4b08      	ldr	r3, [pc, #32]	; (8003cac <winusb_descriptor_request+0x5c>)
 8003c8a:	602b      	str	r3, [r5, #0]
			*len = MIN(*len, winusb_string_descriptor.bLength);
 8003c8c:	8833      	ldrh	r3, [r6, #0]
 8003c8e:	2b12      	cmp	r3, #18
 8003c90:	bf28      	it	cs
 8003c92:	2312      	movcs	r3, #18
 8003c94:	8033      	strh	r3, [r6, #0]
			return USBD_REQ_HANDLED;
 8003c96:	2001      	movs	r0, #1
 8003c98:	e004      	b.n	8003ca4 <winusb_descriptor_request+0x54>
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 8003c9a:	2002      	movs	r0, #2
 8003c9c:	4770      	bx	lr
	return USBD_REQ_NEXT_CALLBACK;
 8003c9e:	2002      	movs	r0, #2
}
 8003ca0:	4770      	bx	lr
	return USBD_REQ_NEXT_CALLBACK;
 8003ca2:	2002      	movs	r0, #2
}
 8003ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	08005234 	.word	0x08005234
 8003cac:	08005274 	.word	0x08005274

08003cb0 <winusb_control_vendor_request>:
					usbd_control_complete_callback* complete) {  (void)complete; (void)usbd_dev;
 8003cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8003cb2:	780c      	ldrb	r4, [r1, #0]
 8003cb4:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8003cb8:	b2c0      	uxtb	r0, r0
 8003cba:	2801      	cmp	r0, #1
 8003cbc:	d844      	bhi.n	8003d48 <winusb_control_vendor_request+0x98>
	if (req->bRequest != WINUSB_MS_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 8003cbe:	7848      	ldrb	r0, [r1, #1]
 8003cc0:	2821      	cmp	r0, #33	; 0x21
 8003cc2:	d143      	bne.n	8003d4c <winusb_control_vendor_request+0x9c>
 8003cc4:	461f      	mov	r7, r3
 8003cc6:	4616      	mov	r6, r2
 8003cc8:	460d      	mov	r5, r1
	if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8003cca:	f014 041f 	ands.w	r4, r4, #31
 8003cce:	d102      	bne.n	8003cd6 <winusb_control_vendor_request+0x26>
		(req->wIndex == MSOS20_REQ_GET_DESCRIPTOR)) {
 8003cd0:	888b      	ldrh	r3, [r1, #4]
	if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8003cd2:	2b07      	cmp	r3, #7
 8003cd4:	d011      	beq.n	8003cfa <winusb_control_vendor_request+0x4a>
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8003cd6:	b914      	cbnz	r4, 8003cde <winusb_control_vendor_request+0x2e>
		(req->wIndex == WINUSB_REQ_GET_COMPATIBLE_ID_FEATURE_DESCRIPTOR)) {
 8003cd8:	88ab      	ldrh	r3, [r5, #4]
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d019      	beq.n	8003d12 <winusb_control_vendor_request+0x62>
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_INTERFACE) &&
 8003cde:	2c01      	cmp	r4, #1
 8003ce0:	d136      	bne.n	8003d50 <winusb_control_vendor_request+0xa0>
		(req->wIndex == WINUSB_REQ_GET_EXTENDED_PROPERTIES_OS_FEATURE_DESCRIPTOR) &&
 8003ce2:	88ab      	ldrh	r3, [r5, #4]
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_INTERFACE) &&
 8003ce4:	2b05      	cmp	r3, #5
 8003ce6:	d135      	bne.n	8003d54 <winusb_control_vendor_request+0xa4>
		(usb_descriptor_index(req->wValue) == winusb_wcid.functions[0].bInterfaceNumber)) {
 8003ce8:	8868      	ldrh	r0, [r5, #2]
 8003cea:	f000 fdf5 	bl	80048d8 <usb_descriptor_index>
 8003cee:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <winusb_control_vendor_request+0xa8>)
 8003cf0:	7c1b      	ldrb	r3, [r3, #16]
		(req->wIndex == WINUSB_REQ_GET_EXTENDED_PROPERTIES_OS_FEATURE_DESCRIPTOR) &&
 8003cf2:	4298      	cmp	r0, r3
 8003cf4:	d01b      	beq.n	8003d2e <winusb_control_vendor_request+0x7e>
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
 8003cf6:	2002      	movs	r0, #2
 8003cf8:	e027      	b.n	8003d4a <winusb_control_vendor_request+0x9a>
		dump_usb_request("windes", req); // debug_flush(); ////
 8003cfa:	4818      	ldr	r0, [pc, #96]	; (8003d5c <winusb_control_vendor_request+0xac>)
 8003cfc:	f7ff fdcc 	bl	8003898 <dump_usb_request>
		*buf = (uint8_t*) &msos20_descriptor_set;
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <winusb_control_vendor_request+0xb0>)
 8003d02:	6033      	str	r3, [r6, #0]
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 8003d04:	883b      	ldrh	r3, [r7, #0]
 8003d06:	2bb2      	cmp	r3, #178	; 0xb2
 8003d08:	bf28      	it	cs
 8003d0a:	23b2      	movcs	r3, #178	; 0xb2
 8003d0c:	803b      	strh	r3, [r7, #0]
		status = USBD_REQ_HANDLED;
 8003d0e:	2001      	movs	r0, #1
 8003d10:	e01b      	b.n	8003d4a <winusb_control_vendor_request+0x9a>
		dump_usb_request("winid", req); // debug_flush(); ////
 8003d12:	4629      	mov	r1, r5
 8003d14:	4813      	ldr	r0, [pc, #76]	; (8003d64 <winusb_control_vendor_request+0xb4>)
 8003d16:	f7ff fdbf 	bl	8003898 <dump_usb_request>
		*buf = (uint8_t*)(&winusb_wcid);
 8003d1a:	4a0f      	ldr	r2, [pc, #60]	; (8003d58 <winusb_control_vendor_request+0xa8>)
 8003d1c:	6032      	str	r2, [r6, #0]
		*len = MIN(*len, winusb_wcid.header.dwLength);
 8003d1e:	883b      	ldrh	r3, [r7, #0]
 8003d20:	6812      	ldr	r2, [r2, #0]
 8003d22:	4293      	cmp	r3, r2
 8003d24:	bf28      	it	cs
 8003d26:	4613      	movcs	r3, r2
 8003d28:	803b      	strh	r3, [r7, #0]
		status = USBD_REQ_HANDLED;
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	e00d      	b.n	8003d4a <winusb_control_vendor_request+0x9a>
		dump_usb_request("winprp", req); // debug_flush(); ////
 8003d2e:	4629      	mov	r1, r5
 8003d30:	480d      	ldr	r0, [pc, #52]	; (8003d68 <winusb_control_vendor_request+0xb8>)
 8003d32:	f7ff fdb1 	bl	8003898 <dump_usb_request>
		*buf = (uint8_t*)(&guid);
 8003d36:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <winusb_control_vendor_request+0xbc>)
 8003d38:	6033      	str	r3, [r6, #0]
		*len = MIN(*len, guid.header.dwLength);
 8003d3a:	883b      	ldrh	r3, [r7, #0]
 8003d3c:	2b92      	cmp	r3, #146	; 0x92
 8003d3e:	bf28      	it	cs
 8003d40:	2392      	movcs	r3, #146	; 0x92
 8003d42:	803b      	strh	r3, [r7, #0]
		status = USBD_REQ_HANDLED;
 8003d44:	2001      	movs	r0, #1
 8003d46:	e000      	b.n	8003d4a <winusb_control_vendor_request+0x9a>
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8003d48:	2002      	movs	r0, #2
}
 8003d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (req->bRequest != WINUSB_MS_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 8003d4c:	2002      	movs	r0, #2
 8003d4e:	e7fc      	b.n	8003d4a <winusb_control_vendor_request+0x9a>
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
 8003d50:	2002      	movs	r0, #2
 8003d52:	e7fa      	b.n	8003d4a <winusb_control_vendor_request+0x9a>
 8003d54:	2002      	movs	r0, #2
 8003d56:	e7f8      	b.n	8003d4a <winusb_control_vendor_request+0x9a>
 8003d58:	20000140 	.word	0x20000140
 8003d5c:	0800521c 	.word	0x0800521c
 8003d60:	2000008c 	.word	0x2000008c
 8003d64:	08005224 	.word	0x08005224
 8003d68:	0800522c 	.word	0x0800522c
 8003d6c:	0800516c 	.word	0x0800516c

08003d70 <winusb_setup>:

void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	4604      	mov	r4, r0
	//  debug_println("winusb_setup"); // debug_flush(); ////
	//  Send to host the USB Interface ID for the DFU Interface, which will support WinUSB.
	winusb_wcid.functions[0].bInterfaceNumber = interface;
 8003d74:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <winusb_setup+0x44>)
 8003d76:	7419      	strb	r1, [r3, #16]
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 8003d78:	490f      	ldr	r1, [pc, #60]	; (8003db8 <winusb_setup+0x48>)
 8003d7a:	f7ff fd07 	bl	800378c <aggregate_register_config_callback>
 8003d7e:	4605      	mov	r5, r0

	//  Windows probes the compatible ID before setting the configuration, so also register the callback now.
	int status1 = aggregate_register_callback(
 8003d80:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <winusb_setup+0x4c>)
 8003d82:	2260      	movs	r2, #96	; 0x60
 8003d84:	2140      	movs	r1, #64	; 0x40
 8003d86:	4620      	mov	r0, r4
 8003d88:	f7ff fd20 	bl	80037cc <aggregate_register_callback>
 8003d8c:	4606      	mov	r6, r0
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	int status2 = aggregate_register_callback(
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <winusb_setup+0x50>)
 8003d90:	221f      	movs	r2, #31
 8003d92:	2100      	movs	r1, #0
 8003d94:	4620      	mov	r0, r4
 8003d96:	f7ff fd19 	bl	80037cc <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		winusb_descriptor_request);
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 8003d9a:	2d00      	cmp	r5, #0
 8003d9c:	db03      	blt.n	8003da6 <winusb_setup+0x36>
 8003d9e:	2e00      	cmp	r6, #0
 8003da0:	db01      	blt.n	8003da6 <winusb_setup+0x36>
 8003da2:	2800      	cmp	r0, #0
 8003da4:	da04      	bge.n	8003db0 <winusb_setup+0x40>
 8003da6:	4807      	ldr	r0, [pc, #28]	; (8003dc4 <winusb_setup+0x54>)
 8003da8:	f7fe fe26 	bl	80029f8 <debug_println>
 8003dac:	f7fe fe4b 	bl	8002a46 <debug_flush>
}
 8003db0:	bd70      	pop	{r4, r5, r6, pc}
 8003db2:	bf00      	nop
 8003db4:	20000140 	.word	0x20000140
 8003db8:	08003c29 	.word	0x08003c29
 8003dbc:	08003cb1 	.word	0x08003cb1
 8003dc0:	08003c51 	.word	0x08003c51
 8003dc4:	0800525c 	.word	0x0800525c

08003dc8 <cdcacm_comm_cb>:
}

static void cdcacm_comm_cb(
  usbd_device *usbd_dev,
  uint8_t ep __attribute__((unused))
) {
 8003dc8:	b508      	push	{r3, lr}
	//  Callback for the comm channel.
	debug_println("comm");
 8003dca:	4802      	ldr	r0, [pc, #8]	; (8003dd4 <cdcacm_comm_cb+0xc>)
 8003dcc:	f7fe fe14 	bl	80029f8 <debug_println>
}
 8003dd0:	bd08      	pop	{r3, pc}
 8003dd2:	bf00      	nop
 8003dd4:	080052a0 	.word	0x080052a0

08003dd8 <cdcacm_set_config>:

static void cdcacm_set_config(
  usbd_device *usbd_dev,
  uint16_t wValue __attribute__((unused))
) {
 8003dd8:	b510      	push	{r4, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	4604      	mov	r4, r0
	//  Callback for setting the USB configuration.
	//  From https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f3/stm32f3-discovery/usb_cdcacm/cdcacm.c
    //  debug_println("*** cdcacm_set_config"); ////
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <cdcacm_set_config+0x54>)
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2340      	movs	r3, #64	; 0x40
 8003de4:	2202      	movs	r2, #2
 8003de6:	2103      	movs	r1, #3
 8003de8:	f7fd fd7e 	bl	80018e8 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, DATA_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, NULL);
 8003dec:	2300      	movs	r3, #0
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	2340      	movs	r3, #64	; 0x40
 8003df2:	2202      	movs	r2, #2
 8003df4:	2183      	movs	r1, #131	; 0x83
 8003df6:	4620      	mov	r0, r4
 8003df8:	f7fd fd76 	bl	80018e8 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, COMM_IN, USB_ENDPOINT_ATTR_INTERRUPT, COMM_PACKET_SIZE, cdcacm_comm_cb);
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <cdcacm_set_config+0x58>)
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	2310      	movs	r3, #16
 8003e02:	2203      	movs	r2, #3
 8003e04:	2184      	movs	r1, #132	; 0x84
 8003e06:	4620      	mov	r0, r4
 8003e08:	f7fd fd6e 	bl	80018e8 <usbd_ep_setup>
	int status = aggregate_register_callback(
 8003e0c:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <cdcacm_set_config+0x5c>)
 8003e0e:	227f      	movs	r2, #127	; 0x7f
 8003e10:	2121      	movs	r1, #33	; 0x21
 8003e12:	4620      	mov	r0, r4
 8003e14:	f7ff fcda 	bl	80037cc <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		(usbd_control_callback) cdcacm_control_request);
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	db01      	blt.n	8003e20 <cdcacm_set_config+0x48>
}
 8003e1c:	b002      	add	sp, #8
 8003e1e:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8003e20:	4805      	ldr	r0, [pc, #20]	; (8003e38 <cdcacm_set_config+0x60>)
 8003e22:	f7fe fde9 	bl	80029f8 <debug_println>
 8003e26:	f7fe fe0e 	bl	8002a46 <debug_flush>
}
 8003e2a:	e7f7      	b.n	8003e1c <cdcacm_set_config+0x44>
 8003e2c:	08003f31 	.word	0x08003f31
 8003e30:	08003dc9 	.word	0x08003dc9
 8003e34:	08003e3d 	.word	0x08003e3d
 8003e38:	080052d0 	.word	0x080052d0

08003e3c <cdcacm_control_request>:
) {
 8003e3c:	b510      	push	{r4, lr}
 8003e3e:	461c      	mov	r4, r3
	switch (req->bRequest) {
 8003e40:	784b      	ldrb	r3, [r1, #1]
 8003e42:	2b21      	cmp	r3, #33	; 0x21
 8003e44:	d007      	beq.n	8003e56 <cdcacm_control_request+0x1a>
 8003e46:	2b22      	cmp	r3, #34	; 0x22
 8003e48:	d003      	beq.n	8003e52 <cdcacm_control_request+0x16>
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d01d      	beq.n	8003e8a <cdcacm_control_request+0x4e>
	return USBD_REQ_NEXT_CALLBACK;  //  Hand over to next callback.
 8003e4e:	2002      	movs	r0, #2
 8003e50:	e000      	b.n	8003e54 <cdcacm_control_request+0x18>
			return USBD_REQ_HANDLED;
 8003e52:	2001      	movs	r0, #1
}
 8003e54:	bd10      	pop	{r4, pc}
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 8003e56:	8823      	ldrh	r3, [r4, #0]
 8003e58:	2b06      	cmp	r3, #6
 8003e5a:	d905      	bls.n	8003e68 <cdcacm_control_request+0x2c>
			*buf = (uint8_t *) &line_coding;
 8003e5c:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <cdcacm_control_request+0x7c>)
 8003e5e:	6013      	str	r3, [r2, #0]
			*len = sizeof(struct usb_cdc_line_coding);
 8003e60:	2307      	movs	r3, #7
 8003e62:	8023      	strh	r3, [r4, #0]
			return USBD_REQ_HANDLED;
 8003e64:	2001      	movs	r0, #1
 8003e66:	e7f5      	b.n	8003e54 <cdcacm_control_request+0x18>
				debug_print("*** cdcacm_control notsupp line_coding "); debug_print_unsigned(sizeof(struct usb_cdc_line_coding)); 
 8003e68:	4814      	ldr	r0, [pc, #80]	; (8003ebc <cdcacm_control_request+0x80>)
 8003e6a:	f7fe fdf1 	bl	8002a50 <debug_print>
 8003e6e:	2007      	movs	r0, #7
 8003e70:	f7fe fdfe 	bl	8002a70 <debug_print_unsigned>
				debug_print(", len "); debug_print_unsigned(*len);
 8003e74:	4812      	ldr	r0, [pc, #72]	; (8003ec0 <cdcacm_control_request+0x84>)
 8003e76:	f7fe fdeb 	bl	8002a50 <debug_print>
 8003e7a:	8820      	ldrh	r0, [r4, #0]
 8003e7c:	f7fe fdf8 	bl	8002a70 <debug_print_unsigned>
				debug_println("");
 8003e80:	4810      	ldr	r0, [pc, #64]	; (8003ec4 <cdcacm_control_request+0x88>)
 8003e82:	f7fe fdb9 	bl	80029f8 <debug_println>
				return USBD_REQ_NOTSUPP;
 8003e86:	2000      	movs	r0, #0
 8003e88:	e7e4      	b.n	8003e54 <cdcacm_control_request+0x18>
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 8003e8a:	8823      	ldrh	r3, [r4, #0]
 8003e8c:	2b06      	cmp	r3, #6
 8003e8e:	d901      	bls.n	8003e94 <cdcacm_control_request+0x58>
			return USBD_REQ_HANDLED;
 8003e90:	2001      	movs	r0, #1
 8003e92:	e7df      	b.n	8003e54 <cdcacm_control_request+0x18>
				debug_print("*** cdcacm_control notsupp line_coding "); debug_print_unsigned(sizeof(struct usb_cdc_line_coding)); 
 8003e94:	4809      	ldr	r0, [pc, #36]	; (8003ebc <cdcacm_control_request+0x80>)
 8003e96:	f7fe fddb 	bl	8002a50 <debug_print>
 8003e9a:	2007      	movs	r0, #7
 8003e9c:	f7fe fde8 	bl	8002a70 <debug_print_unsigned>
				debug_print(", len "); debug_print_unsigned(*len);
 8003ea0:	4807      	ldr	r0, [pc, #28]	; (8003ec0 <cdcacm_control_request+0x84>)
 8003ea2:	f7fe fdd5 	bl	8002a50 <debug_print>
 8003ea6:	8820      	ldrh	r0, [r4, #0]
 8003ea8:	f7fe fde2 	bl	8002a70 <debug_print_unsigned>
				debug_println("");
 8003eac:	4805      	ldr	r0, [pc, #20]	; (8003ec4 <cdcacm_control_request+0x88>)
 8003eae:	f7fe fda3 	bl	80029f8 <debug_println>
				return USBD_REQ_NOTSUPP;
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	e7ce      	b.n	8003e54 <cdcacm_control_request+0x18>
 8003eb6:	bf00      	nop
 8003eb8:	080052f0 	.word	0x080052f0
 8003ebc:	080052a8 	.word	0x080052a8
 8003ec0:	08004bb4 	.word	0x08004bb4
 8003ec4:	080049f4 	.word	0x080049f4

08003ec8 <cdcadm_transmit>:
) {
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!connected || !usbd_dev || !buf) { return -1; }
 8003eca:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <cdcadm_transmit+0x64>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b303      	cbz	r3, 8003f12 <cdcadm_transmit+0x4a>
 8003ed0:	4607      	mov	r7, r0
 8003ed2:	460e      	mov	r6, r1
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	b1f8      	cbz	r0, 8003f18 <cdcadm_transmit+0x50>
 8003ed8:	b309      	cbz	r1, 8003f1e <cdcadm_transmit+0x56>
	if (len == 0) { return 0; }
 8003eda:	b31a      	cbz	r2, 8003f24 <cdcadm_transmit+0x5c>
	if (len <= MAX_USB_PACKET_SIZE) {
 8003edc:	2a40      	cmp	r2, #64	; 0x40
 8003ede:	d910      	bls.n	8003f02 <cdcadm_transmit+0x3a>
	while (len > 0) {
 8003ee0:	b1ac      	cbz	r4, 8003f0e <cdcadm_transmit+0x46>
		uint16_t tx_len = (len > MAX_USB_PACKET_SIZE) ? MAX_USB_PACKET_SIZE : len;
 8003ee2:	4625      	mov	r5, r4
 8003ee4:	2c40      	cmp	r4, #64	; 0x40
 8003ee6:	bf28      	it	cs
 8003ee8:	2540      	movcs	r5, #64	; 0x40
		len = len - tx_len;
 8003eea:	1b64      	subs	r4, r4, r5
 8003eec:	b2a4      	uxth	r4, r4
		uint16_t status = usbd_ep_write_packet(usbd_dev, DATA_IN, buf, tx_len);  //  Returns the bytes sent.
 8003eee:	462b      	mov	r3, r5
 8003ef0:	4632      	mov	r2, r6
 8003ef2:	2183      	movs	r1, #131	; 0x83
 8003ef4:	4638      	mov	r0, r7
 8003ef6:	f7fd fd19 	bl	800192c <usbd_ep_write_packet>
		if (status != tx_len) { return 0; }  //  Stop if error.
 8003efa:	4285      	cmp	r5, r0
 8003efc:	d114      	bne.n	8003f28 <cdcadm_transmit+0x60>
		buf = &buf[tx_len];
 8003efe:	442e      	add	r6, r5
 8003f00:	e7ee      	b.n	8003ee0 <cdcadm_transmit+0x18>
		return usbd_ep_write_packet(usbd_dev, DATA_IN, buf, len);  //  Returns the bytes sent.
 8003f02:	4613      	mov	r3, r2
 8003f04:	460a      	mov	r2, r1
 8003f06:	2183      	movs	r1, #131	; 0x83
 8003f08:	f7fd fd10 	bl	800192c <usbd_ep_write_packet>
 8003f0c:	e00b      	b.n	8003f26 <cdcadm_transmit+0x5e>
	return len;
 8003f0e:	4620      	mov	r0, r4
 8003f10:	e009      	b.n	8003f26 <cdcadm_transmit+0x5e>
	if (!connected || !usbd_dev || !buf) { return -1; }
 8003f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f16:	e006      	b.n	8003f26 <cdcadm_transmit+0x5e>
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f1c:	e003      	b.n	8003f26 <cdcadm_transmit+0x5e>
 8003f1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f22:	e000      	b.n	8003f26 <cdcadm_transmit+0x5e>
	if (len == 0) { return 0; }
 8003f24:	2000      	movs	r0, #0
}
 8003f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (status != tx_len) { return 0; }  //  Stop if error.
 8003f28:	2000      	movs	r0, #0
 8003f2a:	e7fc      	b.n	8003f26 <cdcadm_transmit+0x5e>
 8003f2c:	20000751 	.word	0x20000751

08003f30 <cdcacm_data_rx_cb>:
) {
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4605      	mov	r5, r0
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, rx_buf, MAX_USB_PACKET_SIZE);
 8003f34:	2340      	movs	r3, #64	; 0x40
 8003f36:	4a0e      	ldr	r2, [pc, #56]	; (8003f70 <cdcacm_data_rx_cb+0x40>)
 8003f38:	2103      	movs	r1, #3
 8003f3a:	f7fd fcfd 	bl	8001938 <usbd_ep_read_packet>
    if (len == 0) { return; }
 8003f3e:	b1b0      	cbz	r0, 8003f6e <cdcacm_data_rx_cb+0x3e>
 8003f40:	4604      	mov	r4, r0
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
 8003f42:	2840      	cmp	r0, #64	; 0x40
 8003f44:	bf28      	it	cs
 8003f46:	2440      	movcs	r4, #64	; 0x40
 8003f48:	b2a4      	uxth	r4, r4
    rx_buf[pos] = 0;
 8003f4a:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <cdcacm_data_rx_cb+0x40>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	551a      	strb	r2, [r3, r4]
	if (!connected) {
 8003f50:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <cdcacm_data_rx_cb+0x44>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	b933      	cbnz	r3, 8003f64 <cdcacm_data_rx_cb+0x34>
		connected = 1;
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <cdcacm_data_rx_cb+0x44>)
 8003f58:	2201      	movs	r2, #1
 8003f5a:	701a      	strb	r2, [r3, #0]
		if (connected_func) { connected_func(); }
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <cdcacm_data_rx_cb+0x48>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	b103      	cbz	r3, 8003f64 <cdcacm_data_rx_cb+0x34>
 8003f62:	4798      	blx	r3
	cdcadm_transmit(usbd_dev, rx_buf, pos);  //  Echo the packet.	
 8003f64:	4622      	mov	r2, r4
 8003f66:	4902      	ldr	r1, [pc, #8]	; (8003f70 <cdcacm_data_rx_cb+0x40>)
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f7ff ffad 	bl	8003ec8 <cdcadm_transmit>
}
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}
 8003f70:	20000554 	.word	0x20000554
 8003f74:	20000751 	.word	0x20000751
 8003f78:	20000550 	.word	0x20000550

08003f7c <cdc_setup>:

void cdc_setup(usbd_device* usbd_dev, connected_callback *connected_func0) {
 8003f7c:	b508      	push	{r3, lr}
	//  Setup the USB interface.
    //  debug_println("*** cdc_setup"); ////
	connected_func = connected_func0;
 8003f7e:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <cdc_setup+0x20>)
 8003f80:	6019      	str	r1, [r3, #0]
	int status = aggregate_register_config_callback(usbd_dev, cdcacm_set_config);
 8003f82:	4907      	ldr	r1, [pc, #28]	; (8003fa0 <cdc_setup+0x24>)
 8003f84:	f7ff fc02 	bl	800378c <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	db00      	blt.n	8003f8e <cdc_setup+0x12>
}
 8003f8c:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8003f8e:	4805      	ldr	r0, [pc, #20]	; (8003fa4 <cdc_setup+0x28>)
 8003f90:	f7fe fd32 	bl	80029f8 <debug_println>
 8003f94:	f7fe fd57 	bl	8002a46 <debug_flush>
}
 8003f98:	e7f8      	b.n	8003f8c <cdc_setup+0x10>
 8003f9a:	bf00      	nop
 8003f9c:	20000550 	.word	0x20000550
 8003fa0:	08003dd9 	.word	0x08003dd9
 8003fa4:	08005288 	.word	0x08005288

08003fa8 <assert>:
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
    if (status < 0) { debug_println("*** hf2_setup failed"); }
}

static void assert(bool assertion, const char *msg) {
    if (assertion) { return; }
 8003fa8:	b100      	cbz	r0, 8003fac <assert+0x4>
 8003faa:	4770      	bx	lr
static void assert(bool assertion, const char *msg) {
 8003fac:	b510      	push	{r4, lr}
 8003fae:	460c      	mov	r4, r1
    debug_print("*** ERROR: "); debug_println(msg); debug_force_flush();
 8003fb0:	4804      	ldr	r0, [pc, #16]	; (8003fc4 <assert+0x1c>)
 8003fb2:	f7fe fd4d 	bl	8002a50 <debug_print>
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f7fe fd1e 	bl	80029f8 <debug_println>
 8003fbc:	f7fe fcae 	bl	800291c <debug_force_flush>
}
 8003fc0:	bd10      	pop	{r4, pc}
 8003fc2:	bf00      	nop
 8003fc4:	080052f8 	.word	0x080052f8

08003fc8 <hf2_set_config>:
static void hf2_set_config(usbd_device *usbd_dev, uint16_t wValue) {  (void)wValue;
 8003fc8:	b510      	push	{r4, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	4604      	mov	r4, r0
    LOG("hf2 set config");
 8003fce:	480b      	ldr	r0, [pc, #44]	; (8003ffc <hf2_set_config+0x34>)
 8003fd0:	f7fe fd12 	bl	80029f8 <debug_println>
    debug_force_flush(); ////
 8003fd4:	f7fe fca2 	bl	800291c <debug_force_flush>
    usbd_ep_setup(usbd_dev, HF2_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_tx_cb);
 8003fd8:	4b09      	ldr	r3, [pc, #36]	; (8004000 <hf2_set_config+0x38>)
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2340      	movs	r3, #64	; 0x40
 8003fde:	2202      	movs	r2, #2
 8003fe0:	2182      	movs	r1, #130	; 0x82
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f7fd fc80 	bl	80018e8 <usbd_ep_setup>
    usbd_ep_setup(usbd_dev, HF2_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_rx_cb);
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <hf2_set_config+0x3c>)
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	2340      	movs	r3, #64	; 0x40
 8003fee:	2202      	movs	r2, #2
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f7fd fc78 	bl	80018e8 <usbd_ep_setup>
}
 8003ff8:	b002      	add	sp, #8
 8003ffa:	bd10      	pop	{r4, pc}
 8003ffc:	080054d4 	.word	0x080054d4
 8004000:	080046c9 	.word	0x080046c9
 8004004:	08004605 	.word	0x08004605

08004008 <pokeSend>:
    uint8_t dataToSendFlag) {
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	4605      	mov	r5, r0
 800400e:	9101      	str	r1, [sp, #4]
 8004010:	4616      	mov	r6, r2
    memset(tx_buf, 0, sizeof(tx_buf));
 8004012:	2240      	movs	r2, #64	; 0x40
 8004014:	2100      	movs	r1, #0
 8004016:	4826      	ldr	r0, [pc, #152]	; (80040b0 <pokeSend+0xa8>)
 8004018:	f7fe fb9c 	bl	8002754 <memset>
	__asm__("CPSID I\n");
 800401c:	b672      	cpsid	i
    if (dataToSendLength) {
 800401e:	9b01      	ldr	r3, [sp, #4]
 8004020:	b1e3      	cbz	r3, 800405c <pokeSend+0x54>
        int flag = dataToSendFlag;
 8004022:	4633      	mov	r3, r6
        if ((int) dataToSendLength < s) {
 8004024:	9a01      	ldr	r2, [sp, #4]
 8004026:	2a3e      	cmp	r2, #62	; 0x3e
 8004028:	dc11      	bgt.n	800404e <pokeSend+0x46>
            s = dataToSendLength;
 800402a:	9c01      	ldr	r4, [sp, #4]
        tx_buf[0] = flag | s;
 800402c:	4323      	orrs	r3, r4
 800402e:	4820      	ldr	r0, [pc, #128]	; (80040b0 <pokeSend+0xa8>)
 8004030:	f800 3b01 	strb.w	r3, [r0], #1
        memcpy(tx_buf + 1, dataToSend, s);
 8004034:	4622      	mov	r2, r4
 8004036:	4629      	mov	r1, r5
 8004038:	f7fe fb7f 	bl	800273a <memcpy>
        dataToSend += s;
 800403c:	4425      	add	r5, r4
        dataToSendLength -= s;
 800403e:	9b01      	ldr	r3, [sp, #4]
 8004040:	1b1b      	subs	r3, r3, r4
 8004042:	9301      	str	r3, [sp, #4]
        sendIt = true;
 8004044:	2301      	movs	r3, #1
	__asm__("CPSIE I\n");
 8004046:	b662      	cpsie	i
    if (sendIt) {
 8004048:	b95b      	cbnz	r3, 8004062 <pokeSend+0x5a>
}
 800404a:	b002      	add	sp, #8
 800404c:	bd70      	pop	{r4, r5, r6, pc}
            if (flag == HF2_FLAG_CMDPKT_LAST)
 800404e:	2e40      	cmp	r6, #64	; 0x40
 8004050:	d001      	beq.n	8004056 <pokeSend+0x4e>
    int s = sizeof(tx_buf) - 1;  //  63
 8004052:	243f      	movs	r4, #63	; 0x3f
 8004054:	e7ea      	b.n	800402c <pokeSend+0x24>
                flag = HF2_FLAG_CMDPKT_BODY;
 8004056:	2300      	movs	r3, #0
    int s = sizeof(tx_buf) - 1;  //  63
 8004058:	243f      	movs	r4, #63	; 0x3f
 800405a:	e7e7      	b.n	800402c <pokeSend+0x24>
 800405c:	243f      	movs	r4, #63	; 0x3f
    bool sendIt = false;
 800405e:	2300      	movs	r3, #0
 8004060:	e7f1      	b.n	8004046 <pokeSend+0x3e>
        usbd_ep_write_packet(_usbd_dev, HF2_IN, tx_buf, len);
 8004062:	2340      	movs	r3, #64	; 0x40
 8004064:	4a12      	ldr	r2, [pc, #72]	; (80040b0 <pokeSend+0xa8>)
 8004066:	2182      	movs	r1, #130	; 0x82
 8004068:	4812      	ldr	r0, [pc, #72]	; (80040b4 <pokeSend+0xac>)
 800406a:	6800      	ldr	r0, [r0, #0]
 800406c:	f7fd fc5e 	bl	800192c <usbd_ep_write_packet>
        if (dataToSendLength > 0) {
 8004070:	9b01      	ldr	r3, [sp, #4]
 8004072:	b19b      	cbz	r3, 800409c <pokeSend+0x94>
            remDataToSend = dataToSend;
 8004074:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <pokeSend+0xb0>)
 8004076:	601d      	str	r5, [r3, #0]
            remDataToSendLength = dataToSendLength;
 8004078:	9a01      	ldr	r2, [sp, #4]
 800407a:	4b10      	ldr	r3, [pc, #64]	; (80040bc <pokeSend+0xb4>)
 800407c:	601a      	str	r2, [r3, #0]
            remDataToSendFlag = dataToSendFlag;
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <pokeSend+0xb8>)
 8004080:	701e      	strb	r6, [r3, #0]
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 8004082:	2c02      	cmp	r4, #2
 8004084:	dd0e      	ble.n	80040a4 <pokeSend+0x9c>
        else { debug_print("hf2 << "); debug_printhex(s + 1); debug_println(""); }
 8004086:	480f      	ldr	r0, [pc, #60]	; (80040c4 <pokeSend+0xbc>)
 8004088:	f7fe fce2 	bl	8002a50 <debug_print>
 800408c:	1c60      	adds	r0, r4, #1
 800408e:	b2c0      	uxtb	r0, r0
 8004090:	f7fe fcf2 	bl	8002a78 <debug_printhex>
 8004094:	480c      	ldr	r0, [pc, #48]	; (80040c8 <pokeSend+0xc0>)
 8004096:	f7fe fcaf 	bl	80029f8 <debug_println>
}
 800409a:	e7d6      	b.n	800404a <pokeSend+0x42>
            remDataToSendLength = 0;  //  No more data to send.
 800409c:	4b07      	ldr	r3, [pc, #28]	; (80040bc <pokeSend+0xb4>)
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	e7ee      	b.n	8004082 <pokeSend+0x7a>
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 80040a4:	1c62      	adds	r2, r4, #1
 80040a6:	4902      	ldr	r1, [pc, #8]	; (80040b0 <pokeSend+0xa8>)
 80040a8:	4808      	ldr	r0, [pc, #32]	; (80040cc <pokeSend+0xc4>)
 80040aa:	f7ff fbd1 	bl	8003850 <dump_buffer>
 80040ae:	e7cc      	b.n	800404a <pokeSend+0x42>
 80040b0:	20000608 	.word	0x20000608
 80040b4:	20000598 	.word	0x20000598
 80040b8:	200005bc 	.word	0x200005bc
 80040bc:	200005c0 	.word	0x200005c0
 80040c0:	20000754 	.word	0x20000754
 80040c4:	0800551c 	.word	0x0800551c
 80040c8:	080049f4 	.word	0x080049f4
 80040cc:	08005514 	.word	0x08005514

080040d0 <handle_flash_write>:
static void handle_flash_write(HF2_Buffer *pkt) {
 80040d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d4:	4605      	mov	r5, r0
    int sz = pkt->size;
 80040d6:	8806      	ldrh	r6, [r0, #0]
    uint32_t target_addr = cmd->write_flash_page.target_addr;
 80040d8:	f8d0 400a 	ldr.w	r4, [r0, #10]
    const uint8_t *data = (const uint8_t *) cmd->write_flash_page.data;
 80040dc:	f100 070e 	add.w	r7, r0, #14
    const char *valid = VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE) ? " " : " !!! ";
 80040e0:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 80040e4:	d307      	bcc.n	80040f6 <handle_flash_write+0x26>
 80040e6:	f504 7280 	add.w	r2, r4, #256	; 0x100
 80040ea:	4ba1      	ldr	r3, [pc, #644]	; (8004370 <handle_flash_write+0x2a0>)
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d97a      	bls.n	80041e6 <handle_flash_write+0x116>
 80040f0:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 80043e8 <handle_flash_write+0x318>
 80040f4:	e001      	b.n	80040fa <handle_flash_write+0x2a>
 80040f6:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 80043e8 <handle_flash_write+0x318>
    cmdId = cmd->command_id;
 80040fa:	f8d5 3002 	ldr.w	r3, [r5, #2]
 80040fe:	4a9d      	ldr	r2, [pc, #628]	; (8004374 <handle_flash_write+0x2a4>)
 8004100:	6013      	str	r3, [r2, #0]
    if (cmdId != prevCmdId) { debug_print("hf2 >> flash "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }  ////
 8004102:	4a9d      	ldr	r2, [pc, #628]	; (8004378 <handle_flash_write+0x2a8>)
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	4293      	cmp	r3, r2
 8004108:	d070      	beq.n	80041ec <handle_flash_write+0x11c>
 800410a:	489c      	ldr	r0, [pc, #624]	; (800437c <handle_flash_write+0x2ac>)
 800410c:	f7fe fca0 	bl	8002a50 <debug_print>
 8004110:	4620      	mov	r0, r4
 8004112:	f7fe fce9 	bl	8002ae8 <debug_printhex_unsigned>
 8004116:	4640      	mov	r0, r8
 8004118:	f7fe fc9a 	bl	8002a50 <debug_print>
    if (flush_count++ % 4 == 0) { debug_flush(); }
 800411c:	4a98      	ldr	r2, [pc, #608]	; (8004380 <handle_flash_write+0x2b0>)
 800411e:	7813      	ldrb	r3, [r2, #0]
 8004120:	1c59      	adds	r1, r3, #1
 8004122:	7011      	strb	r1, [r2, #0]
 8004124:	f013 0f03 	tst.w	r3, #3
 8004128:	d06a      	beq.n	8004200 <handle_flash_write+0x130>
    prevCmdId = cmdId; 
 800412a:	4b92      	ldr	r3, [pc, #584]	; (8004374 <handle_flash_write+0x2a4>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4b92      	ldr	r3, [pc, #584]	; (8004378 <handle_flash_write+0x2a8>)
 8004130:	601a      	str	r2, [r3, #0]
    send_hf2_response(pkt, 0);
 8004132:	2100      	movs	r1, #0
 8004134:	4628      	mov	r0, r5
 8004136:	f000 fbd1 	bl	80048dc <send_hf2_response>
    const uint32_t old_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);  //  Bootloader will be staged here for Baseloader.
 800413a:	4b92      	ldr	r3, [pc, #584]	; (8004384 <handle_flash_write+0x2b4>)
 800413c:	691d      	ldr	r5, [r3, #16]
 800413e:	f425 757f 	bic.w	r5, r5, #1020	; 0x3fc
 8004142:	f025 0503 	bic.w	r5, r5, #3
    const uint32_t old_app_start_offset = old_app_start - FLASH_BASE;  //  When writing Bootloader, shift by this offset so we don't overwrite the existing Bootloader.
 8004146:	f105 4878 	add.w	r8, r5, #4160749568	; 0xf8000000
    if (new_app_start == 0 || target_addr == FLASH_BASE) {
 800414a:	4b8f      	ldr	r3, [pc, #572]	; (8004388 <handle_flash_write+0x2b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b113      	cbz	r3, 8004156 <handle_flash_write+0x86>
 8004150:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 8004154:	d118      	bne.n	8004188 <handle_flash_write+0xb8>
        debug_println("find vector..."); debug_force_flush();
 8004156:	488d      	ldr	r0, [pc, #564]	; (800438c <handle_flash_write+0x2bc>)
 8004158:	f7fe fc4e 	bl	80029f8 <debug_println>
 800415c:	f7fe fbde 	bl	800291c <debug_force_flush>
        new_base_vector = NULL;
 8004160:	4b8b      	ldr	r3, [pc, #556]	; (8004390 <handle_flash_write+0x2c0>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
        new_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);
 8004166:	4987      	ldr	r1, [pc, #540]	; (8004384 <handle_flash_write+0x2b4>)
 8004168:	690b      	ldr	r3, [r1, #16]
 800416a:	f423 727f 	bic.w	r2, r3, #1020	; 0x3fc
 800416e:	f022 0203 	bic.w	r2, r2, #3
 8004172:	4885      	ldr	r0, [pc, #532]	; (8004388 <handle_flash_write+0x2b8>)
 8004174:	6002      	str	r2, [r0, #0]
        new_bootloader_size = (uint32_t) base_vector_table.application - FLASH_BASE;
 8004176:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800417a:	4a86      	ldr	r2, [pc, #536]	; (8004394 <handle_flash_write+0x2c4>)
 800417c:	6013      	str	r3, [r2, #0]
        new_baseloader_size = (uint32_t) base_vector_table.baseloader_end - FLASH_BASE;
 800417e:	68cb      	ldr	r3, [r1, #12]
 8004180:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8004184:	4a84      	ldr	r2, [pc, #528]	; (8004398 <handle_flash_write+0x2c8>)
 8004186:	6013      	str	r3, [r2, #0]
    if (!new_base_vector && IS_VALID_BASE_VECTOR_TABLE(old_app_start)) {
 8004188:	4b81      	ldr	r3, [pc, #516]	; (8004390 <handle_flash_write+0x2c0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d03a      	beq.n	8004206 <handle_flash_write+0x136>
    if (target_addr < new_app_start) {  //  If writing Bootloader Page...
 8004190:	4b7d      	ldr	r3, [pc, #500]	; (8004388 <handle_flash_write+0x2b8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	42a3      	cmp	r3, r4
 8004196:	d975      	bls.n	8004284 <handle_flash_write+0x1b4>
        target_addr += old_app_start_offset;
 8004198:	4444      	add	r4, r8
        if (!VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE)) { debug_print("*** ERROR: Invalid addr "); debug_printhex_unsigned(target_addr); debug_println(""); debug_force_flush(); }
 800419a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 800419e:	d304      	bcc.n	80041aa <handle_flash_write+0xda>
 80041a0:	f504 7280 	add.w	r2, r4, #256	; 0x100
 80041a4:	4b72      	ldr	r3, [pc, #456]	; (8004370 <handle_flash_write+0x2a0>)
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d90a      	bls.n	80041c0 <handle_flash_write+0xf0>
 80041aa:	487c      	ldr	r0, [pc, #496]	; (800439c <handle_flash_write+0x2cc>)
 80041ac:	f7fe fc50 	bl	8002a50 <debug_print>
 80041b0:	4620      	mov	r0, r4
 80041b2:	f7fe fc99 	bl	8002ae8 <debug_printhex_unsigned>
 80041b6:	487a      	ldr	r0, [pc, #488]	; (80043a0 <handle_flash_write+0x2d0>)
 80041b8:	f7fe fc1e 	bl	80029f8 <debug_println>
 80041bc:	f7fe fbae 	bl	800291c <debug_force_flush>
    checkDataSize(write_flash_page, HF2_PAGE_SIZE);
 80041c0:	4978      	ldr	r1, [pc, #480]	; (80043a4 <handle_flash_write+0x2d4>)
 80041c2:	f5b6 7f86 	cmp.w	r6, #268	; 0x10c
 80041c6:	bf14      	ite	ne
 80041c8:	2000      	movne	r0, #0
 80041ca:	2001      	moveq	r0, #1
 80041cc:	f7ff feec 	bl	8003fa8 <assert>
    if (VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE)) {
 80041d0:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 80041d4:	d305      	bcc.n	80041e2 <handle_flash_write+0x112>
 80041d6:	f504 7280 	add.w	r2, r4, #256	; 0x100
 80041da:	4b65      	ldr	r3, [pc, #404]	; (8004370 <handle_flash_write+0x2a0>)
 80041dc:	429a      	cmp	r2, r3
 80041de:	f240 80bf 	bls.w	8004360 <handle_flash_write+0x290>
}
 80041e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char *valid = VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE) ? " " : " !!! ";
 80041e6:	f8df 8204 	ldr.w	r8, [pc, #516]	; 80043ec <handle_flash_write+0x31c>
 80041ea:	e786      	b.n	80040fa <handle_flash_write+0x2a>
    else { debug_print(">> "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }
 80041ec:	486e      	ldr	r0, [pc, #440]	; (80043a8 <handle_flash_write+0x2d8>)
 80041ee:	f7fe fc2f 	bl	8002a50 <debug_print>
 80041f2:	4620      	mov	r0, r4
 80041f4:	f7fe fc78 	bl	8002ae8 <debug_printhex_unsigned>
 80041f8:	4640      	mov	r0, r8
 80041fa:	f7fe fc29 	bl	8002a50 <debug_print>
 80041fe:	e78d      	b.n	800411c <handle_flash_write+0x4c>
    if (flush_count++ % 4 == 0) { debug_flush(); }
 8004200:	f7fe fc21 	bl	8002a46 <debug_flush>
 8004204:	e791      	b.n	800412a <handle_flash_write+0x5a>
    if (!new_base_vector && IS_VALID_BASE_VECTOR_TABLE(old_app_start)) {
 8004206:	4b5f      	ldr	r3, [pc, #380]	; (8004384 <handle_flash_write+0x2b4>)
 8004208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800420c:	432b      	orrs	r3, r5
 800420e:	6819      	ldr	r1, [r3, #0]
 8004210:	4a66      	ldr	r2, [pc, #408]	; (80043ac <handle_flash_write+0x2dc>)
 8004212:	4291      	cmp	r1, r2
 8004214:	d1bc      	bne.n	8004190 <handle_flash_write+0xc0>
 8004216:	6959      	ldr	r1, [r3, #20]
 8004218:	4a65      	ldr	r2, [pc, #404]	; (80043b0 <handle_flash_write+0x2e0>)
 800421a:	4291      	cmp	r1, r2
 800421c:	d1b8      	bne.n	8004190 <handle_flash_write+0xc0>
        new_base_vector = BASE_VECTOR_TABLE(old_app_start);
 800421e:	4a5c      	ldr	r2, [pc, #368]	; (8004390 <handle_flash_write+0x2c0>)
 8004220:	6013      	str	r3, [r2, #0]
        new_app_start = (uint32_t) FLASH_ADDRESS(new_base_vector->application);
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8004228:	f022 0203 	bic.w	r2, r2, #3
 800422c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8004388 <handle_flash_write+0x2b8>
 8004230:	f8c9 2000 	str.w	r2, [r9]
        new_bootloader_size = new_app_start - FLASH_BASE;
 8004234:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 8004238:	f8df a158 	ldr.w	sl, [pc, #344]	; 8004394 <handle_flash_write+0x2c4>
 800423c:	f8ca 2000 	str.w	r2, [sl]
        new_baseloader_size = (uint32_t) (new_base_vector->baseloader_end) - FLASH_BASE;
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8004246:	f8df b150 	ldr.w	fp, [pc, #336]	; 8004398 <handle_flash_write+0x2c8>
 800424a:	f8cb 3000 	str.w	r3, [fp]
        debug_print("found vector, app "); debug_printhex_unsigned(new_app_start);
 800424e:	4859      	ldr	r0, [pc, #356]	; (80043b4 <handle_flash_write+0x2e4>)
 8004250:	f7fe fbfe 	bl	8002a50 <debug_print>
 8004254:	f8d9 0000 	ldr.w	r0, [r9]
 8004258:	f7fe fc46 	bl	8002ae8 <debug_printhex_unsigned>
        debug_print(", boot size "); debug_printhex_unsigned(new_bootloader_size);
 800425c:	4856      	ldr	r0, [pc, #344]	; (80043b8 <handle_flash_write+0x2e8>)
 800425e:	f7fe fbf7 	bl	8002a50 <debug_print>
 8004262:	f8da 0000 	ldr.w	r0, [sl]
 8004266:	f7fe fc3f 	bl	8002ae8 <debug_printhex_unsigned>
        debug_print(", base size "); debug_printhex_unsigned(new_baseloader_size);
 800426a:	4854      	ldr	r0, [pc, #336]	; (80043bc <handle_flash_write+0x2ec>)
 800426c:	f7fe fbf0 	bl	8002a50 <debug_print>
 8004270:	f8db 0000 	ldr.w	r0, [fp]
 8004274:	f7fe fc38 	bl	8002ae8 <debug_printhex_unsigned>
        debug_println(""); debug_force_flush();
 8004278:	4849      	ldr	r0, [pc, #292]	; (80043a0 <handle_flash_write+0x2d0>)
 800427a:	f7fe fbbd 	bl	80029f8 <debug_println>
 800427e:	f7fe fb4d 	bl	800291c <debug_force_flush>
 8004282:	e785      	b.n	8004190 <handle_flash_write+0xc0>
    }  else if (new_base_vector && (target_addr == new_app_start)) {  //  When we are finished writing the Bootloader and now writing first Application Page...
 8004284:	4a42      	ldr	r2, [pc, #264]	; (8004390 <handle_flash_write+0x2c0>)
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	2a00      	cmp	r2, #0
 800428a:	d099      	beq.n	80041c0 <handle_flash_write+0xf0>
 800428c:	42a3      	cmp	r3, r4
 800428e:	d197      	bne.n	80041c0 <handle_flash_write+0xf0>
        debug_println("wrote bootloader"); debug_force_flush();
 8004290:	484b      	ldr	r0, [pc, #300]	; (80043c0 <handle_flash_write+0x2f0>)
 8004292:	f7fe fbb1 	bl	80029f8 <debug_println>
 8004296:	f7fe fb41 	bl	800291c <debug_force_flush>
        flash_flush();  //  Flush the last Bootloader page.
 800429a:	f7fe ff99 	bl	80031d0 <flash_flush>
        debug_println("compare bootloader..."); debug_force_flush();
 800429e:	4849      	ldr	r0, [pc, #292]	; (80043c4 <handle_flash_write+0x2f4>)
 80042a0:	f7fe fbaa 	bl	80029f8 <debug_println>
 80042a4:	f7fe fb3a 	bl	800291c <debug_force_flush>
        int bootloader_changed = memcmp((void *) old_app_start, (void *) FLASH_BASE, new_bootloader_size);
 80042a8:	4b3a      	ldr	r3, [pc, #232]	; (8004394 <handle_flash_write+0x2c4>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80042b0:	4628      	mov	r0, r5
 80042b2:	f7fe fa32 	bl	800271a <memcmp>
        if (bootloader_changed) {
 80042b6:	b990      	cbnz	r0, 80042de <handle_flash_write+0x20e>
        debug_print("bootloader identical "); debug_printhex_unsigned(old_app_start);
 80042b8:	4843      	ldr	r0, [pc, #268]	; (80043c8 <handle_flash_write+0x2f8>)
 80042ba:	f7fe fbc9 	bl	8002a50 <debug_print>
 80042be:	4628      	mov	r0, r5
 80042c0:	f7fe fc12 	bl	8002ae8 <debug_printhex_unsigned>
        debug_print(", size "); debug_printhex_unsigned(new_bootloader_size);
 80042c4:	4841      	ldr	r0, [pc, #260]	; (80043cc <handle_flash_write+0x2fc>)
 80042c6:	f7fe fbc3 	bl	8002a50 <debug_print>
 80042ca:	4b32      	ldr	r3, [pc, #200]	; (8004394 <handle_flash_write+0x2c4>)
 80042cc:	6818      	ldr	r0, [r3, #0]
 80042ce:	f7fe fc0b 	bl	8002ae8 <debug_printhex_unsigned>
        debug_println(""); debug_force_flush();
 80042d2:	4833      	ldr	r0, [pc, #204]	; (80043a0 <handle_flash_write+0x2d0>)
 80042d4:	f7fe fb90 	bl	80029f8 <debug_println>
 80042d8:	f7fe fb20 	bl	800291c <debug_force_flush>
 80042dc:	e770      	b.n	80041c0 <handle_flash_write+0xf0>
            debug_println("bootloader changed"); debug_force_flush();
 80042de:	483c      	ldr	r0, [pc, #240]	; (80043d0 <handle_flash_write+0x300>)
 80042e0:	f7fe fb8a 	bl	80029f8 <debug_println>
 80042e4:	f7fe fb1a 	bl	800291c <debug_force_flush>
            uint32_t new_baseloader_addr = target_addr + old_app_start_offset;
 80042e8:	4444      	add	r4, r8
            debug_print("copy baseloader to "); debug_printhex_unsigned(new_baseloader_addr); 
 80042ea:	483a      	ldr	r0, [pc, #232]	; (80043d4 <handle_flash_write+0x304>)
 80042ec:	f7fe fbb0 	bl	8002a50 <debug_print>
 80042f0:	4620      	mov	r0, r4
 80042f2:	f7fe fbf9 	bl	8002ae8 <debug_printhex_unsigned>
            debug_print(", size "); debug_printhex_unsigned(new_baseloader_size);
 80042f6:	4835      	ldr	r0, [pc, #212]	; (80043cc <handle_flash_write+0x2fc>)
 80042f8:	f7fe fbaa 	bl	8002a50 <debug_print>
 80042fc:	4e26      	ldr	r6, [pc, #152]	; (8004398 <handle_flash_write+0x2c8>)
 80042fe:	6830      	ldr	r0, [r6, #0]
 8004300:	f7fe fbf2 	bl	8002ae8 <debug_printhex_unsigned>
            debug_println(""); debug_force_flush();
 8004304:	4f26      	ldr	r7, [pc, #152]	; (80043a0 <handle_flash_write+0x2d0>)
 8004306:	4638      	mov	r0, r7
 8004308:	f7fe fb76 	bl	80029f8 <debug_println>
 800430c:	f7fe fb06 	bl	800291c <debug_force_flush>
            flash_write(new_baseloader_addr, (const uint8_t *) old_app_start, new_baseloader_size);
 8004310:	6832      	ldr	r2, [r6, #0]
 8004312:	4629      	mov	r1, r5
 8004314:	4620      	mov	r0, r4
 8004316:	f7fe ffa9 	bl	800326c <flash_write>
            flash_flush();
 800431a:	f7fe ff59 	bl	80031d0 <flash_flush>
            debug_print("restart to baseloader "); debug_printhex_unsigned(new_baseloader_addr);
 800431e:	482e      	ldr	r0, [pc, #184]	; (80043d8 <handle_flash_write+0x308>)
 8004320:	f7fe fb96 	bl	8002a50 <debug_print>
 8004324:	4620      	mov	r0, r4
 8004326:	f7fe fbdf 	bl	8002ae8 <debug_printhex_unsigned>
            debug_print(", baselen "); debug_printhex_unsigned(new_baseloader_size);
 800432a:	482c      	ldr	r0, [pc, #176]	; (80043dc <handle_flash_write+0x30c>)
 800432c:	f7fe fb90 	bl	8002a50 <debug_print>
 8004330:	6830      	ldr	r0, [r6, #0]
 8004332:	f7fe fbd9 	bl	8002ae8 <debug_printhex_unsigned>
            debug_print(", oldapp "); debug_printhex_unsigned(old_app_start);
 8004336:	482a      	ldr	r0, [pc, #168]	; (80043e0 <handle_flash_write+0x310>)
 8004338:	f7fe fb8a 	bl	8002a50 <debug_print>
 800433c:	4628      	mov	r0, r5
 800433e:	f7fe fbd3 	bl	8002ae8 <debug_printhex_unsigned>
            debug_print(", bootlen "); debug_printhex_unsigned(new_bootloader_size);
 8004342:	4828      	ldr	r0, [pc, #160]	; (80043e4 <handle_flash_write+0x314>)
 8004344:	f7fe fb84 	bl	8002a50 <debug_print>
 8004348:	4b12      	ldr	r3, [pc, #72]	; (8004394 <handle_flash_write+0x2c4>)
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	f7fe fbcc 	bl	8002ae8 <debug_printhex_unsigned>
            debug_println(""); debug_force_flush();
 8004350:	4638      	mov	r0, r7
 8004352:	f7fe fb51 	bl	80029f8 <debug_println>
 8004356:	f7fe fae1 	bl	800291c <debug_force_flush>
            boot_target_manifest_baseloader();  //  Never returns.
 800435a:	f7ff f915 	bl	8003588 <boot_target_manifest_baseloader>
            return;
 800435e:	e740      	b.n	80041e2 <handle_flash_write+0x112>
        flash_write(target_addr, data, HF2_PAGE_SIZE);
 8004360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004364:	4639      	mov	r1, r7
 8004366:	4620      	mov	r0, r4
 8004368:	f7fe ff80 	bl	800326c <flash_write>
 800436c:	e739      	b.n	80041e2 <handle_flash_write+0x112>
 800436e:	bf00      	nop
 8004370:	08010000 	.word	0x08010000
 8004374:	2000059c 	.word	0x2000059c
 8004378:	200005b8 	.word	0x200005b8
 800437c:	080053ac 	.word	0x080053ac
 8004380:	20000753 	.word	0x20000753
 8004384:	08000150 	.word	0x08000150
 8004388:	200005a4 	.word	0x200005a4
 800438c:	080053bc 	.word	0x080053bc
 8004390:	200005a8 	.word	0x200005a8
 8004394:	200005b0 	.word	0x200005b0
 8004398:	200005ac 	.word	0x200005ac
 800439c:	08005400 	.word	0x08005400
 80043a0:	080049f4 	.word	0x080049f4
 80043a4:	080054b4 	.word	0x080054b4
 80043a8:	08004e00 	.word	0x08004e00
 80043ac:	22051969 	.word	0x22051969
 80043b0:	19690522 	.word	0x19690522
 80043b4:	080053cc 	.word	0x080053cc
 80043b8:	080053e0 	.word	0x080053e0
 80043bc:	080053f0 	.word	0x080053f0
 80043c0:	0800541c 	.word	0x0800541c
 80043c4:	08005430 	.word	0x08005430
 80043c8:	0800549c 	.word	0x0800549c
 80043cc:	08005470 	.word	0x08005470
 80043d0:	08005448 	.word	0x08005448
 80043d4:	0800545c 	.word	0x0800545c
 80043d8:	08005478 	.word	0x08005478
 80043dc:	08005490 	.word	0x08005490
 80043e0:	08004bd4 	.word	0x08004bd4
 80043e4:	08004be0 	.word	0x08004be0
 80043e8:	080053a4 	.word	0x080053a4
 80043ec:	08004f7c 	.word	0x08004f7c

080043f0 <handle_command>:
static void handle_command(HF2_Buffer *pkt) {
 80043f0:	b570      	push	{r4, r5, r6, lr}
 80043f2:	4604      	mov	r4, r0
	if (!connected) {
 80043f4:	4b73      	ldr	r3, [pc, #460]	; (80045c4 <handle_command+0x1d4>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	b933      	cbnz	r3, 8004408 <handle_command+0x18>
		connected = 1;
 80043fa:	4b72      	ldr	r3, [pc, #456]	; (80045c4 <handle_command+0x1d4>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	701a      	strb	r2, [r3, #0]
		if (connected_func) { connected_func(); }
 8004400:	4b71      	ldr	r3, [pc, #452]	; (80045c8 <handle_command+0x1d8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	b103      	cbz	r3, 8004408 <handle_command+0x18>
 8004406:	4798      	blx	r3
    uint32_t cmdId = cmd->command_id;
 8004408:	f8d4 5002 	ldr.w	r5, [r4, #2]
    int sz = pkt->size;
 800440c:	8826      	ldrh	r6, [r4, #0]
    resp->tag = cmd->tag;
 800440e:	88e3      	ldrh	r3, [r4, #6]
 8004410:	8063      	strh	r3, [r4, #2]
    resp->status16 = HF2_STATUS_OK;  //  Default status is OK.
 8004412:	2300      	movs	r3, #0
 8004414:	7123      	strb	r3, [r4, #4]
 8004416:	7163      	strb	r3, [r4, #5]
    switch (cmdId) {
 8004418:	1e6b      	subs	r3, r5, #1
 800441a:	2b07      	cmp	r3, #7
 800441c:	f200 80be 	bhi.w	800459c <handle_command+0x1ac>
 8004420:	e8df f003 	tbb	[pc, r3]
 8004424:	897a3204 	.word	0x897a3204
 8004428:	96bc6555 	.word	0x96bc6555
        case HF2_CMD_BININFO: {  debug_println("hf2 >> bininfo");
 800442c:	4867      	ldr	r0, [pc, #412]	; (80045cc <handle_command+0x1dc>)
 800442e:	f7fe fae3 	bl	80029f8 <debug_println>
            assert(sizeof(resp->bininfo) < HF2_MINI_BUF_SIZE, "hf2 buf too small");
 8004432:	4967      	ldr	r1, [pc, #412]	; (80045d0 <handle_command+0x1e0>)
 8004434:	2001      	movs	r0, #1
 8004436:	f7ff fdb7 	bl	8003fa8 <assert>
            resp->bininfo.mode = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?                        
 800443a:	f7fe ffb1 	bl	80033a0 <boot_target_get_startup_mode>
                HF2_MODE_BOOTLOADER :
 800443e:	2802      	cmp	r0, #2
 8004440:	d000      	beq.n	8004444 <handle_command+0x54>
 8004442:	2502      	movs	r5, #2
            resp->bininfo.mode = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?                        
 8004444:	f8c4 5006 	str.w	r5, [r4, #6]
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8004448:	2300      	movs	r3, #0
 800444a:	72a3      	strb	r3, [r4, #10]
 800444c:	2201      	movs	r2, #1
 800444e:	72e2      	strb	r2, [r4, #11]
 8004450:	7323      	strb	r3, [r4, #12]
 8004452:	7363      	strb	r3, [r4, #13]
            resp->bininfo.flash_num_pages = FLASH_SIZE_OVERRIDE / HF2_PAGE_SIZE;
 8004454:	73a3      	strb	r3, [r4, #14]
 8004456:	73e2      	strb	r2, [r4, #15]
 8004458:	7423      	strb	r3, [r4, #16]
 800445a:	7463      	strb	r3, [r4, #17]
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 800445c:	2240      	movs	r2, #64	; 0x40
 800445e:	74a2      	strb	r2, [r4, #18]
 8004460:	2204      	movs	r2, #4
 8004462:	74e2      	strb	r2, [r4, #19]
 8004464:	7523      	strb	r3, [r4, #20]
 8004466:	7563      	strb	r3, [r4, #21]
            resp->bininfo.uf2_family = UF2_FAMILY;
 8004468:	2372      	movs	r3, #114	; 0x72
 800446a:	75a3      	strb	r3, [r4, #22]
 800446c:	2310      	movs	r3, #16
 800446e:	75e3      	strb	r3, [r4, #23]
 8004470:	f06f 031d 	mvn.w	r3, #29
 8004474:	7623      	strb	r3, [r4, #24]
 8004476:	235e      	movs	r3, #94	; 0x5e
 8004478:	7663      	strb	r3, [r4, #25]
            send_hf2_response(pkt, sizeof(resp->bininfo)); debug_force_flush(); ////
 800447a:	2114      	movs	r1, #20
 800447c:	4620      	mov	r0, r4
 800447e:	f000 fa2d 	bl	80048dc <send_hf2_response>
 8004482:	f7fe fa4b 	bl	800291c <debug_force_flush>
}
 8004486:	bd70      	pop	{r4, r5, r6, pc}
        case HF2_CMD_INFO: { debug_println("hf2 >> info");
 8004488:	4852      	ldr	r0, [pc, #328]	; (80045d4 <handle_command+0x1e4>)
 800448a:	f7fe fab5 	bl	80029f8 <debug_println>
            int info_size = strlen(infoUf2File);
 800448e:	4e52      	ldr	r6, [pc, #328]	; (80045d8 <handle_command+0x1e8>)
 8004490:	4630      	mov	r0, r6
 8004492:	f7fe f96a 	bl	800276a <strlen>
            assert(info_size > 0, "empty hf2 info");
 8004496:	4605      	mov	r5, r0
 8004498:	4950      	ldr	r1, [pc, #320]	; (80045dc <handle_command+0x1ec>)
 800449a:	2800      	cmp	r0, #0
 800449c:	bfd4      	ite	le
 800449e:	2000      	movle	r0, #0
 80044a0:	2001      	movgt	r0, #1
 80044a2:	f7ff fd81 	bl	8003fa8 <assert>
            assert((info_size + 4) < (int) HF2_MINI_BUF_SIZE, "hf2 buf too small");
 80044a6:	1d28      	adds	r0, r5, #4
 80044a8:	4949      	ldr	r1, [pc, #292]	; (80045d0 <handle_command+0x1e0>)
 80044aa:	2858      	cmp	r0, #88	; 0x58
 80044ac:	bfcc      	ite	gt
 80044ae:	2000      	movgt	r0, #0
 80044b0:	2001      	movle	r0, #1
 80044b2:	f7ff fd79 	bl	8003fa8 <assert>
            memcpy(pkt->resp.data8, infoUf2File, info_size);
 80044b6:	462a      	mov	r2, r5
 80044b8:	4631      	mov	r1, r6
 80044ba:	1da0      	adds	r0, r4, #6
 80044bc:	f7fe f93d 	bl	800273a <memcpy>
            send_hf2_response(pkt, info_size); debug_force_flush(); ////
 80044c0:	4629      	mov	r1, r5
 80044c2:	4620      	mov	r0, r4
 80044c4:	f000 fa0a 	bl	80048dc <send_hf2_response>
 80044c8:	f7fe fa28 	bl	800291c <debug_force_flush>
            return;
 80044cc:	e7db      	b.n	8004486 <handle_command+0x96>
        case HF2_CMD_START_FLASH: { debug_println("hf2 >> start");
 80044ce:	4844      	ldr	r0, [pc, #272]	; (80045e0 <handle_command+0x1f0>)
 80044d0:	f7fe fa92 	bl	80029f8 <debug_println>
            send_hf2_response(pkt, 0); debug_force_flush(); ////            
 80044d4:	2100      	movs	r1, #0
 80044d6:	4620      	mov	r0, r4
 80044d8:	f000 fa00 	bl	80048dc <send_hf2_response>
 80044dc:	f7fe fa1e 	bl	800291c <debug_force_flush>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 80044e0:	f7fe ff5e 	bl	80033a0 <boot_target_get_startup_mode>
 80044e4:	2803      	cmp	r0, #3
 80044e6:	d1ce      	bne.n	8004486 <handle_command+0x96>
                boot_target_manifest_bootloader();  //  Never returns.
 80044e8:	f7ff f85e 	bl	80035a8 <boot_target_manifest_bootloader>
 80044ec:	e7cb      	b.n	8004486 <handle_command+0x96>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { debug_println("hf2 >> flash");  debug_force_flush(); ////
 80044ee:	f7fe ff57 	bl	80033a0 <boot_target_get_startup_mode>
 80044f2:	2803      	cmp	r0, #3
 80044f4:	d003      	beq.n	80044fe <handle_command+0x10e>
            handle_flash_write(pkt);
 80044f6:	4620      	mov	r0, r4
 80044f8:	f7ff fdea 	bl	80040d0 <handle_flash_write>
            return;
 80044fc:	e7c3      	b.n	8004486 <handle_command+0x96>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { debug_println("hf2 >> flash");  debug_force_flush(); ////
 80044fe:	4839      	ldr	r0, [pc, #228]	; (80045e4 <handle_command+0x1f4>)
 8004500:	f7fe fa7a 	bl	80029f8 <debug_println>
 8004504:	f7fe fa0a 	bl	800291c <debug_force_flush>
                restart_request = BOOTLOADER_MODE; 
 8004508:	4b37      	ldr	r3, [pc, #220]	; (80045e8 <handle_command+0x1f8>)
 800450a:	2202      	movs	r2, #2
 800450c:	701a      	strb	r2, [r3, #0]
                send_hf2_response(pkt, 0);
 800450e:	2100      	movs	r1, #0
 8004510:	4620      	mov	r0, r4
 8004512:	f000 f9e3 	bl	80048dc <send_hf2_response>
                return;
 8004516:	e7b6      	b.n	8004486 <handle_command+0x96>
        case HF2_CMD_RESET_INTO_APP: { debug_println("hf2 >> app");
 8004518:	4834      	ldr	r0, [pc, #208]	; (80045ec <handle_command+0x1fc>)
 800451a:	f7fe fa6d 	bl	80029f8 <debug_println>
            flash_flush();  //  Flush any pending flash writes.
 800451e:	f7fe fe57 	bl	80031d0 <flash_flush>
            restart_request = APPLICATION_MODE;
 8004522:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <handle_command+0x1f8>)
 8004524:	2203      	movs	r2, #3
 8004526:	701a      	strb	r2, [r3, #0]
            send_hf2_response(pkt, 0); debug_force_flush(); ////
 8004528:	2100      	movs	r1, #0
 800452a:	4620      	mov	r0, r4
 800452c:	f000 f9d6 	bl	80048dc <send_hf2_response>
 8004530:	f7fe f9f4 	bl	800291c <debug_force_flush>
            return;
 8004534:	e7a7      	b.n	8004486 <handle_command+0x96>
            debug_println("hf2 >> boot");
 8004536:	482e      	ldr	r0, [pc, #184]	; (80045f0 <handle_command+0x200>)
 8004538:	f7fe fa5e 	bl	80029f8 <debug_println>
            restart_request = BOOTLOADER_MODE;
 800453c:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <handle_command+0x1f8>)
 800453e:	2202      	movs	r2, #2
 8004540:	701a      	strb	r2, [r3, #0]
            send_hf2_response(pkt, 0);
 8004542:	2100      	movs	r1, #0
 8004544:	4620      	mov	r0, r4
 8004546:	f000 f9c9 	bl	80048dc <send_hf2_response>
            debug_force_flush(); ////
 800454a:	f7fe f9e7 	bl	800291c <debug_force_flush>
            return;
 800454e:	e79a      	b.n	8004486 <handle_command+0x96>
        case HF2_CMD_READ_WORDS: { debug_println("hf2 >> read"); debug_force_flush(); ////
 8004550:	4828      	ldr	r0, [pc, #160]	; (80045f4 <handle_command+0x204>)
 8004552:	f7fe fa51 	bl	80029f8 <debug_println>
 8004556:	f7fe f9e1 	bl	800291c <debug_force_flush>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 800455a:	f7fe ff21 	bl	80033a0 <boot_target_get_startup_mode>
 800455e:	2803      	cmp	r0, #3
 8004560:	d014      	beq.n	800458c <handle_command+0x19c>
            checkDataSize(read_words, 0);
 8004562:	4925      	ldr	r1, [pc, #148]	; (80045f8 <handle_command+0x208>)
 8004564:	2e10      	cmp	r6, #16
 8004566:	bf14      	ite	ne
 8004568:	2000      	movne	r0, #0
 800456a:	2001      	moveq	r0, #1
 800456c:	f7ff fd1c 	bl	8003fa8 <assert>
            int num_words = cmd->read_words.num_words;
 8004570:	f8d4 500e 	ldr.w	r5, [r4, #14]
            memcpy(resp->data32, (void *)cmd->read_words.target_addr, num_words << 2);
 8004574:	00ad      	lsls	r5, r5, #2
 8004576:	462a      	mov	r2, r5
 8004578:	f8d4 100a 	ldr.w	r1, [r4, #10]
 800457c:	1da0      	adds	r0, r4, #6
 800457e:	f7fe f8dc 	bl	800273a <memcpy>
            send_hf2_response(pkt, num_words << 2);
 8004582:	4629      	mov	r1, r5
 8004584:	4620      	mov	r0, r4
 8004586:	f000 f9a9 	bl	80048dc <send_hf2_response>
            return;
 800458a:	e77c      	b.n	8004486 <handle_command+0x96>
                restart_request = BOOTLOADER_MODE; 
 800458c:	4b16      	ldr	r3, [pc, #88]	; (80045e8 <handle_command+0x1f8>)
 800458e:	2202      	movs	r2, #2
 8004590:	701a      	strb	r2, [r3, #0]
                send_hf2_response(pkt, 0);
 8004592:	2100      	movs	r1, #0
 8004594:	4620      	mov	r0, r4
 8004596:	f000 f9a1 	bl	80048dc <send_hf2_response>
                return;
 800459a:	e774      	b.n	8004486 <handle_command+0x96>
        default: { debug_print("hf2 >> unknown "); debug_print_unsigned(cmdId); debug_println(""); debug_force_flush(); ////
 800459c:	4817      	ldr	r0, [pc, #92]	; (80045fc <handle_command+0x20c>)
 800459e:	f7fe fa57 	bl	8002a50 <debug_print>
 80045a2:	4628      	mov	r0, r5
 80045a4:	f7fe fa64 	bl	8002a70 <debug_print_unsigned>
 80045a8:	4815      	ldr	r0, [pc, #84]	; (8004600 <handle_command+0x210>)
 80045aa:	f7fe fa25 	bl	80029f8 <debug_println>
 80045ae:	f7fe f9b5 	bl	800291c <debug_force_flush>
            resp->status16 = HF2_STATUS_INVALID_CMD;
 80045b2:	2100      	movs	r1, #0
 80045b4:	2301      	movs	r3, #1
 80045b6:	7123      	strb	r3, [r4, #4]
 80045b8:	7161      	strb	r1, [r4, #5]
    send_hf2_response(pkt, 0);
 80045ba:	4620      	mov	r0, r4
 80045bc:	f000 f98e 	bl	80048dc <send_hf2_response>
 80045c0:	e761      	b.n	8004486 <handle_command+0x96>
 80045c2:	bf00      	nop
 80045c4:	20000752 	.word	0x20000752
 80045c8:	200005a0 	.word	0x200005a0
 80045cc:	08005310 	.word	0x08005310
 80045d0:	08005320 	.word	0x08005320
 80045d4:	08005334 	.word	0x08005334
 80045d8:	08004cb8 	.word	0x08004cb8
 80045dc:	08005340 	.word	0x08005340
 80045e0:	08005350 	.word	0x08005350
 80045e4:	08005360 	.word	0x08005360
 80045e8:	20000755 	.word	0x20000755
 80045ec:	08005370 	.word	0x08005370
 80045f0:	0800537c 	.word	0x0800537c
 80045f4:	08005388 	.word	0x08005388
 80045f8:	080054b4 	.word	0x080054b4
 80045fc:	08005394 	.word	0x08005394
 8004600:	080049f4 	.word	0x080049f4

08004604 <hf2_data_rx_cb>:
static void hf2_data_rx_cb(usbd_device *usbd_dev, uint8_t ep) {
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int len = usbd_ep_read_packet(usbd_dev, ep, rx_buf, sizeof(rx_buf));    
 8004606:	2340      	movs	r3, #64	; 0x40
 8004608:	4a28      	ldr	r2, [pc, #160]	; (80046ac <hf2_data_rx_cb+0xa8>)
 800460a:	f7fd f995 	bl	8001938 <usbd_ep_read_packet>
 800460e:	4604      	mov	r4, r0
    rx_time = millis();
 8004610:	f7fe fba0 	bl	8002d54 <millis>
 8004614:	4b26      	ldr	r3, [pc, #152]	; (80046b0 <hf2_data_rx_cb+0xac>)
 8004616:	6018      	str	r0, [r3, #0]
    if (len <= 0) return;
 8004618:	2c00      	cmp	r4, #0
 800461a:	d03f      	beq.n	800469c <hf2_data_rx_cb+0x98>
    uint8_t tag = rx_buf[0];
 800461c:	4b23      	ldr	r3, [pc, #140]	; (80046ac <hf2_data_rx_cb+0xa8>)
 800461e:	781c      	ldrb	r4, [r3, #0]
    if (!pkt) {
 8004620:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <hf2_data_rx_cb+0xb0>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	b143      	cbz	r3, 8004638 <hf2_data_rx_cb+0x34>
    usb_assert(pkt->size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 8004626:	4b23      	ldr	r3, [pc, #140]	; (80046b4 <hf2_data_rx_cb+0xb0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b173      	cbz	r3, 800464c <hf2_data_rx_cb+0x48>
 800462e:	f014 0f80 	tst.w	r4, #128	; 0x80
 8004632:	d134      	bne.n	800469e <hf2_data_rx_cb+0x9a>
 8004634:	2001      	movs	r0, #1
 8004636:	e00a      	b.n	800464e <hf2_data_rx_cb+0x4a>
        pkt = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?
 8004638:	f7fe feb2 	bl	80033a0 <boot_target_get_startup_mode>
            &hf2_buffer :
 800463c:	2802      	cmp	r0, #2
 800463e:	d003      	beq.n	8004648 <hf2_data_rx_cb+0x44>
 8004640:	4a1d      	ldr	r2, [pc, #116]	; (80046b8 <hf2_data_rx_cb+0xb4>)
        pkt = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?
 8004642:	4b1c      	ldr	r3, [pc, #112]	; (80046b4 <hf2_data_rx_cb+0xb0>)
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	e7ee      	b.n	8004626 <hf2_data_rx_cb+0x22>
            &hf2_buffer :
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <hf2_data_rx_cb+0xb8>)
 800464a:	e7fa      	b.n	8004642 <hf2_data_rx_cb+0x3e>
    usb_assert(pkt->size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 800464c:	2001      	movs	r0, #1
 800464e:	4f1c      	ldr	r7, [pc, #112]	; (80046c0 <hf2_data_rx_cb+0xbc>)
 8004650:	4639      	mov	r1, r7
 8004652:	f7ff fca9 	bl	8003fa8 <assert>
 8004656:	f004 063f 	and.w	r6, r4, #63	; 0x3f
    usb_assert(pkt->size + size <= (int) HF2_BUF_SIZE /* Was sizeof(pkt->buf) */, bad_packet_message);
 800465a:	4d16      	ldr	r5, [pc, #88]	; (80046b4 <hf2_data_rx_cb+0xb0>)
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	8818      	ldrh	r0, [r3, #0]
 8004660:	4430      	add	r0, r6
 8004662:	4639      	mov	r1, r7
 8004664:	f5b0 6f88 	cmp.w	r0, #1088	; 0x440
 8004668:	bfcc      	ite	gt
 800466a:	2000      	movgt	r0, #0
 800466c:	2001      	movle	r0, #1
 800466e:	f7ff fc9b 	bl	8003fa8 <assert>
    memcpy(pkt->buf + pkt->size, rx_buf + 1, size);
 8004672:	682d      	ldr	r5, [r5, #0]
 8004674:	1ca8      	adds	r0, r5, #2
 8004676:	882b      	ldrh	r3, [r5, #0]
 8004678:	4632      	mov	r2, r6
 800467a:	4912      	ldr	r1, [pc, #72]	; (80046c4 <hf2_data_rx_cb+0xc0>)
 800467c:	4418      	add	r0, r3
 800467e:	f7fe f85c 	bl	800273a <memcpy>
    pkt->size += size;
 8004682:	882a      	ldrh	r2, [r5, #0]
 8004684:	4432      	add	r2, r6
 8004686:	802a      	strh	r2, [r5, #0]
    if (tag != HF2_FLAG_CMDPKT_BODY) {
 8004688:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
 800468c:	d006      	beq.n	800469c <hf2_data_rx_cb+0x98>
        if (tag == HF2_FLAG_CMDPKT_LAST) {
 800468e:	2c40      	cmp	r4, #64	; 0x40
 8004690:	d007      	beq.n	80046a2 <hf2_data_rx_cb+0x9e>
        pkt->size = 0;
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <hf2_data_rx_cb+0xb0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	705a      	strb	r2, [r3, #1]
}
 800469c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    usb_assert(pkt->size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 800469e:	2000      	movs	r0, #0
 80046a0:	e7d5      	b.n	800464e <hf2_data_rx_cb+0x4a>
            handle_command(pkt);
 80046a2:	4628      	mov	r0, r5
 80046a4:	f7ff fea4 	bl	80043f0 <handle_command>
 80046a8:	e7f3      	b.n	8004692 <hf2_data_rx_cb+0x8e>
 80046aa:	bf00      	nop
 80046ac:	200005c4 	.word	0x200005c4
 80046b0:	20000604 	.word	0x20000604
 80046b4:	200005b4 	.word	0x200005b4
 80046b8:	20000860 	.word	0x20000860
 80046bc:	20004bbc 	.word	0x20004bbc
 80046c0:	08005304 	.word	0x08005304
 80046c4:	200005c5 	.word	0x200005c5

080046c8 <hf2_data_tx_cb>:
static void hf2_data_tx_cb(usbd_device *usbd_dev, uint8_t ep) { (void)usbd_dev; (void)ep;
 80046c8:	b508      	push	{r3, lr}
    if (remDataToSendLength > 0) {  //  If there is remaining data to be sent...
 80046ca:	4b11      	ldr	r3, [pc, #68]	; (8004710 <hf2_data_tx_cb+0x48>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	b94b      	cbnz	r3, 80046e4 <hf2_data_tx_cb+0x1c>
    if (remDataToSendLength == 0) {  //  If there is no more data to be sent...
 80046d0:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <hf2_data_tx_cb+0x48>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	b92b      	cbnz	r3, 80046e2 <hf2_data_tx_cb+0x1a>
        if (restart_request == BOOTLOADER_MODE) {  //  Restart to Bootloader Mode if requested.
 80046d6:	4b0f      	ldr	r3, [pc, #60]	; (8004714 <hf2_data_tx_cb+0x4c>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d00b      	beq.n	80046f6 <hf2_data_tx_cb+0x2e>
        } else if (restart_request == APPLICATION_MODE) {  //  Restart to Application Mode if requested.
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d00f      	beq.n	8004702 <hf2_data_tx_cb+0x3a>
}
 80046e2:	bd08      	pop	{r3, pc}
        pokeSend(remDataToSend, remDataToSendLength, remDataToSendFlag);  //  Send it.
 80046e4:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <hf2_data_tx_cb+0x48>)
 80046e6:	6819      	ldr	r1, [r3, #0]
 80046e8:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <hf2_data_tx_cb+0x50>)
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <hf2_data_tx_cb+0x54>)
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	f7ff fc8a 	bl	8004008 <pokeSend>
 80046f4:	e7ec      	b.n	80046d0 <hf2_data_tx_cb+0x8>
            restart_request = UNKNOWN_MODE;
 80046f6:	4b07      	ldr	r3, [pc, #28]	; (8004714 <hf2_data_tx_cb+0x4c>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
            boot_target_manifest_bootloader();  //  Never returns.
 80046fc:	f7fe ff54 	bl	80035a8 <boot_target_manifest_bootloader>
 8004700:	e7ef      	b.n	80046e2 <hf2_data_tx_cb+0x1a>
            restart_request = UNKNOWN_MODE;
 8004702:	4b04      	ldr	r3, [pc, #16]	; (8004714 <hf2_data_tx_cb+0x4c>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
            boot_target_manifest_app();  //  Never returns.
 8004708:	f7fe ff2e 	bl	8003568 <boot_target_manifest_app>
}
 800470c:	e7e9      	b.n	80046e2 <hf2_data_tx_cb+0x1a>
 800470e:	bf00      	nop
 8004710:	200005c0 	.word	0x200005c0
 8004714:	20000755 	.word	0x20000755
 8004718:	20000754 	.word	0x20000754
 800471c:	200005bc 	.word	0x200005bc

08004720 <hf2_setup>:
void hf2_setup(usbd_device *usbd_dev, connected_callback *connected_func0) {
 8004720:	b538      	push	{r3, r4, r5, lr}
 8004722:	4604      	mov	r4, r0
 8004724:	460d      	mov	r5, r1
    debug_print("flash allow "); debug_printhex_unsigned(USER_FLASH_START); debug_print(" to "); debug_printhex_unsigned(USER_FLASH_END); debug_println("");  //  Show the addresses that flashing is allowed.
 8004726:	4814      	ldr	r0, [pc, #80]	; (8004778 <hf2_setup+0x58>)
 8004728:	f7fe f992 	bl	8002a50 <debug_print>
 800472c:	4813      	ldr	r0, [pc, #76]	; (800477c <hf2_setup+0x5c>)
 800472e:	f7fe f9db 	bl	8002ae8 <debug_printhex_unsigned>
 8004732:	4813      	ldr	r0, [pc, #76]	; (8004780 <hf2_setup+0x60>)
 8004734:	f7fe f98c 	bl	8002a50 <debug_print>
 8004738:	4812      	ldr	r0, [pc, #72]	; (8004784 <hf2_setup+0x64>)
 800473a:	f7fe f9d5 	bl	8002ae8 <debug_printhex_unsigned>
 800473e:	4812      	ldr	r0, [pc, #72]	; (8004788 <hf2_setup+0x68>)
 8004740:	f7fe f95a 	bl	80029f8 <debug_println>
    _usbd_dev = usbd_dev;
 8004744:	4b11      	ldr	r3, [pc, #68]	; (800478c <hf2_setup+0x6c>)
 8004746:	601c      	str	r4, [r3, #0]
    connected_func = connected_func0;  //  test_hf2(); ////
 8004748:	4b11      	ldr	r3, [pc, #68]	; (8004790 <hf2_setup+0x70>)
 800474a:	601d      	str	r5, [r3, #0]
    if (boot_target_get_startup_mode() == BOOTLOADER_MODE) {
 800474c:	f7fe fe28 	bl	80033a0 <boot_target_get_startup_mode>
 8004750:	2802      	cmp	r0, #2
 8004752:	d006      	beq.n	8004762 <hf2_setup+0x42>
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
 8004754:	490f      	ldr	r1, [pc, #60]	; (8004794 <hf2_setup+0x74>)
 8004756:	4620      	mov	r0, r4
 8004758:	f7ff f818 	bl	800378c <aggregate_register_config_callback>
    if (status < 0) { debug_println("*** hf2_setup failed"); }
 800475c:	2800      	cmp	r0, #0
 800475e:	db07      	blt.n	8004770 <hf2_setup+0x50>
}
 8004760:	bd38      	pop	{r3, r4, r5, pc}
        memset(&hf2_buffer, 0, sizeof(hf2_buffer));
 8004762:	f240 4242 	movw	r2, #1090	; 0x442
 8004766:	2100      	movs	r1, #0
 8004768:	480b      	ldr	r0, [pc, #44]	; (8004798 <hf2_setup+0x78>)
 800476a:	f7fd fff3 	bl	8002754 <memset>
 800476e:	e7f1      	b.n	8004754 <hf2_setup+0x34>
    if (status < 0) { debug_println("*** hf2_setup failed"); }
 8004770:	480a      	ldr	r0, [pc, #40]	; (800479c <hf2_setup+0x7c>)
 8004772:	f7fe f941 	bl	80029f8 <debug_println>
}
 8004776:	e7f3      	b.n	8004760 <hf2_setup+0x40>
 8004778:	080054e4 	.word	0x080054e4
 800477c:	08007400 	.word	0x08007400
 8004780:	080054f4 	.word	0x080054f4
 8004784:	08010000 	.word	0x08010000
 8004788:	080049f4 	.word	0x080049f4
 800478c:	20000598 	.word	0x20000598
 8004790:	200005a0 	.word	0x200005a0
 8004794:	08003fc9 	.word	0x08003fc9
 8004798:	20004bbc 	.word	0x20004bbc
 800479c:	080054fc 	.word	0x080054fc

080047a0 <backup_write>:

#include "backup.h"

#define RTC_BKP_DR(reg)  MMIO16(BACKUP_REGS_BASE + 4 + (4 * (reg)))

void backup_write(enum BackupRegister reg, uint32_t value) {
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	4605      	mov	r5, r0
 80047a4:	460c      	mov	r4, r1
    rcc_periph_clock_enable(RCC_PWR);
 80047a6:	f44f 7067 	mov.w	r0, #924	; 0x39c
 80047aa:	f7fd f876 	bl	800189a <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_BKP);
 80047ae:	f240 309b 	movw	r0, #923	; 0x39b
 80047b2:	f7fd f872 	bl	800189a <rcc_periph_clock_enable>

    pwr_disable_backup_domain_write_protect();
 80047b6:	f7fc fcd9 	bl	800116c <pwr_disable_backup_domain_write_protect>
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 80047ba:	b2a2      	uxth	r2, r4
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <backup_write+0x30>)
 80047be:	f823 2035 	strh.w	r2, [r3, r5, lsl #3]
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 80047c2:	0c24      	lsrs	r4, r4, #16
 80047c4:	3304      	adds	r3, #4
 80047c6:	f823 4035 	strh.w	r4, [r3, r5, lsl #3]
    pwr_enable_backup_domain_write_protect();
 80047ca:	f7fc fcd7 	bl	800117c <pwr_enable_backup_domain_write_protect>
    //  Previously: (void)reg; *(volatile uint32_t*)0x2000f000 = value;
}
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
 80047d0:	40006c04 	.word	0x40006c04

080047d4 <backup_read>:

uint32_t backup_read(enum BackupRegister reg) {
    //  Previously: (void)reg; return *(volatile uint32_t*)0x2000f000;
    uint32_t value = ((uint32_t)RTC_BKP_DR((int)reg*2+1) << 16)
 80047d4:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <backup_read+0x14>)
 80047d6:	f833 2030 	ldrh.w	r2, [r3, r0, lsl #3]
                   | ((uint32_t)RTC_BKP_DR((int)reg*2) << 0);
 80047da:	3b04      	subs	r3, #4
 80047dc:	f833 0030 	ldrh.w	r0, [r3, r0, lsl #3]
    return value;
}
 80047e0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40006c08 	.word	0x40006c08

080047ec <usb21_set_config>:
		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NEXT_CALLBACK;
}

static void usb21_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 80047ec:	b508      	push	{r3, lr}
    //  debug_println("usb21_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 80047ee:	4b07      	ldr	r3, [pc, #28]	; (800480c <usb21_set_config+0x20>)
 80047f0:	22ff      	movs	r2, #255	; 0xff
 80047f2:	2180      	movs	r1, #128	; 0x80
 80047f4:	f7fe ffea 	bl	80037cc <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		&usb21_standard_get_descriptor);
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 80047f8:	2800      	cmp	r0, #0
 80047fa:	db00      	blt.n	80047fe <usb21_set_config+0x12>
}
 80047fc:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 80047fe:	4804      	ldr	r0, [pc, #16]	; (8004810 <usb21_set_config+0x24>)
 8004800:	f7fe f8fa 	bl	80029f8 <debug_println>
 8004804:	f7fe f91f 	bl	8002a46 <debug_flush>
}
 8004808:	e7f8      	b.n	80047fc <usb21_set_config+0x10>
 800480a:	bf00      	nop
 800480c:	08004815 	.word	0x08004815
 8004810:	08005524 	.word	0x08005524

08004814 <usb21_standard_get_descriptor>:
	int descr_type = req->wValue >> 8;
 8004814:	8848      	ldrh	r0, [r1, #2]
 8004816:	0a00      	lsrs	r0, r0, #8
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 8004818:	280f      	cmp	r0, #15
 800481a:	d121      	bne.n	8004860 <usb21_standard_get_descriptor+0x4c>
											usbd_control_complete_callback* complete) {
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	461d      	mov	r5, r3
 8004820:	4614      	mov	r4, r2
	if (!usb21_bos) {
 8004822:	4b10      	ldr	r3, [pc, #64]	; (8004864 <usb21_standard_get_descriptor+0x50>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	b123      	cbz	r3, 8004832 <usb21_standard_get_descriptor+0x1e>
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR) {
 8004828:	784b      	ldrb	r3, [r1, #1]
 800482a:	2b06      	cmp	r3, #6
 800482c:	d008      	beq.n	8004840 <usb21_standard_get_descriptor+0x2c>
	return USBD_REQ_NEXT_CALLBACK;
 800482e:	2002      	movs	r0, #2
}
 8004830:	bd70      	pop	{r4, r5, r6, pc}
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
 8004832:	480d      	ldr	r0, [pc, #52]	; (8004868 <usb21_standard_get_descriptor+0x54>)
 8004834:	f7fe f8e0 	bl	80029f8 <debug_println>
 8004838:	f7fe f905 	bl	8002a46 <debug_flush>
		return USBD_REQ_NOTSUPP;
 800483c:	2000      	movs	r0, #0
 800483e:	e7f7      	b.n	8004830 <usb21_standard_get_descriptor+0x1c>
		dump_usb_request("bos", req); // debug_flush(); ////
 8004840:	480a      	ldr	r0, [pc, #40]	; (800486c <usb21_standard_get_descriptor+0x58>)
 8004842:	f7ff f829 	bl	8003898 <dump_usb_request>
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 8004846:	882e      	ldrh	r6, [r5, #0]
 8004848:	4632      	mov	r2, r6
 800484a:	6821      	ldr	r1, [r4, #0]
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <usb21_standard_get_descriptor+0x50>)
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	f000 f850 	bl	80048f4 <build_bos_descriptor>
 8004854:	4286      	cmp	r6, r0
 8004856:	d200      	bcs.n	800485a <usb21_standard_get_descriptor+0x46>
 8004858:	4630      	mov	r0, r6
 800485a:	8028      	strh	r0, [r5, #0]
		return USBD_REQ_HANDLED;
 800485c:	2001      	movs	r0, #1
 800485e:	e7e7      	b.n	8004830 <usb21_standard_get_descriptor+0x1c>
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 8004860:	2002      	movs	r0, #2
}
 8004862:	4770      	bx	lr
 8004864:	20000648 	.word	0x20000648
 8004868:	08005558 	.word	0x08005558
 800486c:	08005578 	.word	0x08005578

08004870 <usb21_setup>:

void usb21_setup(usbd_device* usbd_dev, const struct usb_bos_descriptor* binary_object_store) {
 8004870:	b510      	push	{r4, lr}
 8004872:	4604      	mov	r4, r0
    // debug_println("usb21_setup"); // debug_flush(); ////
	usb21_bos = binary_object_store;
 8004874:	4b08      	ldr	r3, [pc, #32]	; (8004898 <usb21_setup+0x28>)
 8004876:	6019      	str	r1, [r3, #0]

	/* Register the control request handler _before_ the config is set */
	usb21_set_config(usbd_dev, 0x0000);
 8004878:	2100      	movs	r1, #0
 800487a:	f7ff ffb7 	bl	80047ec <usb21_set_config>
	int status = aggregate_register_config_callback(usbd_dev, usb21_set_config);
 800487e:	4907      	ldr	r1, [pc, #28]	; (800489c <usb21_setup+0x2c>)
 8004880:	4620      	mov	r0, r4
 8004882:	f7fe ff83 	bl	800378c <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 8004886:	2800      	cmp	r0, #0
 8004888:	db00      	blt.n	800488c <usb21_setup+0x1c>
}
 800488a:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 800488c:	4804      	ldr	r0, [pc, #16]	; (80048a0 <usb21_setup+0x30>)
 800488e:	f7fe f8b3 	bl	80029f8 <debug_println>
 8004892:	f7fe f8d8 	bl	8002a46 <debug_flush>
}
 8004896:	e7f8      	b.n	800488a <usb21_setup+0x1a>
 8004898:	20000648 	.word	0x20000648
 800489c:	080047ed 	.word	0x080047ed
 80048a0:	08005540 	.word	0x08005540

080048a4 <bootloader_set_restart_callback>:
int bootloader_set_restart_callback(restart_callback_type *func) {
 80048a4:	b508      	push	{r3, lr}
    boot_target_set_restart_callback(func);
 80048a6:	f7fe fe4f 	bl	8003548 <boot_target_set_restart_callback>
}
 80048aa:	2000      	movs	r0, #0
 80048ac:	bd08      	pop	{r3, pc}

080048ae <sleep_us>:
    for (int i = 0; i < us*10; i++) {
 80048ae:	2100      	movs	r1, #0
 80048b0:	e001      	b.n	80048b6 <sleep_us+0x8>
        __asm__("nop");
 80048b2:	bf00      	nop
    for (int i = 0; i < us*10; i++) {
 80048b4:	3101      	adds	r1, #1
 80048b6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80048ba:	0053      	lsls	r3, r2, #1
 80048bc:	428b      	cmp	r3, r1
 80048be:	dcf8      	bgt.n	80048b2 <sleep_us+0x4>
}
 80048c0:	4770      	bx	lr

080048c2 <boot_target_get_serial_number>:
}

void boot_target_get_serial_number(char* dest, size_t max_chars) {
 80048c2:	b508      	push	{r3, lr}
    desig_get_unique_id_as_string(dest, max_chars+1);
 80048c4:	3101      	adds	r1, #1
 80048c6:	f7fc f9f9 	bl	8000cbc <desig_get_unique_id_as_string>
}
 80048ca:	bd08      	pop	{r3, pc}

080048cc <usb_descriptor_type>:
}
 80048cc:	0a00      	lsrs	r0, r0, #8
 80048ce:	4770      	bx	lr

080048d0 <usb_descriptor_index>:
}
 80048d0:	b2c0      	uxtb	r0, r0
 80048d2:	4770      	bx	lr

080048d4 <usb_descriptor_type>:
static int usb_descriptor_type(uint16_t wValue) { return wValue >> 8; }
 80048d4:	0a00      	lsrs	r0, r0, #8
 80048d6:	4770      	bx	lr

080048d8 <usb_descriptor_index>:
static int usb_descriptor_index(uint16_t wValue) { return wValue & 0xFF; }
 80048d8:	b2c0      	uxtb	r0, r0
 80048da:	4770      	bx	lr

080048dc <send_hf2_response>:
static void send_hf2_response(HF2_Buffer *pkt, int size) {
 80048dc:	b500      	push	{lr}
 80048de:	b083      	sub	sp, #12
    volatile uint32_t dataToSendLength = 4 + size;
 80048e0:	3104      	adds	r1, #4
 80048e2:	9101      	str	r1, [sp, #4]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80048e4:	9901      	ldr	r1, [sp, #4]
 80048e6:	2240      	movs	r2, #64	; 0x40
 80048e8:	3002      	adds	r0, #2
 80048ea:	f7ff fb8d 	bl	8004008 <pokeSend>
}
 80048ee:	b003      	add	sp, #12
 80048f0:	f85d fb04 	ldr.w	pc, [sp], #4

080048f4 <build_bos_descriptor>:
									 uint8_t *buf, uint16_t len) {
 80048f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f8:	b083      	sub	sp, #12
 80048fa:	4682      	mov	sl, r0
 80048fc:	460c      	mov	r4, r1
 80048fe:	9101      	str	r1, [sp, #4]
 8004900:	4616      	mov	r6, r2
	bytes_to_copy = MIN(len, bos->bLength);
 8004902:	f890 8000 	ldrb.w	r8, [r0]
 8004906:	4590      	cmp	r8, r2
 8004908:	bf28      	it	cs
 800490a:	4690      	movcs	r8, r2
	memcpy(buf, bos, bytes_to_copy);
 800490c:	4642      	mov	r2, r8
 800490e:	4601      	mov	r1, r0
 8004910:	4620      	mov	r0, r4
 8004912:	f7fd ff12 	bl	800273a <memcpy>
	buf += bytes_to_copy;
 8004916:	eb04 0908 	add.w	r9, r4, r8
	len -= bytes_to_copy;
 800491a:	eba6 0608 	sub.w	r6, r6, r8
 800491e:	b2b6      	uxth	r6, r6
	totallen += bos->bLength;
 8004920:	f89a b000 	ldrb.w	fp, [sl]
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8004924:	2500      	movs	r5, #0
 8004926:	e018      	b.n	800495a <build_bos_descriptor+0x66>
			bos->capabilities[i];
 8004928:	f8da 3005 	ldr.w	r3, [sl, #5]
		const struct usb_device_capability_descriptor *cap =
 800492c:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
		bytes_to_copy = MIN(len, cap->bLength);
 8004930:	783c      	ldrb	r4, [r7, #0]
 8004932:	42b4      	cmp	r4, r6
 8004934:	bf28      	it	cs
 8004936:	4634      	movcs	r4, r6
		memcpy(buf, cap, bytes_to_copy);
 8004938:	4622      	mov	r2, r4
 800493a:	4639      	mov	r1, r7
 800493c:	4648      	mov	r0, r9
 800493e:	f7fd fefc 	bl	800273a <memcpy>
		buf += bytes_to_copy;
 8004942:	44a1      	add	r9, r4
		len -= bytes_to_copy;
 8004944:	1b36      	subs	r6, r6, r4
 8004946:	b2b6      	uxth	r6, r6
		total += bytes_to_copy;
 8004948:	44a0      	add	r8, r4
 800494a:	fa1f f888 	uxth.w	r8, r8
		totallen += cap->bLength;
 800494e:	783b      	ldrb	r3, [r7, #0]
 8004950:	449b      	add	fp, r3
 8004952:	fa1f fb8b 	uxth.w	fp, fp
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8004956:	3501      	adds	r5, #1
 8004958:	b2ad      	uxth	r5, r5
 800495a:	f89a 3004 	ldrb.w	r3, [sl, #4]
 800495e:	42ab      	cmp	r3, r5
 8004960:	d8e2      	bhi.n	8004928 <build_bos_descriptor+0x34>
	*(uint16_t *)(tmpbuf + 2) = totallen;
 8004962:	9b01      	ldr	r3, [sp, #4]
 8004964:	f8a3 b002 	strh.w	fp, [r3, #2]
}
 8004968:	4640      	mov	r0, r8
 800496a:	b003      	add	sp, #12
 800496c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004970:	202a2a2a 	.word	0x202a2a2a
 8004974:	206c6168 	.word	0x206c6168
 8004978:	2f737362 	.word	0x2f737362
 800497c:	61746164 	.word	0x61746164
 8004980:	69616620 	.word	0x69616620
 8004984:	2c64656c 	.word	0x2c64656c
 8004988:	73736220 	.word	0x73736220
 800498c:	7365745f 	.word	0x7365745f
 8004990:	203d2074 	.word	0x203d2074
 8004994:	00000000 	.word	0x00000000
 8004998:	6164202c 	.word	0x6164202c
 800499c:	745f6174 	.word	0x745f6174
 80049a0:	20747365 	.word	0x20747365
 80049a4:	0000203d 	.word	0x0000203d
 80049a8:	00203f61 	.word	0x00203f61
 80049ac:	00207b75 	.word	0x00207b75
 80049b0:	0000207d 	.word	0x0000207d
 80049b4:	2a2a2a2a 	.word	0x2a2a2a2a
 80049b8:	7261742a 	.word	0x7261742a
 80049bc:	5f746567 	.word	0x5f746567
 80049c0:	696e6170 	.word	0x696e6170
 80049c4:	00002063 	.word	0x00002063
 80049c8:	3c207477 	.word	0x3c207477
 80049cc:	00000000 	.word	0x00000000
 80049d0:	0000203e 	.word	0x0000203e
 80049d4:	70616568 	.word	0x70616568
 80049d8:	61747320 	.word	0x61747320
 80049dc:	203a7472 	.word	0x203a7472
 80049e0:	00000000 	.word	0x00000000
 80049e4:	6e65202c 	.word	0x6e65202c
 80049e8:	00203a64 	.word	0x00203a64
 80049ec:	6973202c 	.word	0x6973202c
 80049f0:	203a657a 	.word	0x203a657a
 80049f4:	00000000 	.word	0x00000000
 80049f8:	2c424b20 	.word	0x2c424b20
 80049fc:	61747320 	.word	0x61747320
 8004a00:	75206b63 	.word	0x75206b63
 8004a04:	3a646573 	.word	0x3a646573
 8004a08:	00000020 	.word	0x00000020
 8004a0c:	00424b20 	.word	0x00424b20

08004a10 <chars.4166>:
 8004a10:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8004a20:	00000000                                ....

08004a24 <st_usbfs_v1_usb_driver>:
 8004a24:	0800132d 0800136d 080013dd 0800218d     -...m........!..
 8004a34:	080021f9 0800153d 08002301 080015bd     .!..=....#......
 8004a44:	0800164d 08001721 00000000 00000000     M...!...........
 8004a54:	00000000 04000200 06000000 202a2a2a     ............*** 
 8004a64:	6f636f63 6120736f 72657373 61662074     cocoos assert fa
 8004a74:	64656c69 00000020 00000030 0000002d     iled ...0...-...
 8004a84:	65764f28 6f6c6672 00002977 4f52445b     (Overflow)..[DRO
 8004a94:	44455050 0000005d 00000a0d 2d2d2d2d     PPED].......----
 8004aa4:	74616c70 6d726f66 7465735f 00007075     platform_setup..
 8004ab4:	20637472 6b617761 2e2e2e65 00000000     rtc awake.......
 8004ac4:	20637472 6b617761 6b6f2065 00000000     rtc awake ok....
 8004ad4:	3f6d6c61 00000020 74616c70 6d726f66     alm? ...platform
 8004ae4:	6174735f 745f7472 72656d69 00000000     _start_timer....
 8004af4:	2d2d2d2d 746f6f62 64616f6c 00007265     ----bootloader..
 8004b04:	5f627375 75746573 00000070 746f6f62     usb_setup...boot
 8004b14:	7261745f 5f746567 5f746567 69726573     _target_get_seri
 8004b24:	6e5f6c61 65626d75 00000072 5f627375     al_number...usb_
 8004b34:	5f746573 69726573 6e5f6c61 65626d75     set_serial_numbe
 8004b44:	00000072 64627375 6c6f7020 676e696c     r...usbd polling
 8004b54:	002e2e2e 74736572 69747261 2e2e676e     ....restarting..
 8004b64:	0000002e 656e6f64 00000000 74736572     ....done....rest
 8004b74:	20747261 6c6c6163 6b636162 00000000     art callback....
 8004b84:	206f6f74 20676962 00000000 00207461     too big ....at .
 8004b94:	2d2d2d2d 65736162 64616f6c 00207265     ----baseloader .
 8004ba4:	6564202c 00207473 7273202c 00002063     , dest ., src ..
 8004bb4:	656c202c 0000206e 662a202c 20636e75     , len .., *func 
 8004bc4:	00000000 20746f6e 6e756f66 00002064     ....not found ..
 8004bd4:	6c6f202c 70706164 00000020 6f62202c     , oldapp ..., bo
 8004be4:	656c746f 0000206e 74737973 76206d65     otlen ..system v
 8004bf4:	6f746365 61742072 20656c62 00000000     ector table ....
 8004c04:	65736162 64616f6c 70207265 69766572     baseloader previ
 8004c14:	6f207765 0000206b 6163202c 61206c6c     ew ok .., call a
 8004c24:	61757463 6162206c 6f6c6573 72656461     ctual baseloader
 8004c34:	002e2e2e 65736162 64616f6c 66207265     ....baseloader f
 8004c44:	656c6961 00002064 6166202c 00206c69     ailed .., fail .
 8004c54:	65736162 64616f6c 70207265 69766572     baseloader previ
 8004c64:	66207765 656c6961 00002064 00203e2d     ew failed ..-> .
 8004c74:	202a2a2a 4f525245 46203a52 6873616c     *** ERROR: Flash
 8004c84:	69616620 2064656c 00000000 2a2a2a2a      failed ....****
 8004c94:	52524520 203a524f 61766e49 2064696c      ERROR: Invalid 
 8004ca4:	73616c66 72772068 2c657469 74736420     flash write, dst
 8004cb4:	00000020                                 ...

08004cb8 <infoUf2File>:
 8004cb8:	20324655 746f6f42 64616f6c 76207265     UF2 Bootloader v
 8004cc8:	2e312e31 46532033 4d0a0d41 6c65646f     1.1.3 SFA..Model
 8004cd8:	5453203a 4232334d 5045554c 0d4c4c49     : STM32BLUEPILL.
 8004ce8:	616f420a 492d6472 53203a44 32334d54     .Board-ID: STM32
 8004cf8:	33303146 422d3843 5065756c 2d6c6c69     F103C8-BluePill-
 8004d08:	0a0d3076 00000000 6f662820 64656372     v0...... (forced
 8004d18:	00000029 2d2d2d2d 65736162 64616f6c     )...----baseload
 8004d28:	6d207265 2065646f 726f6628 29646563     er mode (forced)
 8004d38:	00000000 2d2d2d2d 746f6f62 64616f6c     ....----bootload
 8004d48:	6d207265 2065646f 726f6628 29646563     er mode (forced)
 8004d58:	00000000 2d2d2d2d 746f6f62 64616f6c     ....----bootload
 8004d68:	6d207265 2065646f 206f6e28 29707061     er mode (no app)
 8004d78:	00000000 2d2d2d2d 6c707061 74616369     ....----applicat
 8004d88:	206e6f69 65646f6d 00000000 746f6f62     ion mode....boot
 8004d98:	70706120 00000000 746f6f62 73616220      app....boot bas
 8004da8:	616f6c65 00726564 746f6f62 6f6f6220     eloader.boot boo
 8004db8:	616f6c74 00726564 20746573 74736572     tloader.set rest
 8004dc8:	20747261 6c6c6163 6b636162 00000020     art callback ...
 8004dd8:	20707061 73697865 00007374 20707061     app exists..app 
 8004de8:	7373696d 20676e69 00000000 00203d20     missing .... = .
 8004df8:	5f544553 00524441 00203e3e 202a2a2a     SET_ADR.>> .*** 
 8004e08:	4f525245 54203a52 6d206f6f 20796e61     ERROR: Too many 
 8004e18:	746e6f63 206c6f72 6c6c6163 6b636162     control callback
 8004e28:	00000073 202a2a2a 4f525245 54203a52     s...*** ERROR: T
 8004e38:	6d206f6f 20796e61 666e6f63 63206769     oo many config c
 8004e48:	626c6c61 736b6361 00000000              allbacks....

08004e54 <bos_descriptor>:
 8004e54:	00000f05 00006002 00000020              .....`.. ...

08004e60 <cdc_iface_assoc>:
 8004e60:	02010b08 06010202                       ........

08004e68 <cdcacm_functional_descriptors>:
 8004e68:	10002405 01240501 24040200 24050002     .$....$....$...$
 8004e78:	00020106                                ....

08004e7c <comm_endp>:
 8004e7c:	03840507 00ff0010 00000000 00000000     ................

08004e8c <comm_iface>:
 8004e8c:	00010409 01020201 004e7c07 004e6808     .........|N..hN.
 8004e9c:	00001308 00000000                       ........

08004ea4 <config>:
 8004ea4:	00000209 80000103 004fc4fa 00000008     ..........O.....

08004eb4 <data_endp>:
 8004eb4:	02030507 00010040 00000000 07000000     ....@...........
 8004ec4:	40028305 00000100 00000000 00000000     ...@............

08004ed4 <data_iface>:
 8004ed4:	00020409 00000a02 004eb408 00000008     ..........N.....
	...

08004eec <dev>:
 8004eec:	02100112 400102ef db421209 02010221     .......@..B.!...
 8004efc:	00000103 00202f20 70797420 00000020     .... / . typ ...
 8004f0c:	6572202c 00002071 6176202c 0000206c     , req .., val ..
 8004f1c:	6469202c 00002078 4547202c 45445f54     , idx .., GET_DE
 8004f2c:	00000053 5645445f 00000000 4746435f     S..._DEV...._CFG
 8004f3c:	00000000 5254535f 00000000 464e495f     ...._STR...._INF
 8004f4c:	00000000 504e455f 00000000 534f425f     ...._ENP...._BOS
 8004f5c:	00000000 4553202c 44415f54 20202052     ...., SET_ADR   
 8004f6c:	00000020 4553202c 46435f54 20202047      ..., SET_CFG   
 8004f7c:	00000020 0000002c 00207420 00206920      ...,... t . i .

08004f8c <hf2_endp>:
 8004f8c:	02020507 00000040 00000000 07000000     ....@...........
 8004f9c:	40028205 00000000 00000000 00000000     ...@............

08004fac <hf2_iface>:
 8004fac:	00000409 012aff02 004f8c09 00000008     ......*...O.....
	...

08004fc4 <interfaces>:
 8004fc4:	00000000 00000001 00000000 08004fac     .............O..
 8004fd4:	00000000 00000001 08004e60 08004e8c     ........`N...N..
 8004fe4:	00000000 00000001 00000000 08004ed4     .............N..
 8004ff4:	202a2a2a 4f525245 73203a52 615f7465     *** ERROR: set_a
 8005004:	65726767 65746167 6c61635f 6361626c     ggregate_callbac
 8005014:	6166206b 64656c69 00000000 61766544     k failed....Deva
 8005024:	6372616e 00007968 42504144 20746f6f     narchy..DAPBoot 
 8005034:	20554644 746f6f42 64616f6c 00007265     DFU Bootloader..
 8005044:	42504144 20746f6f 00554644 65756c42     DAPBoot DFU.Blue
 8005054:	6c695020 534d206c 00000043 65756c42      Pill MSC...Blue
 8005064:	6c695020 6553206c 6c616972 726f5020      Pill Serial Por
 8005074:	00000074 65756c42 6c695020 4f43206c     t...Blue Pill CO
 8005084:	00004d4d 65756c42 6c695020 4144206c     MM..Blue Pill DA
 8005094:	00004154 65756c42 6c695020 4648206c     TA..Blue Pill HF
 80050a4:	00000032 75736976 6c626c61 69706575     2...visualbluepi
 80050b4:	672e6c6c 75687469 6f692e62 00000000     ll.github.io....
 80050c4:	202a2a2a 5f627375 75746573 61662070     *** usb_setup fa
 80050d4:	64656c69 00000000 202a2a2a 75626577     iled....*** webu
 80050e4:	6e206273 7573746f 69207070 7865646e     sb notsupp index
 80050f4:	00000020 75626577 00006c72 202a2a2a      ...weburl..*** 
 8005104:	75626577 6e206273 7573746f 77207070     webusb notsupp w
 8005114:	65646e49 00002078                       Index ..

0800511c <webusb_platform_capability_descriptor>:
 800511c:	00051018 3408b638 47a009a9 76a0fd8b     ....8..4...G...v
 800512c:	65b61588 01220100 202a2a2a 75626577     ...e..".*** webu
 800513c:	735f6273 635f7465 69666e6f 61662067     sb_set_config fa
 800514c:	64656c69 00000000 202a2a2a 75626577     iled....*** webu
 800515c:	735f6273 70757465 69616620 0064656c     sb_setup failed.

0800516c <guid>:
 800516c:	00000092 00050100 00880001 00070000     ................
 800517c:	002a0000 00650044 00690076 00650063     ..*.D.e.v.i.c.e.
 800518c:	006e0049 00650074 00660072 00630061     I.n.t.e.r.f.a.c.
 800519c:	00470065 00490055 00730044 00500000     e.G.U.I.D.s...P.
 80051ac:	007b0000 00320030 00330036 00350062     ..{.0.2.6.3.b.5.
 80051bc:	00320031 0038002d 00630038 002d0062     1.2.-.8.8.c.b.-.
 80051cc:	00310034 00360033 0039002d 00310036     4.1.3.6.-.9.6.1.
 80051dc:	002d0033 00630035 00650038 00300031     3.-.5.c.8.e.1.0.
 80051ec:	00640039 00650038 00350066 0000007d     9.d.8.e.f.5.}...
 80051fc:	00000000                                ....

08005200 <microsoft_platform_capability_descriptor>:
 8005200:	0005101c d8dd60df 4cc74589 9d65d29c     .....`...E.L..e.
 8005210:	9f8a649e 06030000 002100b2 646e6977     .d........!.wind
 8005220:	00007365 696e6977 00000064 706e6977     es..winid...winp
 8005230:	00007072 656e6977 00000065 202a2a2a     rp..winee...*** 
 8005240:	756e6977 735f6273 635f7465 69666e6f     winusb_set_confi
 8005250:	61662067 64656c69 00000000 202a2a2a     g failed....*** 
 8005260:	756e6977 735f6273 70757465 69616620     winusb_setup fai
 8005270:	0064656c                                led.

08005274 <winusb_string_descriptor>:
 8005274:	004d0312 00460053 00310054 00300030     ..M.S.F.T.1.0.0.
 8005284:	00000021 202a2a2a 5f636463 75746573     !...*** cdc_setu
 8005294:	61662070 64656c69 00000000 6d6d6f63     p failed....comm
 80052a4:	00000000 202a2a2a 61636463 635f6d63     ....*** cdcacm_c
 80052b4:	72746e6f 6e206c6f 7573746f 6c207070     ontrol notsupp l
 80052c4:	5f656e69 69646f63 0020676e 202a2a2a     ine_coding .*** 
 80052d4:	61636463 735f6d63 635f7465 69666e6f     cdcacm_set_confi
 80052e4:	61662067 64656c69 00000000              g failed....

080052f0 <line_coding>:
 80052f0:	0001c200 00080000 202a2a2a 4f525245     ........*** ERRO
 8005300:	00203a52                                R: .

08005304 <bad_packet_message>:
 8005304:	20646162 6b636170 00007465 20326668     bad packet..hf2 
 8005314:	62203e3e 6e696e69 00006f66 20326668     >> bininfo..hf2 
 8005324:	20667562 206f6f74 6c616d73 0000006c     buf too small...
 8005334:	20326668 69203e3e 006f666e 74706d65     hf2 >> info.empt
 8005344:	66682079 6e692032 00006f66 20326668     y hf2 info..hf2 
 8005354:	73203e3e 74726174 00000000 20326668     >> start....hf2 
 8005364:	66203e3e 6873616c 00000000 20326668     >> flash....hf2 
 8005374:	61203e3e 00007070 20326668 62203e3e     >> app..hf2 >> b
 8005384:	00746f6f 20326668 72203e3e 00646165     oot.hf2 >> read.
 8005394:	20326668 75203e3e 6f6e6b6e 00206e77     hf2 >> unknown .
 80053a4:	21212120 00000020 20326668 66203e3e      !!! ...hf2 >> f
 80053b4:	6873616c 00000020 646e6966 63657620     lash ...find vec
 80053c4:	2e726f74 00002e2e 6e756f66 65762064     tor.....found ve
 80053d4:	726f7463 7061202c 00002070 6f62202c     ctor, app .., bo
 80053e4:	7320746f 20657a69 00000000 6162202c     ot size ...., ba
 80053f4:	73206573 20657a69 00000000 202a2a2a     se size ....*** 
 8005404:	4f525245 49203a52 6c61766e 61206469     ERROR: Invalid a
 8005414:	20726464 00000000 746f7277 6f622065     ddr ....wrote bo
 8005424:	6f6c746f 72656461 00000000 706d6f63     otloader....comp
 8005434:	20657261 746f6f62 64616f6c 2e2e7265     are bootloader..
 8005444:	0000002e 746f6f62 64616f6c 63207265     ....bootloader c
 8005454:	676e6168 00006465 79706f63 73616220     hanged..copy bas
 8005464:	616f6c65 20726564 00206f74 6973202c     eloader to ., si
 8005474:	0020657a 74736572 20747261 62206f74     ze .restart to b
 8005484:	6c657361 6564616f 00002072 6162202c     aseloader .., ba
 8005494:	656c6573 0000206e 746f6f62 64616f6c     selen ..bootload
 80054a4:	69207265 746e6564 6c616369 00000020     er identical ...
 80054b4:	202a2a2a 4f525245 63203a52 6b636568     *** ERROR: check
 80054c4:	61746144 657a6953 69616620 0064656c     DataSize failed.
 80054d4:	20326668 20746573 666e6f63 00006769     hf2 set config..
 80054e4:	73616c66 6c612068 20776f6c 00000000     flash allow ....
 80054f4:	206f7420 00000000 202a2a2a 5f326668      to ....*** hf2_
 8005504:	75746573 61662070 64656c69 00000000     setup failed....
 8005514:	20326668 00003c3c 20326668 00203c3c     hf2 <<..hf2 << .
 8005524:	202a2a2a 32627375 65735f31 6f635f74     *** usb21_set_co
 8005534:	6769666e 69616620 0064656c 202a2a2a     nfig failed.*** 
 8005544:	32627375 65735f31 20707574 6c696166     usb21_setup fail
 8005554:	00006465 202a2a2a 32627375 65645f31     ed..*** usb21_de
 8005564:	69726373 726f7470 206f6e20 20736f62     scriptor no bos 
 8005574:	00000000 00736f62                       ....bos.

Disassembly of section .text:

08007400 <application_start>:
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
        for(;;) {}
    }
}

extern "C" void application_start(void) {
 8007400:	b510      	push	{r4, lr}
	//  application_start() is always located at a fixed address (_text) so we can change the application easily.
	funcp_t *fp;

	//  Copy Application data section from ROM to RAM.
	volatile uint32_t *src = &_data_loadaddr;
	volatile uint32_t *dest = &_data;
 8007402:	4b17      	ldr	r3, [pc, #92]	; (8007460 <application_start+0x60>)
	volatile uint32_t *src = &_data_loadaddr;
 8007404:	4917      	ldr	r1, [pc, #92]	; (8007464 <application_start+0x64>)
	while (dest < &_edata) {
 8007406:	4a18      	ldr	r2, [pc, #96]	; (8007468 <application_start+0x68>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d204      	bcs.n	8007416 <application_start+0x16>
		*dest = *src;
 800740c:	f851 2b04 	ldr.w	r2, [r1], #4
 8007410:	f843 2b04 	str.w	r2, [r3], #4
	while (dest < &_edata) {
 8007414:	e7f7      	b.n	8007406 <application_start+0x6>
		src = src + 1;
		dest = dest + 1;
	}

	//  Init variables in Application BSS section to null.
	while (dest < &_ebss) { *dest++ = 0; }
 8007416:	4a15      	ldr	r2, [pc, #84]	; (800746c <application_start+0x6c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d203      	bcs.n	8007424 <application_start+0x24>
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	3304      	adds	r3, #4
 8007422:	e7f8      	b.n	8007416 <application_start+0x16>

	//  Call any init functions here.
	pre_main();
 8007424:	f001 f9ca 	bl	80087bc <_ZL8pre_mainv>
	
	//  Call C++ constructors for Application.
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8007428:	4c11      	ldr	r4, [pc, #68]	; (8007470 <application_start+0x70>)
 800742a:	4b12      	ldr	r3, [pc, #72]	; (8007474 <application_start+0x74>)
 800742c:	429c      	cmp	r4, r3
 800742e:	d203      	bcs.n	8007438 <application_start+0x38>
		(*fp)();
 8007430:	f854 3b04 	ldr.w	r3, [r4], #4
 8007434:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8007436:	e7f8      	b.n	800742a <application_start+0x2a>
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8007438:	4c0f      	ldr	r4, [pc, #60]	; (8007478 <application_start+0x78>)
 800743a:	4b10      	ldr	r3, [pc, #64]	; (800747c <application_start+0x7c>)
 800743c:	429c      	cmp	r4, r3
 800743e:	d203      	bcs.n	8007448 <application_start+0x48>
		(*fp)();
 8007440:	f854 3b04 	ldr.w	r3, [r4], #4
 8007444:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8007446:	e7f8      	b.n	800743a <application_start+0x3a>
	}

	//  Call the application's entry point.
	main();
 8007448:	f000 f81e 	bl	8007488 <main>

	//  Call C++ destructors.  Not used because we never return from main().
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 800744c:	4c0c      	ldr	r4, [pc, #48]	; (8007480 <application_start+0x80>)
 800744e:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <application_start+0x84>)
 8007450:	429c      	cmp	r4, r3
 8007452:	d203      	bcs.n	800745c <application_start+0x5c>
		(*fp)();
 8007454:	f854 3b04 	ldr.w	r3, [r4], #4
 8007458:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 800745a:	e7f8      	b.n	800744e <application_start+0x4e>
	}
}
 800745c:	bd10      	pop	{r4, pc}
 800745e:	bf00      	nop
 8007460:	20001000 	.word	0x20001000
 8007464:	0800b014 	.word	0x0800b014
 8007468:	20001008 	.word	0x20001008
 800746c:	20002218 	.word	0x20002218
 8007470:	0800b000 	.word	0x0800b000
 8007474:	0800b000 	.word	0x0800b000
 8007478:	0800b000 	.word	0x0800b000
 800747c:	0800b014 	.word	0x0800b014
 8007480:	0800b014 	.word	0x0800b014
 8007484:	0800b014 	.word	0x0800b014

08007488 <main>:
static void debug_dump(codal::STM32BluePill& bluepill, const char *msg);

//  Blue Pill constructor will generate debug messages, make sure that the target has been initialised.
STM32BluePill bluepill;

int main() {
 8007488:	b508      	push	{r3, lr}
    bluepill.init();
 800748a:	4c03      	ldr	r4, [pc, #12]	; (8007498 <main+0x10>)
 800748c:	4620      	mov	r0, r4
 800748e:	f001 fa9f 	bl	80089d0 <_ZN5codal13STM32BluePill4initEv>
    Blink_main(bluepill);
 8007492:	4620      	mov	r0, r4
 8007494:	f000 f85c 	bl	8007550 <_Z10Blink_mainRN5codal13STM32BluePillE>
 8007498:	20001008 	.word	0x20001008

0800749c <_ZN5codal14CodalComponent4initEv>:

        /**
          * Implement this function to receive a function call after the devices'
          * device model has been instantiated.
          */
        virtual int init() { return DEVICE_NOT_SUPPORTED; }
 800749c:	4800      	ldr	r0, [pc, #0]	; (80074a0 <_ZN5codal14CodalComponent4initEv+0x4>)
 800749e:	4770      	bx	lr
 80074a0:	fffffc16 	.word	0xfffffc16

080074a4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>:

        //  At t = 30 seconds, device should wakeup by alarm and restart as though t = 0.
    }
}

static void debug_dump(codal::STM32BluePill& bluepill, const char *msg) {
 80074a4:	b508      	push	{r3, lr}
    debug_print(msg);
 80074a6:	4608      	mov	r0, r1
 80074a8:	f7fb fad2 	bl	8002a50 <debug_print>
    debug_print(" t "); debug_print((size_t) (millis() / 1000)); 
 80074ac:	480a      	ldr	r0, [pc, #40]	; (80074d8 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc+0x34>)
 80074ae:	f7fb facf 	bl	8002a50 <debug_print>
 80074b2:	f7fb fc4f 	bl	8002d54 <millis>
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <_ZL10debug_dumpRN5codal13STM32BluePillEPKc+0x38>)
 80074b8:	fba3 3000 	umull	r3, r0, r3, r0
 80074bc:	0980      	lsrs	r0, r0, #6
 80074be:	f7fb fa3d 	bl	800293c <_Z11debug_printj>
    // debug_print(", ms "); debug_print((size_t) bluepill.timer.getTime()); 
    // debug_print(", us "); debug_print((size_t) bluepill.timer.getTimeUs()); 
    debug_print(", alm "); debug_print((size_t) platform_alarm_count()); 
 80074c2:	4807      	ldr	r0, [pc, #28]	; (80074e0 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc+0x3c>)
 80074c4:	f7fb fac4 	bl	8002a50 <debug_print>
 80074c8:	f7fb fc30 	bl	8002d2c <platform_alarm_count>
 80074cc:	f7fb fa36 	bl	800293c <_Z11debug_printj>
    // debug_print(", tick "); debug_print((size_t) platform_tick_count()); 
    debug_println(""); 
 80074d0:	4804      	ldr	r0, [pc, #16]	; (80074e4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc+0x40>)
 80074d2:	f7fb fa91 	bl	80029f8 <debug_println>
    ////debug_flush(); ////
}
 80074d6:	bd08      	pop	{r3, pc}
 80074d8:	0800aa80 	.word	0x0800aa80
 80074dc:	10624dd3 	.word	0x10624dd3
 80074e0:	0800aa84 	.word	0x0800aa84
 80074e4:	0800ac28 	.word	0x0800ac28

080074e8 <_Z41__static_initialization_and_destruction_0ii>:
 80074e8:	2801      	cmp	r0, #1
 80074ea:	d000      	beq.n	80074ee <_Z41__static_initialization_and_destruction_0ii+0x6>
 80074ec:	4770      	bx	lr
 80074ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074f2:	4299      	cmp	r1, r3
 80074f4:	d1fa      	bne.n	80074ec <_Z41__static_initialization_and_destruction_0ii+0x4>
 80074f6:	b510      	push	{r4, lr}
STM32BluePill bluepill;
 80074f8:	4c04      	ldr	r4, [pc, #16]	; (800750c <_Z41__static_initialization_and_destruction_0ii+0x24>)
 80074fa:	4620      	mov	r0, r4
 80074fc:	f001 faa8 	bl	8008a50 <_ZN5codal13STM32BluePillC1Ev>
 8007500:	4a03      	ldr	r2, [pc, #12]	; (8007510 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8007502:	4904      	ldr	r1, [pc, #16]	; (8007514 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8007504:	4620      	mov	r0, r4
 8007506:	f7f9 fb31 	bl	8000b6c <__aeabi_atexit>
}
 800750a:	bd10      	pop	{r4, pc}
 800750c:	20001008 	.word	0x20001008
 8007510:	20000180 	.word	0x20000180
 8007514:	080075c5 	.word	0x080075c5

08007518 <_ZN5codal14CodalComponentD1Ev>:

        /**
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
 8007518:	b510      	push	{r4, lr}
 800751a:	4604      	mov	r4, r0
        {
 800751c:	4b03      	ldr	r3, [pc, #12]	; (800752c <_ZN5codal14CodalComponentD1Ev+0x14>)
 800751e:	6003      	str	r3, [r0, #0]
            status = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	80c3      	strh	r3, [r0, #6]
            removeComponent();
 8007524:	f000 f94a 	bl	80077bc <_ZN5codal14CodalComponent15removeComponentEv>
        }
 8007528:	4620      	mov	r0, r4
 800752a:	bd10      	pop	{r4, pc}
 800752c:	0800aa44 	.word	0x0800aa44

08007530 <_ZN5codal14CodalComponentD0Ev>:
        virtual ~CodalComponent()
 8007530:	b510      	push	{r4, lr}
 8007532:	4604      	mov	r4, r0
        {
 8007534:	4b05      	ldr	r3, [pc, #20]	; (800754c <_ZN5codal14CodalComponentD0Ev+0x1c>)
 8007536:	6003      	str	r3, [r0, #0]
            status = 0;
 8007538:	2300      	movs	r3, #0
 800753a:	80c3      	strh	r3, [r0, #6]
            removeComponent();
 800753c:	f000 f93e 	bl	80077bc <_ZN5codal14CodalComponent15removeComponentEv>
        }
 8007540:	4620      	mov	r0, r4
 8007542:	f7fb fc03 	bl	8002d4c <_ZdlPv>
 8007546:	4620      	mov	r0, r4
 8007548:	bd10      	pop	{r4, pc}
 800754a:	bf00      	nop
 800754c:	0800aa44 	.word	0x0800aa44

08007550 <_Z10Blink_mainRN5codal13STM32BluePillE>:
void Blink_main(codal::STM32BluePill& bluepill) {
 8007550:	b570      	push	{r4, r5, r6, lr}
 8007552:	4605      	mov	r5, r0
    debug_dump(bluepill, "set led");
 8007554:	4915      	ldr	r1, [pc, #84]	; (80075ac <_Z10Blink_mainRN5codal13STM32BluePillE+0x5c>)
 8007556:	f7ff ffa5 	bl	80074a4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
	bluepill.io.led.setDigitalValue(0);
 800755a:	f505 6679 	add.w	r6, r5, #3984	; 0xf90
 800755e:	2100      	movs	r1, #0
 8007560:	4630      	mov	r0, r6
 8007562:	f000 ffc3 	bl	80084ec <_ZN5codal3_cm3Pin15setDigitalValueEi>
    debug_dump(bluepill, "target wait");
 8007566:	4912      	ldr	r1, [pc, #72]	; (80075b0 <_Z10Blink_mainRN5codal13STM32BluePillE+0x60>)
 8007568:	4628      	mov	r0, r5
 800756a:	f7ff ff9b 	bl	80074a4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
    target_wait_us(1000000);  //  Test the RTC.
 800756e:	4811      	ldr	r0, [pc, #68]	; (80075b4 <_Z10Blink_mainRN5codal13STM32BluePillE+0x64>)
 8007570:	f7f9 fa78 	bl	8000a64 <target_wait_us>
    debug_dump(bluepill, "sleep");
 8007574:	4910      	ldr	r1, [pc, #64]	; (80075b8 <_Z10Blink_mainRN5codal13STM32BluePillE+0x68>)
 8007576:	4628      	mov	r0, r5
 8007578:	f7ff ff94 	bl	80074a4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
     * @return STM32BLUEPILL_OK on success, STM32BLUEPILL_INVALID_PARAMETER milliseconds is less than zero.
     *
     */
    inline void STM32BluePill::sleep(uint32_t milliseconds)
    {
        fiber_sleep(milliseconds);
 800757c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007580:	f000 fc18 	bl	8007db4 <_ZN5codal11fiber_sleepEm>
    debug_dump(bluepill, "loop");
 8007584:	490d      	ldr	r1, [pc, #52]	; (80075bc <_Z10Blink_mainRN5codal13STM32BluePillE+0x6c>)
 8007586:	4628      	mov	r0, r5
 8007588:	f7ff ff8c 	bl	80074a4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
	int state = 1;
 800758c:	2401      	movs	r4, #1
		bluepill.io.led.setDigitalValue(state);
 800758e:	4621      	mov	r1, r4
 8007590:	4630      	mov	r0, r6
 8007592:	f000 ffab 	bl	80084ec <_ZN5codal3_cm3Pin15setDigitalValueEi>
        debug_dump(bluepill, "slp");
 8007596:	490a      	ldr	r1, [pc, #40]	; (80075c0 <_Z10Blink_mainRN5codal13STM32BluePillE+0x70>)
 8007598:	4628      	mov	r0, r5
 800759a:	f7ff ff83 	bl	80074a4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
 800759e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075a2:	f000 fc07 	bl	8007db4 <_ZN5codal11fiber_sleepEm>
        state = !state;
 80075a6:	f084 0401 	eor.w	r4, r4, #1
 80075aa:	e7f0      	b.n	800758e <_Z10Blink_mainRN5codal13STM32BluePillE+0x3e>
 80075ac:	0800aa58 	.word	0x0800aa58
 80075b0:	0800aa60 	.word	0x0800aa60
 80075b4:	000f4240 	.word	0x000f4240
 80075b8:	0800aa6c 	.word	0x0800aa6c
 80075bc:	0800aa74 	.word	0x0800aa74
 80075c0:	0800aa7c 	.word	0x0800aa7c

080075c4 <_ZN5codal13STM32BluePillD1Ev>:
    class STM32BluePill : public CodalComponent
 80075c4:	b510      	push	{r4, lr}
 80075c6:	4604      	mov	r4, r0
 80075c8:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <_ZN5codal13STM32BluePillD1Ev+0x3c>)
 80075ca:	6003      	str	r3, [r0, #0]
        /**
          * Class definition for DeviceSerial.
          *
          * Represents an instance of RawSerial which accepts codal device specific data types.
          */
        class Serial : public codal::Serial
 80075cc:	f241 0010 	movw	r0, #4112	; 0x1010
 80075d0:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <_ZN5codal13STM32BluePillD1Ev+0x40>)
 80075d2:	5023      	str	r3, [r4, r0]
 80075d4:	4420      	add	r0, r4
 80075d6:	f000 fd23 	bl	8008020 <_ZN5codal6SerialD1Ev>
 80075da:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80075de:	f000 fed5 	bl	800838c <_ZN5codal10MessageBusD1Ev>

namespace codal
{
    namespace _cm
    {
        class Timer : public codal::Timer
 80075e2:	4620      	mov	r0, r4
 80075e4:	4b08      	ldr	r3, [pc, #32]	; (8007608 <_ZN5codal13STM32BluePillD1Ev+0x44>)
 80075e6:	f840 3f08 	str.w	r3, [r0, #8]!
 80075ea:	f002 fc52 	bl	8009e92 <_ZN5codal5TimerD1Ev>
        {
 80075ee:	4b07      	ldr	r3, [pc, #28]	; (800760c <_ZN5codal13STM32BluePillD1Ev+0x48>)
 80075f0:	6023      	str	r3, [r4, #0]
            status = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	80e3      	strh	r3, [r4, #6]
            removeComponent();
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 f8e0 	bl	80077bc <_ZN5codal14CodalComponent15removeComponentEv>
 80075fc:	4620      	mov	r0, r4
 80075fe:	bd10      	pop	{r4, pc}
 8007600:	0800adb8 	.word	0x0800adb8
 8007604:	0800ab94 	.word	0x0800ab94
 8007608:	0800abf4 	.word	0x0800abf4
 800760c:	0800aa44 	.word	0x0800aa44

08007610 <_ZN5codal13STM32BluePillD0Ev>:
 8007610:	b510      	push	{r4, lr}
 8007612:	4604      	mov	r4, r0
 8007614:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <_ZN5codal13STM32BluePillD0Ev+0x44>)
 8007616:	6003      	str	r3, [r0, #0]
 8007618:	f241 0010 	movw	r0, #4112	; 0x1010
 800761c:	4b0e      	ldr	r3, [pc, #56]	; (8007658 <_ZN5codal13STM32BluePillD0Ev+0x48>)
 800761e:	5023      	str	r3, [r4, r0]
 8007620:	4420      	add	r0, r4
 8007622:	f000 fcfd 	bl	8008020 <_ZN5codal6SerialD1Ev>
 8007626:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800762a:	f000 feaf 	bl	800838c <_ZN5codal10MessageBusD1Ev>
 800762e:	4620      	mov	r0, r4
 8007630:	4b0a      	ldr	r3, [pc, #40]	; (800765c <_ZN5codal13STM32BluePillD0Ev+0x4c>)
 8007632:	f840 3f08 	str.w	r3, [r0, #8]!
 8007636:	f002 fc2c 	bl	8009e92 <_ZN5codal5TimerD1Ev>
        {
 800763a:	4b09      	ldr	r3, [pc, #36]	; (8007660 <_ZN5codal13STM32BluePillD0Ev+0x50>)
 800763c:	6023      	str	r3, [r4, #0]
            status = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	80e3      	strh	r3, [r4, #6]
            removeComponent();
 8007642:	4620      	mov	r0, r4
 8007644:	f000 f8ba 	bl	80077bc <_ZN5codal14CodalComponent15removeComponentEv>
 8007648:	4620      	mov	r0, r4
 800764a:	f7fb fb7f 	bl	8002d4c <_ZdlPv>
 800764e:	4620      	mov	r0, r4
 8007650:	bd10      	pop	{r4, pc}
 8007652:	bf00      	nop
 8007654:	0800adb8 	.word	0x0800adb8
 8007658:	0800ab94 	.word	0x0800ab94
 800765c:	0800abf4 	.word	0x0800abf4
 8007660:	0800aa44 	.word	0x0800aa44

08007664 <_Z41__static_initialization_and_destruction_0ii>:
  //  Log the character in hex e.g. '\r' becomes "[0x0d]"
  debug_print("[0x");
  debug_write((uint8_t) nibbleToHex[ch / 16]);
  debug_write((uint8_t) nibbleToHex[ch % 16]);
  debug_print("]");
}
 8007664:	2801      	cmp	r0, #1
 8007666:	d000      	beq.n	800766a <_Z41__static_initialization_and_destruction_0ii+0x6>
 8007668:	4770      	bx	lr
 800766a:	b508      	push	{r3, lr}
 800766c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007670:	4299      	cmp	r1, r3
 8007672:	d000      	beq.n	8007676 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8007674:	bd08      	pop	{r3, pc}
UARTInterface serialPort(UART_RX_PORT, UART_TX_PORT);  //  UART port for send/receive.
 8007676:	2204      	movs	r2, #4
 8007678:	2105      	movs	r1, #5
 800767a:	4802      	ldr	r0, [pc, #8]	; (8007684 <_Z41__static_initialization_and_destruction_0ii+0x20>)
 800767c:	f003 f898 	bl	800a7b0 <_ZN13UARTInterfaceC1Ejj>
}
 8007680:	e7f8      	b.n	8007674 <_Z41__static_initialization_and_destruction_0ii+0x10>
 8007682:	bf00      	nop
 8007684:	2000204c 	.word	0x2000204c

08007688 <_Z18component_callbackN5codal5EventE>:

/**
  * The periodic callback for all components.
  */
void component_callback(Event evt)
{
 8007688:	b530      	push	{r4, r5, lr}
 800768a:	b083      	sub	sp, #12
 800768c:	ab02      	add	r3, sp, #8
 800768e:	e903 0003 	stmdb	r3, {r0, r1}
    uint8_t i = 0;

    if(evt.value == DEVICE_COMPONENT_EVT_SYSTEM_TICK)
 8007692:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8007696:	2d01      	cmp	r5, #1
 8007698:	d004      	beq.n	80076a4 <_Z18component_callbackN5codal5EventE+0x1c>
    uint8_t i = 0;
 800769a:	2400      	movs	r4, #0

            i++;
        }
    }

    if(evt.value == DEVICE_SCHEDULER_EVT_IDLE)
 800769c:	2d02      	cmp	r5, #2
 800769e:	d016      	beq.n	80076ce <_Z18component_callbackN5codal5EventE+0x46>
                CodalComponent::components[i]->idleCallback();

            i++;
        }
    }
}
 80076a0:	b003      	add	sp, #12
 80076a2:	bd30      	pop	{r4, r5, pc}
    uint8_t i = 0;
 80076a4:	2400      	movs	r4, #0
 80076a6:	e001      	b.n	80076ac <_Z18component_callbackN5codal5EventE+0x24>
            i++;
 80076a8:	3401      	adds	r4, #1
 80076aa:	b2e4      	uxtb	r4, r4
        while(i < DEVICE_COMPONENT_COUNT)
 80076ac:	2c3b      	cmp	r4, #59	; 0x3b
 80076ae:	d8f5      	bhi.n	800769c <_Z18component_callbackN5codal5EventE+0x14>
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_SYSTEM_TICK)
 80076b0:	4b0e      	ldr	r3, [pc, #56]	; (80076ec <_Z18component_callbackN5codal5EventE+0x64>)
 80076b2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80076b6:	2800      	cmp	r0, #0
 80076b8:	d0f6      	beq.n	80076a8 <_Z18component_callbackN5codal5EventE+0x20>
 80076ba:	88c3      	ldrh	r3, [r0, #6]
 80076bc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80076c0:	d0f2      	beq.n	80076a8 <_Z18component_callbackN5codal5EventE+0x20>
                CodalComponent::components[i]->periodicCallback();
 80076c2:	6803      	ldr	r3, [r0, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	4798      	blx	r3
 80076c8:	e7ee      	b.n	80076a8 <_Z18component_callbackN5codal5EventE+0x20>
            i++;
 80076ca:	3401      	adds	r4, #1
 80076cc:	b2e4      	uxtb	r4, r4
        while(i < DEVICE_COMPONENT_COUNT)
 80076ce:	2c3b      	cmp	r4, #59	; 0x3b
 80076d0:	d8e6      	bhi.n	80076a0 <_Z18component_callbackN5codal5EventE+0x18>
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_IDLE_TICK)
 80076d2:	4b06      	ldr	r3, [pc, #24]	; (80076ec <_Z18component_callbackN5codal5EventE+0x64>)
 80076d4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80076d8:	2800      	cmp	r0, #0
 80076da:	d0f6      	beq.n	80076ca <_Z18component_callbackN5codal5EventE+0x42>
 80076dc:	88c3      	ldrh	r3, [r0, #6]
 80076de:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80076e2:	d0f2      	beq.n	80076ca <_Z18component_callbackN5codal5EventE+0x42>
                CodalComponent::components[i]->idleCallback();
 80076e4:	6803      	ldr	r3, [r0, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	4798      	blx	r3
 80076ea:	e7ee      	b.n	80076ca <_Z18component_callbackN5codal5EventE+0x42>
 80076ec:	20002050 	.word	0x20002050

080076f0 <_ZN5codal14CodalComponent12addComponentEv>:
/**
  * Adds the current CodalComponent instance to our array of components.
  */
void CodalComponent::addComponent()
{
    uint8_t i = 0;
 80076f0:	2300      	movs	r3, #0

    // iterate through our list until an empty space is found.
    while(i < DEVICE_COMPONENT_COUNT)
 80076f2:	2b3b      	cmp	r3, #59	; 0x3b
 80076f4:	d80a      	bhi.n	800770c <_ZN5codal14CodalComponent12addComponentEv+0x1c>
    {
        if(components[i] == NULL)
 80076f6:	4619      	mov	r1, r3
 80076f8:	4a2c      	ldr	r2, [pc, #176]	; (80077ac <_ZN5codal14CodalComponent12addComponentEv+0xbc>)
 80076fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80076fe:	b112      	cbz	r2, 8007706 <_ZN5codal14CodalComponent12addComponentEv+0x16>
        {
            components[i] = this;
            break;
        }

        i++;
 8007700:	3301      	adds	r3, #1
 8007702:	b2db      	uxtb	r3, r3
    while(i < DEVICE_COMPONENT_COUNT)
 8007704:	e7f5      	b.n	80076f2 <_ZN5codal14CodalComponent12addComponentEv+0x2>
            components[i] = this;
 8007706:	4b29      	ldr	r3, [pc, #164]	; (80077ac <_ZN5codal14CodalComponent12addComponentEv+0xbc>)
 8007708:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    }

    if(!(configuration & DEVICE_COMPONENT_LISTENERS_CONFIGURED) && EventModel::defaultEventBus)
 800770c:	4b28      	ldr	r3, [pc, #160]	; (80077b0 <_ZN5codal14CodalComponent12addComponentEv+0xc0>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	f013 0f01 	tst.w	r3, #1
 8007714:	d148      	bne.n	80077a8 <_ZN5codal14CodalComponent12addComponentEv+0xb8>
 8007716:	4b27      	ldr	r3, [pc, #156]	; (80077b4 <_ZN5codal14CodalComponent12addComponentEv+0xc4>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d044      	beq.n	80077a8 <_ZN5codal14CodalComponent12addComponentEv+0xb8>
{
 800771e:	b530      	push	{r4, r5, lr}
 8007720:	b083      	sub	sp, #12
    {
        int ret = system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK);
 8007722:	2201      	movs	r2, #1
 8007724:	2110      	movs	r1, #16
 8007726:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800772a:	f000 fcb3 	bl	8008094 <_ZN5codal27system_timer_event_every_usEmtt>

        if(ret == DEVICE_OK)
 800772e:	b108      	cbz	r0, 8007734 <_ZN5codal14CodalComponent12addComponentEv+0x44>
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);

            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
        }
    }
}
 8007730:	b003      	add	sp, #12
 8007732:	bd30      	pop	{r4, r5, pc}
            EventModel::defaultEventBus->listen(DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007734:	4b1f      	ldr	r3, [pc, #124]	; (80077b4 <_ZN5codal14CodalComponent12addComponentEv+0xc4>)
 8007736:	681d      	ldr	r5, [r3, #0]
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 8007738:	2020      	movs	r0, #32
 800773a:	f7fb fb03 	bl	8002d44 <_Znwj>
 800773e:	4604      	mov	r4, r0
 8007740:	23c0      	movs	r3, #192	; 0xc0
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	4b1c      	ldr	r3, [pc, #112]	; (80077b8 <_ZN5codal14CodalComponent12addComponentEv+0xc8>)
 8007746:	2201      	movs	r2, #1
 8007748:	2110      	movs	r1, #16
 800774a:	f002 f938 	bl	80099be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 800774e:	682b      	ldr	r3, [r5, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	4621      	mov	r1, r4
 8007754:	4628      	mov	r0, r5
 8007756:	4798      	blx	r3
 8007758:	b130      	cbz	r0, 8007768 <_ZN5codal14CodalComponent12addComponentEv+0x78>
                return DEVICE_OK;

            delete newListener;
 800775a:	b12c      	cbz	r4, 8007768 <_ZN5codal14CodalComponent12addComponentEv+0x78>
 800775c:	4620      	mov	r0, r4
 800775e:	f002 f942 	bl	80099e6 <_ZN5codal8ListenerD1Ev>
 8007762:	4620      	mov	r0, r4
 8007764:	f7fb faf2 	bl	8002d4c <_ZdlPv>
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007768:	4b12      	ldr	r3, [pc, #72]	; (80077b4 <_ZN5codal14CodalComponent12addComponentEv+0xc4>)
 800776a:	681d      	ldr	r5, [r3, #0]
            Listener *newListener = new Listener(id, value, handler, flags);
 800776c:	2020      	movs	r0, #32
 800776e:	f7fb fae9 	bl	8002d44 <_Znwj>
 8007772:	4604      	mov	r4, r0
 8007774:	23c0      	movs	r3, #192	; 0xc0
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <_ZN5codal14CodalComponent12addComponentEv+0xc8>)
 800777a:	2202      	movs	r2, #2
 800777c:	210f      	movs	r1, #15
 800777e:	f002 f91e 	bl	80099be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8007782:	682b      	ldr	r3, [r5, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	4621      	mov	r1, r4
 8007788:	4628      	mov	r0, r5
 800778a:	4798      	blx	r3
 800778c:	b130      	cbz	r0, 800779c <_ZN5codal14CodalComponent12addComponentEv+0xac>
            delete newListener;
 800778e:	b12c      	cbz	r4, 800779c <_ZN5codal14CodalComponent12addComponentEv+0xac>
 8007790:	4620      	mov	r0, r4
 8007792:	f002 f928 	bl	80099e6 <_ZN5codal8ListenerD1Ev>
 8007796:	4620      	mov	r0, r4
 8007798:	f7fb fad8 	bl	8002d4c <_ZdlPv>
            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
 800779c:	4a04      	ldr	r2, [pc, #16]	; (80077b0 <_ZN5codal14CodalComponent12addComponentEv+0xc0>)
 800779e:	7813      	ldrb	r3, [r2, #0]
 80077a0:	f043 0301 	orr.w	r3, r3, #1
 80077a4:	7013      	strb	r3, [r2, #0]
}
 80077a6:	e7c3      	b.n	8007730 <_ZN5codal14CodalComponent12addComponentEv+0x40>
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	20002050 	.word	0x20002050
 80077b0:	20002210 	.word	0x20002210
 80077b4:	20002170 	.word	0x20002170
 80077b8:	08007689 	.word	0x08007689

080077bc <_ZN5codal14CodalComponent15removeComponentEv>:
/**
  * Removes the current CodalComponent instance from our array of components.
  */
void CodalComponent::removeComponent()
{
    uint8_t i = 0;
 80077bc:	2300      	movs	r3, #0

    while(i < DEVICE_COMPONENT_COUNT)
 80077be:	2b3b      	cmp	r3, #59	; 0x3b
 80077c0:	d80d      	bhi.n	80077de <_ZN5codal14CodalComponent15removeComponentEv+0x22>
    {
        if(components[i] == this)
 80077c2:	4619      	mov	r1, r3
 80077c4:	4a06      	ldr	r2, [pc, #24]	; (80077e0 <_ZN5codal14CodalComponent15removeComponentEv+0x24>)
 80077c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80077ca:	4282      	cmp	r2, r0
 80077cc:	d002      	beq.n	80077d4 <_ZN5codal14CodalComponent15removeComponentEv+0x18>
        {
            components[i] = NULL;
            return;
        }

        i++;
 80077ce:	3301      	adds	r3, #1
 80077d0:	b2db      	uxtb	r3, r3
    while(i < DEVICE_COMPONENT_COUNT)
 80077d2:	e7f4      	b.n	80077be <_ZN5codal14CodalComponent15removeComponentEv+0x2>
            components[i] = NULL;
 80077d4:	4b02      	ldr	r3, [pc, #8]	; (80077e0 <_ZN5codal14CodalComponent15removeComponentEv+0x24>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            return;
 80077dc:	4770      	bx	lr
    }
}
 80077de:	4770      	bx	lr
 80077e0:	20002050 	.word	0x20002050

080077e4 <codal_dmesg_flush>:
{
    dmesg_flush_fn = fn;
}

void codal_dmesg_flush()
{
 80077e4:	b508      	push	{r3, lr}
    if (dmesg_flush_fn)
 80077e6:	4b02      	ldr	r3, [pc, #8]	; (80077f0 <codal_dmesg_flush+0xc>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	b103      	cbz	r3, 80077ee <codal_dmesg_flush+0xa>
        dmesg_flush_fn();
 80077ec:	4798      	blx	r3
}
 80077ee:	bd08      	pop	{r3, pc}
 80077f0:	20002140 	.word	0x20002140

080077f4 <_ZN5codal14scheduler_tickENS_5EventE>:
  * The timer callback, called from interrupt context once every SYSTEM_TICK_PERIOD_MS milliseconds.
  * This function checks to determine if any fibers blocked on the sleep queue need to be woken up
  * and made runnable.
  */
void codal::scheduler_tick(Event evt)
{
 80077f4:	b530      	push	{r4, r5, lr}
 80077f6:	b083      	sub	sp, #12
 80077f8:	ab02      	add	r3, sp, #8
 80077fa:	e903 0003 	stmdb	r3, {r0, r1}
    Fiber *f = sleepQueue;
 80077fe:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <_ZN5codal14scheduler_tickENS_5EventE+0x34>)
 8007800:	681c      	ldr	r4, [r3, #0]
 8007802:	e000      	b.n	8007806 <_ZN5codal14scheduler_tickENS_5EventE+0x12>
{
 8007804:	462c      	mov	r4, r5
#if !CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
    evt.timestamp /= 1000;
#endif

    // Check the sleep queue, and wake up any fibers as necessary.
    while (f != NULL)
 8007806:	b164      	cbz	r4, 8007822 <_ZN5codal14scheduler_tickENS_5EventE+0x2e>
    {
        t = f->next;
 8007808:	69a5      	ldr	r5, [r4, #24]

        if (evt.timestamp >= f->context)
 800780a:	68e3      	ldr	r3, [r4, #12]
 800780c:	9a01      	ldr	r2, [sp, #4]
 800780e:	429a      	cmp	r2, r3
 8007810:	d3f8      	bcc.n	8007804 <_ZN5codal14scheduler_tickENS_5EventE+0x10>
        {
            // Wakey wakey!
            dequeue_fiber(f);
 8007812:	4620      	mov	r0, r4
 8007814:	f002 f81f 	bl	8009856 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
            queue_fiber(f,&runQueue);
 8007818:	4904      	ldr	r1, [pc, #16]	; (800782c <_ZN5codal14scheduler_tickENS_5EventE+0x38>)
 800781a:	4620      	mov	r0, r4
 800781c:	f002 f804 	bl	8009828 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
 8007820:	e7f0      	b.n	8007804 <_ZN5codal14scheduler_tickENS_5EventE+0x10>
        }

        f = t;
    }
}
 8007822:	b003      	add	sp, #12
 8007824:	bd30      	pop	{r4, r5, pc}
 8007826:	bf00      	nop
 8007828:	2000214c 	.word	0x2000214c
 800782c:	20002154 	.word	0x20002154

08007830 <_ZN5codal15scheduler_eventENS_5EventE>:
  * and made runnable due to the event.
  *
  * @param evt the event that has just been raised on an instance of DeviceMessageBus.
  */
void codal::scheduler_event(Event evt)
{
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	b08c      	sub	sp, #48	; 0x30
 8007834:	ab02      	add	r3, sp, #8
 8007836:	e883 0003 	stmia.w	r3, {r0, r1}
    Fiber *f = waitQueue;
 800783a:	4b29      	ldr	r3, [pc, #164]	; (80078e0 <_ZN5codal15scheduler_eventENS_5EventE+0xb0>)
 800783c:	681c      	ldr	r4, [r3, #0]
    int notifyOneComplete = 0;

    // This should never happen.
    // It is however, safe to simply ignore any events provided, as if no messageBus if recorded,
    // no fibers are permitted to block on events.
    if (messageBus == NULL)
 800783e:	4b29      	ldr	r3, [pc, #164]	; (80078e4 <_ZN5codal15scheduler_eventENS_5EventE+0xb4>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d04a      	beq.n	80078dc <_ZN5codal15scheduler_eventENS_5EventE+0xac>
    int notifyOneComplete = 0;
 8007846:	2600      	movs	r6, #0
 8007848:	e01a      	b.n	8007880 <_ZN5codal15scheduler_eventENS_5EventE+0x50>
        // extract the event data this fiber is blocked on.
        uint16_t id = f->context & 0xFFFF;
        uint16_t value = (f->context & 0xFFFF0000) >> 16;

        // Special case for the NOTIFY_ONE channel...
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800784a:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800784e:	4282      	cmp	r2, r0
 8007850:	d121      	bne.n	8007896 <_ZN5codal15scheduler_eventENS_5EventE+0x66>
 8007852:	b11b      	cbz	r3, 800785c <_ZN5codal15scheduler_eventENS_5EventE+0x2c>
 8007854:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8007858:	4298      	cmp	r0, r3
 800785a:	d11c      	bne.n	8007896 <_ZN5codal15scheduler_eventENS_5EventE+0x66>
        {
            if (!notifyOneComplete)
 800785c:	b97e      	cbnz	r6, 800787e <_ZN5codal15scheduler_eventENS_5EventE+0x4e>
            {
                // Wakey wakey!
                dequeue_fiber(f);
 800785e:	4620      	mov	r0, r4
 8007860:	f001 fff9 	bl	8009856 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
                queue_fiber(f,&runQueue);
 8007864:	4920      	ldr	r1, [pc, #128]	; (80078e8 <_ZN5codal15scheduler_eventENS_5EventE+0xb8>)
 8007866:	4620      	mov	r0, r4
 8007868:	f001 ffde 	bl	8009828 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
                notifyOneComplete = 1;
 800786c:	2601      	movs	r6, #1
 800786e:	e006      	b.n	800787e <_ZN5codal15scheduler_eventENS_5EventE+0x4e>

        // Normal case.
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
        {
            // Wakey wakey!
            dequeue_fiber(f);
 8007870:	4620      	mov	r0, r4
 8007872:	f001 fff0 	bl	8009856 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
            queue_fiber(f,&runQueue);
 8007876:	491c      	ldr	r1, [pc, #112]	; (80078e8 <_ZN5codal15scheduler_eventENS_5EventE+0xb8>)
 8007878:	4620      	mov	r0, r4
 800787a:	f001 ffd5 	bl	8009828 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
                notifyOneComplete = 1;
 800787e:	462c      	mov	r4, r5
    while (f != NULL)
 8007880:	b19c      	cbz	r4, 80078aa <_ZN5codal15scheduler_eventENS_5EventE+0x7a>
        t = f->next;
 8007882:	69a5      	ldr	r5, [r4, #24]
        uint16_t id = f->context & 0xFFFF;
 8007884:	68e3      	ldr	r3, [r4, #12]
 8007886:	b29a      	uxth	r2, r3
        uint16_t value = (f->context & 0xFFFF0000) >> 16;
 8007888:	0c1b      	lsrs	r3, r3, #16
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800788a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800788e:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8007892:	4281      	cmp	r1, r0
 8007894:	d0d9      	beq.n	800784a <_ZN5codal15scheduler_eventENS_5EventE+0x1a>
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
 8007896:	b10a      	cbz	r2, 800789c <_ZN5codal15scheduler_eventENS_5EventE+0x6c>
 8007898:	4291      	cmp	r1, r2
 800789a:	d1f0      	bne.n	800787e <_ZN5codal15scheduler_eventENS_5EventE+0x4e>
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0e7      	beq.n	8007870 <_ZN5codal15scheduler_eventENS_5EventE+0x40>
 80078a0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d1ea      	bne.n	800787e <_ZN5codal15scheduler_eventENS_5EventE+0x4e>
 80078a8:	e7e2      	b.n	8007870 <_ZN5codal15scheduler_eventENS_5EventE+0x40>

        f = t;
    }

    // Unregister this event, as we've woken up all the fibers with this match.
    if (evt.source != DEVICE_ID_NOTIFY && evt.source != DEVICE_ID_NOTIFY_ONE)
 80078aa:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80078ae:	f2a1 33fe 	subw	r3, r1, #1022	; 0x3fe
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d911      	bls.n	80078dc <_ZN5codal15scheduler_eventENS_5EventE+0xac>
        messageBus->ignore(evt.source, evt.value, scheduler_event);
 80078b8:	4b0a      	ldr	r3, [pc, #40]	; (80078e4 <_ZN5codal15scheduler_eventENS_5EventE+0xb4>)
 80078ba:	681c      	ldr	r4, [r3, #0]
 80078bc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
        int ignore(int id, int value, void (*handler)(Event))
        {
            if (handler == NULL)
                return DEVICE_INVALID_PARAMETER;

            Listener listener(id, value, handler);
 80078c0:	2310      	movs	r3, #16
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	4b09      	ldr	r3, [pc, #36]	; (80078ec <_ZN5codal15scheduler_eventENS_5EventE+0xbc>)
 80078c6:	a804      	add	r0, sp, #16
 80078c8:	f002 f879 	bl	80099be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            remove(&listener);
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	a904      	add	r1, sp, #16
 80078d2:	4620      	mov	r0, r4
 80078d4:	4798      	blx	r3
            Listener listener(id, value, handler);
 80078d6:	a804      	add	r0, sp, #16
 80078d8:	f002 f885 	bl	80099e6 <_ZN5codal8ListenerD1Ev>
}
 80078dc:	b00c      	add	sp, #48	; 0x30
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	20002160 	.word	0x20002160
 80078e4:	20002148 	.word	0x20002148
 80078e8:	20002154 	.word	0x20002154
 80078ec:	08007831 	.word	0x08007831

080078f0 <_Z15getFiberContextv>:
{
 80078f0:	b538      	push	{r3, r4, r5, lr}
    target_disable_irq();
 80078f2:	f7f9 f923 	bl	8000b3c <target_disable_irq>
    if (fiberPool != NULL)
 80078f6:	4b13      	ldr	r3, [pc, #76]	; (8007944 <_Z15getFiberContextv+0x54>)
 80078f8:	681c      	ldr	r4, [r3, #0]
 80078fa:	b184      	cbz	r4, 800791e <_Z15getFiberContextv+0x2e>
        dequeue_fiber(f);
 80078fc:	4620      	mov	r0, r4
 80078fe:	f001 ffaa 	bl	8009856 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
    target_enable_irq();
 8007902:	f7f9 f919 	bl	8000b38 <target_enable_irq>
    f->flags = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	6123      	str	r3, [r4, #16]
    f->user_data = 0;
 800790a:	6223      	str	r3, [r4, #32]
    tcb_configure_stack_base(f->tcb, fiber_initial_stack_base());
 800790c:	6825      	ldr	r5, [r4, #0]
 800790e:	f7f9 f8c3 	bl	8000a98 <fiber_initial_stack_base>
 8007912:	4601      	mov	r1, r0
 8007914:	4628      	mov	r0, r5
 8007916:	f7f9 f91c 	bl	8000b52 <tcb_configure_stack_base>
}
 800791a:	4620      	mov	r0, r4
 800791c:	bd38      	pop	{r3, r4, r5, pc}
        f = new Fiber();
 800791e:	2024      	movs	r0, #36	; 0x24
 8007920:	f7fb fa10 	bl	8002d44 <_Znwj>
 8007924:	4604      	mov	r4, r0
 8007926:	2224      	movs	r2, #36	; 0x24
 8007928:	2100      	movs	r1, #0
 800792a:	f7fa ff13 	bl	8002754 <memset>
        if (f == NULL) {
 800792e:	b134      	cbz	r4, 800793e <_Z15getFiberContextv+0x4e>
        f->tcb = tcb_allocate();
 8007930:	f7f9 f906 	bl	8000b40 <tcb_allocate>
 8007934:	6020      	str	r0, [r4, #0]
        f->stack_bottom = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	6063      	str	r3, [r4, #4]
        f->stack_top = 0;
 800793a:	60a3      	str	r3, [r4, #8]
 800793c:	e7e1      	b.n	8007902 <_Z15getFiberContextv+0x12>
            target_enable_irq();
 800793e:	f7f9 f8fb 	bl	8000b38 <target_enable_irq>
            return NULL;
 8007942:	e7ea      	b.n	800791a <_Z15getFiberContextv+0x2a>
 8007944:	20002158 	.word	0x20002158

08007948 <_ZL10handle_fobv>:

static Fiber* handle_fob()
{
 8007948:	b510      	push	{r4, lr}
    Fiber *f = currentFiber;
 800794a:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <_ZL10handle_fobv+0x2c>)
 800794c:	681c      	ldr	r4, [r3, #0]

    // This is a blocking call, so if we're in a fork on block context,
    // it's time to spawn a new fiber...
    if (f->flags & DEVICE_FIBER_FLAG_FOB)
 800794e:	6923      	ldr	r3, [r4, #16]
 8007950:	f013 0f01 	tst.w	r3, #1
 8007954:	d101      	bne.n	800795a <_ZL10handle_fobv+0x12>
#endif
            f = forkedFiber;
        }
    }
    return f;
}
 8007956:	4620      	mov	r0, r4
 8007958:	bd10      	pop	{r4, pc}
        forkedFiber = getFiberContext();
 800795a:	f7ff ffc9 	bl	80078f0 <_Z15getFiberContextv>
 800795e:	4b06      	ldr	r3, [pc, #24]	; (8007978 <_ZL10handle_fobv+0x30>)
 8007960:	6018      	str	r0, [r3, #0]
        if (forkedFiber != NULL) {
 8007962:	2800      	cmp	r0, #0
 8007964:	d0f7      	beq.n	8007956 <_ZL10handle_fobv+0xe>
            forkedFiber->user_data = f->user_data;
 8007966:	6a23      	ldr	r3, [r4, #32]
 8007968:	6203      	str	r3, [r0, #32]
            f->user_data = NULL;
 800796a:	2300      	movs	r3, #0
 800796c:	6223      	str	r3, [r4, #32]
            f = forkedFiber;
 800796e:	4604      	mov	r4, r0
    return f;
 8007970:	e7f1      	b.n	8007956 <_ZL10handle_fobv+0xe>
 8007972:	bf00      	nop
 8007974:	20002144 	.word	0x20002144
 8007978:	20002150 	.word	0x20002150

0800797c <_ZN5codal23fiber_scheduler_runningEv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800797c:	4b04      	ldr	r3, [pc, #16]	; (8007990 <_ZN5codal23fiber_scheduler_runningEv+0x14>)
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	f013 0f01 	tst.w	r3, #1
 8007984:	d101      	bne.n	800798a <_ZN5codal23fiber_scheduler_runningEv+0xe>
    return 0;
 8007986:	2000      	movs	r0, #0
}
 8007988:	4770      	bx	lr
        return 1;
 800798a:	2001      	movs	r0, #1
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	20002211 	.word	0x20002211

08007994 <_ZN5codal14scheduler_initERNS_10EventModelE>:
{
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	4604      	mov	r4, r0
    if (fiber_scheduler_running())
 800799a:	f7ff ffef 	bl	800797c <_ZN5codal23fiber_scheduler_runningEv>
 800799e:	b108      	cbz	r0, 80079a4 <_ZN5codal14scheduler_initERNS_10EventModelE+0x10>
}
 80079a0:	b002      	add	sp, #8
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
    messageBus = &_messageBus;
 80079a4:	4d3a      	ldr	r5, [pc, #232]	; (8007a90 <_ZN5codal14scheduler_initERNS_10EventModelE+0xfc>)
 80079a6:	602c      	str	r4, [r5, #0]
    currentFiber = getFiberContext();
 80079a8:	f7ff ffa2 	bl	80078f0 <_Z15getFiberContextv>
 80079ac:	4b39      	ldr	r3, [pc, #228]	; (8007a94 <_ZN5codal14scheduler_initERNS_10EventModelE+0x100>)
 80079ae:	6018      	str	r0, [r3, #0]
    queue_fiber(currentFiber, &runQueue);
 80079b0:	4939      	ldr	r1, [pc, #228]	; (8007a98 <_ZN5codal14scheduler_initERNS_10EventModelE+0x104>)
 80079b2:	f001 ff39 	bl	8009828 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    idleFiber = getFiberContext();
 80079b6:	f7ff ff9b 	bl	80078f0 <_Z15getFiberContextv>
 80079ba:	4c38      	ldr	r4, [pc, #224]	; (8007a9c <_ZN5codal14scheduler_initERNS_10EventModelE+0x108>)
 80079bc:	6020      	str	r0, [r4, #0]
    tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 80079be:	6806      	ldr	r6, [r0, #0]
 80079c0:	f7f9 f86a 	bl	8000a98 <fiber_initial_stack_base>
 80079c4:	1f01      	subs	r1, r0, #4
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7f9 f8c1 	bl	8000b4e <tcb_configure_sp>
    tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	4934      	ldr	r1, [pc, #208]	; (8007aa0 <_ZN5codal14scheduler_initERNS_10EventModelE+0x10c>)
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	f7f9 f8ba 	bl	8000b4a <tcb_configure_lr>
    if (messageBus)
 80079d6:	682c      	ldr	r4, [r5, #0]
 80079d8:	2c00      	cmp	r4, #0
 80079da:	d053      	beq.n	8007a84 <_ZN5codal14scheduler_initERNS_10EventModelE+0xf0>
            Listener *newListener = new Listener(id, value, handler, flags);
 80079dc:	2020      	movs	r0, #32
 80079de:	f7fb f9b1 	bl	8002d44 <_Znwj>
 80079e2:	4605      	mov	r5, r0
 80079e4:	23c0      	movs	r3, #192	; 0xc0
 80079e6:	9300      	str	r3, [sp, #0]
 80079e8:	4b2e      	ldr	r3, [pc, #184]	; (8007aa4 <_ZN5codal14scheduler_initERNS_10EventModelE+0x110>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80079f0:	f001 ffe5 	bl	80099be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	4629      	mov	r1, r5
 80079fa:	4620      	mov	r0, r4
 80079fc:	4798      	blx	r3
 80079fe:	b130      	cbz	r0, 8007a0e <_ZN5codal14scheduler_initERNS_10EventModelE+0x7a>
            delete newListener;
 8007a00:	b12d      	cbz	r5, 8007a0e <_ZN5codal14scheduler_initERNS_10EventModelE+0x7a>
 8007a02:	4628      	mov	r0, r5
 8007a04:	f001 ffef 	bl	80099e6 <_ZN5codal8ListenerD1Ev>
 8007a08:	4628      	mov	r0, r5
 8007a0a:	f7fb f99f 	bl	8002d4c <_ZdlPv>
        messageBus->listen(DEVICE_ID_NOTIFY_ONE, DEVICE_EVT_ANY, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007a0e:	4b20      	ldr	r3, [pc, #128]	; (8007a90 <_ZN5codal14scheduler_initERNS_10EventModelE+0xfc>)
 8007a10:	681d      	ldr	r5, [r3, #0]
            Listener *newListener = new Listener(id, value, handler, flags);
 8007a12:	2020      	movs	r0, #32
 8007a14:	f7fb f996 	bl	8002d44 <_Znwj>
 8007a18:	4604      	mov	r4, r0
 8007a1a:	23c0      	movs	r3, #192	; 0xc0
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	4b21      	ldr	r3, [pc, #132]	; (8007aa4 <_ZN5codal14scheduler_initERNS_10EventModelE+0x110>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8007a26:	f001 ffca 	bl	80099be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8007a2a:	682b      	ldr	r3, [r5, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	4621      	mov	r1, r4
 8007a30:	4628      	mov	r0, r5
 8007a32:	4798      	blx	r3
 8007a34:	b130      	cbz	r0, 8007a44 <_ZN5codal14scheduler_initERNS_10EventModelE+0xb0>
            delete newListener;
 8007a36:	b12c      	cbz	r4, 8007a44 <_ZN5codal14scheduler_initERNS_10EventModelE+0xb0>
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f001 ffd4 	bl	80099e6 <_ZN5codal8ListenerD1Ev>
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f7fb f984 	bl	8002d4c <_ZdlPv>
        system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK);
 8007a44:	2201      	movs	r2, #1
 8007a46:	210f      	movs	r1, #15
 8007a48:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8007a4c:	f000 fb22 	bl	8008094 <_ZN5codal27system_timer_event_every_usEmtt>
        messageBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK, scheduler_tick, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007a50:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <_ZN5codal14scheduler_initERNS_10EventModelE+0xfc>)
 8007a52:	681d      	ldr	r5, [r3, #0]
            Listener *newListener = new Listener(id, value, handler, flags);
 8007a54:	2020      	movs	r0, #32
 8007a56:	f7fb f975 	bl	8002d44 <_Znwj>
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	23c0      	movs	r3, #192	; 0xc0
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	4b11      	ldr	r3, [pc, #68]	; (8007aa8 <_ZN5codal14scheduler_initERNS_10EventModelE+0x114>)
 8007a62:	2201      	movs	r2, #1
 8007a64:	210f      	movs	r1, #15
 8007a66:	f001 ffaa 	bl	80099be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8007a6a:	682b      	ldr	r3, [r5, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4628      	mov	r0, r5
 8007a72:	4798      	blx	r3
 8007a74:	b130      	cbz	r0, 8007a84 <_ZN5codal14scheduler_initERNS_10EventModelE+0xf0>
            delete newListener;
 8007a76:	b12c      	cbz	r4, 8007a84 <_ZN5codal14scheduler_initERNS_10EventModelE+0xf0>
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f001 ffb4 	bl	80099e6 <_ZN5codal8ListenerD1Ev>
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f7fb f964 	bl	8002d4c <_ZdlPv>
    fiber_flags |= DEVICE_SCHEDULER_RUNNING;
 8007a84:	4a09      	ldr	r2, [pc, #36]	; (8007aac <_ZN5codal14scheduler_initERNS_10EventModelE+0x118>)
 8007a86:	7813      	ldrb	r3, [r2, #0]
 8007a88:	f043 0301 	orr.w	r3, r3, #1
 8007a8c:	7013      	strb	r3, [r2, #0]
 8007a8e:	e787      	b.n	80079a0 <_ZN5codal14scheduler_initERNS_10EventModelE+0xc>
 8007a90:	20002148 	.word	0x20002148
 8007a94:	20002144 	.word	0x20002144
 8007a98:	20002154 	.word	0x20002154
 8007a9c:	2000215c 	.word	0x2000215c
 8007aa0:	08009913 	.word	0x08009913
 8007aa4:	08007831 	.word	0x08007831
 8007aa8:	080077f5 	.word	0x080077f5
 8007aac:	20002211 	.word	0x20002211

08007ab0 <_ZN5codal19fiber_wake_on_eventEtt>:
  * schedule();
  * @endcode
  */
int codal::fiber_wake_on_event(uint16_t id, uint16_t value)
{
    if (messageBus == NULL || !fiber_scheduler_running())
 8007ab0:	4b1f      	ldr	r3, [pc, #124]	; (8007b30 <_ZN5codal19fiber_wake_on_eventEtt+0x80>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d034      	beq.n	8007b22 <_ZN5codal19fiber_wake_on_eventEtt+0x72>
{
 8007ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aba:	b083      	sub	sp, #12
 8007abc:	460e      	mov	r6, r1
 8007abe:	4604      	mov	r4, r0
    if (messageBus == NULL || !fiber_scheduler_running())
 8007ac0:	f7ff ff5c 	bl	800797c <_ZN5codal23fiber_scheduler_runningEv>
 8007ac4:	b378      	cbz	r0, 8007b26 <_ZN5codal19fiber_wake_on_eventEtt+0x76>
        return DEVICE_NOT_SUPPORTED;

    Fiber *f = handle_fob();
 8007ac6:	f7ff ff3f 	bl	8007948 <_ZL10handle_fobv>
 8007aca:	4605      	mov	r5, r0

    // Encode the event data in the context field. It's handy having a 32 bit core. :-)
    f->context = (uint32_t)value << 16 | id;
 8007acc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8007ad0:	60c3      	str	r3, [r0, #12]

    // Remove ourselves from the run queue
    dequeue_fiber(f);
 8007ad2:	f001 fec0 	bl	8009856 <_ZN5codal13dequeue_fiberEPNS_5FiberE>

    // Add ourselves to the sleep queue. We maintain strict ordering here to reduce lookup times.
    queue_fiber(f, &waitQueue);
 8007ad6:	4917      	ldr	r1, [pc, #92]	; (8007b34 <_ZN5codal19fiber_wake_on_eventEtt+0x84>)
 8007ad8:	4628      	mov	r0, r5
 8007ada:	f001 fea5 	bl	8009828 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    // Register to receive this event, so we can wake up the fiber when it happens.
    // Special case for the notify channel, as we always stay registered for that.
    if (id != DEVICE_ID_NOTIFY && id != DEVICE_ID_NOTIFY_ONE)
 8007ade:	f2a4 33fe 	subw	r3, r4, #1022	; 0x3fe
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d920      	bls.n	8007b2a <_ZN5codal19fiber_wake_on_eventEtt+0x7a>
        messageBus->listen(id, value, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007ae8:	4b11      	ldr	r3, [pc, #68]	; (8007b30 <_ZN5codal19fiber_wake_on_eventEtt+0x80>)
 8007aea:	681f      	ldr	r7, [r3, #0]
            Listener *newListener = new Listener(id, value, handler, flags);
 8007aec:	2020      	movs	r0, #32
 8007aee:	f7fb f929 	bl	8002d44 <_Znwj>
 8007af2:	4605      	mov	r5, r0
 8007af4:	23c0      	movs	r3, #192	; 0xc0
 8007af6:	9300      	str	r3, [sp, #0]
 8007af8:	4b0f      	ldr	r3, [pc, #60]	; (8007b38 <_ZN5codal19fiber_wake_on_eventEtt+0x88>)
 8007afa:	4632      	mov	r2, r6
 8007afc:	4621      	mov	r1, r4
 8007afe:	f001 ff5e 	bl	80099be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	4629      	mov	r1, r5
 8007b08:	4638      	mov	r0, r7
 8007b0a:	4798      	blx	r3
 8007b0c:	b130      	cbz	r0, 8007b1c <_ZN5codal19fiber_wake_on_eventEtt+0x6c>
            delete newListener;
 8007b0e:	b12d      	cbz	r5, 8007b1c <_ZN5codal19fiber_wake_on_eventEtt+0x6c>
 8007b10:	4628      	mov	r0, r5
 8007b12:	f001 ff68 	bl	80099e6 <_ZN5codal8ListenerD1Ev>
 8007b16:	4628      	mov	r0, r5
 8007b18:	f7fb f918 	bl	8002d4c <_ZdlPv>

    return DEVICE_OK;
 8007b1c:	2000      	movs	r0, #0
}
 8007b1e:	b003      	add	sp, #12
 8007b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return DEVICE_NOT_SUPPORTED;
 8007b22:	4806      	ldr	r0, [pc, #24]	; (8007b3c <_ZN5codal19fiber_wake_on_eventEtt+0x8c>)
}
 8007b24:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 8007b26:	4805      	ldr	r0, [pc, #20]	; (8007b3c <_ZN5codal19fiber_wake_on_eventEtt+0x8c>)
 8007b28:	e7f9      	b.n	8007b1e <_ZN5codal19fiber_wake_on_eventEtt+0x6e>
    return DEVICE_OK;
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e7f7      	b.n	8007b1e <_ZN5codal19fiber_wake_on_eventEtt+0x6e>
 8007b2e:	bf00      	nop
 8007b30:	20002148 	.word	0x20002148
 8007b34:	20002160 	.word	0x20002160
 8007b38:	08007831 	.word	0x08007831
 8007b3c:	fffffc16 	.word	0xfffffc16

08007b40 <_Z14__create_fibermmmi>:
    release_fiber(pm);
}


Fiber *__create_fiber(uint32_t ep, uint32_t cp, uint32_t pm, int parameterised)
{
 8007b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // Validate our parameters.
    if (ep == 0 || cp == 0)
 8007b44:	b328      	cbz	r0, 8007b92 <_Z14__create_fibermmmi+0x52>
 8007b46:	4606      	mov	r6, r0
 8007b48:	b329      	cbz	r1, 8007b96 <_Z14__create_fibermmmi+0x56>
 8007b4a:	4698      	mov	r8, r3
 8007b4c:	4617      	mov	r7, r2
 8007b4e:	460d      	mov	r5, r1
        return NULL;

    // Allocate a TCB from the new fiber. This will come from the fiber pool if availiable,
    // else a new one will be allocated on the heap.
    Fiber *newFiber = getFiberContext();
 8007b50:	f7ff fece 	bl	80078f0 <_Z15getFiberContextv>

    // If we're out of memory, there's nothing we can do.
    if (newFiber == NULL)
 8007b54:	4604      	mov	r4, r0
 8007b56:	b1b8      	cbz	r0, 8007b88 <_Z14__create_fibermmmi+0x48>
        return NULL;

    tcb_configure_args(newFiber->tcb, ep, cp, pm);
 8007b58:	463b      	mov	r3, r7
 8007b5a:	462a      	mov	r2, r5
 8007b5c:	4631      	mov	r1, r6
 8007b5e:	6800      	ldr	r0, [r0, #0]
 8007b60:	f7f8 ffff 	bl	8000b62 <tcb_configure_args>
    tcb_configure_sp(newFiber->tcb, INITIAL_STACK_DEPTH);
 8007b64:	6825      	ldr	r5, [r4, #0]
 8007b66:	f7f8 ff97 	bl	8000a98 <fiber_initial_stack_base>
 8007b6a:	1f01      	subs	r1, r0, #4
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	f7f8 ffee 	bl	8000b4e <tcb_configure_sp>
    tcb_configure_lr(newFiber->tcb, parameterised ? (PROCESSOR_WORD_TYPE) &launch_new_fiber_param : (PROCESSOR_WORD_TYPE) &launch_new_fiber);
 8007b72:	6820      	ldr	r0, [r4, #0]
 8007b74:	f1b8 0f00 	cmp.w	r8, #0
 8007b78:	d009      	beq.n	8007b8e <_Z14__create_fibermmmi+0x4e>
 8007b7a:	4908      	ldr	r1, [pc, #32]	; (8007b9c <_Z14__create_fibermmmi+0x5c>)
 8007b7c:	f7f8 ffe5 	bl	8000b4a <tcb_configure_lr>

    // Add new fiber to the run queue.
    queue_fiber(newFiber, &runQueue);
 8007b80:	4907      	ldr	r1, [pc, #28]	; (8007ba0 <_Z14__create_fibermmmi+0x60>)
 8007b82:	4620      	mov	r0, r4
 8007b84:	f001 fe50 	bl	8009828 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    return newFiber;
}
 8007b88:	4620      	mov	r0, r4
 8007b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tcb_configure_lr(newFiber->tcb, parameterised ? (PROCESSOR_WORD_TYPE) &launch_new_fiber_param : (PROCESSOR_WORD_TYPE) &launch_new_fiber);
 8007b8e:	4905      	ldr	r1, [pc, #20]	; (8007ba4 <_Z14__create_fibermmmi+0x64>)
 8007b90:	e7f4      	b.n	8007b7c <_Z14__create_fibermmmi+0x3c>
        return NULL;
 8007b92:	2400      	movs	r4, #0
 8007b94:	e7f8      	b.n	8007b88 <_Z14__create_fibermmmi+0x48>
 8007b96:	2400      	movs	r4, #0
 8007b98:	e7f6      	b.n	8007b88 <_Z14__create_fibermmmi+0x48>
 8007b9a:	bf00      	nop
 8007b9c:	080098fb 	.word	0x080098fb
 8007ba0:	20002154 	.word	0x20002154
 8007ba4:	080098dd 	.word	0x080098dd

08007ba8 <_ZN5codal24scheduler_runqueue_emptyEv>:
  *
  * @return The number of fibers currently on the run queue
  */
int codal::scheduler_runqueue_empty()
{
    return (runQueue == NULL);
 8007ba8:	4b02      	ldr	r3, [pc, #8]	; (8007bb4 <_ZN5codal24scheduler_runqueue_emptyEv+0xc>)
 8007baa:	6818      	ldr	r0, [r3, #0]
}
 8007bac:	fab0 f080 	clz	r0, r0
 8007bb0:	0940      	lsrs	r0, r0, #5
 8007bb2:	4770      	bx	lr
 8007bb4:	20002154 	.word	0x20002154

08007bb8 <_ZN5codal4idleEv>:
/**
  * Set of tasks to perform when idle.
  * Service any background tasks that are required, and attempt a power efficient sleep.
  */
void codal::idle()
{
 8007bb8:	b500      	push	{lr}
 8007bba:	b083      	sub	sp, #12
    // Prevent an idle loop of death:
    // We will return to idle after processing any idle events that add anything
    // to our run queue, we use the DEVICE_SCHEDULER_IDLE flag to determine this
    // scenario.
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
 8007bbc:	4b0e      	ldr	r3, [pc, #56]	; (8007bf8 <_ZN5codal4idleEv+0x40>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	f013 0f02 	tst.w	r3, #2
 8007bc4:	d005      	beq.n	8007bd2 <_ZN5codal4idleEv+0x1a>
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
    }

    // If the above did create any useful work, enter power efficient sleep.
    if(scheduler_runqueue_empty())
 8007bc6:	f7ff ffef 	bl	8007ba8 <_ZN5codal24scheduler_runqueue_emptyEv>
 8007bca:	b968      	cbnz	r0, 8007be8 <_ZN5codal4idleEv+0x30>
        // because we enforce MESSAGE_BUS_LISTENER_IMMEDIATE for listeners placed
        // on the scheduler.
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
        target_wait_for_event();
    }
}
 8007bcc:	b003      	add	sp, #12
 8007bce:	f85d fb04 	ldr.w	pc, [sp], #4
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
 8007bd2:	f043 0302 	orr.w	r3, r3, #2
 8007bd6:	4a08      	ldr	r2, [pc, #32]	; (8007bf8 <_ZN5codal4idleEv+0x40>)
 8007bd8:	7013      	strb	r3, [r2, #0]
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
 8007bda:	2301      	movs	r3, #1
 8007bdc:	2202      	movs	r2, #2
 8007bde:	210f      	movs	r1, #15
 8007be0:	4668      	mov	r0, sp
 8007be2:	f002 faee 	bl	800a1c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
 8007be6:	e7ee      	b.n	8007bc6 <_ZN5codal4idleEv+0xe>
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
 8007be8:	4a03      	ldr	r2, [pc, #12]	; (8007bf8 <_ZN5codal4idleEv+0x40>)
 8007bea:	7813      	ldrb	r3, [r2, #0]
 8007bec:	f023 0302 	bic.w	r3, r3, #2
 8007bf0:	7013      	strb	r3, [r2, #0]
        target_wait_for_event();
 8007bf2:	f7f8 ff01 	bl	80009f8 <target_wait_for_event>
}
 8007bf6:	e7e9      	b.n	8007bcc <_ZN5codal4idleEv+0x14>
 8007bf8:	20002211 	.word	0x20002211

08007bfc <_ZN5codal8scheduleEv>:
{
 8007bfc:	b570      	push	{r4, r5, r6, lr}
    if (!fiber_scheduler_running())
 8007bfe:	f7ff febd 	bl	800797c <_ZN5codal23fiber_scheduler_runningEv>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	f000 80c6 	beq.w	8007d94 <_ZN5codal8scheduleEv+0x198>
    Fiber *oldFiber = currentFiber;
 8007c08:	4b64      	ldr	r3, [pc, #400]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007c0a:	681c      	ldr	r4, [r3, #0]
    if (currentFiber->flags & DEVICE_FIBER_FLAG_FOB)
 8007c0c:	6923      	ldr	r3, [r4, #16]
 8007c0e:	f013 0f01 	tst.w	r3, #1
 8007c12:	d14d      	bne.n	8007cb0 <_ZN5codal8scheduleEv+0xb4>
    if (runQueue == NULL)
 8007c14:	4a62      	ldr	r2, [pc, #392]	; (8007da0 <_ZN5codal8scheduleEv+0x1a4>)
 8007c16:	6812      	ldr	r2, [r2, #0]
 8007c18:	2a00      	cmp	r2, #0
 8007c1a:	f000 808a 	beq.w	8007d32 <_ZN5codal8scheduleEv+0x136>
    else if (currentFiber->queue == &runQueue)
 8007c1e:	6960      	ldr	r0, [r4, #20]
 8007c20:	495f      	ldr	r1, [pc, #380]	; (8007da0 <_ZN5codal8scheduleEv+0x1a4>)
 8007c22:	4288      	cmp	r0, r1
 8007c24:	f000 808a 	beq.w	8007d3c <_ZN5codal8scheduleEv+0x140>
        currentFiber = runQueue;
 8007c28:	495c      	ldr	r1, [pc, #368]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007c2a:	600a      	str	r2, [r1, #0]
    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 8007c2c:	4a5b      	ldr	r2, [pc, #364]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007c2e:	6811      	ldr	r1, [r2, #0]
 8007c30:	4a5c      	ldr	r2, [pc, #368]	; (8007da4 <_ZN5codal8scheduleEv+0x1a8>)
 8007c32:	6812      	ldr	r2, [r2, #0]
 8007c34:	4291      	cmp	r1, r2
 8007c36:	f000 8088 	beq.w	8007d4a <_ZN5codal8scheduleEv+0x14e>
    if (currentFiber != oldFiber)
 8007c3a:	4b58      	ldr	r3, [pc, #352]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	42a3      	cmp	r3, r4
 8007c40:	f000 80a8 	beq.w	8007d94 <_ZN5codal8scheduleEv+0x198>
        if (currentFiber == idleFiber)
 8007c44:	4a57      	ldr	r2, [pc, #348]	; (8007da4 <_ZN5codal8scheduleEv+0x1a8>)
 8007c46:	6812      	ldr	r2, [r2, #0]
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	f000 808d 	beq.w	8007d68 <_ZN5codal8scheduleEv+0x16c>
        if (oldFiber == idleFiber || oldFiber->queue == &fiberPool)
 8007c4e:	4b55      	ldr	r3, [pc, #340]	; (8007da4 <_ZN5codal8scheduleEv+0x1a8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	42a3      	cmp	r3, r4
 8007c54:	f000 8096 	beq.w	8007d84 <_ZN5codal8scheduleEv+0x188>
 8007c58:	6962      	ldr	r2, [r4, #20]
 8007c5a:	4b53      	ldr	r3, [pc, #332]	; (8007da8 <_ZN5codal8scheduleEv+0x1ac>)
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	f000 8091 	beq.w	8007d84 <_ZN5codal8scheduleEv+0x188>
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 8007c62:	6820      	ldr	r0, [r4, #0]
 8007c64:	f7f8 ff77 	bl	8000b56 <tcb_get_stack_base>
 8007c68:	4605      	mov	r5, r0
 8007c6a:	f7f8 ff76 	bl	8000b5a <get_current_sp>
 8007c6e:	1a2d      	subs	r5, r5, r0
    bufferSize = f->stack_top - f->stack_bottom;
 8007c70:	68a2      	ldr	r2, [r4, #8]
 8007c72:	6860      	ldr	r0, [r4, #4]
 8007c74:	1a12      	subs	r2, r2, r0
    if (bufferSize < stackDepth)
 8007c76:	4295      	cmp	r5, r2
 8007c78:	d911      	bls.n	8007c9e <_ZN5codal8scheduleEv+0xa2>
        Fiber *prevCurrFiber = currentFiber;
 8007c7a:	4a48      	ldr	r2, [pc, #288]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007c7c:	6816      	ldr	r6, [r2, #0]
        currentFiber = f;
 8007c7e:	6014      	str	r4, [r2, #0]
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 8007c80:	f105 0320 	add.w	r3, r5, #32
 8007c84:	f023 051f 	bic.w	r5, r3, #31
        if (f->stack_bottom != 0)
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	f040 8084 	bne.w	8007d96 <_ZN5codal8scheduleEv+0x19a>
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 8007c8e:	4628      	mov	r0, r5
 8007c90:	f000 f94a 	bl	8007f28 <device_malloc>
 8007c94:	6060      	str	r0, [r4, #4]
        f->stack_top = f->stack_bottom + bufferSize;
 8007c96:	4405      	add	r5, r0
 8007c98:	60a5      	str	r5, [r4, #8]
        currentFiber = prevCurrFiber;
 8007c9a:	4b40      	ldr	r3, [pc, #256]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007c9c:	601e      	str	r6, [r3, #0]
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
 8007c9e:	4b3f      	ldr	r3, [pc, #252]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	6893      	ldr	r3, [r2, #8]
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	68a1      	ldr	r1, [r4, #8]
 8007ca8:	6820      	ldr	r0, [r4, #0]
 8007caa:	f7f8 ff65 	bl	8000b78 <swap_context>
 8007cae:	e071      	b.n	8007d94 <_ZN5codal8scheduleEv+0x198>
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
 8007cb0:	f043 0302 	orr.w	r3, r3, #2
 8007cb4:	6123      	str	r3, [r4, #16]
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 8007cb6:	4d3d      	ldr	r5, [pc, #244]	; (8007dac <_ZN5codal8scheduleEv+0x1b0>)
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	691a      	ldr	r2, [r3, #16]
 8007cbc:	f042 0204 	orr.w	r2, r2, #4
 8007cc0:	611a      	str	r2, [r3, #16]
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 8007cc2:	681e      	ldr	r6, [r3, #0]
 8007cc4:	6820      	ldr	r0, [r4, #0]
 8007cc6:	f7f8 ff4a 	bl	8000b5e <tcb_get_sp>
 8007cca:	4601      	mov	r1, r0
 8007ccc:	4630      	mov	r0, r6
 8007cce:	f7f8 ff40 	bl	8000b52 <tcb_configure_stack_base>
        verify_stack_size(forkedFiber);
 8007cd2:	682d      	ldr	r5, [r5, #0]
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 8007cd4:	6828      	ldr	r0, [r5, #0]
 8007cd6:	f7f8 ff3e 	bl	8000b56 <tcb_get_stack_base>
 8007cda:	4604      	mov	r4, r0
 8007cdc:	f7f8 ff3d 	bl	8000b5a <get_current_sp>
 8007ce0:	1a24      	subs	r4, r4, r0
    bufferSize = f->stack_top - f->stack_bottom;
 8007ce2:	68aa      	ldr	r2, [r5, #8]
 8007ce4:	6868      	ldr	r0, [r5, #4]
 8007ce6:	1a12      	subs	r2, r2, r0
    if (bufferSize < stackDepth)
 8007ce8:	4294      	cmp	r4, r2
 8007cea:	d90f      	bls.n	8007d0c <_ZN5codal8scheduleEv+0x110>
        Fiber *prevCurrFiber = currentFiber;
 8007cec:	4a2b      	ldr	r2, [pc, #172]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007cee:	6816      	ldr	r6, [r2, #0]
        currentFiber = f;
 8007cf0:	6015      	str	r5, [r2, #0]
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 8007cf2:	f104 0320 	add.w	r3, r4, #32
 8007cf6:	f023 041f 	bic.w	r4, r3, #31
        if (f->stack_bottom != 0)
 8007cfa:	b9b8      	cbnz	r0, 8007d2c <_ZN5codal8scheduleEv+0x130>
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f000 f913 	bl	8007f28 <device_malloc>
 8007d02:	6068      	str	r0, [r5, #4]
        f->stack_top = f->stack_bottom + bufferSize;
 8007d04:	4404      	add	r4, r0
 8007d06:	60ac      	str	r4, [r5, #8]
        currentFiber = prevCurrFiber;
 8007d08:	4b24      	ldr	r3, [pc, #144]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007d0a:	601e      	str	r6, [r3, #0]
        save_context(forkedFiber->tcb, forkedFiber->stack_top);
 8007d0c:	4b27      	ldr	r3, [pc, #156]	; (8007dac <_ZN5codal8scheduleEv+0x1b0>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6899      	ldr	r1, [r3, #8]
 8007d12:	6818      	ldr	r0, [r3, #0]
 8007d14:	f7f8 ff71 	bl	8000bfa <save_context>
        if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 8007d18:	4b20      	ldr	r3, [pc, #128]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691a      	ldr	r2, [r3, #16]
 8007d1e:	f012 0f02 	tst.w	r2, #2
 8007d22:	d037      	beq.n	8007d94 <_ZN5codal8scheduleEv+0x198>
            restore_register_context(currentFiber->tcb);
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	f7f8 ffa2 	bl	8000c6e <restore_register_context>
 8007d2a:	e033      	b.n	8007d94 <_ZN5codal8scheduleEv+0x198>
            free((void *)f->stack_bottom);
 8007d2c:	f000 f926 	bl	8007f7c <device_free>
 8007d30:	e7e4      	b.n	8007cfc <_ZN5codal8scheduleEv+0x100>
        currentFiber = idleFiber;
 8007d32:	4a1c      	ldr	r2, [pc, #112]	; (8007da4 <_ZN5codal8scheduleEv+0x1a8>)
 8007d34:	6811      	ldr	r1, [r2, #0]
 8007d36:	4a19      	ldr	r2, [pc, #100]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007d38:	6011      	str	r1, [r2, #0]
 8007d3a:	e777      	b.n	8007c2c <_ZN5codal8scheduleEv+0x30>
        currentFiber = currentFiber->next == NULL ? runQueue : currentFiber->next;
 8007d3c:	69a1      	ldr	r1, [r4, #24]
 8007d3e:	b111      	cbz	r1, 8007d46 <_ZN5codal8scheduleEv+0x14a>
 8007d40:	4a16      	ldr	r2, [pc, #88]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007d42:	6011      	str	r1, [r2, #0]
 8007d44:	e772      	b.n	8007c2c <_ZN5codal8scheduleEv+0x30>
 8007d46:	4611      	mov	r1, r2
 8007d48:	e7fa      	b.n	8007d40 <_ZN5codal8scheduleEv+0x144>
    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 8007d4a:	f013 0f08 	tst.w	r3, #8
 8007d4e:	f43f af74 	beq.w	8007c3a <_ZN5codal8scheduleEv+0x3e>
        currentFiber = oldFiber;
 8007d52:	4b12      	ldr	r3, [pc, #72]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007d54:	601c      	str	r4, [r3, #0]
            idle();
 8007d56:	f7ff ff2f 	bl	8007bb8 <_ZN5codal4idleEv>
        while (runQueue == NULL);
 8007d5a:	4b11      	ldr	r3, [pc, #68]	; (8007da0 <_ZN5codal8scheduleEv+0x1a4>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0f9      	beq.n	8007d56 <_ZN5codal8scheduleEv+0x15a>
        currentFiber = runQueue;
 8007d62:	4a0e      	ldr	r2, [pc, #56]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	e768      	b.n	8007c3a <_ZN5codal8scheduleEv+0x3e>
            tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 8007d68:	6815      	ldr	r5, [r2, #0]
 8007d6a:	f7f8 fe95 	bl	8000a98 <fiber_initial_stack_base>
 8007d6e:	1f01      	subs	r1, r0, #4
 8007d70:	4628      	mov	r0, r5
 8007d72:	f7f8 feec 	bl	8000b4e <tcb_configure_sp>
            tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 8007d76:	4b0b      	ldr	r3, [pc, #44]	; (8007da4 <_ZN5codal8scheduleEv+0x1a8>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	490d      	ldr	r1, [pc, #52]	; (8007db0 <_ZN5codal8scheduleEv+0x1b4>)
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	f7f8 fee4 	bl	8000b4a <tcb_configure_lr>
 8007d82:	e764      	b.n	8007c4e <_ZN5codal8scheduleEv+0x52>
            swap_context(NULL, 0, currentFiber->tcb, currentFiber->stack_top);
 8007d84:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <_ZN5codal8scheduleEv+0x1a0>)
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	6893      	ldr	r3, [r2, #8]
 8007d8a:	6812      	ldr	r2, [r2, #0]
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	4608      	mov	r0, r1
 8007d90:	f7f8 fef2 	bl	8000b78 <swap_context>
}
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
            free((void *)f->stack_bottom);
 8007d96:	f000 f8f1 	bl	8007f7c <device_free>
 8007d9a:	e778      	b.n	8007c8e <_ZN5codal8scheduleEv+0x92>
 8007d9c:	20002144 	.word	0x20002144
 8007da0:	20002154 	.word	0x20002154
 8007da4:	2000215c 	.word	0x2000215c
 8007da8:	20002158 	.word	0x20002158
 8007dac:	20002150 	.word	0x20002150
 8007db0:	08009913 	.word	0x08009913

08007db4 <_ZN5codal11fiber_sleepEm>:
{
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4604      	mov	r4, r0
    if (!fiber_scheduler_running())
 8007db8:	f7ff fde0 	bl	800797c <_ZN5codal23fiber_scheduler_runningEv>
 8007dbc:	b180      	cbz	r0, 8007de0 <_ZN5codal11fiber_sleepEm+0x2c>
    Fiber *f = handle_fob();
 8007dbe:	f7ff fdc3 	bl	8007948 <_ZL10handle_fobv>
 8007dc2:	4605      	mov	r5, r0
    f->context = system_timer_current_time() + t;
 8007dc4:	f000 f95a 	bl	800807c <_ZN5codal25system_timer_current_timeEv>
 8007dc8:	4420      	add	r0, r4
 8007dca:	60e8      	str	r0, [r5, #12]
    dequeue_fiber(f);
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f001 fd42 	bl	8009856 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
    queue_fiber(f, &sleepQueue);
 8007dd2:	4905      	ldr	r1, [pc, #20]	; (8007de8 <_ZN5codal11fiber_sleepEm+0x34>)
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	f001 fd27 	bl	8009828 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    schedule();
 8007dda:	f7ff ff0f 	bl	8007bfc <_ZN5codal8scheduleEv>
}
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
        target_wait(t);
 8007de0:	4620      	mov	r0, r4
 8007de2:	f7f8 fe11 	bl	8000a08 <target_wait>
        return;
 8007de6:	e7fa      	b.n	8007dde <_ZN5codal11fiber_sleepEm+0x2a>
 8007de8:	2000214c 	.word	0x2000214c

08007dec <_ZN5codal13release_fiberEv>:
{
 8007dec:	b538      	push	{r3, r4, r5, lr}
    if (!fiber_scheduler_running())
 8007dee:	f7ff fdc5 	bl	800797c <_ZN5codal23fiber_scheduler_runningEv>
 8007df2:	b900      	cbnz	r0, 8007df6 <_ZN5codal13release_fiberEv+0xa>
}
 8007df4:	bd38      	pop	{r3, r4, r5, pc}
    dequeue_fiber(currentFiber);
 8007df6:	4d17      	ldr	r5, [pc, #92]	; (8007e54 <_ZN5codal13release_fiberEv+0x68>)
 8007df8:	6828      	ldr	r0, [r5, #0]
 8007dfa:	f001 fd2c 	bl	8009856 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
    queue_fiber(currentFiber, &fiberPool);
 8007dfe:	4c16      	ldr	r4, [pc, #88]	; (8007e58 <_ZN5codal13release_fiberEv+0x6c>)
 8007e00:	4621      	mov	r1, r4
 8007e02:	6828      	ldr	r0, [r5, #0]
 8007e04:	f001 fd10 	bl	8009828 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    for (Fiber *p = fiberPool; p; p = p->next) {
 8007e08:	6824      	ldr	r4, [r4, #0]
    int numFree = 0;
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	e001      	b.n	8007e12 <_ZN5codal13release_fiberEv+0x26>
        numFree++;
 8007e0e:	3201      	adds	r2, #1
    for (Fiber *p = fiberPool; p; p = p->next) {
 8007e10:	461c      	mov	r4, r3
 8007e12:	b184      	cbz	r4, 8007e36 <_ZN5codal13release_fiberEv+0x4a>
        if (!p->next && numFree > 3) {
 8007e14:	69a3      	ldr	r3, [r4, #24]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1f9      	bne.n	8007e0e <_ZN5codal13release_fiberEv+0x22>
 8007e1a:	2a03      	cmp	r2, #3
 8007e1c:	ddf7      	ble.n	8007e0e <_ZN5codal13release_fiberEv+0x22>
            p->prev->next = NULL;
 8007e1e:	69e3      	ldr	r3, [r4, #28]
 8007e20:	2200      	movs	r2, #0
 8007e22:	619a      	str	r2, [r3, #24]
            free(p->tcb);
 8007e24:	6820      	ldr	r0, [r4, #0]
 8007e26:	f000 f8a9 	bl	8007f7c <device_free>
            free((void *)p->stack_bottom);
 8007e2a:	6860      	ldr	r0, [r4, #4]
 8007e2c:	f000 f8a6 	bl	8007f7c <device_free>
            free(p);
 8007e30:	4620      	mov	r0, r4
 8007e32:	f000 f8a3 	bl	8007f7c <device_free>
    currentFiber->flags = 0;
 8007e36:	4b07      	ldr	r3, [pc, #28]	; (8007e54 <_ZN5codal13release_fiberEv+0x68>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	611a      	str	r2, [r3, #16]
    tcb_configure_stack_base(currentFiber->tcb, fiber_initial_stack_base());
 8007e3e:	681c      	ldr	r4, [r3, #0]
 8007e40:	f7f8 fe2a 	bl	8000a98 <fiber_initial_stack_base>
 8007e44:	4601      	mov	r1, r0
 8007e46:	4620      	mov	r0, r4
 8007e48:	f7f8 fe83 	bl	8000b52 <tcb_configure_stack_base>
    schedule();
 8007e4c:	f7ff fed6 	bl	8007bfc <_ZN5codal8scheduleEv>
 8007e50:	e7d0      	b.n	8007df4 <_ZN5codal13release_fiberEv+0x8>
 8007e52:	bf00      	nop
 8007e54:	20002144 	.word	0x20002144
 8007e58:	20002158 	.word	0x20002158

08007e5c <_ZN5codal6invokeEPFvPvES0_>:
    if (entry_fn == NULL)
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d03a      	beq.n	8007ed6 <_ZN5codal6invokeEPFvPvES0_+0x7a>
{
 8007e60:	b538      	push	{r3, r4, r5, lr}
 8007e62:	4605      	mov	r5, r0
 8007e64:	460c      	mov	r4, r1
    if (!fiber_scheduler_running())
 8007e66:	f7ff fd89 	bl	800797c <_ZN5codal23fiber_scheduler_runningEv>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	d036      	beq.n	8007edc <_ZN5codal6invokeEPFvPvES0_+0x80>
    if (currentFiber->flags & (DEVICE_FIBER_FLAG_FOB | DEVICE_FIBER_FLAG_PARENT | DEVICE_FIBER_FLAG_CHILD) || HAS_THREAD_USER_DATA)
 8007e6e:	4b1c      	ldr	r3, [pc, #112]	; (8007ee0 <_ZN5codal6invokeEPFvPvES0_+0x84>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	691a      	ldr	r2, [r3, #16]
 8007e74:	f012 0f07 	tst.w	r2, #7
 8007e78:	d101      	bne.n	8007e7e <_ZN5codal6invokeEPFvPvES0_+0x22>
 8007e7a:	6a1a      	ldr	r2, [r3, #32]
 8007e7c:	b132      	cbz	r2, 8007e8c <_ZN5codal6invokeEPFvPvES0_+0x30>
        create_fiber(entry_fn, param);
 8007e7e:	4a19      	ldr	r2, [pc, #100]	; (8007ee4 <_ZN5codal6invokeEPFvPvES0_+0x88>)
 8007e80:	4621      	mov	r1, r4
 8007e82:	4628      	mov	r0, r5
 8007e84:	f001 fd10 	bl	80098a8 <_ZN5codal12create_fiberEPFvPvES0_S2_>
        return DEVICE_OK;
 8007e88:	2000      	movs	r0, #0
}
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
    save_register_context(currentFiber->tcb);
 8007e8c:	6818      	ldr	r0, [r3, #0]
 8007e8e:	f7f8 fed6 	bl	8000c3e <save_register_context>
    if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 8007e92:	4b13      	ldr	r3, [pc, #76]	; (8007ee0 <_ZN5codal6invokeEPFvPvES0_+0x84>)
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	6913      	ldr	r3, [r2, #16]
 8007e98:	f013 0f02 	tst.w	r3, #2
 8007e9c:	d111      	bne.n	8007ec2 <_ZN5codal6invokeEPFvPvES0_+0x66>
    currentFiber->flags |= DEVICE_FIBER_FLAG_FOB;
 8007e9e:	f043 0301 	orr.w	r3, r3, #1
 8007ea2:	6113      	str	r3, [r2, #16]
    entry_fn(param);
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	47a8      	blx	r5
    currentFiber->user_data = NULL;
 8007ea8:	4b0d      	ldr	r3, [pc, #52]	; (8007ee0 <_ZN5codal6invokeEPFvPvES0_+0x84>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2200      	movs	r2, #0
 8007eae:	621a      	str	r2, [r3, #32]
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 8007eb0:	691a      	ldr	r2, [r3, #16]
 8007eb2:	f022 0101 	bic.w	r1, r2, #1
 8007eb6:	6119      	str	r1, [r3, #16]
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
 8007eb8:	f012 0f04 	tst.w	r2, #4
 8007ebc:	d106      	bne.n	8007ecc <_ZN5codal6invokeEPFvPvES0_+0x70>
    return DEVICE_OK;
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	e7e3      	b.n	8007e8a <_ZN5codal6invokeEPFvPvES0_+0x2e>
        currentFiber->flags &= ~DEVICE_FIBER_FLAG_PARENT;
 8007ec2:	f023 0303 	bic.w	r3, r3, #3
 8007ec6:	6113      	str	r3, [r2, #16]
        return DEVICE_OK;
 8007ec8:	2000      	movs	r0, #0
 8007eca:	e7de      	b.n	8007e8a <_ZN5codal6invokeEPFvPvES0_+0x2e>
        release_fiber(param);
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f001 fd0c 	bl	80098ea <_ZN5codal13release_fiberEPv>
    return DEVICE_OK;
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	e7d9      	b.n	8007e8a <_ZN5codal6invokeEPFvPvES0_+0x2e>
        return DEVICE_INVALID_PARAMETER;
 8007ed6:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 8007eda:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 8007edc:	4802      	ldr	r0, [pc, #8]	; (8007ee8 <_ZN5codal6invokeEPFvPvES0_+0x8c>)
 8007ede:	e7d4      	b.n	8007e8a <_ZN5codal6invokeEPFvPvES0_+0x2e>
 8007ee0:	20002144 	.word	0x20002144
 8007ee4:	080098eb 	.word	0x080098eb
 8007ee8:	fffffc16 	.word	0xfffffc16

08007eec <_Z18device_create_heapmm>:
  * code, and user code targetting the runtime. External code can choose to include this file, or
  * simply use the standard heap.
  */

int device_create_heap(PROCESSOR_WORD_TYPE start, PROCESSOR_WORD_TYPE end)
{
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	4606      	mov	r6, r0
 8007ef0:	460c      	mov	r4, r1
    HeapDefinition *h = &heap[heap_count];
 8007ef2:	4d0b      	ldr	r5, [pc, #44]	; (8007f20 <_Z18device_create_heapmm+0x34>)
 8007ef4:	782f      	ldrb	r7, [r5, #0]
    if (end <= start || end - start < DEVICE_HEAP_BLOCK_SIZE*2 || end % DEVICE_HEAP_BLOCK_SIZE != 0 || start % DEVICE_HEAP_BLOCK_SIZE != 0)
        return DEVICE_INVALID_PARAMETER;
#endif

    // Disable IRQ temporarily to ensure no race conditions!
    target_disable_irq();
 8007ef6:	f7f8 fe21 	bl	8000b3c <target_disable_irq>

    // Record the dimensions of this new heap
    h->heap_start = (PROCESSOR_WORD_TYPE *)start;
 8007efa:	4b0a      	ldr	r3, [pc, #40]	; (8007f24 <_Z18device_create_heapmm+0x38>)
 8007efc:	f843 6037 	str.w	r6, [r3, r7, lsl #3]
    h->heap_end = (PROCESSOR_WORD_TYPE *)end;
 8007f00:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f04:	605c      	str	r4, [r3, #4]

    // Initialise the heap as being completely empty and available for use.
    *h->heap_start = DEVICE_HEAP_BLOCK_FREE | (((PROCESSOR_WORD_TYPE) h->heap_end - (PROCESSOR_WORD_TYPE) h->heap_start) / DEVICE_HEAP_BLOCK_SIZE);
 8007f06:	1ba4      	subs	r4, r4, r6
 8007f08:	08a4      	lsrs	r4, r4, #2
 8007f0a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8007f0e:	6034      	str	r4, [r6, #0]

    heap_count++;
 8007f10:	782b      	ldrb	r3, [r5, #0]
 8007f12:	3301      	adds	r3, #1
 8007f14:	702b      	strb	r3, [r5, #0]

    // Enable Interrupts
    target_enable_irq();
 8007f16:	f7f8 fe0f 	bl	8000b38 <target_enable_irq>
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    device_heap_print();
#endif

    return DEVICE_OK;
}
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20002213 	.word	0x20002213
 8007f24:	20002164 	.word	0x20002164

08007f28 <device_malloc>:
  * @param size The amount of memory, in bytes, to allocate.
  *
  * @return A pointer to the allocated memory, or NULL if insufficient memory is available.
  */
void* device_malloc (size_t size)
{
 8007f28:	b510      	push	{r4, lr}
    static uint8_t initialised = 0;
    void *p;

    if (size <= 0)
 8007f2a:	b1d8      	cbz	r0, 8007f64 <device_malloc+0x3c>
 8007f2c:	4604      	mov	r4, r0
        return NULL;

    if (!initialised)
 8007f2e:	4b0e      	ldr	r3, [pc, #56]	; (8007f68 <device_malloc+0x40>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	b13b      	cbz	r3, 8007f44 <device_malloc+0x1c>
#endif
        initialised = 1;
    }

#if (DEVICE_MAXIMUM_HEAPS == 1)
    p = device_malloc_in(size, heap[0]);
 8007f34:	490d      	ldr	r1, [pc, #52]	; (8007f6c <device_malloc+0x44>)
 8007f36:	4620      	mov	r0, r4
 8007f38:	f001 fcf1 	bl	800991e <_Z16device_malloc_injR14HeapDefinition>
        if (p != NULL)
            break;
    }
#endif

    if (p != NULL)
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	b168      	cbz	r0, 8007f5c <device_malloc+0x34>
#if CONFIG_ENABLED(DEVICE_PANIC_HEAP_FULL)
    target_panic(DEVICE_OOM);
#endif

    return NULL;
}
 8007f40:	4620      	mov	r0, r4
 8007f42:	bd10      	pop	{r4, pc}
        heap_count = 0;
 8007f44:	4b0a      	ldr	r3, [pc, #40]	; (8007f70 <device_malloc+0x48>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	701a      	strb	r2, [r3, #0]
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 8007f4a:	490a      	ldr	r1, [pc, #40]	; (8007f74 <device_malloc+0x4c>)
 8007f4c:	4b0a      	ldr	r3, [pc, #40]	; (8007f78 <device_malloc+0x50>)
 8007f4e:	6818      	ldr	r0, [r3, #0]
 8007f50:	f7ff ffcc 	bl	8007eec <_Z18device_create_heapmm>
        initialised = 1;
 8007f54:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <device_malloc+0x40>)
 8007f56:	2201      	movs	r2, #1
 8007f58:	701a      	strb	r2, [r3, #0]
 8007f5a:	e7eb      	b.n	8007f34 <device_malloc+0xc>
    target_panic(DEVICE_OOM);
 8007f5c:	2014      	movs	r0, #20
 8007f5e:	f7f8 fd8b 	bl	8000a78 <target_panic>
    return NULL;
 8007f62:	e7ed      	b.n	8007f40 <device_malloc+0x18>
        return NULL;
 8007f64:	2400      	movs	r4, #0
 8007f66:	e7eb      	b.n	8007f40 <device_malloc+0x18>
 8007f68:	20002212 	.word	0x20002212
 8007f6c:	20002164 	.word	0x20002164
 8007f70:	20002213 	.word	0x20002213
 8007f74:	20004800 	.word	0x20004800
 8007f78:	20000044 	.word	0x20000044

08007f7c <device_free>:
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    if (heap_count > 0)
        DMESG("device_free:   %p\n", mem);
#endif
    // Sanity check.
    if (memory == NULL)
 8007f7c:	b1e0      	cbz	r0, 8007fb8 <device_free+0x3c>
{
 8007f7e:	b510      	push	{r4, lr}
 8007f80:	4604      	mov	r4, r0

#if (DEVICE_MAXIMUM_HEAPS > 1)
    for (i=0; i < heap_count; i++)
#endif
    {
        if(memory > heap[i].heap_start && memory < heap[i].heap_end)
 8007f82:	4b0e      	ldr	r3, [pc, #56]	; (8007fbc <device_free+0x40>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4283      	cmp	r3, r0
 8007f88:	d212      	bcs.n	8007fb0 <device_free+0x34>
 8007f8a:	4b0c      	ldr	r3, [pc, #48]	; (8007fbc <device_free+0x40>)
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	4283      	cmp	r3, r0
 8007f90:	d90e      	bls.n	8007fb0 <device_free+0x34>
        {
            // The memory block given is part of this heap, so we can simply
            // flag that this memory area is now free, and we're done.
            if (*cb == 0 || *cb & DEVICE_HEAP_BLOCK_FREE)
 8007f92:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	dd06      	ble.n	8007fa8 <device_free+0x2c>
                target_panic(DEVICE_HEAP_ERROR);
            *cb |= DEVICE_HEAP_BLOCK_FREE;
 8007f9a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007f9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fa2:	f844 3c04 	str.w	r3, [r4, #-4]
            return;
 8007fa6:	e006      	b.n	8007fb6 <device_free+0x3a>
                target_panic(DEVICE_HEAP_ERROR);
 8007fa8:	201e      	movs	r0, #30
 8007faa:	f7f8 fd65 	bl	8000a78 <target_panic>
 8007fae:	e7f4      	b.n	8007f9a <device_free+0x1e>
        }
    }

    // If we reach here, then the memory is not part of any registered heap.
    target_panic(DEVICE_HEAP_ERROR);
 8007fb0:	201e      	movs	r0, #30
 8007fb2:	f7f8 fd61 	bl	8000a78 <target_panic>
}
 8007fb6:	bd10      	pop	{r4, pc}
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	20002164 	.word	0x20002164

08007fc0 <_ZN5codal6SerialC1ERNS_3PinES2_hht>:
 *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/SerialBase.h
 *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/RawSerial.h
 *
 *       Buffers aren't allocated until the first send or receive respectively.
 */
Serial::Serial(Pin& tx, Pin& rx, uint8_t rxBufferSize, uint8_t txBufferSize, uint16_t id) : tx(tx), rx(rx)
 8007fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	4688      	mov	r8, r1
 8007fc8:	4617      	mov	r7, r2
 8007fca:	461e      	mov	r6, r3
        {
 8007fcc:	4b12      	ldr	r3, [pc, #72]	; (8008018 <_ZN5codal6SerialC1ERNS_3PinES2_hht+0x58>)
 8007fce:	6003      	str	r3, [r0, #0]
            this->id = 0;
 8007fd0:	2500      	movs	r5, #0
 8007fd2:	8085      	strh	r5, [r0, #4]
            this->status = 0;
 8007fd4:	80c5      	strh	r5, [r0, #6]
            addComponent();
 8007fd6:	f7ff fb8b 	bl	80076f0 <_ZN5codal14CodalComponent12addComponentEv>
 8007fda:	4b10      	ldr	r3, [pc, #64]	; (800801c <_ZN5codal6SerialC1ERNS_3PinES2_hht+0x5c>)
 8007fdc:	6023      	str	r3, [r4, #0]
 8007fde:	f8c4 8008 	str.w	r8, [r4, #8]
 8007fe2:	60e7      	str	r7, [r4, #12]
 8007fe4:	f104 0010 	add.w	r0, r4, #16
 8007fe8:	f002 f975 	bl	800a2d6 <_ZN5codal13ManagedStringC1Ev>
{
    this->id = id;
 8007fec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007ff0:	80a3      	strh	r3, [r4, #4]

    // + 1 so there is a usable buffer size, of the size the user requested.
    this->rxBuffSize = rxBufferSize + 1;
 8007ff2:	3601      	adds	r6, #1
 8007ff4:	7726      	strb	r6, [r4, #28]
    this->txBuffSize = txBufferSize + 1;
 8007ff6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    this->rxBuff = NULL;
 8008000:	61a5      	str	r5, [r4, #24]
    this->txBuff = NULL;
 8008002:	6265      	str	r5, [r4, #36]	; 0x24

    this->rxBuffHead = 0;
 8008004:	83e5      	strh	r5, [r4, #30]
    this->rxBuffTail = 0;
 8008006:	8425      	strh	r5, [r4, #32]

    this->txBuffHead = 0;
 8008008:	8565      	strh	r5, [r4, #42]	; 0x2a
    this->txBuffTail = 0;
 800800a:	85a5      	strh	r5, [r4, #44]	; 0x2c

    this->rxBuffHeadMatch = -1;
 800800c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008010:	6163      	str	r3, [r4, #20]
}
 8008012:	4620      	mov	r0, r4
 8008014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008018:	0800aa44 	.word	0x0800aa44
 800801c:	0800aa94 	.word	0x0800aa94

08008020 <_ZN5codal6SerialD1Ev>:
int Serial::txInUse()
{
    return (status & CODAL_SERIAL_TX_IN_USE);
}

Serial::~Serial()
 8008020:	b510      	push	{r4, lr}
 8008022:	4604      	mov	r4, r0
 8008024:	4b06      	ldr	r3, [pc, #24]	; (8008040 <_ZN5codal6SerialD1Ev+0x20>)
 8008026:	f840 3b10 	str.w	r3, [r0], #16
 800802a:	f002 f8f8 	bl	800a21e <_ZN5codal13ManagedStringD1Ev>
        {
 800802e:	4b05      	ldr	r3, [pc, #20]	; (8008044 <_ZN5codal6SerialD1Ev+0x24>)
 8008030:	6023      	str	r3, [r4, #0]
            status = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	80e3      	strh	r3, [r4, #6]
            removeComponent();
 8008036:	4620      	mov	r0, r4
 8008038:	f7ff fbc0 	bl	80077bc <_ZN5codal14CodalComponent15removeComponentEv>
{

 800803c:	4620      	mov	r0, r4
 800803e:	bd10      	pop	{r4, pc}
 8008040:	0800aa94 	.word	0x0800aa94
 8008044:	0800aa44 	.word	0x0800aa44

08008048 <_ZN5codal5TimerC1Ev>:
}

/**
 * Constructor for a generic system clock interface.
 */
Timer::Timer()
 8008048:	b510      	push	{r4, lr}
 800804a:	4604      	mov	r4, r0
 800804c:	4b09      	ldr	r3, [pc, #36]	; (8008074 <_ZN5codal5TimerC1Ev+0x2c>)
 800804e:	6003      	str	r3, [r0, #0]
{
    // Register ourselves as the defualt timer - most recent timer wins.
    system_timer = this;
 8008050:	4b09      	ldr	r3, [pc, #36]	; (8008078 <_ZN5codal5TimerC1Ev+0x30>)
 8008052:	6018      	str	r0, [r3, #0]

    // Create an empty event list of the default size.
    eventListSize = CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE;
 8008054:	230a      	movs	r3, #10
 8008056:	6183      	str	r3, [r0, #24]
    timerEventList = (TimerEvent *) malloc(sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
 8008058:	2078      	movs	r0, #120	; 0x78
 800805a:	f7ff ff65 	bl	8007f28 <device_malloc>
 800805e:	6120      	str	r0, [r4, #16]
      *
      * @param b the number of bytes to clear.
      */
    inline void *memclr(void *a, size_t b)
    {
        return memset(a,0,b);
 8008060:	2278      	movs	r2, #120	; 0x78
 8008062:	2100      	movs	r1, #0
 8008064:	f7fa fb76 	bl	8002754 <memset>
    memclr(timerEventList, sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
    nextTimerEvent = NULL;
 8008068:	2300      	movs	r3, #0
 800806a:	6163      	str	r3, [r4, #20]

    // Reset clock
    currentTime = 0;
 800806c:	6063      	str	r3, [r4, #4]
    currentTimeUs = 0;
 800806e:	60a3      	str	r3, [r4, #8]
}
 8008070:	4620      	mov	r0, r4
 8008072:	bd10      	pop	{r4, pc}
 8008074:	0800aacc 	.word	0x0800aacc
 8008078:	2000216c 	.word	0x2000216c

0800807c <_ZN5codal25system_timer_current_timeEv>:
  * Determines the time since the device was powered on.
  *
  * @return the current time since power on in milliseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time()
{
 800807c:	b508      	push	{r3, lr}
    if(system_timer == NULL)
 800807e:	4b04      	ldr	r3, [pc, #16]	; (8008090 <_ZN5codal25system_timer_current_timeEv+0x14>)
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	b110      	cbz	r0, 800808a <_ZN5codal25system_timer_current_timeEv+0xe>
        return 0;

    return system_timer->getTime();
 8008084:	f001 fe56 	bl	8009d34 <_ZN5codal5Timer7getTimeEv>
}
 8008088:	bd08      	pop	{r3, pc}
        return 0;
 800808a:	2000      	movs	r0, #0
 800808c:	e7fc      	b.n	8008088 <_ZN5codal25system_timer_current_timeEv+0xc>
 800808e:	bf00      	nop
 8008090:	2000216c 	.word	0x2000216c

08008094 <_ZN5codal27system_timer_event_every_usEmtt>:
  * @param the value to fire against the current system_timer id.
  *
  * @return DEVICE_OK or DEVICE_NOT_SUPPORTED if no timer has been registered.
  */
int codal::system_timer_event_every_us(CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
{
 8008094:	b510      	push	{r4, lr}
    if(system_timer == NULL)
 8008096:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <_ZN5codal27system_timer_event_every_usEmtt+0x1c>)
 8008098:	681c      	ldr	r4, [r3, #0]
 800809a:	b134      	cbz	r4, 80080aa <_ZN5codal27system_timer_event_every_usEmtt+0x16>
 800809c:	4613      	mov	r3, r2
 800809e:	460a      	mov	r2, r1
 80080a0:	4601      	mov	r1, r0
        return DEVICE_NOT_SUPPORTED;

    return system_timer->eventEveryUs(period, id, value);
 80080a2:	4620      	mov	r0, r4
 80080a4:	f001 fe89 	bl	8009dba <_ZN5codal5Timer12eventEveryUsEmtt>
}
 80080a8:	bd10      	pop	{r4, pc}
        return DEVICE_NOT_SUPPORTED;
 80080aa:	4802      	ldr	r0, [pc, #8]	; (80080b4 <_ZN5codal27system_timer_event_every_usEmtt+0x20>)
 80080ac:	e7fc      	b.n	80080a8 <_ZN5codal27system_timer_event_every_usEmtt+0x14>
 80080ae:	bf00      	nop
 80080b0:	2000216c 	.word	0x2000216c
 80080b4:	fffffc16 	.word	0xfffffc16

080080b8 <_ZN5codal10EventModel4sendENS_5EventE>:
        virtual int send(Event)
 80080b8:	b082      	sub	sp, #8
 80080ba:	ab02      	add	r3, sp, #8
 80080bc:	e903 0006 	stmdb	r3, {r1, r2}
        }
 80080c0:	4801      	ldr	r0, [pc, #4]	; (80080c8 <_ZN5codal10EventModel4sendENS_5EventE+0x10>)
 80080c2:	b002      	add	sp, #8
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	fffffc16 	.word	0xfffffc16

080080cc <_ZN5codal10EventModel3addEPNS_8ListenerE>:
        }
 80080cc:	4800      	ldr	r0, [pc, #0]	; (80080d0 <_ZN5codal10EventModel3addEPNS_8ListenerE+0x4>)
 80080ce:	4770      	bx	lr
 80080d0:	fffffc16 	.word	0xfffffc16

080080d4 <_ZN5codal10EventModel6removeEPNS_8ListenerE>:
        }
 80080d4:	4800      	ldr	r0, [pc, #0]	; (80080d8 <_ZN5codal10EventModel6removeEPNS_8ListenerE+0x4>)
 80080d6:	4770      	bx	lr
 80080d8:	fffffc16 	.word	0xfffffc16

080080dc <_ZN5codal10MessageBus3addEPNS_8ListenerE>:
{
    Listener *l, *p;
    int methodCallback;

    //handler can't be NULL!
    if (newListener == NULL)
 80080dc:	2900      	cmp	r1, #0
 80080de:	d06c      	beq.n	80081ba <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xde>
{
 80080e0:	b570      	push	{r4, r5, r6, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	460d      	mov	r5, r1
 80080e6:	4606      	mov	r6, r0
        return DEVICE_INVALID_PARAMETER;

    l = listeners;
 80080e8:	6944      	ldr	r4, [r0, #20]
 80080ea:	e005      	b.n	80080f8 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1c>

    // We always check the ID, VALUE and CB_METHOD fields.
    // If we have a callback to a method, check the cb_method class. Otherwise, the cb function point is sufficient.
    while (l != NULL)
    {
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 80080ec:	2100      	movs	r1, #0

        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 80080ee:	6822      	ldr	r2, [r4, #0]
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d00d      	beq.n	8008112 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x36>
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;

            return DEVICE_NOT_SUPPORTED;
        }

        l = l->next;
 80080f6:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 80080f8:	b314      	cbz	r4, 8008140 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x64>
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 80080fa:	88ab      	ldrh	r3, [r5, #4]
 80080fc:	f013 0f02 	tst.w	r3, #2
 8008100:	d0f4      	beq.n	80080ec <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x10>
 8008102:	88a3      	ldrh	r3, [r4, #4]
 8008104:	f013 0f02 	tst.w	r3, #2
 8008108:	d101      	bne.n	800810e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x32>
 800810a:	2100      	movs	r1, #0
 800810c:	e7ef      	b.n	80080ee <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x12>
 800810e:	2101      	movs	r1, #1
 8008110:	e7ed      	b.n	80080ee <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x12>
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 8008112:	b949      	cbnz	r1, 8008128 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x4c>
 8008114:	68a2      	ldr	r2, [r4, #8]
 8008116:	68ab      	ldr	r3, [r5, #8]
 8008118:	429a      	cmp	r2, r3
 800811a:	d1ec      	bne.n	80080f6 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1a>
            if(l->flags & MESSAGE_BUS_LISTENER_DELETING)
 800811c:	88a3      	ldrh	r3, [r4, #4]
 800811e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008122:	d108      	bne.n	8008136 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x5a>
            return DEVICE_NOT_SUPPORTED;
 8008124:	4826      	ldr	r0, [pc, #152]	; (80081c0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xe4>)
 8008126:	e03a      	b.n	800819e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc2>
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 8008128:	68a9      	ldr	r1, [r5, #8]
 800812a:	68a0      	ldr	r0, [r4, #8]
 800812c:	f002 f958 	bl	800a3e0 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 8008130:	2800      	cmp	r0, #0
 8008132:	d0e0      	beq.n	80080f6 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1a>
 8008134:	e7f2      	b.n	800811c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x40>
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;
 8008136:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800813a:	80a3      	strh	r3, [r4, #4]
            return DEVICE_NOT_SUPPORTED;
 800813c:	4820      	ldr	r0, [pc, #128]	; (80081c0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xe4>)
 800813e:	e02e      	b.n	800819e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc2>
    }

    // We have a valid, new event handler. Add it to the list.
    // if listeners is null - we can automatically add this listener to the list at the beginning...
    if (listeners == NULL)
 8008140:	6974      	ldr	r4, [r6, #20]
 8008142:	b114      	cbz	r4, 800814a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x6e>
    // We maintain an ordered list of listeners.
    // The chain is held stictly in increasing order of ID (first level), then value code (second level).
    // Find the correct point in the chain for this event.
    // Adding a listener is a rare occurance, so we just walk the list...

    p = listeners;
 8008144:	4622      	mov	r2, r4
    l = listeners;
 8008146:	4623      	mov	r3, r4
 8008148:	e00b      	b.n	8008162 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x86>
        listeners = newListener;
 800814a:	6175      	str	r5, [r6, #20]
        Event(DEVICE_ID_MESSAGE_BUS_LISTENER, newListener->id);
 800814c:	2301      	movs	r3, #1
 800814e:	882a      	ldrh	r2, [r5, #0]
 8008150:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8008154:	4668      	mov	r0, sp
 8008156:	f002 f834 	bl	800a1c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
        return DEVICE_OK;
 800815a:	2000      	movs	r0, #0
 800815c:	e01f      	b.n	800819e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc2>

    while (l != NULL && l->id < newListener->id)
    {
        p = l;
 800815e:	461a      	mov	r2, r3
        l = l->next;
 8008160:	69db      	ldr	r3, [r3, #28]
    while (l != NULL && l->id < newListener->id)
 8008162:	b11b      	cbz	r3, 800816c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x90>
 8008164:	8818      	ldrh	r0, [r3, #0]
 8008166:	8829      	ldrh	r1, [r5, #0]
 8008168:	4288      	cmp	r0, r1
 800816a:	d3f8      	bcc.n	800815e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x82>
    }

    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800816c:	b153      	cbz	r3, 8008184 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa8>
 800816e:	8818      	ldrh	r0, [r3, #0]
 8008170:	8829      	ldrh	r1, [r5, #0]
 8008172:	4288      	cmp	r0, r1
 8008174:	d106      	bne.n	8008184 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa8>
 8008176:	8858      	ldrh	r0, [r3, #2]
 8008178:	8869      	ldrh	r1, [r5, #2]
 800817a:	4288      	cmp	r0, r1
 800817c:	d202      	bcs.n	8008184 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa8>
    {
        p = l;
 800817e:	461a      	mov	r2, r3
        l = l->next;
 8008180:	69db      	ldr	r3, [r3, #28]
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 8008182:	e7f3      	b.n	800816c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x90>
    }

    //add at front of list
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 8008184:	4294      	cmp	r4, r2
 8008186:	d00c      	beq.n	80081a2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc6>
    }

    //add after p
    else
    {
        newListener->next = p->next;
 8008188:	69d3      	ldr	r3, [r2, #28]
 800818a:	61eb      	str	r3, [r5, #28]
        p->next = newListener;
 800818c:	61d5      	str	r5, [r2, #28]
    }

    Event(DEVICE_ID_MESSAGE_BUS_LISTENER, newListener->id);
 800818e:	2301      	movs	r3, #1
 8008190:	882a      	ldrh	r2, [r5, #0]
 8008192:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8008196:	a802      	add	r0, sp, #8
 8008198:	f002 f813 	bl	800a1c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
    return DEVICE_OK;
 800819c:	2000      	movs	r0, #0
}
 800819e:	b004      	add	sp, #16
 80081a0:	bd70      	pop	{r4, r5, r6, pc}
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 80081a2:	8829      	ldrh	r1, [r5, #0]
 80081a4:	8813      	ldrh	r3, [r2, #0]
 80081a6:	4299      	cmp	r1, r3
 80081a8:	d304      	bcc.n	80081b4 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd8>
 80081aa:	d1ed      	bne.n	8008188 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xac>
 80081ac:	8851      	ldrh	r1, [r2, #2]
 80081ae:	886b      	ldrh	r3, [r5, #2]
 80081b0:	4299      	cmp	r1, r3
 80081b2:	d9e9      	bls.n	8008188 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xac>
        newListener->next = p;
 80081b4:	61ea      	str	r2, [r5, #28]
        listeners = newListener;
 80081b6:	6175      	str	r5, [r6, #20]
 80081b8:	e7e9      	b.n	800818e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xb2>
        return DEVICE_INVALID_PARAMETER;
 80081ba:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 80081be:	4770      	bx	lr
 80081c0:	fffffc16 	.word	0xfffffc16

080081c4 <_ZN5codal10MessageBus7processERNS_5EventEb>:
{
 80081c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c6:	460d      	mov	r5, r1
 80081c8:	4617      	mov	r7, r2
    l = listeners;
 80081ca:	6944      	ldr	r4, [r0, #20]
    int complete = 1;
 80081cc:	2601      	movs	r6, #1
 80081ce:	e004      	b.n	80081da <_ZN5codal10MessageBus7processERNS_5EventEb+0x16>
                listenerUrgent = true;
 80081d0:	2301      	movs	r3, #1
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 80081d2:	42bb      	cmp	r3, r7
 80081d4:	d01b      	beq.n	800820e <_ZN5codal10MessageBus7processERNS_5EventEb+0x4a>
                complete = 0;
 80081d6:	2600      	movs	r6, #0
        l = l->next;
 80081d8:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 80081da:	2c00      	cmp	r4, #0
 80081dc:	d032      	beq.n	8008244 <_ZN5codal10MessageBus7processERNS_5EventEb+0x80>
        if((l->id == evt.source || l->id == DEVICE_ID_ANY) && (l->value == evt.value || l->value == DEVICE_EVT_ANY))
 80081de:	8823      	ldrh	r3, [r4, #0]
 80081e0:	882a      	ldrh	r2, [r5, #0]
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d001      	beq.n	80081ea <_ZN5codal10MessageBus7processERNS_5EventEb+0x26>
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1f6      	bne.n	80081d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
 80081ea:	8863      	ldrh	r3, [r4, #2]
 80081ec:	886a      	ldrh	r2, [r5, #2]
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d001      	beq.n	80081f6 <_ZN5codal10MessageBus7processERNS_5EventEb+0x32>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1f0      	bne.n	80081d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
            if (fiber_scheduler_running())
 80081f6:	f7ff fbc1 	bl	800797c <_ZN5codal23fiber_scheduler_runningEv>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d0e8      	beq.n	80081d0 <_ZN5codal10MessageBus7processERNS_5EventEb+0xc>
                listenerUrgent = (l->flags & MESSAGE_BUS_LISTENER_IMMEDIATE) == MESSAGE_BUS_LISTENER_IMMEDIATE;
 80081fe:	88a3      	ldrh	r3, [r4, #4]
 8008200:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008204:	2bc0      	cmp	r3, #192	; 0xc0
 8008206:	bf14      	ite	ne
 8008208:	2300      	movne	r3, #0
 800820a:	2301      	moveq	r3, #1
 800820c:	e7e1      	b.n	80081d2 <_ZN5codal10MessageBus7processERNS_5EventEb+0xe>
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 800820e:	88a2      	ldrh	r2, [r4, #4]
 8008210:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8008214:	d114      	bne.n	8008240 <_ZN5codal10MessageBus7processERNS_5EventEb+0x7c>
                l->evt = evt;
 8008216:	f104 0310 	add.w	r3, r4, #16
 800821a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800821e:	e883 0003 	stmia.w	r3, {r0, r1}
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 8008222:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008226:	d102      	bne.n	800822e <_ZN5codal10MessageBus7processERNS_5EventEb+0x6a>
 8008228:	f7ff fba8 	bl	800797c <_ZN5codal23fiber_scheduler_runningEv>
 800822c:	b918      	cbnz	r0, 8008236 <_ZN5codal10MessageBus7processERNS_5EventEb+0x72>
                    async_callback(l);
 800822e:	4620      	mov	r0, r4
 8008230:	f001 fe53 	bl	8009eda <_Z14async_callbackPv>
 8008234:	e7d0      	b.n	80081d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
                    invoke(async_callback, l);
 8008236:	4621      	mov	r1, r4
 8008238:	4803      	ldr	r0, [pc, #12]	; (8008248 <_ZN5codal10MessageBus7processERNS_5EventEb+0x84>)
 800823a:	f7ff fe0f 	bl	8007e5c <_ZN5codal6invokeEPFvPvES0_>
 800823e:	e7cb      	b.n	80081d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
                complete = 0;
 8008240:	2600      	movs	r6, #0
 8008242:	e7c9      	b.n	80081d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
}
 8008244:	4630      	mov	r0, r6
 8008246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008248:	08009edb 	.word	0x08009edb

0800824c <_ZN5codal19allocateNotifyEventEv>:
/**
 * Allocate a NOTIFY event code dynamicaly, for generally purpose condition synchronisation.
 */
uint16_t allocateNotifyEvent()
{
    return userNotifyId++;
 800824c:	4b02      	ldr	r3, [pc, #8]	; (8008258 <_ZN5codal19allocateNotifyEventEv+0xc>)
 800824e:	8818      	ldrh	r0, [r3, #0]
 8008250:	1c42      	adds	r2, r0, #1
 8008252:	801a      	strh	r2, [r3, #0]
}
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	20001004 	.word	0x20001004

0800825c <_ZN5codal22MemberFunctionCallbackC1INS_10MessageBusEEEPT_MS3_FvNS_5EventEE>:
      * @param object The object the callback method should be invooked on.
      *
      * @param method The method to invoke.
      */
    template <typename T>
    MemberFunctionCallback::MemberFunctionCallback(T* object, void (T::*method)(Event e))
 800825c:	b410      	push	{r4}
 800825e:	b083      	sub	sp, #12
 8008260:	4604      	mov	r4, r0
 8008262:	4668      	mov	r0, sp
 8008264:	e880 000c 	stmia.w	r0, {r2, r3}
    {
        this->object = object;
 8008268:	4622      	mov	r2, r4
 800826a:	f842 1b04 	str.w	r1, [r2], #4
 800826e:	2300      	movs	r3, #0
 8008270:	6093      	str	r3, [r2, #8]
 8008272:	60d3      	str	r3, [r2, #12]
        memclr(this->method, sizeof(this->method));
        memcpy(this->method, &method, sizeof(method));
 8008274:	4603      	mov	r3, r0
 8008276:	cb03      	ldmia	r3!, {r0, r1}
 8008278:	6060      	str	r0, [r4, #4]
 800827a:	6051      	str	r1, [r2, #4]
        invoke = &MemberFunctionCallback::methodCall<T>;
 800827c:	4b02      	ldr	r3, [pc, #8]	; (8008288 <_ZN5codal22MemberFunctionCallbackC1INS_10MessageBusEEEPT_MS3_FvNS_5EventEE+0x2c>)
 800827e:	6163      	str	r3, [r4, #20]
    }
 8008280:	4620      	mov	r0, r4
 8008282:	b003      	add	sp, #12
 8008284:	bc10      	pop	{r4}
 8008286:	4770      	bx	lr
 8008288:	08009ea5 	.word	0x08009ea5

0800828c <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt>:
      *
      * @return DEVICE_OK on success or DEVICE_INVALID_PARAMETER if the handler or object
      *         pointers are NULL.
      */
    template <typename T>
    int EventModel::listen(uint16_t id, uint16_t value, T* object, void (T::*handler)(Event), uint16_t flags)
 800828c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008290:	b085      	sub	sp, #20
 8008292:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
    {
        if (object == NULL || handler == NULL)
 8008296:	b3ab      	cbz	r3, 8008304 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x78>
 8008298:	461f      	mov	r7, r3
 800829a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800829c:	b35b      	cbz	r3, 80082f6 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x6a>
            return DEVICE_INVALID_PARAMETER;

        if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
 800829e:	290f      	cmp	r1, #15
 80082a0:	d102      	bne.n	80082a8 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x1c>
 80082a2:	f1b8 0fc0 	cmp.w	r8, #192	; 0xc0
 80082a6:	d130      	bne.n	800830a <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x7e>
 80082a8:	4691      	mov	r9, r2
 80082aa:	460c      	mov	r4, r1
 80082ac:	4605      	mov	r5, r0
            return DEVICE_INVALID_PARAMETER;

        Listener *newListener = new Listener(id, value, object, handler, flags);
 80082ae:	2020      	movs	r0, #32
 80082b0:	f7fa fd48 	bl	8002d44 <_Znwj>
 80082b4:	4606      	mov	r6, r0
 80082b6:	f8cd 8008 	str.w	r8, [sp, #8]
 80082ba:	ab0c      	add	r3, sp, #48	; 0x30
 80082bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80082c0:	e88d 0003 	stmia.w	sp, {r0, r1}
 80082c4:	463b      	mov	r3, r7
 80082c6:	464a      	mov	r2, r9
 80082c8:	4621      	mov	r1, r4
 80082ca:	4630      	mov	r0, r6
 80082cc:	f001 ff1d 	bl	800a10a <_ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt>

        if(add(newListener) == DEVICE_OK)
 80082d0:	682b      	ldr	r3, [r5, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	4631      	mov	r1, r6
 80082d6:	4628      	mov	r0, r5
 80082d8:	4798      	blx	r3
 80082da:	4603      	mov	r3, r0
 80082dc:	b138      	cbz	r0, 80082ee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
            return DEVICE_OK;

        delete newListener;
 80082de:	b1be      	cbz	r6, 8008310 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x84>
 80082e0:	4630      	mov	r0, r6
 80082e2:	f001 fb80 	bl	80099e6 <_ZN5codal8ListenerD1Ev>
 80082e6:	4630      	mov	r0, r6
 80082e8:	f7fa fd30 	bl	8002d4c <_ZdlPv>
        return DEVICE_NOT_SUPPORTED;
 80082ec:	4b09      	ldr	r3, [pc, #36]	; (8008314 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x88>)
    }
 80082ee:	4618      	mov	r0, r3
 80082f0:	b005      	add	sp, #20
 80082f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (object == NULL || handler == NULL)
 80082f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082f8:	f013 0f01 	tst.w	r3, #1
 80082fc:	d1cf      	bne.n	800829e <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x12>
            return DEVICE_INVALID_PARAMETER;
 80082fe:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8008302:	e7f4      	b.n	80082ee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
 8008304:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8008308:	e7f1      	b.n	80082ee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
            return DEVICE_INVALID_PARAMETER;
 800830a:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800830e:	e7ee      	b.n	80082ee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
        return DEVICE_NOT_SUPPORTED;
 8008310:	4b00      	ldr	r3, [pc, #0]	; (8008314 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x88>)
 8008312:	e7ec      	b.n	80082ee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
 8008314:	fffffc16 	.word	0xfffffc16

08008318 <_ZN5codal10MessageBusC1Ev>:
MessageBus::MessageBus()
 8008318:	b530      	push	{r4, r5, lr}
 800831a:	b087      	sub	sp, #28
 800831c:	4604      	mov	r4, r0
    class EventModel
 800831e:	4b16      	ldr	r3, [pc, #88]	; (8008378 <_ZN5codal10MessageBusC1Ev+0x60>)
 8008320:	f840 3b08 	str.w	r3, [r0], #8
        {
 8008324:	4b15      	ldr	r3, [pc, #84]	; (800837c <_ZN5codal10MessageBusC1Ev+0x64>)
 8008326:	60a3      	str	r3, [r4, #8]
            this->id = 0;
 8008328:	2500      	movs	r5, #0
 800832a:	81a5      	strh	r5, [r4, #12]
            this->status = 0;
 800832c:	81e5      	strh	r5, [r4, #14]
            addComponent();
 800832e:	f7ff f9df 	bl	80076f0 <_ZN5codal14CodalComponent12addComponentEv>
 8008332:	4b13      	ldr	r3, [pc, #76]	; (8008380 <_ZN5codal10MessageBusC1Ev+0x68>)
 8008334:	f103 0208 	add.w	r2, r3, #8
 8008338:	6022      	str	r2, [r4, #0]
 800833a:	3328      	adds	r3, #40	; 0x28
 800833c:	60a3      	str	r3, [r4, #8]
    this->listeners = NULL;
 800833e:	6165      	str	r5, [r4, #20]
    this->evt_queue_head = NULL;
 8008340:	61a5      	str	r5, [r4, #24]
    this->evt_queue_tail = NULL;
 8008342:	61e5      	str	r5, [r4, #28]
    this->queueLength = 0;
 8008344:	8465      	strh	r5, [r4, #34]	; 0x22
    listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, this, &MessageBus::idle, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8008346:	4b0f      	ldr	r3, [pc, #60]	; (8008384 <_ZN5codal10MessageBusC1Ev+0x6c>)
 8008348:	9304      	str	r3, [sp, #16]
 800834a:	9505      	str	r5, [sp, #20]
 800834c:	23c0      	movs	r3, #192	; 0xc0
 800834e:	9302      	str	r3, [sp, #8]
 8008350:	ab06      	add	r3, sp, #24
 8008352:	e913 0003 	ldmdb	r3, {r0, r1}
 8008356:	e88d 0003 	stmia.w	sp, {r0, r1}
 800835a:	4623      	mov	r3, r4
 800835c:	2202      	movs	r2, #2
 800835e:	210f      	movs	r1, #15
 8008360:	4620      	mov	r0, r4
 8008362:	f7ff ff93 	bl	800828c <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt>
    if(EventModel::defaultEventBus == NULL)
 8008366:	4b08      	ldr	r3, [pc, #32]	; (8008388 <_ZN5codal10MessageBusC1Ev+0x70>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	b113      	cbz	r3, 8008372 <_ZN5codal10MessageBusC1Ev+0x5a>
}
 800836c:	4620      	mov	r0, r4
 800836e:	b007      	add	sp, #28
 8008370:	bd30      	pop	{r4, r5, pc}
        EventModel::defaultEventBus = this;
 8008372:	4b05      	ldr	r3, [pc, #20]	; (8008388 <_ZN5codal10MessageBusC1Ev+0x70>)
 8008374:	601c      	str	r4, [r3, #0]
 8008376:	e7f9      	b.n	800836c <_ZN5codal10MessageBusC1Ev+0x54>
 8008378:	0800aae4 	.word	0x0800aae4
 800837c:	0800aa44 	.word	0x0800aa44
 8008380:	0800aaf0 	.word	0x0800aaf0
 8008384:	0800a0cd 	.word	0x0800a0cd
 8008388:	20002170 	.word	0x20002170

0800838c <_ZN5codal10MessageBusD1Ev>:
}

/**
  * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
  */
MessageBus::~MessageBus()
 800838c:	b530      	push	{r4, r5, lr}
 800838e:	b085      	sub	sp, #20
 8008390:	4604      	mov	r4, r0
 8008392:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <_ZN5codal10MessageBusD1Ev+0x44>)
 8008394:	f103 0208 	add.w	r2, r3, #8
 8008398:	6002      	str	r2, [r0, #0]
 800839a:	3328      	adds	r3, #40	; 0x28
 800839c:	6083      	str	r3, [r0, #8]
{
    ignore(DEVICE_ID_SCHEDULER, DEVICE_EVT_ANY, this, &MessageBus::idle);
 800839e:	4b0d      	ldr	r3, [pc, #52]	; (80083d4 <_ZN5codal10MessageBusD1Ev+0x48>)
 80083a0:	9302      	str	r3, [sp, #8]
 80083a2:	2500      	movs	r5, #0
 80083a4:	9503      	str	r5, [sp, #12]
 80083a6:	ab04      	add	r3, sp, #16
 80083a8:	e913 0003 	ldmdb	r3, {r0, r1}
 80083ac:	e88d 0003 	stmia.w	sp, {r0, r1}
 80083b0:	4623      	mov	r3, r4
 80083b2:	462a      	mov	r2, r5
 80083b4:	210f      	movs	r1, #15
 80083b6:	4620      	mov	r0, r4
 80083b8:	f001 fec6 	bl	800a148 <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE>
        {
 80083bc:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <_ZN5codal10MessageBusD1Ev+0x4c>)
 80083be:	60a3      	str	r3, [r4, #8]
            status = 0;
 80083c0:	81e5      	strh	r5, [r4, #14]
            removeComponent();
 80083c2:	f104 0008 	add.w	r0, r4, #8
 80083c6:	f7ff f9f9 	bl	80077bc <_ZN5codal14CodalComponent15removeComponentEv>
}
 80083ca:	4620      	mov	r0, r4
 80083cc:	b005      	add	sp, #20
 80083ce:	bd30      	pop	{r4, r5, pc}
 80083d0:	0800aaf0 	.word	0x0800aaf0
 80083d4:	0800a0cd 	.word	0x0800a0cd
 80083d8:	0800aa44 	.word	0x0800aa44

080083dc <_ZN5codal5Event4fireEv>:

/**
  * Fires this Event onto the Default EventModel, or a custom one!
  */
void Event::fire()
{
 80083dc:	b538      	push	{r3, r4, r5, lr}
    if(EventModel::defaultEventBus)
 80083de:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <_ZN5codal5Event4fireEv+0x18>)
 80083e0:	681c      	ldr	r4, [r3, #0]
 80083e2:	b12c      	cbz	r4, 80083f0 <_ZN5codal5Event4fireEv+0x14>
        EventModel::defaultEventBus->send(*this);
 80083e4:	6822      	ldr	r2, [r4, #0]
 80083e6:	6815      	ldr	r5, [r2, #0]
 80083e8:	e9d0 1200 	ldrd	r1, r2, [r0]
 80083ec:	4620      	mov	r0, r4
 80083ee:	47a8      	blx	r5
}
 80083f0:	bd38      	pop	{r3, r4, r5, pc}
 80083f2:	bf00      	nop
 80083f4:	20002170 	.word	0x20002170

080083f8 <_ZN5codal13ManagedString9initEmptyEv>:
  *
  * Configures this ManagedString to refer to the static EmptyString
  */
void ManagedString::initEmpty()
{
    ptr = EMPTY_DATA;
 80083f8:	4b01      	ldr	r3, [pc, #4]	; (8008400 <_ZN5codal13ManagedString9initEmptyEv+0x8>)
 80083fa:	6003      	str	r3, [r0, #0]
}
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	0800ab2c 	.word	0x0800ab2c

08008404 <_Z41__static_initialization_and_destruction_0ii>:
}

/**
  * Empty string constant literal
  */
ManagedString ManagedString::EmptyString(EMPTY_DATA);
 8008404:	2801      	cmp	r0, #1
 8008406:	d000      	beq.n	800840a <_Z41__static_initialization_and_destruction_0ii+0x6>
 8008408:	4770      	bx	lr
 800840a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800840e:	4299      	cmp	r1, r3
 8008410:	d1fa      	bne.n	8008408 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8008412:	b510      	push	{r4, lr}
 8008414:	4c05      	ldr	r4, [pc, #20]	; (800842c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8008416:	4906      	ldr	r1, [pc, #24]	; (8008430 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8008418:	4620      	mov	r0, r4
 800841a:	f001 ff1e 	bl	800a25a <_ZN5codal13ManagedStringC1EPNS_10StringDataE>
 800841e:	4a05      	ldr	r2, [pc, #20]	; (8008434 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8008420:	4905      	ldr	r1, [pc, #20]	; (8008438 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8008422:	4620      	mov	r0, r4
 8008424:	f7f8 fba2 	bl	8000b6c <__aeabi_atexit>
 8008428:	bd10      	pop	{r4, pc}
 800842a:	bf00      	nop
 800842c:	20002174 	.word	0x20002174
 8008430:	0800ab2c 	.word	0x0800ab2c
 8008434:	20000180 	.word	0x20000180
 8008438:	0800a21f 	.word	0x0800a21f

0800843c <_ZN5codal4itoaEiPc>:
int codal::itoa(int n, char *s)
{
    int i = 0;
    int positive = (n >= 0);

    if (s == NULL)
 800843c:	b369      	cbz	r1, 800849a <_ZN5codal4itoaEiPc+0x5e>
{
 800843e:	b570      	push	{r4, r5, r6, lr}
 8008440:	460d      	mov	r5, r1
        return DEVICE_INVALID_PARAMETER;

    // Record the sign of the number,
    // Ensure our working value is positive.
    if (positive)
 8008442:	2800      	cmp	r0, #0
 8008444:	db02      	blt.n	800844c <_ZN5codal4itoaEiPc+0x10>
        n = -n;
 8008446:	4241      	negs	r1, r0
 8008448:	2400      	movs	r4, #0
 800844a:	e002      	b.n	8008452 <_ZN5codal4itoaEiPc+0x16>
 800844c:	4601      	mov	r1, r0
 800844e:	e7fb      	b.n	8008448 <_ZN5codal4itoaEiPc+0xc>

    // Calculate each character, starting with the LSB.
    do {
         s[i++] = abs(n % 10) + '0';
 8008450:	4634      	mov	r4, r6
 8008452:	4a13      	ldr	r2, [pc, #76]	; (80084a0 <_ZN5codal4itoaEiPc+0x64>)
 8008454:	fb82 3201 	smull	r3, r2, r2, r1
 8008458:	17cb      	asrs	r3, r1, #31
 800845a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800845e:	461a      	mov	r2, r3
 8008460:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008464:	005e      	lsls	r6, r3, #1
 8008466:	1b8b      	subs	r3, r1, r6
 8008468:	2b00      	cmp	r3, #0
 800846a:	bfb8      	it	lt
 800846c:	425b      	neglt	r3, r3
 800846e:	1c66      	adds	r6, r4, #1
 8008470:	3330      	adds	r3, #48	; 0x30
 8008472:	552b      	strb	r3, [r5, r4]
    } while (abs(n /= 10) > 0);
 8008474:	4611      	mov	r1, r2
 8008476:	2a00      	cmp	r2, #0
 8008478:	bfb8      	it	lt
 800847a:	4252      	neglt	r2, r2
 800847c:	2a00      	cmp	r2, #0
 800847e:	dce7      	bgt.n	8008450 <_ZN5codal4itoaEiPc+0x14>

    // Add a negative sign as needed
    if (!positive)
 8008480:	2800      	cmp	r0, #0
 8008482:	db06      	blt.n	8008492 <_ZN5codal4itoaEiPc+0x56>
 8008484:	4628      	mov	r0, r5
        s[i++] = '-';

    // Terminate the string.
    s[i] = '\0';
 8008486:	2400      	movs	r4, #0
 8008488:	55ac      	strb	r4, [r5, r6]

    // Flip the order.
    string_reverse(s);
 800848a:	f001 ff84 	bl	800a396 <_ZN5codal14string_reverseEPc>

    return DEVICE_OK;
 800848e:	4620      	mov	r0, r4
}
 8008490:	bd70      	pop	{r4, r5, r6, pc}
        s[i++] = '-';
 8008492:	232d      	movs	r3, #45	; 0x2d
 8008494:	55ab      	strb	r3, [r5, r6]
 8008496:	1ca6      	adds	r6, r4, #2
 8008498:	e7f4      	b.n	8008484 <_ZN5codal4itoaEiPc+0x48>
        return DEVICE_INVALID_PARAMETER;
 800849a:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800849e:	4770      	bx	lr
 80084a0:	66666667 	.word	0x66666667

080084a4 <_ZN5codal3_cm3Pin14setAnalogValueEi>:
  *         if the given pin does not have analog capability.
  */
int Pin::setAnalogValue(int value)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 80084a4:	7903      	ldrb	r3, [r0, #4]
 80084a6:	f013 0f01 	tst.w	r3, #1
 80084aa:	d007      	beq.n	80084bc <_ZN5codal3_cm3Pin14setAnalogValueEi+0x18>
        return DEVICE_NOT_SUPPORTED;

    //sanitise the level value
    if(value < 0 || value > DEVICE_PIN_MAX_OUTPUT)
 80084ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80084b0:	d201      	bcs.n	80084b6 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x12>
#ifdef TODO
    //obtain use of the DynamicPwm instance, if it has changed / configure if we do not have one
    if(obtainAnalogChannel() == DEVICE_OK)
        return ((DynamicPwm *)pin)->write(level);
#endif  //  TODO
    return DEVICE_OK;
 80084b2:	2000      	movs	r0, #0
}
 80084b4:	4770      	bx	lr
        return DEVICE_INVALID_PARAMETER;
 80084b6:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 80084ba:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 80084bc:	4800      	ldr	r0, [pc, #0]	; (80084c0 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x1c>)
 80084be:	4770      	bx	lr
 80084c0:	fffffc16 	.word	0xfffffc16

080084c4 <_ZN5codal3_cm3Pin9isTouchedEv>:
  * @endcode
  */
int Pin::isTouched()
{
    return DEVICE_NOT_SUPPORTED;
}
 80084c4:	4800      	ldr	r0, [pc, #0]	; (80084c8 <_ZN5codal3_cm3Pin9isTouchedEv+0x4>)
 80084c6:	4770      	bx	lr
 80084c8:	fffffc16 	.word	0xfffffc16

080084cc <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv>:
        return DEVICE_NOT_SUPPORTED;

    return ((DynamicPwm *)pin)->getPeriodUs();
#endif  //  TODO
    return DEVICE_NOT_SUPPORTED;
}
 80084cc:	4800      	ldr	r0, [pc, #0]	; (80084d0 <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv+0x4>)
 80084ce:	4770      	bx	lr
 80084d0:	fffffc16 	.word	0xfffffc16

080084d4 <_ZN5codal3_cm3Pin15getAnalogPeriodEv>:
  *
  * @return the period on success, or DEVICE_NOT_SUPPORTED if the
  *         given pin is not configured as an analog output.
  */
int Pin::getAnalogPeriod()
{
 80084d4:	b508      	push	{r3, lr}
    return getAnalogPeriodUs()/1000;
 80084d6:	6803      	ldr	r3, [r0, #0]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084da:	4798      	blx	r3
 80084dc:	4b02      	ldr	r3, [pc, #8]	; (80084e8 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x14>)
 80084de:	fba3 3000 	umull	r3, r0, r3, r0
}
 80084e2:	0980      	lsrs	r0, r0, #6
 80084e4:	bd08      	pop	{r3, pc}
 80084e6:	bf00      	nop
 80084e8:	10624dd3 	.word	0x10624dd3

080084ec <_ZN5codal3_cm3Pin15setDigitalValueEi>:
{
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4605      	mov	r5, r0
 80084f0:	460c      	mov	r4, r1
    debug_print("pin "); debug_println(value); ////
 80084f2:	4815      	ldr	r0, [pc, #84]	; (8008548 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x5c>)
 80084f4:	f7fa faac 	bl	8002a50 <debug_print>
 80084f8:	4620      	mov	r0, r4
 80084fa:	f7fa fa8b 	bl	8002a14 <_Z13debug_printlni>
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 80084fe:	792b      	ldrb	r3, [r5, #4]
 8008500:	f013 0f01 	tst.w	r3, #1
 8008504:	d01b      	beq.n	800853e <_ZN5codal3_cm3Pin15setDigitalValueEi+0x52>
    if (value < 0 || value > 1)
 8008506:	2c01      	cmp	r4, #1
 8008508:	d81b      	bhi.n	8008542 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x56>
	rcc_periph_clock_enable(RCC_GPIOC);
 800850a:	f44f 7041 	mov.w	r0, #772	; 0x304
 800850e:	f7f9 f9c4 	bl	800189a <rcc_periph_clock_enable>
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 8008512:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008516:	2200      	movs	r2, #0
 8008518:	2102      	movs	r1, #2
 800851a:	480c      	ldr	r0, [pc, #48]	; (800854c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x60>)
 800851c:	f7f9 f97e 	bl	800181c <gpio_set_mode>
    if (value) {
 8008520:	b934      	cbnz	r4, 8008530 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x44>
	    gpio_clear(GPIOC, GPIO13);
 8008522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008526:	4809      	ldr	r0, [pc, #36]	; (800854c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x60>)
 8008528:	f7f9 f9b0 	bl	800188c <gpio_clear>
    return DEVICE_OK;
 800852c:	4620      	mov	r0, r4
}
 800852e:	bd38      	pop	{r3, r4, r5, pc}
        gpio_set(GPIOC, GPIO13);
 8008530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008534:	4805      	ldr	r0, [pc, #20]	; (800854c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x60>)
 8008536:	f7f9 f9a7 	bl	8001888 <gpio_set>
    return DEVICE_OK;
 800853a:	2000      	movs	r0, #0
 800853c:	e7f7      	b.n	800852e <_ZN5codal3_cm3Pin15setDigitalValueEi+0x42>
        return DEVICE_NOT_SUPPORTED;
 800853e:	4804      	ldr	r0, [pc, #16]	; (8008550 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x64>)
 8008540:	e7f5      	b.n	800852e <_ZN5codal3_cm3Pin15setDigitalValueEi+0x42>
        return DEVICE_INVALID_PARAMETER;
 8008542:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 8008546:	e7f2      	b.n	800852e <_ZN5codal3_cm3Pin15setDigitalValueEi+0x42>
 8008548:	0800ab30 	.word	0x0800ab30
 800854c:	40011000 	.word	0x40011000
 8008550:	fffffc16 	.word	0xfffffc16

08008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>:
Pin::Pin(
 8008554:	b470      	push	{r4, r5, r6}
    rcc(rcc), port(port), pin(pin) {
 8008556:	f101 0664 	add.w	r6, r1, #100	; 0x64
          * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_ALL);
          * @endcode
          */
        Pin(int id, PinNumber name, PinCapability capability)
        {
            this->status = 0;
 800855a:	2500      	movs	r5, #0
 800855c:	8185      	strh	r5, [r0, #12]
            this->id = id;
 800855e:	81c6      	strh	r6, [r0, #14]
            this->name = name;
 8008560:	7401      	strb	r1, [r0, #16]
            this->capability = capability;
 8008562:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8008566:	7101      	strb	r1, [r0, #4]
 8008568:	4904      	ldr	r1, [pc, #16]	; (800857c <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE+0x28>)
 800856a:	6001      	str	r1, [r0, #0]
 800856c:	6142      	str	r2, [r0, #20]
 800856e:	6183      	str	r3, [r0, #24]
 8008570:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008574:	8383      	strh	r3, [r0, #28]
    this->pullMode = DEVICE_DEFAULT_PULLMODE;
 8008576:	6085      	str	r5, [r0, #8]
}
 8008578:	bc70      	pop	{r4, r5, r6}
 800857a:	4770      	bx	lr
 800857c:	0800ab40 	.word	0x0800ab40

08008580 <_ZN5codal3_cm3Pin13setServoValueEiii>:
{
 8008580:	b538      	push	{r3, r4, r5, lr}
    if(!(PIN_CAPABILITY_ANALOG & capability))
 8008582:	7904      	ldrb	r4, [r0, #4]
 8008584:	f014 0f02 	tst.w	r4, #2
 8008588:	d024      	beq.n	80085d4 <_ZN5codal3_cm3Pin13setServoValueEiii+0x54>
    if(value < 0 || range < 1 || center < 1)
 800858a:	2900      	cmp	r1, #0
 800858c:	db24      	blt.n	80085d8 <_ZN5codal3_cm3Pin13setServoValueEiii+0x58>
 800858e:	2a00      	cmp	r2, #0
 8008590:	dd25      	ble.n	80085de <_ZN5codal3_cm3Pin13setServoValueEiii+0x5e>
 8008592:	2b00      	cmp	r3, #0
 8008594:	dd26      	ble.n	80085e4 <_ZN5codal3_cm3Pin13setServoValueEiii+0x64>
    if(value > DEVICE_PIN_MAX_SERVO_RANGE)
 8008596:	29b4      	cmp	r1, #180	; 0xb4
 8008598:	dd00      	ble.n	800859c <_ZN5codal3_cm3Pin13setServoValueEiii+0x1c>
        value = DEVICE_PIN_MAX_SERVO_RANGE;
 800859a:	21b4      	movs	r1, #180	; 0xb4
    int lower = (center - (range / 2)) * 1000;
 800859c:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 80085a0:	eba3 0364 	sub.w	r3, r3, r4, asr #1
 80085a4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    value = value * 1000;
 80085a8:	fb05 f101 	mul.w	r1, r5, r1
    int scaled = lower + (range * (value / DEVICE_PIN_MAX_SERVO_RANGE));
 80085ac:	4c0f      	ldr	r4, [pc, #60]	; (80085ec <_ZN5codal3_cm3Pin13setServoValueEiii+0x6c>)
 80085ae:	fb84 c401 	smull	ip, r4, r4, r1
 80085b2:	440c      	add	r4, r1
 80085b4:	17c9      	asrs	r1, r1, #31
 80085b6:	ebc1 11e4 	rsb	r1, r1, r4, asr #7
 80085ba:	fb02 f101 	mul.w	r1, r2, r1
 80085be:	fb05 1303 	mla	r3, r5, r3, r1
    return setServoPulseUs(scaled / 1000);
 80085c2:	490b      	ldr	r1, [pc, #44]	; (80085f0 <_ZN5codal3_cm3Pin13setServoValueEiii+0x70>)
 80085c4:	fb81 2103 	smull	r2, r1, r1, r3
 80085c8:	17db      	asrs	r3, r3, #31
 80085ca:	ebc3 11a1 	rsb	r1, r3, r1, asr #6
 80085ce:	f001 ff5e 	bl	800a48e <_ZN5codal3_cm3Pin15setServoPulseUsEi>
}
 80085d2:	bd38      	pop	{r3, r4, r5, pc}
        return DEVICE_NOT_SUPPORTED;
 80085d4:	4807      	ldr	r0, [pc, #28]	; (80085f4 <_ZN5codal3_cm3Pin13setServoValueEiii+0x74>)
 80085d6:	e7fc      	b.n	80085d2 <_ZN5codal3_cm3Pin13setServoValueEiii+0x52>
        return DEVICE_INVALID_PARAMETER;
 80085d8:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 80085dc:	e7f9      	b.n	80085d2 <_ZN5codal3_cm3Pin13setServoValueEiii+0x52>
 80085de:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 80085e2:	e7f6      	b.n	80085d2 <_ZN5codal3_cm3Pin13setServoValueEiii+0x52>
 80085e4:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 80085e8:	e7f3      	b.n	80085d2 <_ZN5codal3_cm3Pin13setServoValueEiii+0x52>
 80085ea:	bf00      	nop
 80085ec:	b60b60b7 	.word	0xb60b60b7
 80085f0:	10624dd3 	.word	0x10624dd3
 80085f4:	fffffc16 	.word	0xfffffc16

080085f8 <_ZN5codal3_cm6SerialD1Ev>:
 80085f8:	b510      	push	{r4, lr}
 80085fa:	4604      	mov	r4, r0
 80085fc:	4b02      	ldr	r3, [pc, #8]	; (8008608 <_ZN5codal3_cm6SerialD1Ev+0x10>)
 80085fe:	6003      	str	r3, [r0, #0]
 8008600:	f7ff fd0e 	bl	8008020 <_ZN5codal6SerialD1Ev>
 8008604:	4620      	mov	r0, r4
 8008606:	bd10      	pop	{r4, pc}
 8008608:	0800ab94 	.word	0x0800ab94

0800860c <_ZN5codal3_cm6SerialD0Ev>:
 800860c:	b510      	push	{r4, lr}
 800860e:	4604      	mov	r4, r0
 8008610:	4b04      	ldr	r3, [pc, #16]	; (8008624 <_ZN5codal3_cm6SerialD0Ev+0x18>)
 8008612:	6003      	str	r3, [r0, #0]
 8008614:	f7ff fd04 	bl	8008020 <_ZN5codal6SerialD1Ev>
 8008618:	4620      	mov	r0, r4
 800861a:	f7fa fb97 	bl	8002d4c <_ZdlPv>
 800861e:	4620      	mov	r0, r4
 8008620:	bd10      	pop	{r4, pc}
 8008622:	bf00      	nop
 8008624:	0800ab94 	.word	0x0800ab94

08008628 <_ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh>:
          *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/SerialBase.h
          *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/RawSerial.h
          *
          *       Buffers aren't allocated until the first send or receive respectively.
          */
        Serial::Serial(Pin &tx, Pin &rx, uint8_t rxBufferSize, uint8_t txBufferSize) 
 8008628:	b530      	push	{r4, r5, lr}
 800862a:	b083      	sub	sp, #12
 800862c:	4604      	mov	r4, r0
 800862e:	461d      	mov	r5, r3
            : codal::Serial(tx, rx)
 8008630:	230c      	movs	r3, #12
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	2314      	movs	r3, #20
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	f7ff fcc2 	bl	8007fc0 <_ZN5codal6SerialC1ERNS_3PinES2_hht>
 800863c:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <_ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh+0x4c>)
 800863e:	6023      	str	r3, [r4, #0]
        {
            // + 1 so there is a usable buffer size, of the size the user requested.
            this->rxBuffSize = rxBufferSize + 1;
 8008640:	3501      	adds	r5, #1
 8008642:	7725      	strb	r5, [r4, #28]
            this->txBuffSize = txBufferSize + 1;
 8008644:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008648:	3301      	adds	r3, #1
 800864a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

            this->rxBuff = NULL;
 800864e:	2300      	movs	r3, #0
 8008650:	61a3      	str	r3, [r4, #24]
            this->txBuff = NULL;
 8008652:	6263      	str	r3, [r4, #36]	; 0x24

            this->rxBuffHead = 0;
 8008654:	83e3      	strh	r3, [r4, #30]
            this->rxBuffTail = 0;
 8008656:	8423      	strh	r3, [r4, #32]

            this->txBuffHead = 0;
 8008658:	8563      	strh	r3, [r4, #42]	; 0x2a
            this->txBuffTail = 0;
 800865a:	85a3      	strh	r3, [r4, #44]	; 0x2c

            this->rxBuffHeadMatch = -1;
 800865c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008660:	6163      	str	r3, [r4, #20]

            this->baud(CODAL_SERIAL_DEFAULT_BAUD_RATE);
 8008662:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8008666:	4620      	mov	r0, r4
 8008668:	f001 ff90 	bl	800a58c <_ZN5codal3_cm6Serial4baudEi>
        }
 800866c:	4620      	mov	r0, r4
 800866e:	b003      	add	sp, #12
 8008670:	bd30      	pop	{r4, r5, pc}
 8008672:	bf00      	nop
 8008674:	0800ab94 	.word	0x0800ab94

08008678 <_ZN5codal3_cm13tick_callbackEv>:
                }
            }
#endif  //  TODO
        }

        void tick_callback() {
 8008678:	b508      	push	{r3, lr}
            //  Will be called at every millisecond tick.  Needed to keep CODAL scheduler running.
            //  Warning: This is called from an Interrupt Service Routine.  Don't trigger any interrupts or call slow functions.
            if (!Timer::instance) { return; }  //  No timer to trigger, quit.
 800867a:	4b09      	ldr	r3, [pc, #36]	; (80086a0 <_ZN5codal3_cm13tick_callbackEv+0x28>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	b133      	cbz	r3, 800868e <_ZN5codal3_cm13tick_callbackEv+0x16>
            CODAL_TIMESTAMP now = millis();
 8008680:	f7fa fb68 	bl	8002d54 <millis>
            //  If we have exceed the tick period (4 millisec)...
            if (last_trigger + (SCHEDULER_TICK_PERIOD_US / 1000) <= now) {
 8008684:	4b07      	ldr	r3, [pc, #28]	; (80086a4 <_ZN5codal3_cm13tick_callbackEv+0x2c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3304      	adds	r3, #4
 800868a:	4283      	cmp	r3, r0
 800868c:	d900      	bls.n	8008690 <_ZN5codal3_cm13tick_callbackEv+0x18>
                last_trigger = now;
                Timer::instance->trigger();  //  Trigger the CODAL Scheduler.
            }
        }
 800868e:	bd08      	pop	{r3, pc}
                last_trigger = now;
 8008690:	4b04      	ldr	r3, [pc, #16]	; (80086a4 <_ZN5codal3_cm13tick_callbackEv+0x2c>)
 8008692:	6018      	str	r0, [r3, #0]
                Timer::instance->trigger();  //  Trigger the CODAL Scheduler.
 8008694:	4b02      	ldr	r3, [pc, #8]	; (80086a0 <_ZN5codal3_cm13tick_callbackEv+0x28>)
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	f001 fba9 	bl	8009dee <_ZN5codal5Timer7triggerEv>
 800869c:	e7f7      	b.n	800868e <_ZN5codal3_cm13tick_callbackEv+0x16>
 800869e:	bf00      	nop
 80086a0:	20002178 	.word	0x20002178
 80086a4:	2000217c 	.word	0x2000217c

080086a8 <_ZN5codal3_cm14alarm_callbackEv>:

        void alarm_callback() {
 80086a8:	b508      	push	{r3, lr}
            //  Will be called when an alarm is triggered.  Needed to keep CODAL scheduler running, which sets alarms every few seconds.
            //  Warning: This is called from an Interrupt Service Routine.  Don't trigger any interrupts or call slow functions.
            if (!Timer::instance) { return; }  //  No timer to trigger, quit.
 80086aa:	4b03      	ldr	r3, [pc, #12]	; (80086b8 <_ZN5codal3_cm14alarm_callbackEv+0x10>)
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	b108      	cbz	r0, 80086b4 <_ZN5codal3_cm14alarm_callbackEv+0xc>
            Timer::instance->trigger();        //  Trigger the CODAL Scheduler.
 80086b0:	f001 fb9d 	bl	8009dee <_ZN5codal5Timer7triggerEv>
        }
 80086b4:	bd08      	pop	{r3, pc}
 80086b6:	bf00      	nop
 80086b8:	20002178 	.word	0x20002178

080086bc <_ZN5codal3_cm5Timer9triggerInEm>:
            NVIC_EnableIRQ(TIM5_IRQn);
            HAL_TIM_OC_Start(&TimHandle, TIM_CHANNEL_1);
#endif  //  TODO
        }

        void Timer::triggerIn(CODAL_TIMESTAMP t) {
 80086bc:	b508      	push	{r3, lr}
            //  Set alarm for millis() + t millisecs.
            if (!initialised) {
 80086be:	f890 3020 	ldrb.w	r3, [r0, #32]
 80086c2:	b11b      	cbz	r3, 80086cc <_ZN5codal3_cm5Timer9triggerInEm+0x10>
                trigger_period = t;
                debug_println("triggerIn b4 init!");
                return;
            }
            //  debug_print("triggerIn "); debug_println((size_t) t); debug_flush(); debug_printhex_unsigned(platform_get_alarm()); debug_print(" "); debug_flush(); ////
            platform_set_alarm(t);
 80086c4:	4608      	mov	r0, r1
 80086c6:	f7fa fb17 	bl	8002cf8 <platform_set_alarm>
            __HAL_TIM_SET_COMPARE(&TimHandle, TIM_CHANNEL_1,
                                (uint32_t)(__HAL_TIM_GET_COUNTER(&TimHandle) + t));
            __HAL_TIM_ENABLE_IT(&TimHandle, TIM_IT_CC1);
            target_enable_irq();
#endif  //  TODO
        }
 80086ca:	bd08      	pop	{r3, pc}
                trigger_period = t;
 80086cc:	4b02      	ldr	r3, [pc, #8]	; (80086d8 <_ZN5codal3_cm5Timer9triggerInEm+0x1c>)
 80086ce:	6019      	str	r1, [r3, #0]
                debug_println("triggerIn b4 init!");
 80086d0:	4802      	ldr	r0, [pc, #8]	; (80086dc <_ZN5codal3_cm5Timer9triggerInEm+0x20>)
 80086d2:	f7fa f991 	bl	80029f8 <debug_println>
                return;
 80086d6:	e7f8      	b.n	80086ca <_ZN5codal3_cm5Timer9triggerInEm+0xe>
 80086d8:	20002180 	.word	0x20002180
 80086dc:	0800abd8 	.word	0x0800abd8

080086e0 <_ZN5codal3_cm5Timer11syncRequestEv>:

        void Timer::syncRequest() {
 80086e0:	b510      	push	{r4, lr}
 80086e2:	b082      	sub	sp, #8
            if (!initialised) {
 80086e4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80086e8:	b1bb      	cbz	r3, 800871a <_ZN5codal3_cm5Timer11syncRequestEv+0x3a>
 80086ea:	4604      	mov	r4, r0
                debug_print("sync! ");  //  Warning: syncRequest called before init
                return;
            }
            target_disable_irq();
 80086ec:	f7f8 fa26 	bl	8000b3c <target_disable_irq>
            volatile uint32_t curr = millis();
 80086f0:	f7fa fb30 	bl	8002d54 <millis>
 80086f4:	9001      	str	r0, [sp, #4]
            volatile uint32_t delta = curr - this->prev;  //  In milliseconds.
 80086f6:	9b01      	ldr	r3, [sp, #4]
 80086f8:	69e2      	ldr	r2, [r4, #28]
 80086fa:	1a9b      	subs	r3, r3, r2
 80086fc:	9300      	str	r3, [sp, #0]

            // update the hal...
            // uwTick += delta;
            this->prev = curr;
 80086fe:	9b01      	ldr	r3, [sp, #4]
 8008700:	61e3      	str	r3, [r4, #28]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 8008702:	9b00      	ldr	r3, [sp, #0]
 8008704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008708:	fb01 f103 	mul.w	r1, r1, r3
 800870c:	4620      	mov	r0, r4
 800870e:	f001 fb5c 	bl	8009dca <_ZN5codal5Timer4syncEm>
            target_enable_irq();            
 8008712:	f7f8 fa11 	bl	8000b38 <target_enable_irq>
            //  debug_print("timer sync "); debug_println((size_t) delta * 1000);
        }
 8008716:	b002      	add	sp, #8
 8008718:	bd10      	pop	{r4, pc}
                debug_print("sync! ");  //  Warning: syncRequest called before init
 800871a:	4802      	ldr	r0, [pc, #8]	; (8008724 <_ZN5codal3_cm5Timer11syncRequestEv+0x44>)
 800871c:	f7fa f998 	bl	8002a50 <debug_print>
                return;
 8008720:	e7f9      	b.n	8008716 <_ZN5codal3_cm5Timer11syncRequestEv+0x36>
 8008722:	bf00      	nop
 8008724:	0800abc4 	.word	0x0800abc4

08008728 <_ZN5codal3_cm5TimerC1Ev>:
        Timer::Timer() : codal::Timer() {
 8008728:	b510      	push	{r4, lr}
 800872a:	4604      	mov	r4, r0
 800872c:	f7ff fc8c 	bl	8008048 <_ZN5codal5TimerC1Ev>
 8008730:	4b06      	ldr	r3, [pc, #24]	; (800874c <_ZN5codal3_cm5TimerC1Ev+0x24>)
 8008732:	6023      	str	r3, [r4, #0]
            initialised = false;
 8008734:	2300      	movs	r3, #0
 8008736:	f884 3020 	strb.w	r3, [r4, #32]
            instance = this;
 800873a:	4a05      	ldr	r2, [pc, #20]	; (8008750 <_ZN5codal3_cm5TimerC1Ev+0x28>)
 800873c:	6014      	str	r4, [r2, #0]
            prev = 0;
 800873e:	61e3      	str	r3, [r4, #28]
            trigger_period = 0;
 8008740:	4a04      	ldr	r2, [pc, #16]	; (8008754 <_ZN5codal3_cm5TimerC1Ev+0x2c>)
 8008742:	6013      	str	r3, [r2, #0]
            last_trigger = 0;
 8008744:	4a04      	ldr	r2, [pc, #16]	; (8008758 <_ZN5codal3_cm5TimerC1Ev+0x30>)
 8008746:	6013      	str	r3, [r2, #0]
        }
 8008748:	4620      	mov	r0, r4
 800874a:	bd10      	pop	{r4, pc}
 800874c:	0800abf4 	.word	0x0800abf4
 8008750:	20002178 	.word	0x20002178
 8008754:	20002180 	.word	0x20002180
 8008758:	2000217c 	.word	0x2000217c

0800875c <_ZN5codal3_cm5Timer4initEv>:
            if (initialised) { return; }  //  If already initialised, quit.
 800875c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008760:	b103      	cbz	r3, 8008764 <_ZN5codal3_cm5Timer4initEv+0x8>
 8008762:	4770      	bx	lr
        void Timer::init() {
 8008764:	b510      	push	{r4, lr}
 8008766:	4604      	mov	r4, r0
            debug_println("timer init"); ////
 8008768:	480f      	ldr	r0, [pc, #60]	; (80087a8 <_ZN5codal3_cm5Timer4initEv+0x4c>)
 800876a:	f7fa f945 	bl	80029f8 <debug_println>
            initialised = true;
 800876e:	2301      	movs	r3, #1
 8008770:	f884 3020 	strb.w	r3, [r4, #32]
            prev = millis();
 8008774:	f7fa faee 	bl	8002d54 <millis>
 8008778:	61e0      	str	r0, [r4, #28]
            target_set_tick_callback(tick_callback);
 800877a:	480c      	ldr	r0, [pc, #48]	; (80087ac <_ZN5codal3_cm5Timer4initEv+0x50>)
 800877c:	f7f8 f9ca 	bl	8000b14 <target_set_tick_callback>
            target_set_alarm_callback(alarm_callback);
 8008780:	480b      	ldr	r0, [pc, #44]	; (80087b0 <_ZN5codal3_cm5Timer4initEv+0x54>)
 8008782:	f7f8 f9cd 	bl	8000b20 <target_set_alarm_callback>
            if (trigger_period > 0) {
 8008786:	4b0b      	ldr	r3, [pc, #44]	; (80087b4 <_ZN5codal3_cm5Timer4initEv+0x58>)
 8008788:	6819      	ldr	r1, [r3, #0]
 800878a:	b929      	cbnz	r1, 8008798 <_ZN5codal3_cm5Timer4initEv+0x3c>
            start_background_tasks();
 800878c:	f000 f8b0 	bl	80088f0 <start_background_tasks>
            bootloader_set_restart_callback(restart_callback);
 8008790:	4809      	ldr	r0, [pc, #36]	; (80087b8 <_ZN5codal3_cm5Timer4initEv+0x5c>)
 8008792:	f7fc f887 	bl	80048a4 <bootloader_set_restart_callback>
        }
 8008796:	bd10      	pop	{r4, pc}
                triggerIn(trigger_period);
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4620      	mov	r0, r4
 800879e:	4798      	blx	r3
                trigger_period = 0;
 80087a0:	4b04      	ldr	r3, [pc, #16]	; (80087b4 <_ZN5codal3_cm5Timer4initEv+0x58>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	e7f1      	b.n	800878c <_ZN5codal3_cm5Timer4initEv+0x30>
 80087a8:	0800abcc 	.word	0x0800abcc
 80087ac:	08008679 	.word	0x08008679
 80087b0:	080086a9 	.word	0x080086a9
 80087b4:	20002180 	.word	0x20002180
 80087b8:	08008895 	.word	0x08008895

080087bc <_ZL8pre_mainv>:
static void pre_main() {
 80087bc:	b508      	push	{r3, lr}
    if (app_bss_test != 0x0 || app_data_test != 0x12345678) {
 80087be:	4b0c      	ldr	r3, [pc, #48]	; (80087f0 <_ZL8pre_mainv+0x34>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	b923      	cbnz	r3, 80087ce <_ZL8pre_mainv+0x12>
 80087c4:	4b0b      	ldr	r3, [pc, #44]	; (80087f4 <_ZL8pre_mainv+0x38>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	4b0b      	ldr	r3, [pc, #44]	; (80087f8 <_ZL8pre_mainv+0x3c>)
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d00e      	beq.n	80087ec <_ZL8pre_mainv+0x30>
        debug_print("*** app bss/data failed, bss_test = "); debug_printhex_unsigned(app_bss_test);
 80087ce:	480b      	ldr	r0, [pc, #44]	; (80087fc <_ZL8pre_mainv+0x40>)
 80087d0:	f7fa f93e 	bl	8002a50 <debug_print>
 80087d4:	4b06      	ldr	r3, [pc, #24]	; (80087f0 <_ZL8pre_mainv+0x34>)
 80087d6:	6818      	ldr	r0, [r3, #0]
 80087d8:	f7fa f986 	bl	8002ae8 <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
 80087dc:	4808      	ldr	r0, [pc, #32]	; (8008800 <_ZL8pre_mainv+0x44>)
 80087de:	f7fa f937 	bl	8002a50 <debug_print>
 80087e2:	4b04      	ldr	r3, [pc, #16]	; (80087f4 <_ZL8pre_mainv+0x38>)
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	f7fa f97f 	bl	8002ae8 <debug_printhex_unsigned>
 80087ea:	e7fe      	b.n	80087ea <_ZL8pre_mainv+0x2e>
}
 80087ec:	bd08      	pop	{r3, pc}
 80087ee:	bf00      	nop
 80087f0:	20002184 	.word	0x20002184
 80087f4:	20001000 	.word	0x20001000
 80087f8:	12345678 	.word	0x12345678
 80087fc:	0800ac04 	.word	0x0800ac04
 8008800:	0800ac2c 	.word	0x0800ac2c

08008804 <_ZL15restart_handlerN5codal5EventE>:
static codal::Event restart_event(  //  This event will be triggered for a restart request.
    CM_SOURCE_BOOTLOADER, CM_EVT_RESTART, codal::CREATE_ONLY);
static bool restart_listener_started = false;
static bool restart_requested = false;

static void restart_handler(codal::Event evt) {
 8008804:	b500      	push	{lr}
 8008806:	b083      	sub	sp, #12
 8008808:	ab02      	add	r3, sp, #8
 800880a:	e903 0003 	stmdb	r3, {r0, r1}
    //  Handle a restart request.  Flush the log then restart.
    debug_println("restart handler");
 800880e:	480e      	ldr	r0, [pc, #56]	; (8008848 <_ZL15restart_handlerN5codal5EventE+0x44>)
 8008810:	f7fa f8f2 	bl	80029f8 <debug_println>
    if (evt.value != CM_EVT_RESTART) { return; }
 8008814:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8008818:	f640 039d 	movw	r3, #2205	; 0x89d
 800881c:	429a      	cmp	r2, r3
 800881e:	d002      	beq.n	8008826 <_ZL15restart_handlerN5codal5EventE+0x22>
    codal::fiber_sleep(5000);

    debug_println("done");
    debug_force_flush();
    scb_reset_system();
}
 8008820:	b003      	add	sp, #12
 8008822:	f85d fb04 	ldr.w	pc, [sp], #4
    debug_println("restarting...");
 8008826:	4809      	ldr	r0, [pc, #36]	; (800884c <_ZL15restart_handlerN5codal5EventE+0x48>)
 8008828:	f7fa f8e6 	bl	80029f8 <debug_println>
    debug_force_flush();
 800882c:	f7fa f876 	bl	800291c <debug_force_flush>
    codal::fiber_sleep(5000);
 8008830:	f241 3088 	movw	r0, #5000	; 0x1388
 8008834:	f7ff fabe 	bl	8007db4 <_ZN5codal11fiber_sleepEm>
    debug_println("done");
 8008838:	4805      	ldr	r0, [pc, #20]	; (8008850 <_ZL15restart_handlerN5codal5EventE+0x4c>)
 800883a:	f7fa f8dd 	bl	80029f8 <debug_println>
    debug_force_flush();
 800883e:	f7fa f86d 	bl	800291c <debug_force_flush>
    scb_reset_system();
 8008842:	f7f8 fd8b 	bl	800135c <scb_reset_system>
 8008846:	bf00      	nop
 8008848:	0800ac48 	.word	0x0800ac48
 800884c:	0800ac58 	.word	0x0800ac58
 8008850:	0800ac68 	.word	0x0800ac68

08008854 <_ZL10flush_taskv>:
        return status;
    }
    return 0;
}

static void flush_task(void) {
 8008854:	b508      	push	{r3, lr}
    //  Flush the log periodically.
    debug_println("flush task");
 8008856:	4804      	ldr	r0, [pc, #16]	; (8008868 <_ZL10flush_taskv+0x14>)
 8008858:	f7fa f8ce 	bl	80029f8 <debug_println>
    while (true) {
        debug_flush();
 800885c:	f7fa f8f3 	bl	8002a46 <debug_flush>
        codal::fiber_sleep(200);
 8008860:	20c8      	movs	r0, #200	; 0xc8
 8008862:	f7ff faa7 	bl	8007db4 <_ZN5codal11fiber_sleepEm>
 8008866:	e7f9      	b.n	800885c <_ZL10flush_taskv+0x8>
 8008868:	0800ac3c 	.word	0x0800ac3c

0800886c <_Z41__static_initialization_and_destruction_0ii>:
                restart_listener_started = true;
            }
        }
    }
    return 0;
}
 800886c:	2801      	cmp	r0, #1
 800886e:	d000      	beq.n	8008872 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8008870:	4770      	bx	lr
 8008872:	b508      	push	{r3, lr}
 8008874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008878:	4299      	cmp	r1, r3
 800887a:	d000      	beq.n	800887e <_Z41__static_initialization_and_destruction_0ii+0x12>
 800887c:	bd08      	pop	{r3, pc}
    CM_SOURCE_BOOTLOADER, CM_EVT_RESTART, codal::CREATE_ONLY);
 800887e:	2300      	movs	r3, #0
 8008880:	f640 029d 	movw	r2, #2205	; 0x89d
 8008884:	f645 0134 	movw	r1, #22580	; 0x5834
 8008888:	4801      	ldr	r0, [pc, #4]	; (8008890 <_Z41__static_initialization_and_destruction_0ii+0x24>)
 800888a:	f001 fc9a 	bl	800a1c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
}
 800888e:	e7f5      	b.n	800887c <_Z41__static_initialization_and_destruction_0ii+0x10>
 8008890:	20002188 	.word	0x20002188

08008894 <restart_callback>:
int restart_callback(void) {
 8008894:	b510      	push	{r4, lr}
    debug_println("restart callback");
 8008896:	4810      	ldr	r0, [pc, #64]	; (80088d8 <restart_callback+0x44>)
 8008898:	f7fa f8ae 	bl	80029f8 <debug_println>
    if (!codal::EventModel::defaultEventBus) {
 800889c:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <restart_callback+0x48>)
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	b148      	cbz	r0, 80088b6 <restart_callback+0x22>
    int status = codal::EventModel::defaultEventBus->send(restart_event);
 80088a2:	4b0f      	ldr	r3, [pc, #60]	; (80088e0 <restart_callback+0x4c>)
 80088a4:	6802      	ldr	r2, [r0, #0]
 80088a6:	6814      	ldr	r4, [r2, #0]
 80088a8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80088ac:	47a0      	blx	r4
    if (status) {
 80088ae:	4604      	mov	r4, r0
 80088b0:	b938      	cbnz	r0, 80088c2 <restart_callback+0x2e>
}
 80088b2:	4620      	mov	r0, r4
 80088b4:	bd10      	pop	{r4, pc}
        debug_println("*** ERROR: missing event bus");
 80088b6:	480b      	ldr	r0, [pc, #44]	; (80088e4 <restart_callback+0x50>)
 80088b8:	f7fa f89e 	bl	80029f8 <debug_println>
        return -1;
 80088bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80088c0:	e7f7      	b.n	80088b2 <restart_callback+0x1e>
        debug_print("*** ERROR: unable to send restart event ");
 80088c2:	4809      	ldr	r0, [pc, #36]	; (80088e8 <restart_callback+0x54>)
 80088c4:	f7fa f8c4 	bl	8002a50 <debug_print>
        debug_print_unsigned(status); debug_println("");
 80088c8:	4620      	mov	r0, r4
 80088ca:	f7fa f8d1 	bl	8002a70 <debug_print_unsigned>
 80088ce:	4807      	ldr	r0, [pc, #28]	; (80088ec <restart_callback+0x58>)
 80088d0:	f7fa f892 	bl	80029f8 <debug_println>
        return status;
 80088d4:	e7ed      	b.n	80088b2 <restart_callback+0x1e>
 80088d6:	bf00      	nop
 80088d8:	0800ac70 	.word	0x0800ac70
 80088dc:	20002170 	.word	0x20002170
 80088e0:	20002188 	.word	0x20002188
 80088e4:	0800ac84 	.word	0x0800ac84
 80088e8:	0800aca4 	.word	0x0800aca4
 80088ec:	0800ac28 	.word	0x0800ac28

080088f0 <start_background_tasks>:
int start_background_tasks(void) {
 80088f0:	b530      	push	{r4, r5, lr}
 80088f2:	b083      	sub	sp, #12
    if (!flush_task_fibre) {
 80088f4:	4b29      	ldr	r3, [pc, #164]	; (800899c <start_background_tasks+0xac>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	b34b      	cbz	r3, 800894e <start_background_tasks+0x5e>
    if (!restart_listener_started) {
 80088fa:	4b29      	ldr	r3, [pc, #164]	; (80089a0 <start_background_tasks+0xb0>)
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	bb1b      	cbnz	r3, 8008948 <start_background_tasks+0x58>
        if (!codal::EventModel::defaultEventBus) {
 8008900:	4b28      	ldr	r3, [pc, #160]	; (80089a4 <start_background_tasks+0xb4>)
 8008902:	681c      	ldr	r4, [r3, #0]
 8008904:	2c00      	cmp	r4, #0
 8008906:	d038      	beq.n	800897a <start_background_tasks+0x8a>
            Listener *newListener = new Listener(id, value, handler, flags);
 8008908:	2020      	movs	r0, #32
 800890a:	f7fa fa1b 	bl	8002d44 <_Znwj>
 800890e:	4605      	mov	r5, r0
 8008910:	2310      	movs	r3, #16
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	4b24      	ldr	r3, [pc, #144]	; (80089a8 <start_background_tasks+0xb8>)
 8008916:	f640 029d 	movw	r2, #2205	; 0x89d
 800891a:	f645 0134 	movw	r1, #22580	; 0x5834
 800891e:	f001 f84e 	bl	80099be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	685b      	ldr	r3, [r3, #4]
 8008926:	4629      	mov	r1, r5
 8008928:	4620      	mov	r0, r4
 800892a:	4798      	blx	r3
 800892c:	4604      	mov	r4, r0
 800892e:	b138      	cbz	r0, 8008940 <start_background_tasks+0x50>
            delete newListener;
 8008930:	b33d      	cbz	r5, 8008982 <start_background_tasks+0x92>
 8008932:	4628      	mov	r0, r5
 8008934:	f001 f857 	bl	80099e6 <_ZN5codal8ListenerD1Ev>
 8008938:	4628      	mov	r0, r5
 800893a:	f7fa fa07 	bl	8002d4c <_ZdlPv>
            return DEVICE_NOT_SUPPORTED;
 800893e:	4c1b      	ldr	r4, [pc, #108]	; (80089ac <start_background_tasks+0xbc>)
            if (status) {
 8008940:	bb0c      	cbnz	r4, 8008986 <start_background_tasks+0x96>
                restart_listener_started = true;
 8008942:	4b17      	ldr	r3, [pc, #92]	; (80089a0 <start_background_tasks+0xb0>)
 8008944:	2201      	movs	r2, #1
 8008946:	701a      	strb	r2, [r3, #0]
}
 8008948:	2000      	movs	r0, #0
 800894a:	b003      	add	sp, #12
 800894c:	bd30      	pop	{r4, r5, pc}
        if (!codal::fiber_scheduler_running()) {
 800894e:	f7ff f815 	bl	800797c <_ZN5codal23fiber_scheduler_runningEv>
 8008952:	b918      	cbnz	r0, 800895c <start_background_tasks+0x6c>
            debug_println("no scheduler, start bg tasks later");
 8008954:	4816      	ldr	r0, [pc, #88]	; (80089b0 <start_background_tasks+0xc0>)
 8008956:	f7fa f84f 	bl	80029f8 <debug_println>
 800895a:	e7ce      	b.n	80088fa <start_background_tasks+0xa>
            debug_println("start bg tasks");
 800895c:	4815      	ldr	r0, [pc, #84]	; (80089b4 <start_background_tasks+0xc4>)
 800895e:	f7fa f84b 	bl	80029f8 <debug_println>
            flush_task_fibre = codal::create_fiber(flush_task);
 8008962:	4915      	ldr	r1, [pc, #84]	; (80089b8 <start_background_tasks+0xc8>)
 8008964:	4815      	ldr	r0, [pc, #84]	; (80089bc <start_background_tasks+0xcc>)
 8008966:	f000 ff90 	bl	800988a <_ZN5codal12create_fiberEPFvvES1_>
 800896a:	4b0c      	ldr	r3, [pc, #48]	; (800899c <start_background_tasks+0xac>)
 800896c:	6018      	str	r0, [r3, #0]
            if (!flush_task_fibre) {
 800896e:	2800      	cmp	r0, #0
 8008970:	d1c3      	bne.n	80088fa <start_background_tasks+0xa>
                debug_println("*** ERROR: create fibre failed");
 8008972:	4813      	ldr	r0, [pc, #76]	; (80089c0 <start_background_tasks+0xd0>)
 8008974:	f7fa f840 	bl	80029f8 <debug_println>
 8008978:	e7bf      	b.n	80088fa <start_background_tasks+0xa>
            debug_println("*** ERROR: missing event bus");
 800897a:	4812      	ldr	r0, [pc, #72]	; (80089c4 <start_background_tasks+0xd4>)
 800897c:	f7fa f83c 	bl	80029f8 <debug_println>
 8008980:	e7e2      	b.n	8008948 <start_background_tasks+0x58>
 8008982:	4c0a      	ldr	r4, [pc, #40]	; (80089ac <start_background_tasks+0xbc>)
 8008984:	e7dc      	b.n	8008940 <start_background_tasks+0x50>
                debug_print("*** ERROR: unable to listen for restart event ");
 8008986:	4810      	ldr	r0, [pc, #64]	; (80089c8 <start_background_tasks+0xd8>)
 8008988:	f7fa f862 	bl	8002a50 <debug_print>
                debug_printhex_unsigned(status); debug_println("");
 800898c:	4620      	mov	r0, r4
 800898e:	f7fa f8ab 	bl	8002ae8 <debug_printhex_unsigned>
 8008992:	480e      	ldr	r0, [pc, #56]	; (80089cc <start_background_tasks+0xdc>)
 8008994:	f7fa f830 	bl	80029f8 <debug_println>
 8008998:	e7d6      	b.n	8008948 <start_background_tasks+0x58>
 800899a:	bf00      	nop
 800899c:	20002190 	.word	0x20002190
 80089a0:	20002214 	.word	0x20002214
 80089a4:	20002170 	.word	0x20002170
 80089a8:	08008805 	.word	0x08008805
 80089ac:	fffffc16 	.word	0xfffffc16
 80089b0:	0800acd0 	.word	0x0800acd0
 80089b4:	0800acf4 	.word	0x0800acf4
 80089b8:	08007ded 	.word	0x08007ded
 80089bc:	08008855 	.word	0x08008855
 80089c0:	0800ad04 	.word	0x0800ad04
 80089c4:	0800ac84 	.word	0x0800ac84
 80089c8:	0800ad24 	.word	0x0800ad24
 80089cc:	0800ac28 	.word	0x0800ac28

080089d0 <_ZN5codal13STM32BluePill4initEv>:
  *
  * @note This method must be called before user code utilises any functionality
  *       contained within the GenuinoZero class.
  */
int STM32BluePill::init()
{
 80089d0:	b538      	push	{r3, r4, r5, lr}
    if (status & DEVICE_INITIALIZED)
 80089d2:	88c3      	ldrh	r3, [r0, #6]
 80089d4:	f013 0f01 	tst.w	r3, #1
 80089d8:	d12e      	bne.n	8008a38 <_ZN5codal13STM32BluePill4initEv+0x68>
 80089da:	4605      	mov	r5, r0
        return DEVICE_NOT_SUPPORTED;
    status |= DEVICE_INITIALIZED;
 80089dc:	f043 0301 	orr.w	r3, r3, #1
 80089e0:	80c3      	strh	r3, [r0, #6]

    debug_println("bluepill init scheduler"); debug_flush(); ////
 80089e2:	4816      	ldr	r0, [pc, #88]	; (8008a3c <_ZN5codal13STM32BluePill4initEv+0x6c>)
 80089e4:	f7fa f808 	bl	80029f8 <debug_println>
 80089e8:	f7fa f82d 	bl	8002a46 <debug_flush>

    //  Codal initialisation... Bring up fiber scheduler.
    scheduler_init(messageBus);
 80089ec:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80089f0:	f7fe ffd0 	bl	8007994 <_ZN5codal14scheduler_initERNS_10EventModelE>
    debug_println("bluepill init components"); debug_flush(); ////
 80089f4:	4812      	ldr	r0, [pc, #72]	; (8008a40 <_ZN5codal13STM32BluePill4initEv+0x70>)
 80089f6:	f7f9 ffff 	bl	80029f8 <debug_println>
 80089fa:	f7fa f824 	bl	8002a46 <debug_flush>

    //  Init the timer first, all other components depend on the timer.
    timer.init();
 80089fe:	f105 0008 	add.w	r0, r5, #8
 8008a02:	f7ff feab 	bl	800875c <_ZN5codal3_cm5Timer4initEv>

    //  Initialise all the Codal components.
    for(int i = 0; i < DEVICE_COMPONENT_COUNT; i++)
 8008a06:	2400      	movs	r4, #0
 8008a08:	e000      	b.n	8008a0c <_ZN5codal13STM32BluePill4initEv+0x3c>
 8008a0a:	3401      	adds	r4, #1
 8008a0c:	2c3b      	cmp	r4, #59	; 0x3b
 8008a0e:	dc08      	bgt.n	8008a22 <_ZN5codal13STM32BluePill4initEv+0x52>
    {
        if(CodalComponent::components[i])
 8008a10:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <_ZN5codal13STM32BluePill4initEv+0x74>)
 8008a12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d0f7      	beq.n	8008a0a <_ZN5codal13STM32BluePill4initEv+0x3a>
            CodalComponent::components[i]->init();
 8008a1a:	6803      	ldr	r3, [r0, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4798      	blx	r3
 8008a20:	e7f3      	b.n	8008a0a <_ZN5codal13STM32BluePill4initEv+0x3a>
    }
    status |= DEVICE_COMPONENT_STATUS_IDLE_TICK;
 8008a22:	88eb      	ldrh	r3, [r5, #6]
 8008a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a28:	80eb      	strh	r3, [r5, #6]
    debug_println("bluepill init ok"); debug_flush(); ////
 8008a2a:	4807      	ldr	r0, [pc, #28]	; (8008a48 <_ZN5codal13STM32BluePill4initEv+0x78>)
 8008a2c:	f7f9 ffe4 	bl	80029f8 <debug_println>
 8008a30:	f7fa f809 	bl	8002a46 <debug_flush>
    return DEVICE_OK;
 8008a34:	2000      	movs	r0, #0
}
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
        return DEVICE_NOT_SUPPORTED;
 8008a38:	4804      	ldr	r0, [pc, #16]	; (8008a4c <_ZN5codal13STM32BluePill4initEv+0x7c>)
 8008a3a:	e7fc      	b.n	8008a36 <_ZN5codal13STM32BluePill4initEv+0x66>
 8008a3c:	0800ad54 	.word	0x0800ad54
 8008a40:	0800ad6c 	.word	0x0800ad6c
 8008a44:	20002050 	.word	0x20002050
 8008a48:	0800ad88 	.word	0x0800ad88
 8008a4c:	fffffc16 	.word	0xfffffc16

08008a50 <_ZN5codal13STM32BluePillC1Ev>:
STM32BluePill::STM32BluePill() :
 8008a50:	b530      	push	{r4, r5, lr}
 8008a52:	b083      	sub	sp, #12
 8008a54:	4604      	mov	r4, r0
        {
 8008a56:	4b25      	ldr	r3, [pc, #148]	; (8008aec <_ZN5codal13STM32BluePillC1Ev+0x9c>)
 8008a58:	6003      	str	r3, [r0, #0]
            this->id = 0;
 8008a5a:	2500      	movs	r5, #0
 8008a5c:	8085      	strh	r5, [r0, #4]
            this->status = 0;
 8008a5e:	80c5      	strh	r5, [r0, #6]
            addComponent();
 8008a60:	f7fe fe46 	bl	80076f0 <_ZN5codal14CodalComponent12addComponentEv>
    usart2(io.tx2, io.rx2) {  //  Port USART2 (USART1, USART3 not supported yet)
 8008a64:	4620      	mov	r0, r4
 8008a66:	4b22      	ldr	r3, [pc, #136]	; (8008af0 <_ZN5codal13STM32BluePillC1Ev+0xa0>)
 8008a68:	f840 3b08 	str.w	r3, [r0], #8
 8008a6c:	f7ff fe5c 	bl	8008728 <_ZN5codal3_cm5TimerC1Ev>
 8008a70:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8008a74:	f7ff fc50 	bl	8008318 <_ZN5codal10MessageBusC1Ev>
 8008a78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a7c:	f000 f83c 	bl	8008af8 <_ZN5codal15STM32BluePillIOC1Ev>
 8008a80:	f504 6241 	add.w	r2, r4, #3088	; 0xc10
 8008a84:	f504 6143 	add.w	r1, r4, #3120	; 0xc30
 8008a88:	f504 607b 	add.w	r0, r4, #4016	; 0xfb0
 8008a8c:	f000 fdee 	bl	800966c <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>
 8008a90:	f504 6351 	add.w	r3, r4, #3344	; 0xd10
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	f504 6353 	add.w	r3, r4, #3376	; 0xd30
 8008a9a:	f504 6255 	add.w	r2, r4, #3408	; 0xd50
 8008a9e:	f504 6157 	add.w	r1, r4, #3440	; 0xd70
 8008aa2:	f504 607c 	add.w	r0, r4, #4032	; 0xfc0
 8008aa6:	f000 fe1d 	bl	80096e4 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_>
 8008aaa:	f504 6361 	add.w	r3, r4, #3600	; 0xe10
 8008aae:	9300      	str	r3, [sp, #0]
 8008ab0:	f504 6363 	add.w	r3, r4, #3632	; 0xe30
 8008ab4:	f504 6265 	add.w	r2, r4, #3664	; 0xe50
 8008ab8:	f504 6167 	add.w	r1, r4, #3696	; 0xe70
 8008abc:	f604 70e8 	addw	r0, r4, #4072	; 0xfe8
 8008ac0:	f000 fe10 	bl	80096e4 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_>
 8008ac4:	2314      	movs	r3, #20
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	f504 6229 	add.w	r2, r4, #2704	; 0xa90
 8008acc:	f504 6127 	add.w	r1, r4, #2672	; 0xa70
 8008ad0:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8008ad4:	3010      	adds	r0, #16
 8008ad6:	f7ff fda7 	bl	8008628 <_ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh>
    status = 0;
 8008ada:	80e5      	strh	r5, [r4, #6]
    debug_println("bluepill construct"); debug_flush(); ////
 8008adc:	4805      	ldr	r0, [pc, #20]	; (8008af4 <_ZN5codal13STM32BluePillC1Ev+0xa4>)
 8008ade:	f7f9 ff8b 	bl	80029f8 <debug_println>
 8008ae2:	f7f9 ffb0 	bl	8002a46 <debug_flush>
}
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	b003      	add	sp, #12
 8008aea:	bd30      	pop	{r4, r5, pc}
 8008aec:	0800aa44 	.word	0x0800aa44
 8008af0:	0800adb8 	.word	0x0800adb8
 8008af4:	0800ad9c 	.word	0x0800ad9c

08008af8 <_ZN5codal15STM32BluePillIOC1Ev>:
  * Create a representation of all given I/O pins on the edge connector
  *
  * Accepts a sequence of unique ID's used to distinguish events raised
  * by MicroBitPin instances on the default EventModel.
  */
STM32BluePillIO::STM32BluePillIO() :
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afc:	b083      	sub	sp, #12
 8008afe:	4604      	mov	r4, r0
mosi3        (CM_PIN_SPI_MOSI3       , RCC_GPIOB, GPIOB, GPIO5, PIN_CAPABILITY_DIGITAL),
nss3_remap   (CM_PIN_SPI_NSS3_REMAP  , RCC_GPIOA, GPIOA, GPIO4, PIN_CAPABILITY_DIGITAL),
sck3_remap   (CM_PIN_SPI_SCK3_REMAP  , RCC_GPIOC, GPIOC, GPIO10, PIN_CAPABILITY_DIGITAL),
miso3_remap  (CM_PIN_SPI_MISO3_REMAP , RCC_GPIOC, GPIOC, GPIO11, PIN_CAPABILITY_DIGITAL),
mosi3_remap  (CM_PIN_SPI_MOSI3_REMAP , RCC_GPIOC, GPIOC, GPIO12, PIN_CAPABILITY_DIGITAL),
led         (CM_PIN_LED        , RCC_GPIOC, GPIOC, GPIO13, PIN_CAPABILITY_DIGITAL)
 8008b00:	2501      	movs	r5, #1
 8008b02:	9501      	str	r5, [sp, #4]
 8008b04:	9500      	str	r5, [sp, #0]
 8008b06:	4bd1      	ldr	r3, [pc, #836]	; (8008e4c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008b08:	f240 3202 	movw	r2, #770	; 0x302
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	f7ff fd21 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b12:	9501      	str	r5, [sp, #4]
 8008b14:	2702      	movs	r7, #2
 8008b16:	9700      	str	r7, [sp, #0]
 8008b18:	4bcc      	ldr	r3, [pc, #816]	; (8008e4c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008b1a:	f240 3202 	movw	r2, #770	; 0x302
 8008b1e:	4629      	mov	r1, r5
 8008b20:	f104 0020 	add.w	r0, r4, #32
 8008b24:	f7ff fd16 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b28:	9501      	str	r5, [sp, #4]
 8008b2a:	f04f 0804 	mov.w	r8, #4
 8008b2e:	f8cd 8000 	str.w	r8, [sp]
 8008b32:	4bc6      	ldr	r3, [pc, #792]	; (8008e4c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008b34:	f240 3202 	movw	r2, #770	; 0x302
 8008b38:	4639      	mov	r1, r7
 8008b3a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8008b3e:	f7ff fd09 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b42:	9501      	str	r5, [sp, #4]
 8008b44:	f04f 0a08 	mov.w	sl, #8
 8008b48:	f8cd a000 	str.w	sl, [sp]
 8008b4c:	4bbf      	ldr	r3, [pc, #764]	; (8008e4c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008b4e:	f240 3202 	movw	r2, #770	; 0x302
 8008b52:	2103      	movs	r1, #3
 8008b54:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8008b58:	f7ff fcfc 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b5c:	9501      	str	r5, [sp, #4]
 8008b5e:	2310      	movs	r3, #16
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	4bba      	ldr	r3, [pc, #744]	; (8008e4c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008b64:	f240 3202 	movw	r2, #770	; 0x302
 8008b68:	4641      	mov	r1, r8
 8008b6a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8008b6e:	f7ff fcf1 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b72:	9501      	str	r5, [sp, #4]
 8008b74:	2320      	movs	r3, #32
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	4bb4      	ldr	r3, [pc, #720]	; (8008e4c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008b7a:	f240 3202 	movw	r2, #770	; 0x302
 8008b7e:	2105      	movs	r1, #5
 8008b80:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 8008b84:	f7ff fce6 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b88:	9501      	str	r5, [sp, #4]
 8008b8a:	2640      	movs	r6, #64	; 0x40
 8008b8c:	9600      	str	r6, [sp, #0]
 8008b8e:	4baf      	ldr	r3, [pc, #700]	; (8008e4c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008b90:	f240 3202 	movw	r2, #770	; 0x302
 8008b94:	2106      	movs	r1, #6
 8008b96:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8008b9a:	f7ff fcdb 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b9e:	9501      	str	r5, [sp, #4]
 8008ba0:	2380      	movs	r3, #128	; 0x80
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	4ba9      	ldr	r3, [pc, #676]	; (8008e4c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008ba6:	f240 3202 	movw	r2, #770	; 0x302
 8008baa:	2107      	movs	r1, #7
 8008bac:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8008bb0:	f7ff fcd0 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008bb4:	9501      	str	r5, [sp, #4]
 8008bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	4ba3      	ldr	r3, [pc, #652]	; (8008e4c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008bbe:	f240 3202 	movw	r2, #770	; 0x302
 8008bc2:	4651      	mov	r1, sl
 8008bc4:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8008bc8:	f7ff fcc4 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008bcc:	9501      	str	r5, [sp, #4]
 8008bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008bd8:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 8008bdc:	f240 3202 	movw	r2, #770	; 0x302
 8008be0:	2109      	movs	r1, #9
 8008be2:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8008be6:	f7ff fcb5 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008bea:	9501      	str	r5, [sp, #4]
 8008bec:	f44f 6b80 	mov.w	fp, #1024	; 0x400
 8008bf0:	f8cd b000 	str.w	fp, [sp]
 8008bf4:	4b95      	ldr	r3, [pc, #596]	; (8008e4c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008bf6:	f240 3202 	movw	r2, #770	; 0x302
 8008bfa:	210a      	movs	r1, #10
 8008bfc:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8008c00:	f7ff fca8 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c04:	9501      	str	r5, [sp, #4]
 8008c06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c0a:	9300      	str	r3, [sp, #0]
 8008c0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c10:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008c14:	f240 3202 	movw	r2, #770	; 0x302
 8008c18:	210b      	movs	r1, #11
 8008c1a:	f504 70b0 	add.w	r0, r4, #352	; 0x160
 8008c1e:	f7ff fc99 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c22:	9501      	str	r5, [sp, #4]
 8008c24:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8008c28:	f8cd 9000 	str.w	r9, [sp]
 8008c2c:	4b87      	ldr	r3, [pc, #540]	; (8008e4c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008c2e:	f240 3202 	movw	r2, #770	; 0x302
 8008c32:	210c      	movs	r1, #12
 8008c34:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8008c38:	f7ff fc8c 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c3c:	9501      	str	r5, [sp, #4]
 8008c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008c48:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 8008c4c:	f240 3202 	movw	r2, #770	; 0x302
 8008c50:	210d      	movs	r1, #13
 8008c52:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
 8008c56:	f7ff fc7d 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c5a:	9501      	str	r5, [sp, #4]
 8008c5c:	9500      	str	r5, [sp, #0]
 8008c5e:	4b7c      	ldr	r3, [pc, #496]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008c60:	f240 3203 	movw	r2, #771	; 0x303
 8008c64:	210e      	movs	r1, #14
 8008c66:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 8008c6a:	f7ff fc73 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c6e:	9501      	str	r5, [sp, #4]
 8008c70:	9700      	str	r7, [sp, #0]
 8008c72:	4b77      	ldr	r3, [pc, #476]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008c74:	f240 3203 	movw	r2, #771	; 0x303
 8008c78:	210f      	movs	r1, #15
 8008c7a:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 8008c7e:	f7ff fc69 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c82:	9501      	str	r5, [sp, #4]
 8008c84:	f8cd a000 	str.w	sl, [sp]
 8008c88:	4b71      	ldr	r3, [pc, #452]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008c8a:	f240 3203 	movw	r2, #771	; 0x303
 8008c8e:	2110      	movs	r1, #16
 8008c90:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8008c94:	f7ff fc5e 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c98:	9501      	str	r5, [sp, #4]
 8008c9a:	2310      	movs	r3, #16
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	4b6c      	ldr	r3, [pc, #432]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008ca0:	f240 3203 	movw	r2, #771	; 0x303
 8008ca4:	2111      	movs	r1, #17
 8008ca6:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008caa:	f7ff fc53 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008cae:	9501      	str	r5, [sp, #4]
 8008cb0:	2320      	movs	r3, #32
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	4b66      	ldr	r3, [pc, #408]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008cb6:	f240 3203 	movw	r2, #771	; 0x303
 8008cba:	2112      	movs	r1, #18
 8008cbc:	f504 7010 	add.w	r0, r4, #576	; 0x240
 8008cc0:	f7ff fc48 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008cc4:	9501      	str	r5, [sp, #4]
 8008cc6:	9600      	str	r6, [sp, #0]
 8008cc8:	4b61      	ldr	r3, [pc, #388]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008cca:	f240 3203 	movw	r2, #771	; 0x303
 8008cce:	2113      	movs	r1, #19
 8008cd0:	f504 7018 	add.w	r0, r4, #608	; 0x260
 8008cd4:	f7ff fc3e 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008cd8:	9501      	str	r5, [sp, #4]
 8008cda:	2380      	movs	r3, #128	; 0x80
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	4b5c      	ldr	r3, [pc, #368]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008ce0:	f240 3203 	movw	r2, #771	; 0x303
 8008ce4:	2114      	movs	r1, #20
 8008ce6:	f504 7020 	add.w	r0, r4, #640	; 0x280
 8008cea:	f7ff fc33 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008cee:	9501      	str	r5, [sp, #4]
 8008cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	4b56      	ldr	r3, [pc, #344]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008cf8:	f240 3203 	movw	r2, #771	; 0x303
 8008cfc:	2115      	movs	r1, #21
 8008cfe:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
 8008d02:	f7ff fc27 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d06:	9501      	str	r5, [sp, #4]
 8008d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	4b50      	ldr	r3, [pc, #320]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008d10:	f240 3203 	movw	r2, #771	; 0x303
 8008d14:	2116      	movs	r1, #22
 8008d16:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
 8008d1a:	f7ff fc1b 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d1e:	9501      	str	r5, [sp, #4]
 8008d20:	f8cd b000 	str.w	fp, [sp]
 8008d24:	4b4a      	ldr	r3, [pc, #296]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008d26:	f240 3203 	movw	r2, #771	; 0x303
 8008d2a:	2117      	movs	r1, #23
 8008d2c:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
 8008d30:	f7ff fc10 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d34:	9501      	str	r5, [sp, #4]
 8008d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	4b44      	ldr	r3, [pc, #272]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008d3e:	f240 3203 	movw	r2, #771	; 0x303
 8008d42:	2118      	movs	r1, #24
 8008d44:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8008d48:	f7ff fc04 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d4c:	9501      	str	r5, [sp, #4]
 8008d4e:	f8cd 9000 	str.w	r9, [sp]
 8008d52:	4b3f      	ldr	r3, [pc, #252]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008d54:	f240 3203 	movw	r2, #771	; 0x303
 8008d58:	2119      	movs	r1, #25
 8008d5a:	f504 7048 	add.w	r0, r4, #800	; 0x320
 8008d5e:	f7ff fbf9 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d62:	9501      	str	r5, [sp, #4]
 8008d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	4b39      	ldr	r3, [pc, #228]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008d6c:	f240 3203 	movw	r2, #771	; 0x303
 8008d70:	211a      	movs	r1, #26
 8008d72:	f504 7050 	add.w	r0, r4, #832	; 0x340
 8008d76:	f7ff fbed 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d7a:	9501      	str	r5, [sp, #4]
 8008d7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	4b33      	ldr	r3, [pc, #204]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008d84:	f240 3203 	movw	r2, #771	; 0x303
 8008d88:	211b      	movs	r1, #27
 8008d8a:	f504 7058 	add.w	r0, r4, #864	; 0x360
 8008d8e:	f7ff fbe1 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d92:	9501      	str	r5, [sp, #4]
 8008d94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	4b2d      	ldr	r3, [pc, #180]	; (8008e50 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008d9c:	f240 3203 	movw	r2, #771	; 0x303
 8008da0:	211c      	movs	r1, #28
 8008da2:	f504 7060 	add.w	r0, r4, #896	; 0x380
 8008da6:	f7ff fbd5 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008daa:	9501      	str	r5, [sp, #4]
 8008dac:	f8cd b000 	str.w	fp, [sp]
 8008db0:	4b28      	ldr	r3, [pc, #160]	; (8008e54 <_ZN5codal15STM32BluePillIOC1Ev+0x35c>)
 8008db2:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008db6:	211d      	movs	r1, #29
 8008db8:	f504 7068 	add.w	r0, r4, #928	; 0x3a0
 8008dbc:	f7ff fbca 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008dc0:	9501      	str	r5, [sp, #4]
 8008dc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008dcc:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8008dd0:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008dd4:	211e      	movs	r1, #30
 8008dd6:	f504 7070 	add.w	r0, r4, #960	; 0x3c0
 8008dda:	f7ff fbbb 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008dde:	9501      	str	r5, [sp, #4]
 8008de0:	f8cd 9000 	str.w	r9, [sp]
 8008de4:	4b1b      	ldr	r3, [pc, #108]	; (8008e54 <_ZN5codal15STM32BluePillIOC1Ev+0x35c>)
 8008de6:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008dea:	211f      	movs	r1, #31
 8008dec:	f504 7078 	add.w	r0, r4, #992	; 0x3e0
 8008df0:	f7ff fbb0 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008df4:	9501      	str	r5, [sp, #4]
 8008df6:	f8cd 8000 	str.w	r8, [sp]
 8008dfa:	4b17      	ldr	r3, [pc, #92]	; (8008e58 <_ZN5codal15STM32BluePillIOC1Ev+0x360>)
 8008dfc:	f240 3205 	movw	r2, #773	; 0x305
 8008e00:	2120      	movs	r1, #32
 8008e02:	eb04 000b 	add.w	r0, r4, fp
 8008e06:	f7ff fba5 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e0a:	9501      	str	r5, [sp, #4]
 8008e0c:	f8cd a000 	str.w	sl, [sp]
 8008e10:	4b11      	ldr	r3, [pc, #68]	; (8008e58 <_ZN5codal15STM32BluePillIOC1Ev+0x360>)
 8008e12:	f240 3205 	movw	r2, #773	; 0x305
 8008e16:	2121      	movs	r1, #33	; 0x21
 8008e18:	f504 6084 	add.w	r0, r4, #1056	; 0x420
 8008e1c:	f7ff fb9a 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e20:	9501      	str	r5, [sp, #4]
 8008e22:	2310      	movs	r3, #16
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	4b0c      	ldr	r3, [pc, #48]	; (8008e58 <_ZN5codal15STM32BluePillIOC1Ev+0x360>)
 8008e28:	f240 3205 	movw	r2, #773	; 0x305
 8008e2c:	2122      	movs	r1, #34	; 0x22
 8008e2e:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 8008e32:	f7ff fb8f 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e36:	9501      	str	r5, [sp, #4]
 8008e38:	2320      	movs	r3, #32
 8008e3a:	9300      	str	r3, [sp, #0]
 8008e3c:	4b06      	ldr	r3, [pc, #24]	; (8008e58 <_ZN5codal15STM32BluePillIOC1Ev+0x360>)
 8008e3e:	f240 3205 	movw	r2, #773	; 0x305
 8008e42:	2123      	movs	r1, #35	; 0x23
 8008e44:	f504 608c 	add.w	r0, r4, #1120	; 0x460
 8008e48:	e008      	b.n	8008e5c <_ZN5codal15STM32BluePillIOC1Ev+0x364>
 8008e4a:	bf00      	nop
 8008e4c:	40010800 	.word	0x40010800
 8008e50:	40010c00 	.word	0x40010c00
 8008e54:	40011000 	.word	0x40011000
 8008e58:	40011400 	.word	0x40011400
 8008e5c:	f7ff fb7a 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e60:	9501      	str	r5, [sp, #4]
 8008e62:	9600      	str	r6, [sp, #0]
 8008e64:	4bce      	ldr	r3, [pc, #824]	; (80091a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8008e66:	f240 3205 	movw	r2, #773	; 0x305
 8008e6a:	2124      	movs	r1, #36	; 0x24
 8008e6c:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 8008e70:	f7ff fb70 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e74:	9501      	str	r5, [sp, #4]
 8008e76:	2380      	movs	r3, #128	; 0x80
 8008e78:	9300      	str	r3, [sp, #0]
 8008e7a:	4bc9      	ldr	r3, [pc, #804]	; (80091a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8008e7c:	f240 3205 	movw	r2, #773	; 0x305
 8008e80:	2125      	movs	r1, #37	; 0x25
 8008e82:	f504 6094 	add.w	r0, r4, #1184	; 0x4a0
 8008e86:	f7ff fb65 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e8a:	9501      	str	r5, [sp, #4]
 8008e8c:	f8cd 9000 	str.w	r9, [sp]
 8008e90:	4bc3      	ldr	r3, [pc, #780]	; (80091a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8008e92:	f240 3205 	movw	r2, #773	; 0x305
 8008e96:	2126      	movs	r1, #38	; 0x26
 8008e98:	f504 6098 	add.w	r0, r4, #1216	; 0x4c0
 8008e9c:	f7ff fb5a 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ea0:	9501      	str	r5, [sp, #4]
 8008ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	4bbd      	ldr	r3, [pc, #756]	; (80091a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8008eaa:	f240 3205 	movw	r2, #773	; 0x305
 8008eae:	2127      	movs	r1, #39	; 0x27
 8008eb0:	f504 609c 	add.w	r0, r4, #1248	; 0x4e0
 8008eb4:	f7ff fb4e 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008eb8:	9501      	str	r5, [sp, #4]
 8008eba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	4bb7      	ldr	r3, [pc, #732]	; (80091a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8008ec2:	f240 3205 	movw	r2, #773	; 0x305
 8008ec6:	2128      	movs	r1, #40	; 0x28
 8008ec8:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 8008ecc:	f7ff fb42 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ed0:	9501      	str	r5, [sp, #4]
 8008ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	4bb1      	ldr	r3, [pc, #708]	; (80091a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8008eda:	f240 3205 	movw	r2, #773	; 0x305
 8008ede:	2129      	movs	r1, #41	; 0x29
 8008ee0:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 8008ee4:	f7ff fb36 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ee8:	9501      	str	r5, [sp, #4]
 8008eea:	9500      	str	r5, [sp, #0]
 8008eec:	4bad      	ldr	r3, [pc, #692]	; (80091a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8008eee:	f240 3202 	movw	r2, #770	; 0x302
 8008ef2:	212a      	movs	r1, #42	; 0x2a
 8008ef4:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
 8008ef8:	f7ff fb2c 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008efc:	9501      	str	r5, [sp, #4]
 8008efe:	9700      	str	r7, [sp, #0]
 8008f00:	4ba8      	ldr	r3, [pc, #672]	; (80091a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8008f02:	f240 3202 	movw	r2, #770	; 0x302
 8008f06:	212b      	movs	r1, #43	; 0x2b
 8008f08:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
 8008f0c:	f7ff fb22 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f10:	9501      	str	r5, [sp, #4]
 8008f12:	f8cd 8000 	str.w	r8, [sp]
 8008f16:	4ba3      	ldr	r3, [pc, #652]	; (80091a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8008f18:	f240 3202 	movw	r2, #770	; 0x302
 8008f1c:	212c      	movs	r1, #44	; 0x2c
 8008f1e:	f504 60b0 	add.w	r0, r4, #1408	; 0x580
 8008f22:	f7ff fb17 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f26:	9501      	str	r5, [sp, #4]
 8008f28:	f8cd a000 	str.w	sl, [sp]
 8008f2c:	4b9d      	ldr	r3, [pc, #628]	; (80091a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8008f2e:	f240 3202 	movw	r2, #770	; 0x302
 8008f32:	212d      	movs	r1, #45	; 0x2d
 8008f34:	f504 60b4 	add.w	r0, r4, #1440	; 0x5a0
 8008f38:	f7ff fb0c 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f3c:	9501      	str	r5, [sp, #4]
 8008f3e:	9600      	str	r6, [sp, #0]
 8008f40:	4b99      	ldr	r3, [pc, #612]	; (80091a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8008f42:	f240 3203 	movw	r2, #771	; 0x303
 8008f46:	212e      	movs	r1, #46	; 0x2e
 8008f48:	f504 60b8 	add.w	r0, r4, #1472	; 0x5c0
 8008f4c:	f7ff fb02 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f50:	9501      	str	r5, [sp, #4]
 8008f52:	2380      	movs	r3, #128	; 0x80
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	4b94      	ldr	r3, [pc, #592]	; (80091a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8008f58:	f240 3203 	movw	r2, #771	; 0x303
 8008f5c:	212f      	movs	r1, #47	; 0x2f
 8008f5e:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 8008f62:	f7ff faf7 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f66:	9501      	str	r5, [sp, #4]
 8008f68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f6c:	9300      	str	r3, [sp, #0]
 8008f6e:	4b8e      	ldr	r3, [pc, #568]	; (80091a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8008f70:	f240 3203 	movw	r2, #771	; 0x303
 8008f74:	2130      	movs	r1, #48	; 0x30
 8008f76:	f504 60c0 	add.w	r0, r4, #1536	; 0x600
 8008f7a:	f7ff faeb 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f7e:	9501      	str	r5, [sp, #4]
 8008f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f84:	9300      	str	r3, [sp, #0]
 8008f86:	4b88      	ldr	r3, [pc, #544]	; (80091a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8008f88:	f240 3203 	movw	r2, #771	; 0x303
 8008f8c:	2131      	movs	r1, #49	; 0x31
 8008f8e:	f504 60c4 	add.w	r0, r4, #1568	; 0x620
 8008f92:	f7ff fadf 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f96:	9501      	str	r5, [sp, #4]
 8008f98:	f8cd 9000 	str.w	r9, [sp]
 8008f9c:	4b80      	ldr	r3, [pc, #512]	; (80091a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8008f9e:	f240 3205 	movw	r2, #773	; 0x305
 8008fa2:	2132      	movs	r1, #50	; 0x32
 8008fa4:	f504 60c8 	add.w	r0, r4, #1600	; 0x640
 8008fa8:	f7ff fad4 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008fac:	9501      	str	r5, [sp, #4]
 8008fae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	4b7a      	ldr	r3, [pc, #488]	; (80091a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8008fb6:	f240 3205 	movw	r2, #773	; 0x305
 8008fba:	2133      	movs	r1, #51	; 0x33
 8008fbc:	f504 60cc 	add.w	r0, r4, #1632	; 0x660
 8008fc0:	f7ff fac8 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008fc4:	9501      	str	r5, [sp, #4]
 8008fc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	4b74      	ldr	r3, [pc, #464]	; (80091a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8008fce:	f240 3205 	movw	r2, #773	; 0x305
 8008fd2:	2134      	movs	r1, #52	; 0x34
 8008fd4:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 8008fd8:	f7ff fabc 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008fdc:	9501      	str	r5, [sp, #4]
 8008fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	4b6e      	ldr	r3, [pc, #440]	; (80091a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8008fe6:	f240 3205 	movw	r2, #773	; 0x305
 8008fea:	2135      	movs	r1, #53	; 0x35
 8008fec:	f504 60d4 	add.w	r0, r4, #1696	; 0x6a0
 8008ff0:	f7ff fab0 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ff4:	9501      	str	r5, [sp, #4]
 8008ff6:	9600      	str	r6, [sp, #0]
 8008ff8:	4b6a      	ldr	r3, [pc, #424]	; (80091a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8008ffa:	f240 3202 	movw	r2, #770	; 0x302
 8008ffe:	2136      	movs	r1, #54	; 0x36
 8009000:	f504 60d8 	add.w	r0, r4, #1728	; 0x6c0
 8009004:	f7ff faa6 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009008:	9501      	str	r5, [sp, #4]
 800900a:	2380      	movs	r3, #128	; 0x80
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	4b65      	ldr	r3, [pc, #404]	; (80091a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8009010:	f240 3202 	movw	r2, #770	; 0x302
 8009014:	2137      	movs	r1, #55	; 0x37
 8009016:	f504 60dc 	add.w	r0, r4, #1760	; 0x6e0
 800901a:	f7ff fa9b 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800901e:	9501      	str	r5, [sp, #4]
 8009020:	9500      	str	r5, [sp, #0]
 8009022:	4b61      	ldr	r3, [pc, #388]	; (80091a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8009024:	f240 3203 	movw	r2, #771	; 0x303
 8009028:	2138      	movs	r1, #56	; 0x38
 800902a:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 800902e:	f7ff fa91 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009032:	9501      	str	r5, [sp, #4]
 8009034:	9700      	str	r7, [sp, #0]
 8009036:	4b5c      	ldr	r3, [pc, #368]	; (80091a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8009038:	f240 3203 	movw	r2, #771	; 0x303
 800903c:	2139      	movs	r1, #57	; 0x39
 800903e:	f504 60e4 	add.w	r0, r4, #1824	; 0x720
 8009042:	f7ff fa87 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009046:	9501      	str	r5, [sp, #4]
 8009048:	9700      	str	r7, [sp, #0]
 800904a:	4b56      	ldr	r3, [pc, #344]	; (80091a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 800904c:	f240 3202 	movw	r2, #770	; 0x302
 8009050:	213a      	movs	r1, #58	; 0x3a
 8009052:	f504 60e8 	add.w	r0, r4, #1856	; 0x740
 8009056:	f7ff fa7d 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800905a:	9501      	str	r5, [sp, #4]
 800905c:	f8cd 8000 	str.w	r8, [sp]
 8009060:	4b50      	ldr	r3, [pc, #320]	; (80091a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8009062:	f240 3202 	movw	r2, #770	; 0x302
 8009066:	213b      	movs	r1, #59	; 0x3b
 8009068:	f504 60ec 	add.w	r0, r4, #1888	; 0x760
 800906c:	f7ff fa72 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009070:	9501      	str	r5, [sp, #4]
 8009072:	f8cd a000 	str.w	sl, [sp]
 8009076:	4b4b      	ldr	r3, [pc, #300]	; (80091a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8009078:	f240 3202 	movw	r2, #770	; 0x302
 800907c:	213c      	movs	r1, #60	; 0x3c
 800907e:	f504 60f0 	add.w	r0, r4, #1920	; 0x780
 8009082:	f7ff fa67 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009086:	9501      	str	r5, [sp, #4]
 8009088:	f8cd 9000 	str.w	r9, [sp]
 800908c:	4b45      	ldr	r3, [pc, #276]	; (80091a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 800908e:	f240 3202 	movw	r2, #770	; 0x302
 8009092:	213d      	movs	r1, #61	; 0x3d
 8009094:	f504 60f4 	add.w	r0, r4, #1952	; 0x7a0
 8009098:	f7ff fa5c 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800909c:	9501      	str	r5, [sp, #4]
 800909e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	4b3f      	ldr	r3, [pc, #252]	; (80091a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 80090a6:	f240 3202 	movw	r2, #770	; 0x302
 80090aa:	213e      	movs	r1, #62	; 0x3e
 80090ac:	f504 60f8 	add.w	r0, r4, #1984	; 0x7c0
 80090b0:	f7ff fa50 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80090b4:	9501      	str	r5, [sp, #4]
 80090b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090c0:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 80090c4:	f240 3202 	movw	r2, #770	; 0x302
 80090c8:	213f      	movs	r1, #63	; 0x3f
 80090ca:	f504 60fc 	add.w	r0, r4, #2016	; 0x7e0
 80090ce:	f7ff fa41 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80090d2:	9501      	str	r5, [sp, #4]
 80090d4:	f8cd b000 	str.w	fp, [sp]
 80090d8:	4b32      	ldr	r3, [pc, #200]	; (80091a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 80090da:	f240 3202 	movw	r2, #770	; 0x302
 80090de:	4631      	mov	r1, r6
 80090e0:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 80090e4:	f7ff fa36 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80090e8:	9501      	str	r5, [sp, #4]
 80090ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80090f8:	f240 3202 	movw	r2, #770	; 0x302
 80090fc:	2141      	movs	r1, #65	; 0x41
 80090fe:	f504 6002 	add.w	r0, r4, #2080	; 0x820
 8009102:	f7ff fa27 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009106:	9501      	str	r5, [sp, #4]
 8009108:	f8cd 9000 	str.w	r9, [sp]
 800910c:	4b26      	ldr	r3, [pc, #152]	; (80091a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 800910e:	f240 3203 	movw	r2, #771	; 0x303
 8009112:	2142      	movs	r1, #66	; 0x42
 8009114:	f504 6004 	add.w	r0, r4, #2112	; 0x840
 8009118:	f7ff fa1c 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800911c:	9501      	str	r5, [sp, #4]
 800911e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	4b20      	ldr	r3, [pc, #128]	; (80091a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8009126:	f240 3203 	movw	r2, #771	; 0x303
 800912a:	2143      	movs	r1, #67	; 0x43
 800912c:	f504 6006 	add.w	r0, r4, #2144	; 0x860
 8009130:	f7ff fa10 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009134:	9501      	str	r5, [sp, #4]
 8009136:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	4b1a      	ldr	r3, [pc, #104]	; (80091a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 800913e:	f240 3203 	movw	r2, #771	; 0x303
 8009142:	2144      	movs	r1, #68	; 0x44
 8009144:	f504 6008 	add.w	r0, r4, #2176	; 0x880
 8009148:	f7ff fa04 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800914c:	9501      	str	r5, [sp, #4]
 800914e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	4b14      	ldr	r3, [pc, #80]	; (80091a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8009156:	f240 3203 	movw	r2, #771	; 0x303
 800915a:	2145      	movs	r1, #69	; 0x45
 800915c:	f504 600a 	add.w	r0, r4, #2208	; 0x8a0
 8009160:	f7ff f9f8 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009164:	9501      	str	r5, [sp, #4]
 8009166:	f8cd 9000 	str.w	r9, [sp]
 800916a:	4b10      	ldr	r3, [pc, #64]	; (80091ac <_ZN5codal15STM32BluePillIOC1Ev+0x6b4>)
 800916c:	f44f 7241 	mov.w	r2, #772	; 0x304
 8009170:	2146      	movs	r1, #70	; 0x46
 8009172:	f504 600c 	add.w	r0, r4, #2240	; 0x8c0
 8009176:	f7ff f9ed 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800917a:	9501      	str	r5, [sp, #4]
 800917c:	f8cd 8000 	str.w	r8, [sp]
 8009180:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8009182:	f240 3205 	movw	r2, #773	; 0x305
 8009186:	2147      	movs	r1, #71	; 0x47
 8009188:	f504 600e 	add.w	r0, r4, #2272	; 0x8e0
 800918c:	f7ff f9e2 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009190:	9501      	str	r5, [sp, #4]
 8009192:	f8cd b000 	str.w	fp, [sp]
 8009196:	4b05      	ldr	r3, [pc, #20]	; (80091ac <_ZN5codal15STM32BluePillIOC1Ev+0x6b4>)
 8009198:	f44f 7241 	mov.w	r2, #772	; 0x304
 800919c:	2148      	movs	r1, #72	; 0x48
 800919e:	e007      	b.n	80091b0 <_ZN5codal15STM32BluePillIOC1Ev+0x6b8>
 80091a0:	40011400 	.word	0x40011400
 80091a4:	40010800 	.word	0x40010800
 80091a8:	40010c00 	.word	0x40010c00
 80091ac:	40011000 	.word	0x40011000
 80091b0:	f504 6010 	add.w	r0, r4, #2304	; 0x900
 80091b4:	f7ff f9ce 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80091b8:	9501      	str	r5, [sp, #4]
 80091ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091c4:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80091c8:	f44f 7241 	mov.w	r2, #772	; 0x304
 80091cc:	2149      	movs	r1, #73	; 0x49
 80091ce:	f504 6012 	add.w	r0, r4, #2336	; 0x920
 80091d2:	f7ff f9bf 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80091d6:	9501      	str	r5, [sp, #4]
 80091d8:	f8cd b000 	str.w	fp, [sp]
 80091dc:	4bd6      	ldr	r3, [pc, #856]	; (8009538 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 80091de:	f240 3203 	movw	r2, #771	; 0x303
 80091e2:	214a      	movs	r1, #74	; 0x4a
 80091e4:	f504 6014 	add.w	r0, r4, #2368	; 0x940
 80091e8:	f7ff f9b4 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80091ec:	9501      	str	r5, [sp, #4]
 80091ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	4bd0      	ldr	r3, [pc, #832]	; (8009538 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 80091f6:	f240 3203 	movw	r2, #771	; 0x303
 80091fa:	214b      	movs	r1, #75	; 0x4b
 80091fc:	f504 6016 	add.w	r0, r4, #2400	; 0x960
 8009200:	f7ff f9a8 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009204:	9501      	str	r5, [sp, #4]
 8009206:	f8cd 9000 	str.w	r9, [sp]
 800920a:	4bcb      	ldr	r3, [pc, #812]	; (8009538 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 800920c:	f240 3203 	movw	r2, #771	; 0x303
 8009210:	214c      	movs	r1, #76	; 0x4c
 8009212:	f504 6018 	add.w	r0, r4, #2432	; 0x980
 8009216:	f7ff f99d 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800921a:	9501      	str	r5, [sp, #4]
 800921c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	4bc5      	ldr	r3, [pc, #788]	; (8009538 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 8009224:	f240 3203 	movw	r2, #771	; 0x303
 8009228:	214d      	movs	r1, #77	; 0x4d
 800922a:	f504 601a 	add.w	r0, r4, #2464	; 0x9a0
 800922e:	f7ff f991 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009232:	9501      	str	r5, [sp, #4]
 8009234:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	4bbf      	ldr	r3, [pc, #764]	; (8009538 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 800923c:	f240 3203 	movw	r2, #771	; 0x303
 8009240:	214e      	movs	r1, #78	; 0x4e
 8009242:	f504 601c 	add.w	r0, r4, #2496	; 0x9c0
 8009246:	f7ff f985 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800924a:	9501      	str	r5, [sp, #4]
 800924c:	9500      	str	r5, [sp, #0]
 800924e:	4bbb      	ldr	r3, [pc, #748]	; (800953c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8009250:	f240 3202 	movw	r2, #770	; 0x302
 8009254:	214f      	movs	r1, #79	; 0x4f
 8009256:	f504 601e 	add.w	r0, r4, #2528	; 0x9e0
 800925a:	f7ff f97b 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800925e:	9501      	str	r5, [sp, #4]
 8009260:	9700      	str	r7, [sp, #0]
 8009262:	4bb6      	ldr	r3, [pc, #728]	; (800953c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8009264:	f240 3202 	movw	r2, #770	; 0x302
 8009268:	2150      	movs	r1, #80	; 0x50
 800926a:	f504 6020 	add.w	r0, r4, #2560	; 0xa00
 800926e:	f7ff f971 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009272:	9501      	str	r5, [sp, #4]
 8009274:	f8cd 8000 	str.w	r8, [sp]
 8009278:	4bb0      	ldr	r3, [pc, #704]	; (800953c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 800927a:	f240 3202 	movw	r2, #770	; 0x302
 800927e:	2151      	movs	r1, #81	; 0x51
 8009280:	f504 6022 	add.w	r0, r4, #2592	; 0xa20
 8009284:	f7ff f966 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009288:	9501      	str	r5, [sp, #4]
 800928a:	f8cd a000 	str.w	sl, [sp]
 800928e:	4bab      	ldr	r3, [pc, #684]	; (800953c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8009290:	f240 3202 	movw	r2, #770	; 0x302
 8009294:	2152      	movs	r1, #82	; 0x52
 8009296:	f504 6024 	add.w	r0, r4, #2624	; 0xa40
 800929a:	f7ff f95b 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800929e:	9501      	str	r5, [sp, #4]
 80092a0:	2310      	movs	r3, #16
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	4ba5      	ldr	r3, [pc, #660]	; (800953c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 80092a6:	f240 3202 	movw	r2, #770	; 0x302
 80092aa:	2153      	movs	r1, #83	; 0x53
 80092ac:	f504 6026 	add.w	r0, r4, #2656	; 0xa60
 80092b0:	f7ff f950 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80092b4:	9501      	str	r5, [sp, #4]
 80092b6:	f8cd a000 	str.w	sl, [sp]
 80092ba:	4ba1      	ldr	r3, [pc, #644]	; (8009540 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 80092bc:	f240 3205 	movw	r2, #773	; 0x305
 80092c0:	2154      	movs	r1, #84	; 0x54
 80092c2:	f504 6028 	add.w	r0, r4, #2688	; 0xa80
 80092c6:	f7ff f945 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80092ca:	9501      	str	r5, [sp, #4]
 80092cc:	2310      	movs	r3, #16
 80092ce:	9300      	str	r3, [sp, #0]
 80092d0:	4b9b      	ldr	r3, [pc, #620]	; (8009540 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 80092d2:	f240 3205 	movw	r2, #773	; 0x305
 80092d6:	2155      	movs	r1, #85	; 0x55
 80092d8:	f504 602a 	add.w	r0, r4, #2720	; 0xaa0
 80092dc:	f7ff f93a 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80092e0:	9501      	str	r5, [sp, #4]
 80092e2:	2320      	movs	r3, #32
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	4b96      	ldr	r3, [pc, #600]	; (8009540 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 80092e8:	f240 3205 	movw	r2, #773	; 0x305
 80092ec:	2156      	movs	r1, #86	; 0x56
 80092ee:	f504 602c 	add.w	r0, r4, #2752	; 0xac0
 80092f2:	f7ff f92f 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80092f6:	9501      	str	r5, [sp, #4]
 80092f8:	9600      	str	r6, [sp, #0]
 80092fa:	4b91      	ldr	r3, [pc, #580]	; (8009540 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 80092fc:	f240 3205 	movw	r2, #773	; 0x305
 8009300:	2157      	movs	r1, #87	; 0x57
 8009302:	f504 602e 	add.w	r0, r4, #2784	; 0xae0
 8009306:	f7ff f925 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800930a:	9501      	str	r5, [sp, #4]
 800930c:	2380      	movs	r3, #128	; 0x80
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	4b8b      	ldr	r3, [pc, #556]	; (8009540 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 8009312:	f240 3205 	movw	r2, #773	; 0x305
 8009316:	2158      	movs	r1, #88	; 0x58
 8009318:	f504 6030 	add.w	r0, r4, #2816	; 0xb00
 800931c:	f7ff f91a 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009320:	9501      	str	r5, [sp, #4]
 8009322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009326:	9300      	str	r3, [sp, #0]
 8009328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800932c:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 8009330:	f240 3202 	movw	r2, #770	; 0x302
 8009334:	2159      	movs	r1, #89	; 0x59
 8009336:	f504 6032 	add.w	r0, r4, #2848	; 0xb20
 800933a:	f7ff f90b 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800933e:	9501      	str	r5, [sp, #4]
 8009340:	f8cd b000 	str.w	fp, [sp]
 8009344:	4b7d      	ldr	r3, [pc, #500]	; (800953c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8009346:	f240 3202 	movw	r2, #770	; 0x302
 800934a:	215a      	movs	r1, #90	; 0x5a
 800934c:	f504 6034 	add.w	r0, r4, #2880	; 0xb40
 8009350:	f7ff f900 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009354:	4e78      	ldr	r6, [pc, #480]	; (8009538 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 8009356:	9501      	str	r5, [sp, #4]
 8009358:	f04f 0b40 	mov.w	fp, #64	; 0x40
 800935c:	f8cd b000 	str.w	fp, [sp]
 8009360:	4633      	mov	r3, r6
 8009362:	f240 3203 	movw	r2, #771	; 0x303
 8009366:	215b      	movs	r1, #91	; 0x5b
 8009368:	f504 6036 	add.w	r0, r4, #2912	; 0xb60
 800936c:	f7ff f8f2 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009370:	9501      	str	r5, [sp, #4]
 8009372:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8009376:	f8cd a000 	str.w	sl, [sp]
 800937a:	4633      	mov	r3, r6
 800937c:	f240 3203 	movw	r2, #771	; 0x303
 8009380:	215c      	movs	r1, #92	; 0x5c
 8009382:	f504 6038 	add.w	r0, r4, #2944	; 0xb80
 8009386:	f7ff f8e5 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800938a:	9501      	str	r5, [sp, #4]
 800938c:	2720      	movs	r7, #32
 800938e:	9700      	str	r7, [sp, #0]
 8009390:	4633      	mov	r3, r6
 8009392:	f240 3203 	movw	r2, #771	; 0x303
 8009396:	215d      	movs	r1, #93	; 0x5d
 8009398:	f504 603a 	add.w	r0, r4, #2976	; 0xba0
 800939c:	f7ff f8da 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80093a0:	9501      	str	r5, [sp, #4]
 80093a2:	f8cd b000 	str.w	fp, [sp]
 80093a6:	4633      	mov	r3, r6
 80093a8:	f240 3203 	movw	r2, #771	; 0x303
 80093ac:	215e      	movs	r1, #94	; 0x5e
 80093ae:	f504 603c 	add.w	r0, r4, #3008	; 0xbc0
 80093b2:	f7ff f8cf 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80093b6:	9501      	str	r5, [sp, #4]
 80093b8:	f8cd a000 	str.w	sl, [sp]
 80093bc:	4633      	mov	r3, r6
 80093be:	f240 3203 	movw	r2, #771	; 0x303
 80093c2:	215f      	movs	r1, #95	; 0x5f
 80093c4:	f504 603e 	add.w	r0, r4, #3040	; 0xbe0
 80093c8:	f7ff f8c4 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80093cc:	9501      	str	r5, [sp, #4]
 80093ce:	9700      	str	r7, [sp, #0]
 80093d0:	4633      	mov	r3, r6
 80093d2:	f240 3203 	movw	r2, #771	; 0x303
 80093d6:	2160      	movs	r1, #96	; 0x60
 80093d8:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
 80093dc:	f7ff f8ba 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80093e0:	9501      	str	r5, [sp, #4]
 80093e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	4633      	mov	r3, r6
 80093ea:	f240 3203 	movw	r2, #771	; 0x303
 80093ee:	2161      	movs	r1, #97	; 0x61
 80093f0:	f504 6042 	add.w	r0, r4, #3104	; 0xc20
 80093f4:	f7ff f8ae 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80093f8:	9501      	str	r5, [sp, #4]
 80093fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	4633      	mov	r3, r6
 8009402:	f240 3203 	movw	r2, #771	; 0x303
 8009406:	2162      	movs	r1, #98	; 0x62
 8009408:	f504 6044 	add.w	r0, r4, #3136	; 0xc40
 800940c:	f7ff f8a2 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009410:	9501      	str	r5, [sp, #4]
 8009412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	4633      	mov	r3, r6
 800941a:	f240 3203 	movw	r2, #771	; 0x303
 800941e:	2163      	movs	r1, #99	; 0x63
 8009420:	f504 6046 	add.w	r0, r4, #3168	; 0xc60
 8009424:	f7ff f896 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009428:	9501      	str	r5, [sp, #4]
 800942a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	4633      	mov	r3, r6
 8009432:	f240 3203 	movw	r2, #771	; 0x303
 8009436:	2164      	movs	r1, #100	; 0x64
 8009438:	f504 6048 	add.w	r0, r4, #3200	; 0xc80
 800943c:	f7ff f88a 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009440:	9501      	str	r5, [sp, #4]
 8009442:	f8cd 9000 	str.w	r9, [sp]
 8009446:	4633      	mov	r3, r6
 8009448:	f240 3203 	movw	r2, #771	; 0x303
 800944c:	2165      	movs	r1, #101	; 0x65
 800944e:	f504 604a 	add.w	r0, r4, #3232	; 0xca0
 8009452:	f7ff f87f 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009456:	9501      	str	r5, [sp, #4]
 8009458:	f04f 0810 	mov.w	r8, #16
 800945c:	f8cd 8000 	str.w	r8, [sp]
 8009460:	4b36      	ldr	r3, [pc, #216]	; (800953c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8009462:	f240 3202 	movw	r2, #770	; 0x302
 8009466:	2166      	movs	r1, #102	; 0x66
 8009468:	f504 604c 	add.w	r0, r4, #3264	; 0xcc0
 800946c:	f7ff f872 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009470:	9501      	str	r5, [sp, #4]
 8009472:	9700      	str	r7, [sp, #0]
 8009474:	4b31      	ldr	r3, [pc, #196]	; (800953c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8009476:	f240 3202 	movw	r2, #770	; 0x302
 800947a:	2167      	movs	r1, #103	; 0x67
 800947c:	f504 604e 	add.w	r0, r4, #3296	; 0xce0
 8009480:	f7ff f868 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009484:	9501      	str	r5, [sp, #4]
 8009486:	f8cd b000 	str.w	fp, [sp]
 800948a:	4b2c      	ldr	r3, [pc, #176]	; (800953c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 800948c:	f240 3202 	movw	r2, #770	; 0x302
 8009490:	2168      	movs	r1, #104	; 0x68
 8009492:	f504 6050 	add.w	r0, r4, #3328	; 0xd00
 8009496:	f7ff f85d 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800949a:	9501      	str	r5, [sp, #4]
 800949c:	f8cd a000 	str.w	sl, [sp]
 80094a0:	4b26      	ldr	r3, [pc, #152]	; (800953c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 80094a2:	f240 3202 	movw	r2, #770	; 0x302
 80094a6:	2169      	movs	r1, #105	; 0x69
 80094a8:	f504 6052 	add.w	r0, r4, #3360	; 0xd20
 80094ac:	f7ff f852 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80094b0:	9501      	str	r5, [sp, #4]
 80094b2:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
 80094b6:	f8cd a000 	str.w	sl, [sp]
 80094ba:	4b20      	ldr	r3, [pc, #128]	; (800953c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 80094bc:	f240 3202 	movw	r2, #770	; 0x302
 80094c0:	216a      	movs	r1, #106	; 0x6a
 80094c2:	f504 6054 	add.w	r0, r4, #3392	; 0xd40
 80094c6:	f7ff f845 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80094ca:	9501      	str	r5, [sp, #4]
 80094cc:	2308      	movs	r3, #8
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	4633      	mov	r3, r6
 80094d2:	f240 3203 	movw	r2, #771	; 0x303
 80094d6:	216b      	movs	r1, #107	; 0x6b
 80094d8:	f504 6056 	add.w	r0, r4, #3424	; 0xd60
 80094dc:	f7ff f83a 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80094e0:	9501      	str	r5, [sp, #4]
 80094e2:	f8cd 8000 	str.w	r8, [sp]
 80094e6:	4633      	mov	r3, r6
 80094e8:	f240 3203 	movw	r2, #771	; 0x303
 80094ec:	216c      	movs	r1, #108	; 0x6c
 80094ee:	f504 6058 	add.w	r0, r4, #3456	; 0xd80
 80094f2:	f7ff f82f 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80094f6:	9501      	str	r5, [sp, #4]
 80094f8:	9700      	str	r7, [sp, #0]
 80094fa:	4633      	mov	r3, r6
 80094fc:	f240 3203 	movw	r2, #771	; 0x303
 8009500:	216d      	movs	r1, #109	; 0x6d
 8009502:	f504 605a 	add.w	r0, r4, #3488	; 0xda0
 8009506:	f7ff f825 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800950a:	9501      	str	r5, [sp, #4]
 800950c:	f8cd 9000 	str.w	r9, [sp]
 8009510:	4633      	mov	r3, r6
 8009512:	f240 3203 	movw	r2, #771	; 0x303
 8009516:	216e      	movs	r1, #110	; 0x6e
 8009518:	f504 605c 	add.w	r0, r4, #3520	; 0xdc0
 800951c:	f7ff f81a 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009520:	9501      	str	r5, [sp, #4]
 8009522:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8009526:	f8cd b000 	str.w	fp, [sp]
 800952a:	4633      	mov	r3, r6
 800952c:	f240 3203 	movw	r2, #771	; 0x303
 8009530:	216f      	movs	r1, #111	; 0x6f
 8009532:	f504 605e 	add.w	r0, r4, #3552	; 0xde0
 8009536:	e005      	b.n	8009544 <_ZN5codal15STM32BluePillIOC1Ev+0xa4c>
 8009538:	40010c00 	.word	0x40010c00
 800953c:	40010800 	.word	0x40010800
 8009540:	40011400 	.word	0x40011400
 8009544:	f7ff f806 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009548:	9501      	str	r5, [sp, #4]
 800954a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	4633      	mov	r3, r6
 8009552:	f240 3203 	movw	r2, #771	; 0x303
 8009556:	2170      	movs	r1, #112	; 0x70
 8009558:	f504 6060 	add.w	r0, r4, #3584	; 0xe00
 800955c:	f7fe fffa 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009560:	9501      	str	r5, [sp, #4]
 8009562:	f8cd a000 	str.w	sl, [sp]
 8009566:	4633      	mov	r3, r6
 8009568:	f240 3203 	movw	r2, #771	; 0x303
 800956c:	2171      	movs	r1, #113	; 0x71
 800956e:	f504 6062 	add.w	r0, r4, #3616	; 0xe20
 8009572:	f7fe ffef 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009576:	9501      	str	r5, [sp, #4]
 8009578:	f8cd a000 	str.w	sl, [sp]
 800957c:	4b33      	ldr	r3, [pc, #204]	; (800964c <_ZN5codal15STM32BluePillIOC1Ev+0xb54>)
 800957e:	f240 3202 	movw	r2, #770	; 0x302
 8009582:	2172      	movs	r1, #114	; 0x72
 8009584:	f504 6064 	add.w	r0, r4, #3648	; 0xe40
 8009588:	f7fe ffe4 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800958c:	9501      	str	r5, [sp, #4]
 800958e:	2308      	movs	r3, #8
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	4633      	mov	r3, r6
 8009594:	f240 3203 	movw	r2, #771	; 0x303
 8009598:	2173      	movs	r1, #115	; 0x73
 800959a:	f504 6066 	add.w	r0, r4, #3680	; 0xe60
 800959e:	f7fe ffd9 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80095a2:	9501      	str	r5, [sp, #4]
 80095a4:	f8cd 8000 	str.w	r8, [sp]
 80095a8:	4633      	mov	r3, r6
 80095aa:	f240 3203 	movw	r2, #771	; 0x303
 80095ae:	2174      	movs	r1, #116	; 0x74
 80095b0:	f504 6068 	add.w	r0, r4, #3712	; 0xe80
 80095b4:	f7fe ffce 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80095b8:	9501      	str	r5, [sp, #4]
 80095ba:	9700      	str	r7, [sp, #0]
 80095bc:	4633      	mov	r3, r6
 80095be:	f240 3203 	movw	r2, #771	; 0x303
 80095c2:	2175      	movs	r1, #117	; 0x75
 80095c4:	f504 606a 	add.w	r0, r4, #3744	; 0xea0
 80095c8:	f7fe ffc4 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80095cc:	9501      	str	r5, [sp, #4]
 80095ce:	f8cd 8000 	str.w	r8, [sp]
 80095d2:	4b1e      	ldr	r3, [pc, #120]	; (800964c <_ZN5codal15STM32BluePillIOC1Ev+0xb54>)
 80095d4:	f240 3202 	movw	r2, #770	; 0x302
 80095d8:	2176      	movs	r1, #118	; 0x76
 80095da:	f504 606c 	add.w	r0, r4, #3776	; 0xec0
 80095de:	f7fe ffb9 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80095e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80095e6:	9501      	str	r5, [sp, #4]
 80095e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	4633      	mov	r3, r6
 80095f0:	f44f 7241 	mov.w	r2, #772	; 0x304
 80095f4:	2177      	movs	r1, #119	; 0x77
 80095f6:	f504 606e 	add.w	r0, r4, #3808	; 0xee0
 80095fa:	f7fe ffab 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80095fe:	9501      	str	r5, [sp, #4]
 8009600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	4633      	mov	r3, r6
 8009608:	f44f 7241 	mov.w	r2, #772	; 0x304
 800960c:	2178      	movs	r1, #120	; 0x78
 800960e:	f504 6070 	add.w	r0, r4, #3840	; 0xf00
 8009612:	f7fe ff9f 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009616:	9501      	str	r5, [sp, #4]
 8009618:	f8cd 9000 	str.w	r9, [sp]
 800961c:	4633      	mov	r3, r6
 800961e:	f44f 7241 	mov.w	r2, #772	; 0x304
 8009622:	2179      	movs	r1, #121	; 0x79
 8009624:	f504 6072 	add.w	r0, r4, #3872	; 0xf20
 8009628:	f7fe ff94 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800962c:	9501      	str	r5, [sp, #4]
 800962e:	f8cd b000 	str.w	fp, [sp]
 8009632:	4633      	mov	r3, r6
 8009634:	f44f 7241 	mov.w	r2, #772	; 0x304
 8009638:	217a      	movs	r1, #122	; 0x7a
 800963a:	f504 6074 	add.w	r0, r4, #3904	; 0xf40
 800963e:	f7fe ff89 	bl	8008554 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
vbat        (CM_PIN_VBAT       , RCC_GPIOADC, GPIOADC, GPIOVBAT, PIN_CAPABILITY_DIGITAL),
#endif  //  TODO

//  End of autogenerated section
{
}
 8009642:	4620      	mov	r0, r4
 8009644:	b003      	add	sp, #12
 8009646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964a:	bf00      	nop
 800964c:	40010800 	.word	0x40010800

08009650 <_Z41__static_initialization_and_destruction_0ii>:

void UARTInterface::write(uint8_t ch) {
    //  Send the byte to the UART port.
    //  debug_println("uart_write"); debug_flush();
    usart_send(USART2, ch);
}
 8009650:	2801      	cmp	r0, #1
 8009652:	d000      	beq.n	8009656 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8009654:	4770      	bx	lr
 8009656:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800965a:	4299      	cmp	r1, r3
 800965c:	d1fa      	bne.n	8009654 <_Z41__static_initialization_and_destruction_0ii+0x4>
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 800965e:	4b02      	ldr	r3, [pc, #8]	; (8009668 <_Z41__static_initialization_and_destruction_0ii+0x18>)
 8009660:	2200      	movs	r2, #0
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	641a      	str	r2, [r3, #64]	; 0x40
 8009666:	e7f5      	b.n	8009654 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8009668:	20002194 	.word	0x20002194

0800966c <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>:
            int res = HAL_I2C_Init(&i2c);
            CODAL_ASSERT(res == HAL_OK);
#endif  //  TODO            
        }

        I2C::I2C(codal::Pin &sda, codal::Pin &scl) : codal::I2C(sda, scl), sda(sda), scl(scl)
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	4604      	mov	r4, r0
 8009670:	460e      	mov	r6, r1
 8009672:	4615      	mov	r5, r2
 8009674:	f000 f8c2 	bl	80097fc <_ZN5codal3I2CC1ERNS_3PinES2_>
 8009678:	4b02      	ldr	r3, [pc, #8]	; (8009684 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_+0x18>)
 800967a:	6023      	str	r3, [r4, #0]
 800967c:	6066      	str	r6, [r4, #4]
 800967e:	60a5      	str	r5, [r4, #8]
            i2c.Init.OwnAddress1 = 0xFE;
            i2c.Init.OwnAddress2 = 0xFE;

            needsInit = true;
#endif  //  TODO            
        }
 8009680:	4620      	mov	r0, r4
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	0800aef4 	.word	0x0800aef4

08009688 <_ZN5codal3_cm3SPI4initEv>:
            p->setup(mode, cnf);
            CODAL_ASSERT(!prev || prev == peri);
            return peri;
        }

        void SPI::init() {
 8009688:	b538      	push	{r3, r4, r5, lr}
            auto res = HAL_OK;
            if (!needsInit) { return; }
 800968a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800968e:	b903      	cbnz	r3, 8009692 <_ZN5codal3_cm3SPI4initEv+0xa>
            }
            spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
            auto res = HAL_SPI_Init(&spi);
#endif  //  TODO
            CODAL_ASSERT(res == HAL_OK);
        }
 8009690:	bd38      	pop	{r3, r4, r5, pc}
 8009692:	4604      	mov	r4, r0
            needsInit = false;
 8009694:	2500      	movs	r5, #0
 8009696:	f880 5020 	strb.w	r5, [r0, #32]
            uint32_t instance = _codal_setup_pin(sclk, 0, PinMap_SPI_SCK);
 800969a:	4a0d      	ldr	r2, [pc, #52]	; (80096d0 <_ZN5codal3_cm3SPI4initEv+0x48>)
 800969c:	4629      	mov	r1, r5
 800969e:	68c0      	ldr	r0, [r0, #12]
 80096a0:	f001 f8b1 	bl	800a806 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            instance = _codal_setup_pin(miso, 0, PinMap_SPI_MISO);
 80096a4:	4a0b      	ldr	r2, [pc, #44]	; (80096d4 <_ZN5codal3_cm3SPI4initEv+0x4c>)
 80096a6:	4629      	mov	r1, r5
 80096a8:	68a0      	ldr	r0, [r4, #8]
 80096aa:	f001 f8ac 	bl	800a806 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            instance = _codal_setup_pin(mosi, 0, PinMap_SPI_MOSI);
 80096ae:	4a0a      	ldr	r2, [pc, #40]	; (80096d8 <_ZN5codal3_cm3SPI4initEv+0x50>)
 80096b0:	4629      	mov	r1, r5
 80096b2:	6860      	ldr	r0, [r4, #4]
 80096b4:	f001 f8a7 	bl	800a806 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            instance = _codal_setup_pin(nss, 0, PinMap_SPI_NSS);
 80096b8:	4a08      	ldr	r2, [pc, #32]	; (80096dc <_ZN5codal3_cm3SPI4initEv+0x54>)
 80096ba:	4629      	mov	r1, r5
 80096bc:	6920      	ldr	r0, [r4, #16]
 80096be:	f001 f8a2 	bl	800a806 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            LOG("SPI instance %p", instance);
 80096c2:	4807      	ldr	r0, [pc, #28]	; (80096e0 <_ZN5codal3_cm3SPI4initEv+0x58>)
 80096c4:	f7f9 f998 	bl	80029f8 <debug_println>
 80096c8:	f7f9 f9bd 	bl	8002a46 <debug_flush>
 80096cc:	e7e0      	b.n	8009690 <_ZN5codal3_cm3SPI4initEv+0x8>
 80096ce:	bf00      	nop
 80096d0:	0800aea4 	.word	0x0800aea4
 80096d4:	0800adcc 	.word	0x0800adcc
 80096d8:	0800ae14 	.word	0x0800ae14
 80096dc:	0800ae5c 	.word	0x0800ae5c
 80096e0:	0800af18 	.word	0x0800af18

080096e4 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_>:
            debug_print(" sclk "); debug_print(sclk.name); 
            debug_println(""); debug_flush();
        }

        //  New constructor.  Called by codal-libopencm3.
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk, Pin &nss) : codal::SPI() {
 80096e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e8:	4604      	mov	r4, r0
 80096ea:	4688      	mov	r8, r1
 80096ec:	4617      	mov	r7, r2
 80096ee:	461e      	mov	r6, r3
 80096f0:	9d06      	ldr	r5, [sp, #24]
 80096f2:	4b1c      	ldr	r3, [pc, #112]	; (8009764 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x80>)
 80096f4:	6003      	str	r3, [r0, #0]
            this->mosi = &mosi;
 80096f6:	6061      	str	r1, [r4, #4]
            this->miso = &miso;
 80096f8:	60a2      	str	r2, [r4, #8]
            this->sclk = &sclk;
 80096fa:	60c6      	str	r6, [r0, #12]
            this->nss = &nss;
 80096fc:	6105      	str	r5, [r0, #16]
            // ZERO(spi); ZERO(hdma_tx); ZERO(hdma_rx);
            this->needsInit = true;
 80096fe:	2301      	movs	r3, #1
 8009700:	f880 3020 	strb.w	r3, [r0, #32]
            this->transferCompleteEventCode = codal::allocateNotifyEvent();
 8009704:	f7fe fda2 	bl	800824c <_ZN5codal19allocateNotifyEventEv>
 8009708:	84a0      	strh	r0, [r4, #36]	; 0x24
            for (unsigned i = 0; i < ARRAY_SIZE(_instances); ++i) {
 800970a:	2300      	movs	r3, #0
 800970c:	2b03      	cmp	r3, #3
 800970e:	d808      	bhi.n	8009722 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x3e>
                if (_instances[i] == NULL) {
 8009710:	4a15      	ldr	r2, [pc, #84]	; (8009768 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x84>)
 8009712:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009716:	b10a      	cbz	r2, 800971c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x38>
            for (unsigned i = 0; i < ARRAY_SIZE(_instances); ++i) {
 8009718:	3301      	adds	r3, #1
 800971a:	e7f7      	b.n	800970c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x28>
                    _instances[i] = this;
 800971c:	4a12      	ldr	r2, [pc, #72]	; (8009768 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x84>)
 800971e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
                    break;
                }
            }
            debug_print("spi mosi "); debug_print(mosi.name); 
 8009722:	4812      	ldr	r0, [pc, #72]	; (800976c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x88>)
 8009724:	f7f9 f994 	bl	8002a50 <debug_print>
 8009728:	f898 0010 	ldrb.w	r0, [r8, #16]
 800972c:	f7f9 f94a 	bl	80029c4 <_Z11debug_printi>
            debug_print(" miso "); debug_print(miso.name); 
 8009730:	480f      	ldr	r0, [pc, #60]	; (8009770 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x8c>)
 8009732:	f7f9 f98d 	bl	8002a50 <debug_print>
 8009736:	7c38      	ldrb	r0, [r7, #16]
 8009738:	f7f9 f944 	bl	80029c4 <_Z11debug_printi>
            debug_print(" sclk "); debug_print(sclk.name); 
 800973c:	480d      	ldr	r0, [pc, #52]	; (8009774 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x90>)
 800973e:	f7f9 f987 	bl	8002a50 <debug_print>
 8009742:	7c30      	ldrb	r0, [r6, #16]
 8009744:	f7f9 f93e 	bl	80029c4 <_Z11debug_printi>
            debug_print(" nss "); debug_print(nss.name); 
 8009748:	480b      	ldr	r0, [pc, #44]	; (8009778 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x94>)
 800974a:	f7f9 f981 	bl	8002a50 <debug_print>
 800974e:	7c28      	ldrb	r0, [r5, #16]
 8009750:	f7f9 f938 	bl	80029c4 <_Z11debug_printi>
            debug_println(""); debug_flush();
 8009754:	4809      	ldr	r0, [pc, #36]	; (800977c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x98>)
 8009756:	f7f9 f94f 	bl	80029f8 <debug_println>
 800975a:	f7f9 f974 	bl	8002a46 <debug_flush>
        }
 800975e:	4620      	mov	r0, r4
 8009760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009764:	0800af68 	.word	0x0800af68
 8009768:	20002200 	.word	0x20002200
 800976c:	0800af4c 	.word	0x0800af4c
 8009770:	0800af3c 	.word	0x0800af3c
 8009774:	0800af44 	.word	0x0800af44
 8009778:	0800af58 	.word	0x0800af58
 800977c:	0800ac28 	.word	0x0800ac28

08009780 <pinmap_peripheral>:

static CmPeripheral pinmap_find_peripheral(codal::PinNumber pin, const PinMap *map);
static CmPinMode pinmap_find_mode(codal::PinNumber pin, const PinMap *map);
static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap *map);

CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
 8009780:	b510      	push	{r4, lr}
    //  Return the peripheral for the pin e.g. SPI1.
    CmPeripheral peripheral = CM_PERIPHERAL_NC;
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 8009782:	28ff      	cmp	r0, #255	; 0xff
 8009784:	d00d      	beq.n	80097a2 <pinmap_peripheral+0x22>

    peripheral = pinmap_find_peripheral(pin, map);
 8009786:	f001 f87d 	bl	800a884 <_ZL22pinmap_find_peripheralhPK6PinMap>
 800978a:	4604      	mov	r4, r0
    if (peripheral == CM_PERIPHERAL_NC) // no mapping available
 800978c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009790:	d001      	beq.n	8009796 <pinmap_peripheral+0x16>
        { error("pinmap not found for peripheral"); }
    return peripheral;
}
 8009792:	4620      	mov	r0, r4
 8009794:	bd10      	pop	{r4, pc}
        { error("pinmap not found for peripheral"); }
 8009796:	4804      	ldr	r0, [pc, #16]	; (80097a8 <pinmap_peripheral+0x28>)
 8009798:	f7f9 f92e 	bl	80029f8 <debug_println>
 800979c:	f7f9 f953 	bl	8002a46 <debug_flush>
 80097a0:	e7f7      	b.n	8009792 <pinmap_peripheral+0x12>
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 80097a2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80097a6:	e7f4      	b.n	8009792 <pinmap_peripheral+0x12>
 80097a8:	0800afb4 	.word	0x0800afb4

080097ac <pinmap_mode>:

CmPinMode pinmap_mode(codal::PinNumber pin, const PinMap* map) {
 80097ac:	b510      	push	{r4, lr}
    //  Return the pin mode for the peripheral e.g. GPIO_MODE_OUTPUT_2_MHZ.
    CmPinMode mode = CM_PINMODE_NC;
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }
 80097ae:	28ff      	cmp	r0, #255	; 0xff
 80097b0:	d00c      	beq.n	80097cc <pinmap_mode+0x20>

    mode = pinmap_find_mode(pin, map);
 80097b2:	f001 f873 	bl	800a89c <_ZL16pinmap_find_modehPK6PinMap>
 80097b6:	4604      	mov	r4, r0
    if (mode == CM_PINMODE_NC) // no mapping available
 80097b8:	28ff      	cmp	r0, #255	; 0xff
 80097ba:	d001      	beq.n	80097c0 <pinmap_mode+0x14>
        { error("pinmap not found for mode"); }
    return mode;
}
 80097bc:	4620      	mov	r0, r4
 80097be:	bd10      	pop	{r4, pc}
        { error("pinmap not found for mode"); }
 80097c0:	4803      	ldr	r0, [pc, #12]	; (80097d0 <pinmap_mode+0x24>)
 80097c2:	f7f9 f919 	bl	80029f8 <debug_println>
 80097c6:	f7f9 f93e 	bl	8002a46 <debug_flush>
 80097ca:	e7f7      	b.n	80097bc <pinmap_mode+0x10>
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }
 80097cc:	24ff      	movs	r4, #255	; 0xff
 80097ce:	e7f5      	b.n	80097bc <pinmap_mode+0x10>
 80097d0:	0800af98 	.word	0x0800af98

080097d4 <pinmap_cnf>:

CmPinCnf pinmap_cnf(codal::PinNumber pin, const PinMap* map) {
 80097d4:	b510      	push	{r4, lr}
    //  Return the pin config for the peripheral e.g. GPIO_CNF_OUTPUT_PUSHPULL.
    CmPinCnf cnf = CM_PINCNF_NC;
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }
 80097d6:	28ff      	cmp	r0, #255	; 0xff
 80097d8:	d00c      	beq.n	80097f4 <pinmap_cnf+0x20>

    cnf = pinmap_find_cnf(pin, map);
 80097da:	f001 f86a 	bl	800a8b2 <_ZL15pinmap_find_cnfhPK6PinMap>
 80097de:	4604      	mov	r4, r0
    if (cnf == CM_PINCNF_NC) // no mapping available
 80097e0:	28ff      	cmp	r0, #255	; 0xff
 80097e2:	d001      	beq.n	80097e8 <pinmap_cnf+0x14>
        { error("pinmap not found for cnf"); }
    return cnf;
}
 80097e4:	4620      	mov	r0, r4
 80097e6:	bd10      	pop	{r4, pc}
        { error("pinmap not found for cnf"); }
 80097e8:	4803      	ldr	r0, [pc, #12]	; (80097f8 <pinmap_cnf+0x24>)
 80097ea:	f7f9 f905 	bl	80029f8 <debug_println>
 80097ee:	f7f9 f92a 	bl	8002a46 <debug_flush>
 80097f2:	e7f7      	b.n	80097e4 <pinmap_cnf+0x10>
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }
 80097f4:	24ff      	movs	r4, #255	; 0xff
 80097f6:	e7f5      	b.n	80097e4 <pinmap_cnf+0x10>
 80097f8:	0800af7c 	.word	0x0800af7c

080097fc <_ZN5codal3I2CC1ERNS_3PinES2_>:
namespace codal
{
/**
  * Constructor.
  */
I2C::I2C(Pin &sda, Pin &scl)
 80097fc:	4b01      	ldr	r3, [pc, #4]	; (8009804 <_ZN5codal3I2CC1ERNS_3PinES2_+0x8>)
 80097fe:	6003      	str	r3, [r0, #0]
{
}
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	0800afdc 	.word	0x0800afdc

08009808 <_ZN5codal14CodalComponent16periodicCallbackEv>:
        virtual void periodicCallback() {}
 8009808:	4770      	bx	lr

0800980a <_ZN5codal14CodalComponent12idleCallbackEv>:
        virtual void idleCallback() {}
 800980a:	4770      	bx	lr

0800980c <_GLOBAL__sub_I_bluepill>:
}
 800980c:	b508      	push	{r3, lr}
 800980e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009812:	2001      	movs	r0, #1
 8009814:	f7fd fe68 	bl	80074e8 <_Z41__static_initialization_and_destruction_0ii>
 8009818:	bd08      	pop	{r3, pc}

0800981a <_GLOBAL__sub_I_serialPort>:
 800981a:	b508      	push	{r3, lr}
 800981c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009820:	2001      	movs	r0, #1
 8009822:	f7fd ff1f 	bl	8007664 <_Z41__static_initialization_and_destruction_0ii>
 8009826:	bd08      	pop	{r3, pc}

08009828 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>:
{
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	4604      	mov	r4, r0
 800982c:	460d      	mov	r5, r1
    target_disable_irq();
 800982e:	f7f7 f985 	bl	8000b3c <target_disable_irq>
    f->queue = queue;
 8009832:	6165      	str	r5, [r4, #20]
    if (*queue == NULL)
 8009834:	682a      	ldr	r2, [r5, #0]
 8009836:	b92a      	cbnz	r2, 8009844 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x1c>
        f->next = NULL;
 8009838:	2300      	movs	r3, #0
 800983a:	61a3      	str	r3, [r4, #24]
        f->prev = NULL;
 800983c:	61e3      	str	r3, [r4, #28]
        *queue = f;
 800983e:	602c      	str	r4, [r5, #0]
 8009840:	e006      	b.n	8009850 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x28>
            last = last->next;
 8009842:	461a      	mov	r2, r3
        while (last->next != NULL)
 8009844:	6993      	ldr	r3, [r2, #24]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1fb      	bne.n	8009842 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x1a>
        last->next = f;
 800984a:	6194      	str	r4, [r2, #24]
        f->prev = last;
 800984c:	61e2      	str	r2, [r4, #28]
        f->next = NULL;
 800984e:	61a3      	str	r3, [r4, #24]
    target_enable_irq();
 8009850:	f7f7 f972 	bl	8000b38 <target_enable_irq>
}
 8009854:	bd38      	pop	{r3, r4, r5, pc}

08009856 <_ZN5codal13dequeue_fiberEPNS_5FiberE>:
    if (f->queue == NULL)
 8009856:	6943      	ldr	r3, [r0, #20]
 8009858:	b1b3      	cbz	r3, 8009888 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x32>
{
 800985a:	b510      	push	{r4, lr}
 800985c:	4604      	mov	r4, r0
    target_disable_irq();
 800985e:	f7f7 f96d 	bl	8000b3c <target_disable_irq>
    if (f->prev != NULL)
 8009862:	69e3      	ldr	r3, [r4, #28]
 8009864:	b163      	cbz	r3, 8009880 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x2a>
        f->prev->next = f->next;
 8009866:	69a2      	ldr	r2, [r4, #24]
 8009868:	619a      	str	r2, [r3, #24]
    if(f->next)
 800986a:	69a3      	ldr	r3, [r4, #24]
 800986c:	b10b      	cbz	r3, 8009872 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x1c>
        f->next->prev = f->prev;
 800986e:	69e2      	ldr	r2, [r4, #28]
 8009870:	61da      	str	r2, [r3, #28]
    f->next = NULL;
 8009872:	2300      	movs	r3, #0
 8009874:	61a3      	str	r3, [r4, #24]
    f->prev = NULL;
 8009876:	61e3      	str	r3, [r4, #28]
    f->queue = NULL;
 8009878:	6163      	str	r3, [r4, #20]
    target_enable_irq();
 800987a:	f7f7 f95d 	bl	8000b38 <target_enable_irq>
}
 800987e:	bd10      	pop	{r4, pc}
        *(f->queue) = f->next;
 8009880:	6963      	ldr	r3, [r4, #20]
 8009882:	69a2      	ldr	r2, [r4, #24]
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	e7f0      	b.n	800986a <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x14>
 8009888:	4770      	bx	lr

0800988a <_ZN5codal12create_fiberEPFvvES1_>:
{
 800988a:	b538      	push	{r3, r4, r5, lr}
 800988c:	4604      	mov	r4, r0
 800988e:	460d      	mov	r5, r1
    if (!fiber_scheduler_running())
 8009890:	f7fe f874 	bl	800797c <_ZN5codal23fiber_scheduler_runningEv>
 8009894:	b130      	cbz	r0, 80098a4 <_ZN5codal12create_fiberEPFvvES1_+0x1a>
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, 0, 0);
 8009896:	2300      	movs	r3, #0
 8009898:	461a      	mov	r2, r3
 800989a:	4629      	mov	r1, r5
 800989c:	4620      	mov	r0, r4
 800989e:	f7fe f94f 	bl	8007b40 <_Z14__create_fibermmmi>
}
 80098a2:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
 80098a4:	2000      	movs	r0, #0
 80098a6:	e7fc      	b.n	80098a2 <_ZN5codal12create_fiberEPFvvES1_+0x18>

080098a8 <_ZN5codal12create_fiberEPFvPvES0_S2_>:
{
 80098a8:	b570      	push	{r4, r5, r6, lr}
 80098aa:	4604      	mov	r4, r0
 80098ac:	460e      	mov	r6, r1
 80098ae:	4615      	mov	r5, r2
    if (!fiber_scheduler_running())
 80098b0:	f7fe f864 	bl	800797c <_ZN5codal23fiber_scheduler_runningEv>
 80098b4:	b130      	cbz	r0, 80098c4 <_ZN5codal12create_fiberEPFvPvES0_S2_+0x1c>
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 80098b6:	2301      	movs	r3, #1
 80098b8:	4632      	mov	r2, r6
 80098ba:	4629      	mov	r1, r5
 80098bc:	4620      	mov	r0, r4
 80098be:	f7fe f93f 	bl	8007b40 <_Z14__create_fibermmmi>
}
 80098c2:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 80098c4:	2000      	movs	r0, #0
 80098c6:	e7fc      	b.n	80098c2 <_ZN5codal12create_fiberEPFvPvES0_S2_+0x1a>

080098c8 <_ZN5codal20fiber_wait_for_eventEtt>:
{
 80098c8:	b510      	push	{r4, lr}
    int ret = fiber_wake_on_event(id, value);
 80098ca:	f7fe f8f1 	bl	8007ab0 <_ZN5codal19fiber_wake_on_eventEtt>
    if(ret == DEVICE_OK)
 80098ce:	4604      	mov	r4, r0
 80098d0:	b108      	cbz	r0, 80098d6 <_ZN5codal20fiber_wait_for_eventEtt+0xe>
}
 80098d2:	4620      	mov	r0, r4
 80098d4:	bd10      	pop	{r4, pc}
        schedule();
 80098d6:	f7fe f991 	bl	8007bfc <_ZN5codal8scheduleEv>
    return ret;
 80098da:	e7fa      	b.n	80098d2 <_ZN5codal20fiber_wait_for_eventEtt+0xa>

080098dc <_ZN5codal16launch_new_fiberEPFvvES1_>:
{
 80098dc:	b510      	push	{r4, lr}
 80098de:	460c      	mov	r4, r1
    ep();
 80098e0:	4780      	blx	r0
    cp();
 80098e2:	47a0      	blx	r4
    release_fiber();
 80098e4:	f7fe fa82 	bl	8007dec <_ZN5codal13release_fiberEv>
}
 80098e8:	bd10      	pop	{r4, pc}

080098ea <_ZN5codal13release_fiberEPv>:
{
 80098ea:	b508      	push	{r3, lr}
    if (!fiber_scheduler_running())
 80098ec:	f7fe f846 	bl	800797c <_ZN5codal23fiber_scheduler_runningEv>
 80098f0:	b900      	cbnz	r0, 80098f4 <_ZN5codal13release_fiberEPv+0xa>
}
 80098f2:	bd08      	pop	{r3, pc}
    release_fiber();
 80098f4:	f7fe fa7a 	bl	8007dec <_ZN5codal13release_fiberEv>
 80098f8:	e7fb      	b.n	80098f2 <_ZN5codal13release_fiberEPv+0x8>

080098fa <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_>:
{
 80098fa:	b538      	push	{r3, r4, r5, lr}
 80098fc:	4603      	mov	r3, r0
 80098fe:	460d      	mov	r5, r1
 8009900:	4614      	mov	r4, r2
    ep(pm);
 8009902:	4610      	mov	r0, r2
 8009904:	4798      	blx	r3
    cp(pm);
 8009906:	4620      	mov	r0, r4
 8009908:	47a8      	blx	r5
    release_fiber(pm);
 800990a:	4620      	mov	r0, r4
 800990c:	f7ff ffed 	bl	80098ea <_ZN5codal13release_fiberEPv>
}
 8009910:	bd38      	pop	{r3, r4, r5, pc}

08009912 <_ZN5codal9idle_taskEv>:
  * The idle task, which is called when the runtime has no fibers that require execution.
  *
  * This function typically calls idle().
  */
void codal::idle_task()
{
 8009912:	b508      	push	{r3, lr}
    while(1)
    {
        idle();
 8009914:	f7fe f950 	bl	8007bb8 <_ZN5codal4idleEv>
        schedule();
 8009918:	f7fe f970 	bl	8007bfc <_ZN5codal8scheduleEv>
 800991c:	e7fa      	b.n	8009914 <_ZN5codal9idle_taskEv+0x2>

0800991e <_Z16device_malloc_injR14HeapDefinition>:
{
 800991e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 8009920:	f010 0f03 	tst.w	r0, #3
 8009924:	d109      	bne.n	800993a <_Z16device_malloc_injR14HeapDefinition+0x1c>
 8009926:	0887      	lsrs	r7, r0, #2
    if (size <= 0)
 8009928:	2800      	cmp	r0, #0
 800992a:	d046      	beq.n	80099ba <_Z16device_malloc_injR14HeapDefinition+0x9c>
 800992c:	460e      	mov	r6, r1
    blocksNeeded++;
 800992e:	1c7d      	adds	r5, r7, #1
    target_disable_irq();
 8009930:	f7f7 f904 	bl	8000b3c <target_disable_irq>
    block = heap.heap_start;
 8009934:	6834      	ldr	r4, [r6, #0]
    PROCESSOR_WORD_TYPE	blockSize = 0;
 8009936:	2200      	movs	r2, #0
 8009938:	e019      	b.n	800996e <_Z16device_malloc_injR14HeapDefinition+0x50>
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 800993a:	0887      	lsrs	r7, r0, #2
 800993c:	3701      	adds	r7, #1
 800993e:	e7f3      	b.n	8009928 <_Z16device_malloc_injR14HeapDefinition+0xa>
        blockSize = *block & ~DEVICE_HEAP_BLOCK_FREE;
 8009940:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
        next = block + blockSize;
 8009944:	eb04 0082 	add.w	r0, r4, r2, lsl #2
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 8009948:	6803      	ldr	r3, [r0, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	da0b      	bge.n	8009966 <_Z16device_malloc_injR14HeapDefinition+0x48>
            if (next >= heap.heap_end)
 800994e:	6871      	ldr	r1, [r6, #4]
 8009950:	4281      	cmp	r1, r0
 8009952:	d908      	bls.n	8009966 <_Z16device_malloc_injR14HeapDefinition+0x48>
            blockSize += (*next & ~DEVICE_HEAP_BLOCK_FREE);
 8009954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009958:	441a      	add	r2, r3
            *block = blockSize | DEVICE_HEAP_BLOCK_FREE;
 800995a:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
 800995e:	6023      	str	r3, [r4, #0]
            next = block + blockSize;
 8009960:	eb04 0082 	add.w	r0, r4, r2, lsl #2
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 8009964:	e7f0      	b.n	8009948 <_Z16device_malloc_injR14HeapDefinition+0x2a>
        if (blockSize >= blocksNeeded)
 8009966:	42aa      	cmp	r2, r5
 8009968:	d20a      	bcs.n	8009980 <_Z16device_malloc_injR14HeapDefinition+0x62>
        block += blockSize;
 800996a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    while (block < heap.heap_end)
 800996e:	6873      	ldr	r3, [r6, #4]
 8009970:	42a3      	cmp	r3, r4
 8009972:	d905      	bls.n	8009980 <_Z16device_malloc_injR14HeapDefinition+0x62>
        if(!(*block & DEVICE_HEAP_BLOCK_FREE))
 8009974:	6823      	ldr	r3, [r4, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	dbe2      	blt.n	8009940 <_Z16device_malloc_injR14HeapDefinition+0x22>
            block += *block;
 800997a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
            continue;
 800997e:	e7f6      	b.n	800996e <_Z16device_malloc_injR14HeapDefinition+0x50>
    if (block >= heap.heap_end)
 8009980:	6873      	ldr	r3, [r6, #4]
 8009982:	42a3      	cmp	r3, r4
 8009984:	d90e      	bls.n	80099a4 <_Z16device_malloc_injR14HeapDefinition+0x86>
    if (blockSize <= blocksNeeded+1 || block+blocksNeeded+1 >= heap.heap_end)
 8009986:	3702      	adds	r7, #2
 8009988:	4297      	cmp	r7, r2
 800998a:	d203      	bcs.n	8009994 <_Z16device_malloc_injR14HeapDefinition+0x76>
 800998c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8009990:	42bb      	cmp	r3, r7
 8009992:	d80b      	bhi.n	80099ac <_Z16device_malloc_injR14HeapDefinition+0x8e>
        *block &= ~DEVICE_HEAP_BLOCK_FREE;
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800999a:	6023      	str	r3, [r4, #0]
    target_enable_irq();
 800999c:	f7f7 f8cc 	bl	8000b38 <target_enable_irq>
    return block+1;
 80099a0:	1d20      	adds	r0, r4, #4
}
 80099a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        target_enable_irq();
 80099a4:	f7f7 f8c8 	bl	8000b38 <target_enable_irq>
        return NULL;
 80099a8:	2000      	movs	r0, #0
 80099aa:	e7fa      	b.n	80099a2 <_Z16device_malloc_injR14HeapDefinition+0x84>
        *splitBlock = blockSize - blocksNeeded;
 80099ac:	1b53      	subs	r3, r2, r5
        *splitBlock |= DEVICE_HEAP_BLOCK_FREE;
 80099ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099b2:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
        *block = blocksNeeded;
 80099b6:	6025      	str	r5, [r4, #0]
 80099b8:	e7f0      	b.n	800999c <_Z16device_malloc_injR14HeapDefinition+0x7e>
        return NULL;
 80099ba:	2000      	movs	r0, #0
 80099bc:	e7f1      	b.n	80099a2 <_Z16device_malloc_injR14HeapDefinition+0x84>

080099be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>:
  * @param handler A function pointer to call when the event is detected.
  *
  * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
  * to be tuned.
  */
Listener::Listener(uint16_t id, uint16_t value, void (*handler)(Event), uint16_t flags)
 80099be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c0:	4604      	mov	r4, r0
 80099c2:	460f      	mov	r7, r1
 80099c4:	4616      	mov	r6, r2
 80099c6:	461d      	mov	r5, r3
 80099c8:	3010      	adds	r0, #16
 80099ca:	f000 fbf0 	bl	800a1ae <_ZN5codal5EventC1Ev>
{
	this->id = id;
 80099ce:	8027      	strh	r7, [r4, #0]
	this->value = value;
 80099d0:	8066      	strh	r6, [r4, #2]
	this->cb = handler;
 80099d2:	60a5      	str	r5, [r4, #8]
	this->cb_arg = NULL;
 80099d4:	2300      	movs	r3, #0
 80099d6:	60e3      	str	r3, [r4, #12]
    this->flags = flags;
 80099d8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80099dc:	80a2      	strh	r2, [r4, #4]
	this->next = NULL;
 80099de:	61e3      	str	r3, [r4, #28]
    this->evt_queue = NULL;
 80099e0:	61a3      	str	r3, [r4, #24]
}
 80099e2:	4620      	mov	r0, r4
 80099e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099e6 <_ZN5codal8ListenerD1Ev>:
}

/**
  * Destructor. Ensures all resources used by this listener are freed.
  */
Listener::~Listener()
 80099e6:	b510      	push	{r4, lr}
 80099e8:	4604      	mov	r4, r0
{
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 80099ea:	8883      	ldrh	r3, [r0, #4]
 80099ec:	f013 0f02 	tst.w	r3, #2
 80099f0:	d101      	bne.n	80099f6 <_ZN5codal8ListenerD1Ev+0x10>
        delete cb_method;
}
 80099f2:	4620      	mov	r0, r4
 80099f4:	bd10      	pop	{r4, pc}
        delete cb_method;
 80099f6:	6880      	ldr	r0, [r0, #8]
 80099f8:	f7f9 f9a8 	bl	8002d4c <_ZdlPv>
 80099fc:	e7f9      	b.n	80099f2 <_ZN5codal8ListenerD1Ev+0xc>

080099fe <_ZN5codal8Listener5queueENS_5EventE>:
  * Queues and event up to be processed.
  *
  * @param e The event to queue
  */
void Listener::queue(Event e)
{
 80099fe:	b570      	push	{r4, r5, r6, lr}
 8009a00:	b086      	sub	sp, #24
 8009a02:	466b      	mov	r3, sp
 8009a04:	e883 0006 	stmia.w	r3, {r1, r2}
    int queueDepth;

    EventQueueItem *p = evt_queue;
 8009a08:	6984      	ldr	r4, [r0, #24]

    if (evt_queue == NULL)
 8009a0a:	b12c      	cbz	r4, 8009a18 <_ZN5codal8Listener5queueENS_5EventE+0x1a>
        evt_queue = new EventQueueItem(e);
    else
    {
        queueDepth = 1;
 8009a0c:	2201      	movs	r2, #1

        while (p->next != NULL)
 8009a0e:	68a3      	ldr	r3, [r4, #8]
 8009a10:	b193      	cbz	r3, 8009a38 <_ZN5codal8Listener5queueENS_5EventE+0x3a>
        {
            p = p->next;
            queueDepth++;
 8009a12:	3201      	adds	r2, #1
            p = p->next;
 8009a14:	461c      	mov	r4, r3
        while (p->next != NULL)
 8009a16:	e7fa      	b.n	8009a0e <_ZN5codal8Listener5queueENS_5EventE+0x10>
 8009a18:	4605      	mov	r5, r0
        evt_queue = new EventQueueItem(e);
 8009a1a:	ac02      	add	r4, sp, #8
 8009a1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a20:	e884 0003 	stmia.w	r4, {r0, r1}
 8009a24:	200c      	movs	r0, #12
 8009a26:	f7f9 f98d 	bl	8002d44 <_Znwj>
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8009a30:	f000 fbe4 	bl	800a1fc <_ZN5codal14EventQueueItemC1ENS_5EventE>
 8009a34:	61ae      	str	r6, [r5, #24]
 8009a36:	e001      	b.n	8009a3c <_ZN5codal8Listener5queueENS_5EventE+0x3e>
        }

        if (queueDepth < MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 8009a38:	2a09      	cmp	r2, #9
 8009a3a:	dd01      	ble.n	8009a40 <_ZN5codal8Listener5queueENS_5EventE+0x42>
            p->next = new EventQueueItem(e);
    }
}
 8009a3c:	b006      	add	sp, #24
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}
            p->next = new EventQueueItem(e);
 8009a40:	ad04      	add	r5, sp, #16
 8009a42:	466b      	mov	r3, sp
 8009a44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a48:	e885 0003 	stmia.w	r5, {r0, r1}
 8009a4c:	200c      	movs	r0, #12
 8009a4e:	f7f9 f979 	bl	8002d44 <_Znwj>
 8009a52:	4606      	mov	r6, r0
 8009a54:	e895 0006 	ldmia.w	r5, {r1, r2}
 8009a58:	f000 fbd0 	bl	800a1fc <_ZN5codal14EventQueueItemC1ENS_5EventE>
 8009a5c:	60a6      	str	r6, [r4, #8]
}
 8009a5e:	e7ed      	b.n	8009a3c <_ZN5codal8Listener5queueENS_5EventE+0x3e>

08009a60 <_ZN5codal6Serial6lockRxEv>:
    status |= CODAL_SERIAL_RX_IN_USE;
 8009a60:	88c3      	ldrh	r3, [r0, #6]
 8009a62:	f043 0301 	orr.w	r3, r3, #1
 8009a66:	80c3      	strh	r3, [r0, #6]
}
 8009a68:	4770      	bx	lr

08009a6a <_ZN5codal6Serial8unlockRxEv>:
    status &= ~CODAL_SERIAL_RX_IN_USE;
 8009a6a:	88c3      	ldrh	r3, [r0, #6]
 8009a6c:	f023 0301 	bic.w	r3, r3, #1
 8009a70:	80c3      	strh	r3, [r0, #6]
}
 8009a72:	4770      	bx	lr

08009a74 <_ZN5codal6Serial12initialiseRxEv>:
{
 8009a74:	b570      	push	{r4, r5, r6, lr}
 8009a76:	4604      	mov	r4, r0
    if((status & CODAL_SERIAL_RX_BUFF_INIT))
 8009a78:	88c3      	ldrh	r3, [r0, #6]
 8009a7a:	f013 0f04 	tst.w	r3, #4
 8009a7e:	d116      	bne.n	8009aae <_ZN5codal6Serial12initialiseRxEv+0x3a>
    status &= ~CODAL_SERIAL_RX_BUFF_INIT;
 8009a80:	88e5      	ldrh	r5, [r4, #6]
 8009a82:	f025 0504 	bic.w	r5, r5, #4
 8009a86:	b2ad      	uxth	r5, r5
 8009a88:	80e5      	strh	r5, [r4, #6]
    if((this->rxBuff = (uint8_t *)malloc(rxBuffSize)) == NULL)
 8009a8a:	7f20      	ldrb	r0, [r4, #28]
 8009a8c:	f7fe fa4c 	bl	8007f28 <device_malloc>
 8009a90:	61a0      	str	r0, [r4, #24]
 8009a92:	b1a0      	cbz	r0, 8009abe <_ZN5codal6Serial12initialiseRxEv+0x4a>
    this->rxBuffHead = 0;
 8009a94:	2600      	movs	r6, #0
 8009a96:	83e6      	strh	r6, [r4, #30]
    this->rxBuffTail = 0;
 8009a98:	8426      	strh	r6, [r4, #32]
    status |= CODAL_SERIAL_RX_BUFF_INIT;
 8009a9a:	f045 0504 	orr.w	r5, r5, #4
 8009a9e:	80e5      	strh	r5, [r4, #6]
    enableInterrupt(RxInterrupt);
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	695b      	ldr	r3, [r3, #20]
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	4798      	blx	r3
    return DEVICE_OK;
 8009aaa:	4630      	mov	r0, r6
}
 8009aac:	bd70      	pop	{r4, r5, r6, pc}
        disableInterrupt(RxInterrupt);
 8009aae:	6803      	ldr	r3, [r0, #0]
 8009ab0:	699b      	ldr	r3, [r3, #24]
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	4798      	blx	r3
        free(this->rxBuff);
 8009ab6:	69a0      	ldr	r0, [r4, #24]
 8009ab8:	f7fe fa60 	bl	8007f7c <device_free>
 8009abc:	e7e0      	b.n	8009a80 <_ZN5codal6Serial12initialiseRxEv+0xc>
        return DEVICE_NO_RESOURCES;
 8009abe:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 8009ac2:	e7f3      	b.n	8009aac <_ZN5codal6Serial12initialiseRxEv+0x38>

08009ac4 <_ZN5codal6Serial12circularCopyEPhhS1_tt>:
{
 8009ac4:	b470      	push	{r4, r5, r6}
 8009ac6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8009aca:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    int toBuffIndex = 0;
 8009ace:	2500      	movs	r5, #0
    while(tailPosition != headPosition)
 8009ad0:	42b0      	cmp	r0, r6
 8009ad2:	d009      	beq.n	8009ae8 <_ZN5codal6Serial12circularCopyEPhhS1_tt+0x24>
        linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 8009ad4:	5c0c      	ldrb	r4, [r1, r0]
 8009ad6:	555c      	strb	r4, [r3, r5]
        tailPosition = (tailPosition + 1) % circularBuffSize;
 8009ad8:	3001      	adds	r0, #1
 8009ada:	fb90 f4f2 	sdiv	r4, r0, r2
 8009ade:	fb02 0014 	mls	r0, r2, r4, r0
 8009ae2:	b280      	uxth	r0, r0
        linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 8009ae4:	3501      	adds	r5, #1
    while(tailPosition != headPosition)
 8009ae6:	e7f3      	b.n	8009ad0 <_ZN5codal6Serial12circularCopyEPhhS1_tt+0xc>
}
 8009ae8:	bc70      	pop	{r4, r5, r6}
 8009aea:	4770      	bx	lr

08009aec <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>:
    if(mode == SYNC_SPINWAIT)
 8009aec:	2a01      	cmp	r2, #1
 8009aee:	d00f      	beq.n	8009b10 <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x24>
{
 8009af0:	b538      	push	{r3, r4, r5, lr}
 8009af2:	4614      	mov	r4, r2
 8009af4:	4605      	mov	r5, r0
    this->delimeters = delimeters;
 8009af6:	3010      	adds	r0, #16
 8009af8:	f000 fbf3 	bl	800a2e2 <_ZN5codal13ManagedStringaSERKS0_>
    if(mode == SYNC_SLEEP)
 8009afc:	2c02      	cmp	r4, #2
 8009afe:	d001      	beq.n	8009b04 <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x18>
    return DEVICE_OK;
 8009b00:	2000      	movs	r0, #0
}
 8009b02:	bd38      	pop	{r3, r4, r5, pc}
        fiber_wait_for_event(this->id, CODAL_SERIAL_EVT_DELIM_MATCH);
 8009b04:	2101      	movs	r1, #1
 8009b06:	88a8      	ldrh	r0, [r5, #4]
 8009b08:	f7ff fede 	bl	80098c8 <_ZN5codal20fiber_wait_for_eventEtt>
    return DEVICE_OK;
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	e7f8      	b.n	8009b02 <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x16>
        return DEVICE_INVALID_PARAMETER;
 8009b10:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 8009b14:	4770      	bx	lr

08009b16 <_ZN5codal6Serial7rxInUseEv>:
    return (status & CODAL_SERIAL_RX_IN_USE);
 8009b16:	88c0      	ldrh	r0, [r0, #6]
}
 8009b18:	f000 0001 	and.w	r0, r0, #1
 8009b1c:	4770      	bx	lr

08009b1e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE>:
{
 8009b1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b22:	b089      	sub	sp, #36	; 0x24
 8009b24:	af02      	add	r7, sp, #8
 8009b26:	60b8      	str	r0, [r7, #8]
 8009b28:	4688      	mov	r8, r1
 8009b2a:	4615      	mov	r5, r2
 8009b2c:	607b      	str	r3, [r7, #4]
    if(rxInUse())
 8009b2e:	4608      	mov	r0, r1
 8009b30:	f7ff fff1 	bl	8009b16 <_ZN5codal6Serial7rxInUseEv>
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	b990      	cbnz	r0, 8009b5e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x40>
    if(!(status & CODAL_SERIAL_RX_BUFF_INIT))
 8009b38:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8009b3c:	f013 0f04 	tst.w	r3, #4
 8009b40:	d104      	bne.n	8009b4c <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x2e>
        int result = initialiseRx();
 8009b42:	4640      	mov	r0, r8
 8009b44:	f7ff ff96 	bl	8009a74 <_ZN5codal6Serial12initialiseRxEv>
        if(result != DEVICE_OK)
 8009b48:	4601      	mov	r1, r0
 8009b4a:	b960      	cbnz	r0, 8009b66 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x48>
    lockRx();
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	f7ff ff87 	bl	8009a60 <_ZN5codal6Serial6lockRxEv>
    int localTail = rxBuffTail;
 8009b52:	f8b8 a020 	ldrh.w	sl, [r8, #32]
 8009b56:	4656      	mov	r6, sl
    int foundIndex = -1;
 8009b58:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009b5c:	e063      	b.n	8009c26 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x108>
        return ManagedString();
 8009b5e:	68b8      	ldr	r0, [r7, #8]
 8009b60:	f000 fbb9 	bl	800a2d6 <_ZN5codal13ManagedStringC1Ev>
 8009b64:	e045      	b.n	8009bf2 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>
            return result;
 8009b66:	68b8      	ldr	r0, [r7, #8]
 8009b68:	f000 fb83 	bl	800a272 <_ZN5codal13ManagedStringC1Ei>
 8009b6c:	e041      	b.n	8009bf2 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>
    if(mode == SYNC_SPINWAIT)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d07b      	beq.n	8009c6c <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x14e>
    if(mode == SYNC_SLEEP && foundIndex == -1)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	f000 8086 	beq.w	8009c88 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x16a>
    if(foundIndex >= 0)
 8009b7c:	f1b9 0f00 	cmp.w	r9, #0
 8009b80:	f2c0 80ac 	blt.w	8009cdc <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1be>
        return ManagedString((char *)localBuff, localBuffSize);
 8009b84:	466e      	mov	r6, sp
        int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 8009b86:	45d1      	cmp	r9, sl
 8009b88:	f280 80a5 	bge.w	8009cd6 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1b8>
 8009b8c:	f898 401c 	ldrb.w	r4, [r8, #28]
 8009b90:	eba4 040a 	sub.w	r4, r4, sl
 8009b94:	444c      	add	r4, r9
        uint8_t localBuff[localBuffSize + 1];
 8009b96:	f104 0308 	add.w	r3, r4, #8
 8009b9a:	f023 0307 	bic.w	r3, r3, #7
 8009b9e:	ebad 0d03 	sub.w	sp, sp, r3
 8009ba2:	ad02      	add	r5, sp, #8
 8009ba4:	1c62      	adds	r2, r4, #1
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f7f8 fdd3 	bl	8002754 <memset>
        circularCopy(rxBuff, rxBuffSize, localBuff, preservedTail, foundIndex);
 8009bae:	f898 201c 	ldrb.w	r2, [r8, #28]
 8009bb2:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8009bb6:	fa1f f389 	uxth.w	r3, r9
 8009bba:	9301      	str	r3, [sp, #4]
 8009bbc:	f8cd a000 	str.w	sl, [sp]
 8009bc0:	462b      	mov	r3, r5
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	f7ff ff7e 	bl	8009ac4 <_ZN5codal6Serial12circularCopyEPhhS1_tt>
        rxBuffTail = (rxBuffTail + localBuffSize + 1) % rxBuffSize;
 8009bc8:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 8009bcc:	4423      	add	r3, r4
 8009bce:	3301      	adds	r3, #1
 8009bd0:	f898 101c 	ldrb.w	r1, [r8, #28]
 8009bd4:	fb93 f2f1 	sdiv	r2, r3, r1
 8009bd8:	fb01 3312 	mls	r3, r1, r2, r3
 8009bdc:	f8a8 3020 	strh.w	r3, [r8, #32]
        unlockRx();
 8009be0:	4640      	mov	r0, r8
 8009be2:	f7ff ff42 	bl	8009a6a <_ZN5codal6Serial8unlockRxEv>
        return ManagedString((char *)localBuff, localBuffSize);
 8009be6:	b222      	sxth	r2, r4
 8009be8:	4629      	mov	r1, r5
 8009bea:	68b8      	ldr	r0, [r7, #8]
 8009bec:	f000 fb53 	bl	800a296 <_ZN5codal13ManagedStringC1EPKcs>
 8009bf0:	46b5      	mov	sp, r6
}
 8009bf2:	68b8      	ldr	r0, [r7, #8]
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 8009bfc:	3401      	adds	r4, #1
          * display.scroll(s.length()) // scrolls "4"
          * @endcode
          */
        int16_t length() const
        {
            return ptr->len;
 8009bfe:	682b      	ldr	r3, [r5, #0]
 8009c00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009c04:	42a3      	cmp	r3, r4
 8009c06:	dd07      	ble.n	8009c18 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xfa>
            if(delimeters.charAt(delimeterIterator) == c)
 8009c08:	b221      	sxth	r1, r4
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	f000 fb78 	bl	800a300 <_ZN5codal13ManagedString6charAtEs>
 8009c10:	4558      	cmp	r0, fp
 8009c12:	d1f3      	bne.n	8009bfc <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
                foundIndex = localTail;
 8009c14:	46b1      	mov	r9, r6
 8009c16:	e7f1      	b.n	8009bfc <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
        localTail = (localTail + 1) % rxBuffSize;
 8009c18:	3601      	adds	r6, #1
 8009c1a:	f898 301c 	ldrb.w	r3, [r8, #28]
 8009c1e:	fb96 f2f3 	sdiv	r2, r6, r3
 8009c22:	fb03 6612 	mls	r6, r3, r2, r6
    while(localTail != rxBuffHead && foundIndex  == -1)
 8009c26:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	42b3      	cmp	r3, r6
 8009c2e:	d09e      	beq.n	8009b6e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x50>
 8009c30:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8009c34:	d19b      	bne.n	8009b6e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x50>
        char c = rxBuff[localTail];
 8009c36:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009c3a:	f813 b006 	ldrb.w	fp, [r3, r6]
        for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 8009c3e:	68fc      	ldr	r4, [r7, #12]
 8009c40:	e7dd      	b.n	8009bfe <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xe0>
            for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 8009c42:	3401      	adds	r4, #1
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009c4a:	42a3      	cmp	r3, r4
 8009c4c:	dd07      	ble.n	8009c5e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x140>
                if(delimeters.charAt(delimeterIterator) == c)
 8009c4e:	b221      	sxth	r1, r4
 8009c50:	4628      	mov	r0, r5
 8009c52:	f000 fb55 	bl	800a300 <_ZN5codal13ManagedString6charAtEs>
 8009c56:	4558      	cmp	r0, fp
 8009c58:	d1f3      	bne.n	8009c42 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x124>
                    foundIndex = localTail;
 8009c5a:	46b1      	mov	r9, r6
 8009c5c:	e7f1      	b.n	8009c42 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x124>
            localTail = (localTail + 1) % rxBuffSize;
 8009c5e:	3601      	adds	r6, #1
 8009c60:	f898 301c 	ldrb.w	r3, [r8, #28]
 8009c64:	fb96 f2f3 	sdiv	r2, r6, r3
 8009c68:	fb03 6612 	mls	r6, r3, r2, r6
        while(foundIndex == -1)
 8009c6c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8009c70:	d180      	bne.n	8009b74 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x56>
            while(localTail == rxBuffHead);
 8009c72:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	42b3      	cmp	r3, r6
 8009c7a:	d0fa      	beq.n	8009c72 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x154>
            char c = rxBuff[localTail];
 8009c7c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009c80:	f813 b006 	ldrb.w	fp, [r3, r6]
            for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 8009c84:	68fc      	ldr	r4, [r7, #12]
 8009c86:	e7dd      	b.n	8009c44 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x126>
    if(mode == SYNC_SLEEP && foundIndex == -1)
 8009c88:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8009c8c:	f47f af76 	bne.w	8009b7c <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x5e>
        eventOn(delimeters, mode);
 8009c90:	4629      	mov	r1, r5
 8009c92:	f107 0010 	add.w	r0, r7, #16
 8009c96:	f000 fb16 	bl	800a2c6 <_ZN5codal13ManagedStringC1ERKS0_>
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	f107 0110 	add.w	r1, r7, #16
 8009ca0:	4640      	mov	r0, r8
 8009ca2:	f7ff ff23 	bl	8009aec <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>
 8009ca6:	f107 0010 	add.w	r0, r7, #16
 8009caa:	f000 fab8 	bl	800a21e <_ZN5codal13ManagedStringD1Ev>
        foundIndex = rxBuffHead - 1;
 8009cae:	f8b8 901e 	ldrh.w	r9, [r8, #30]
 8009cb2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
        this->delimeters = ManagedString();
 8009cb6:	f108 0410 	add.w	r4, r8, #16
 8009cba:	f107 0014 	add.w	r0, r7, #20
 8009cbe:	f000 fb0a 	bl	800a2d6 <_ZN5codal13ManagedStringC1Ev>
 8009cc2:	f107 0114 	add.w	r1, r7, #20
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f000 fb0b 	bl	800a2e2 <_ZN5codal13ManagedStringaSERKS0_>
 8009ccc:	f107 0014 	add.w	r0, r7, #20
 8009cd0:	f000 faa5 	bl	800a21e <_ZN5codal13ManagedStringD1Ev>
 8009cd4:	e752      	b.n	8009b7c <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x5e>
        int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 8009cd6:	eba9 040a 	sub.w	r4, r9, sl
 8009cda:	e75c      	b.n	8009b96 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x78>
    unlockRx();
 8009cdc:	4640      	mov	r0, r8
 8009cde:	f7ff fec4 	bl	8009a6a <_ZN5codal6Serial8unlockRxEv>
    return ManagedString();
 8009ce2:	68b8      	ldr	r0, [r7, #8]
 8009ce4:	f000 faf7 	bl	800a2d6 <_ZN5codal13ManagedStringC1Ev>
 8009ce8:	e783      	b.n	8009bf2 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>

08009cea <_ZN5codal5Timer17disableInterruptsEv>:
{
 8009cea:	b508      	push	{r3, lr}
    target_disable_irq();
 8009cec:	f7f6 ff26 	bl	8000b3c <target_disable_irq>
}
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	bd08      	pop	{r3, pc}

08009cf4 <_ZN5codal5Timer16enableInterruptsEv>:
{
 8009cf4:	b508      	push	{r3, lr}
    target_enable_irq();
 8009cf6:	f7f6 ff1f 	bl	8000b38 <target_enable_irq>
}
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	bd08      	pop	{r3, pc}

08009cfe <_ZN5codal5Timer13getTimerEventEv>:
{
 8009cfe:	b410      	push	{r4}
    for (int i=0; i<eventListSize; i++)
 8009d00:	2300      	movs	r3, #0
 8009d02:	6982      	ldr	r2, [r0, #24]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	dd08      	ble.n	8009d1a <_ZN5codal5Timer13getTimerEventEv+0x1c>
        if (timerEventList[i].id == 0)
 8009d08:	6901      	ldr	r1, [r0, #16]
 8009d0a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8009d0e:	00a2      	lsls	r2, r4, #2
 8009d10:	188c      	adds	r4, r1, r2
 8009d12:	5a8a      	ldrh	r2, [r1, r2]
 8009d14:	b112      	cbz	r2, 8009d1c <_ZN5codal5Timer13getTimerEventEv+0x1e>
    for (int i=0; i<eventListSize; i++)
 8009d16:	3301      	adds	r3, #1
 8009d18:	e7f3      	b.n	8009d02 <_ZN5codal5Timer13getTimerEventEv+0x4>
    return NULL;
 8009d1a:	2400      	movs	r4, #0
}
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	bc10      	pop	{r4}
 8009d20:	4770      	bx	lr

08009d22 <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE>:
    event->id = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	800b      	strh	r3, [r1, #0]
    if (nextTimerEvent == event)
 8009d26:	6943      	ldr	r3, [r0, #20]
 8009d28:	428b      	cmp	r3, r1
 8009d2a:	d000      	beq.n	8009d2e <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE+0xc>
}
 8009d2c:	4770      	bx	lr
        nextTimerEvent = NULL;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	6143      	str	r3, [r0, #20]
}
 8009d32:	e7fb      	b.n	8009d2c <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE+0xa>

08009d34 <_ZN5codal5Timer7getTimeEv>:
{
 8009d34:	b510      	push	{r4, lr}
 8009d36:	4604      	mov	r4, r0
    syncRequest();
 8009d38:	6803      	ldr	r3, [r0, #0]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	4798      	blx	r3
}
 8009d3e:	6860      	ldr	r0, [r4, #4]
 8009d40:	bd10      	pop	{r4, pc}

08009d42 <_ZN5codal5Timer9getTimeUsEv>:
{
 8009d42:	b510      	push	{r4, lr}
 8009d44:	4604      	mov	r4, r0
    syncRequest();
 8009d46:	6803      	ldr	r3, [r0, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	4798      	blx	r3
}
 8009d4c:	68a0      	ldr	r0, [r4, #8]
 8009d4e:	bd10      	pop	{r4, pc}

08009d50 <_ZN5codal5Timer8setEventEmttb>:
{
 8009d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d54:	4604      	mov	r4, r0
 8009d56:	460e      	mov	r6, r1
 8009d58:	4690      	mov	r8, r2
 8009d5a:	461f      	mov	r7, r3
 8009d5c:	f89d 9020 	ldrb.w	r9, [sp, #32]
    TimerEvent *evt = getTimerEvent();
 8009d60:	f7ff ffcd 	bl	8009cfe <_ZN5codal5Timer13getTimerEventEv>
    if (evt == NULL)
 8009d64:	b330      	cbz	r0, 8009db4 <_ZN5codal5Timer8setEventEmttb+0x64>
 8009d66:	4605      	mov	r5, r0
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f7ff ffea 	bl	8009d42 <_ZN5codal5Timer9getTimeUsEv>
 8009d6e:	4430      	add	r0, r6
 8009d70:	f1b9 0f00 	cmp.w	r9, #0
 8009d74:	d01c      	beq.n	8009db0 <_ZN5codal5Timer8setEventEmttb+0x60>
 8009d76:	4633      	mov	r3, r6
        CODAL_TIMESTAMP period;
        CODAL_TIMESTAMP timestamp;

        void set(CODAL_TIMESTAMP timestamp, CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
        {
            this->timestamp = timestamp;
 8009d78:	60a8      	str	r0, [r5, #8]
            this->period = period;
 8009d7a:	606b      	str	r3, [r5, #4]
            this->id = id;
 8009d7c:	f8a5 8000 	strh.w	r8, [r5]
            this->value = value;
 8009d80:	806f      	strh	r7, [r5, #2]
    disableInterrupts();
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	4620      	mov	r0, r4
 8009d88:	4798      	blx	r3
    if (nextTimerEvent == NULL || evt->timestamp < nextTimerEvent->timestamp)
 8009d8a:	6963      	ldr	r3, [r4, #20]
 8009d8c:	b11b      	cbz	r3, 8009d96 <_ZN5codal5Timer8setEventEmttb+0x46>
 8009d8e:	68aa      	ldr	r2, [r5, #8]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d205      	bcs.n	8009da2 <_ZN5codal5Timer8setEventEmttb+0x52>
        nextTimerEvent = evt;
 8009d96:	6165      	str	r5, [r4, #20]
        triggerIn(period);
 8009d98:	6823      	ldr	r3, [r4, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4798      	blx	r3
    enableInterrupts();
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	4620      	mov	r0, r4
 8009da8:	4798      	blx	r3
    return DEVICE_OK;
 8009daa:	2000      	movs	r0, #0
}
 8009dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 8009db0:	2300      	movs	r3, #0
 8009db2:	e7e1      	b.n	8009d78 <_ZN5codal5Timer8setEventEmttb+0x28>
        return DEVICE_NO_RESOURCES;
 8009db4:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 8009db8:	e7f8      	b.n	8009dac <_ZN5codal5Timer8setEventEmttb+0x5c>

08009dba <_ZN5codal5Timer12eventEveryUsEmtt>:
{
 8009dba:	b510      	push	{r4, lr}
 8009dbc:	b082      	sub	sp, #8
    return setEvent(period, id, value, true);
 8009dbe:	2401      	movs	r4, #1
 8009dc0:	9400      	str	r4, [sp, #0]
 8009dc2:	f7ff ffc5 	bl	8009d50 <_ZN5codal5Timer8setEventEmttb>
}
 8009dc6:	b002      	add	sp, #8
 8009dc8:	bd10      	pop	{r4, pc}

08009dca <_ZN5codal5Timer4syncEm>:
    currentTimeUs += t;
 8009dca:	6882      	ldr	r2, [r0, #8]
 8009dcc:	440a      	add	r2, r1
 8009dce:	6082      	str	r2, [r0, #8]
    overflow += t;
 8009dd0:	68c3      	ldr	r3, [r0, #12]
 8009dd2:	440b      	add	r3, r1
 8009dd4:	60c3      	str	r3, [r0, #12]
    while(overflow >= 1000)
 8009dd6:	68c3      	ldr	r3, [r0, #12]
 8009dd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ddc:	d306      	bcc.n	8009dec <_ZN5codal5Timer4syncEm+0x22>
        overflow -= 1000;
 8009dde:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8009de2:	60c3      	str	r3, [r0, #12]
        currentTime += 1;
 8009de4:	6843      	ldr	r3, [r0, #4]
 8009de6:	3301      	adds	r3, #1
 8009de8:	6043      	str	r3, [r0, #4]
    while(overflow >= 1000)
 8009dea:	e7f4      	b.n	8009dd6 <_ZN5codal5Timer4syncEm+0xc>
}
 8009dec:	4770      	bx	lr

08009dee <_ZN5codal5Timer7triggerEv>:
{
 8009dee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009df0:	b085      	sub	sp, #20
 8009df2:	4605      	mov	r5, r0
    syncRequest();
 8009df4:	6803      	ldr	r3, [r0, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	4798      	blx	r3
        TimerEvent *e = timerEventList;
 8009dfa:	692c      	ldr	r4, [r5, #16]
        for (int i=0; i<eventListSize; i++)
 8009dfc:	2600      	movs	r6, #0
        eventsFired = 0;
 8009dfe:	4637      	mov	r7, r6
 8009e00:	e005      	b.n	8009e0e <_ZN5codal5Timer7triggerEv+0x20>
                    e->timestamp += e->period;
 8009e02:	68a3      	ldr	r3, [r4, #8]
 8009e04:	4413      	add	r3, r2
 8009e06:	60a3      	str	r3, [r4, #8]
                eventsFired++;
 8009e08:	3701      	adds	r7, #1
            e++;
 8009e0a:	340c      	adds	r4, #12
        for (int i=0; i<eventListSize; i++)
 8009e0c:	3601      	adds	r6, #1
 8009e0e:	69ab      	ldr	r3, [r5, #24]
 8009e10:	42b3      	cmp	r3, r6
 8009e12:	dd15      	ble.n	8009e40 <_ZN5codal5Timer7triggerEv+0x52>
            if (e->id != 0 && currentTimeUs >= e->timestamp)
 8009e14:	8821      	ldrh	r1, [r4, #0]
 8009e16:	2900      	cmp	r1, #0
 8009e18:	d0f7      	beq.n	8009e0a <_ZN5codal5Timer7triggerEv+0x1c>
 8009e1a:	68aa      	ldr	r2, [r5, #8]
 8009e1c:	68a3      	ldr	r3, [r4, #8]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d3f3      	bcc.n	8009e0a <_ZN5codal5Timer7triggerEv+0x1c>
                Event evt(e->id, e->value, currentTime);
 8009e22:	8862      	ldrh	r2, [r4, #2]
 8009e24:	2301      	movs	r3, #1
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	686b      	ldr	r3, [r5, #4]
 8009e2a:	a802      	add	r0, sp, #8
 8009e2c:	f000 f9d8 	bl	800a1e0 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>
                if (e->period == 0)
 8009e30:	6862      	ldr	r2, [r4, #4]
 8009e32:	2a00      	cmp	r2, #0
 8009e34:	d1e5      	bne.n	8009e02 <_ZN5codal5Timer7triggerEv+0x14>
                    releaseTimerEvent(e);
 8009e36:	4621      	mov	r1, r4
 8009e38:	4628      	mov	r0, r5
 8009e3a:	f7ff ff72 	bl	8009d22 <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE>
 8009e3e:	e7e3      	b.n	8009e08 <_ZN5codal5Timer7triggerEv+0x1a>
    } while (eventsFired);
 8009e40:	2f00      	cmp	r7, #0
 8009e42:	d1da      	bne.n	8009dfa <_ZN5codal5Timer7triggerEv+0xc>
    nextTimerEvent = NULL;
 8009e44:	2200      	movs	r2, #0
 8009e46:	616a      	str	r2, [r5, #20]
    TimerEvent *e = timerEventList;
 8009e48:	692a      	ldr	r2, [r5, #16]
 8009e4a:	e002      	b.n	8009e52 <_ZN5codal5Timer7triggerEv+0x64>
            nextTimerEvent = e;
 8009e4c:	616a      	str	r2, [r5, #20]
        e++;
 8009e4e:	320c      	adds	r2, #12
    for (int i=0; i<eventListSize; i++)
 8009e50:	3701      	adds	r7, #1
 8009e52:	42bb      	cmp	r3, r7
 8009e54:	dd0a      	ble.n	8009e6c <_ZN5codal5Timer7triggerEv+0x7e>
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
 8009e56:	8811      	ldrh	r1, [r2, #0]
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	d0f8      	beq.n	8009e4e <_ZN5codal5Timer7triggerEv+0x60>
 8009e5c:	6969      	ldr	r1, [r5, #20]
 8009e5e:	2900      	cmp	r1, #0
 8009e60:	d0f4      	beq.n	8009e4c <_ZN5codal5Timer7triggerEv+0x5e>
 8009e62:	6890      	ldr	r0, [r2, #8]
 8009e64:	6889      	ldr	r1, [r1, #8]
 8009e66:	4288      	cmp	r0, r1
 8009e68:	d2f1      	bcs.n	8009e4e <_ZN5codal5Timer7triggerEv+0x60>
 8009e6a:	e7ef      	b.n	8009e4c <_ZN5codal5Timer7triggerEv+0x5e>
    if (nextTimerEvent) {
 8009e6c:	696b      	ldr	r3, [r5, #20]
 8009e6e:	b143      	cbz	r3, 8009e82 <_ZN5codal5Timer7triggerEv+0x94>
        if (currentTimeUs < nextTimerEvent->timestamp)
 8009e70:	68aa      	ldr	r2, [r5, #8]
 8009e72:	6899      	ldr	r1, [r3, #8]
 8009e74:	428a      	cmp	r2, r1
 8009e76:	d306      	bcc.n	8009e86 <_ZN5codal5Timer7triggerEv+0x98>
            triggerIn(1);
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	4628      	mov	r0, r5
 8009e80:	4798      	blx	r3
}
 8009e82:	b005      	add	sp, #20
 8009e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
            triggerIn(nextTimerEvent->timestamp - currentTimeUs);
 8009e86:	682b      	ldr	r3, [r5, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	1a89      	subs	r1, r1, r2
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	4798      	blx	r3
 8009e90:	e7f7      	b.n	8009e82 <_ZN5codal5Timer7triggerEv+0x94>

08009e92 <_ZN5codal5TimerD1Ev>:
}
 8009e92:	4770      	bx	lr

08009e94 <_ZN5codal10MessageBus9elementAtEi>:
    Listener *l = listeners;
 8009e94:	6940      	ldr	r0, [r0, #20]
    while (n > 0)
 8009e96:	2900      	cmp	r1, #0
 8009e98:	dd03      	ble.n	8009ea2 <_ZN5codal10MessageBus9elementAtEi+0xe>
        if (l == NULL)
 8009e9a:	b110      	cbz	r0, 8009ea2 <_ZN5codal10MessageBus9elementAtEi+0xe>
        n--;
 8009e9c:	3901      	subs	r1, #1
        l = l->next;
 8009e9e:	69c0      	ldr	r0, [r0, #28]
    while (n > 0)
 8009ea0:	e7f9      	b.n	8009e96 <_ZN5codal10MessageBus9elementAtEi+0x2>
}
 8009ea2:	4770      	bx	lr

08009ea4 <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE>:
      * @param method The method to invoke.
      *
      * @param method The Event to supply to the given member function.
      */
    template <typename T>
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 8009ea4:	b510      	push	{r4, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	4668      	mov	r0, sp
 8009eac:	e880 000c 	stmia.w	r0, {r2, r3}
    {
        T* o = (T*)object;
        void (T::*m)(Event);
        memcpy(&m, method, sizeof(m));
 8009eb0:	ab02      	add	r3, sp, #8
 8009eb2:	6808      	ldr	r0, [r1, #0]
 8009eb4:	6849      	ldr	r1, [r1, #4]
 8009eb6:	c303      	stmia	r3!, {r0, r1}

        (o->*m)(e);
 8009eb8:	9b03      	ldr	r3, [sp, #12]
 8009eba:	105a      	asrs	r2, r3, #1
 8009ebc:	18a0      	adds	r0, r4, r2
 8009ebe:	f013 0f01 	tst.w	r3, #1
 8009ec2:	d008      	beq.n	8009ed6 <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE+0x32>
 8009ec4:	58a2      	ldr	r2, [r4, r2]
 8009ec6:	9b02      	ldr	r3, [sp, #8]
 8009ec8:	58d4      	ldr	r4, [r2, r3]
 8009eca:	466b      	mov	r3, sp
 8009ecc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009ed0:	47a0      	blx	r4
    }
 8009ed2:	b004      	add	sp, #16
 8009ed4:	bd10      	pop	{r4, pc}
        (o->*m)(e);
 8009ed6:	9c02      	ldr	r4, [sp, #8]
 8009ed8:	e7f7      	b.n	8009eca <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE+0x26>

08009eda <_Z14async_callbackPv>:
{
 8009eda:	b538      	push	{r3, r4, r5, lr}
 8009edc:	4604      	mov	r4, r0
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 8009ede:	8883      	ldrh	r3, [r0, #4]
 8009ee0:	f013 0f04 	tst.w	r3, #4
 8009ee4:	d005      	beq.n	8009ef2 <_Z14async_callbackPv+0x18>
        if (listener->flags & MESSAGE_BUS_LISTENER_DROP_IF_BUSY)
 8009ee6:	f013 0f20 	tst.w	r3, #32
 8009eea:	d140      	bne.n	8009f6e <_Z14async_callbackPv+0x94>
        if (listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY)
 8009eec:	f013 0f10 	tst.w	r3, #16
 8009ef0:	d103      	bne.n	8009efa <_Z14async_callbackPv+0x20>
    listener->flags |= MESSAGE_BUS_LISTENER_BUSY;
 8009ef2:	f043 0304 	orr.w	r3, r3, #4
 8009ef6:	80a3      	strh	r3, [r4, #4]
 8009ef8:	e027      	b.n	8009f4a <_Z14async_callbackPv+0x70>
            listener->queue(listener->evt);
 8009efa:	f100 0310 	add.w	r3, r0, #16
 8009efe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009f02:	f7ff fd7c 	bl	80099fe <_ZN5codal8Listener5queueENS_5EventE>
            return;
 8009f06:	e032      	b.n	8009f6e <_Z14async_callbackPv+0x94>
            listener->cb_method->fire(listener->evt);
 8009f08:	f104 0310 	add.w	r3, r4, #16
 8009f0c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009f10:	68a0      	ldr	r0, [r4, #8]
 8009f12:	f000 fa59 	bl	800a3c8 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>
 8009f16:	e005      	b.n	8009f24 <_Z14async_callbackPv+0x4a>
            listener->cb(listener->evt);
 8009f18:	68a2      	ldr	r2, [r4, #8]
 8009f1a:	f104 0310 	add.w	r3, r4, #16
 8009f1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f22:	4790      	blx	r2
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
 8009f24:	88a2      	ldrh	r2, [r4, #4]
 8009f26:	f012 0f10 	tst.w	r2, #16
 8009f2a:	d01d      	beq.n	8009f68 <_Z14async_callbackPv+0x8e>
 8009f2c:	69a3      	ldr	r3, [r4, #24]
 8009f2e:	b1db      	cbz	r3, 8009f68 <_Z14async_callbackPv+0x8e>
            listener->evt = item->evt;
 8009f30:	f104 0210 	add.w	r2, r4, #16
 8009f34:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f38:	e882 0003 	stmia.w	r2, {r0, r1}
            listener->evt_queue = listener->evt_queue->next;
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	61a2      	str	r2, [r4, #24]
            delete item;
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7f8 ff03 	bl	8002d4c <_ZdlPv>
            schedule();
 8009f46:	f7fd fe59 	bl	8007bfc <_ZN5codal8scheduleEv>
        if (listener->flags & MESSAGE_BUS_LISTENER_METHOD)
 8009f4a:	88a3      	ldrh	r3, [r4, #4]
 8009f4c:	f013 0f02 	tst.w	r3, #2
 8009f50:	d1da      	bne.n	8009f08 <_Z14async_callbackPv+0x2e>
        else if (listener->flags & MESSAGE_BUS_LISTENER_PARAMETERISED)
 8009f52:	f013 0f01 	tst.w	r3, #1
 8009f56:	d0df      	beq.n	8009f18 <_Z14async_callbackPv+0x3e>
            listener->cb_param(listener->evt, listener->cb_arg);
 8009f58:	68a5      	ldr	r5, [r4, #8]
 8009f5a:	68e2      	ldr	r2, [r4, #12]
 8009f5c:	f104 0310 	add.w	r3, r4, #16
 8009f60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f64:	47a8      	blx	r5
 8009f66:	e7dd      	b.n	8009f24 <_Z14async_callbackPv+0x4a>
    listener->flags &= ~MESSAGE_BUS_LISTENER_BUSY;
 8009f68:	f022 0204 	bic.w	r2, r2, #4
 8009f6c:	80a2      	strh	r2, [r4, #4]
}
 8009f6e:	bd38      	pop	{r3, r4, r5, pc}

08009f70 <_ZN5codal10MessageBus6removeEPNS_8ListenerE>:
    if (listener == NULL)
 8009f70:	2900      	cmp	r1, #0
 8009f72:	d032      	beq.n	8009fda <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x6a>
{
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	460d      	mov	r5, r1
    l = listeners;
 8009f78:	6944      	ldr	r4, [r0, #20]
    int removed = 0;
 8009f7a:	2600      	movs	r6, #0
 8009f7c:	e016      	b.n	8009fac <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3c>
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 8009f7e:	68a9      	ldr	r1, [r5, #8]
 8009f80:	68a0      	ldr	r0, [r4, #8]
 8009f82:	f000 fa2d 	bl	800a3e0 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 8009f86:	b1d8      	cbz	r0, 8009fc0 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x50>
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
 8009f88:	882b      	ldrh	r3, [r5, #0]
 8009f8a:	b113      	cbz	r3, 8009f92 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x22>
 8009f8c:	8822      	ldrh	r2, [r4, #0]
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d10b      	bne.n	8009faa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
 8009f92:	886b      	ldrh	r3, [r5, #2]
 8009f94:	b113      	cbz	r3, 8009f9c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x2c>
 8009f96:	8862      	ldrh	r2, [r4, #2]
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d106      	bne.n	8009faa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 8009f9c:	88a3      	ldrh	r3, [r4, #4]
 8009f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fa6:	80a3      	strh	r3, [r4, #4]
                    removed++;
 8009fa8:	3601      	adds	r6, #1
        l = l->next;
 8009faa:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 8009fac:	b18c      	cbz	r4, 8009fd2 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x62>
        if ((listener->flags & MESSAGE_BUS_LISTENER_METHOD) == (l->flags & MESSAGE_BUS_LISTENER_METHOD))
 8009fae:	88aa      	ldrh	r2, [r5, #4]
 8009fb0:	88a3      	ldrh	r3, [r4, #4]
 8009fb2:	4053      	eors	r3, r2
 8009fb4:	f013 0f02 	tst.w	r3, #2
 8009fb8:	d1f7      	bne.n	8009faa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 8009fba:	f012 0f02 	tst.w	r2, #2
 8009fbe:	d1de      	bne.n	8009f7e <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0xe>
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
 8009fc0:	88ab      	ldrh	r3, [r5, #4]
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 8009fc2:	f013 0f02 	tst.w	r3, #2
 8009fc6:	d1f0      	bne.n	8009faa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
 8009fc8:	68a2      	ldr	r2, [r4, #8]
 8009fca:	68ab      	ldr	r3, [r5, #8]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d1ec      	bne.n	8009faa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
 8009fd0:	e7da      	b.n	8009f88 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x18>
    if (removed > 0)
 8009fd2:	2e00      	cmp	r6, #0
 8009fd4:	dd04      	ble.n	8009fe0 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x70>
        return DEVICE_OK;
 8009fd6:	2000      	movs	r0, #0
}
 8009fd8:	bd70      	pop	{r4, r5, r6, pc}
        return DEVICE_INVALID_PARAMETER;
 8009fda:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 8009fde:	4770      	bx	lr
        return DEVICE_INVALID_PARAMETER;
 8009fe0:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 8009fe4:	e7f8      	b.n	8009fd8 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x68>

08009fe6 <_ZN5codal10MessageBus12dequeueEventEv>:
{
 8009fe6:	b538      	push	{r3, r4, r5, lr}
 8009fe8:	4604      	mov	r4, r0
    target_disable_irq();
 8009fea:	f7f6 fda7 	bl	8000b3c <target_disable_irq>
    if (evt_queue_head != NULL)
 8009fee:	69a5      	ldr	r5, [r4, #24]
 8009ff0:	b12d      	cbz	r5, 8009ffe <_ZN5codal10MessageBus12dequeueEventEv+0x18>
        evt_queue_head = item->next;
 8009ff2:	68ab      	ldr	r3, [r5, #8]
 8009ff4:	61a3      	str	r3, [r4, #24]
        if (evt_queue_head == NULL)
 8009ff6:	b133      	cbz	r3, 800a006 <_ZN5codal10MessageBus12dequeueEventEv+0x20>
        queueLength--;
 8009ff8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	8463      	strh	r3, [r4, #34]	; 0x22
    target_enable_irq();
 8009ffe:	f7f6 fd9b 	bl	8000b38 <target_enable_irq>
}
 800a002:	4628      	mov	r0, r5
 800a004:	bd38      	pop	{r3, r4, r5, pc}
            evt_queue_tail = NULL;
 800a006:	61e3      	str	r3, [r4, #28]
 800a008:	e7f6      	b.n	8009ff8 <_ZN5codal10MessageBus12dequeueEventEv+0x12>

0800a00a <_ZN5codal10MessageBus21deleteMarkedListenersEv>:
{
 800a00a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a00e:	4607      	mov	r7, r0
    l = listeners;
 800a010:	6944      	ldr	r4, [r0, #20]
    int removed = 0;
 800a012:	2600      	movs	r6, #0
    p = NULL;
 800a014:	4635      	mov	r5, r6
 800a016:	e004      	b.n	800a022 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x18>
                listeners = l->next;
 800a018:	69e3      	ldr	r3, [r4, #28]
 800a01a:	617b      	str	r3, [r7, #20]
 800a01c:	e00d      	b.n	800a03a <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x30>
        p = l;
 800a01e:	4625      	mov	r5, r4
        l = l->next;
 800a020:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800a022:	b1ac      	cbz	r4, 800a050 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x46>
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 800a024:	88a3      	ldrh	r3, [r4, #4]
 800a026:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a02a:	d0f8      	beq.n	800a01e <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x14>
 800a02c:	f013 0f04 	tst.w	r3, #4
 800a030:	d1f5      	bne.n	800a01e <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x14>
            if (p == NULL)
 800a032:	2d00      	cmp	r5, #0
 800a034:	d0f0      	beq.n	800a018 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0xe>
                p->next = l->next;
 800a036:	69e3      	ldr	r3, [r4, #28]
 800a038:	61eb      	str	r3, [r5, #28]
            l = l->next;
 800a03a:	f8d4 801c 	ldr.w	r8, [r4, #28]
            delete t;
 800a03e:	4620      	mov	r0, r4
 800a040:	f7ff fcd1 	bl	80099e6 <_ZN5codal8ListenerD1Ev>
 800a044:	4620      	mov	r0, r4
 800a046:	f7f8 fe81 	bl	8002d4c <_ZdlPv>
            removed++;
 800a04a:	3601      	adds	r6, #1
            l = l->next;
 800a04c:	4644      	mov	r4, r8
            continue;
 800a04e:	e7e8      	b.n	800a022 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x18>
}
 800a050:	4630      	mov	r0, r6
 800a052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a056 <_ZN5codal10MessageBus10queueEventERNS_5EventE>:
{
 800a056:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a058:	b083      	sub	sp, #12
 800a05a:	4604      	mov	r4, r0
 800a05c:	460e      	mov	r6, r1
    EventQueueItem *prev = evt_queue_tail;
 800a05e:	69c5      	ldr	r5, [r0, #28]
    processingComplete = this->process(evt, true);
 800a060:	2201      	movs	r2, #1
 800a062:	f7fe f8af 	bl	80081c4 <_ZN5codal10MessageBus7processERNS_5EventEb>
    if (processingComplete)
 800a066:	b910      	cbnz	r0, 800a06e <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x18>
    if (queueLength >= MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 800a068:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800a06a:	2b09      	cmp	r3, #9
 800a06c:	d901      	bls.n	800a072 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x1c>
}
 800a06e:	b003      	add	sp, #12
 800a070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EventQueueItem *item = new EventQueueItem(evt);
 800a072:	466f      	mov	r7, sp
 800a074:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a078:	e887 0003 	stmia.w	r7, {r0, r1}
 800a07c:	200c      	movs	r0, #12
 800a07e:	f7f8 fe61 	bl	8002d44 <_Znwj>
 800a082:	4606      	mov	r6, r0
 800a084:	e897 0006 	ldmia.w	r7, {r1, r2}
 800a088:	f000 f8b8 	bl	800a1fc <_ZN5codal14EventQueueItemC1ENS_5EventE>
    target_disable_irq();
 800a08c:	f7f6 fd56 	bl	8000b3c <target_disable_irq>
    if (prev == NULL)
 800a090:	b155      	cbz	r5, 800a0a8 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x52>
        item->next = prev->next;
 800a092:	68ab      	ldr	r3, [r5, #8]
 800a094:	60b3      	str	r3, [r6, #8]
        prev->next = item;
 800a096:	60ae      	str	r6, [r5, #8]
    if (item->next == NULL)
 800a098:	68b3      	ldr	r3, [r6, #8]
 800a09a:	b14b      	cbz	r3, 800a0b0 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x5a>
    queueLength++;
 800a09c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800a09e:	3301      	adds	r3, #1
 800a0a0:	8463      	strh	r3, [r4, #34]	; 0x22
    target_enable_irq();
 800a0a2:	f7f6 fd49 	bl	8000b38 <target_enable_irq>
 800a0a6:	e7e2      	b.n	800a06e <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x18>
        item->next = evt_queue_head;
 800a0a8:	69a3      	ldr	r3, [r4, #24]
 800a0aa:	60b3      	str	r3, [r6, #8]
        evt_queue_head = item;
 800a0ac:	61a6      	str	r6, [r4, #24]
 800a0ae:	e7f3      	b.n	800a098 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x42>
        evt_queue_tail = item;
 800a0b0:	61e6      	str	r6, [r4, #28]
 800a0b2:	e7f3      	b.n	800a09c <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x46>

0800a0b4 <_ZN5codal10MessageBus4sendENS_5EventE>:
{
 800a0b4:	b500      	push	{lr}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	466b      	mov	r3, sp
 800a0ba:	e883 0006 	stmia.w	r3, {r1, r2}
    this->queueEvent(evt);
 800a0be:	4619      	mov	r1, r3
 800a0c0:	f7ff ffc9 	bl	800a056 <_ZN5codal10MessageBus10queueEventERNS_5EventE>
}
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	b003      	add	sp, #12
 800a0c8:	f85d fb04 	ldr.w	pc, [sp], #4

0800a0cc <_ZN5codal10MessageBus4idleENS_5EventE>:
{
 800a0cc:	b530      	push	{r4, r5, lr}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	4605      	mov	r5, r0
 800a0d2:	ab02      	add	r3, sp, #8
 800a0d4:	e903 0006 	stmdb	r3, {r1, r2}
    this->deleteMarkedListeners();
 800a0d8:	f7ff ff97 	bl	800a00a <_ZN5codal10MessageBus21deleteMarkedListenersEv>
    EventQueueItem *item = this->dequeueEvent();
 800a0dc:	4628      	mov	r0, r5
 800a0de:	f7ff ff82 	bl	8009fe6 <_ZN5codal10MessageBus12dequeueEventEv>
 800a0e2:	4604      	mov	r4, r0
    while (item)
 800a0e4:	b17c      	cbz	r4, 800a106 <_ZN5codal10MessageBus4idleENS_5EventE+0x3a>
        this->process(item->evt);
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	f7fe f86a 	bl	80081c4 <_ZN5codal10MessageBus7processERNS_5EventEb>
        delete item;
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f7f8 fe2b 	bl	8002d4c <_ZdlPv>
        if(!scheduler_runqueue_empty())
 800a0f6:	f7fd fd57 	bl	8007ba8 <_ZN5codal24scheduler_runqueue_emptyEv>
 800a0fa:	b120      	cbz	r0, 800a106 <_ZN5codal10MessageBus4idleENS_5EventE+0x3a>
        item = this->dequeueEvent();
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f7ff ff72 	bl	8009fe6 <_ZN5codal10MessageBus12dequeueEventEv>
 800a102:	4604      	mov	r4, r0
    while (item)
 800a104:	e7ee      	b.n	800a0e4 <_ZN5codal10MessageBus4idleENS_5EventE+0x18>
}
 800a106:	b003      	add	sp, #12
 800a108:	bd30      	pop	{r4, r5, pc}

0800a10a <_ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt>:
      *
      * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
      * to be tuned.
      */
    template <typename T>
    Listener::Listener(uint16_t id, uint16_t value, T* object, void (T::*method)(Event), uint16_t flags)
 800a10a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10c:	4604      	mov	r4, r0
 800a10e:	460f      	mov	r7, r1
 800a110:	4615      	mov	r5, r2
 800a112:	461e      	mov	r6, r3
 800a114:	3010      	adds	r0, #16
 800a116:	f000 f84a 	bl	800a1ae <_ZN5codal5EventC1Ev>
    {
        this->id = id;
 800a11a:	8027      	strh	r7, [r4, #0]
        this->value = value;
 800a11c:	8065      	strh	r5, [r4, #2]
        this->cb_method = new MemberFunctionCallback(object, method);
 800a11e:	2018      	movs	r0, #24
 800a120:	f7f8 fe10 	bl	8002d44 <_Znwj>
 800a124:	4605      	mov	r5, r0
 800a126:	ab06      	add	r3, sp, #24
 800a128:	cb0c      	ldmia	r3, {r2, r3}
 800a12a:	4631      	mov	r1, r6
 800a12c:	f7fe f896 	bl	800825c <_ZN5codal22MemberFunctionCallbackC1INS_10MessageBusEEEPT_MS3_FvNS_5EventEE>
 800a130:	60a5      	str	r5, [r4, #8]
        this->cb_arg = NULL;
 800a132:	2300      	movs	r3, #0
 800a134:	60e3      	str	r3, [r4, #12]
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800a136:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a13a:	f042 0202 	orr.w	r2, r2, #2
 800a13e:	80a2      	strh	r2, [r4, #4]
        this->evt_queue = NULL;
 800a140:	61a3      	str	r3, [r4, #24]
        this->next = NULL;
 800a142:	61e3      	str	r3, [r4, #28]
    }
 800a144:	4620      	mov	r0, r4
 800a146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a148 <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE>:
      * // the previously created listener is now ignored.
      * uBit.messageBus.ignore(DEVICE_ID_BUTTON_B, DEVICE_BUTTON_EVT_CLICK, s, &SomeClass::onButtonBClick);
      * @endcode
      */
    template <typename T>
    int EventModel::ignore(uint16_t id, uint16_t value, T* object, void (T::*handler)(Event))
 800a148:	b530      	push	{r4, r5, lr}
 800a14a:	b08d      	sub	sp, #52	; 0x34
    {
        if (handler == NULL)
 800a14c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800a14e:	b1b4      	cbz	r4, 800a17e <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE+0x36>
 800a150:	460d      	mov	r5, r1
 800a152:	4604      	mov	r4, r0
            return DEVICE_INVALID_PARAMETER;

        Listener listener(id, value, object, handler);
 800a154:	2110      	movs	r1, #16
 800a156:	9102      	str	r1, [sp, #8]
 800a158:	a910      	add	r1, sp, #64	; 0x40
 800a15a:	c903      	ldmia	r1, {r0, r1}
 800a15c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a160:	4629      	mov	r1, r5
 800a162:	a804      	add	r0, sp, #16
 800a164:	f7ff ffd1 	bl	800a10a <_ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt>
        remove(&listener);
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	a904      	add	r1, sp, #16
 800a16e:	4620      	mov	r0, r4
 800a170:	4798      	blx	r3
        Listener listener(id, value, object, handler);
 800a172:	a804      	add	r0, sp, #16
 800a174:	f7ff fc37 	bl	80099e6 <_ZN5codal8ListenerD1Ev>

        return DEVICE_OK;
 800a178:	2000      	movs	r0, #0
    }
 800a17a:	b00d      	add	sp, #52	; 0x34
 800a17c:	bd30      	pop	{r4, r5, pc}
        if (handler == NULL)
 800a17e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a180:	f014 0f01 	tst.w	r4, #1
 800a184:	d1e4      	bne.n	800a150 <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE+0x8>
            return DEVICE_INVALID_PARAMETER;
 800a186:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800a18a:	e7f6      	b.n	800a17a <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE+0x32>

0800a18c <_ZThn8_N5codal10MessageBusD1Ev>:
        virtual Listener *elementAt(int n);

        /**
          * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
          */
        ~MessageBus();
 800a18c:	f1a0 0008 	sub.w	r0, r0, #8
 800a190:	f7fe b8fc 	b.w	800838c <_ZN5codal10MessageBusD1Ev>

0800a194 <_ZN5codal10MessageBusD0Ev>:
MessageBus::~MessageBus()
 800a194:	b510      	push	{r4, lr}
 800a196:	4604      	mov	r4, r0
}
 800a198:	f7fe f8f8 	bl	800838c <_ZN5codal10MessageBusD1Ev>
 800a19c:	4620      	mov	r0, r4
 800a19e:	f7f8 fdd5 	bl	8002d4c <_ZdlPv>
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	bd10      	pop	{r4, pc}

0800a1a6 <_ZThn8_N5codal10MessageBusD0Ev>:
 800a1a6:	f1a0 0008 	sub.w	r0, r0, #8
 800a1aa:	f7ff bff3 	b.w	800a194 <_ZN5codal10MessageBusD0Ev>

0800a1ae <_ZN5codal5EventC1Ev>:
Event::Event()
 800a1ae:	b510      	push	{r4, lr}
 800a1b0:	4604      	mov	r4, r0
    this->source = 0;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	8003      	strh	r3, [r0, #0]
    this->value = 0;
 800a1b6:	8043      	strh	r3, [r0, #2]
    this->timestamp = system_timer_current_time();
 800a1b8:	f7fd ff60 	bl	800807c <_ZN5codal25system_timer_current_timeEv>
 800a1bc:	6060      	str	r0, [r4, #4]
}
 800a1be:	4620      	mov	r0, r4
 800a1c0:	bd10      	pop	{r4, pc}

0800a1c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>:
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 800a1c2:	b538      	push	{r3, r4, r5, lr}
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	461d      	mov	r5, r3
    this->source = source;
 800a1c8:	8001      	strh	r1, [r0, #0]
    this->value = value;
 800a1ca:	8042      	strh	r2, [r0, #2]
    this->timestamp = system_timer_current_time();
 800a1cc:	f7fd ff56 	bl	800807c <_ZN5codal25system_timer_current_timeEv>
 800a1d0:	6060      	str	r0, [r4, #4]
    if(mode != CREATE_ONLY)
 800a1d2:	b90d      	cbnz	r5, 800a1d8 <_ZN5codal5EventC1EttNS_15EventLaunchModeE+0x16>
}
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	bd38      	pop	{r3, r4, r5, pc}
        this->fire();
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f7fe f8ff 	bl	80083dc <_ZN5codal5Event4fireEv>
 800a1de:	e7f9      	b.n	800a1d4 <_ZN5codal5EventC1EttNS_15EventLaunchModeE+0x12>

0800a1e0 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>:
  Event::Event(uint16_t source, uint16_t value, CODAL_TIMESTAMP currentTimeUs, EventLaunchMode mode)
 800a1e0:	b510      	push	{r4, lr}
 800a1e2:	4604      	mov	r4, r0
 800a1e4:	f89d 0008 	ldrb.w	r0, [sp, #8]
      this->source = source;
 800a1e8:	8021      	strh	r1, [r4, #0]
      this->value = value;
 800a1ea:	8062      	strh	r2, [r4, #2]
      this->timestamp = currentTimeUs;
 800a1ec:	6063      	str	r3, [r4, #4]
      if(mode != CREATE_ONLY)
 800a1ee:	b908      	cbnz	r0, 800a1f4 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE+0x14>
  }
 800a1f0:	4620      	mov	r0, r4
 800a1f2:	bd10      	pop	{r4, pc}
          this->fire();
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f7fe f8f1 	bl	80083dc <_ZN5codal5Event4fireEv>
 800a1fa:	e7f9      	b.n	800a1f0 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE+0x10>

0800a1fc <_ZN5codal14EventQueueItemC1ENS_5EventE>:
  * Constructor.
  * Create a new EventQueueItem.
  *
  * @param evt The event to be queued.
  */
EventQueueItem::EventQueueItem(Event evt)
 800a1fc:	b530      	push	{r4, r5, lr}
 800a1fe:	b083      	sub	sp, #12
 800a200:	4604      	mov	r4, r0
 800a202:	466d      	mov	r5, sp
 800a204:	e885 0006 	stmia.w	r5, {r1, r2}
 800a208:	f7ff ffd1 	bl	800a1ae <_ZN5codal5EventC1Ev>
{
    this->evt = evt;
 800a20c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a210:	e884 0003 	stmia.w	r4, {r0, r1}
    this->next = NULL;
 800a214:	2300      	movs	r3, #0
 800a216:	60a3      	str	r3, [r4, #8]
}
 800a218:	4620      	mov	r0, r4
 800a21a:	b003      	add	sp, #12
 800a21c:	bd30      	pop	{r4, r5, pc}

0800a21e <_ZN5codal13ManagedStringD1Ev>:
ManagedString::~ManagedString()
 800a21e:	b510      	push	{r4, lr}
 800a220:	4604      	mov	r4, r0
    ptr->decr();
 800a222:	6800      	ldr	r0, [r0, #0]
 800a224:	f000 f895 	bl	800a352 <_ZN5codal10RefCounted4decrEv>
}
 800a228:	4620      	mov	r0, r4
 800a22a:	bd10      	pop	{r4, pc}

0800a22c <_ZN5codal13ManagedString10initStringEPKci>:
{
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	4605      	mov	r5, r0
 800a230:	460e      	mov	r6, r1
 800a232:	4614      	mov	r4, r2
    ptr = (StringData *) malloc(sizeof(StringData) + len + 1);
 800a234:	1d50      	adds	r0, r2, #5
 800a236:	f7fd fe77 	bl	8007f28 <device_malloc>
 800a23a:	6028      	str	r0, [r5, #0]
    REF_COUNTED_INIT(ptr);
 800a23c:	f000 f8a8 	bl	800a390 <_ZN5codal10RefCounted4initEv>
    ptr->len = len;
 800a240:	682b      	ldr	r3, [r5, #0]
 800a242:	805c      	strh	r4, [r3, #2]
    memcpy(ptr->data, str, len);
 800a244:	6828      	ldr	r0, [r5, #0]
 800a246:	4622      	mov	r2, r4
 800a248:	4631      	mov	r1, r6
 800a24a:	3004      	adds	r0, #4
 800a24c:	f7f8 fa75 	bl	800273a <memcpy>
    ptr->data[len] = 0;
 800a250:	682b      	ldr	r3, [r5, #0]
 800a252:	441c      	add	r4, r3
 800a254:	2300      	movs	r3, #0
 800a256:	7123      	strb	r3, [r4, #4]
}
 800a258:	bd70      	pop	{r4, r5, r6, pc}

0800a25a <_ZN5codal13ManagedStringC1EPNS_10StringDataE>:
ManagedString::ManagedString(StringData *p)
 800a25a:	b510      	push	{r4, lr}
 800a25c:	4604      	mov	r4, r0
    if(p == NULL)
 800a25e:	b129      	cbz	r1, 800a26c <_ZN5codal13ManagedStringC1EPNS_10StringDataE+0x12>
 800a260:	4608      	mov	r0, r1
    ptr = p;
 800a262:	6021      	str	r1, [r4, #0]
    ptr->incr();
 800a264:	f000 f861 	bl	800a32a <_ZN5codal10RefCounted4incrEv>
}
 800a268:	4620      	mov	r0, r4
 800a26a:	bd10      	pop	{r4, pc}
        initEmpty();
 800a26c:	f7fe f8c4 	bl	80083f8 <_ZN5codal13ManagedString9initEmptyEv>
        return;
 800a270:	e7fa      	b.n	800a268 <_ZN5codal13ManagedStringC1EPNS_10StringDataE+0xe>

0800a272 <_ZN5codal13ManagedStringC1Ei>:
ManagedString::ManagedString(const int value)
 800a272:	b510      	push	{r4, lr}
 800a274:	b084      	sub	sp, #16
 800a276:	4604      	mov	r4, r0
 800a278:	4608      	mov	r0, r1
    itoa(value, str);
 800a27a:	a901      	add	r1, sp, #4
 800a27c:	f7fe f8de 	bl	800843c <_ZN5codal4itoaEiPc>
    initString(str, strlen(str));
 800a280:	a801      	add	r0, sp, #4
 800a282:	f7f8 fa72 	bl	800276a <strlen>
 800a286:	4602      	mov	r2, r0
 800a288:	a901      	add	r1, sp, #4
 800a28a:	4620      	mov	r0, r4
 800a28c:	f7ff ffce 	bl	800a22c <_ZN5codal13ManagedString10initStringEPKci>
}
 800a290:	4620      	mov	r0, r4
 800a292:	b004      	add	sp, #16
 800a294:	bd10      	pop	{r4, pc}

0800a296 <_ZN5codal13ManagedStringC1EPKcs>:
ManagedString::ManagedString(const char *str, const int16_t length)
 800a296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a298:	4604      	mov	r4, r0
    if (str == NULL || *str == 0 || (uint16_t)length > strlen(str)) // XXX length should be unsigned on the interface
 800a29a:	b149      	cbz	r1, 800a2b0 <_ZN5codal13ManagedStringC1EPKcs+0x1a>
 800a29c:	4617      	mov	r7, r2
 800a29e:	460d      	mov	r5, r1
 800a2a0:	780b      	ldrb	r3, [r1, #0]
 800a2a2:	b12b      	cbz	r3, 800a2b0 <_ZN5codal13ManagedStringC1EPKcs+0x1a>
 800a2a4:	b296      	uxth	r6, r2
 800a2a6:	4608      	mov	r0, r1
 800a2a8:	f7f8 fa5f 	bl	800276a <strlen>
 800a2ac:	4286      	cmp	r6, r0
 800a2ae:	d904      	bls.n	800a2ba <_ZN5codal13ManagedStringC1EPKcs+0x24>
        initEmpty();
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f7fe f8a1 	bl	80083f8 <_ZN5codal13ManagedString9initEmptyEv>
}
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    initString(str, length);
 800a2ba:	463a      	mov	r2, r7
 800a2bc:	4629      	mov	r1, r5
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f7ff ffb4 	bl	800a22c <_ZN5codal13ManagedString10initStringEPKci>
 800a2c4:	e7f7      	b.n	800a2b6 <_ZN5codal13ManagedStringC1EPKcs+0x20>

0800a2c6 <_ZN5codal13ManagedStringC1ERKS0_>:
ManagedString::ManagedString(const ManagedString &s)
 800a2c6:	b510      	push	{r4, lr}
 800a2c8:	4604      	mov	r4, r0
    ptr = s.ptr;
 800a2ca:	6808      	ldr	r0, [r1, #0]
 800a2cc:	6020      	str	r0, [r4, #0]
    ptr->incr();
 800a2ce:	f000 f82c 	bl	800a32a <_ZN5codal10RefCounted4incrEv>
}
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	bd10      	pop	{r4, pc}

0800a2d6 <_ZN5codal13ManagedStringC1Ev>:
ManagedString::ManagedString()
 800a2d6:	b510      	push	{r4, lr}
 800a2d8:	4604      	mov	r4, r0
    initEmpty();
 800a2da:	f7fe f88d 	bl	80083f8 <_ZN5codal13ManagedString9initEmptyEv>
}
 800a2de:	4620      	mov	r0, r4
 800a2e0:	bd10      	pop	{r4, pc}

0800a2e2 <_ZN5codal13ManagedStringaSERKS0_>:
{
 800a2e2:	b538      	push	{r3, r4, r5, lr}
 800a2e4:	4604      	mov	r4, r0
    if (this->ptr == s.ptr)
 800a2e6:	6800      	ldr	r0, [r0, #0]
 800a2e8:	680b      	ldr	r3, [r1, #0]
 800a2ea:	4298      	cmp	r0, r3
 800a2ec:	d006      	beq.n	800a2fc <_ZN5codal13ManagedStringaSERKS0_+0x1a>
 800a2ee:	460d      	mov	r5, r1
    ptr->decr();
 800a2f0:	f000 f82f 	bl	800a352 <_ZN5codal10RefCounted4decrEv>
    ptr = s.ptr;
 800a2f4:	6828      	ldr	r0, [r5, #0]
 800a2f6:	6020      	str	r0, [r4, #0]
    ptr->incr();
 800a2f8:	f000 f817 	bl	800a32a <_ZN5codal10RefCounted4incrEv>
}
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}

0800a300 <_ZN5codal13ManagedString6charAtEs>:
    return (index >=0 && index < length()) ? ptr->data[index] : 0;
 800a300:	2900      	cmp	r1, #0
 800a302:	db07      	blt.n	800a314 <_ZN5codal13ManagedString6charAtEs+0x14>
 800a304:	6803      	ldr	r3, [r0, #0]
 800a306:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800a30a:	4291      	cmp	r1, r2
 800a30c:	da04      	bge.n	800a318 <_ZN5codal13ManagedString6charAtEs+0x18>
 800a30e:	440b      	add	r3, r1
 800a310:	7918      	ldrb	r0, [r3, #4]
 800a312:	4770      	bx	lr
 800a314:	2000      	movs	r0, #0
 800a316:	4770      	bx	lr
 800a318:	2000      	movs	r0, #0
}
 800a31a:	4770      	bx	lr

0800a31c <_GLOBAL__sub_I__ZN5codal13ManagedString9initEmptyEv>:
ManagedString ManagedString::EmptyString(EMPTY_DATA);
 800a31c:	b508      	push	{r3, lr}
 800a31e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a322:	2001      	movs	r0, #1
 800a324:	f7fe f86e 	bl	8008404 <_Z41__static_initialization_and_destruction_0ii>
 800a328:	bd08      	pop	{r3, pc}

0800a32a <_ZN5codal10RefCounted4incrEv>:
  *
  * @return true if the object resides in flash memory, false otherwise.
  */
static inline bool isReadOnlyInline(RefCounted *t)
{
    uint32_t refCount = t->refCount;
 800a32a:	8803      	ldrh	r3, [r0, #0]

    if (refCount == 0xffff)
 800a32c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a330:	4293      	cmp	r3, r2
 800a332:	d00d      	beq.n	800a350 <_ZN5codal10RefCounted4incrEv+0x26>

/**
  * Increment reference count.
  */
void RefCounted::incr()
{
 800a334:	b510      	push	{r4, lr}
 800a336:	4604      	mov	r4, r0
    if (refCount == 1 ||        // object should have been deleted
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d002      	beq.n	800a342 <_ZN5codal10RefCounted4incrEv+0x18>
 800a33c:	f013 0f01 	tst.w	r3, #1
 800a340:	d102      	bne.n	800a348 <_ZN5codal10RefCounted4incrEv+0x1e>
        target_panic(DEVICE_HEAP_ERROR);
 800a342:	201e      	movs	r0, #30
 800a344:	f7f6 fb98 	bl	8000a78 <target_panic>
    if (!isReadOnlyInline(this))
        refCount += 2;
 800a348:	8823      	ldrh	r3, [r4, #0]
 800a34a:	3302      	adds	r3, #2
 800a34c:	8023      	strh	r3, [r4, #0]
}
 800a34e:	bd10      	pop	{r4, pc}
 800a350:	4770      	bx	lr

0800a352 <_ZN5codal10RefCounted4decrEv>:
    uint32_t refCount = t->refCount;
 800a352:	8803      	ldrh	r3, [r0, #0]
    if (refCount == 0xffff)
 800a354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a358:	4293      	cmp	r3, r2
 800a35a:	d014      	beq.n	800a386 <_ZN5codal10RefCounted4decrEv+0x34>

/**
  * Decrement reference count.
  */
void RefCounted::decr()
{
 800a35c:	b510      	push	{r4, lr}
 800a35e:	4604      	mov	r4, r0
    if (refCount == 1 ||        // object should have been deleted
 800a360:	2b01      	cmp	r3, #1
 800a362:	d002      	beq.n	800a36a <_ZN5codal10RefCounted4decrEv+0x18>
 800a364:	f013 0f01 	tst.w	r3, #1
 800a368:	d102      	bne.n	800a370 <_ZN5codal10RefCounted4decrEv+0x1e>
        target_panic(DEVICE_HEAP_ERROR);
 800a36a:	201e      	movs	r0, #30
 800a36c:	f7f6 fb84 	bl	8000a78 <target_panic>
    if (isReadOnlyInline(this))
        return;

    refCount -= 2;
 800a370:	8823      	ldrh	r3, [r4, #0]
 800a372:	3b02      	subs	r3, #2
 800a374:	b29b      	uxth	r3, r3
 800a376:	8023      	strh	r3, [r4, #0]
    if (refCount == 1) {
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d000      	beq.n	800a37e <_ZN5codal10RefCounted4decrEv+0x2c>
        // if we just call plain free(), the write to refCount will
        // be optimized away, and it will stay '3'; this way we make
        // sure to get a panic on next incr()/decr()
        destroy();
    }
}
 800a37c:	bd10      	pop	{r4, pc}
        destroy();
 800a37e:	4620      	mov	r0, r4
 800a380:	f000 f802 	bl	800a388 <_ZN5codal10RefCounted7destroyEv>
 800a384:	e7fa      	b.n	800a37c <_ZN5codal10RefCounted4decrEv+0x2a>
 800a386:	4770      	bx	lr

0800a388 <_ZN5codal10RefCounted7destroyEv>:

/**
  * Releases the current instance.
  */
void RefCounted::destroy()
{
 800a388:	b508      	push	{r3, lr}
    free(this);
 800a38a:	f7fd fdf7 	bl	8007f7c <device_free>
}
 800a38e:	bd08      	pop	{r3, pc}

0800a390 <_ZN5codal10RefCounted4initEv>:
  * Initializes for one outstanding reference.
  */
void RefCounted::init()
{
    // Initialize to one reference (lowest bit set to 1)
    refCount = 3;
 800a390:	2303      	movs	r3, #3
 800a392:	8003      	strh	r3, [r0, #0]
}
 800a394:	4770      	bx	lr

0800a396 <_ZN5codal14string_reverseEPc>:
    if(s == NULL)
 800a396:	b190      	cbz	r0, 800a3be <_ZN5codal14string_reverseEPc+0x28>
{
 800a398:	b538      	push	{r3, r4, r5, lr}
 800a39a:	4604      	mov	r4, r0
    j = s + strlen(s) - 1;
 800a39c:	f7f8 f9e5 	bl	800276a <strlen>
 800a3a0:	3801      	subs	r0, #1
 800a3a2:	4420      	add	r0, r4
    while(s < j)
 800a3a4:	4284      	cmp	r4, r0
 800a3a6:	d20d      	bcs.n	800a3c4 <_ZN5codal14string_reverseEPc+0x2e>
        c = *s;
 800a3a8:	4623      	mov	r3, r4
 800a3aa:	f813 1b01 	ldrb.w	r1, [r3], #1
        *s++ = *j;
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	f812 5901 	ldrb.w	r5, [r2], #-1
 800a3b4:	7025      	strb	r5, [r4, #0]
        *j-- = c;
 800a3b6:	7001      	strb	r1, [r0, #0]
 800a3b8:	4610      	mov	r0, r2
        *s++ = *j;
 800a3ba:	461c      	mov	r4, r3
    while(s < j)
 800a3bc:	e7f2      	b.n	800a3a4 <_ZN5codal14string_reverseEPc+0xe>
        return DEVICE_INVALID_PARAMETER;
 800a3be:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800a3c2:	4770      	bx	lr
    return DEVICE_OK;
 800a3c4:	2000      	movs	r0, #0
}
 800a3c6:	bd38      	pop	{r3, r4, r5, pc}

0800a3c8 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>:
  * Calls the method reference held by this MemberFunctionCallback.
  *
  * @param e The event to deliver to the method
  */
void MemberFunctionCallback::fire(Event e)
{
 800a3c8:	b510      	push	{r4, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	466b      	mov	r3, sp
 800a3ce:	e883 0006 	stmia.w	r3, {r1, r2}
    invoke(object, method, e);
 800a3d2:	6944      	ldr	r4, [r0, #20]
 800a3d4:	cb0c      	ldmia	r3, {r2, r3}
 800a3d6:	1d01      	adds	r1, r0, #4
 800a3d8:	6800      	ldr	r0, [r0, #0]
 800a3da:	47a0      	blx	r4
}
 800a3dc:	b002      	add	sp, #8
 800a3de:	bd10      	pop	{r4, pc}

0800a3e0 <_ZN5codal22MemberFunctionCallbackeqERKS0_>:
  * A comparison of two MemberFunctionCallback objects.
  *
  * @return true if the given MemberFunctionCallback is equivalent to this one, false otherwise.
  */
bool MemberFunctionCallback::operator==(const MemberFunctionCallback &mfc)
{
 800a3e0:	b508      	push	{r3, lr}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 800a3e2:	6802      	ldr	r2, [r0, #0]
 800a3e4:	680b      	ldr	r3, [r1, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d001      	beq.n	800a3ee <_ZN5codal22MemberFunctionCallbackeqERKS0_+0xe>
 800a3ea:	2000      	movs	r0, #0
}
 800a3ec:	bd08      	pop	{r3, pc}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 800a3ee:	2210      	movs	r2, #16
 800a3f0:	3104      	adds	r1, #4
 800a3f2:	3004      	adds	r0, #4
 800a3f4:	f7f8 f991 	bl	800271a <memcmp>
 800a3f8:	b108      	cbz	r0, 800a3fe <_ZN5codal22MemberFunctionCallbackeqERKS0_+0x1e>
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	e7f6      	b.n	800a3ec <_ZN5codal22MemberFunctionCallbackeqERKS0_+0xc>
 800a3fe:	2001      	movs	r0, #1
 800a400:	e7f4      	b.n	800a3ec <_ZN5codal22MemberFunctionCallbackeqERKS0_+0xc>

0800a402 <_ZN5codal3Pin15setServoPulseUsEm>:
          *         if the given pin does not have analog capability.
          */
        virtual int setServoPulseUs(uint32_t pulseWidth)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 800a402:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a406:	4770      	bx	lr

0800a408 <_ZN5codal3Pin17setAnalogPeriodUsEm>:
          *         given pin is not configured as an analog output.
          */
        virtual int setAnalogPeriodUs(uint32_t period)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 800a408:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a40c:	4770      	bx	lr

0800a40e <_ZN5codal3Pin8drainPinEv>:
          *         than a digital input, otherwise DEVICE_OK.
          */
        virtual int drainPin()
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 800a40e:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a412:	4770      	bx	lr

0800a414 <_ZN5codal3_cm3Pin15getDigitalValueEv>:
}
 800a414:	2001      	movs	r0, #1
 800a416:	4770      	bx	lr

0800a418 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE>:
{
 800a418:	b510      	push	{r4, lr}
 800a41a:	4604      	mov	r4, r0
    setPull(pull);
 800a41c:	6803      	ldr	r3, [r0, #0]
 800a41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a420:	4798      	blx	r3
    return getDigitalValue();
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	4620      	mov	r0, r4
 800a428:	4798      	blx	r3
}
 800a42a:	bd10      	pop	{r4, pc}

0800a42c <_ZN5codal3_cm3Pin14getAnalogValueEv>:
}
 800a42c:	20e1      	movs	r0, #225	; 0xe1
 800a42e:	4770      	bx	lr

0800a430 <_ZN5codal3_cm3Pin7isInputEv>:
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_ANALOG_IN)) == 0 ? 0 : 1;
 800a430:	8983      	ldrh	r3, [r0, #12]
 800a432:	f013 0f05 	tst.w	r3, #5
}
 800a436:	bf14      	ite	ne
 800a438:	2001      	movne	r0, #1
 800a43a:	2000      	moveq	r0, #0
 800a43c:	4770      	bx	lr

0800a43e <_ZN5codal3_cm3Pin8isOutputEv>:
    return (status & (IO_STATUS_DIGITAL_OUT | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 800a43e:	8983      	ldrh	r3, [r0, #12]
 800a440:	f013 0f0a 	tst.w	r3, #10
}
 800a444:	bf14      	ite	ne
 800a446:	2001      	movne	r0, #1
 800a448:	2000      	moveq	r0, #0
 800a44a:	4770      	bx	lr

0800a44c <_ZN5codal3_cm3Pin9isDigitalEv>:
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_DIGITAL_OUT)) == 0 ? 0 : 1;
 800a44c:	8980      	ldrh	r0, [r0, #12]
}
 800a44e:	f010 0003 	ands.w	r0, r0, #3
 800a452:	bf18      	it	ne
 800a454:	2001      	movne	r0, #1
 800a456:	4770      	bx	lr

0800a458 <_ZN5codal3_cm3Pin8isAnalogEv>:
    return (status & (IO_STATUS_ANALOG_IN | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 800a458:	8983      	ldrh	r3, [r0, #12]
 800a45a:	f013 0f0c 	tst.w	r3, #12
}
 800a45e:	bf14      	ite	ne
 800a460:	2001      	movne	r0, #1
 800a462:	2000      	moveq	r0, #0
 800a464:	4770      	bx	lr

0800a466 <_ZN5codal3_cm3Pin7setPullENS_8PullModeE>:
  * @return DEVICE_NOT_SUPPORTED if the current pin configuration is anything other
  *         than a digital input, otherwise DEVICE_OK.
  */
int Pin::setPull(PullMode pull)
{
    pullMode = pull;
 800a466:	6081      	str	r1, [r0, #8]
        return DEVICE_OK;
    }

    return DEVICE_NOT_SUPPORTED;
#endif  //  TODO
}
 800a468:	2000      	movs	r0, #0
 800a46a:	4770      	bx	lr

0800a46c <_ZN5codal3_cm3Pin5setupEhh>:
) {
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	4604      	mov	r4, r0
 800a470:	460d      	mov	r5, r1
 800a472:	4616      	mov	r6, r2
	rcc_periph_clock_enable((enum rcc_periph_clken) this->rcc);
 800a474:	8a80      	ldrh	r0, [r0, #20]
 800a476:	f7f7 fa10 	bl	800189a <rcc_periph_clock_enable>
	gpio_set_mode(this->port, mode, cnf, this->pin);
 800a47a:	8ba3      	ldrh	r3, [r4, #28]
 800a47c:	4632      	mov	r2, r6
 800a47e:	4629      	mov	r1, r5
 800a480:	69a0      	ldr	r0, [r4, #24]
 800a482:	f7f7 f9cb 	bl	800181c <gpio_set_mode>
}
 800a486:	bd70      	pop	{r4, r5, r6, pc}

0800a488 <_ZN5codal3_cm3Pin10disconnectEv>:
    this->status = 0;
 800a488:	2300      	movs	r3, #0
 800a48a:	8183      	strh	r3, [r0, #12]
}
 800a48c:	4770      	bx	lr

0800a48e <_ZN5codal3_cm3Pin15setServoPulseUsEi>:
}
 800a48e:	2000      	movs	r0, #0
 800a490:	4770      	bx	lr

0800a492 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>:
{
 800a492:	b508      	push	{r3, lr}
    if (!(status & IO_STATUS_ANALOG_OUT))
 800a494:	8983      	ldrh	r3, [r0, #12]
 800a496:	f013 0f08 	tst.w	r3, #8
 800a49a:	d001      	beq.n	800a4a0 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi+0xe>
    return 0;
 800a49c:	2000      	movs	r0, #0
}
 800a49e:	bd08      	pop	{r3, pc}
        ret = setAnalogValue(0);
 800a4a0:	6803      	ldr	r3, [r0, #0]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4798      	blx	r3
 800a4a8:	e7f9      	b.n	800a49e <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi+0xc>

0800a4aa <_ZN5codal3_cm3Pin15setAnalogPeriodEi>:
{
 800a4aa:	b508      	push	{r3, lr}
    return setAnalogPeriodUs(period*1000);
 800a4ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a4b0:	fb03 f101 	mul.w	r1, r3, r1
 800a4b4:	f7ff ffed 	bl	800a492 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>
}
 800a4b8:	bd08      	pop	{r3, pc}

0800a4ba <_ZN5codal3_cm3Pin13disableEventsEv>:
  * the current instance attached to this Pin instance.
  *
  * @return DEVICE_OK on success.
  */
int Pin::disableEvents()
{
 800a4ba:	b508      	push	{r3, lr}
    if (status & (IO_STATUS_EVENT_ON_EDGE | IO_STATUS_EVENT_PULSE_ON_EDGE | IO_STATUS_TOUCH_IN))
 800a4bc:	8983      	ldrh	r3, [r0, #12]
 800a4be:	f013 0f70 	tst.w	r3, #112	; 0x70
 800a4c2:	d101      	bne.n	800a4c8 <_ZN5codal3_cm3Pin13disableEventsEv+0xe>
        disconnect();

    return DEVICE_OK;
}
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	bd08      	pop	{r3, pc}
        disconnect();
 800a4c8:	f7ff ffde 	bl	800a488 <_ZN5codal3_cm3Pin10disconnectEv>
 800a4cc:	e7fa      	b.n	800a4c4 <_ZN5codal3_cm3Pin13disableEventsEv+0xa>

0800a4ce <_ZN5codal3_cm3Pin7eventOnEi>:
  *
  * @note In the DEVICE_PIN_EVENT_ON_PULSE mode, the smallest pulse that was reliably detected was 85us, around 5khz. If more precision is required,
  *       please use the InterruptIn class supplied by ARM mbed.
  */
int Pin::eventOn(int eventType)
{
 800a4ce:	b510      	push	{r4, lr}
    switch(eventType)
 800a4d0:	2903      	cmp	r1, #3
 800a4d2:	d803      	bhi.n	800a4dc <_ZN5codal3_cm3Pin7eventOnEi+0xe>
 800a4d4:	e8df f001 	tbb	[pc, r1]
 800a4d8:	050f0f0a 	.word	0x050f0f0a
        case DEVICE_PIN_EVENT_NONE:
            disableEvents();
            break;

        default:
            return DEVICE_INVALID_PARAMETER;
 800a4dc:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800a4e0:	e00a      	b.n	800a4f8 <_ZN5codal3_cm3Pin7eventOnEi+0x2a>
            isTouched();
 800a4e2:	6803      	ldr	r3, [r0, #0]
 800a4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e6:	4798      	blx	r3
    }

    return DEVICE_OK;
 800a4e8:	2000      	movs	r0, #0
            break;
 800a4ea:	e005      	b.n	800a4f8 <_ZN5codal3_cm3Pin7eventOnEi+0x2a>
 800a4ec:	460c      	mov	r4, r1
            disableEvents();
 800a4ee:	f7ff ffe4 	bl	800a4ba <_ZN5codal3_cm3Pin13disableEventsEv>
    return DEVICE_OK;
 800a4f2:	4620      	mov	r0, r4
            break;
 800a4f4:	e000      	b.n	800a4f8 <_ZN5codal3_cm3Pin7eventOnEi+0x2a>
    return DEVICE_OK;
 800a4f6:	2000      	movs	r0, #0
}
 800a4f8:	bd10      	pop	{r4, pc}

0800a4fa <_ZN5codal3_cm6Serial15enableInterruptENS_19SerialInterruptTypeE>:
        {
            ////TODO
            int enableInterrupt(SerialInterruptType t) { return 0; }
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	4770      	bx	lr

0800a4fe <_ZN5codal3_cm6Serial16disableInterruptENS_19SerialInterruptTypeE>:
            int disableInterrupt(SerialInterruptType t) { return 0; }
 800a4fe:	2000      	movs	r0, #0
 800a500:	4770      	bx	lr

0800a502 <_ZN5codal3_cm6Serial11setBaudrateEm>:
            int setBaudrate(uint32_t baudrate) { return 0; }
 800a502:	2000      	movs	r0, #0
 800a504:	4770      	bx	lr

0800a506 <_ZN5codal3_cm6Serial13configurePinsERNS_3PinES3_>:
            int configurePins(codal::Pin& tx, codal::Pin& rx) { return 0; }
 800a506:	2000      	movs	r0, #0
 800a508:	4770      	bx	lr

0800a50a <_ZN5codal3_cm6Serial4putcEc>:
            int putc(char c) { return 1; }
 800a50a:	2001      	movs	r0, #1
 800a50c:	4770      	bx	lr

0800a50e <_ZN5codal3_cm6Serial4getcEv>:
            int getc() { return -1; }
 800a50e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a512:	4770      	bx	lr

0800a514 <_ZN5codal3_cm6Serial6lockRxEv>:
        /**
          * Locks the mutex so that others can't use this serial instance for reception
          */
        void Serial::lockRx()
        {
            status |= CODAL_SERIAL_RX_IN_USE;
 800a514:	88c3      	ldrh	r3, [r0, #6]
 800a516:	f043 0301 	orr.w	r3, r3, #1
 800a51a:	80c3      	strh	r3, [r0, #6]
        }
 800a51c:	4770      	bx	lr

0800a51e <_ZN5codal3_cm6Serial8unlockRxEv>:
        /**
          * Unlocks the mutex so that others can use this serial instance for reception
          */
        void Serial::unlockRx()
        {
            status &= ~CODAL_SERIAL_RX_IN_USE;
 800a51e:	88c3      	ldrh	r3, [r0, #6]
 800a520:	f023 0301 	bic.w	r3, r3, #1
 800a524:	80c3      	strh	r3, [r0, #6]
        }
 800a526:	4770      	bx	lr

0800a528 <_ZN5codal3_cm6Serial12initialiseRxEv>:
        /**
          * We do not want to always have our buffers initialised, especially if users to not
          * use them. We only bring them up on demand.
          */
        int Serial::initialiseRx()
        {
 800a528:	b538      	push	{r3, r4, r5, lr}
 800a52a:	4604      	mov	r4, r0
            if((status & CODAL_SERIAL_RX_BUFF_INIT))
 800a52c:	88c3      	ldrh	r3, [r0, #6]
 800a52e:	f013 0f04 	tst.w	r3, #4
 800a532:	d110      	bne.n	800a556 <_ZN5codal3_cm6Serial12initialiseRxEv+0x2e>
                //ensure that we receive no interrupts after freeing our buffer
                detach(RxInterrupt);
                free(this->rxBuff);
            }

            status &= ~CODAL_SERIAL_RX_BUFF_INIT;
 800a534:	88e5      	ldrh	r5, [r4, #6]
 800a536:	f025 0504 	bic.w	r5, r5, #4
 800a53a:	b2ad      	uxth	r5, r5
 800a53c:	80e5      	strh	r5, [r4, #6]

            if((this->rxBuff = (uint8_t *)malloc(rxBuffSize)) == NULL)
 800a53e:	7f20      	ldrb	r0, [r4, #28]
 800a540:	f7fd fcf2 	bl	8007f28 <device_malloc>
 800a544:	61a0      	str	r0, [r4, #24]
 800a546:	b150      	cbz	r0, 800a55e <_ZN5codal3_cm6Serial12initialiseRxEv+0x36>
                return DEVICE_NO_RESOURCES;

            this->rxBuffHead = 0;
 800a548:	2000      	movs	r0, #0
 800a54a:	83e0      	strh	r0, [r4, #30]
            this->rxBuffTail = 0;
 800a54c:	8420      	strh	r0, [r4, #32]

            //set the receive interrupt
            status |= CODAL_SERIAL_RX_BUFF_INIT;
 800a54e:	f045 0504 	orr.w	r5, r5, #4
 800a552:	80e5      	strh	r5, [r4, #6]
            attach(RxInterrupt, &Serial::dataReceived);

            return DEVICE_OK;
        }
 800a554:	bd38      	pop	{r3, r4, r5, pc}
                free(this->rxBuff);
 800a556:	6980      	ldr	r0, [r0, #24]
 800a558:	f7fd fd10 	bl	8007f7c <device_free>
 800a55c:	e7ea      	b.n	800a534 <_ZN5codal3_cm6Serial12initialiseRxEv+0xc>
                return DEVICE_NO_RESOURCES;
 800a55e:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 800a562:	e7f7      	b.n	800a554 <_ZN5codal3_cm6Serial12initialiseRxEv+0x2c>

0800a564 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt>:
          *
          * @note this method assumes that the linear buffer has the appropriate amount of
          *       memory to contain the copy operation
          */
        void Serial::circularCopy(uint8_t *circularBuff, uint8_t circularBuffSize, uint8_t *linearBuff, uint16_t tailPosition, uint16_t headPosition)
        {
 800a564:	b470      	push	{r4, r5, r6}
 800a566:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800a56a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
            int toBuffIndex = 0;
 800a56e:	2500      	movs	r5, #0

            while(tailPosition != headPosition)
 800a570:	42b0      	cmp	r0, r6
 800a572:	d009      	beq.n	800a588 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt+0x24>
            {
                linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 800a574:	5c0c      	ldrb	r4, [r1, r0]
 800a576:	555c      	strb	r4, [r3, r5]

                tailPosition = (tailPosition + 1) % circularBuffSize;
 800a578:	3001      	adds	r0, #1
 800a57a:	fb90 f4f2 	sdiv	r4, r0, r2
 800a57e:	fb02 0014 	mls	r0, r2, r4, r0
 800a582:	b280      	uxth	r0, r0
                linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 800a584:	3501      	adds	r5, #1
            while(tailPosition != headPosition)
 800a586:	e7f3      	b.n	800a570 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt+0xc>
            }
        }
 800a588:	bc70      	pop	{r4, r5, r6}
 800a58a:	4770      	bx	lr

0800a58c <_ZN5codal3_cm6Serial4baudEi>:
          *
          * @note the underlying implementation chooses the first allowable rate at or above that requested.
          */
        int Serial::baud(int baudrate)
        {
            if(baudrate < 0)
 800a58c:	2900      	cmp	r1, #0
 800a58e:	db02      	blt.n	800a596 <_ZN5codal3_cm6Serial4baudEi+0xa>
                return DEVICE_INVALID_PARAMETER;

            this->baudrate = baudrate;
 800a590:	6301      	str	r1, [r0, #48]	; 0x30
#ifdef TODO
            RawSerial::baud(baudrate);
#endif  //  TODO

            return DEVICE_OK;
 800a592:	2000      	movs	r0, #0
 800a594:	4770      	bx	lr
                return DEVICE_INVALID_PARAMETER;
 800a596:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
        }
 800a59a:	4770      	bx	lr

0800a59c <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>:
          *
          * @note delimeters are matched on a per byte basis.
          */
        int Serial::eventOn(ManagedString delimeters, SerialMode mode)
        {
            if(mode == SYNC_SPINWAIT)
 800a59c:	2a01      	cmp	r2, #1
 800a59e:	d00e      	beq.n	800a5be <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x22>
        {
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	4614      	mov	r4, r2
                return DEVICE_INVALID_PARAMETER;

            //configure our head match...
            this->delimeters = delimeters;
 800a5a4:	3010      	adds	r0, #16
 800a5a6:	f7ff fe9c 	bl	800a2e2 <_ZN5codal13ManagedStringaSERKS0_>

            //block!
            if(mode == SYNC_SLEEP)
 800a5aa:	2c02      	cmp	r4, #2
 800a5ac:	d001      	beq.n	800a5b2 <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x16>
                fiber_wait_for_event(DEVICE_ID_SERIAL, CODAL_SERIAL_EVT_DELIM_MATCH);

            return DEVICE_OK;
 800a5ae:	2000      	movs	r0, #0
        }
 800a5b0:	bd10      	pop	{r4, pc}
                fiber_wait_for_event(DEVICE_ID_SERIAL, CODAL_SERIAL_EVT_DELIM_MATCH);
 800a5b2:	2101      	movs	r1, #1
 800a5b4:	200c      	movs	r0, #12
 800a5b6:	f7ff f987 	bl	80098c8 <_ZN5codal20fiber_wait_for_eventEtt>
            return DEVICE_OK;
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	e7f8      	b.n	800a5b0 <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x14>
                return DEVICE_INVALID_PARAMETER;
 800a5be:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
        }
 800a5c2:	4770      	bx	lr

0800a5c4 <_ZN5codal3_cm6Serial7rxInUseEv>:
          *
          * @note Only one fiber can call read at a time
          */
        int Serial::rxInUse()
        {
            return (status & CODAL_SERIAL_RX_IN_USE);
 800a5c4:	88c0      	ldrh	r0, [r0, #6]
        }
 800a5c6:	f000 0001 	and.w	r0, r0, #1
 800a5ca:	4770      	bx	lr

0800a5cc <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE>:
        {
 800a5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d0:	b089      	sub	sp, #36	; 0x24
 800a5d2:	af02      	add	r7, sp, #8
 800a5d4:	60b8      	str	r0, [r7, #8]
 800a5d6:	4688      	mov	r8, r1
 800a5d8:	4615      	mov	r5, r2
 800a5da:	607b      	str	r3, [r7, #4]
            if(rxInUse())
 800a5dc:	4608      	mov	r0, r1
 800a5de:	f7ff fff1 	bl	800a5c4 <_ZN5codal3_cm6Serial7rxInUseEv>
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	b990      	cbnz	r0, 800a60c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x40>
            if(!(status & CODAL_SERIAL_RX_BUFF_INIT))
 800a5e6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800a5ea:	f013 0f04 	tst.w	r3, #4
 800a5ee:	d104      	bne.n	800a5fa <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x2e>
                int result = initialiseRx();
 800a5f0:	4640      	mov	r0, r8
 800a5f2:	f7ff ff99 	bl	800a528 <_ZN5codal3_cm6Serial12initialiseRxEv>
                if(result != DEVICE_OK)
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	b960      	cbnz	r0, 800a614 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x48>
            lockRx();
 800a5fa:	4640      	mov	r0, r8
 800a5fc:	f7ff ff8a 	bl	800a514 <_ZN5codal3_cm6Serial6lockRxEv>
            int localTail = rxBuffTail;
 800a600:	f8b8 a020 	ldrh.w	sl, [r8, #32]
 800a604:	4656      	mov	r6, sl
            int foundIndex = -1;
 800a606:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a60a:	e063      	b.n	800a6d4 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x108>
                return ManagedString();
 800a60c:	68b8      	ldr	r0, [r7, #8]
 800a60e:	f7ff fe62 	bl	800a2d6 <_ZN5codal13ManagedStringC1Ev>
 800a612:	e045      	b.n	800a6a0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>
                    return result;
 800a614:	68b8      	ldr	r0, [r7, #8]
 800a616:	f7ff fe2c 	bl	800a272 <_ZN5codal13ManagedStringC1Ei>
 800a61a:	e041      	b.n	800a6a0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>
            if(mode == SYNC_SPINWAIT)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d07b      	beq.n	800a71a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x14e>
            if(mode == SYNC_SLEEP && foundIndex == -1)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b02      	cmp	r3, #2
 800a626:	f000 8086 	beq.w	800a736 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x16a>
            if(foundIndex >= 0)
 800a62a:	f1b9 0f00 	cmp.w	r9, #0
 800a62e:	f2c0 80ac 	blt.w	800a78a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1be>
                return ManagedString((char *)localBuff, localBuffSize);
 800a632:	466e      	mov	r6, sp
                int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 800a634:	45d1      	cmp	r9, sl
 800a636:	f280 80a5 	bge.w	800a784 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1b8>
 800a63a:	f898 401c 	ldrb.w	r4, [r8, #28]
 800a63e:	eba4 040a 	sub.w	r4, r4, sl
 800a642:	444c      	add	r4, r9
                uint8_t localBuff[localBuffSize + 1];
 800a644:	f104 0308 	add.w	r3, r4, #8
 800a648:	f023 0307 	bic.w	r3, r3, #7
 800a64c:	ebad 0d03 	sub.w	sp, sp, r3
 800a650:	ad02      	add	r5, sp, #8
 800a652:	1c62      	adds	r2, r4, #1
 800a654:	2100      	movs	r1, #0
 800a656:	4628      	mov	r0, r5
 800a658:	f7f8 f87c 	bl	8002754 <memset>
                circularCopy(rxBuff, rxBuffSize, localBuff, preservedTail, foundIndex);
 800a65c:	f898 201c 	ldrb.w	r2, [r8, #28]
 800a660:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800a664:	fa1f f389 	uxth.w	r3, r9
 800a668:	9301      	str	r3, [sp, #4]
 800a66a:	f8cd a000 	str.w	sl, [sp]
 800a66e:	462b      	mov	r3, r5
 800a670:	4640      	mov	r0, r8
 800a672:	f7ff ff77 	bl	800a564 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt>
                rxBuffTail = (rxBuffTail + localBuffSize + 1) % rxBuffSize;
 800a676:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 800a67a:	4423      	add	r3, r4
 800a67c:	3301      	adds	r3, #1
 800a67e:	f898 101c 	ldrb.w	r1, [r8, #28]
 800a682:	fb93 f2f1 	sdiv	r2, r3, r1
 800a686:	fb01 3312 	mls	r3, r1, r2, r3
 800a68a:	f8a8 3020 	strh.w	r3, [r8, #32]
                unlockRx();
 800a68e:	4640      	mov	r0, r8
 800a690:	f7ff ff45 	bl	800a51e <_ZN5codal3_cm6Serial8unlockRxEv>
                return ManagedString((char *)localBuff, localBuffSize);
 800a694:	b222      	sxth	r2, r4
 800a696:	4629      	mov	r1, r5
 800a698:	68b8      	ldr	r0, [r7, #8]
 800a69a:	f7ff fdfc 	bl	800a296 <_ZN5codal13ManagedStringC1EPKcs>
 800a69e:	46b5      	mov	sp, r6
        }
 800a6a0:	68b8      	ldr	r0, [r7, #8]
 800a6a2:	371c      	adds	r7, #28
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800a6aa:	3401      	adds	r4, #1
 800a6ac:	682b      	ldr	r3, [r5, #0]
 800a6ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a6b2:	42a3      	cmp	r3, r4
 800a6b4:	dd07      	ble.n	800a6c6 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xfa>
                    if(delimeters.charAt(delimeterIterator) == c)
 800a6b6:	b221      	sxth	r1, r4
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	f7ff fe21 	bl	800a300 <_ZN5codal13ManagedString6charAtEs>
 800a6be:	4558      	cmp	r0, fp
 800a6c0:	d1f3      	bne.n	800a6aa <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
                        foundIndex = localTail;
 800a6c2:	46b1      	mov	r9, r6
 800a6c4:	e7f1      	b.n	800a6aa <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
                localTail = (localTail + 1) % rxBuffSize;
 800a6c6:	3601      	adds	r6, #1
 800a6c8:	f898 301c 	ldrb.w	r3, [r8, #28]
 800a6cc:	fb96 f2f3 	sdiv	r2, r6, r3
 800a6d0:	fb03 6612 	mls	r6, r3, r2, r6
            while(localTail != rxBuffHead && foundIndex  == -1)
 800a6d4:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	42b3      	cmp	r3, r6
 800a6dc:	d09e      	beq.n	800a61c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x50>
 800a6de:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800a6e2:	d19b      	bne.n	800a61c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x50>
                char c = rxBuff[localTail];
 800a6e4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800a6e8:	f813 b006 	ldrb.w	fp, [r3, r6]
                for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800a6ec:	68fc      	ldr	r4, [r7, #12]
 800a6ee:	e7dd      	b.n	800a6ac <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xe0>
                    for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800a6f0:	3401      	adds	r4, #1
 800a6f2:	682b      	ldr	r3, [r5, #0]
 800a6f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a6f8:	42a3      	cmp	r3, r4
 800a6fa:	dd07      	ble.n	800a70c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x140>
                        if(delimeters.charAt(delimeterIterator) == c)
 800a6fc:	b221      	sxth	r1, r4
 800a6fe:	4628      	mov	r0, r5
 800a700:	f7ff fdfe 	bl	800a300 <_ZN5codal13ManagedString6charAtEs>
 800a704:	4558      	cmp	r0, fp
 800a706:	d1f3      	bne.n	800a6f0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x124>
                            foundIndex = localTail;
 800a708:	46b1      	mov	r9, r6
 800a70a:	e7f1      	b.n	800a6f0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x124>
                    localTail = (localTail + 1) % rxBuffSize;
 800a70c:	3601      	adds	r6, #1
 800a70e:	f898 301c 	ldrb.w	r3, [r8, #28]
 800a712:	fb96 f2f3 	sdiv	r2, r6, r3
 800a716:	fb03 6612 	mls	r6, r3, r2, r6
                while(foundIndex == -1)
 800a71a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800a71e:	d180      	bne.n	800a622 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x56>
                    while(localTail == rxBuffHead);
 800a720:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 800a724:	b29b      	uxth	r3, r3
 800a726:	42b3      	cmp	r3, r6
 800a728:	d0fa      	beq.n	800a720 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x154>
                    char c = rxBuff[localTail];
 800a72a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800a72e:	f813 b006 	ldrb.w	fp, [r3, r6]
                    for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800a732:	68fc      	ldr	r4, [r7, #12]
 800a734:	e7dd      	b.n	800a6f2 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x126>
            if(mode == SYNC_SLEEP && foundIndex == -1)
 800a736:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800a73a:	f47f af76 	bne.w	800a62a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x5e>
                eventOn(delimeters, mode);
 800a73e:	4629      	mov	r1, r5
 800a740:	f107 0010 	add.w	r0, r7, #16
 800a744:	f7ff fdbf 	bl	800a2c6 <_ZN5codal13ManagedStringC1ERKS0_>
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	f107 0110 	add.w	r1, r7, #16
 800a74e:	4640      	mov	r0, r8
 800a750:	f7ff ff24 	bl	800a59c <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>
 800a754:	f107 0010 	add.w	r0, r7, #16
 800a758:	f7ff fd61 	bl	800a21e <_ZN5codal13ManagedStringD1Ev>
                foundIndex = rxBuffHead - 1;
 800a75c:	f8b8 901e 	ldrh.w	r9, [r8, #30]
 800a760:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
                this->delimeters = ManagedString();
 800a764:	f108 0410 	add.w	r4, r8, #16
 800a768:	f107 0014 	add.w	r0, r7, #20
 800a76c:	f7ff fdb3 	bl	800a2d6 <_ZN5codal13ManagedStringC1Ev>
 800a770:	f107 0114 	add.w	r1, r7, #20
 800a774:	4620      	mov	r0, r4
 800a776:	f7ff fdb4 	bl	800a2e2 <_ZN5codal13ManagedStringaSERKS0_>
 800a77a:	f107 0014 	add.w	r0, r7, #20
 800a77e:	f7ff fd4e 	bl	800a21e <_ZN5codal13ManagedStringD1Ev>
 800a782:	e752      	b.n	800a62a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x5e>
                int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 800a784:	eba9 040a 	sub.w	r4, r9, sl
 800a788:	e75c      	b.n	800a644 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x78>
            unlockRx();
 800a78a:	4640      	mov	r0, r8
 800a78c:	f7ff fec7 	bl	800a51e <_ZN5codal3_cm6Serial8unlockRxEv>
            return ManagedString();
 800a790:	68b8      	ldr	r0, [r7, #8]
 800a792:	f7ff fda0 	bl	800a2d6 <_ZN5codal13ManagedStringC1Ev>
 800a796:	e783      	b.n	800a6a0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>

0800a798 <_GLOBAL__sub_I_restart_callback>:
}
 800a798:	b508      	push	{r3, lr}
 800a79a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a79e:	2001      	movs	r0, #1
 800a7a0:	f7fe f864 	bl	800886c <_Z41__static_initialization_and_destruction_0ii>
 800a7a4:	bd08      	pop	{r3, pc}

0800a7a6 <_ZN5codal13STM32BluePill16periodicCallbackEv>:
    codal_dmesg_flush();
}

void STM32BluePill::periodicCallback() {
    //  TODO
}
 800a7a6:	4770      	bx	lr

0800a7a8 <_ZN5codal13STM32BluePill12idleCallbackEv>:
void STM32BluePill::idleCallback() {
 800a7a8:	b508      	push	{r3, lr}
    codal_dmesg_flush();
 800a7aa:	f7fd f81b 	bl	80077e4 <codal_dmesg_flush>
}
 800a7ae:	bd08      	pop	{r3, pc}

0800a7b0 <_ZN13UARTInterfaceC1Ejj>:
}
 800a7b0:	4770      	bx	lr

0800a7b2 <_GLOBAL__sub_I__ZN13UARTInterfaceC2Ejj>:
}
 800a7b2:	b508      	push	{r3, lr}
 800a7b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a7b8:	2001      	movs	r0, #1
 800a7ba:	f7fe ff49 	bl	8009650 <_Z41__static_initialization_and_destruction_0ii>
 800a7be:	bd08      	pop	{r3, pc}

0800a7c0 <_ZN5codal3_cm3I2C12setFrequencyEm>:
#ifdef TODO            
            i2c.Init.ClockSpeed = frequency;
            needsInit = true;
#endif  //  TODO
            return DEVICE_OK;
        }
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	4770      	bx	lr

0800a7c4 <_ZN5codal3_cm3I2C5writeEtPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	4770      	bx	lr

0800a7c8 <_ZN5codal3_cm3I2C4readEtPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800a7c8:	2000      	movs	r0, #0
 800a7ca:	4770      	bx	lr

0800a7cc <_ZN5codal3_cm3I2C12readRegisterEthPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	4770      	bx	lr

0800a7d0 <_ZN5codal3_cm3SPI12setFrequencyEm>:

        int SPI::setFrequency(uint32_t frequency) {
            freq = frequency;
 800a7d0:	6141      	str	r1, [r0, #20]
            needsInit = true;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	f880 3020 	strb.w	r3, [r0, #32]
            return DEVICE_OK;
        }
 800a7d8:	2000      	movs	r0, #0
 800a7da:	4770      	bx	lr

0800a7dc <_ZN5codal3_cm3SPI5writeEi>:
            CODAL_ASSERT(bits == 8);
            return DEVICE_OK;
        }

        int SPI::write(int data) {
            rxCh = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
            txCh = data;
 800a7e2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
#ifdef TODO
            if (transfer(&txCh, 1, &rxCh, 1) < 0) { return DEVICE_SPI_ERROR; }
#endif  //  TODO
            return rxCh;
        }
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	4770      	bx	lr

0800a7ea <_ZN5codal3_cm3SPI8transferEPKhmPhm>:
            LOG("SPI ->");
            schedule();
            LOG("SPI <-");
            return res;
#endif  //  TODO
        }
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	4770      	bx	lr

0800a7ee <_ZN5codal3_cm3SPI7setModeEii>:
        int SPI::setMode(int mode, int bits) {
 800a7ee:	b508      	push	{r3, lr}
            needsInit = true;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f880 3020 	strb.w	r3, [r0, #32]
            CODAL_ASSERT(bits == 8);
 800a7f6:	2a08      	cmp	r2, #8
 800a7f8:	d003      	beq.n	800a802 <_ZN5codal3_cm3SPI7setModeEii+0x14>
 800a7fa:	f240 308d 	movw	r0, #909	; 0x38d
 800a7fe:	f7f6 f93b 	bl	8000a78 <target_panic>
        }
 800a802:	2000      	movs	r0, #0
 800a804:	bd08      	pop	{r3, pc}

0800a806 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>:
        uint32_t _codal_setup_pin(Pin *p, uint32_t prev, const PinMap *map) {
 800a806:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            if (!p) { return 0; }
 800a80a:	b310      	cbz	r0, 800a852 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4c>
 800a80c:	4605      	mov	r5, r0
 800a80e:	4614      	mov	r4, r2
 800a810:	460f      	mov	r7, r1
            auto pin = p->name;
 800a812:	f890 8010 	ldrb.w	r8, [r0, #16]
            CmPeripheral peri = pinmap_peripheral(pin, map);
 800a816:	4611      	mov	r1, r2
 800a818:	4640      	mov	r0, r8
 800a81a:	f7fe ffb1 	bl	8009780 <pinmap_peripheral>
 800a81e:	4606      	mov	r6, r0
            if (peri == CM_PERIPHERAL_NC) { return peri; }
 800a820:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a824:	d016      	beq.n	800a854 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4e>
            auto mode = pinmap_mode(pin, map);
 800a826:	4621      	mov	r1, r4
 800a828:	4640      	mov	r0, r8
 800a82a:	f7fe ffbf 	bl	80097ac <pinmap_mode>
 800a82e:	4681      	mov	r9, r0
            auto cnf = pinmap_cnf(pin, map);
 800a830:	4621      	mov	r1, r4
 800a832:	4640      	mov	r0, r8
 800a834:	f7fe ffce 	bl	80097d4 <pinmap_cnf>
            p->setup(mode, cnf);
 800a838:	4602      	mov	r2, r0
 800a83a:	4649      	mov	r1, r9
 800a83c:	4628      	mov	r0, r5
 800a83e:	f7ff fe15 	bl	800a46c <_ZN5codal3_cm3Pin5setupEhh>
            CODAL_ASSERT(!prev || prev == peri);
 800a842:	b13f      	cbz	r7, 800a854 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4e>
 800a844:	42be      	cmp	r6, r7
 800a846:	d005      	beq.n	800a854 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4e>
 800a848:	f240 308d 	movw	r0, #909	; 0x38d
 800a84c:	f7f6 f914 	bl	8000a78 <target_panic>
 800a850:	e000      	b.n	800a854 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4e>
            if (!p) { return 0; }
 800a852:	2600      	movs	r6, #0
        }
 800a854:	4630      	mov	r0, r6
 800a856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a85a <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_>:

        int SPI::startTransfer(const uint8_t *txBuffer, uint32_t txSize, uint8_t *rxBuffer,
                                uint32_t rxSize, PVoidCallback doneHandler, void *arg) {
 800a85a:	b538      	push	{r3, r4, r5, lr}
 800a85c:	4604      	mov	r4, r0
 800a85e:	4615      	mov	r5, r2
            int res = HAL_OK;
            init();
 800a860:	f7fe ff12 	bl	8009688 <_ZN5codal3_cm3SPI4initEv>
            ////LOG("SPI start %p/%d %p/%d D=%p", txBuffer, txSize, rxBuffer, rxSize, doneHandler);
            this->doneHandler = doneHandler;
 800a864:	9b05      	ldr	r3, [sp, #20]
 800a866:	61a3      	str	r3, [r4, #24]
            this->doneHandlerArg = arg;
 800a868:	9b06      	ldr	r3, [sp, #24]
 800a86a:	61e3      	str	r3, [r4, #28]
            if (txSize && rxSize) {
 800a86c:	b11d      	cbz	r5, 800a876 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x1c>
 800a86e:	9b04      	ldr	r3, [sp, #16]
 800a870:	b10b      	cbz	r3, 800a876 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x1c>
                CODAL_ASSERT(txSize == rxSize); // we could support this if needed
 800a872:	429d      	cmp	r5, r3
 800a874:	d101      	bne.n	800a87a <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x20>
            } else {
                return 0; // nothing to do
            }
            CODAL_ASSERT(res == HAL_OK);
            return 0;
        }
 800a876:	2000      	movs	r0, #0
 800a878:	bd38      	pop	{r3, r4, r5, pc}
                CODAL_ASSERT(txSize == rxSize); // we could support this if needed
 800a87a:	f240 308d 	movw	r0, #909	; 0x38d
 800a87e:	f7f6 f8fb 	bl	8000a78 <target_panic>
 800a882:	e7f8      	b.n	800a876 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x1c>

0800a884 <_ZL22pinmap_find_peripheralhPK6PinMap>:

static CmPeripheral pinmap_find_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    while (map->pin != CM_PIN_NC) {
 800a884:	780b      	ldrb	r3, [r1, #0]
 800a886:	2bff      	cmp	r3, #255	; 0xff
 800a888:	d005      	beq.n	800a896 <_ZL22pinmap_find_peripheralhPK6PinMap+0x12>
        if (map->pin == pin) { return map->peripheral; }
 800a88a:	4283      	cmp	r3, r0
 800a88c:	d001      	beq.n	800a892 <_ZL22pinmap_find_peripheralhPK6PinMap+0xe>
        map++;
 800a88e:	310c      	adds	r1, #12
    while (map->pin != CM_PIN_NC) {
 800a890:	e7f8      	b.n	800a884 <_ZL22pinmap_find_peripheralhPK6PinMap>
        if (map->pin == pin) { return map->peripheral; }
 800a892:	6848      	ldr	r0, [r1, #4]
 800a894:	4770      	bx	lr
    }
    return CM_PERIPHERAL_NC;
 800a896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a89a:	4770      	bx	lr

0800a89c <_ZL16pinmap_find_modehPK6PinMap>:

static CmPinMode pinmap_find_mode(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin mode for the peripheral e.g. GPIO_MODE_OUTPUT_2_MHZ.
    while (map->pin != CM_PIN_NC) {
 800a89c:	780b      	ldrb	r3, [r1, #0]
 800a89e:	2bff      	cmp	r3, #255	; 0xff
 800a8a0:	d005      	beq.n	800a8ae <_ZL16pinmap_find_modehPK6PinMap+0x12>
        if (map->pin == pin) { return map->mode; }
 800a8a2:	4283      	cmp	r3, r0
 800a8a4:	d001      	beq.n	800a8aa <_ZL16pinmap_find_modehPK6PinMap+0xe>
        map++;
 800a8a6:	310c      	adds	r1, #12
    while (map->pin != CM_PIN_NC) {
 800a8a8:	e7f8      	b.n	800a89c <_ZL16pinmap_find_modehPK6PinMap>
        if (map->pin == pin) { return map->mode; }
 800a8aa:	7a48      	ldrb	r0, [r1, #9]
 800a8ac:	4770      	bx	lr
    }
    return CM_PINMODE_NC;
 800a8ae:	20ff      	movs	r0, #255	; 0xff
}
 800a8b0:	4770      	bx	lr

0800a8b2 <_ZL15pinmap_find_cnfhPK6PinMap>:

static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin config for the peripheral e.g. GPIO_CNF_OUTPUT_PUSHPULL.
    while (map->pin != CM_PIN_NC) {
 800a8b2:	780b      	ldrb	r3, [r1, #0]
 800a8b4:	2bff      	cmp	r3, #255	; 0xff
 800a8b6:	d005      	beq.n	800a8c4 <_ZL15pinmap_find_cnfhPK6PinMap+0x12>
        if (map->pin == pin) { return map->cnf; }
 800a8b8:	4283      	cmp	r3, r0
 800a8ba:	d001      	beq.n	800a8c0 <_ZL15pinmap_find_cnfhPK6PinMap+0xe>
        map++;
 800a8bc:	310c      	adds	r1, #12
    while (map->pin != CM_PIN_NC) {
 800a8be:	e7f8      	b.n	800a8b2 <_ZL15pinmap_find_cnfhPK6PinMap>
        if (map->pin == pin) { return map->cnf; }
 800a8c0:	7a88      	ldrb	r0, [r1, #10]
 800a8c2:	4770      	bx	lr
    }
    return CM_PINCNF_NC;
 800a8c4:	20ff      	movs	r0, #255	; 0xff
}
 800a8c6:	4770      	bx	lr

0800a8c8 <_ZN5codal3I2C12setFrequencyEm>:
  * @param frequency The bus frequency in hertz
  */
int I2C::setFrequency(uint32_t frequency)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800a8c8:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a8cc:	4770      	bx	lr

0800a8ce <_ZN5codal3I2C5startEv>:
 * Issues a START condition on the I2C bus
 */
int I2C::start()
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800a8ce:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a8d2:	4770      	bx	lr

0800a8d4 <_ZN5codal3I2C4stopEv>:
 * Issues a STOP condition on the I2C bus
 */
int I2C::stop()
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800a8d4:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a8d8:	4770      	bx	lr

0800a8da <_ZN5codal3I2C5writeEh>:
* @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
*/
int I2C::write(uint8_t data)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800a8da:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a8de:	4770      	bx	lr

0800a8e0 <_ZN5codal3I2C4readENS_15AcknowledgeTypeE>:
* @return the byte read from the I2C bus, or DEVICE_I2C_ERROR if the the write request failed.
*/
int I2C::read(AcknowledgeType ack)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800a8e0:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a8e4:	4770      	bx	lr

0800a8e6 <_ZN5codal3I2C5writeEtPhib>:
  * @param len the number of bytes to write
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::write(uint16_t address, uint8_t *data, int len, bool repeated)
  {
 800a8e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8ea:	f89d 8020 	ldrb.w	r8, [sp, #32]
      if (data == NULL || len <= 0)
 800a8ee:	b31a      	cbz	r2, 800a938 <_ZN5codal3I2C5writeEtPhib+0x52>
 800a8f0:	4617      	mov	r7, r2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	dd23      	ble.n	800a93e <_ZN5codal3I2C5writeEtPhib+0x58>
 800a8f6:	4699      	mov	r9, r3
 800a8f8:	460c      	mov	r4, r1
 800a8fa:	4605      	mov	r5, r0
          return DEVICE_INVALID_PARAMETER; // Send a start condition

      start();
 800a8fc:	6803      	ldr	r3, [r0, #0]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	4798      	blx	r3

      // Send the address of the slave, with a write bit set.
      write((uint8_t)address);
 800a902:	682b      	ldr	r3, [r5, #0]
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	b2e1      	uxtb	r1, r4
 800a908:	4628      	mov	r0, r5
 800a90a:	4798      	blx	r3

      // Send the body of the data
      for (int i = 0; i < len; i++)
 800a90c:	2400      	movs	r4, #0
 800a90e:	454c      	cmp	r4, r9
 800a910:	da06      	bge.n	800a920 <_ZN5codal3I2C5writeEtPhib+0x3a>
          write(data[i]);
 800a912:	6829      	ldr	r1, [r5, #0]
 800a914:	68ce      	ldr	r6, [r1, #12]
 800a916:	5d39      	ldrb	r1, [r7, r4]
 800a918:	4628      	mov	r0, r5
 800a91a:	47b0      	blx	r6
      for (int i = 0; i < len; i++)
 800a91c:	3401      	adds	r4, #1
 800a91e:	e7f6      	b.n	800a90e <_ZN5codal3I2C5writeEtPhib+0x28>

      // Send a stop condition
      if (!repeated)
 800a920:	f1b8 0f00 	cmp.w	r8, #0
 800a924:	d002      	beq.n	800a92c <_ZN5codal3I2C5writeEtPhib+0x46>
          stop();

      return DEVICE_OK;
 800a926:	2000      	movs	r0, #0
  }
 800a928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          stop();
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	4628      	mov	r0, r5
 800a932:	4798      	blx	r3
      return DEVICE_OK;
 800a934:	2000      	movs	r0, #0
 800a936:	e7f7      	b.n	800a928 <_ZN5codal3I2C5writeEtPhib+0x42>
          return DEVICE_INVALID_PARAMETER; // Send a start condition
 800a938:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800a93c:	e7f4      	b.n	800a928 <_ZN5codal3I2C5writeEtPhib+0x42>
 800a93e:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800a942:	e7f1      	b.n	800a928 <_ZN5codal3I2C5writeEtPhib+0x42>

0800a944 <_ZN5codal3I2C13writeRegisterEthh>:
  * @param value The value to write.
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::writeRegister(uint16_t address, uint8_t reg, uint8_t value)
  {
 800a944:	b510      	push	{r4, lr}
 800a946:	b084      	sub	sp, #16
      uint8_t command[2];
      command[0] = reg;
 800a948:	f88d 200c 	strb.w	r2, [sp, #12]
      command[1] = value;
 800a94c:	f88d 300d 	strb.w	r3, [sp, #13]

      return write(address, command, 2);
 800a950:	6803      	ldr	r3, [r0, #0]
 800a952:	2200      	movs	r2, #0
 800a954:	9200      	str	r2, [sp, #0]
 800a956:	695c      	ldr	r4, [r3, #20]
 800a958:	2302      	movs	r3, #2
 800a95a:	aa03      	add	r2, sp, #12
 800a95c:	47a0      	blx	r4
}
 800a95e:	b004      	add	sp, #16
 800a960:	bd10      	pop	{r4, pc}

0800a962 <_ZN5codal3I2C4readEtPhib>:
* @param len the number of bytes to read into the buffer
*
* @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::read(uint16_t address, uint8_t *data, int len, bool repeated)
{
 800a962:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a966:	f89d 9020 	ldrb.w	r9, [sp, #32]
    int i = 0;

    if (data == NULL || len <= 0)
 800a96a:	2a00      	cmp	r2, #0
 800a96c:	d02f      	beq.n	800a9ce <_ZN5codal3I2C4readEtPhib+0x6c>
 800a96e:	4690      	mov	r8, r2
 800a970:	2b00      	cmp	r3, #0
 800a972:	dd2f      	ble.n	800a9d4 <_ZN5codal3I2C4readEtPhib+0x72>
 800a974:	461f      	mov	r7, r3
 800a976:	460c      	mov	r4, r1
 800a978:	4605      	mov	r5, r0
        return DEVICE_INVALID_PARAMETER;

    // Send a start condition
    start();
 800a97a:	6803      	ldr	r3, [r0, #0]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	4798      	blx	r3

    // Send the address of the slave, with a read bit set.
    write((uint8_t)(address | 0x01));
 800a980:	682b      	ldr	r3, [r5, #0]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	f044 0101 	orr.w	r1, r4, #1
 800a988:	b2c9      	uxtb	r1, r1
 800a98a:	4628      	mov	r0, r5
 800a98c:	4798      	blx	r3

    // Read the body of the data
    for (i = 0; i < len-1; i++)
 800a98e:	2400      	movs	r4, #0
 800a990:	1e79      	subs	r1, r7, #1
 800a992:	42a1      	cmp	r1, r4
 800a994:	dd08      	ble.n	800a9a8 <_ZN5codal3I2C4readEtPhib+0x46>
        data[i] = read();
 800a996:	6829      	ldr	r1, [r5, #0]
 800a998:	690e      	ldr	r6, [r1, #16]
 800a99a:	2100      	movs	r1, #0
 800a99c:	4628      	mov	r0, r5
 800a99e:	47b0      	blx	r6
 800a9a0:	f808 0004 	strb.w	r0, [r8, r4]
    for (i = 0; i < len-1; i++)
 800a9a4:	3401      	adds	r4, #1
 800a9a6:	e7f3      	b.n	800a990 <_ZN5codal3I2C4readEtPhib+0x2e>

    data[i] = read(NACK);
 800a9a8:	682b      	ldr	r3, [r5, #0]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	4798      	blx	r3
 800a9b2:	f808 0004 	strb.w	r0, [r8, r4]

    // Send a stop condition
    if (!repeated)
 800a9b6:	f1b9 0f00 	cmp.w	r9, #0
 800a9ba:	d002      	beq.n	800a9c2 <_ZN5codal3I2C4readEtPhib+0x60>
        stop();

    return DEVICE_OK;
 800a9bc:	2000      	movs	r0, #0
}
 800a9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        stop();
 800a9c2:	682b      	ldr	r3, [r5, #0]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	4798      	blx	r3
    return DEVICE_OK;
 800a9ca:	2000      	movs	r0, #0
 800a9cc:	e7f7      	b.n	800a9be <_ZN5codal3I2C4readEtPhib+0x5c>
        return DEVICE_INVALID_PARAMETER;
 800a9ce:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800a9d2:	e7f4      	b.n	800a9be <_ZN5codal3I2C4readEtPhib+0x5c>
 800a9d4:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800a9d8:	e7f1      	b.n	800a9be <_ZN5codal3I2C4readEtPhib+0x5c>

0800a9da <_ZN5codal3I2C5writeEth>:
  {
 800a9da:	b530      	push	{r4, r5, lr}
 800a9dc:	b085      	sub	sp, #20
 800a9de:	ac04      	add	r4, sp, #16
 800a9e0:	f804 2d01 	strb.w	r2, [r4, #-1]!
      return write(address, &data, 1);
 800a9e4:	6803      	ldr	r3, [r0, #0]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	9200      	str	r2, [sp, #0]
 800a9ea:	695d      	ldr	r5, [r3, #20]
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	4622      	mov	r2, r4
 800a9f0:	47a8      	blx	r5
  }
 800a9f2:	b005      	add	sp, #20
 800a9f4:	bd30      	pop	{r4, r5, pc}

0800a9f6 <_ZN5codal3I2C12readRegisterEthPhib>:
* @param repeated Use a repeated START/START/STOP transaction if true, or independent START/STOP/START/STOP transactions if fasle. Default: true
*
* @return DEVICE_OK or DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::readRegister(uint16_t address, uint8_t reg, uint8_t *data, int length, bool repeated)
{
 800a9f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9f8:	b085      	sub	sp, #20
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	460d      	mov	r5, r1
 800a9fe:	461e      	mov	r6, r3
 800aa00:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800aa04:	f88d 200f 	strb.w	r2, [sp, #15]
    int result;

    if (repeated)
 800aa08:	b14b      	cbz	r3, 800aa1e <_ZN5codal3I2C12readRegisterEthPhib+0x28>
        result = write(address, &reg, 1, true);
 800aa0a:	6803      	ldr	r3, [r0, #0]
 800aa0c:	695f      	ldr	r7, [r3, #20]
 800aa0e:	2301      	movs	r3, #1
 800aa10:	9300      	str	r3, [sp, #0]
 800aa12:	f10d 020f 	add.w	r2, sp, #15
 800aa16:	47b8      	blx	r7
    else
        result = write(address, reg);

    if (result != DEVICE_OK)
 800aa18:	b130      	cbz	r0, 800aa28 <_ZN5codal3I2C12readRegisterEthPhib+0x32>
    result = read(address, data, length);
    if (result != DEVICE_OK)
        return result;

    return DEVICE_OK;
}
 800aa1a:	b005      	add	sp, #20
 800aa1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        result = write(address, reg);
 800aa1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800aa22:	f7ff ffda 	bl	800a9da <_ZN5codal3I2C5writeEth>
 800aa26:	e7f7      	b.n	800aa18 <_ZN5codal3I2C12readRegisterEthPhib+0x22>
    result = read(address, data, length);
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	69df      	ldr	r7, [r3, #28]
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa32:	4632      	mov	r2, r6
 800aa34:	4629      	mov	r1, r5
 800aa36:	4620      	mov	r0, r4
 800aa38:	47b8      	blx	r7
 800aa3a:	e7ee      	b.n	800aa1a <_ZN5codal3I2C12readRegisterEthPhib+0x24>

0800aa3c <_ZTVN5codal14CodalComponentE>:
	...
 800aa44:	749d 0800 9809 0800 980b 0800 7519 0800     .t...........u..
 800aa54:	7531 0800 6573 2074 656c 0064 6174 6772     1u..set led.targ
 800aa64:	7465 7720 6961 0074 6c73 6565 0070 0000     et wait.sleep...
 800aa74:	6f6c 706f 0000 0000 6c73 0070 7420 0020     loop....slp. t .
 800aa84:	202c 6c61 206d 0000                         , alm ..

0800aa8c <_ZTVN5codal6SerialE>:
	...
 800aa94:	749d 0800 9809 0800 980b 0800 0000 0000     .t..............
 800aaa4:	0000 0000 2d39 0800 2d39 0800 2d39 0800     ....9-..9-..9-..
 800aab4:	2d39 0800 2d39 0800 2d39 0800 9b1f 0800     9-..9-..9-......

0800aac4 <_ZTVN5codal5TimerE>:
	...
 800aacc:	2d39 0800 2d39 0800 9cf5 0800 9ceb 0800     9-..9-..........

0800aadc <_ZTVN5codal10EventModelE>:
	...
 800aae4:	80b9 0800 80cd 0800 80d5 0800               ............

0800aaf0 <_ZTVN5codal10MessageBusE>:
	...
 800aaf8:	a0b5 0800 80dd 0800 9f71 0800 9e95 0800     ........q.......
 800ab08:	838d 0800 a195 0800 fff8 ffff 0000 0000     ................
 800ab18:	749d 0800 9809 0800 980b 0800 a18d 0800     .t..............
 800ab28:	a1a7 0800                                   ....

0800ab2c <_ZL9emptyData>:
 800ab2c:	ffff 0000 6970 206e 0000 0000               ....pin ....

0800ab38 <_ZTVN5codal3_cm3PinE>:
	...
 800ab40:	84ed 0800 a415 0800 a419 0800 84a5 0800     ................
 800ab50:	8581 0800 a42d 0800 a431 0800 a43f 0800     ....-...1...?...
 800ab60:	a44d 0800 a459 0800 84c5 0800 a403 0800     M...Y...........
 800ab70:	a4ab 0800 a409 0800 84cd 0800 84d5 0800     ................
 800ab80:	a467 0800 a40f 0800 a4cf 0800               g...........

0800ab8c <_ZTVN5codal3_cm6SerialE>:
	...
 800ab94:	749d 0800 9809 0800 980b 0800 85f9 0800     .t..............
 800aba4:	860d 0800 a4fb 0800 a4ff 0800 a503 0800     ................
 800abb4:	a507 0800 a50b 0800 a50f 0800 a5cd 0800     ................
 800abc4:	7973 636e 2021 0000 6974 656d 2072 6e69     sync! ..timer in
 800abd4:	7469 0000 7274 6769 6567 4972 206e 3462     it..triggerIn b4
 800abe4:	6920 696e 2174 0000                          init!..

0800abec <_ZTVN5codal3_cm5TimerE>:
	...
 800abf4:	86bd 0800 86e1 0800 9cf5 0800 9ceb 0800     ................
 800ac04:	2a2a 202a 7061 2070 7362 2f73 6164 6174     *** app bss/data
 800ac14:	6620 6961 656c 2c64 6220 7373 745f 7365      failed, bss_tes
 800ac24:	2074 203d 0000 0000 202c 6164 6174 745f     t = ...., data_t
 800ac34:	7365 2074 203d 0000 6c66 7375 2068 6174     est = ..flush ta
 800ac44:	6b73 0000 6572 7473 7261 2074 6168 646e     sk..restart hand
 800ac54:	656c 0072 6572 7473 7261 6974 676e 2e2e     ler.restarting..
 800ac64:	002e 0000 6f64 656e 0000 0000 6572 7473     ....done....rest
 800ac74:	7261 2074 6163 6c6c 6162 6b63 0000 0000     art callback....
 800ac84:	2a2a 202a 5245 4f52 3a52 6d20 7369 6973     *** ERROR: missi
 800ac94:	676e 6520 6576 746e 6220 7375 0000 0000     ng event bus....
 800aca4:	2a2a 202a 5245 4f52 3a52 7520 616e 6c62     *** ERROR: unabl
 800acb4:	2065 6f74 7320 6e65 2064 6572 7473 7261     e to send restar
 800acc4:	2074 7665 6e65 2074 0000 0000 6f6e 7320     t event ....no s
 800acd4:	6863 6465 6c75 7265 202c 7473 7261 2074     cheduler, start 
 800ace4:	6762 7420 7361 736b 6c20 7461 7265 0000     bg tasks later..
 800acf4:	7473 7261 2074 6762 7420 7361 736b 0000     start bg tasks..
 800ad04:	2a2a 202a 5245 4f52 3a52 6320 6572 7461     *** ERROR: creat
 800ad14:	2065 6966 7262 2065 6166 6c69 6465 0000     e fibre failed..
 800ad24:	2a2a 202a 5245 4f52 3a52 7520 616e 6c62     *** ERROR: unabl
 800ad34:	2065 6f74 6c20 7369 6574 206e 6f66 2072     e to listen for 
 800ad44:	6572 7473 7261 2074 7665 6e65 2074 0000     restart event ..
 800ad54:	6c62 6575 6970 6c6c 6920 696e 2074 6373     bluepill init sc
 800ad64:	6568 7564 656c 0072 6c62 6575 6970 6c6c     heduler.bluepill
 800ad74:	6920 696e 2074 6f63 706d 6e6f 6e65 7374      init components
 800ad84:	0000 0000 6c62 6575 6970 6c6c 6920 696e     ....bluepill ini
 800ad94:	2074 6b6f 0000 0000 6c62 6575 6970 6c6c     t ok....bluepill
 800ada4:	6320 6e6f 7473 7572 7463 0000                construct..

0800adb0 <_ZTVN5codal13STM32BluePillE>:
	...
 800adb8:	89d1 0800 a7a7 0800 a7a9 0800 75c5 0800     .............u..
 800adc8:	7611 0800                                   .v..

0800adcc <PinMap_SPI_MISO>:
 800adcc:	0068 0000 3000 4001 0000 0001 0070 0000     h....0.@....p...
 800addc:	3800 4000 0000 0001 0074 0000 3c00 4000     .8.@....t....<.@
 800adec:	0000 0001 006c 0000 3000 4001 0001 0001     ....l....0.@....
 800adfc:	0078 0000 3c00 4000 0001 0001 00ff 0000     x....<.@........
 800ae0c:	ffff ffff ff00 00ff                         ........

0800ae14 <PinMap_SPI_MOSI>:
 800ae14:	0069 0000 3000 4001 0300 0002 0071 0000     i....0.@....q...
 800ae24:	3800 4000 0300 0002 0075 0000 3c00 4000     .8.@....u....<.@
 800ae34:	0300 0002 006d 0000 3000 4001 0301 0002     ....m....0.@....
 800ae44:	0079 0000 3c00 4000 0301 0002 00ff 0000     y....<.@........
 800ae54:	ffff ffff ff00 00ff                         ........

0800ae5c <PinMap_SPI_NSS>:
 800ae5c:	0066 0000 3000 4001 0300 0002 006e 0000     f....0.@....n...
 800ae6c:	3800 4000 0300 0002 0072 0000 3c00 4000     .8.@....r....<.@
 800ae7c:	0300 0002 006a 0000 3000 4001 0301 0002     ....j....0.@....
 800ae8c:	0076 0000 3c00 4000 0301 0002 00ff 0000     v....<.@........
 800ae9c:	ffff ffff ff00 00ff                         ........

0800aea4 <PinMap_SPI_SCK>:
 800aea4:	0067 0000 3000 4001 0300 0002 006f 0000     g....0.@....o...
 800aeb4:	3800 4000 0300 0002 0073 0000 3c00 4000     .8.@....s....<.@
 800aec4:	0300 0002 006b 0000 3000 4001 0301 0002     ....k....0.@....
 800aed4:	0077 0000 3c00 4000 0301 0002 00ff 0000     w....<.@........
 800aee4:	ffff ffff ff00 00ff                         ........

0800aeec <_ZTVN5codal3_cm3I2CE>:
	...
 800aef4:	a7c1 0800 a8cf 0800 a8d5 0800 a8db 0800     ................
 800af04:	a8e1 0800 a7c5 0800 a945 0800 a7c9 0800     ........E.......
 800af14:	a7cd 0800 5053 2049 6e69 7473 6e61 6563     ....SPI instance
 800af24:	2520 0070 2a2a 202a 6f63 6164 206c 7073      %p.*** codal sp
 800af34:	2069 6f6d 6973 0020 6d20 7369 206f 0000     i mosi . miso ..
 800af44:	7320 6c63 206b 0000 7073 2069 6f6d 6973      sclk ..spi mosi
 800af54:	0020 0000 6e20 7373 0020 0000                ... nss ...

0800af60 <_ZTVN5codal3_cm3SPIE>:
	...
 800af68:	a7d1 0800 a7ef 0800 a7dd 0800 a7eb 0800     ................
 800af78:	a85b 0800 6970 6d6e 7061 6e20 746f 6620     [...pinmap not f
 800af88:	756f 646e 6620 726f 6320 666e 0000 0000     ound for cnf....
 800af98:	6970 6d6e 7061 6e20 746f 6620 756f 646e     pinmap not found
 800afa8:	6620 726f 6d20 646f 0065 0000 6970 6d6e      for mode...pinm
 800afb8:	7061 6e20 746f 6620 756f 646e 6620 726f     ap not found for
 800afc8:	7020 7265 7069 6568 6172 006c                peripheral.

0800afd4 <_ZTVN5codal3I2CE>:
	...
 800afdc:	a8c9 0800 a8cf 0800 a8d5 0800 a8db 0800     ................
 800afec:	a8e1 0800 a8e7 0800 a945 0800 a963 0800     ........E...c...
 800affc:	a9f7 0800                                   ....
