
.pioenvs/bluepill_f103c8/firmware.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .boot_text	00000000 .boot_text
08006c00 l    d  .text	00000000 .text
080051b4 l    d  .boot_preinit_array	00000000 .boot_preinit_array
0800a800 l    d  .preinit_array	00000000 .preinit_array
080051b4 l    d  .boot_init_array	00000000 .boot_init_array
0800a800 l    d  .init_array	00000000 .init_array
080051b4 l    d  .boot_fini_array	00000000 .boot_fini_array
0800a814 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .boot_data	00000000 .boot_data
20001000 l    d  .data	00000000 .data
2000012c l    d  .boot_bss	00000000 .boot_bss
20001008 l    d  .bss	00000000 .bss
200047bc l    d  .boot_buf	00000000 .boot_buf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 vector.c
00000000 l    df *ABS*	00000000 baseloader.c
20000130 l     O .boot_bss	00000004 bytes_flashed.5212
20000134 l     O .boot_bss	00000004 dest.5209
20000138 l     O .boot_bss	00000004 erase_end.5216
2000013c l     O .boot_bss	00000004 erase_start.5215
20000140 l     O .boot_bss	00000004 flash_end.5217
20000144 l     O .boot_bss	00000004 half_word_count.5211
2000014c l     O .boot_bss	00000001 should_disable_interrupts.5214
20000148 l     O .boot_bss	00000004 src.5210
2000014d l     O .boot_bss	00000001 verified.5213
00000000 l    df *ABS*	00000000 timer.cpp
08002a2c l     F .boot_text	00000074 _ZL25custom_rtc_awake_from_off7rcc_osc
08002aa0 l     F .boot_text	00000090 _ZL9rtc_setupv
20000448 l     O .boot_bss	00000004 _ZL10alarmCount
2000044c l     O .boot_bss	00000004 _ZL8tickFunc
20000450 l     O .boot_bss	00000004 _ZL9alarmFunc
20000454 l     O .boot_bss	00000004 _ZL9tickCount
20000459 l     O .boot_bss	00000001 _ZZ20platform_start_timerE12timerStarted
00000000 l    df *ABS*	00000000 uartint.cpp
08008e50 l     F .text	0000001c _Z41__static_initialization_and_destruction_0ii
08009fb2 l     F .text	0000000e _GLOBAL__sub_I__ZN13UARTInterfaceC2Ejj
20002194 l     O .bss	0000006c _ZL13responseQueue
00000000 l    df *ABS*	00000000 reset_handler.c
08000674 l     F .boot_text	00000050 pre_main
00000000 l    df *ABS*	00000000 codal_target_hal.cpp
0800075c l     F .boot_text	00000024 _ZL11timer_alarmv
08000780 l     F .boot_text	00000070 _ZL15poll_bootloaderv
080007f0 l     F .boot_text	00000018 _ZL10timer_tickv
08000808 l     F .boot_text	0000002c _ZL11os_schedulev
20000168 l     O .boot_bss	00000001 _ZL11initialised
20000150 l     O .boot_bss	00000004 _ZL11poll_status
20000154 l     O .boot_bss	00000004 _ZL13tick_callback
20000158 l     O .boot_bss	00000004 _ZL14alarm_callback
2000015c l     O .boot_bss	00000004 _ZL16prev_poll_status
20000160 l     O .boot_bss	00000004 _ZL19bootloader_callback
00000000 l    df *ABS*	00000000 asm/CortexContextSwitch.s.o
08000a14 l       .boot_text	00000000 store_context_complete
08000a26 l       .boot_text	00000000 store_stack_complete
08000a1a l       .boot_text	00000000 store_stack
08000a40 l       .boot_text	00000000 restore_stack_complete
08000a34 l       .boot_text	00000000 restore_stack
08000a94 l       .boot_text	00000000 store_stack1
00000000 l    df *ABS*	00000000 desig.c
080046e0 l     O .boot_text	00000011 chars.4166
00000000 l    df *ABS*	00000000 rcc.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 pwr_common_all.c
00000000 l    df *ABS*	00000000 exti_common_all.c
00000000 l    df *ABS*	00000000 flash_common_f01.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 usb_standard.c
08001a86 l     F .boot_text	00000004 usb_descriptor_type
08001a8a l     F .boot_text	00000004 usb_descriptor_index
08001a8e l     F .boot_text	00000030 usb_standard_set_address
08001abe l     F .boot_text	000000ba usb_standard_set_configuration
08001b78 l     F .boot_text	00000024 usb_standard_get_configuration
08001b9c l     F .boot_text	00000056 usb_standard_set_interface
08001bf2 l     F .boot_text	0000003e usb_standard_get_interface
08001c30 l     F .boot_text	00000018 usb_standard_device_get_status
08001c48 l     F .boot_text	00000018 usb_standard_interface_get_status
08001c60 l     F .boot_text	000001ba build_config_descriptor
08001e1a l     F .boot_text	000000e6 usb_standard_get_descriptor
08001f00 l     F .boot_text	0000002a usb_standard_endpoint_get_status
08001f2a l     F .boot_text	00000010 usb_standard_endpoint_stall
08001f3a l     F .boot_text	00000010 usb_standard_endpoint_unstall
00000000 l    df *ABS*	00000000 st_usbfs_v1.c
08001198 l     F .boot_text	00000030 st_usbfs_v1_usbd_init
00000000 l    df *ABS*	00000000 scb.c
00000000 l    df *ABS*	00000000 st_usbfs_core.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 gpio_common_all.c
00000000 l    df *ABS*	00000000 usart_common_f124.c
00000000 l    df *ABS*	00000000 rcc_common_all.c
00000000 l    df *ABS*	00000000 usb_control.c
080017c8 l     F .boot_text	00000014 stall_transaction
080017dc l     F .boot_text	00000032 usb_control_setup_write
0800180e l     F .boot_text	0000003c usb_control_recv_chunk
0800184a l     F .boot_text	00000048 usb_control_send_chunk
08001892 l     F .boot_text	00000060 usb_control_request_dispatch
080018f2 l     F .boot_text	0000003a usb_control_setup_read
00000000 l    df *ABS*	00000000 nvic.c
00000000 l    df *ABS*	00000000 os_event.c
2000016c l     O .boot_bss	0000000e eventList
2000022a l     O .boot_bss	00000001 nEvents
20000014 l     O .boot_data	00000001 lastSignaledEvent
00000000 l    df *ABS*	00000000 os_kernel.c
00000000 l    df *ABS*	00000000 os_msgqueue.c
2000017c l     O .boot_bss	00000020 msgQList
2000022b l     O .boot_bss	00000001 nQueues
00000000 l    df *ABS*	00000000 os_sem.c
2000022c l     O .boot_bss	00000001 nSemaphores
00000000 l    df *ABS*	00000000 os_task.c
080022d0 l     F .boot_text	0000001c os_task_wait_queue_empty
080022ec l     F .boot_text	00000014 task_ready_set
2000022d l     O .boot_bss	00000001 nTasks
2000019c l     O .boot_bss	0000008c task_list
00000000 l    df *ABS*	00000000 os_assert.c
20000228 l     O .boot_bss	00000002 l.4990
00000000 l    df *ABS*	00000000 os_cbk.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 logger.cpp
08002628 l     F .boot_text	00000024 _ZL10__semihostiPv
08002894 l     F .boot_text	0000001e _ZL14semihost_writemPKhj
0800264c l     F .boot_text	0000003c _ZL16write_all_outputPKhtb
08002688 l     F .boot_text	0000005c _ZL12debug_appendPKcj
20000446 l     O .boot_bss	00000001 _ZL10logEnabled
20000230 l     O .boot_bss	00000201 _ZL11debugBuffer
20000434 l     O .boot_bss	00000010 _ZL12output_funcs
20000444 l     O .boot_bss	00000002 _ZL17debugBufferLength
00000000 l    df *ABS*	00000000 bluepill.cpp
20000458 l     O .boot_bss	00000001 _ZL12debugEnabled
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 bootloader.c
08002bc8 l     F .boot_text	00000034 get_serial_number
08002c1c l     F .boot_text	000000cc poll_loop
2000045c l     O .boot_bss	00000004 baseloader_addr
20000460 l     O .boot_bss	00000004 baseloader_status
20000464 l     O .boot_bss	00000004 byte_count
20000468 l     O .boot_bss	00000004 cycleCount
2000046c l     O .boot_bss	00000004 dest
20000470 l     O .boot_bss	00000004 last_status
20000474 l     O .boot_bss	00000004 msTimer
2000072c l     O .boot_bss	00000001 poll_restart_requested
20000478 l     O .boot_bss	00000004 src
2000047c l     O .boot_bss	00000004 status
20000480 l     O .boot_bss	00000004 usbd_dev
20000018 l     O .boot_data	00000004 flushCount
00000000 l    df *ABS*	00000000 target_stm32f103.c
0800456a l     F .boot_text	00000014 sleep_us
08002ee0 l     F .boot_text	0000005c validate_application
2000072d l     O .boot_bss	00000001 forced_startup_mode
2000072e l     O .boot_bss	00000001 startup_mode
00000000 l    df *ABS*	00000000 usb_conf.c
08003114 l     F .boot_text	00000014 hf2_connected
08004588 l     F .boot_text	00000004 usb_descriptor_type
0800458c l     F .boot_text	00000004 usb_descriptor_index
08003128 l     F .boot_text	00000020 cdc_connected
08003148 l     F .boot_text	00000030 usb_cdc_transmit
08003178 l     F .boot_text	00000010 sof_callback
08003188 l     F .boot_text	00000050 set_aggregate_callback
08003588 l     F .boot_text	000000a8 aggregate_callback
2000072f l     O .boot_bss	00000001 cdc_is_connected
20000484 l     O .boot_bss	00000028 config_callback
200004ac l     O .boot_bss	00000050 control_callback
20000730 l     O .boot_bss	00000001 hf2_is_connected
200004fc l     O .boot_bss	00000004 last_busy_time
20000500 l     O .boot_bss	00000004 last_frame_time
20000504 l     O .boot_bss	00000019 serial_number
2000062c l     O .boot_bss	00000100 usbd_control_buffer
2000001c l     O .boot_data	00000008 capabilities
20000024 l     O .boot_data	00000024 usb_strings
080049ec l     O .boot_text	00000009 bos_descriptor
080049f8 l     O .boot_text	00000008 cdc_iface_assoc
08004a00 l     O .boot_text	00000013 cdcacm_functional_descriptors
08004a14 l     O .boot_text	0000000f comm_endp
08004a24 l     O .boot_text	00000015 comm_iface
08004a3c l     O .boot_text	0000000d config
08004b5c l     O .boot_text	00000030 interfaces
08004a4c l     O .boot_text	0000001e data_endp
08004a6c l     O .boot_text	00000015 data_iface
08004a84 l     O .boot_text	00000012 dev
08004b24 l     O .boot_text	0000001e hf2_endp
08004b44 l     O .boot_text	00000015 hf2_iface
00000000 l    df *ABS*	00000000 webusb.c
08003630 l     F .boot_text	00000028 webusb_set_config
08003658 l     F .boot_text	000000d0 webusb_control_vendor_request
20000524 l     O .boot_bss	00000004 webusb_https_url
00000000 l    df *ABS*	00000000 winusb.c
08004590 l     F .boot_text	00000004 usb_descriptor_type
08004594 l     F .boot_text	00000004 usb_descriptor_index
08003774 l     F .boot_text	00000028 winusb_set_config
080037fc l     F .boot_text	000000c0 winusb_control_vendor_request
0800379c l     F .boot_text	00000060 winusb_descriptor_request
20000048 l     O .boot_data	000000b2 msos20_descriptor_set
200000fc l     O .boot_data	00000028 winusb_wcid
08004d04 l     O .boot_text	00000092 guid
08004e0c l     O .boot_text	00000012 winusb_string_descriptor
00000000 l    df *ABS*	00000000 cdc.c
08003914 l     F .boot_text	00000010 cdcacm_comm_cb
08003924 l     F .boot_text	00000064 cdcacm_set_config
08003a7c l     F .boot_text	0000004c cdcacm_data_rx_cb
08003988 l     F .boot_text	0000008c cdcacm_control_request
20000731 l     O .boot_bss	00000001 connected
20000528 l     O .boot_bss	00000004 connected_func
2000052c l     O .boot_bss	00000041 rx_buf
08004e88 l     O .boot_text	00000007 line_coding
00000000 l    df *ABS*	00000000 hf2.c
08003af4 l     F .boot_text	00000020 assert
08003b14 l     F .boot_text	00000040 hf2_set_config
08004210 l     F .boot_text	00000058 hf2_data_tx_cb
0800414c l     F .boot_text	000000c4 hf2_data_rx_cb
08003b54 l     F .boot_text	000000c8 pokeSend
08004598 l     F .boot_text	00000018 send_hf2_response
08003c1c l     F .boot_text	0000031c handle_flash_write
08003f38 l     F .boot_text	00000214 handle_command
20000570 l     O .boot_bss	00000004 _usbd_dev
20000574 l     O .boot_bss	00000004 cmdId.6007
20000732 l     O .boot_bss	00000001 connected
20000578 l     O .boot_bss	00000004 connected_func
20000733 l     O .boot_bss	00000001 flush_count.6009
2000057c l     O .boot_bss	00000004 new_app_start.6011
20000580 l     O .boot_bss	00000004 new_base_vector.6010
20000584 l     O .boot_bss	00000004 new_baseloader_size.6013
20000588 l     O .boot_bss	00000004 new_bootloader_size.6012
2000058c l     O .boot_bss	00000004 pkt.6042
20000590 l     O .boot_bss	00000004 prevCmdId.6008
20000594 l     O .boot_bss	00000004 remDataToSend
20000734 l     O .boot_bss	00000001 remDataToSendFlag
20000598 l     O .boot_bss	00000004 remDataToSendLength
20000735 l     O .boot_bss	00000001 restart_request
2000059c l     O .boot_bss	00000040 rx_buf
200005dc l     O .boot_bss	00000004 rx_time
200005e0 l     O .boot_bss	00000040 tx_buf
08004e9c l     O .boot_text	0000000b bad_packet_message
00000000 l    df *ABS*	00000000 backup.c
00000000 l    df *ABS*	00000000 usb21_standard.c
08004334 l     F .boot_text	00000028 usb21_set_config
0800435c l     F .boot_text	0000005c usb21_standard_get_descriptor
080045b0 l     F .boot_text	0000007c build_bos_descriptor
20000620 l     O .boot_bss	00000004 usb21_bos
00000000 l    df *ABS*	00000000 ghostfat.c
20000624 l     O .boot_bss	00000004 lastFlush
20000628 l     O .boot_bss	00000004 ms
20000128 l     O .boot_data	00000001 firstFlush
20000124 l     O .boot_data	00000004 flashAddr
00000000 l    df *ABS*	00000000 application.cpp
08007fbc l     F .text	00000048 _ZL8pre_mainv
00000000 l    df *ABS*	00000000 main.cpp
08006ca4 l     F .text	00000044 _ZL10debug_dumpRN5codal13STM32BluePillEPKc
08006ce8 l     F .text	00000030 _Z41__static_initialization_and_destruction_0ii
0800900c l     F .text	0000000e _GLOBAL__sub_I_bluepill
00000000 l    df *ABS*	00000000 uart.cpp
08006e64 l     F .text	00000024 _Z41__static_initialization_and_destruction_0ii
0800901a l     F .text	0000000e _GLOBAL__sub_I_serialPort
00000000 l    df *ABS*	00000000 CodalComponent.cpp
00000000 l    df *ABS*	00000000 CodalDmesg.cpp
20002140 l     O .bss	00000004 _ZL14dmesg_flush_fn
00000000 l    df *ABS*	00000000 CodalFiber.cpp
08007148 l     F .text	00000034 _ZL10handle_fobv
20002148 l     O .bss	00000004 _ZN5codalL10messageBusE
2000214c l     O .bss	00000004 _ZN5codalL10sleepQueueE
20002211 l     O .bss	00000001 _ZN5codalL11fiber_flagsE
20002150 l     O .bss	00000004 _ZN5codalL11forkedFiberE
20002154 l     O .bss	00000004 _ZN5codalL8runQueueE
20002158 l     O .bss	00000004 _ZN5codalL9fiberPoolE
2000215c l     O .bss	00000004 _ZN5codalL9idleFiberE
20002160 l     O .bss	00000004 _ZN5codalL9waitQueueE
00000000 l    df *ABS*	00000000 CodalHeapAllocator.cpp
20002212 l     O .bss	00000001 _ZZ13device_mallocE11initialised
00000000 l    df *ABS*	00000000 Serial.cpp
00000000 l    df *ABS*	00000000 Timer.cpp
00000000 l    df *ABS*	00000000 MessageBus.cpp
20001004 l     O .data	00000002 _ZL12userNotifyId
00000000 l    df *ABS*	00000000 Event.cpp
00000000 l    df *ABS*	00000000 ManagedString.cpp
08007c04 l     F .text	00000038 _Z41__static_initialization_and_destruction_0ii
08009b1c l     F .text	0000000e _GLOBAL__sub_I__ZN5codal13ManagedString9initEmptyEv
0800a32c l     O .text	00000004 _ZL9emptyData
00000000 l    df *ABS*	00000000 CodalCompat.cpp
00000000 l    df *ABS*	00000000 CmPin.cpp
00000000 l    df *ABS*	00000000 CmSerial.cpp
00000000 l    df *ABS*	00000000 CmTimer.cpp
2000217c l     O .bss	00000004 _ZN5codal3_cmL12last_triggerE
20002180 l     O .bss	00000004 _ZN5codal3_cmL14trigger_periodE
00000000 l    df *ABS*	00000000 tasks.cpp
08008004 l     F .text	00000050 _ZL15restart_handlerN5codal5EventE
08008054 l     F .text	00000018 _ZL10flush_taskv
0800806c l     F .text	00000028 _Z41__static_initialization_and_destruction_0ii
08009f98 l     F .text	0000000e _GLOBAL__sub_I_restart_callback
20002188 l     O .bss	00000008 _ZL13restart_event
20002190 l     O .bss	00000004 _ZL16flush_task_fibre
20002214 l     O .bss	00000001 _ZL24restart_listener_started
00000000 l    df *ABS*	00000000 STM32BluePill.cpp
00000000 l    df *ABS*	00000000 STM32BluePillIO.cpp
00000000 l    df *ABS*	00000000 CmI2C.cpp
00000000 l    df *ABS*	00000000 CmSPI.cpp
20002200 l     O .bss	00000010 _ZN5codal3_cmL10_instancesE
00000000 l    df *ABS*	00000000 CmPinMap.cpp
0800a084 l     F .text	00000018 _ZL22pinmap_find_peripheralhPK6PinMap
0800a09c l     F .text	00000016 _ZL16pinmap_find_modehPK6PinMap
0800a0b2 l     F .text	00000016 _ZL15pinmap_find_cnfhPK6PinMap
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 CodalListener.cpp
00000000 l    df *ABS*	00000000 RefCounted.cpp
00000000 l    df *ABS*	00000000 RefCountedInit.cpp
00000000 l    df *ABS*	00000000 MemberFunctionCallback.cpp
08008fac g     F .text	00000028 pinmap_mode
08007848 g     F .text	00000034 _ZN5codal5TimerC1Ev
08004488 g     F .boot_text	000000d8 flash_write
0800931e g     F .text	000001cc _ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE
08009c8e g     F .text	00000004 _ZN5codal3_cm3Pin15setServoPulseUsEi
08009994 g     F .text	00000012 _ZN5codal10MessageBusD0Ev
08009008  w    F .text	00000002 _ZN5codal14CodalComponent16periodicCallbackEv
08006dc4  w    F .text	0000004c _ZN5codal13STM32BluePillD1Ev
0800216c g     F .boot_text	00000044 st_usbfs_ep_stall_get
08006ff4 g     F .text	0000003c _ZN5codal14scheduler_tickENS_5EventE
08009dc4 g     F .text	00000008 _ZN5codal3_cm6Serial7rxInUseEv
080051b4 g     O .boot_preinit_array	00000004 __boot_preinit_array_start
080019a6 g     F .boot_text	0000008a _usbd_control_out
080009be g     F .boot_text	00000004 tcb_configure_stack_base
08009fd0 g     F .text	0000000c _ZN5codal3_cm3SPI12setFrequencyEm
080006c4 g     F .boot_text	00000098 reset_handler
08009d1e g     F .text	0000000a _ZN5codal3_cm6Serial8unlockRxEv
08000904 g     F .boot_text	00000008 fiber_initial_stack_base
00006c00 g       *ABS*	00000000 _bootrom_size
20002213 g     O .bss	00000001 heap_count
08009fb0 g     F .text	00000002 _ZN13UARTInterfaceC1Ejj
08002d1c g     F .boot_text	000001c4 bootloader_start
080077c0 g     F .text	00000060 _ZN5codal6SerialC1ERNS_3PinES2_hht
08001798 g     F .boot_text	0000000c usbd_ep_write_packet
08007df8  w    F .text	00000014 _ZN5codal3_cm6SerialD1Ev
080030b4 g     F .boot_text	00000020 boot_target_set_restart_callback
080017b0 g     F .boot_text	0000000c usbd_ep_stall_set
08009c3e g     F .text	0000000e _ZN5codal3_cm3Pin8isOutputEv
0800a614 g     O .text	00000048 PinMap_SPI_MOSI
080091e6 g     F .text	00000018 _ZN5codal8ListenerD2Ev
080009ba g     F .boot_text	00000004 tcb_configure_sp
080005b8  w    F .boot_text	00000002 usart3_isr
08006dc4  w    F .text	0000004c _ZN5codal13STM32BluePillD2Ev
080005bc  w    F .boot_text	00000030 rtc_isr
080005b8 g       .boot_text	00000000 _base_etext
080030d4 g     F .boot_text	00000020 boot_target_manifest_app
0800a3ec g     O .text	00000018 _ZTVN5codal3_cm5TimerE
08002830 g     F .boot_text	00000034 _Z11debug_printi
08007b18 g     F .text	00000074 _ZN5codal10MessageBusC2Ev
08002880 g     F .boot_text	00000014 _Z13debug_printlni
08009ae2 g     F .text	0000001e _ZN5codal13ManagedStringaSERKS0_
080005b8  w    F .boot_text	00000002 tim7_isr
08009d8c g     F .text	00000010 _ZN5codal3_cm6Serial4baudEi
0800105c g     F .boot_text	0000000c exti_reset_request
2000083c g     O .boot_bss	00000001 running_tid
080005b8  w    F .boot_text	00000002 adc1_2_isr
080099fc g     F .text	00000022 _ZN5codal14EventQueueItemC2ENS_5EventE
08007820 g     F .text	00000028 _ZN5codal6SerialD1Ev
08009a1e g     F .text	0000000e _ZN5codal13ManagedStringD1Ev
0800a5b0 g     O .text	0000001c _ZTVN5codal13STM32BluePillE
080009c6 g     F .boot_text	00000004 get_current_sp
080005b8  w    F .boot_text	00000002 tim1_trg_com_isr
08009316 g     F .text	00000008 _ZN5codal6Serial7rxInUseEv
08007820 g     F .text	00000028 _ZN5codal6SerialD2Ev
08009fcc g     F .text	00000004 _ZN5codal3_cm3I2C12readRegisterEthPhib
08009b96 g     F .text	00000032 _ZN5codal14string_reverseEPc
0800a1f6 g     F .text	00000046 _ZN5codal3I2C12readRegisterEthPhib
08006fbc g     F .text	00000028 _ZN5codal14CodalComponent15removeComponentEv
08001f72 g     F .boot_text	00000032 _usbd_standard_request
08009d06  w    F .text	00000004 _ZN5codal3_cm6Serial13configurePinsERNS_3PinES3_
0800257a g     F .boot_text	0000000c os_tick
08009cba g     F .text	00000014 _ZN5codal3_cm3Pin13disableEventsEv
080005b8  w    F .boot_text	00000002 usb_hp_can_tx_isr
08009cfa  w    F .text	00000004 _ZN5codal3_cm6Serial15enableInterruptENS_19SerialInterruptTypeE
08008ee4 g     F .text	0000009c _ZN5codal3_cm3SPIC2ERNS0_3PinES3_S3_S3_
08006d18  w    F .text	00000018 _ZN5codal14CodalComponentD2Ev
0800a144 g     F .text	0000001e _ZN5codal3I2C13writeRegisterEthh
0800a162 g     F .text	00000078 _ZN5codal3I2C4readEtPhib
2000012c g     O .boot_bss	00000004 baseloader_fail
080005b8  w    F .boot_text	00000002 tim6_isr
080051b4 g       *ABS*	00000000 _boot_data_loadaddr
08009cfe  w    F .text	00000004 _ZN5codal3_cm6Serial16disableInterruptENS_19SerialInterruptTypeE
0800a814 g       .init_array	00000000 _etext
08001688 g     F .boot_text	0000006c gpio_set_mode
080051b4 g     O .boot_fini_array	00000004 __boot_fini_array_start
08009028 g     F .text	0000002e _ZN5codal11queue_fiberEPNS_5FiberEPS1_
080005b8  w    F .boot_text	00000002 usb_wakeup_isr
080005b8 g     F .boot_text	00000002 blocking_handler
2000083d g     O .boot_bss	00000001 running
00000800 g       *ABS*	00000000 _baseram_size
080029d0 g     F .boot_text	00000020 led_setup
080005b8  w    F .boot_text	00000002 tim5_isr
08009274 g     F .text	00000050 _ZN5codal6Serial12initialiseRxEv
08009a96 g     F .text	00000030 _ZN5codal13ManagedStringC2EPKcs
08002864 g     F .boot_text	0000001c debug_println
200047bc g     O .boot_buf	00000442 hf2_buffer
080005b8  w    F .boot_text	00000002 otg_fs_isr
0800090c g     F .boot_text	00000074 test_codal
08009c2c g     F .text	00000004 _ZN5codal3_cm3Pin14getAnalogValueEv
08008f80 g     F .text	0000002c pinmap_peripheral
080005b8  w    F .boot_text	00000002 spi1_isr
0800926a g     F .text	0000000a _ZN5codal6Serial8unlockRxEv
080008d0 g     F .boot_text	00000014 target_wait_us
080026f0 g     F .boot_text	00000048 logger_add_output
080076ec g     F .text	0000003c _Z18device_create_heapmm
08001744 g     F .boot_text	00000004 usbd_register_sof_callback
0800911e g     F .text	000000a0 _Z16device_malloc_injR14HeapDefinition
080038bc g     F .boot_text	00000058 winusb_setup
08000c6c g     F .boot_text	00000014 rcc_set_pll_multiplication_factor
08009cce g     F .text	0000002c _ZN5codal3_cm3Pin7eventOnEi
080025a6 g     F .boot_text	0000001a memcpy
080005b8  w    F .boot_text	00000002 exti2_isr
080005b8  w    F .boot_text	00000002 dma1_channel6_isr
20001000 g     O .data	00000004 app_data_test
080005ba g     F .boot_text	00000002 null_handler
20000008 g     O .boot_data	00000004 rcc_ahb_frequency
08008250 g     F .text	000000a8 _ZN5codal13STM32BluePillC2Ev
0800a006 g     F .text	00000054 _ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap
08009bc8 g     F .text	00000018 _ZN5codal22MemberFunctionCallback4fireENS_5EventE
08002bfc g     F .boot_text	00000020 poll_restart_callback
080009ce g     F .boot_text	00000008 tcb_configure_args
20002184 g     O .bss	00000004 app_bss_test
08004268 g     F .boot_text	00000080 hf2_setup
080005b8  w    F .boot_text	00000002 can_rx1_isr
0800a814 g       .fini_array	00000000 __fini_array_end
080005b8  w    F .boot_text	00000002 dma1_channel5_isr
080004e4 g     F .boot_text	000000d4 baseloader_fetch
0800a05a g     F .text	0000002a _ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_
080016fe g     F .boot_text	00000008 usart_recv
08007d54 g     F .text	0000002c _ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE
08009b88 g     F .text	00000008 _ZN5codal10RefCounted7destroyEv
08007728  w    F .text	00000054 malloc
080005b8  w    F .boot_text	00000002 dma2_channel5_isr
080091e6 g     F .text	00000018 _ZN5codal8ListenerD1Ev
080046f4 g     O .boot_text	00000034 st_usbfs_v1_usb_driver
08004560 g     F .boot_text	0000000a bootloader_set_restart_callback
08000f74 g     F .boot_text	00000034 rtc_clear_flag
08000b08 g     F .boot_text	00000020 desig_get_unique_id
08009550 g     F .text	0000006a _ZN5codal5Timer8setEventEmttb
08007340 g     F .text	00000068 _Z14__create_fibermmmi
08006fe4 g     F .text	00000010 codal_dmesg_flush
08000998 g     F .boot_text	0000000c target_set_bootloader_callback
080005b8  w    F .boot_text	00000002 usart1_isr
08007a8c  w    F .text	0000008c _ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt
00000844 g       *ABS*	00000000 _bootbuf_size
080073b8 g     F .text	00000044 _ZN5codal4idleEv
20000164 g     O .boot_bss	00000004 .hidden __dso_handle
08008fd4 g     F .text	00000028 pinmap_cnf
080009ca g     F .boot_text	00000004 tcb_get_sp
08001f4a g     F .boot_text	00000028 usbd_register_set_config_callback
08009d02  w    F .text	00000004 _ZN5codal3_cm6Serial11setBaudrateEm
08001248 g     F .boot_text	00000160 st_usbfs_ep_setup
08007ccc g     F .text	00000008 _ZN5codal3_cm3Pin17getAnalogPeriodUsEv
08009fc8 g     F .text	00000004 _ZN5codal3_cm3I2C4readEtPhib
08009534 g     F .text	0000000e _ZN5codal5Timer7getTimeEv
080090ea g     F .text	00000010 _ZN5codal13release_fiberEPv
0800777c g     F .text	00000044 device_free
08009c0e  w    F .text	00000006 _ZN5codal3Pin8drainPinEv
080005b8  w    F .boot_text	00000002 usage_fault_handler
080005b8  w    F .boot_text	00000002 tim8_trg_com_isr
08007f28 g     F .text	00000034 _ZN5codal3_cm5TimerC1Ev
080005b8  w    F .boot_text	00000002 can2_rx0_isr
080028e4 g     F .boot_text	00000070 debug_printhex
08000c94 g     F .boot_text	00000014 rcc_set_pllxtpre
0800a0e0 g     F .text	00000006 _ZN5codal3I2C4readENS_15AcknowledgeTypeE
08002374 g     F .boot_text	00000044 os_task_highest_prio_ready_task
080005b8  w    F .boot_text	00000002 tim1_brk_isr
080080f0 g     F .text	000000e0 start_background_tasks
080079c4 g     F .text	00000088 _ZN5codal10MessageBus7processERNS_5EventEb
08009fb0 g     F .text	00000002 _ZN13UARTInterfaceC2Ejj
08006d18  w    F .text	00000018 _ZN5codal14CodalComponentD1Ev
080028b2 g     F .boot_text	0000000a debug_flush
08003728 g     F .boot_text	0000004c webusb_setup
2000204c g     O .bss	00000001 serialPort
0800a0c8 g     F .text	00000006 _ZN5codal3I2C12setFrequencyEm
080075b4 g     F .text	00000038 _ZN5codal11fiber_sleepEm
080098b4 g     F .text	00000018 _ZN5codal10MessageBus4sendENS_5EventE
08000e5c g     F .boot_text	00000024 rtc_exit_config_mode
08000c58 g     F .boot_text	00000014 rcc_set_sysclk_source
0800a6ec g     O .text	0000002c _ZTVN5codal3_cm3I2CE
080005b8  w    F .boot_text	00000002 can2_rx1_isr
08002bb8 g     F .boot_text	00000008 _ZdlPv
08000fd8 g     F .boot_text	00000010 pwr_disable_backup_domain_write_protect
08007ea8 g     F .text	00000014 _ZN5codal3_cm14alarm_callbackEv
08000000 g       .boot_text	00000000 _boot_text
080005b8  w    F .boot_text	00000002 tim1_cc_isr
08009a72 g     F .text	00000024 _ZN5codal13ManagedStringC1Ei
08007894 g     F .text	00000024 _ZN5codal27system_timer_event_every_usEmtt
08009d0a  w    F .text	00000004 _ZN5codal3_cm6Serial4putcEc
08007cd4 g     F .text	00000018 _ZN5codal3_cm3Pin15getAnalogPeriodEv
080043ec g     F .boot_text	0000009c flash_flush
08001706 g     F .boot_text	0000001c rcc_periph_clock_enable
08001768 g     F .boot_text	00000030 _usbd_reset
08002ce8 g     F .boot_text	00000034 bootloader_poll
0800a1da g     F .text	0000001c _ZN5codal3I2C5writeEth
0800339c g     F .boot_text	00000048 dump_buffer
08007ebc g     F .text	00000024 _ZN5codal3_cm5Timer9triggerInEm
080005b8  w    F .boot_text	00000002 sdio_isr
08000d80 g     F .boot_text	00000014 rcc_set_ppre1
08002b98 g     F .boot_text	0000000c platform_alarm_count
08001a30 g     F .boot_text	00000056 _usbd_control_in
080042e8 g     F .boot_text	00000034 backup_write
080005b8  w    F .boot_text	00000002 eth_isr
0800a0da g     F .text	00000006 _ZN5codal3I2C5writeEh
2000000c g     O .boot_data	00000004 rcc_apb1_frequency
0800431c g     F .boot_text	00000018 backup_read
20002210 g     O .bss	00000001 _ZN5codal14CodalComponent13configurationE
08002f3c g     F .boot_text	000000b8 boot_target_get_startup_mode
08000d94 g     F .boot_text	00000014 rcc_set_hpre
080005b8  w    F .boot_text	00000002 dma1_channel4_isr
080005b8  w    F .boot_text	00000002 tim8_brk_isr
0800787c g     F .text	00000018 _ZN5codal25system_timer_current_timeEv
08009d0e  w    F .text	00000006 _ZN5codal3_cm6Serial4getcEv
080005b8  w    F .boot_text	00000002 dma2_channel4_5_isr
080023b8 g     F .boot_text	0000001c os_task_clear_wait_queue
08009260 g     F .text	0000000a _ZN5codal6Serial6lockRxEv
080099fc g     F .text	00000022 _ZN5codal14EventQueueItemC1ENS_5EventE
080030f4 g     F .boot_text	00000020 boot_target_manifest_bootloader
20002144 g     O .bss	00000004 _ZN5codal12currentFiberE
08009692 g     F .text	00000002 _ZN5codal5TimerD2Ev
0800098c g     F .boot_text	0000000c target_set_alarm_callback
0800457e g     F .boot_text	0000000a boot_target_get_serial_number
20002170 g     O .bss	00000004 _ZN5codal10EventModel15defaultEventBusE
080073a8 g     F .text	00000010 _ZN5codal24scheduler_runqueue_emptyEv
08006e88 g     F .text	00000068 _Z18component_callbackN5codal5EventE
080032a0 g     F .boot_text	00000038 get_usb_status
20002218 g       .bss	00000000 _ebss
080099c2 g     F .text	0000001e _ZN5codal5EventC1EttNS_15EventLaunchModeE
080021dc g     F .boot_text	00000030 os_init
08001754 g     F .boot_text	00000014 usbd_ep_setup
08006c9c  w    F .text	00000008 _ZN5codal14CodalComponent4initEv
08000ada g       .boot_text	00000000 restore_register_context
0800192c g     F .boot_text	00000030 usbd_register_control_callback
080095ca g     F .text	00000024 _ZN5codal5Timer4syncEm
20000000 g     O .boot_data	00000004 hal_data_test
080005b8  w    F .boot_text	00000002 pvd_isr
080017a4 g     F .boot_text	0000000c usbd_ep_read_packet
08008ffc g     F .text	0000000c _ZN5codal3I2CC2ERNS_3PinES2_
08007a5c  w    F .text	00000030 _ZN5codal22MemberFunctionCallbackC1INS_10MessageBusEEEPT_MS3_FvNS_5EventEE
080099e0 g     F .text	0000001c _ZN5codal5EventC1EttmNS_15EventLaunchModeE
08002970 g     F .boot_text	0000004c platform_setup
08007e0c  w    F .text	0000001c _ZN5codal3_cm6SerialD0Ev
08007a5c  w    F .text	00000030 _ZN5codal22MemberFunctionCallbackC2INS_10MessageBusEEEPT_MS3_FvNS_5EventEE
080078d4  w    F .text	00000008 _ZN5codal10EventModel6removeEPNS_8ListenerE
080021b0 g     F .boot_text	0000000c os_event_init
080082f8 g     F .text	00000b58 _ZN5codal15STM32BluePillIOC2Ev
0800908a g     F .text	0000001e _ZN5codal12create_fiberEPFvvES1_
08009a96 g     F .text	00000030 _ZN5codal13ManagedStringC1EPKcs
20000520 g     O .boot_bss	00000004 usbd_dev
08009b00 g     F .text	0000001c _ZN5codal13ManagedString6charAtEs
080009a8 g     F .boot_text	00000004 target_disable_irq
080029f0 g     F .boot_text	00000014 led_on
080090dc g     F .text	0000000e _ZN5codal16launch_new_fiberEPFvvES1_
00001000 g       *ABS*	00000000 _bootram_size
08000168 g     F .boot_text	0000037c baseloader_start
0800220c g     F .boot_text	0000000c os_running
2000083e g     O .boot_bss	00000001 last_running_task
08007b8c g     F .text	00000050 _ZN5codal10MessageBusD2Ev
080005ba  w    F .boot_text	00000002 sv_call_handler
20001008 g     O .bss	00001044 bluepill
080005b8  w    F .boot_text	00000002 rcc_isr
080095ba g     F .text	00000010 _ZN5codal5Timer12eventEveryUsEmtt
20002174 g     O .bss	00000004 _ZN5codal13ManagedString11EmptyStringE
08000000 g     O .boot_text	00000150 vector_table
08000b28 g     F .boot_text	00000050 desig_get_unique_id_as_string
08000aaa g       .boot_text	00000000 save_register_context
08003318 g     F .boot_text	00000060 aggregate_register_callback
0800a28c g     O .text	00000038 _ZTVN5codal6SerialE
08006c00 g     F .text	00000088 application_start
080005b8  w    F .boot_text	00000002 flash_isr
0800a814 g       *ABS*	00000000 _data_loadaddr
080072b0 g     F .text	00000090 _ZN5codal19fiber_wake_on_eventEtt
20005000 g       .boot_buf	00000000 end
080005b8  w    F .boot_text	00000002 uart4_isr
08009fa6 g     F .text	00000002 _ZN5codal13STM32BluePill16periodicCallbackEv
08000ef4 g     F .boot_text	00000040 rtc_interrupt_enable
080081d0 g     F .text	00000080 _ZN5codal13STM32BluePill4initEv
08007cec g     F .text	00000068 _ZN5codal3_cm3Pin15setDigitalValueEi
080005ec  w    F .boot_text	0000002c rtc_alarm_isr
080005b8  w    F .boot_text	00000002 exti15_10_isr
080051b4 g     O .boot_init_array	00000004 __boot_init_array_end
0800717c g     F .text	00000018 _ZN5codal23fiber_scheduler_runningEv
080095ee g     F .text	000000a4 _ZN5codal5Timer7triggerEv
08009c14 g     F .text	00000004 _ZN5codal3_cm3Pin15getDigitalValueEv
08000c80 g     F .boot_text	00000014 rcc_set_pll_source
080009c2 g     F .boot_text	00000004 tcb_get_stack_base
08009dcc g     F .text	000001cc _ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE
080099ae g     F .text	00000014 _ZN5codal5EventC2Ev
08009fa8 g     F .text	00000008 _ZN5codal13STM32BluePill12idleCallbackEv
08003a14 g     F .boot_text	00000068 cdcadm_transmit
08002250 g     F .boot_text	00000074 os_msgQ_tick
080009ac g     F .boot_text	0000000a tcb_allocate
0800a2c4 g     O .text	00000018 _ZTVN5codal5TimerE
08009522 g     F .text	00000012 _ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE
0800a760 g     O .text	0000001c _ZTVN5codal3_cm3SPIE
0800a65c g     O .text	00000048 PinMap_SPI_NSS
080005b8  w    F .boot_text	00000002 hard_fault_handler
0800a0e6 g     F .text	0000005e _ZN5codal3I2C5writeEtPhib
080005b8  w    F .boot_text	00000002 exti1_isr
08009c66 g     F .text	00000006 _ZN5codal3_cm3Pin7setPullENS_8PullModeE
08007f5c g     F .text	00000060 _ZN5codal3_cm5Timer4initEv
080023d4 g     F .boot_text	000000ac os_task_tick
08003378 g     F .boot_text	00000024 usb_set_serial_number
080005b8  w    F .boot_text	00000002 i2c1_ev_isr
080075ec g     F .text	00000070 _ZN5codal13release_fiberEv
08001722 g     F .boot_text	00000022 rcc_periph_reset_pulse
08009a5a g     F .text	00000018 _ZN5codal13ManagedStringC2EPNS_10StringDataE
0800a6a4 g     O .text	00000048 PinMap_SPI_SCK
08001428 g     F .boot_text	00000090 st_usbfs_ep_write_packet
08001ff8 g     F .boot_text	0000006c st_usbfs_endpoints_reset
080005b8  w    F .boot_text	00000002 dma2_channel1_isr
080096a4  w    F .text	00000036 _ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE
080078cc  w    F .text	00000008 _ZN5codal10EventModel3addEPNS_8ListenerE
08007728 g     F .text	00000054 device_malloc
080026e4 g     F .boot_text	0000000c enable_log
080005ba  w    F .boot_text	00000002 pend_sv_handler
08002ba4 g     F .boot_text	0000000c __cxa_pure_virtual
08007030 g     F .text	000000c0 _ZN5codal15scheduler_eventENS_5EventE
08000fa8 g     F .boot_text	00000030 rtc_check_flag
08009d9c g     F .text	00000028 _ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE
0800a5cc g     O .text	00000048 PinMap_SPI_MISO
080005b8  w    F .boot_text	00000002 spi2_isr
08007ca4 g     F .text	00000020 _ZN5codal3_cm3Pin14setAnalogValueEi
08000834 g     F .boot_text	00000030 target_init
2000089c g       .boot_bss	00000000 boot_end
08007194 g     F .text	0000011c _ZN5codal14scheduler_initERNS_10EventModelE
08009542 g     F .text	0000000e _ZN5codal5Timer9getTimeUsEv
08002518 g     F .boot_text	00000038 os_task_run
08000d58 g     F .boot_text	00000014 rcc_set_adcpre
08009fc4 g     F .text	00000004 _ZN5codal3_cm3I2C5writeEtPhib
080017bc g     F .boot_text	0000000c usbd_ep_stall_get
08009b52 g     F .text	00000036 _ZN5codal10RefCounted4decrEv
080005b8  w    F .boot_text	00000002 tim8_up_isr
080025e6 g     F .boot_text	00000040 strncpy
080022c4 g     F .boot_text	0000000c os_sem_init
08007a4c g     F .text	00000010 _ZN5codal19allocateNotifyEventEv
0800990a  w    F .text	0000003e _ZN5codal8ListenerC2INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt
08006e10  w    F .text	00000054 _ZN5codal13STM32BluePillD0Ev
08009948  w    F .text	00000044 _ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE
08009056 g     F .text	00000034 _ZN5codal13dequeue_fiberEPNS_5FiberE
080005b8  w    F .boot_text	00000002 dma2_channel2_isr
08001068 g     F .boot_text	00000014 flash_set_ws
080051b4 g     O .boot_fini_array	00000004 __boot_fini_array_end
08009a1e g     F .text	0000000e _ZN5codal13ManagedStringD2Ev
08000cb8 g     F .boot_text	000000a0 rcc_set_rtc_clock_source
080011e8 g     F .boot_text	00000060 st_usbfs_set_ep_rx_bufsize
08007e28 g     F .text	00000050 _ZN5codal3_cm6SerialC2ERNS0_3PinES3_hh
080033e4 g     F .boot_text	000001a4 dump_usb_request
0800a23c  w    O .text	0000001c _ZTVN5codal14CodalComponentE
080051b4 g       .boot_init_array	00000000 _boot_etext
08002586 g     F .boot_text	00000020 memcmp
080092c4 g     F .text	00000028 _ZN5codal6Serial12circularCopyEPhhS1_tt
0800195c g     F .boot_text	0000004a _usbd_control_setup
08009c58 g     F .text	0000000e _ZN5codal3_cm3Pin8isAnalogEv
08000d6c g     F .boot_text	00000014 rcc_set_ppre2
080005ba  w    F .boot_text	00000002 debug_monitor_handler
080005b8  w    F .boot_text	00000002 exti3_isr
080005b8  w    F .boot_text	00000002 adc3_isr
08006d30  w    F .text	00000020 _ZN5codal14CodalComponentD0Ev
08000a66 g       .boot_text	00000000 save_context
080005b8  w    F .boot_text	00000002 tim3_isr
08000618  w    F .boot_text	0000005c usart2_isr
080011c8 g     F .boot_text	00000010 scb_reset_system
080008e4 g     F .boot_text	00000020 target_panic
080094fe g     F .text	00000024 _ZN5codal5Timer13getTimerEventEv
080028bc g     F .boot_text	00000018 debug_print
080005b8  w    F .boot_text	00000002 usb_lp_can_rx0_isr
08006c00 g       .text	00000000 _text
080009e4 g       .boot_text	00000000 swap_context
20004c00 g     O .boot_buf	00000400 flashBuf
080021bc g     F .boot_text	00000010 os_signal_event
0800a814 g       .fini_array	00000000 __fini_array_start
080005b8  w    F .boot_text	00000002 i2c2_er_isr
08002578 g     F .boot_text	00000002 os_cbkSleep
080013a8 g     F .boot_text	00000080 st_usbfs_ep_nak_set
08009ad6 g     F .text	0000000c _ZN5codal13ManagedStringC1Ev
080025c0 g     F .boot_text	00000016 memset
2000216c g     O .bss	00000004 _ZN5codal12system_timerE
08006c88 g     F .text	00000014 main
080090a8 g     F .text	00000020 _ZN5codal12create_fiberEPFvPvES0_S2_
0800107c g     F .boot_text	00000058 usbd_init
20002050 g     O .bss	000000f0 _ZN5codal14CodalComponent10componentsE
08008ffc g     F .text	0000000c _ZN5codal3I2CC1ERNS_3PinES2_
080005b8  w    F .boot_text	00000002 i2c2_ev_isr
080021cc g     F .boot_text	00000010 os_event_set_signaling_tid
08006d50 g     F .text	00000074 _Z10Blink_mainRN5codal13STM32BluePillE
080005b8  w    F .boot_text	00000002 uart5_isr
20002164 g     O .bss	00000008 heap
08002b64 g     F .boot_text	00000034 platform_set_alarm
20000840 g     O .boot_bss	0000005b hf2_buffer_mini
08009fee g     F .text	00000018 _ZN5codal3_cm3SPI7setModeEii
080005ba  w    F .boot_text	00000002 sys_tick_handler
0800a2dc  w    O .text	00000014 _ZTVN5codal10EventModelE
08002550 g     F .boot_text	00000028 os_on_assert
08007b8c g     F .text	00000050 _ZN5codal10MessageBusD1Ev
0800a814 g       .init_array	00000000 __init_array_end
080005b8  w    F .boot_text	00000002 fsmc_isr
080005b8  w    F .boot_text	00000002 dma1_channel1_isr
080005b8  w    F .boot_text	00000002 exti4_isr
08007f28 g     F .text	00000034 _ZN5codal3_cm5TimerC2Ev
0800a338 g     O .text	00000054 _ZTVN5codal3_cm3PinE
20000004 g     O .boot_data	00000004 codal_heap_start
08009fdc g     F .text	0000000e _ZN5codal3_cm3SPI5writeEi
08007df8  w    F .text	00000014 _ZN5codal3_cm6SerialD2Ev
08007848 g     F .text	00000034 _ZN5codal5TimerC2Ev
080090c8 g     F .text	00000014 _ZN5codal20fiber_wait_for_eventEtt
08000864 g     F .boot_text	00000010 target_wait_for_event
080091be g     F .text	00000028 _ZN5codal8ListenerC2EttPFvNS_5EventEEt
080043b8 g     F .boot_text	00000034 usb21_setup
080077c0 g     F .text	00000060 _ZN5codal6SerialC2ERNS_3PinES2_hht
08000b78 g     F .boot_text	00000070 rcc_wait_for_osc_ready
08002788 g     F .boot_text	00000020 debug_force_flush
08009c92 g     F .text	00000018 _ZN5codal3_cm3Pin17setAnalogPeriodUsEi
080027a8 g     F .boot_text	00000088 _Z11debug_printj
08009fc0 g     F .text	00000004 _ZN5codal3_cm3I2C12setFrequencyEm
08007b18 g     F .text	00000074 _ZN5codal10MessageBusC1Ev
08009770 g     F .text	00000076 _ZN5codal10MessageBus6removeEPNS_8ListenerE
08001044 g     F .boot_text	00000018 exti_enable_request
08000ff8 g     F .boot_text	0000004c exti_set_trigger
080005b8  w    F .boot_text	00000002 mem_manage_handler
08008094 g     F .text	0000005c restart_callback
08009c30 g     F .text	0000000e _ZN5codal3_cm3Pin7isInputEv
08009c4c g     F .text	0000000c _ZN5codal3_cm3Pin9isDigitalEv
20000010 g     O .boot_data	00000004 rcc_apb2_frequency
080099ae g     F .text	00000014 _ZN5codal5EventC1Ev
08000e80 g     F .boot_text	00000020 rtc_set_alarm_time
08001748 g     F .boot_text	0000000c usbd_poll
0800a0d4 g     F .text	00000006 _ZN5codal3I2C4stopEv
080009d6 g     F .boot_text	00000002 _fini
08009a2c g     F .text	0000002e _ZN5codal13ManagedString10initStringEPKci
08000874 g     F .boot_text	0000005c target_wait
080005b8  w    F .boot_text	00000002 can2_tx_isr
08008e6c g     F .text	0000001c _ZN5codal3_cm3I2CC1ERNS_3PinES3_
0800765c g     F .text	00000090 _ZN5codal6invokeEPFvPvES0_
080005b8  w    F .boot_text	00000002 exti9_5_isr
08002a04 g     F .boot_text	00000014 led_off
08009c02  w    F .text	00000006 _ZN5codal3Pin15setServoPulseUsEm
080005b8  w    F .boot_text	00000002 dma2_channel3_isr
08009b2a g     F .text	00000028 _ZN5codal10RefCounted4incrEv
08000ca8 g     F .boot_text	00000010 rcc_enable_rtc_clock
080096da g     F .text	00000096 _Z14async_callbackPv
08001120 g     F .boot_text	00000034 _usbd_standard_request_interface
08001154 g     F .boot_text	00000044 _usbd_standard_request_endpoint
0800900a  w    F .text	00000002 _ZN5codal14CodalComponent12idleCallbackEv
08002480 g     F .boot_text	00000098 os_task_signal_event
0800a800 g       .preinit_array	00000000 __preinit_array_end
08001fe0 g     F .boot_text	00000018 nvic_enable_irq
08002a18 g     F .boot_text	00000014 led_wait
080009dc g     F .boot_text	00000008 target_enable_debug
080082f8 g     F .text	00000b58 _ZN5codal15STM32BluePillIOC1Ev
080005b8  w    F .boot_text	00000002 dma1_channel7_isr
08003080 g     F .boot_text	00000034 boot_target_usb_init
08002b30 g     F .boot_text	00000034 platform_start_timer
080091be g     F .text	00000028 _ZN5codal8ListenerC1EttPFvNS_5EventEEt
08003ac8 g     F .boot_text	0000002c cdc_setup
080005b8  w    F .boot_text	00000002 tim1_up_isr
20001000 g       .data	00000000 _data
08000ea0 g     F .boot_text	00000020 rtc_set_prescale_val
0800462c g     F .boot_text	00000014 base_flash_program_array
08007ee0 g     F .text	00000048 _ZN5codal3_cm5Timer11syncRequestEv
08009c18 g     F .text	00000014 _ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE
20002178 g     O .bss	00000004 _ZN5codal3_cm5Timer8instanceE
08008e6c g     F .text	0000001c _ZN5codal3_cm3I2CC2ERNS_3PinES3_
08000da8 g     F .boot_text	00000090 rcc_clock_setup_in_hse_8mhz_out_72mhz
08009c88 g     F .text	00000006 _ZN5codal3_cm3Pin10disconnectEv
08009b90 g     F .text	00000006 _ZN5codal10RefCounted4initEv
08007e78 g     F .text	00000030 _ZN5codal3_cm13tick_callbackEv
08009ac6 g     F .text	00000010 _ZN5codal13ManagedStringC2ERKS0_
08009ad6 g     F .text	0000000c _ZN5codal13ManagedStringC2Ev
08009be0 g     F .text	00000022 _ZN5codal22MemberFunctionCallbackeqERKS0_
08000ec0 g     F .boot_text	00000014 rtc_get_counter_val
08009c08  w    F .text	00000006 _ZN5codal3Pin17setAnalogPeriodUsEm
08009caa g     F .text	00000010 _ZN5codal3_cm3Pin15setAnalogPeriodEi
080005b8  w    F .boot_text	00000002 can2_sce_isr
08000fe8 g     F .boot_text	00000010 pwr_enable_backup_domain_write_protect
080005b8  w    F .boot_text	00000002 tim4_isr
0800a7d4 g     O .text	0000002c _ZTVN5codal3I2CE
080097e6 g     F .text	00000024 _ZN5codal10MessageBus12dequeueEventEv
08002064 g     F .boot_text	00000108 st_usbfs_ep_stall_set
0800980a g     F .text	0000004c _ZN5codal10MessageBus21deleteMarkedListenersEv
080031d8 g     F .boot_text	000000ac usb_setup
2000089c g       .boot_bss	00000000 _boot_ebss
08007d54 g     F .text	0000002c _ZN5codal3_cm3PinC2EhmmtNS_13PinCapabilityE
20001008 g       .data	00000000 _edata
080090fa g     F .text	00000018 _ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_
080078dc g     F .text	000000e8 _ZN5codal10MessageBus3addEPNS_8ListenerE
0800a38c g     O .text	00000038 _ZTVN5codal3_cm6SerialE
080005b8  w    F .boot_text	00000002 dma1_channel2_isr
08009ac6 g     F .text	00000010 _ZN5codal13ManagedStringC1ERKS0_
080005b8  w    F .boot_text	00000002 i2c1_er_isr
080099e0 g     F .text	0000001c _ZN5codal5EventC2EttmNS_15EventLaunchModeE
080010d4 g     F .boot_text	0000004c _usbd_standard_request_device
080070f0 g     F .text	00000058 _Z15getFiberContextv
080009a4 g     F .boot_text	00000004 target_enable_irq
080094ea g     F .text	0000000a _ZN5codal5Timer17disableInterruptsEv
080005b8  w    F .boot_text	00000002 can_sce_isr
08009fea g     F .text	00000004 _ZN5codal3_cm3SPI8transferEPKhmPhm
080005ba  w    F .boot_text	00000002 nmi_handler
0800990a  w    F .text	0000003e _ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt
08000f34 g     F .boot_text	00000040 rtc_interrupt_disable
080051b4 g     O .boot_preinit_array	00000004 __boot_preinit_array_end
08002738 g     F .boot_text	00000050 _Z20debug_flush_internalb
08002bb0 g     F .boot_text	00000008 _Znwj
2000073c g     O .boot_bss	00000008 st_usbfs_force_nak
0800a2f0 g     O .text	0000003c _ZTVN5codal10MessageBusE
20000000 g       .boot_data	00000000 _boot_data
08009112 g     F .text	0000000c _ZN5codal9idle_taskEv
080099a6 g     F .text	00000008 _ZThn8_N5codal10MessageBusD0Ev
080005b8  w    F .boot_text	00000002 tim8_cc_isr
08008e88 g     F .text	0000005c _ZN5codal3_cm3SPI4initEv
08008250 g     F .text	000000a8 _ZN5codal13STM32BluePillC1Ev
08000be8 g     F .boot_text	00000070 rcc_osc_on
200047bc g       .boot_buf	00000000 _boot_stack
08009694 g     F .text	00000010 _ZN5codal10MessageBus9elementAtEi
0800158c g     F .boot_text	000000fc st_usbfs_poll
0800998c g     F .text	00000008 _ZThn8_N5codal10MessageBusD1Ev
08004cb4 g     O .boot_text	00000018 webusb_platform_capability_descriptor
080073fc g     F .text	000001b8 _ZN5codal8scheduleEv
080051b4 g     O .boot_init_array	00000004 __boot_init_array_start
08009d64 g     F .text	00000028 _ZN5codal3_cm6Serial12circularCopyEPhhS2_tt
08007d80 g     F .text	00000078 _ZN5codal3_cm3Pin13setServoValueEiii
08003014 g     F .boot_text	0000006c boot_target_gpio_setup
20000738 g     O .boot_bss	00000004 hal_bss_test
080005b8  w    F .boot_text	00000002 tamper_isr
0800a800 g       .init_array	00000000 __init_array_start
080016f8 g     F .boot_text	00000006 gpio_clear
080032d8 g     F .boot_text	00000040 aggregate_register_config_callback
08006ef0 g     F .text	000000cc _ZN5codal14CodalComponent12addComponentEv
080005b8  w    F .boot_text	00000002 eth_wkup_isr
080029bc g     F .boot_text	00000014 enable_debug
08001fa4 g     F .boot_text	00000018 st_usbfs_copy_to_pm
080098cc g     F .text	0000003e _ZN5codal10MessageBus4idleENS_5EventE
080099c2 g     F .text	0000001e _ZN5codal5EventC2EttNS_15EventLaunchModeE
080078b8  w    F .text	00000014 _ZN5codal10EventModel4sendENS_5EventE
08002300 g     F .boot_text	00000074 os_task_init
08009a5a g     F .text	00000018 _ZN5codal13ManagedStringC1EPNS_10StringDataE
08009856 g     F .text	0000005e _ZN5codal10MessageBus10queueEventERNS_5EventE
08001fbc g     F .boot_text	00000024 st_usbfs_copy_from_pm
08002ff4 g     F .boot_text	00000020 boot_target_set_led
080025d6 g     F .boot_text	00000010 strlen
08002954 g     F .boot_text	0000001c debug_printhex_unsigned
080009b6 g     F .boot_text	00000004 tcb_configure_lr
2000012c g       .boot_data	00000000 _boot_edata
20005000 g       .boot_buf	00000000 _stack
08009d14 g     F .text	0000000a _ZN5codal3_cm6Serial6lockRxEv
08007bf8 g     F .text	0000000c _ZN5codal13ManagedString9initEmptyEv
20005000 g       .boot_buf	00000000 _eboot_buf
08007bdc g     F .text	0000001c _ZN5codal5Event4fireEv
080016f4 g     F .boot_text	00000004 gpio_set
08009c6c g     F .text	0000001c _ZN5codal3_cm3Pin5setupEhh
080091fe g     F .text	00000062 _ZN5codal8Listener5queueENS_5EventE
080005b8  w    F .boot_text	00000002 bus_fault_handler
080005b8  w    F .boot_text	00000002 wwdg_isr
080005b8  w    F .boot_text	00000002 dma1_channel3_isr
080094f4 g     F .text	0000000a _ZN5codal5Timer16enableInterruptsEv
08007c3c g     F .text	00000068 _ZN5codal4itoaEiPc
08000ed4 g     F .boot_text	00000020 rtc_set_counter_val
20000744 g     O .boot_bss	000000f8 st_usbfs_dev
08009692 g     F .text	00000002 _ZN5codal5TimerD1Ev
08009d28 g     F .text	0000003c _ZN5codal3_cm6Serial12initialiseRxEv
08009a72 g     F .text	00000024 _ZN5codal13ManagedStringC2Ei
08002218 g     F .boot_text	00000038 os_msgQ_init
0800a800 g       .preinit_array	00000000 __preinit_array_start
080014b8 g     F .boot_text	000000d4 st_usbfs_ep_read_packet
080005b8  w    F .boot_text	00000002 spi3_isr
08008ee4 g     F .text	0000009c _ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_
080009d8 g     F .boot_text	00000004 __aeabi_atexit
080028d4 g     F .boot_text	00000008 debug_print_int
0800515c g     O .boot_text	00000055 infoUf2File
08000150 g     O .boot_text	00000018 base_vector_table
08002bc0 g     F .boot_text	00000008 millis
08007e28 g     F .text	00000050 _ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh
08007cc4 g     F .text	00000008 _ZN5codal3_cm3Pin9isTouchedEv
08000980 g     F .boot_text	0000000c target_set_tick_callback
08003284 g     F .boot_text	0000001c set_usb_busy
080005b8  w    F .boot_text	00000002 tim2_isr
080028dc g     F .boot_text	00000008 debug_print_unsigned
08004d98 g     O .boot_text	0000001c microsoft_platform_capability_descriptor
0800777c  w    F .text	00000044 free
08000e38 g     F .boot_text	00000024 rtc_enter_config_mode
080005b8  w    F .boot_text	00000002 exti0_isr
080011d8 g     F .boot_text	00000010 st_usbfs_set_address
0800a0ce g     F .text	00000006 _ZN5codal3I2C5startEv
080092ec g     F .text	0000002a _ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE



Disassembly of section .boot_text:

08000000 <vector_table>:
 8000000:	00 50 00 20 c5 06 00 08 bb 05 00 08 b9 05 00 08     .P. ............
 8000010:	b9 05 00 08 b9 05 00 08 b9 05 00 08 00 00 00 00     ................
	...
 800002c:	bb 05 00 08 bb 05 00 08 00 00 00 00 bb 05 00 08     ................
 800003c:	bb 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 800004c:	bd 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 800005c:	b9 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 800006c:	b9 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 800007c:	b9 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 800008c:	b9 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 800009c:	b9 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 80000ac:	b9 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 80000bc:	b9 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 80000cc:	b9 05 00 08 b9 05 00 08 b9 05 00 08 19 06 00 08     ................
 80000dc:	b9 05 00 08 b9 05 00 08 ed 05 00 08 b9 05 00 08     ................
 80000ec:	b9 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 80000fc:	b9 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 800010c:	b9 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 800011c:	b9 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 800012c:	b9 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 800013c:	b9 05 00 08 b9 05 00 08 b9 05 00 08 b9 05 00 08     ................
 800014c:	b9 05 00 08                                         ....

08000150 <base_vector_table>:
 8000150:	69 19 05 22 01 00 01 00 69 01 00 08 b8 05 00 08     i.."....i.......
 8000160:	01 6c 00 08 22 05 69 19                             .l..".i.

08000168 <baseloader_start>:
	static uint16_t *src;
	static size_t half_word_count;
	static int bytes_flashed;
	static bool verified, should_disable_interrupts;

	dest = (uint16_t *) dest0;
 8000168:	4b8b      	ldr	r3, [pc, #556]	; (8000398 <baseloader_start+0x230>)
 800016a:	6018      	str	r0, [r3, #0]
	src =  (uint16_t *) src0;
 800016c:	4b8b      	ldr	r3, [pc, #556]	; (800039c <baseloader_start+0x234>)
 800016e:	6019      	str	r1, [r3, #0]
	half_word_count = byte_count / 2;
 8000170:	0852      	lsrs	r2, r2, #1
 8000172:	4b8b      	ldr	r3, [pc, #556]	; (80003a0 <baseloader_start+0x238>)
 8000174:	601a      	str	r2, [r3, #0]
	bytes_flashed = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	4a8a      	ldr	r2, [pc, #552]	; (80003a4 <baseloader_start+0x23c>)
 800017a:	6013      	str	r3, [r2, #0]
	should_disable_interrupts = false;
 800017c:	4a8a      	ldr	r2, [pc, #552]	; (80003a8 <baseloader_start+0x240>)
 800017e:	7013      	strb	r3, [r2, #0]

    static uint16_t *erase_start, *erase_end, *flash_end;
    verified = true; erase_start = NULL; erase_end = NULL;
 8000180:	4a8a      	ldr	r2, [pc, #552]	; (80003ac <baseloader_start+0x244>)
 8000182:	2101      	movs	r1, #1
 8000184:	7011      	strb	r1, [r2, #0]
 8000186:	4a8a      	ldr	r2, [pc, #552]	; (80003b0 <baseloader_start+0x248>)
 8000188:	6013      	str	r3, [r2, #0]
 800018a:	4a8a      	ldr	r2, [pc, #552]	; (80003b4 <baseloader_start+0x24c>)
 800018c:	6013      	str	r3, [r2, #0]
    flash_end = base_get_flash_end();  //  Remember the bounds of erased data in the current page
 800018e:	4b8a      	ldr	r3, [pc, #552]	; (80003b8 <baseloader_start+0x250>)
 8000190:	4a8a      	ldr	r2, [pc, #552]	; (80003bc <baseloader_start+0x254>)
 8000192:	601a      	str	r2, [r3, #0]

	//  Disable interrupts when overwriting the vector table.
	if ((uint32_t) dest == FLASH_BASE) { should_disable_interrupts = true; }
 8000194:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8000198:	d00f      	beq.n	80001ba <baseloader_start+0x52>
	if (should_disable_interrupts) { disable_interrupts(); } // Only for baseloader.
 800019a:	4b83      	ldr	r3, [pc, #524]	; (80003a8 <baseloader_start+0x240>)
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	b12b      	cbz	r3, 80001ac <baseloader_start+0x44>
 80001a0:	b672      	cpsid	i
 80001a2:	2300      	movs	r3, #0
 80001a4:	4a86      	ldr	r2, [pc, #536]	; (80003c0 <baseloader_start+0x258>)
 80001a6:	6013      	str	r3, [r2, #0]
 80001a8:	4a86      	ldr	r2, [pc, #536]	; (80003c4 <baseloader_start+0x25c>)
 80001aa:	6013      	str	r3, [r2, #0]

	base_flash_unlock();  //  TODO: Check MakeCode flashing.
 80001ac:	4b86      	ldr	r3, [pc, #536]	; (80003c8 <baseloader_start+0x260>)
 80001ae:	4a87      	ldr	r2, [pc, #540]	; (80003cc <baseloader_start+0x264>)
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80001b6:	601a      	str	r2, [r3, #0]
    while (half_word_count > 0) {
 80001b8:	e13b      	b.n	8000432 <baseloader_start+0x2ca>
	if ((uint32_t) dest == FLASH_BASE) { should_disable_interrupts = true; }
 80001ba:	4b7b      	ldr	r3, [pc, #492]	; (80003a8 <baseloader_start+0x240>)
 80001bc:	7019      	strb	r1, [r3, #0]
 80001be:	e7ec      	b.n	800019a <baseloader_start+0x32>
        /* Avoid writing past the end of flash */
        if (dest >= flash_end) {  //  debug_println("dest >= flash_end"); debug_flush();
            verified = false;
 80001c0:	4b7a      	ldr	r3, [pc, #488]	; (80003ac <baseloader_start+0x244>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	701a      	strb	r2, [r3, #0]
        dest++;
        src++;
        half_word_count--;
		bytes_flashed += 2;
    }
	base_flash_lock();  //  TODO: Check MakeCode flashing.
 80001c6:	4a82      	ldr	r2, [pc, #520]	; (80003d0 <baseloader_start+0x268>)
 80001c8:	6813      	ldr	r3, [r2, #0]
 80001ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001ce:	6013      	str	r3, [r2, #0]

	//  TODO: Erase the second vector table.

	//  Vector table may have been overwritten. Restart to use the new vector table.
    if (should_disable_interrupts) { 
 80001d0:	4b75      	ldr	r3, [pc, #468]	; (80003a8 <baseloader_start+0x240>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	b113      	cbz	r3, 80001dc <baseloader_start+0x74>
		SCB_AIRCR = SCB_AIRCR_VECTKEY | SCB_AIRCR_SYSRESETREQ;  //  From scb_reset_system(); 
 80001d6:	4b7f      	ldr	r3, [pc, #508]	; (80003d4 <baseloader_start+0x26c>)
 80001d8:	4a7f      	ldr	r2, [pc, #508]	; (80003d8 <baseloader_start+0x270>)
 80001da:	601a      	str	r2, [r3, #0]
	}	
	return verified ? bytes_flashed : -1;
 80001dc:	4b73      	ldr	r3, [pc, #460]	; (80003ac <baseloader_start+0x244>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	f000 8163 	beq.w	80004ac <baseloader_start+0x344>
 80001e6:	4b6f      	ldr	r3, [pc, #444]	; (80003a4 <baseloader_start+0x23c>)
 80001e8:	6818      	ldr	r0, [r3, #0]
 80001ea:	4770      	bx	lr
            erase_start = base_get_flash_page_address(dest);
 80001ec:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 80001f0:	f020 0003 	bic.w	r0, r0, #3
 80001f4:	4b6e      	ldr	r3, [pc, #440]	; (80003b0 <baseloader_start+0x248>)
 80001f6:	6018      	str	r0, [r3, #0]
            erase_end = erase_start + (FLASH_PAGE_SIZE)/sizeof(uint16_t);
 80001f8:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80001fc:	4b6d      	ldr	r3, [pc, #436]	; (80003b4 <baseloader_start+0x24c>)
 80001fe:	601a      	str	r2, [r3, #0]
            base_flash_erase_page((uint32_t)erase_start);
 8000200:	4b76      	ldr	r3, [pc, #472]	; (80003dc <baseloader_start+0x274>)
 8000202:	6819      	ldr	r1, [r3, #0]
 8000204:	f001 0235 	and.w	r2, r1, #53	; 0x35
 8000208:	4b75      	ldr	r3, [pc, #468]	; (80003e0 <baseloader_start+0x278>)
 800020a:	881b      	ldrh	r3, [r3, #0]
 800020c:	b29b      	uxth	r3, r3
 800020e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000212:	d904      	bls.n	800021e <baseloader_start+0xb6>
 8000214:	4b73      	ldr	r3, [pc, #460]	; (80003e4 <baseloader_start+0x27c>)
 8000216:	681a      	ldr	r2, [r3, #0]
 8000218:	430a      	orrs	r2, r1
 800021a:	f002 0235 	and.w	r2, r2, #53	; 0x35
 800021e:	f012 0f01 	tst.w	r2, #1
 8000222:	d00f      	beq.n	8000244 <baseloader_start+0xdc>
 8000224:	4b6d      	ldr	r3, [pc, #436]	; (80003dc <baseloader_start+0x274>)
 8000226:	6819      	ldr	r1, [r3, #0]
 8000228:	f001 0235 	and.w	r2, r1, #53	; 0x35
 800022c:	4b6c      	ldr	r3, [pc, #432]	; (80003e0 <baseloader_start+0x278>)
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	b29b      	uxth	r3, r3
 8000232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000236:	d9f2      	bls.n	800021e <baseloader_start+0xb6>
 8000238:	4b6a      	ldr	r3, [pc, #424]	; (80003e4 <baseloader_start+0x27c>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	430a      	orrs	r2, r1
 800023e:	f002 0235 	and.w	r2, r2, #53	; 0x35
 8000242:	e7ec      	b.n	800021e <baseloader_start+0xb6>
 8000244:	4b66      	ldr	r3, [pc, #408]	; (80003e0 <baseloader_start+0x278>)
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	b29b      	uxth	r3, r3
 800024a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800024e:	d910      	bls.n	8000272 <baseloader_start+0x10a>
 8000250:	4b65      	ldr	r3, [pc, #404]	; (80003e8 <baseloader_start+0x280>)
 8000252:	4298      	cmp	r0, r3
 8000254:	d90d      	bls.n	8000272 <baseloader_start+0x10a>
 8000256:	4b65      	ldr	r3, [pc, #404]	; (80003ec <baseloader_start+0x284>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	f042 0202 	orr.w	r2, r2, #2
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	4a53      	ldr	r2, [pc, #332]	; (80003b0 <baseloader_start+0x248>)
 8000262:	6811      	ldr	r1, [r2, #0]
 8000264:	4a62      	ldr	r2, [pc, #392]	; (80003f0 <baseloader_start+0x288>)
 8000266:	6011      	str	r1, [r2, #0]
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800026e:	601a      	str	r2, [r3, #0]
 8000270:	e00c      	b.n	800028c <baseloader_start+0x124>
 8000272:	4b57      	ldr	r3, [pc, #348]	; (80003d0 <baseloader_start+0x268>)
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	f042 0202 	orr.w	r2, r2, #2
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	4a4c      	ldr	r2, [pc, #304]	; (80003b0 <baseloader_start+0x248>)
 800027e:	6811      	ldr	r1, [r2, #0]
 8000280:	4a5c      	ldr	r2, [pc, #368]	; (80003f4 <baseloader_start+0x28c>)
 8000282:	6011      	str	r1, [r2, #0]
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	4b53      	ldr	r3, [pc, #332]	; (80003dc <baseloader_start+0x274>)
 800028e:	6819      	ldr	r1, [r3, #0]
 8000290:	f001 0235 	and.w	r2, r1, #53	; 0x35
 8000294:	4b52      	ldr	r3, [pc, #328]	; (80003e0 <baseloader_start+0x278>)
 8000296:	881b      	ldrh	r3, [r3, #0]
 8000298:	b29b      	uxth	r3, r3
 800029a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800029e:	d904      	bls.n	80002aa <baseloader_start+0x142>
 80002a0:	4b50      	ldr	r3, [pc, #320]	; (80003e4 <baseloader_start+0x27c>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	430a      	orrs	r2, r1
 80002a6:	f002 0235 	and.w	r2, r2, #53	; 0x35
 80002aa:	f012 0f01 	tst.w	r2, #1
 80002ae:	d00f      	beq.n	80002d0 <baseloader_start+0x168>
 80002b0:	4b4a      	ldr	r3, [pc, #296]	; (80003dc <baseloader_start+0x274>)
 80002b2:	6819      	ldr	r1, [r3, #0]
 80002b4:	f001 0235 	and.w	r2, r1, #53	; 0x35
 80002b8:	4b49      	ldr	r3, [pc, #292]	; (80003e0 <baseloader_start+0x278>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	b29b      	uxth	r3, r3
 80002be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002c2:	d9f2      	bls.n	80002aa <baseloader_start+0x142>
 80002c4:	4b47      	ldr	r3, [pc, #284]	; (80003e4 <baseloader_start+0x27c>)
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	430a      	orrs	r2, r1
 80002ca:	f002 0235 	and.w	r2, r2, #53	; 0x35
 80002ce:	e7ec      	b.n	80002aa <baseloader_start+0x142>
 80002d0:	4b43      	ldr	r3, [pc, #268]	; (80003e0 <baseloader_start+0x278>)
 80002d2:	881b      	ldrh	r3, [r3, #0]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002da:	d90a      	bls.n	80002f2 <baseloader_start+0x18a>
 80002dc:	4b34      	ldr	r3, [pc, #208]	; (80003b0 <baseloader_start+0x248>)
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	4b41      	ldr	r3, [pc, #260]	; (80003e8 <baseloader_start+0x280>)
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d905      	bls.n	80002f2 <baseloader_start+0x18a>
 80002e6:	4a41      	ldr	r2, [pc, #260]	; (80003ec <baseloader_start+0x284>)
 80002e8:	6813      	ldr	r3, [r2, #0]
 80002ea:	f023 0302 	bic.w	r3, r3, #2
 80002ee:	6013      	str	r3, [r2, #0]
 80002f0:	e0b5      	b.n	800045e <baseloader_start+0x2f6>
 80002f2:	4a37      	ldr	r2, [pc, #220]	; (80003d0 <baseloader_start+0x268>)
 80002f4:	6813      	ldr	r3, [r2, #0]
 80002f6:	f023 0302 	bic.w	r3, r3, #2
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	e0af      	b.n	800045e <baseloader_start+0x2f6>
        base_flash_program_half_word((uint32_t)dest, *src);
 80002fe:	4b38      	ldr	r3, [pc, #224]	; (80003e0 <baseloader_start+0x278>)
 8000300:	881b      	ldrh	r3, [r3, #0]
 8000302:	b29b      	uxth	r3, r3
 8000304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000308:	d90a      	bls.n	8000320 <baseloader_start+0x1b8>
 800030a:	4b23      	ldr	r3, [pc, #140]	; (8000398 <baseloader_start+0x230>)
 800030c:	681a      	ldr	r2, [r3, #0]
 800030e:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <baseloader_start+0x280>)
 8000310:	429a      	cmp	r2, r3
 8000312:	d905      	bls.n	8000320 <baseloader_start+0x1b8>
 8000314:	4a35      	ldr	r2, [pc, #212]	; (80003ec <baseloader_start+0x284>)
 8000316:	6813      	ldr	r3, [r2, #0]
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	6013      	str	r3, [r2, #0]
 800031e:	e004      	b.n	800032a <baseloader_start+0x1c2>
 8000320:	4a2b      	ldr	r2, [pc, #172]	; (80003d0 <baseloader_start+0x268>)
 8000322:	6813      	ldr	r3, [r2, #0]
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6013      	str	r3, [r2, #0]
 800032a:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <baseloader_start+0x230>)
 800032c:	6818      	ldr	r0, [r3, #0]
 800032e:	4b1b      	ldr	r3, [pc, #108]	; (800039c <baseloader_start+0x234>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	8003      	strh	r3, [r0, #0]
 8000336:	4b29      	ldr	r3, [pc, #164]	; (80003dc <baseloader_start+0x274>)
 8000338:	6819      	ldr	r1, [r3, #0]
 800033a:	f001 0235 	and.w	r2, r1, #53	; 0x35
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <baseloader_start+0x278>)
 8000340:	881b      	ldrh	r3, [r3, #0]
 8000342:	b29b      	uxth	r3, r3
 8000344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000348:	d904      	bls.n	8000354 <baseloader_start+0x1ec>
 800034a:	4b26      	ldr	r3, [pc, #152]	; (80003e4 <baseloader_start+0x27c>)
 800034c:	681a      	ldr	r2, [r3, #0]
 800034e:	430a      	orrs	r2, r1
 8000350:	f002 0235 	and.w	r2, r2, #53	; 0x35
 8000354:	f012 0f01 	tst.w	r2, #1
 8000358:	d00f      	beq.n	800037a <baseloader_start+0x212>
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <baseloader_start+0x274>)
 800035c:	6819      	ldr	r1, [r3, #0]
 800035e:	f001 0235 	and.w	r2, r1, #53	; 0x35
 8000362:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <baseloader_start+0x278>)
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	b29b      	uxth	r3, r3
 8000368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800036c:	d9f2      	bls.n	8000354 <baseloader_start+0x1ec>
 800036e:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <baseloader_start+0x27c>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	430a      	orrs	r2, r1
 8000374:	f002 0235 	and.w	r2, r2, #53	; 0x35
 8000378:	e7ec      	b.n	8000354 <baseloader_start+0x1ec>
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <baseloader_start+0x278>)
 800037c:	881b      	ldrh	r3, [r3, #0]
 800037e:	b29b      	uxth	r3, r3
 8000380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000384:	d938      	bls.n	80003f8 <baseloader_start+0x290>
 8000386:	4b18      	ldr	r3, [pc, #96]	; (80003e8 <baseloader_start+0x280>)
 8000388:	4298      	cmp	r0, r3
 800038a:	d935      	bls.n	80003f8 <baseloader_start+0x290>
 800038c:	4a17      	ldr	r2, [pc, #92]	; (80003ec <baseloader_start+0x284>)
 800038e:	6813      	ldr	r3, [r2, #0]
 8000390:	f023 0301 	bic.w	r3, r3, #1
 8000394:	6013      	str	r3, [r2, #0]
 8000396:	e034      	b.n	8000402 <baseloader_start+0x29a>
 8000398:	20000134 	.word	0x20000134
 800039c:	20000148 	.word	0x20000148
 80003a0:	20000144 	.word	0x20000144
 80003a4:	20000130 	.word	0x20000130
 80003a8:	2000014c 	.word	0x2000014c
 80003ac:	2000014d 	.word	0x2000014d
 80003b0:	2000013c 	.word	0x2000013c
 80003b4:	20000138 	.word	0x20000138
 80003b8:	20000140 	.word	0x20000140
 80003bc:	08010000 	.word	0x08010000
 80003c0:	e000e010 	.word	0xe000e010
 80003c4:	40021008 	.word	0x40021008
 80003c8:	40022004 	.word	0x40022004
 80003cc:	45670123 	.word	0x45670123
 80003d0:	40022010 	.word	0x40022010
 80003d4:	e000ed0c 	.word	0xe000ed0c
 80003d8:	05fa0004 	.word	0x05fa0004
 80003dc:	4002200c 	.word	0x4002200c
 80003e0:	1ffff7e0 	.word	0x1ffff7e0
 80003e4:	4002204c 	.word	0x4002204c
 80003e8:	0807ffff 	.word	0x0807ffff
 80003ec:	40022050 	.word	0x40022050
 80003f0:	40022054 	.word	0x40022054
 80003f4:	40022014 	.word	0x40022014
 80003f8:	4a2e      	ldr	r2, [pc, #184]	; (80004b4 <baseloader_start+0x34c>)
 80003fa:	6813      	ldr	r3, [r2, #0]
 80003fc:	f023 0301 	bic.w	r3, r3, #1
 8000400:	6013      	str	r3, [r2, #0]
        erase_start = dest + 1;
 8000402:	4b2d      	ldr	r3, [pc, #180]	; (80004b8 <baseloader_start+0x350>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	1c9a      	adds	r2, r3, #2
 8000408:	492c      	ldr	r1, [pc, #176]	; (80004bc <baseloader_start+0x354>)
 800040a:	600a      	str	r2, [r1, #0]
        if (*dest != *src) {  //  debug_println("*dest != *src"); debug_flush();
 800040c:	8818      	ldrh	r0, [r3, #0]
 800040e:	4b2c      	ldr	r3, [pc, #176]	; (80004c0 <baseloader_start+0x358>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	8819      	ldrh	r1, [r3, #0]
 8000414:	4288      	cmp	r0, r1
 8000416:	d145      	bne.n	80004a4 <baseloader_start+0x33c>
        dest++;
 8000418:	4927      	ldr	r1, [pc, #156]	; (80004b8 <baseloader_start+0x350>)
 800041a:	600a      	str	r2, [r1, #0]
        src++;
 800041c:	3302      	adds	r3, #2
 800041e:	4a28      	ldr	r2, [pc, #160]	; (80004c0 <baseloader_start+0x358>)
 8000420:	6013      	str	r3, [r2, #0]
        half_word_count--;
 8000422:	4a28      	ldr	r2, [pc, #160]	; (80004c4 <baseloader_start+0x35c>)
 8000424:	6813      	ldr	r3, [r2, #0]
 8000426:	3b01      	subs	r3, #1
 8000428:	6013      	str	r3, [r2, #0]
		bytes_flashed += 2;
 800042a:	4a27      	ldr	r2, [pc, #156]	; (80004c8 <baseloader_start+0x360>)
 800042c:	6813      	ldr	r3, [r2, #0]
 800042e:	3302      	adds	r3, #2
 8000430:	6013      	str	r3, [r2, #0]
    while (half_word_count > 0) {
 8000432:	4b24      	ldr	r3, [pc, #144]	; (80004c4 <baseloader_start+0x35c>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	f43f aec5 	beq.w	80001c6 <baseloader_start+0x5e>
        if (dest >= flash_end) {  //  debug_println("dest >= flash_end"); debug_flush();
 800043c:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <baseloader_start+0x350>)
 800043e:	6818      	ldr	r0, [r3, #0]
 8000440:	4a22      	ldr	r2, [pc, #136]	; (80004cc <baseloader_start+0x364>)
 8000442:	6812      	ldr	r2, [r2, #0]
 8000444:	4290      	cmp	r0, r2
 8000446:	f4bf aebb 	bcs.w	80001c0 <baseloader_start+0x58>
        if (dest >= erase_end || dest < erase_start) {
 800044a:	4a21      	ldr	r2, [pc, #132]	; (80004d0 <baseloader_start+0x368>)
 800044c:	6812      	ldr	r2, [r2, #0]
 800044e:	4290      	cmp	r0, r2
 8000450:	f4bf aecc 	bcs.w	80001ec <baseloader_start+0x84>
 8000454:	4a19      	ldr	r2, [pc, #100]	; (80004bc <baseloader_start+0x354>)
 8000456:	6812      	ldr	r2, [r2, #0]
 8000458:	4290      	cmp	r0, r2
 800045a:	f4ff aec7 	bcc.w	80001ec <baseloader_start+0x84>
        base_flash_program_half_word((uint32_t)dest, *src);
 800045e:	4b1d      	ldr	r3, [pc, #116]	; (80004d4 <baseloader_start+0x36c>)
 8000460:	6819      	ldr	r1, [r3, #0]
 8000462:	f001 0235 	and.w	r2, r1, #53	; 0x35
 8000466:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <baseloader_start+0x370>)
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	b29b      	uxth	r3, r3
 800046c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000470:	d904      	bls.n	800047c <baseloader_start+0x314>
 8000472:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <baseloader_start+0x374>)
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	430a      	orrs	r2, r1
 8000478:	f002 0235 	and.w	r2, r2, #53	; 0x35
 800047c:	f012 0f01 	tst.w	r2, #1
 8000480:	f43f af3d 	beq.w	80002fe <baseloader_start+0x196>
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <baseloader_start+0x36c>)
 8000486:	6819      	ldr	r1, [r3, #0]
 8000488:	f001 0235 	and.w	r2, r1, #53	; 0x35
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <baseloader_start+0x370>)
 800048e:	881b      	ldrh	r3, [r3, #0]
 8000490:	b29b      	uxth	r3, r3
 8000492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000496:	d9f1      	bls.n	800047c <baseloader_start+0x314>
 8000498:	4b10      	ldr	r3, [pc, #64]	; (80004dc <baseloader_start+0x374>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	430a      	orrs	r2, r1
 800049e:	f002 0235 	and.w	r2, r2, #53	; 0x35
 80004a2:	e7eb      	b.n	800047c <baseloader_start+0x314>
            verified = false;
 80004a4:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <baseloader_start+0x378>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	701a      	strb	r2, [r3, #0]
            break;
 80004aa:	e68c      	b.n	80001c6 <baseloader_start+0x5e>
	return verified ? bytes_flashed : -1;
 80004ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80004b0:	4770      	bx	lr
 80004b2:	bf00      	nop
 80004b4:	40022010 	.word	0x40022010
 80004b8:	20000134 	.word	0x20000134
 80004bc:	2000013c 	.word	0x2000013c
 80004c0:	20000148 	.word	0x20000148
 80004c4:	20000144 	.word	0x20000144
 80004c8:	20000130 	.word	0x20000130
 80004cc:	20000140 	.word	0x20000140
 80004d0:	20000138 	.word	0x20000138
 80004d4:	4002200c 	.word	0x4002200c
 80004d8:	1ffff7e0 	.word	0x1ffff7e0
 80004dc:	4002204c 	.word	0x4002204c
 80004e0:	2000014d 	.word	0x2000014d

080004e4 <baseloader_fetch>:

int baseloader_fetch(baseloader_func *baseloader_addr, uint32_t **dest, const uint32_t **src, size_t *byte_count) {
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	//  Return the address of the baseloader function, located in the Second Base Vector Table.
	//  Also return the parameters to be passed to the baseloader function: dest, src, byte_count.
	if (!baseloader_addr || !dest || !src || !byte_count) { 
 80004e6:	4607      	mov	r7, r0
 80004e8:	2800      	cmp	r0, #0
 80004ea:	d043      	beq.n	8000574 <baseloader_fetch+0x90>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d041      	beq.n	8000574 <baseloader_fetch+0x90>
 80004f0:	2a00      	cmp	r2, #0
 80004f2:	d03f      	beq.n	8000574 <baseloader_fetch+0x90>
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d03d      	beq.n	8000574 <baseloader_fetch+0x90>
		baseloader_fail = (uint32_t) baseloader_addr;
		return -1; 
	}
	//  Search for the First and Second Base Vector Tables and find the bootloader range.
	//  First Base Vector Table is in the start of the application ROM.
	if (!IS_VALID_BASE_VECTOR_TABLE(application_start)) {  //  Quit if First Base Vector Table is not found.
 80004f8:	4829      	ldr	r0, [pc, #164]	; (80005a0 <baseloader_fetch+0xbc>)
 80004fa:	f420 767f 	bic.w	r6, r0, #1020	; 0x3fc
 80004fe:	f026 0603 	bic.w	r6, r6, #3
 8000502:	4c28      	ldr	r4, [pc, #160]	; (80005a4 <baseloader_fetch+0xc0>)
 8000504:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8000508:	ea46 0504 	orr.w	r5, r6, r4
 800050c:	f8d5 e000 	ldr.w	lr, [r5]
 8000510:	f8df c094 	ldr.w	ip, [pc, #148]	; 80005a8 <baseloader_fetch+0xc4>
 8000514:	45e6      	cmp	lr, ip
 8000516:	d132      	bne.n	800057e <baseloader_fetch+0x9a>
 8000518:	f8d5 e014 	ldr.w	lr, [r5, #20]
 800051c:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80005ac <baseloader_fetch+0xc8>
 8000520:	45e6      	cmp	lr, ip
 8000522:	d12c      	bne.n	800057e <baseloader_fetch+0x9a>
		return -2; 
	}
	base_vector_table_t *begin_base_vector = BASE_VECTOR_TABLE(application_start);

	//  Get size of new bootloader from the First Base Vector Table (same as the Application ROM start address).
	uint32_t bootloader_size = (uint32_t) FLASH_ADDRESS(begin_base_vector->application) - FLASH_BASE;
 8000524:	692d      	ldr	r5, [r5, #16]
 8000526:	f425 757f 	bic.w	r5, r5, #1020	; 0x3fc
 800052a:	f025 0503 	bic.w	r5, r5, #3
 800052e:	f105 4578 	add.w	r5, r5, #4160749568	; 0xf8000000
	if ((uint32_t) application_start + bootloader_size + FLASH_PAGE_SIZE 
 8000532:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8000536:	4428      	add	r0, r5
 8000538:	f8df c078 	ldr.w	ip, [pc, #120]	; 80005b4 <baseloader_fetch+0xd0>
 800053c:	4560      	cmp	r0, ip
 800053e:	d823      	bhi.n	8000588 <baseloader_fetch+0xa4>
		baseloader_fail = bootloader_size;
		return -3; 
	} 

	//  Second Base Vector Table is at start of application ROM + bootloader size.  TODO: Round up to the next flash page?
	uint32_t flash_page_addr = (uint32_t) FLASH_ADDRESS(application_start) + bootloader_size;
 8000540:	eb06 0c05 	add.w	ip, r6, r5
	if (!IS_VALID_BASE_VECTOR_TABLE(flash_page_addr)) {  //  Quit if Second Base Vector Table is not found.
 8000544:	ea44 000c 	orr.w	r0, r4, ip
 8000548:	f8d0 e000 	ldr.w	lr, [r0]
 800054c:	4c16      	ldr	r4, [pc, #88]	; (80005a8 <baseloader_fetch+0xc4>)
 800054e:	45a6      	cmp	lr, r4
 8000550:	d11f      	bne.n	8000592 <baseloader_fetch+0xae>
 8000552:	f8d0 e014 	ldr.w	lr, [r0, #20]
 8000556:	4c15      	ldr	r4, [pc, #84]	; (80005ac <baseloader_fetch+0xc8>)
 8000558:	45a6      	cmp	lr, r4
 800055a:	d11a      	bne.n	8000592 <baseloader_fetch+0xae>
		return -4;
	}
	base_vector_table_t *end_base_vector = BASE_VECTOR_TABLE(flash_page_addr);

	//  Tell caller to jump to the baseloader in the Second Base Vector Table.
	*baseloader_addr = (baseloader_func) ((uint32_t) (end_base_vector->baseloader) - FLASH_BASE + flash_page_addr);
 800055c:	6880      	ldr	r0, [r0, #8]
 800055e:	4460      	add	r0, ip
 8000560:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8000564:	6038      	str	r0, [r7, #0]
	*dest = (uint32_t *) FLASH_BASE;  		 //  Overwrite the old bootloader...
 8000566:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800056a:	6008      	str	r0, [r1, #0]
	*src  = (uint32_t *) FLASH_ADDRESS(application_start);  //  By the new bootloader from the Application space.
 800056c:	6016      	str	r6, [r2, #0]
	*byte_count = bootloader_size;			 //  For this number of bytes.
 800056e:	601d      	str	r5, [r3, #0]
	return 0;
 8000570:	2000      	movs	r0, #0
}
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
		baseloader_fail = (uint32_t) baseloader_addr;
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <baseloader_fetch+0xcc>)
 8000576:	601f      	str	r7, [r3, #0]
		return -1; 
 8000578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800057c:	e7f9      	b.n	8000572 <baseloader_fetch+0x8e>
		baseloader_fail = (uint32_t) FLASH_ADDRESS(application_start);
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <baseloader_fetch+0xcc>)
 8000580:	601e      	str	r6, [r3, #0]
		return -2; 
 8000582:	f06f 0001 	mvn.w	r0, #1
 8000586:	e7f4      	b.n	8000572 <baseloader_fetch+0x8e>
		baseloader_fail = bootloader_size;
 8000588:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <baseloader_fetch+0xcc>)
 800058a:	601d      	str	r5, [r3, #0]
		return -3; 
 800058c:	f06f 0002 	mvn.w	r0, #2
 8000590:	e7ef      	b.n	8000572 <baseloader_fetch+0x8e>
		baseloader_fail = flash_page_addr;
 8000592:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <baseloader_fetch+0xcc>)
 8000594:	f8c2 c000 	str.w	ip, [r2]
		*byte_count = bootloader_size;
 8000598:	601d      	str	r5, [r3, #0]
		return -4;
 800059a:	f06f 0003 	mvn.w	r0, #3
 800059e:	e7e8      	b.n	8000572 <baseloader_fetch+0x8e>
 80005a0:	08006c01 	.word	0x08006c01
 80005a4:	08000150 	.word	0x08000150
 80005a8:	22051969 	.word	0x22051969
 80005ac:	19690522 	.word	0x19690522
 80005b0:	2000012c 	.word	0x2000012c
 80005b4:	0800ffff 	.word	0x0800ffff

080005b8 <blocking_handler>:
	}

}

void blocking_handler(void)
{
 80005b8:	e7fe      	b.n	80005b8 <blocking_handler>

080005ba <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 80005ba:	4770      	bx	lr

080005bc <rtc_isr>:
volatile uint32_t platform_get_alarm(void) {
	//  Get alarm time.
	return rtc_get_alarm_val();
}

void rtc_isr(void) {
 80005bc:	b508      	push	{r3, lr}
	//  Interrupt Service Routine for RTC Tick, Alarm, Overflow.  Don't call any I/O functions here.
	if (rtc_check_flag(RTC_SEC)) {
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 fcf2 	bl	8000fa8 <rtc_check_flag>
 80005c4:	b900      	cbnz	r0, 80005c8 <rtc_isr+0xc>
		//  Call the alarm function.
		if (alarmFunc != NULL) { alarmFunc(); }
		return;
	}
#endif  //  NOTUSED
}
 80005c6:	bd08      	pop	{r3, pc}
		rtc_clear_flag(RTC_SEC);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fcd3 	bl	8000f74 <rtc_clear_flag>
		tickCount++;
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <rtc_isr+0x28>)
 80005d0:	6813      	ldr	r3, [r2, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	6013      	str	r3, [r2, #0]
		if (tickFunc != NULL) { tickFunc(); }
 80005d6:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <rtc_isr+0x2c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f3      	beq.n	80005c6 <rtc_isr+0xa>
 80005de:	4798      	blx	r3
 80005e0:	e7f1      	b.n	80005c6 <rtc_isr+0xa>
 80005e2:	bf00      	nop
 80005e4:	20000454 	.word	0x20000454
 80005e8:	2000044c 	.word	0x2000044c

080005ec <rtc_alarm_isr>:

void rtc_alarm_isr(void) {
 80005ec:	b508      	push	{r3, lr}
	//  Interrupt Service Routine for RTC Alarm Wakeup.  Don't call any I/O functions here.
	//  The RTC alarm appears as EXTI 17 which must be reset independently of the RTC alarm flag.
	exti_reset_request(EXTI17);
 80005ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80005f2:	f000 fd33 	bl	800105c <exti_reset_request>
	rtc_clear_flag(RTC_ALR);
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 fcbc 	bl	8000f74 <rtc_clear_flag>
	alarmCount++;
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <rtc_alarm_isr+0x24>)
 80005fe:	6813      	ldr	r3, [r2, #0]
 8000600:	3301      	adds	r3, #1
 8000602:	6013      	str	r3, [r2, #0]
	//  Call the alarm function.
	if (alarmFunc != NULL) { alarmFunc(); }
 8000604:	4b03      	ldr	r3, [pc, #12]	; (8000614 <rtc_alarm_isr+0x28>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	b103      	cbz	r3, 800060c <rtc_alarm_isr+0x20>
 800060a:	4798      	blx	r3
}
 800060c:	bd08      	pop	{r3, pc}
 800060e:	bf00      	nop
 8000610:	20000448 	.word	0x20000448
 8000614:	20000450 	.word	0x20000450

08000618 <usart2_isr>:
	usart_set_stopbits(USART2, USART_STOPBITS_1);
	usart_set_flow_control(USART2, USART_FLOWCONTROL_NONE);
	usart_set_mode(USART2, USART_MODE_TX_RX);
}

void usart2_isr(void) {
 8000618:	b508      	push	{r3, lr}
    //  Interrupt service routine for USART2. We enqueue each byte received.
	//  Check if we were called because of received data (RXNE). */
	if (((USART_CR1(USART2) & USART_CR1_RXNEIE) != 0) &&
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <usart2_isr+0x4c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f013 0f20 	tst.w	r3, #32
 8000622:	d004      	beq.n	800062e <usart2_isr+0x16>
	    ((USART_SR(USART2) & USART_SR_RXNE) != 0)) {
 8000624:	4b10      	ldr	r3, [pc, #64]	; (8000668 <usart2_isr+0x50>)
 8000626:	681b      	ldr	r3, [r3, #0]
	if (((USART_CR1(USART2) & USART_CR1_RXNEIE) != 0) &&
 8000628:	f013 0f20 	tst.w	r3, #32
 800062c:	d100      	bne.n	8000630 <usart2_isr+0x18>
		//  Read the next received byte and add to response queue.
		uint8_t ch = usart_recv(USART2);
        responseQueue.push(ch);
	}
}
 800062e:	bd08      	pop	{r3, pc}
		uint8_t ch = usart_recv(USART2);
 8000630:	480d      	ldr	r0, [pc, #52]	; (8000668 <usart2_isr+0x50>)
 8000632:	f001 f864 	bl	80016fe <usart_recv>
 8000636:	b2c0      	uxtb	r0, r0
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <usart2_isr+0x54>)
 800063a:	681a      	ldr	r2, [r3, #0]
        write_index_(0), read_index_(0)
    {}

    static size_t next_index(size_t arg, size_t max_size)
    {
        size_t ret = arg + 1;
 800063c:	1c53      	adds	r3, r2, #1
        while (BOOST_UNLIKELY(ret >= max_size))
 800063e:	2b25      	cmp	r3, #37	; 0x25
 8000640:	d80e      	bhi.n	8000660 <usart2_isr+0x48>
 8000642:	490a      	ldr	r1, [pc, #40]	; (800066c <usart2_isr+0x54>)
 8000644:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000646:	f3bf 8f5b 	dmb	ish
    bool push(T const & t, T * buffer, size_t max_size)
    {
        const size_t write_index = write_index_.load(memory_order_relaxed);  // only written from push thread
        const size_t next = next_index(write_index, max_size);

        if (next == read_index_.load(memory_order_acquire))
 800064a:	428b      	cmp	r3, r1
 800064c:	d0ef      	beq.n	800062e <usart2_isr+0x16>
            return false; /* ringbuffer is full */

        new (buffer + write_index) T(t); // copy-construct
 800064e:	4908      	ldr	r1, [pc, #32]	; (8000670 <usart2_isr+0x58>)
 8000650:	42d1      	cmn	r1, r2
 8000652:	d000      	beq.n	8000656 <usart2_isr+0x3e>
 8000654:	5488      	strb	r0, [r1, r2]
	__atomic_store_n(&_M_i, __i, __m);
 8000656:	f3bf 8f5b 	dmb	ish
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <usart2_isr+0x54>)
 800065c:	6013      	str	r3, [r2, #0]
}
 800065e:	e7e6      	b.n	800062e <usart2_isr+0x16>
            ret -= max_size;
 8000660:	3b26      	subs	r3, #38	; 0x26
 8000662:	e7ec      	b.n	800063e <usart2_isr+0x26>
 8000664:	4000440c 	.word	0x4000440c
 8000668:	40004400 	.word	0x40004400
 800066c:	20002194 	.word	0x20002194
 8000670:	200021d8 	.word	0x200021d8

08000674 <pre_main>:
extern void application_start(void);

uint32_t hal_bss_test;                   //  Test whether BSS Section is loaded correctly.
uint32_t hal_data_test = 0x87654321;     //  Test whether Data Section is loaded correctly.

static void pre_main() {
 8000674:	b508      	push	{r3, lr}
	//  Init the STM32 platform and start the timer.  Note: Constructors are not called yet.
    //  Note: Must disable debug when testing Deep Sleep.  Else device will not run without ST Link.
    target_enable_debug();       //  Uncomment to allow display of debug messages in development devices. NOTE: This will hang if no Arm Semihosting debugger is attached.
 8000676:	f000 f9b1 	bl	80009dc <target_enable_debug>
    //  target_disable_debug();  //  Uncomment to disable display of debug messages.  For use in production devices.
    target_init();               //  Init the STM32 platform.
 800067a:	f000 f8db 	bl	8000834 <target_init>

	//  Test whether Bootloader BSS and Data Sections are loaded correctly.
    if (hal_bss_test != 0x0 || hal_data_test != 0x87654321) {
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <pre_main+0x3c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	b923      	cbnz	r3, 800068e <pre_main+0x1a>
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <pre_main+0x40>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b0b      	ldr	r3, [pc, #44]	; (80006b8 <pre_main+0x44>)
 800068a:	429a      	cmp	r2, r3
 800068c:	d00e      	beq.n	80006ac <pre_main+0x38>
        debug_print("*** hal bss/data failed, bss_test = "); debug_printhex_unsigned(hal_bss_test);
 800068e:	480b      	ldr	r0, [pc, #44]	; (80006bc <pre_main+0x48>)
 8000690:	f002 f914 	bl	80028bc <debug_print>
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <pre_main+0x3c>)
 8000696:	6818      	ldr	r0, [r3, #0]
 8000698:	f002 f95c 	bl	8002954 <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(hal_data_test);
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <pre_main+0x4c>)
 800069e:	f002 f90d 	bl	80028bc <debug_print>
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <pre_main+0x40>)
 80006a4:	6818      	ldr	r0, [r3, #0]
 80006a6:	f002 f955 	bl	8002954 <debug_printhex_unsigned>
 80006aa:	e7fe      	b.n	80006aa <pre_main+0x36>
    }
#ifdef UNIT_TEST
    //  Run the unit tests if any.  Don't run unit test in bootloader, because we will run out of space in bootrom.
    run_unit_test();	
#endif  //  UNIT_TEST
}
 80006ac:	bd08      	pop	{r3, pc}
 80006ae:	bf00      	nop
 80006b0:	20000738 	.word	0x20000738
 80006b4:	20000000 	.word	0x20000000
 80006b8:	87654321 	.word	0x87654321
 80006bc:	08004640 	.word	0x08004640
 80006c0:	08004668 	.word	0x08004668

080006c4 <reset_handler>:

void reset_handler(void) {
 80006c4:	b510      	push	{r4, lr}
	//  We also call the constructors.  The vector table points to this function.
	volatile unsigned *src, *boot_dest;
	funcp_t *fp;

	//  Copy Bootloader data section from ROM to RAM.
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <reset_handler+0x6c>)
 80006c8:	491a      	ldr	r1, [pc, #104]	; (8000734 <reset_handler+0x70>)
 80006ca:	e003      	b.n	80006d4 <reset_handler+0x10>
		boot_dest < &_boot_edata;  //  Bootloader
		src++, boot_dest++) {
		*boot_dest = *src;
 80006cc:	f851 2b04 	ldr.w	r2, [r1], #4
 80006d0:	f843 2b04 	str.w	r2, [r3], #4
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 80006d4:	4a18      	ldr	r2, [pc, #96]	; (8000738 <reset_handler+0x74>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d3f8      	bcc.n	80006cc <reset_handler+0x8>
 80006da:	e002      	b.n	80006e2 <reset_handler+0x1e>
	}

	//  Init variables in Bootloader BSS section to null.
	while (boot_dest < &_boot_ebss) { *boot_dest++ = 0; }
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	3304      	adds	r3, #4
 80006e2:	4a16      	ldr	r2, [pc, #88]	; (800073c <reset_handler+0x78>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d3f9      	bcc.n	80006dc <reset_handler+0x18>

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 80006e8:	4a15      	ldr	r2, [pc, #84]	; (8000740 <reset_handler+0x7c>)
 80006ea:	6813      	ldr	r3, [r2, #0]
 80006ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f0:	6013      	str	r3, [r2, #0]

	//  Perform our platform initialisation.  pre_main() will not return if bootloader decides to run in Bootloader Mode.
	pre_main();
 80006f2:	f7ff ffbf 	bl	8000674 <pre_main>
	//  Application constructors will be called by application_start().
	//  TODO: Fix these bootloader constructors:
	// .init_array    0x0000000008009778        0x4 .pioenvs/bluepill_f103c8/src/uart.o
 	// .init_array    0x000000000800977c        0x4 .pioenvs/bluepill_f103c8/lib33e/libuartint.a(uartint.o)
 	// .init_array    0x0000000008009780        0x4 .pioenvs/bluepill_f103c8/lib3e7/libcodal-core.a(ManagedString.o)
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 80006f6:	4c13      	ldr	r4, [pc, #76]	; (8000744 <reset_handler+0x80>)
 80006f8:	e002      	b.n	8000700 <reset_handler+0x3c>
		(*fp)();
 80006fa:	f854 3b04 	ldr.w	r3, [r4], #4
 80006fe:	4798      	blx	r3
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <reset_handler+0x84>)
 8000702:	429c      	cmp	r4, r3
 8000704:	d3f9      	bcc.n	80006fa <reset_handler+0x36>
	}
	for (fp = &__boot_init_array_start; fp < &__boot_init_array_end; fp++) {
 8000706:	4c11      	ldr	r4, [pc, #68]	; (800074c <reset_handler+0x88>)
 8000708:	e002      	b.n	8000710 <reset_handler+0x4c>
		(*fp)();
 800070a:	f854 3b04 	ldr.w	r3, [r4], #4
 800070e:	4798      	blx	r3
	for (fp = &__boot_init_array_start; fp < &__boot_init_array_end; fp++) {
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <reset_handler+0x8c>)
 8000712:	429c      	cmp	r4, r3
 8000714:	d3f9      	bcc.n	800070a <reset_handler+0x46>
	}

    //  Start the bootloader.  This function will not return if the bootloader decides to run in Bootloader Mode (polling forever for USB commands).
    bootloader_start();
 8000716:	f002 fb01 	bl	8002d1c <bootloader_start>

	//  If we return here, that means we are running in Application Mode.
	//  Call the application's entry point. application_start() is always located at a fixed address (_text) so we can change the application easily.
	application_start();
 800071a:	f006 fa71 	bl	8006c00 <application_start>

	//  TODO: We should not allow our low-level STM32 functions to have C++ destructors.
	//  Application destructors will be called by application_start().
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 800071e:	4c0d      	ldr	r4, [pc, #52]	; (8000754 <reset_handler+0x90>)
 8000720:	e002      	b.n	8000728 <reset_handler+0x64>
		(*fp)();
 8000722:	f854 3b04 	ldr.w	r3, [r4], #4
 8000726:	4798      	blx	r3
	for (fp = &__boot_fini_array_start; fp < &__boot_fini_array_end; fp++) {
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <reset_handler+0x94>)
 800072a:	429c      	cmp	r4, r3
 800072c:	d3f9      	bcc.n	8000722 <reset_handler+0x5e>
	}

}
 800072e:	bd10      	pop	{r4, pc}
 8000730:	20000000 	.word	0x20000000
 8000734:	080051b4 	.word	0x080051b4
 8000738:	2000012c 	.word	0x2000012c
 800073c:	2000089c 	.word	0x2000089c
 8000740:	e000ed14 	.word	0xe000ed14
 8000744:	080051b4 	.word	0x080051b4
 8000748:	080051b4 	.word	0x080051b4
 800074c:	080051b4 	.word	0x080051b4
 8000750:	080051b4 	.word	0x080051b4
 8000754:	080051b4 	.word	0x080051b4
 8000758:	080051b4 	.word	0x080051b4

0800075c <_ZL11timer_alarmv>:
    if (tick_callback) { tick_callback(); }
    //  Call cocoOS at every tick.
    os_tick();
}

static void timer_alarm() {
 800075c:	b508      	push	{r3, lr}
        debug_print(";");
        poll_bootloader();
    }
#endif  //  NOTUSED
    //  If Codal Timer exists, update the timer.
    if (alarm_callback) { alarm_callback(); }
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <_ZL11timer_alarmv+0x1c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	b10b      	cbz	r3, 8000768 <_ZL11timer_alarmv+0xc>
 8000764:	4798      	blx	r3
    else { if (millis() < 200) { debug_print("a? "); } }
}
 8000766:	bd08      	pop	{r3, pc}
    else { if (millis() < 200) { debug_print("a? "); } }
 8000768:	f002 fa2a 	bl	8002bc0 <millis>
 800076c:	28c7      	cmp	r0, #199	; 0xc7
 800076e:	d8fa      	bhi.n	8000766 <_ZL11timer_alarmv+0xa>
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <_ZL11timer_alarmv+0x20>)
 8000772:	f002 f8a3 	bl	80028bc <debug_print>
}
 8000776:	e7f6      	b.n	8000766 <_ZL11timer_alarmv+0xa>
 8000778:	20000158 	.word	0x20000158
 800077c:	08004678 	.word	0x08004678

08000780 <_ZL15poll_bootloaderv>:
    if (!bootloader_callback) { return; }
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <_ZL15poll_bootloaderv+0x5c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	b343      	cbz	r3, 80007d8 <_ZL15poll_bootloaderv+0x58>
static void poll_bootloader() {
 8000786:	b510      	push	{r4, lr}
    poll_status = bootloader_callback();
 8000788:	4798      	blx	r3
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <_ZL15poll_bootloaderv+0x60>)
 800078c:	6018      	str	r0, [r3, #0]
    prev_poll_status = poll_status;
 800078e:	6819      	ldr	r1, [r3, #0]
 8000790:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <_ZL15poll_bootloaderv+0x64>)
 8000792:	6011      	str	r1, [r2, #0]
    if (poll_status > 0) { debug_print("u{ "); }
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	dc12      	bgt.n	80007c0 <_ZL15poll_bootloaderv+0x40>
    while (poll_status > 0) {  //  If we receive any USB requests,,,
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <_ZL15poll_bootloaderv+0x60>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	dd12      	ble.n	80007c8 <_ZL15poll_bootloaderv+0x48>
        poll_status = 0;       //  Continue polling a few times for subsequent USB requests.
 80007a2:	2400      	movs	r4, #0
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <_ZL15poll_bootloaderv+0x60>)
 80007a6:	601c      	str	r4, [r3, #0]
        for (uint16_t i = 0; i < MAX_BURST_POLL; i++) {
 80007a8:	2c09      	cmp	r4, #9
 80007aa:	d8f6      	bhi.n	800079a <_ZL15poll_bootloaderv+0x1a>
            poll_status = poll_status | bootloader_callback();
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <_ZL15poll_bootloaderv+0x5c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4798      	blx	r3
 80007b2:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <_ZL15poll_bootloaderv+0x60>)
 80007b4:	6813      	ldr	r3, [r2, #0]
 80007b6:	4318      	orrs	r0, r3
 80007b8:	6010      	str	r0, [r2, #0]
        for (uint16_t i = 0; i < MAX_BURST_POLL; i++) {
 80007ba:	3401      	adds	r4, #1
 80007bc:	b2a4      	uxth	r4, r4
 80007be:	e7f3      	b.n	80007a8 <_ZL15poll_bootloaderv+0x28>
    if (poll_status > 0) { debug_print("u{ "); }
 80007c0:	4809      	ldr	r0, [pc, #36]	; (80007e8 <_ZL15poll_bootloaderv+0x68>)
 80007c2:	f002 f87b 	bl	80028bc <debug_print>
 80007c6:	e7e8      	b.n	800079a <_ZL15poll_bootloaderv+0x1a>
    if (prev_poll_status > 0) { debug_print("} "); }
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <_ZL15poll_bootloaderv+0x64>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dd02      	ble.n	80007d6 <_ZL15poll_bootloaderv+0x56>
 80007d0:	4806      	ldr	r0, [pc, #24]	; (80007ec <_ZL15poll_bootloaderv+0x6c>)
 80007d2:	f002 f873 	bl	80028bc <debug_print>
}
 80007d6:	bd10      	pop	{r4, pc}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000160 	.word	0x20000160
 80007e0:	20000150 	.word	0x20000150
 80007e4:	2000015c 	.word	0x2000015c
 80007e8:	0800467c 	.word	0x0800467c
 80007ec:	08004680 	.word	0x08004680

080007f0 <_ZL10timer_tickv>:
static void timer_tick() {
 80007f0:	b508      	push	{r3, lr}
    poll_bootloader();
 80007f2:	f7ff ffc5 	bl	8000780 <_ZL15poll_bootloaderv>
    if (tick_callback) { tick_callback(); }
 80007f6:	4b03      	ldr	r3, [pc, #12]	; (8000804 <_ZL10timer_tickv+0x14>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	b103      	cbz	r3, 80007fe <_ZL10timer_tickv+0xe>
 80007fc:	4798      	blx	r3
    os_tick();
 80007fe:	f001 febc 	bl	800257a <os_tick>
}
 8000802:	bd08      	pop	{r3, pc}
 8000804:	20000154 	.word	0x20000154

08000808 <_ZL11os_schedulev>:
    if (os_running()) { return; }  //  Already running.
    running = 1;
    os_enable_interrupts();
}

static void os_schedule( void ) {
 8000808:	b510      	push	{r4, lr}
    //  Call this to schedule a task.
    if (!os_running()) { return; }  //  Don't schedule if cocoOS scheduler is not started.
 800080a:	f001 fcff 	bl	800220c <os_running>
 800080e:	b900      	cbnz	r0, 8000812 <_ZL11os_schedulev+0xa>
        os_task_run();
    }
    else {
        os_cbkSleep();
    }
}
 8000810:	bd10      	pop	{r4, pc}
    running_tid = NO_TID;
 8000812:	4c07      	ldr	r4, [pc, #28]	; (8000830 <_ZL11os_schedulev+0x28>)
 8000814:	23ff      	movs	r3, #255	; 0xff
 8000816:	7023      	strb	r3, [r4, #0]
    running_tid = os_task_highest_prio_ready_task();   
 8000818:	f001 fdac 	bl	8002374 <os_task_highest_prio_ready_task>
 800081c:	7020      	strb	r0, [r4, #0]
    if ( running_tid != NO_TID ) {
 800081e:	28ff      	cmp	r0, #255	; 0xff
 8000820:	d002      	beq.n	8000828 <_ZL11os_schedulev+0x20>
        os_task_run();
 8000822:	f001 fe79 	bl	8002518 <os_task_run>
 8000826:	e7f3      	b.n	8000810 <_ZL11os_schedulev+0x8>
        os_cbkSleep();
 8000828:	f001 fea6 	bl	8002578 <os_cbkSleep>
 800082c:	e7f0      	b.n	8000810 <_ZL11os_schedulev+0x8>
 800082e:	bf00      	nop
 8000830:	2000083c 	.word	0x2000083c

08000834 <target_init>:
void target_init(void) {
 8000834:	b508      	push	{r3, lr}
    if (initialised) { return; }  //  Already initialised, skip.
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <target_init+0x24>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b103      	cbz	r3, 800083e <target_init+0xa>
}
 800083c:	bd08      	pop	{r3, pc}
    initialised = true;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <target_init+0x24>)
 8000840:	2201      	movs	r2, #1
 8000842:	701a      	strb	r2, [r3, #0]
    platform_setup();  //  STM32 platform setup.
 8000844:	f002 f894 	bl	8002970 <platform_setup>
    os_init();         //  Init cocoOS before creating any multitasking objects.
 8000848:	f001 fcc8 	bl	80021dc <os_init>
    platform_start_timer(timer_tick, timer_alarm);
 800084c:	4903      	ldr	r1, [pc, #12]	; (800085c <target_init+0x28>)
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <target_init+0x2c>)
 8000850:	f002 f96e 	bl	8002b30 <platform_start_timer>
 8000854:	e7f2      	b.n	800083c <target_init+0x8>
 8000856:	bf00      	nop
 8000858:	20000168 	.word	0x20000168
 800085c:	0800075d 	.word	0x0800075d
 8000860:	080007f1 	.word	0x080007f1

08000864 <target_wait_for_event>:
    if (!initialised) { return; }  //  If not initialised, quit.
 8000864:	4b02      	ldr	r3, [pc, #8]	; (8000870 <target_wait_for_event+0xc>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b103      	cbz	r3, 800086c <target_wait_for_event+0x8>
    __asm("wfe");  //  Allow CPU to go to sleep.
 800086a:	bf20      	wfe
}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000168 	.word	0x20000168

08000874 <target_wait>:
    if (milliseconds <= 0) { return; }
 8000874:	b310      	cbz	r0, 80008bc <target_wait+0x48>
void target_wait(uint32_t milliseconds) {
 8000876:	b510      	push	{r4, lr}
 8000878:	4604      	mov	r4, r0
    if (!initialised) { return; }  //  If not initialised, quit.
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <target_wait+0x4c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b903      	cbnz	r3, 8000882 <target_wait+0xe>
}
 8000880:	bd10      	pop	{r4, pc}
    debug_print("wt <"); debug_print_unsigned(milliseconds / 1000);
 8000882:	4810      	ldr	r0, [pc, #64]	; (80008c4 <target_wait+0x50>)
 8000884:	f002 f81a 	bl	80028bc <debug_print>
 8000888:	480f      	ldr	r0, [pc, #60]	; (80008c8 <target_wait+0x54>)
 800088a:	fba0 3004 	umull	r3, r0, r0, r4
 800088e:	0980      	lsrs	r0, r0, #6
 8000890:	f002 f824 	bl	80028dc <debug_print_unsigned>
    uint32_t end = millis() + milliseconds;
 8000894:	f002 f994 	bl	8002bc0 <millis>
 8000898:	4404      	add	r4, r0
 800089a:	e000      	b.n	800089e <target_wait+0x2a>
        __asm("wfe");  //  Allow CPU to go to sleep.
 800089c:	bf20      	wfe
        if (millis() >= end) { break; }
 800089e:	f002 f98f 	bl	8002bc0 <millis>
 80008a2:	42a0      	cmp	r0, r4
 80008a4:	d206      	bcs.n	80008b4 <target_wait+0x40>
        if (os_running()) { os_schedule(); }  //  Schedule a cocoOS task to run.
 80008a6:	f001 fcb1 	bl	800220c <os_running>
 80008aa:	2800      	cmp	r0, #0
 80008ac:	d0f6      	beq.n	800089c <target_wait+0x28>
 80008ae:	f7ff ffab 	bl	8000808 <_ZL11os_schedulev>
 80008b2:	e7f3      	b.n	800089c <target_wait+0x28>
    debug_print("> ");
 80008b4:	4805      	ldr	r0, [pc, #20]	; (80008cc <target_wait+0x58>)
 80008b6:	f002 f801 	bl	80028bc <debug_print>
 80008ba:	e7e1      	b.n	8000880 <target_wait+0xc>
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000168 	.word	0x20000168
 80008c4:	08004698 	.word	0x08004698
 80008c8:	10624dd3 	.word	0x10624dd3
 80008cc:	080046a0 	.word	0x080046a0

080008d0 <target_wait_us>:
void target_wait_us(unsigned long microseconds) {
 80008d0:	b508      	push	{r3, lr}
    return target_wait(microseconds / 1000);
 80008d2:	4b03      	ldr	r3, [pc, #12]	; (80008e0 <target_wait_us+0x10>)
 80008d4:	fba3 3000 	umull	r3, r0, r3, r0
 80008d8:	0980      	lsrs	r0, r0, #6
 80008da:	f7ff ffcb 	bl	8000874 <target_wait>
}
 80008de:	bd08      	pop	{r3, pc}
 80008e0:	10624dd3 	.word	0x10624dd3

080008e4 <target_panic>:
void target_panic(int statusCode) {
 80008e4:	b508      	push	{r3, lr}
 80008e6:	4604      	mov	r4, r0
    target_disable_irq();
 80008e8:	f000 f85e 	bl	80009a8 <target_disable_irq>
	debug_print("*****target_panic ");
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <target_panic+0x1c>)
 80008ee:	f001 ffe5 	bl	80028bc <debug_print>
	debug_println((int) statusCode);
 80008f2:	4620      	mov	r0, r4
 80008f4:	f001 ffc4 	bl	8002880 <_Z13debug_printlni>
	debug_flush();
 80008f8:	f001 ffdb 	bl	80028b2 <debug_flush>
        __asm("wfe");  //  Allow CPU to go to sleep.
 80008fc:	bf20      	wfe
 80008fe:	e7fd      	b.n	80008fc <target_panic+0x18>
 8000900:	08004684 	.word	0x08004684

08000904 <fiber_initial_stack_base>:
}
 8000904:	4800      	ldr	r0, [pc, #0]	; (8000908 <fiber_initial_stack_base+0x4>)
 8000906:	4770      	bx	lr
 8000908:	20005000 	.word	0x20005000

0800090c <test_codal>:
void test_codal() {
 800090c:	b538      	push	{r3, r4, r5, lr}
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
 800090e:	4b15      	ldr	r3, [pc, #84]	; (8000964 <test_codal+0x58>)
 8000910:	681d      	ldr	r5, [r3, #0]
	PROCESSOR_WORD_TYPE size = end - start;
 8000912:	f1c5 5400 	rsb	r4, r5, #536870912	; 0x20000000
 8000916:	f504 4490 	add.w	r4, r4, #18432	; 0x4800
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
 800091a:	4813      	ldr	r0, [pc, #76]	; (8000968 <test_codal+0x5c>)
 800091c:	f001 ffce 	bl	80028bc <debug_print>
 8000920:	4628      	mov	r0, r5
 8000922:	f002 f817 	bl	8002954 <debug_printhex_unsigned>
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
 8000926:	4811      	ldr	r0, [pc, #68]	; (800096c <test_codal+0x60>)
 8000928:	f001 ffc8 	bl	80028bc <debug_print>
 800092c:	4810      	ldr	r0, [pc, #64]	; (8000970 <test_codal+0x64>)
 800092e:	f002 f811 	bl	8002954 <debug_printhex_unsigned>
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
 8000932:	4810      	ldr	r0, [pc, #64]	; (8000974 <test_codal+0x68>)
 8000934:	f001 ffc2 	bl	80028bc <debug_print>
 8000938:	0aa0      	lsrs	r0, r4, #10
 800093a:	f001 ff35 	bl	80027a8 <_Z11debug_printj>
	debug_print(" KB, stack used: "); debug_print((size_t) 
 800093e:	480e      	ldr	r0, [pc, #56]	; (8000978 <test_codal+0x6c>)
 8000940:	f001 ffbc 	bl	80028bc <debug_print>
        ((PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - get_current_sp()) >> 10);
 8000944:	f000 f83f 	bl	80009c6 <get_current_sp>
 8000948:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
 800094c:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
	debug_print(" KB, stack used: "); debug_print((size_t) 
 8000950:	0a80      	lsrs	r0, r0, #10
 8000952:	f001 ff29 	bl	80027a8 <_Z11debug_printj>
    debug_println(" KB"); debug_flush();
 8000956:	4809      	ldr	r0, [pc, #36]	; (800097c <test_codal+0x70>)
 8000958:	f001 ff84 	bl	8002864 <debug_println>
 800095c:	f001 ffa9 	bl	80028b2 <debug_flush>
}
 8000960:	bd38      	pop	{r3, r4, r5, pc}
 8000962:	bf00      	nop
 8000964:	20000004 	.word	0x20000004
 8000968:	080046a4 	.word	0x080046a4
 800096c:	080046b4 	.word	0x080046b4
 8000970:	20004800 	.word	0x20004800
 8000974:	080046bc 	.word	0x080046bc
 8000978:	080046c8 	.word	0x080046c8
 800097c:	080046dc 	.word	0x080046dc

08000980 <target_set_tick_callback>:
    tick_callback = tick_callback0;
 8000980:	4b01      	ldr	r3, [pc, #4]	; (8000988 <target_set_tick_callback+0x8>)
 8000982:	6018      	str	r0, [r3, #0]
}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000154 	.word	0x20000154

0800098c <target_set_alarm_callback>:
    alarm_callback = alarm_callback0;
 800098c:	4b01      	ldr	r3, [pc, #4]	; (8000994 <target_set_alarm_callback+0x8>)
 800098e:	6018      	str	r0, [r3, #0]
}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000158 	.word	0x20000158

08000998 <target_set_bootloader_callback>:
    bootloader_callback = bootloader_callback0;
 8000998:	4b01      	ldr	r3, [pc, #4]	; (80009a0 <target_set_bootloader_callback+0x8>)
 800099a:	6018      	str	r0, [r3, #0]
}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000160 	.word	0x20000160

080009a4 <target_enable_irq>:
 *
 * Disable the interrupt mask and enable interrupts globally
 */
static inline void cm_enable_interrupts(void)
{
	__asm__("CPSIE I\n");
 80009a4:	b662      	cpsie	i
}
 80009a6:	4770      	bx	lr

080009a8 <target_disable_irq>:
 *
 * Mask all interrupts globally
 */
static inline void cm_disable_interrupts(void)
{
	__asm__("CPSID I\n");
 80009a8:	b672      	cpsid	i
}
 80009aa:	4770      	bx	lr

080009ac <tcb_allocate>:
void *tcb_allocate() {
 80009ac:	b508      	push	{r3, lr}
    return (void *)malloc(sizeof(PROCESSOR_TCB));
 80009ae:	2040      	movs	r0, #64	; 0x40
 80009b0:	f006 feba 	bl	8007728 <device_malloc>
}
 80009b4:	bd08      	pop	{r3, pc}

080009b6 <tcb_configure_lr>:
    tcbPointer->LR = function;
 80009b6:	6381      	str	r1, [r0, #56]	; 0x38
}
 80009b8:	4770      	bx	lr

080009ba <tcb_configure_sp>:
    tcbPointer->SP = sp;
 80009ba:	6341      	str	r1, [r0, #52]	; 0x34
}
 80009bc:	4770      	bx	lr

080009be <tcb_configure_stack_base>:
    tcbPointer->stack_base = stack_base;
 80009be:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 80009c0:	4770      	bx	lr

080009c2 <tcb_get_stack_base>:
}
 80009c2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80009c4:	4770      	bx	lr

080009c6 <get_current_sp>:
}
 80009c6:	4668      	mov	r0, sp
 80009c8:	4770      	bx	lr

080009ca <tcb_get_sp>:
}
 80009ca:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80009cc:	4770      	bx	lr

080009ce <tcb_configure_args>:
    tcbPointer->R0 = (uint32_t)ep;
 80009ce:	6001      	str	r1, [r0, #0]
    tcbPointer->R1 = (uint32_t)cp;
 80009d0:	6042      	str	r2, [r0, #4]
    tcbPointer->R2 = (uint32_t)pm;
 80009d2:	6083      	str	r3, [r0, #8]
}
 80009d4:	4770      	bx	lr

080009d6 <_fini>:
    void _fini(void) { }
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_atexit>:
    }
 80009d8:	2000      	movs	r0, #0
 80009da:	4770      	bx	lr

080009dc <target_enable_debug>:
void target_enable_debug(void) {
 80009dc:	b508      	push	{r3, lr}
    enable_debug();   
 80009de:	f001 ffed 	bl	80029bc <enable_debug>
}
 80009e2:	bd08      	pop	{r3, pc}

080009e4 <swap_context>:

    @ Write our core registers into the TCB
    @ First, store the general registers

    @ Skip this is we're given a NULL parameter for the TCB
    CMP     R0, #0
 80009e4:	2800      	cmp	r0, #0
    BEQ     store_context_complete
 80009e6:	d015      	beq.n	8000a14 <store_context_complete>

    STR     R0, [R0,#0]
 80009e8:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 80009ea:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 80009ec:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 80009ee:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 80009f0:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 80009f2:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 80009f4:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 80009f6:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 80009f8:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 80009fa:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 80009fc:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 80009fe:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000a00:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000a02:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000a04:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000a06:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000a08:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000a0a:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 8000a0c:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8000a0e:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8000a10:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000a12:	6384      	str	r4, [r0, #56]	; 0x38

08000a14 <store_context_complete>:
store_context_complete:
    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stack is usually very small at the point
    @ of scheduling, but we need a lot of capacity for interrupt handling and other functions.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R1, #0
 8000a14:	2900      	cmp	r1, #0
    BEQ     store_stack_complete
 8000a16:	d006      	beq.n	8000a26 <store_stack_complete>

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 8000a18:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

08000a1a <store_stack>:
store_stack:
    SUBS    R4, #4
 8000a1a:	3c04      	subs	r4, #4
    SUBS    R1, #4
 8000a1c:	3904      	subs	r1, #4

    LDR     R5, [R4]
 8000a1e:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 8000a20:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 8000a22:	42b4      	cmp	r4, r6
    BNE     store_stack
 8000a24:	d1f9      	bne.n	8000a1a <store_stack>

08000a26 <store_stack_complete>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R2, #56]
 8000a26:	6b94      	ldr	r4, [r2, #56]	; 0x38
    MOV     LR, R4
 8000a28:	46a6      	mov	lr, r4
    LDR     R6, [R2, #52]
 8000a2a:	6b56      	ldr	r6, [r2, #52]	; 0x34
    MOV     SP, R6
 8000a2c:	46b5      	mov	sp, r6

    @ Copy the stack in.
    @ n.b. we do this after setting the SP to make comparisons easier.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R3, #0
 8000a2e:	2b00      	cmp	r3, #0
    BEQ     restore_stack_complete
 8000a30:	d006      	beq.n	8000a40 <restore_stack_complete>

    LDR     R4, [R2,#60]         @ Load R4 with the fiber's defined stack_base.
 8000a32:	6bd4      	ldr	r4, [r2, #60]	; 0x3c

08000a34 <restore_stack>:

restore_stack:
    SUBS    R4, #4
 8000a34:	3c04      	subs	r4, #4
    SUBS    R3, #4
 8000a36:	3b04      	subs	r3, #4

    LDR     R5, [R3]
 8000a38:	681d      	ldr	r5, [r3, #0]
    STR     R5, [R4]
 8000a3a:	6025      	str	r5, [r4, #0]

    CMP     R4, R6
 8000a3c:	42b4      	cmp	r4, r6
    BNE     restore_stack
 8000a3e:	d1f9      	bne.n	8000a34 <restore_stack>

08000a40 <restore_stack_complete>:

restore_stack_complete:
    LDR     R4, [R2, #48]
 8000a40:	6b14      	ldr	r4, [r2, #48]	; 0x30
    MOV     R12, R4
 8000a42:	46a4      	mov	ip, r4
    LDR     R4, [R2, #44]
 8000a44:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    MOV     R11, R4
 8000a46:	46a3      	mov	fp, r4
    LDR     R4, [R2, #40]
 8000a48:	6a94      	ldr	r4, [r2, #40]	; 0x28
    MOV     R10, R4
 8000a4a:	46a2      	mov	sl, r4
    LDR     R4, [R2, #36]
 8000a4c:	6a54      	ldr	r4, [r2, #36]	; 0x24
    MOV     R9, R4
 8000a4e:	46a1      	mov	r9, r4
    LDR     R4, [R2, #32]
 8000a50:	6a14      	ldr	r4, [r2, #32]
    MOV     R8, R4
 8000a52:	46a0      	mov	r8, r4

    LDR     R7, [R2, #28]
 8000a54:	69d7      	ldr	r7, [r2, #28]
    LDR     R6, [R2, #24]
 8000a56:	6996      	ldr	r6, [r2, #24]
    LDR     R5, [R2, #20]
 8000a58:	6955      	ldr	r5, [r2, #20]
    LDR     R4, [R2, #16]
 8000a5a:	6914      	ldr	r4, [r2, #16]
    LDR     R3, [R2, #12]
 8000a5c:	68d3      	ldr	r3, [r2, #12]
    LDR     R1, [R2, #4]
 8000a5e:	6851      	ldr	r1, [r2, #4]
    LDR     R0, [R2, #0]
 8000a60:	6810      	ldr	r0, [r2, #0]
    LDR     R2, [R2, #8]
 8000a62:	6892      	ldr	r2, [r2, #8]

    @ Return to caller (scheduler).
    BX      LR
 8000a64:	4770      	bx	lr

08000a66 <save_context>:
save_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 8000a66:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000a68:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000a6a:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000a6c:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000a6e:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000a70:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000a72:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000a74:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000a76:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000a78:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000a7a:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000a7c:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000a7e:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000a80:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000a82:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000a84:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000a86:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000a88:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 8000a8a:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8000a8c:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8000a8e:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000a90:	6384      	str	r4, [r0, #56]	; 0x38

    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stackis usually very small at the point
    @ of sceduling, but we need a lot of capacity for interrupt handling and other functions.

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 8000a92:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

08000a94 <store_stack1>:

store_stack1:
    SUBS    R4, #4
 8000a94:	3c04      	subs	r4, #4
    SUBS    R1, #4
 8000a96:	3904      	subs	r1, #4

    LDR     R5, [R4]
 8000a98:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 8000a9a:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 8000a9c:	42b4      	cmp	r4, r6
    BNE     store_stack1
 8000a9e:	d1f9      	bne.n	8000a94 <store_stack1>

    @ Restore scratch registers.

    LDR     R7, [R0, #28]
 8000aa0:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 8000aa2:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 8000aa4:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 8000aa6:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 8000aa8:	4770      	bx	lr

08000aaa <save_register_context>:
save_register_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 8000aaa:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8000aac:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8000aae:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8000ab0:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8000ab2:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8000ab4:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 8000ab6:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8000ab8:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8000aba:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8000abc:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8000abe:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8000ac0:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8000ac2:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8000ac4:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 8000ac6:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8000ac8:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8000aca:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8000acc:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack Pointer and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R4, SP
 8000ace:	466c      	mov	r4, sp
    STR     R4, [R0,#52]
 8000ad0:	6344      	str	r4, [r0, #52]	; 0x34
    MOV     R4, LR
 8000ad2:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8000ad4:	6384      	str	r4, [r0, #56]	; 0x38

    @ Restore scratch registers.
    LDR     R4, [R0, #16]
 8000ad6:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 8000ad8:	4770      	bx	lr

08000ada <restore_register_context>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R0, #56]
 8000ada:	6b84      	ldr	r4, [r0, #56]	; 0x38
    MOV     LR, R4
 8000adc:	46a6      	mov	lr, r4
    LDR     R4, [R0, #52]
 8000ade:	6b44      	ldr	r4, [r0, #52]	; 0x34
    MOV     SP, R4
 8000ae0:	46a5      	mov	sp, r4

    @ High registers...
    LDR     R4, [R0, #48]
 8000ae2:	6b04      	ldr	r4, [r0, #48]	; 0x30
    MOV     R12, R4
 8000ae4:	46a4      	mov	ip, r4
    LDR     R4, [R0, #44]
 8000ae6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    MOV     R11, R4
 8000ae8:	46a3      	mov	fp, r4
    LDR     R4, [R0, #40]
 8000aea:	6a84      	ldr	r4, [r0, #40]	; 0x28
    MOV     R10, R4
 8000aec:	46a2      	mov	sl, r4
    LDR     R4, [R0, #36]
 8000aee:	6a44      	ldr	r4, [r0, #36]	; 0x24
    MOV     R9, R4
 8000af0:	46a1      	mov	r9, r4
    LDR     R4, [R0, #32]
 8000af2:	6a04      	ldr	r4, [r0, #32]
    MOV     R8, R4
 8000af4:	46a0      	mov	r8, r4

    @ Low registers...
    LDR     R7, [R0, #28]
 8000af6:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 8000af8:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 8000afa:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 8000afc:	6904      	ldr	r4, [r0, #16]
    LDR     R3, [R0, #12]
 8000afe:	68c3      	ldr	r3, [r0, #12]
    LDR     R2, [R0, #8]
 8000b00:	6882      	ldr	r2, [r0, #8]
    LDR     R0, [R0, #0]
 8000b02:	6800      	ldr	r0, [r0, #0]
    LDR     R1, [R0, #4]
 8000b04:	6841      	ldr	r1, [r0, #4]

    @ Return to caller (normally the scheduler).
    BX      LR
 8000b06:	4770      	bx	lr

08000b08 <desig_get_unique_id>:
	return DESIG_FLASH_SIZE;
}

void desig_get_unique_id(uint32_t result[])
{
	result[0] = DESIG_UNIQUE_ID2;
 8000b08:	4b04      	ldr	r3, [pc, #16]	; (8000b1c <desig_get_unique_id+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6003      	str	r3, [r0, #0]
	result[1] = DESIG_UNIQUE_ID1;
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <desig_get_unique_id+0x18>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6043      	str	r3, [r0, #4]
	result[2] = DESIG_UNIQUE_ID0;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <desig_get_unique_id+0x1c>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	6083      	str	r3, [r0, #8]
}
 8000b1a:	4770      	bx	lr
 8000b1c:	1ffff7f0 	.word	0x1ffff7f0
 8000b20:	1ffff7ec 	.word	0x1ffff7ec
 8000b24:	1ffff7e8 	.word	0x1ffff7e8

08000b28 <desig_get_unique_id_as_string>:

void desig_get_unique_id_as_string(char *string,
				   unsigned int string_len)
{
 8000b28:	b570      	push	{r4, r5, r6, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	4604      	mov	r4, r0
 8000b2e:	460d      	mov	r5, r1
	int i, len;
	uint8_t device_id[12];
	static const char chars[] = "0123456789ABCDEF";

	desig_get_unique_id((uint32_t *)device_id);
 8000b30:	a801      	add	r0, sp, #4
 8000b32:	f7ff ffe9 	bl	8000b08 <desig_get_unique_id>

	/* Each byte produces two characters */
	len = (2 * sizeof(device_id) < string_len) ?
		2 * sizeof(device_id) : string_len - 1;
 8000b36:	2d19      	cmp	r5, #25
 8000b38:	bf28      	it	cs
 8000b3a:	2519      	movcs	r5, #25
 8000b3c:	1e69      	subs	r1, r5, #1
	len = (2 * sizeof(device_id) < string_len) ?
 8000b3e:	460e      	mov	r6, r1

	for (i = 0; i < len; i += 2) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	e010      	b.n	8000b66 <desig_get_unique_id_as_string+0x3e>
		string[i]     = chars[(device_id[i / 2] >> 4) & 0x0F];
 8000b44:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8000b48:	a804      	add	r0, sp, #16
 8000b4a:	eb00 0262 	add.w	r2, r0, r2, asr #1
 8000b4e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000b52:	0915      	lsrs	r5, r2, #4
 8000b54:	4807      	ldr	r0, [pc, #28]	; (8000b74 <desig_get_unique_id_as_string+0x4c>)
 8000b56:	5d45      	ldrb	r5, [r0, r5]
 8000b58:	54e5      	strb	r5, [r4, r3]
		string[i + 1] = chars[(device_id[i / 2] >> 0) & 0x0F];
 8000b5a:	f002 020f 	and.w	r2, r2, #15
 8000b5e:	1c5d      	adds	r5, r3, #1
 8000b60:	5c82      	ldrb	r2, [r0, r2]
 8000b62:	5562      	strb	r2, [r4, r5]
	for (i = 0; i < len; i += 2) {
 8000b64:	3302      	adds	r3, #2
 8000b66:	42b3      	cmp	r3, r6
 8000b68:	dbec      	blt.n	8000b44 <desig_get_unique_id_as_string+0x1c>
	}

	string[len] = '\0';
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	5463      	strb	r3, [r4, r1]
}
 8000b6e:	b004      	add	sp, #16
 8000b70:	bd70      	pop	{r4, r5, r6, pc}
 8000b72:	bf00      	nop
 8000b74:	080046e0 	.word	0x080046e0

08000b78 <rcc_wait_for_osc_ready>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
 8000b78:	2806      	cmp	r0, #6
 8000b7a:	d82e      	bhi.n	8000bda <rcc_wait_for_osc_ready+0x62>
 8000b7c:	e8df f000 	tbb	[pc, r0]
 8000b80:	16100a04 	.word	0x16100a04
 8000b84:	221c      	.short	0x221c
 8000b86:	28          	.byte	0x28
 8000b87:	00          	.byte	0x00
	case PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <rcc_wait_for_osc_ready+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b90:	d0fa      	beq.n	8000b88 <rcc_wait_for_osc_ready+0x10>
 8000b92:	4770      	bx	lr
		break;
	case PLL2:
		while ((RCC_CR & RCC_CR_PLL2RDY) == 0);
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <rcc_wait_for_osc_ready+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8000b9c:	d0fa      	beq.n	8000b94 <rcc_wait_for_osc_ready+0x1c>
 8000b9e:	4770      	bx	lr
		break;
	case PLL3:
		while ((RCC_CR & RCC_CR_PLL3RDY) == 0);
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <rcc_wait_for_osc_ready+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8000ba8:	d0fa      	beq.n	8000ba0 <rcc_wait_for_osc_ready+0x28>
 8000baa:	4770      	bx	lr
		break;
	case HSE:
		while ((RCC_CR & RCC_CR_HSERDY) == 0);
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <rcc_wait_for_osc_ready+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000bb4:	d0fa      	beq.n	8000bac <rcc_wait_for_osc_ready+0x34>
 8000bb6:	4770      	bx	lr
		break;
	case HSI:
		while ((RCC_CR & RCC_CR_HSIRDY) == 0);
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <rcc_wait_for_osc_ready+0x64>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f013 0f02 	tst.w	r3, #2
 8000bc0:	d0fa      	beq.n	8000bb8 <rcc_wait_for_osc_ready+0x40>
 8000bc2:	4770      	bx	lr
		break;
	case LSE:
		while ((RCC_BDCR & RCC_BDCR_LSERDY) == 0);
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <rcc_wait_for_osc_ready+0x68>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f013 0f02 	tst.w	r3, #2
 8000bcc:	d0fa      	beq.n	8000bc4 <rcc_wait_for_osc_ready+0x4c>
 8000bce:	4770      	bx	lr
		break;
	case LSI:
		while ((RCC_CSR & RCC_CSR_LSIRDY) == 0);
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <rcc_wait_for_osc_ready+0x6c>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f013 0f02 	tst.w	r3, #2
 8000bd8:	d0fa      	beq.n	8000bd0 <rcc_wait_for_osc_ready+0x58>
		break;
	}
}
 8000bda:	4770      	bx	lr
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40021020 	.word	0x40021020
 8000be4:	40021024 	.word	0x40021024

08000be8 <rcc_osc_on>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
 8000be8:	2806      	cmp	r0, #6
 8000bea:	d82e      	bhi.n	8000c4a <rcc_osc_on+0x62>
 8000bec:	e8df f000 	tbb	[pc, r0]
 8000bf0:	16100a04 	.word	0x16100a04
 8000bf4:	221c      	.short	0x221c
 8000bf6:	28          	.byte	0x28
 8000bf7:	00          	.byte	0x00
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <rcc_osc_on+0x64>)
 8000bfa:	6813      	ldr	r3, [r2, #0]
 8000bfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c00:	6013      	str	r3, [r2, #0]
		break;
 8000c02:	4770      	bx	lr
	case PLL2:
		RCC_CR |= RCC_CR_PLL2ON;
 8000c04:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <rcc_osc_on+0x64>)
 8000c06:	6813      	ldr	r3, [r2, #0]
 8000c08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c0c:	6013      	str	r3, [r2, #0]
		break;
 8000c0e:	4770      	bx	lr
	case PLL3:
		RCC_CR |= RCC_CR_PLL3ON;
 8000c10:	4a0e      	ldr	r2, [pc, #56]	; (8000c4c <rcc_osc_on+0x64>)
 8000c12:	6813      	ldr	r3, [r2, #0]
 8000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c18:	6013      	str	r3, [r2, #0]
		break;
 8000c1a:	4770      	bx	lr
	case HSE:
		RCC_CR |= RCC_CR_HSEON;
 8000c1c:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <rcc_osc_on+0x64>)
 8000c1e:	6813      	ldr	r3, [r2, #0]
 8000c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c24:	6013      	str	r3, [r2, #0]
		break;
 8000c26:	4770      	bx	lr
	case HSI:
		RCC_CR |= RCC_CR_HSION;
 8000c28:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <rcc_osc_on+0x64>)
 8000c2a:	6813      	ldr	r3, [r2, #0]
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6013      	str	r3, [r2, #0]
		break;
 8000c32:	4770      	bx	lr
	case LSE:
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <rcc_osc_on+0x68>)
 8000c36:	6813      	ldr	r3, [r2, #0]
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6013      	str	r3, [r2, #0]
		break;
 8000c3e:	4770      	bx	lr
	case LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <rcc_osc_on+0x6c>)
 8000c42:	6813      	ldr	r3, [r2, #0]
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40021020 	.word	0x40021020
 8000c54:	40021024 	.word	0x40021024

08000c58 <rcc_set_sysclk_source>:
@param[in] clk Unsigned int32. System Clock Selection @ref rcc_cfgr_scs
*/

void rcc_set_sysclk_source(uint32_t clk)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8000c58:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <rcc_set_sysclk_source+0x10>)
 8000c5a:	6813      	ldr	r3, [r2, #0]
 8000c5c:	f023 0303 	bic.w	r3, r3, #3
 8000c60:	4318      	orrs	r0, r3
 8000c62:	6010      	str	r0, [r2, #0]
			(clk << RCC_CFGR_SW_SHIFT);
}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40021004 	.word	0x40021004

08000c6c <rcc_set_pll_multiplication_factor>:
@param[in] mul Unsigned int32. PLL multiplication factor @ref rcc_cfgr_pmf
*/

void rcc_set_pll_multiplication_factor(uint32_t mul)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) |
 8000c6c:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <rcc_set_pll_multiplication_factor+0x10>)
 8000c6e:	6813      	ldr	r3, [r2, #0]
 8000c70:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000c74:	ea43 4080 	orr.w	r0, r3, r0, lsl #18
 8000c78:	6010      	str	r0, [r2, #0]
			(mul << RCC_CFGR_PLLMUL_SHIFT);
}
 8000c7a:	4770      	bx	lr
 8000c7c:	40021004 	.word	0x40021004

08000c80 <rcc_set_pll_source>:
@param[in] pllsrc Unsigned int32. PLL clock source @ref rcc_cfgr_pcs
*/

void rcc_set_pll_source(uint32_t pllsrc)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 8000c80:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <rcc_set_pll_source+0x10>)
 8000c82:	6813      	ldr	r3, [r2, #0]
 8000c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c88:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c8c:	6010      	str	r0, [r2, #0]
			(pllsrc << 16);
}
 8000c8e:	4770      	bx	lr
 8000c90:	40021004 	.word	0x40021004

08000c94 <rcc_set_pllxtpre>:
@param[in] pllxtpre Unsigned int32. HSE division factor @ref rcc_cfgr_hsepre
*/

void rcc_set_pllxtpre(uint32_t pllxtpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <rcc_set_pllxtpre+0x10>)
 8000c96:	6813      	ldr	r3, [r2, #0]
 8000c98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c9c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
 8000ca0:	6010      	str	r0, [r2, #0]
			(pllxtpre << 17);
}
 8000ca2:	4770      	bx	lr
 8000ca4:	40021004 	.word	0x40021004

08000ca8 <rcc_enable_rtc_clock>:

*/

void rcc_enable_rtc_clock(void)
{
	RCC_BDCR |= RCC_BDCR_RTCEN;
 8000ca8:	4a02      	ldr	r2, [pc, #8]	; (8000cb4 <rcc_enable_rtc_clock+0xc>)
 8000caa:	6813      	ldr	r3, [r2, #0]
 8000cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cb0:	6013      	str	r3, [r2, #0]
}
 8000cb2:	4770      	bx	lr
 8000cb4:	40021020 	.word	0x40021020

08000cb8 <rcc_set_rtc_clock_source>:

void rcc_set_rtc_clock_source(enum rcc_osc clock_source)
{
	uint32_t reg32;

	switch (clock_source) {
 8000cb8:	2806      	cmp	r0, #6
 8000cba:	d846      	bhi.n	8000d4a <rcc_set_rtc_clock_source+0x92>
 8000cbc:	e8df f000 	tbb	[pc, r0]
 8000cc0:	2c404040 	.word	0x2c404040
 8000cc4:	0440      	.short	0x0440
 8000cc6:	18          	.byte	0x18
 8000cc7:	00          	.byte	0x00
	case LSE:
		/* Turn the LSE on and wait while it stabilises. */
		RCC_BDCR |= RCC_BDCR_LSEON;
 8000cc8:	4a20      	ldr	r2, [pc, #128]	; (8000d4c <rcc_set_rtc_clock_source+0x94>)
 8000cca:	6813      	ldr	r3, [r2, #0]
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6013      	str	r3, [r2, #0]
		while ((reg32 = (RCC_BDCR & RCC_BDCR_LSERDY)) == 0);
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <rcc_set_rtc_clock_source+0x94>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f013 0f02 	tst.w	r3, #2
 8000cda:	d0fa      	beq.n	8000cd2 <rcc_set_rtc_clock_source+0x1a>

		/* Choose LSE as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000cdc:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <rcc_set_rtc_clock_source+0x94>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ce4:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 8);
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cec:	601a      	str	r2, [r3, #0]
		break;
 8000cee:	4770      	bx	lr
	case LSI:
		/* Turn the LSI on and wait while it stabilises. */
		RCC_CSR |= RCC_CSR_LSION;
 8000cf0:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <rcc_set_rtc_clock_source+0x98>)
 8000cf2:	6813      	ldr	r3, [r2, #0]
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6013      	str	r3, [r2, #0]
		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <rcc_set_rtc_clock_source+0x98>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f013 0f02 	tst.w	r3, #2
 8000d02:	d0fa      	beq.n	8000cfa <rcc_set_rtc_clock_source+0x42>

		/* Choose LSI as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <rcc_set_rtc_clock_source+0x94>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d0c:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9);
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d14:	601a      	str	r2, [r3, #0]
		break;
 8000d16:	4770      	bx	lr
	case HSE:
		/* Turn the HSE on and wait while it stabilises. */
		RCC_CR |= RCC_CR_HSEON;
 8000d18:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <rcc_set_rtc_clock_source+0x9c>)
 8000d1a:	6813      	ldr	r3, [r2, #0]
 8000d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d20:	6013      	str	r3, [r2, #0]
		while ((reg32 = (RCC_CR & RCC_CR_HSERDY)) == 0);
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <rcc_set_rtc_clock_source+0x9c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000d2a:	d0fa      	beq.n	8000d22 <rcc_set_rtc_clock_source+0x6a>

		/* Choose HSE as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <rcc_set_rtc_clock_source+0x94>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d34:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9) | (1 << 8);
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8000d3c:	601a      	str	r2, [r3, #0]
		break;
 8000d3e:	4770      	bx	lr
	case PLL2:
	case PLL3:
	case HSI:
		/* Unusable clock source, here to prevent warnings. */
		/* Turn off clock sources to RTC. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8000d40:	4a02      	ldr	r2, [pc, #8]	; (8000d4c <rcc_set_rtc_clock_source+0x94>)
 8000d42:	6813      	ldr	r3, [r2, #0]
 8000d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d48:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000d4a:	4770      	bx	lr
 8000d4c:	40021020 	.word	0x40021020
 8000d50:	40021024 	.word	0x40021024
 8000d54:	40021000 	.word	0x40021000

08000d58 <rcc_set_adcpre>:
@param[in] adcpre uint32_t. Prescale divider taken from @ref rcc_cfgr_adcpre
*/

void rcc_set_adcpre(uint32_t adcpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_ADCPRE) |
 8000d58:	4a03      	ldr	r2, [pc, #12]	; (8000d68 <rcc_set_adcpre+0x10>)
 8000d5a:	6813      	ldr	r3, [r2, #0]
 8000d5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d60:	ea43 3080 	orr.w	r0, r3, r0, lsl #14
 8000d64:	6010      	str	r0, [r2, #0]
			(adcpre << RCC_CFGR_ADCPRE_SHIFT);
}
 8000d66:	4770      	bx	lr
 8000d68:	40021004 	.word	0x40021004

08000d6c <rcc_set_ppre2>:
@param[in] ppre2 Unsigned int32. APB2 prescale factor @ref rcc_cfgr_apb2pre
*/

void rcc_set_ppre2(uint32_t ppre2)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE2) |
 8000d6c:	4a03      	ldr	r2, [pc, #12]	; (8000d7c <rcc_set_ppre2+0x10>)
 8000d6e:	6813      	ldr	r3, [r2, #0]
 8000d70:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d74:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 8000d78:	6010      	str	r0, [r2, #0]
			(ppre2 << RCC_CFGR_PPRE2_SHIFT);
}
 8000d7a:	4770      	bx	lr
 8000d7c:	40021004 	.word	0x40021004

08000d80 <rcc_set_ppre1>:
@param[in] ppre1 Unsigned int32. APB1 prescale factor @ref rcc_cfgr_apb1pre
*/

void rcc_set_ppre1(uint32_t ppre1)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE1) |
 8000d80:	4a03      	ldr	r2, [pc, #12]	; (8000d90 <rcc_set_ppre1+0x10>)
 8000d82:	6813      	ldr	r3, [r2, #0]
 8000d84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d88:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8000d8c:	6010      	str	r0, [r2, #0]
			(ppre1 << RCC_CFGR_PPRE1_SHIFT);

}
 8000d8e:	4770      	bx	lr
 8000d90:	40021004 	.word	0x40021004

08000d94 <rcc_set_hpre>:
@param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
*/

void rcc_set_hpre(uint32_t hpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) |
 8000d94:	4a03      	ldr	r2, [pc, #12]	; (8000da4 <rcc_set_hpre+0x10>)
 8000d96:	6813      	ldr	r3, [r2, #0]
 8000d98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d9c:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 8000da0:	6010      	str	r0, [r2, #0]
			(hpre << RCC_CFGR_HPRE_SHIFT);

}
 8000da2:	4770      	bx	lr
 8000da4:	40021004 	.word	0x40021004

08000da8 <rcc_clock_setup_in_hse_8mhz_out_72mhz>:
/** @brief RCC Set System Clock PLL at 72MHz from HSE at 8MHz

*/

void rcc_clock_setup_in_hse_8mhz_out_72mhz(void)
{
 8000da8:	b508      	push	{r3, lr}
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(HSI);
 8000daa:	2004      	movs	r0, #4
 8000dac:	f7ff ff1c 	bl	8000be8 <rcc_osc_on>
	rcc_wait_for_osc_ready(HSI);
 8000db0:	2004      	movs	r0, #4
 8000db2:	f7ff fee1 	bl	8000b78 <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f7ff ff4e 	bl	8000c58 <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(HSE);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f7ff ff13 	bl	8000be8 <rcc_osc_on>
	rcc_wait_for_osc_ready(HSE);
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	f7ff fed8 	bl	8000b78 <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSECLK);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff ff45 	bl	8000c58 <rcc_set_sysclk_source>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(RCC_CFGR_HPRE_SYSCLK_NODIV);    /* Set. 72MHz Max. 72MHz */
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff ffe0 	bl	8000d94 <rcc_set_hpre>
	rcc_set_adcpre(RCC_CFGR_ADCPRE_PCLK2_DIV8);  /* Set.  9MHz Max. 14MHz */
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f7ff ffbf 	bl	8000d58 <rcc_set_adcpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_HCLK_DIV2);     /* Set. 36MHz Max. 36MHz */
 8000dda:	2004      	movs	r0, #4
 8000ddc:	f7ff ffd0 	bl	8000d80 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_HCLK_NODIV);    /* Set. 72MHz Max. 72MHz */
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff ffc3 	bl	8000d6c <rcc_set_ppre2>
	 * Sysclk runs with 72MHz -> 2 waitstates.
	 * 0WS from 0-24MHz
	 * 1WS from 24-48MHz
	 * 2WS from 48-72MHz
	 */
	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 8000de6:	2002      	movs	r0, #2
 8000de8:	f000 f93e 	bl	8001068 <flash_set_ws>

	/*
	 * Set the PLL multiplication factor to 9.
	 * 8MHz (external) * 9 (multiplier) = 72MHz
	 */
	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL9);
 8000dec:	2007      	movs	r0, #7
 8000dee:	f7ff ff3d 	bl	8000c6c <rcc_set_pll_multiplication_factor>

	/* Select HSE as PLL source. */
	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f7ff ff44 	bl	8000c80 <rcc_set_pll_source>

	/*
	 * External frequency undivided before entering PLL
	 * (only valid/needed for HSE).
	 */
	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff ff4b 	bl	8000c94 <rcc_set_pllxtpre>

	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(PLL);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff fef2 	bl	8000be8 <rcc_osc_on>
	rcc_wait_for_osc_ready(PLL);
 8000e04:	2000      	movs	r0, #0
 8000e06:	f7ff feb7 	bl	8000b78 <rcc_wait_for_osc_ready>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 8000e0a:	2002      	movs	r0, #2
 8000e0c:	f7ff ff24 	bl	8000c58 <rcc_set_sysclk_source>

	/* Set the peripheral clock frequencies used */
	rcc_ahb_frequency = 72000000;
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x7c>)
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x80>)
 8000e14:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 36000000;
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x84>)
 8000e18:	4905      	ldr	r1, [pc, #20]	; (8000e30 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x88>)
 8000e1a:	6011      	str	r1, [r2, #0]
	rcc_apb2_frequency = 72000000;
 8000e1c:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x8c>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bd08      	pop	{r3, pc}
 8000e22:	bf00      	nop
 8000e24:	044aa200 	.word	0x044aa200
 8000e28:	20000008 	.word	0x20000008
 8000e2c:	2000000c 	.word	0x2000000c
 8000e30:	02255100 	.word	0x02255100
 8000e34:	20000010 	.word	0x20000010

08000e38 <rtc_enter_config_mode>:
Prime the RTC for configuration changes by giving access to the prescaler,
and counter and alarm registers.
*/

void rtc_enter_config_mode(void)
{
 8000e38:	b082      	sub	sp, #8
	volatile uint32_t reg32;  ////  Added volatile.

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <rtc_enter_config_mode+0x20>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f003 0320 	and.w	r3, r3, #32
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f8      	beq.n	8000e3a <rtc_enter_config_mode+0x2>

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8000e48:	4a03      	ldr	r2, [pc, #12]	; (8000e58 <rtc_enter_config_mode+0x20>)
 8000e4a:	6813      	ldr	r3, [r2, #0]
 8000e4c:	f043 0310 	orr.w	r3, r3, #16
 8000e50:	6013      	str	r3, [r2, #0]
}
 8000e52:	b002      	add	sp, #8
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40002804 	.word	0x40002804

08000e5c <rtc_exit_config_mode>:

Revert the RTC to operational state.
*/

void rtc_exit_config_mode(void)
{
 8000e5c:	b082      	sub	sp, #8
	volatile uint32_t reg32;  ////  Added volatile.

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8000e5e:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <rtc_exit_config_mode+0x20>)
 8000e60:	6813      	ldr	r3, [r2, #0]
 8000e62:	f023 0310 	bic.w	r3, r3, #16
 8000e66:	6013      	str	r3, [r2, #0]

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <rtc_exit_config_mode+0x20>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0320 	and.w	r3, r3, #32
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f8      	beq.n	8000e68 <rtc_exit_config_mode+0xc>
}
 8000e76:	b002      	add	sp, #8
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40002804 	.word	0x40002804

08000e80 <rtc_set_alarm_time>:

@param[in] alarm_time uint32_t. time at which the alarm event is triggered.
*/

void rtc_set_alarm_time(uint32_t alarm_time)
{
 8000e80:	b510      	push	{r4, lr}
 8000e82:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 8000e84:	f7ff ffd8 	bl	8000e38 <rtc_enter_config_mode>
	RTC_ALRL = (alarm_time & 0x0000ffff);
 8000e88:	b2a2      	uxth	r2, r4
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <rtc_set_alarm_time+0x1c>)
 8000e8c:	601a      	str	r2, [r3, #0]
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 8000e8e:	0c24      	lsrs	r4, r4, #16
 8000e90:	3b04      	subs	r3, #4
 8000e92:	601c      	str	r4, [r3, #0]
	rtc_exit_config_mode();
 8000e94:	f7ff ffe2 	bl	8000e5c <rtc_exit_config_mode>
}
 8000e98:	bd10      	pop	{r4, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40002824 	.word	0x40002824

08000ea0 <rtc_set_prescale_val>:

@param[in] prescale_val uint32_t. 20 bit prescale divider.
*/

void rtc_set_prescale_val(uint32_t prescale_val)
{
 8000ea0:	b510      	push	{r4, lr}
 8000ea2:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 8000ea4:	f7ff ffc8 	bl	8000e38 <rtc_enter_config_mode>
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 8000ea8:	b2a2      	uxth	r2, r4
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <rtc_set_prescale_val+0x1c>)
 8000eac:	601a      	str	r2, [r3, #0]
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 8000eae:	f3c4 4403 	ubfx	r4, r4, #16, #4
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	601c      	str	r4, [r3, #0]
	rtc_exit_config_mode();
 8000eb6:	f7ff ffd1 	bl	8000e5c <rtc_exit_config_mode>
}
 8000eba:	bd10      	pop	{r4, pc}
 8000ebc:	4000280c 	.word	0x4000280c

08000ec0 <rtc_get_counter_val>:
@returns uint32_t: the 32 bit counter value.
*/

uint32_t rtc_get_counter_val(void)
{
	return (RTC_CNTH << 16) | RTC_CNTL;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <rtc_get_counter_val+0x10>)
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40002818 	.word	0x40002818

08000ed4 <rtc_set_counter_val>:

@param[in] uint32_t counter_val: 32 bit time setting for the counter.
*/

void rtc_set_counter_val(uint32_t counter_val)
{
 8000ed4:	b510      	push	{r4, lr}
 8000ed6:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 8000ed8:	f7ff ffae 	bl	8000e38 <rtc_enter_config_mode>
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8000edc:	0c22      	lsrs	r2, r4, #16
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <rtc_set_counter_val+0x1c>)
 8000ee0:	601a      	str	r2, [r3, #0]
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 8000ee2:	b2a4      	uxth	r4, r4
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	601c      	str	r4, [r3, #0]
	rtc_exit_config_mode();
 8000ee8:	f7ff ffb8 	bl	8000e5c <rtc_exit_config_mode>
}
 8000eec:	bd10      	pop	{r4, pc}
 8000eee:	bf00      	nop
 8000ef0:	40002818 	.word	0x40002818

08000ef4 <rtc_interrupt_enable>:

@param[in] flag_val ::rtcflag_t: The flag to enable.
*/

void rtc_interrupt_enable(rtcflag_t flag_val)
{
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 8000ef8:	f7ff ff9e 	bl	8000e38 <rtc_enter_config_mode>

	/* Set the correct interrupt enable. */
	switch (flag_val) {
 8000efc:	2c01      	cmp	r4, #1
 8000efe:	d00b      	beq.n	8000f18 <rtc_interrupt_enable+0x24>
 8000f00:	b124      	cbz	r4, 8000f0c <rtc_interrupt_enable+0x18>
 8000f02:	2c02      	cmp	r4, #2
 8000f04:	d00e      	beq.n	8000f24 <rtc_interrupt_enable+0x30>
	case RTC_OW:
		RTC_CRH |= RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
 8000f06:	f7ff ffa9 	bl	8000e5c <rtc_exit_config_mode>
}
 8000f0a:	bd10      	pop	{r4, pc}
		RTC_CRH |= RTC_CRH_SECIE;
 8000f0c:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <rtc_interrupt_enable+0x3c>)
 8000f0e:	6813      	ldr	r3, [r2, #0]
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6013      	str	r3, [r2, #0]
		break;
 8000f16:	e7f6      	b.n	8000f06 <rtc_interrupt_enable+0x12>
		RTC_CRH |= RTC_CRH_ALRIE;
 8000f18:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <rtc_interrupt_enable+0x3c>)
 8000f1a:	6813      	ldr	r3, [r2, #0]
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6013      	str	r3, [r2, #0]
		break;
 8000f22:	e7f0      	b.n	8000f06 <rtc_interrupt_enable+0x12>
		RTC_CRH |= RTC_CRH_OWIE;
 8000f24:	4a02      	ldr	r2, [pc, #8]	; (8000f30 <rtc_interrupt_enable+0x3c>)
 8000f26:	6813      	ldr	r3, [r2, #0]
 8000f28:	f043 0304 	orr.w	r3, r3, #4
 8000f2c:	6013      	str	r3, [r2, #0]
		break;
 8000f2e:	e7ea      	b.n	8000f06 <rtc_interrupt_enable+0x12>
 8000f30:	40002800 	.word	0x40002800

08000f34 <rtc_interrupt_disable>:

@param[in] flag_val ::rtcflag_t: The flag to disable.
*/

void rtc_interrupt_disable(rtcflag_t flag_val)
{
 8000f34:	b510      	push	{r4, lr}
 8000f36:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 8000f38:	f7ff ff7e 	bl	8000e38 <rtc_enter_config_mode>

	/* Disable the correct interrupt enable. */
	switch (flag_val) {
 8000f3c:	2c01      	cmp	r4, #1
 8000f3e:	d00b      	beq.n	8000f58 <rtc_interrupt_disable+0x24>
 8000f40:	b124      	cbz	r4, 8000f4c <rtc_interrupt_disable+0x18>
 8000f42:	2c02      	cmp	r4, #2
 8000f44:	d00e      	beq.n	8000f64 <rtc_interrupt_disable+0x30>
	case RTC_OW:
		RTC_CRH &= ~RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
 8000f46:	f7ff ff89 	bl	8000e5c <rtc_exit_config_mode>
}
 8000f4a:	bd10      	pop	{r4, pc}
		RTC_CRH &= ~RTC_CRH_SECIE;
 8000f4c:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <rtc_interrupt_disable+0x3c>)
 8000f4e:	6813      	ldr	r3, [r2, #0]
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	6013      	str	r3, [r2, #0]
		break;
 8000f56:	e7f6      	b.n	8000f46 <rtc_interrupt_disable+0x12>
		RTC_CRH &= ~RTC_CRH_ALRIE;
 8000f58:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <rtc_interrupt_disable+0x3c>)
 8000f5a:	6813      	ldr	r3, [r2, #0]
 8000f5c:	f023 0302 	bic.w	r3, r3, #2
 8000f60:	6013      	str	r3, [r2, #0]
		break;
 8000f62:	e7f0      	b.n	8000f46 <rtc_interrupt_disable+0x12>
		RTC_CRH &= ~RTC_CRH_OWIE;
 8000f64:	4a02      	ldr	r2, [pc, #8]	; (8000f70 <rtc_interrupt_disable+0x3c>)
 8000f66:	6813      	ldr	r3, [r2, #0]
 8000f68:	f023 0304 	bic.w	r3, r3, #4
 8000f6c:	6013      	str	r3, [r2, #0]
		break;
 8000f6e:	e7ea      	b.n	8000f46 <rtc_interrupt_disable+0x12>
 8000f70:	40002800 	.word	0x40002800

08000f74 <rtc_clear_flag>:
void rtc_clear_flag(rtcflag_t flag_val)
{
	/* Configuration mode not needed. */

	/* Clear the correct flag. */
	switch (flag_val) {
 8000f74:	2801      	cmp	r0, #1
 8000f76:	d009      	beq.n	8000f8c <rtc_clear_flag+0x18>
 8000f78:	b110      	cbz	r0, 8000f80 <rtc_clear_flag+0xc>
 8000f7a:	2802      	cmp	r0, #2
 8000f7c:	d00c      	beq.n	8000f98 <rtc_clear_flag+0x24>
 8000f7e:	4770      	bx	lr
	case RTC_SEC:
		RTC_CRL &= ~RTC_CRL_SECF;
 8000f80:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <rtc_clear_flag+0x30>)
 8000f82:	6813      	ldr	r3, [r2, #0]
 8000f84:	f023 0301 	bic.w	r3, r3, #1
 8000f88:	6013      	str	r3, [r2, #0]
		break;
 8000f8a:	4770      	bx	lr
	case RTC_ALR:
		RTC_CRL &= ~RTC_CRL_ALRF;
 8000f8c:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <rtc_clear_flag+0x30>)
 8000f8e:	6813      	ldr	r3, [r2, #0]
 8000f90:	f023 0302 	bic.w	r3, r3, #2
 8000f94:	6013      	str	r3, [r2, #0]
		break;
 8000f96:	4770      	bx	lr
	case RTC_OW:
		RTC_CRL &= ~RTC_CRL_OWF;
 8000f98:	4a02      	ldr	r2, [pc, #8]	; (8000fa4 <rtc_clear_flag+0x30>)
 8000f9a:	6813      	ldr	r3, [r2, #0]
 8000f9c:	f023 0304 	bic.w	r3, r3, #4
 8000fa0:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8000fa2:	4770      	bx	lr
 8000fa4:	40002804 	.word	0x40002804

08000fa8 <rtc_check_flag>:
uint32_t rtc_check_flag(rtcflag_t flag_val)
{
	uint32_t reg32;

	/* Read correct flag. */
	switch (flag_val) {
 8000fa8:	2801      	cmp	r0, #1
 8000faa:	d009      	beq.n	8000fc0 <rtc_check_flag+0x18>
 8000fac:	b118      	cbz	r0, 8000fb6 <rtc_check_flag+0xe>
 8000fae:	2802      	cmp	r0, #2
 8000fb0:	d00b      	beq.n	8000fca <rtc_check_flag+0x22>
		break;
	case RTC_OW:
		reg32 = RTC_CRL & RTC_CRL_OWF;
		break;
	default:
		reg32 = 0;
 8000fb2:	2000      	movs	r0, #0
		break;
	}

	return reg32;
}
 8000fb4:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_SECF;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <rtc_check_flag+0x2c>)
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	f000 0001 	and.w	r0, r0, #1
		break;
 8000fbe:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_ALRF;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <rtc_check_flag+0x2c>)
 8000fc2:	6818      	ldr	r0, [r3, #0]
 8000fc4:	f000 0002 	and.w	r0, r0, #2
		break;
 8000fc8:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_OWF;
 8000fca:	4b02      	ldr	r3, [pc, #8]	; (8000fd4 <rtc_check_flag+0x2c>)
 8000fcc:	6818      	ldr	r0, [r3, #0]
 8000fce:	f000 0004 	and.w	r0, r0, #4
		break;
 8000fd2:	4770      	bx	lr
 8000fd4:	40002804 	.word	0x40002804

08000fd8 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8000fd8:	4a02      	ldr	r2, [pc, #8]	; (8000fe4 <pwr_disable_backup_domain_write_protect+0xc>)
 8000fda:	6813      	ldr	r3, [r2, #0]
 8000fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	4770      	bx	lr
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <pwr_enable_backup_domain_write_protect>:
This protects backup domain registers from inadvertent change.
*/

void pwr_enable_backup_domain_write_protect(void)
{
	PWR_CR &= ~PWR_CR_DBP;
 8000fe8:	4a02      	ldr	r2, [pc, #8]	; (8000ff4 <pwr_enable_backup_domain_write_protect+0xc>)
 8000fea:	6813      	ldr	r3, [r2, #0]
 8000fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ff0:	6013      	str	r3, [r2, #0]
}
 8000ff2:	4770      	bx	lr
 8000ff4:	40007000 	.word	0x40007000

08000ff8 <exti_set_trigger>:
#       include <libopencm3/stm32/syscfg.h>
#endif

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
 8000ff8:	2901      	cmp	r1, #1
 8000ffa:	d00d      	beq.n	8001018 <exti_set_trigger+0x20>
 8000ffc:	b111      	cbz	r1, 8001004 <exti_set_trigger+0xc>
 8000ffe:	2902      	cmp	r1, #2
 8001000:	d014      	beq.n	800102c <exti_set_trigger+0x34>
 8001002:	4770      	bx	lr
	case EXTI_TRIGGER_RISING:
		EXTI_RTSR |= extis;
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <exti_set_trigger+0x48>)
 8001006:	6813      	ldr	r3, [r2, #0]
 8001008:	4303      	orrs	r3, r0
 800100a:	6013      	str	r3, [r2, #0]
		EXTI_FTSR &= ~extis;
 800100c:	3204      	adds	r2, #4
 800100e:	6813      	ldr	r3, [r2, #0]
 8001010:	ea23 0000 	bic.w	r0, r3, r0
 8001014:	6010      	str	r0, [r2, #0]
		break;
 8001016:	4770      	bx	lr
	case EXTI_TRIGGER_FALLING:
		EXTI_RTSR &= ~extis;
 8001018:	4a09      	ldr	r2, [pc, #36]	; (8001040 <exti_set_trigger+0x48>)
 800101a:	6813      	ldr	r3, [r2, #0]
 800101c:	ea23 0300 	bic.w	r3, r3, r0
 8001020:	6013      	str	r3, [r2, #0]
		EXTI_FTSR |= extis;
 8001022:	3204      	adds	r2, #4
 8001024:	6813      	ldr	r3, [r2, #0]
 8001026:	4318      	orrs	r0, r3
 8001028:	6010      	str	r0, [r2, #0]
		break;
 800102a:	4770      	bx	lr
	case EXTI_TRIGGER_BOTH:
		EXTI_RTSR |= extis;
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <exti_set_trigger+0x48>)
 800102e:	6813      	ldr	r3, [r2, #0]
 8001030:	4303      	orrs	r3, r0
 8001032:	6013      	str	r3, [r2, #0]
		EXTI_FTSR |= extis;
 8001034:	3204      	adds	r2, #4
 8001036:	6813      	ldr	r3, [r2, #0]
 8001038:	4318      	orrs	r0, r3
 800103a:	6010      	str	r0, [r2, #0]
		break;
	}
}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40010408 	.word	0x40010408

08001044 <exti_enable_request>:

void exti_enable_request(uint32_t extis)
{
	/* Enable interrupts. */
	EXTI_IMR |= extis;
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <exti_enable_request+0x14>)
 8001046:	6813      	ldr	r3, [r2, #0]
 8001048:	4303      	orrs	r3, r0
 800104a:	6013      	str	r3, [r2, #0]

	/* Enable events. */
	EXTI_EMR |= extis;
 800104c:	3204      	adds	r2, #4
 800104e:	6813      	ldr	r3, [r2, #0]
 8001050:	4318      	orrs	r0, r3
 8001052:	6010      	str	r0, [r2, #0]
}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40010400 	.word	0x40010400

0800105c <exti_reset_request>:
 * Reset the interrupt request by writing a 1 to the corresponding
 * pending bit register.
 */
void exti_reset_request(uint32_t extis)
{
	EXTI_PR = extis;
 800105c:	4b01      	ldr	r3, [pc, #4]	; (8001064 <exti_reset_request+0x8>)
 800105e:	6018      	str	r0, [r3, #0]
}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40010414 	.word	0x40010414

08001068 <flash_set_ws>:
@param[in] uint32_t ws: values from @ref flash_latency.
*/

void flash_set_ws(uint32_t ws)
{
	FLASH_ACR = (FLASH_ACR & ~FLASH_ACR_LATENCY) | ws;
 8001068:	4a03      	ldr	r2, [pc, #12]	; (8001078 <flash_set_ws+0x10>)
 800106a:	6813      	ldr	r3, [r2, #0]
 800106c:	f023 0307 	bic.w	r3, r3, #7
 8001070:	4318      	orrs	r0, r3
 8001072:	6010      	str	r0, [r2, #0]
}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40022000 	.word	0x40022000

0800107c <usbd_init>:
usbd_device *usbd_init(const usbd_driver *driver,
		       const struct usb_device_descriptor *dev,
		       const struct usb_config_descriptor *conf,
		       const char **strings, int num_strings,
		       uint8_t *control_buffer, uint16_t control_buffer_size)
{
 800107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800107e:	4604      	mov	r4, r0
 8001080:	460f      	mov	r7, r1
 8001082:	4616      	mov	r6, r2
 8001084:	461d      	mov	r5, r3
	usbd_device *usbd_dev;

	usbd_dev = driver->init();
 8001086:	6803      	ldr	r3, [r0, #0]
 8001088:	4798      	blx	r3

	usbd_dev->driver = driver;
 800108a:	f8c0 40d8 	str.w	r4, [r0, #216]	; 0xd8
	usbd_dev->desc = dev;
 800108e:	6007      	str	r7, [r0, #0]
	usbd_dev->config = conf;
 8001090:	6046      	str	r6, [r0, #4]
	usbd_dev->strings = strings;
 8001092:	6085      	str	r5, [r0, #8]
	usbd_dev->num_strings = num_strings;
 8001094:	9b06      	ldr	r3, [sp, #24]
 8001096:	60c3      	str	r3, [r0, #12]
	usbd_dev->ctrl_buf = control_buffer;
 8001098:	9b07      	ldr	r3, [sp, #28]
 800109a:	6103      	str	r3, [r0, #16]
	usbd_dev->ctrl_buf_len = control_buffer_size;
 800109c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80010a0:	8283      	strh	r3, [r0, #20]

	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_SETUP] =
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <usbd_init+0x4c>)
 80010a4:	66c3      	str	r3, [r0, #108]	; 0x6c
	    _usbd_control_setup;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_OUT] =
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <usbd_init+0x50>)
 80010a8:	6683      	str	r3, [r0, #104]	; 0x68
	    _usbd_control_out;
	usbd_dev->user_callback_ctr[0][USB_TRANSACTION_IN] =
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <usbd_init+0x54>)
 80010ac:	6643      	str	r3, [r0, #100]	; 0x64
	    _usbd_control_in;

	int i;
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	e006      	b.n	80010c0 <usbd_init+0x44>
		usbd_dev->user_callback_set_config[i] = NULL;
 80010b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80010b6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80010ba:	2100      	movs	r1, #0
 80010bc:	6051      	str	r1, [r2, #4]
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 80010be:	3301      	adds	r3, #1
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	ddf6      	ble.n	80010b2 <usbd_init+0x36>
	}

	return usbd_dev;
}
 80010c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	0800195d 	.word	0x0800195d
 80010cc:	080019a7 	.word	0x080019a7
 80010d0:	08001a31 	.word	0x08001a31

080010d4 <_usbd_standard_request_device>:
/**@}*/

int _usbd_standard_request_device(usbd_device *usbd_dev,
				  struct usb_setup_data *req, uint8_t **buf,
				  uint16_t *len)
{
 80010d4:	b510      	push	{r4, lr}
	int (*command)(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 80010d6:	784c      	ldrb	r4, [r1, #1]
 80010d8:	2c09      	cmp	r4, #9
 80010da:	d812      	bhi.n	8001102 <_usbd_standard_request_device+0x2e>
 80010dc:	e8df f004 	tbb	[pc, r4]
 80010e0:	1111110b 	.word	0x1111110b
 80010e4:	11090511 	.word	0x11090511
 80010e8:	0d07      	.short	0x0d07
	case USB_REQ_SET_ADDRESS:
		/*
		 * SET ADDRESS is an exception.
		 * It is only processed at STATUS stage.
		 */
		command = usb_standard_set_address;
 80010ea:	4c08      	ldr	r4, [pc, #32]	; (800110c <_usbd_standard_request_device+0x38>)
 80010ec:	e006      	b.n	80010fc <_usbd_standard_request_device+0x28>
		break;
	case USB_REQ_SET_CONFIGURATION:
		command = usb_standard_set_configuration;
		break;
	case USB_REQ_GET_CONFIGURATION:
		command = usb_standard_get_configuration;
 80010ee:	4c08      	ldr	r4, [pc, #32]	; (8001110 <_usbd_standard_request_device+0x3c>)
		break;
 80010f0:	e004      	b.n	80010fc <_usbd_standard_request_device+0x28>
	case USB_REQ_GET_DESCRIPTOR:
		command = usb_standard_get_descriptor;
 80010f2:	4c08      	ldr	r4, [pc, #32]	; (8001114 <_usbd_standard_request_device+0x40>)
		break;
 80010f4:	e002      	b.n	80010fc <_usbd_standard_request_device+0x28>
	case USB_REQ_GET_STATUS:
		/*
		 * GET_STATUS always responds with zero reply.
		 * The application may override this behaviour.
		 */
		command = usb_standard_device_get_status;
 80010f6:	4c08      	ldr	r4, [pc, #32]	; (8001118 <_usbd_standard_request_device+0x44>)
		break;
 80010f8:	e000      	b.n	80010fc <_usbd_standard_request_device+0x28>
		command = usb_standard_set_configuration;
 80010fa:	4c08      	ldr	r4, [pc, #32]	; (800111c <_usbd_standard_request_device+0x48>)
	case USB_REQ_SET_DESCRIPTOR:
		/* SET_DESCRIPTOR is optional and not implemented. */
		break;
	}

	if (!command) {
 80010fc:	b11c      	cbz	r4, 8001106 <_usbd_standard_request_device+0x32>
		return 0;
	}

	return command(usbd_dev, req, buf, len);
 80010fe:	47a0      	blx	r4
}
 8001100:	bd10      	pop	{r4, pc}
		return 0;
 8001102:	2000      	movs	r0, #0
 8001104:	e7fc      	b.n	8001100 <_usbd_standard_request_device+0x2c>
 8001106:	2000      	movs	r0, #0
 8001108:	e7fa      	b.n	8001100 <_usbd_standard_request_device+0x2c>
 800110a:	bf00      	nop
 800110c:	08001a8f 	.word	0x08001a8f
 8001110:	08001b79 	.word	0x08001b79
 8001114:	08001e1b 	.word	0x08001e1b
 8001118:	08001c31 	.word	0x08001c31
 800111c:	08001abf 	.word	0x08001abf

08001120 <_usbd_standard_request_interface>:

int _usbd_standard_request_interface(usbd_device *usbd_dev,
				     struct usb_setup_data *req, uint8_t **buf,
				     uint16_t *len)
{
 8001120:	b510      	push	{r4, lr}
	int (*command)(usbd_device *usbd_dev, struct usb_setup_data *req,
		       uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001122:	784c      	ldrb	r4, [r1, #1]
 8001124:	2c0a      	cmp	r4, #10
 8001126:	d004      	beq.n	8001132 <_usbd_standard_request_interface+0x12>
 8001128:	2c0b      	cmp	r4, #11
 800112a:	d008      	beq.n	800113e <_usbd_standard_request_interface+0x1e>
 800112c:	b12c      	cbz	r4, 800113a <_usbd_standard_request_interface+0x1a>
		command = usb_standard_interface_get_status;
		break;
	}

	if (!command) {
		return 0;
 800112e:	2000      	movs	r0, #0
 8001130:	e002      	b.n	8001138 <_usbd_standard_request_interface+0x18>
		command = usb_standard_get_interface;
 8001132:	4c05      	ldr	r4, [pc, #20]	; (8001148 <_usbd_standard_request_interface+0x28>)
	if (!command) {
 8001134:	b12c      	cbz	r4, 8001142 <_usbd_standard_request_interface+0x22>
	}

	return command(usbd_dev, req, buf, len);
 8001136:	47a0      	blx	r4
}
 8001138:	bd10      	pop	{r4, pc}
		command = usb_standard_interface_get_status;
 800113a:	4c04      	ldr	r4, [pc, #16]	; (800114c <_usbd_standard_request_interface+0x2c>)
		break;
 800113c:	e7fa      	b.n	8001134 <_usbd_standard_request_interface+0x14>
		command = usb_standard_set_interface;
 800113e:	4c04      	ldr	r4, [pc, #16]	; (8001150 <_usbd_standard_request_interface+0x30>)
 8001140:	e7f8      	b.n	8001134 <_usbd_standard_request_interface+0x14>
		return 0;
 8001142:	2000      	movs	r0, #0
 8001144:	e7f8      	b.n	8001138 <_usbd_standard_request_interface+0x18>
 8001146:	bf00      	nop
 8001148:	08001bf3 	.word	0x08001bf3
 800114c:	08001c49 	.word	0x08001c49
 8001150:	08001b9d 	.word	0x08001b9d

08001154 <_usbd_standard_request_endpoint>:

int _usbd_standard_request_endpoint(usbd_device *usbd_dev,
				    struct usb_setup_data *req, uint8_t **buf,
				    uint16_t *len)
{
 8001154:	b510      	push	{r4, lr}
	int (*command) (usbd_device *usbd_dev, struct usb_setup_data *req,
			uint8_t **buf, uint16_t *len) = NULL;

	switch (req->bRequest) {
 8001156:	784c      	ldrb	r4, [r1, #1]
 8001158:	2c01      	cmp	r4, #1
 800115a:	d004      	beq.n	8001166 <_usbd_standard_request_endpoint+0x12>
 800115c:	b16c      	cbz	r4, 800117a <_usbd_standard_request_endpoint+0x26>
 800115e:	2c03      	cmp	r4, #3
 8001160:	d007      	beq.n	8001172 <_usbd_standard_request_endpoint+0x1e>
		 */
		break;
	}

	if (!command) {
		return 0;
 8001162:	2000      	movs	r0, #0
 8001164:	e00c      	b.n	8001180 <_usbd_standard_request_endpoint+0x2c>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001166:	884c      	ldrh	r4, [r1, #2]
 8001168:	b90c      	cbnz	r4, 800116e <_usbd_standard_request_endpoint+0x1a>
			command = usb_standard_endpoint_unstall;
 800116a:	4c08      	ldr	r4, [pc, #32]	; (800118c <_usbd_standard_request_endpoint+0x38>)
 800116c:	e006      	b.n	800117c <_usbd_standard_request_endpoint+0x28>
		return 0;
 800116e:	2000      	movs	r0, #0
 8001170:	e006      	b.n	8001180 <_usbd_standard_request_endpoint+0x2c>
		if (req->wValue == USB_FEAT_ENDPOINT_HALT) {
 8001172:	884c      	ldrh	r4, [r1, #2]
 8001174:	b92c      	cbnz	r4, 8001182 <_usbd_standard_request_endpoint+0x2e>
			command = usb_standard_endpoint_stall;
 8001176:	4c06      	ldr	r4, [pc, #24]	; (8001190 <_usbd_standard_request_endpoint+0x3c>)
 8001178:	e000      	b.n	800117c <_usbd_standard_request_endpoint+0x28>
		command = usb_standard_endpoint_get_status;
 800117a:	4c06      	ldr	r4, [pc, #24]	; (8001194 <_usbd_standard_request_endpoint+0x40>)
	if (!command) {
 800117c:	b11c      	cbz	r4, 8001186 <_usbd_standard_request_endpoint+0x32>
	}

	return command(usbd_dev, req, buf, len);
 800117e:	47a0      	blx	r4
}
 8001180:	bd10      	pop	{r4, pc}
		return 0;
 8001182:	2000      	movs	r0, #0
 8001184:	e7fc      	b.n	8001180 <_usbd_standard_request_endpoint+0x2c>
 8001186:	2000      	movs	r0, #0
 8001188:	e7fa      	b.n	8001180 <_usbd_standard_request_endpoint+0x2c>
 800118a:	bf00      	nop
 800118c:	08001f3b 	.word	0x08001f3b
 8001190:	08001f2b 	.word	0x08001f2b
 8001194:	08001f01 	.word	0x08001f01

08001198 <st_usbfs_v1_usbd_init>:
	.poll = st_usbfs_poll,
};

/** Initialize the USB device controller hardware of the STM32. */
static usbd_device *st_usbfs_v1_usbd_init(void)
{
 8001198:	b508      	push	{r3, lr}
	rcc_periph_clock_enable(RCC_USB);
 800119a:	f240 3097 	movw	r0, #919	; 0x397
 800119e:	f000 fab2 	bl	8001706 <rcc_periph_clock_enable>
	SET_REG(USB_CNTR_REG, 0);
 80011a2:	4a06      	ldr	r2, [pc, #24]	; (80011bc <st_usbfs_v1_usbd_init+0x24>)
 80011a4:	2300      	movs	r3, #0
 80011a6:	6013      	str	r3, [r2, #0]
	SET_REG(USB_BTABLE_REG, 0);
 80011a8:	4905      	ldr	r1, [pc, #20]	; (80011c0 <st_usbfs_v1_usbd_init+0x28>)
 80011aa:	600b      	str	r3, [r1, #0]
	SET_REG(USB_ISTR_REG, 0);
 80011ac:	390c      	subs	r1, #12
 80011ae:	600b      	str	r3, [r1, #0]

	/* Enable RESET, SUSPEND, RESUME and CTR interrupts. */
	SET_REG(USB_CNTR_REG, USB_CNTR_RESETM | USB_CNTR_CTRM |
 80011b0:	f44f 431c 	mov.w	r3, #39936	; 0x9c00
 80011b4:	6013      	str	r3, [r2, #0]
		USB_CNTR_SUSPM | USB_CNTR_WKUPM);
	return &st_usbfs_dev;
}
 80011b6:	4803      	ldr	r0, [pc, #12]	; (80011c4 <st_usbfs_v1_usbd_init+0x2c>)
 80011b8:	bd08      	pop	{r3, pc}
 80011ba:	bf00      	nop
 80011bc:	40005c40 	.word	0x40005c40
 80011c0:	40005c50 	.word	0x40005c50
 80011c4:	20000744 	.word	0x20000744

080011c8 <scb_reset_system>:
}
#endif

void scb_reset_system(void)
{
	SCB_AIRCR = SCB_AIRCR_VECTKEY | SCB_AIRCR_SYSRESETREQ;
 80011c8:	4b01      	ldr	r3, [pc, #4]	; (80011d0 <scb_reset_system+0x8>)
 80011ca:	4a02      	ldr	r2, [pc, #8]	; (80011d4 <scb_reset_system+0xc>)
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e7fe      	b.n	80011ce <scb_reset_system+0x6>
 80011d0:	e000ed0c 	.word	0xe000ed0c
 80011d4:	05fa0004 	.word	0x05fa0004

080011d8 <st_usbfs_set_address>:

void st_usbfs_set_address(usbd_device *dev, uint8_t addr)
{
	(void)dev;
	/* Set device address and enable. */
	SET_REG(USB_DADDR_REG, (addr & USB_DADDR_ADDR) | USB_DADDR_EF);
 80011d8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80011dc:	4b01      	ldr	r3, [pc, #4]	; (80011e4 <st_usbfs_set_address+0xc>)
 80011de:	6019      	str	r1, [r3, #0]
}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40005c4c 	.word	0x40005c4c

080011e8 <st_usbfs_set_ep_rx_bufsize>:
 * @param size Size in bytes of the RX buffer.
 */
void st_usbfs_set_ep_rx_bufsize(usbd_device *dev, uint8_t ep, uint32_t size)
{
	(void)dev;
	if (size > 62) {
 80011e8:	2a3e      	cmp	r2, #62	; 0x3e
 80011ea:	d915      	bls.n	8001218 <st_usbfs_set_ep_rx_bufsize+0x30>
		if (size & 0x1f) {
 80011ec:	f012 0f1f 	tst.w	r2, #31
 80011f0:	d000      	beq.n	80011f4 <st_usbfs_set_ep_rx_bufsize+0xc>
			size -= 32;
 80011f2:	3a20      	subs	r2, #32
		}
		USB_SET_EP_RX_COUNT(ep, (size << 5) | 0x8000);
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <st_usbfs_set_ep_rx_bufsize+0x58>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80011fe:	3306      	adds	r3, #6
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001206:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800120a:	ea6f 5282 	mvn.w	r2, r2, lsl #22
 800120e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8001212:	b292      	uxth	r2, r2
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	4770      	bx	lr
	} else {
		if (size & 1) {
 8001218:	f012 0f01 	tst.w	r2, #1
 800121c:	d000      	beq.n	8001220 <st_usbfs_set_ep_rx_bufsize+0x38>
			size++;
 800121e:	3201      	adds	r2, #1
		}
		USB_SET_EP_RX_COUNT(ep, size << 10);
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <st_usbfs_set_ep_rx_bufsize+0x58>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800122a:	3306      	adds	r3, #6
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001232:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001236:	4903      	ldr	r1, [pc, #12]	; (8001244 <st_usbfs_set_ep_rx_bufsize+0x5c>)
 8001238:	ea01 2282 	and.w	r2, r1, r2, lsl #10
 800123c:	601a      	str	r2, [r3, #0]
	}
}
 800123e:	4770      	bx	lr
 8001240:	40005c50 	.word	0x40005c50
 8001244:	03fffc00 	.word	0x03fffc00

08001248 <st_usbfs_ep_setup>:

void st_usbfs_ep_setup(usbd_device *dev, uint8_t addr, uint8_t type,
		uint16_t max_size,
		void (*callback) (usbd_device *usbd_dev,
		uint8_t ep))
{
 8001248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	4684      	mov	ip, r0
 8001250:	460c      	mov	r4, r1
 8001252:	f8dd 8020 	ldr.w	r8, [sp, #32]
	/* Translate USB standard type codes to STM32. */
	const uint16_t typelookup[] = {
 8001256:	4952      	ldr	r1, [pc, #328]	; (80013a0 <st_usbfs_ep_setup+0x158>)
 8001258:	c903      	ldmia	r1, {r0, r1}
 800125a:	ad02      	add	r5, sp, #8
 800125c:	e905 0003 	stmdb	r5, {r0, r1}
		[USB_ENDPOINT_ATTR_ISOCHRONOUS] = USB_EP_TYPE_ISO,
		[USB_ENDPOINT_ATTR_BULK] = USB_EP_TYPE_BULK,
		[USB_ENDPOINT_ATTR_INTERRUPT] = USB_EP_TYPE_INTERRUPT,
	};
	uint8_t dir = addr & 0x80;
	addr &= 0x7f;
 8001260:	f004 077f 	and.w	r7, r4, #127	; 0x7f

	/* Assign address. */
	USB_SET_EP_ADDR(addr, addr);
 8001264:	00be      	lsls	r6, r7, #2
 8001266:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800126a:	f506 46b8 	add.w	r6, r6, #23552	; 0x5c00
 800126e:	6831      	ldr	r1, [r6, #0]
 8001270:	b209      	sxth	r1, r1
 8001272:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8001276:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 800127a:	4339      	orrs	r1, r7
 800127c:	b289      	uxth	r1, r1
 800127e:	6031      	str	r1, [r6, #0]
	USB_SET_EP_TYPE(addr, typelookup[type]);
 8001280:	6831      	ldr	r1, [r6, #0]
 8001282:	f421 41ec 	bic.w	r1, r1, #30208	; 0x7600
 8001286:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800128a:	0409      	lsls	r1, r1, #16
 800128c:	0c09      	lsrs	r1, r1, #16
 800128e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001292:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8001296:	4311      	orrs	r1, r2
 8001298:	6031      	str	r1, [r6, #0]
 800129a:	b262      	sxtb	r2, r4

	if (dir || (addr == 0)) {
 800129c:	2a00      	cmp	r2, #0
 800129e:	db01      	blt.n	80012a4 <st_usbfs_ep_setup+0x5c>
 80012a0:	2f00      	cmp	r7, #0
 80012a2:	d138      	bne.n	8001316 <st_usbfs_ep_setup+0xce>
		USB_SET_EP_TX_ADDR(addr, dev->pm_top);
 80012a4:	f8bc 0018 	ldrh.w	r0, [ip, #24]
 80012a8:	493e      	ldr	r1, [pc, #248]	; (80013a4 <st_usbfs_ep_setup+0x15c>)
 80012aa:	6809      	ldr	r1, [r1, #0]
 80012ac:	b289      	uxth	r1, r1
 80012ae:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 80012b2:	0049      	lsls	r1, r1, #1
 80012b4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80012b8:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
 80012bc:	6008      	str	r0, [r1, #0]
		if (callback) {
 80012be:	f1b8 0f00 	cmp.w	r8, #0
 80012c2:	d005      	beq.n	80012d0 <st_usbfs_ep_setup+0x88>
			dev->user_callback_ctr[addr][USB_TRANSACTION_IN] =
 80012c4:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 80012c8:	0081      	lsls	r1, r0, #2
 80012ca:	4461      	add	r1, ip
 80012cc:	f8c1 8064 	str.w	r8, [r1, #100]	; 0x64
			    (void *)callback;
		}
		USB_CLR_EP_TX_DTOG(addr);
 80012d0:	6831      	ldr	r1, [r6, #0]
 80012d2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80012d6:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80012da:	0409      	lsls	r1, r1, #16
 80012dc:	0c09      	lsrs	r1, r1, #16
 80012de:	6031      	str	r1, [r6, #0]
		USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_NAK);
 80012e0:	6835      	ldr	r5, [r6, #0]
 80012e2:	b2ad      	uxth	r5, r5
 80012e4:	f425 45e0 	bic.w	r5, r5, #28672	; 0x7000
 80012e8:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 80012ec:	b2ad      	uxth	r5, r5
 80012ee:	2401      	movs	r4, #1
 80012f0:	e001      	b.n	80012f6 <st_usbfs_ep_setup+0xae>
 80012f2:	0064      	lsls	r4, r4, #1
 80012f4:	b2a4      	uxth	r4, r4
 80012f6:	b124      	cbz	r4, 8001302 <st_usbfs_ep_setup+0xba>
 80012f8:	f014 0f20 	tst.w	r4, #32
 80012fc:	d0f9      	beq.n	80012f2 <st_usbfs_ep_setup+0xaa>
 80012fe:	4065      	eors	r5, r4
 8001300:	e7f7      	b.n	80012f2 <st_usbfs_ep_setup+0xaa>
 8001302:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8001306:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800130a:	6035      	str	r5, [r6, #0]
		dev->pm_top += max_size;
 800130c:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 8001310:	4419      	add	r1, r3
 8001312:	f8ac 1018 	strh.w	r1, [ip, #24]
	}

	if (!dir) {
 8001316:	2a00      	cmp	r2, #0
 8001318:	db3e      	blt.n	8001398 <st_usbfs_ep_setup+0x150>
 800131a:	461c      	mov	r4, r3
 800131c:	4665      	mov	r5, ip
		USB_SET_EP_RX_ADDR(addr, dev->pm_top);
 800131e:	f8bc 2018 	ldrh.w	r2, [ip, #24]
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <st_usbfs_ep_setup+0x15c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	b29b      	uxth	r3, r3
 8001328:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800132c:	3304      	adds	r3, #4
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001334:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001338:	601a      	str	r2, [r3, #0]
		st_usbfs_set_ep_rx_bufsize(dev, addr, max_size);
 800133a:	4622      	mov	r2, r4
 800133c:	4639      	mov	r1, r7
 800133e:	4660      	mov	r0, ip
 8001340:	f7ff ff52 	bl	80011e8 <st_usbfs_set_ep_rx_bufsize>
		if (callback) {
 8001344:	f1b8 0f00 	cmp.w	r8, #0
 8001348:	d005      	beq.n	8001356 <st_usbfs_ep_setup+0x10e>
			dev->user_callback_ctr[addr][USB_TRANSACTION_OUT] =
 800134a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800134e:	00bb      	lsls	r3, r7, #2
 8001350:	442b      	add	r3, r5
 8001352:	f8c3 8068 	str.w	r8, [r3, #104]	; 0x68
			    (void *)callback;
		}
		USB_CLR_EP_RX_DTOG(addr);
 8001356:	6833      	ldr	r3, [r6, #0]
 8001358:	f423 5341 	bic.w	r3, r3, #12352	; 0x3040
 800135c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001360:	041b      	lsls	r3, r3, #16
 8001362:	0c1b      	lsrs	r3, r3, #16
 8001364:	6033      	str	r3, [r6, #0]
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 8001366:	6833      	ldr	r3, [r6, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800136e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001372:	b29b      	uxth	r3, r3
 8001374:	2201      	movs	r2, #1
 8001376:	e001      	b.n	800137c <st_usbfs_ep_setup+0x134>
 8001378:	0052      	lsls	r2, r2, #1
 800137a:	b292      	uxth	r2, r2
 800137c:	b122      	cbz	r2, 8001388 <st_usbfs_ep_setup+0x140>
 800137e:	f412 5f40 	tst.w	r2, #12288	; 0x3000
 8001382:	d0f9      	beq.n	8001378 <st_usbfs_ep_setup+0x130>
 8001384:	4053      	eors	r3, r2
 8001386:	e7f7      	b.n	8001378 <st_usbfs_ep_setup+0x130>
 8001388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800138c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001390:	6033      	str	r3, [r6, #0]
		dev->pm_top += max_size;
 8001392:	8b2b      	ldrh	r3, [r5, #24]
 8001394:	4423      	add	r3, r4
 8001396:	832b      	strh	r3, [r5, #24]
	}
}
 8001398:	b002      	add	sp, #8
 800139a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800139e:	bf00      	nop
 80013a0:	08004728 	.word	0x08004728
 80013a4:	40005c50 	.word	0x40005c50

080013a8 <st_usbfs_ep_nak_set>:

void st_usbfs_ep_nak_set(usbd_device *dev, uint8_t addr, uint8_t nak)
{
	(void)dev;
	/* It does not make sence to force NAK on IN endpoints. */
	if (addr & 0x80) {
 80013a8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80013ac:	d139      	bne.n	8001422 <st_usbfs_ep_nak_set+0x7a>
		return;
	}

	st_usbfs_force_nak[addr] = nak;
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <st_usbfs_ep_nak_set+0x7c>)
 80013b0:	545a      	strb	r2, [r3, r1]

	if (nak) {
 80013b2:	b1da      	cbz	r2, 80013ec <st_usbfs_ep_nak_set+0x44>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_NAK);
 80013b4:	0089      	lsls	r1, r1, #2
 80013b6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80013ba:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80013be:	680a      	ldr	r2, [r1, #0]
 80013c0:	b292      	uxth	r2, r2
 80013c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013ca:	b292      	uxth	r2, r2
 80013cc:	2301      	movs	r3, #1
 80013ce:	e001      	b.n	80013d4 <st_usbfs_ep_nak_set+0x2c>
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	b123      	cbz	r3, 80013e0 <st_usbfs_ep_nak_set+0x38>
 80013d6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80013da:	d0f9      	beq.n	80013d0 <st_usbfs_ep_nak_set+0x28>
 80013dc:	405a      	eors	r2, r3
 80013de:	e7f7      	b.n	80013d0 <st_usbfs_ep_nak_set+0x28>
 80013e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013e8:	600a      	str	r2, [r1, #0]
 80013ea:	4770      	bx	lr
	} else {
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 80013ec:	0089      	lsls	r1, r1, #2
 80013ee:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80013f2:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80013f6:	680a      	ldr	r2, [r1, #0]
 80013f8:	b292      	uxth	r2, r2
 80013fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001402:	b292      	uxth	r2, r2
 8001404:	2301      	movs	r3, #1
 8001406:	e001      	b.n	800140c <st_usbfs_ep_nak_set+0x64>
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	b29b      	uxth	r3, r3
 800140c:	b123      	cbz	r3, 8001418 <st_usbfs_ep_nak_set+0x70>
 800140e:	f413 5f40 	tst.w	r3, #12288	; 0x3000
 8001412:	d0f9      	beq.n	8001408 <st_usbfs_ep_nak_set+0x60>
 8001414:	405a      	eors	r2, r3
 8001416:	e7f7      	b.n	8001408 <st_usbfs_ep_nak_set+0x60>
 8001418:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800141c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001420:	600a      	str	r2, [r1, #0]
	}
}
 8001422:	4770      	bx	lr
 8001424:	2000073c 	.word	0x2000073c

08001428 <st_usbfs_ep_write_packet>:

uint16_t st_usbfs_ep_write_packet(usbd_device *dev, uint8_t addr,
				     const void *buf, uint16_t len)
{
 8001428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)dev;
	addr &= 0x7F;
 800142a:	f001 067f 	and.w	r6, r1, #127	; 0x7f

	if ((*USB_EP_REG(addr) & USB_EP_TX_STAT) == USB_EP_TX_STAT_VALID) {
 800142e:	00b4      	lsls	r4, r6, #2
 8001430:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001434:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 8001438:	6827      	ldr	r7, [r4, #0]
 800143a:	f007 0730 	and.w	r7, r7, #48	; 0x30
 800143e:	2f30      	cmp	r7, #48	; 0x30
 8001440:	d036      	beq.n	80014b0 <st_usbfs_ep_write_packet+0x88>
 8001442:	461d      	mov	r5, r3
 8001444:	4611      	mov	r1, r2
		return 0;
	}

	st_usbfs_copy_to_pm(USB_GET_EP_TX_BUFF(addr), buf, len);
 8001446:	4f1b      	ldr	r7, [pc, #108]	; (80014b4 <st_usbfs_ep_write_packet+0x8c>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	00f6      	lsls	r6, r6, #3
 800144e:	4433      	add	r3, r6
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001456:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800145a:	8818      	ldrh	r0, [r3, #0]
 800145c:	0040      	lsls	r0, r0, #1
 800145e:	462a      	mov	r2, r5
 8001460:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8001464:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
 8001468:	f000 fd9c 	bl	8001fa4 <st_usbfs_copy_to_pm>
	USB_SET_EP_TX_COUNT(addr, len);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	4433      	add	r3, r6
 8001472:	3302      	adds	r3, #2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800147a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 800147e:	601d      	str	r5, [r3, #0]
	USB_SET_EP_TX_STAT(addr, USB_EP_TX_STAT_VALID);
 8001480:	6821      	ldr	r1, [r4, #0]
 8001482:	b289      	uxth	r1, r1
 8001484:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8001488:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800148c:	b289      	uxth	r1, r1
 800148e:	2201      	movs	r2, #1
 8001490:	e001      	b.n	8001496 <st_usbfs_ep_write_packet+0x6e>
 8001492:	0052      	lsls	r2, r2, #1
 8001494:	b292      	uxth	r2, r2
 8001496:	b122      	cbz	r2, 80014a2 <st_usbfs_ep_write_packet+0x7a>
 8001498:	f012 0f30 	tst.w	r2, #48	; 0x30
 800149c:	d0f9      	beq.n	8001492 <st_usbfs_ep_write_packet+0x6a>
 800149e:	4051      	eors	r1, r2
 80014a0:	e7f7      	b.n	8001492 <st_usbfs_ep_write_packet+0x6a>
 80014a2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80014a6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80014aa:	6021      	str	r1, [r4, #0]

	return len;
 80014ac:	4628      	mov	r0, r5
}
 80014ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 80014b0:	2000      	movs	r0, #0
 80014b2:	e7fc      	b.n	80014ae <st_usbfs_ep_write_packet+0x86>
 80014b4:	40005c50 	.word	0x40005c50

080014b8 <st_usbfs_ep_read_packet>:

uint16_t st_usbfs_ep_read_packet(usbd_device *dev, uint8_t addr,
					 void *buf, uint16_t len)
{
 80014b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)dev;
	if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) == USB_EP_RX_STAT_VALID) {
 80014ba:	008c      	lsls	r4, r1, #2
 80014bc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80014c0:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
 80014c4:	6820      	ldr	r0, [r4, #0]
 80014c6:	f400 5040 	and.w	r0, r0, #12288	; 0x3000
 80014ca:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
 80014ce:	d056      	beq.n	800157e <st_usbfs_ep_read_packet+0xc6>
		return 0;
	}

	len = MIN(USB_GET_EP_RX_COUNT(addr) & 0x3ff, len);
 80014d0:	482c      	ldr	r0, [pc, #176]	; (8001584 <st_usbfs_ep_read_packet+0xcc>)
 80014d2:	6806      	ldr	r6, [r0, #0]
 80014d4:	b2b6      	uxth	r6, r6
 80014d6:	00cf      	lsls	r7, r1, #3
 80014d8:	443e      	add	r6, r7
 80014da:	3606      	adds	r6, #6
 80014dc:	0076      	lsls	r6, r6, #1
 80014de:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80014e2:	f506 46c0 	add.w	r6, r6, #24576	; 0x6000
 80014e6:	8830      	ldrh	r0, [r6, #0]
 80014e8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80014ec:	4298      	cmp	r0, r3
 80014ee:	da0d      	bge.n	800150c <st_usbfs_ep_read_packet+0x54>
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <st_usbfs_ep_read_packet+0xcc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	443b      	add	r3, r7
 80014f8:	3306      	adds	r3, #6
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001500:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001504:	881d      	ldrh	r5, [r3, #0]
 8001506:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800150a:	e000      	b.n	800150e <st_usbfs_ep_read_packet+0x56>
 800150c:	461d      	mov	r5, r3
 800150e:	4610      	mov	r0, r2
 8001510:	460e      	mov	r6, r1
	st_usbfs_copy_from_pm(buf, USB_GET_EP_RX_BUFF(addr), len);
 8001512:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <st_usbfs_ep_read_packet+0xcc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	443b      	add	r3, r7
 800151a:	3304      	adds	r3, #4
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001522:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8001526:	8819      	ldrh	r1, [r3, #0]
 8001528:	0049      	lsls	r1, r1, #1
 800152a:	462a      	mov	r2, r5
 800152c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001530:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
 8001534:	f000 fd42 	bl	8001fbc <st_usbfs_copy_from_pm>
	USB_CLR_EP_RX_CTR(addr);
 8001538:	6823      	ldr	r3, [r4, #0]
 800153a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800153e:	051b      	lsls	r3, r3, #20
 8001540:	0d1b      	lsrs	r3, r3, #20
 8001542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001546:	6023      	str	r3, [r4, #0]

	if (!st_usbfs_force_nak[addr]) {
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <st_usbfs_ep_read_packet+0xd0>)
 800154a:	5d9b      	ldrb	r3, [r3, r6]
 800154c:	b9ab      	cbnz	r3, 800157a <st_usbfs_ep_read_packet+0xc2>
		USB_SET_EP_RX_STAT(addr, USB_EP_RX_STAT_VALID);
 800154e:	6821      	ldr	r1, [r4, #0]
 8001550:	b289      	uxth	r1, r1
 8001552:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8001556:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800155a:	b289      	uxth	r1, r1
 800155c:	2201      	movs	r2, #1
 800155e:	e001      	b.n	8001564 <st_usbfs_ep_read_packet+0xac>
 8001560:	0052      	lsls	r2, r2, #1
 8001562:	b292      	uxth	r2, r2
 8001564:	b122      	cbz	r2, 8001570 <st_usbfs_ep_read_packet+0xb8>
 8001566:	f412 5f40 	tst.w	r2, #12288	; 0x3000
 800156a:	d0f9      	beq.n	8001560 <st_usbfs_ep_read_packet+0xa8>
 800156c:	4051      	eors	r1, r2
 800156e:	e7f7      	b.n	8001560 <st_usbfs_ep_read_packet+0xa8>
 8001570:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8001574:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001578:	6021      	str	r1, [r4, #0]
	}

	return len;
}
 800157a:	4628      	mov	r0, r5
 800157c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
 800157e:	2500      	movs	r5, #0
 8001580:	e7fb      	b.n	800157a <st_usbfs_ep_read_packet+0xc2>
 8001582:	bf00      	nop
 8001584:	40005c50 	.word	0x40005c50
 8001588:	2000073c 	.word	0x2000073c

0800158c <st_usbfs_poll>:

void st_usbfs_poll(usbd_device *dev)
{
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	4605      	mov	r5, r0
	uint16_t istr = *USB_ISTR_REG;
 8001590:	4b3b      	ldr	r3, [pc, #236]	; (8001680 <st_usbfs_poll+0xf4>)
 8001592:	6819      	ldr	r1, [r3, #0]

	if (istr & USB_ISTR_RESET) {
 8001594:	b28c      	uxth	r4, r1
 8001596:	f414 6f80 	tst.w	r4, #1024	; 0x400
 800159a:	d129      	bne.n	80015f0 <st_usbfs_poll+0x64>
		dev->pm_top = USBD_PM_TOP;
		_usbd_reset(dev);
		return;
	}

	if (istr & USB_ISTR_CTR) {
 800159c:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 80015a0:	d12e      	bne.n	8001600 <st_usbfs_poll+0x74>
		} else {
			USB_CLR_EP_RX_CTR(ep);
		}
	}

	if (istr & USB_ISTR_SUSP) {
 80015a2:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80015a6:	d006      	beq.n	80015b6 <st_usbfs_poll+0x2a>
		USB_CLR_ISTR_SUSP();
 80015a8:	4b35      	ldr	r3, [pc, #212]	; (8001680 <st_usbfs_poll+0xf4>)
 80015aa:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 80015ae:	601a      	str	r2, [r3, #0]
		if (dev->user_callback_suspend) {
 80015b0:	6a2b      	ldr	r3, [r5, #32]
 80015b2:	b103      	cbz	r3, 80015b6 <st_usbfs_poll+0x2a>
			dev->user_callback_suspend();
 80015b4:	4798      	blx	r3
		}
	}

	if (istr & USB_ISTR_WKUP) {
 80015b6:	f414 5f80 	tst.w	r4, #4096	; 0x1000
 80015ba:	d006      	beq.n	80015ca <st_usbfs_poll+0x3e>
		USB_CLR_ISTR_WKUP();
 80015bc:	4b30      	ldr	r3, [pc, #192]	; (8001680 <st_usbfs_poll+0xf4>)
 80015be:	f64e 72ff 	movw	r2, #61439	; 0xefff
 80015c2:	601a      	str	r2, [r3, #0]
		if (dev->user_callback_resume) {
 80015c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80015c6:	b103      	cbz	r3, 80015ca <st_usbfs_poll+0x3e>
			dev->user_callback_resume();
 80015c8:	4798      	blx	r3
		}
	}

	if (istr & USB_ISTR_SOF) {
 80015ca:	f414 7f00 	tst.w	r4, #512	; 0x200
 80015ce:	d006      	beq.n	80015de <st_usbfs_poll+0x52>
		USB_CLR_ISTR_SOF();
 80015d0:	4b2b      	ldr	r3, [pc, #172]	; (8001680 <st_usbfs_poll+0xf4>)
 80015d2:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 80015d6:	601a      	str	r2, [r3, #0]
		if (dev->user_callback_sof) {
 80015d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015da:	b103      	cbz	r3, 80015de <st_usbfs_poll+0x52>
			dev->user_callback_sof();
 80015dc:	4798      	blx	r3
		}
	}

	if (dev->user_callback_sof) {
 80015de:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d046      	beq.n	8001672 <st_usbfs_poll+0xe6>
		*USB_CNTR_REG |= USB_CNTR_SOFM;
 80015e4:	4a27      	ldr	r2, [pc, #156]	; (8001684 <st_usbfs_poll+0xf8>)
 80015e6:	6813      	ldr	r3, [r2, #0]
 80015e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ec:	6013      	str	r3, [r2, #0]
	} else {
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
	}
}
 80015ee:	bd38      	pop	{r3, r4, r5, pc}
		USB_CLR_ISTR_RESET();
 80015f0:	f64f 32ff 	movw	r2, #64511	; 0xfbff
 80015f4:	601a      	str	r2, [r3, #0]
		dev->pm_top = USBD_PM_TOP;
 80015f6:	2340      	movs	r3, #64	; 0x40
 80015f8:	8303      	strh	r3, [r0, #24]
		_usbd_reset(dev);
 80015fa:	f000 f8b5 	bl	8001768 <_usbd_reset>
		return;
 80015fe:	e7f6      	b.n	80015ee <st_usbfs_poll+0x62>
		uint8_t ep = istr & USB_ISTR_EP_ID;
 8001600:	f001 010f 	and.w	r1, r1, #15
		if (istr & USB_ISTR_DIR) {
 8001604:	f014 0f10 	tst.w	r4, #16
 8001608:	d00a      	beq.n	8001620 <st_usbfs_poll+0x94>
			if (*USB_EP_REG(ep) & USB_EP_SETUP) {
 800160a:	008b      	lsls	r3, r1, #2
 800160c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001610:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800161a:	d01a      	beq.n	8001652 <st_usbfs_poll+0xc6>
				type = USB_TRANSACTION_SETUP;
 800161c:	2202      	movs	r2, #2
 800161e:	e00d      	b.n	800163c <st_usbfs_poll+0xb0>
			USB_CLR_EP_TX_CTR(ep);
 8001620:	008b      	lsls	r3, r1, #2
 8001622:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001626:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001630:	0512      	lsls	r2, r2, #20
 8001632:	0d12      	lsrs	r2, r2, #20
 8001634:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001638:	601a      	str	r2, [r3, #0]
			type = USB_TRANSACTION_IN;
 800163a:	2200      	movs	r2, #0
		if (dev->user_callback_ctr[ep][type]) {
 800163c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8001640:	4413      	add	r3, r2
 8001642:	3318      	adds	r3, #24
 8001644:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	b123      	cbz	r3, 8001656 <st_usbfs_poll+0xca>
			dev->user_callback_ctr[ep][type] (dev, ep);
 800164c:	4628      	mov	r0, r5
 800164e:	4798      	blx	r3
 8001650:	e7a7      	b.n	80015a2 <st_usbfs_poll+0x16>
				type = USB_TRANSACTION_OUT;
 8001652:	2201      	movs	r2, #1
 8001654:	e7f2      	b.n	800163c <st_usbfs_poll+0xb0>
			USB_CLR_EP_RX_CTR(ep);
 8001656:	0089      	lsls	r1, r1, #2
 8001658:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800165c:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8001660:	680b      	ldr	r3, [r1, #0]
 8001662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001666:	051b      	lsls	r3, r3, #20
 8001668:	0d1b      	lsrs	r3, r3, #20
 800166a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800166e:	600b      	str	r3, [r1, #0]
 8001670:	e797      	b.n	80015a2 <st_usbfs_poll+0x16>
		*USB_CNTR_REG &= ~USB_CNTR_SOFM;
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <st_usbfs_poll+0xf8>)
 8001674:	6813      	ldr	r3, [r2, #0]
 8001676:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e7b7      	b.n	80015ee <st_usbfs_poll+0x62>
 800167e:	bf00      	nop
 8001680:	40005c44 	.word	0x40005c44
 8001684:	40005c40 	.word	0x40005c40

08001688 <gpio_set_mode>:
	     If multiple pins are to be set, use logical OR '|' to separate
	     them.
*/

void gpio_set_mode(uint32_t gpioport, uint8_t mode, uint8_t cnf, uint16_t gpios)
{
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	crl = GPIO_CRL(gpioport);
 800168a:	6807      	ldr	r7, [r0, #0]
	crh = GPIO_CRH(gpioport);
 800168c:	6846      	ldr	r6, [r0, #4]

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 800168e:	2400      	movs	r4, #0
 8001690:	e009      	b.n	80016a6 <gpio_set_mode+0x1e>
		if (!((1 << i) & gpios)) {
			continue;
		}

		/* Calculate bit offset. */
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 8001692:	f504 557f 	add.w	r5, r4, #16320	; 0x3fc0
 8001696:	3538      	adds	r5, #56	; 0x38
 8001698:	00ad      	lsls	r5, r5, #2
 800169a:	b2ad      	uxth	r5, r5
 800169c:	e00e      	b.n	80016bc <gpio_set_mode+0x34>

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;
 800169e:	46b6      	mov	lr, r6
 80016a0:	e00f      	b.n	80016c2 <gpio_set_mode+0x3a>
	for (i = 0; i < 16; i++) {
 80016a2:	3401      	adds	r4, #1
 80016a4:	b2a4      	uxth	r4, r4
 80016a6:	2c0f      	cmp	r4, #15
 80016a8:	d821      	bhi.n	80016ee <gpio_set_mode+0x66>
		if (!((1 << i) & gpios)) {
 80016aa:	fa43 f504 	asr.w	r5, r3, r4
 80016ae:	f015 0f01 	tst.w	r5, #1
 80016b2:	d0f6      	beq.n	80016a2 <gpio_set_mode+0x1a>
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 80016b4:	2c07      	cmp	r4, #7
 80016b6:	d8ec      	bhi.n	8001692 <gpio_set_mode+0xa>
 80016b8:	00a5      	lsls	r5, r4, #2
 80016ba:	b2ad      	uxth	r5, r5
		tmp32 = (i < 8) ? crl : crh;
 80016bc:	2c07      	cmp	r4, #7
 80016be:	d8ee      	bhi.n	800169e <gpio_set_mode+0x16>
 80016c0:	46be      	mov	lr, r7

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 80016c2:	f04f 0c0f 	mov.w	ip, #15
 80016c6:	fa0c fc05 	lsl.w	ip, ip, r5
 80016ca:	ea2e 0e0c 	bic.w	lr, lr, ip
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 80016ce:	fa01 fc05 	lsl.w	ip, r1, r5
 80016d2:	3502      	adds	r5, #2
 80016d4:	fa02 f505 	lsl.w	r5, r2, r5
 80016d8:	ea4c 0505 	orr.w	r5, ip, r5
 80016dc:	ea45 050e 	orr.w	r5, r5, lr

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 80016e0:	2c07      	cmp	r4, #7
 80016e2:	d800      	bhi.n	80016e6 <gpio_set_mode+0x5e>
 80016e4:	462f      	mov	r7, r5
		crh = (i >= 8) ? tmp32 : crh;
 80016e6:	2c07      	cmp	r4, #7
 80016e8:	d9db      	bls.n	80016a2 <gpio_set_mode+0x1a>
 80016ea:	462e      	mov	r6, r5
 80016ec:	e7d9      	b.n	80016a2 <gpio_set_mode+0x1a>
	}

	GPIO_CRL(gpioport) = crl;
 80016ee:	6007      	str	r7, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 80016f0:	6046      	str	r6, [r0, #4]
}
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016f4 <gpio_set>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 80016f4:	6101      	str	r1, [r0, #16]
}
 80016f6:	4770      	bx	lr

080016f8 <gpio_clear>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 80016f8:	0409      	lsls	r1, r1, #16
 80016fa:	6101      	str	r1, [r0, #16]
}
 80016fc:	4770      	bx	lr

080016fe <usart_recv>:
*/

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_DR(usart) & USART_DR_MASK;
 80016fe:	6840      	ldr	r0, [r0, #4]
}
 8001700:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001704:	4770      	bx	lr

08001706 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8001706:	0943      	lsrs	r3, r0, #5
 8001708:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800170c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	f000 001f 	and.w	r0, r0, #31
 8001716:	2101      	movs	r1, #1
 8001718:	fa01 f000 	lsl.w	r0, r1, r0
 800171c:	4310      	orrs	r0, r2
 800171e:	6018      	str	r0, [r3, #0]
}
 8001720:	4770      	bx	lr

08001722 <rcc_periph_reset_pulse>:
 * For available constants, see #rcc_periph_rst (RST_UART1 for example)
 */

void rcc_periph_reset_pulse(enum rcc_periph_rst rst)
{
	_RCC_REG(rst) |= _RCC_BIT(rst);
 8001722:	0943      	lsrs	r3, r0, #5
 8001724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001728:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800172c:	6819      	ldr	r1, [r3, #0]
 800172e:	f000 021f 	and.w	r2, r0, #31
 8001732:	2001      	movs	r0, #1
 8001734:	4090      	lsls	r0, r2
 8001736:	4301      	orrs	r1, r0
 8001738:	6019      	str	r1, [r3, #0]
	_RCC_REG(rst) &= ~_RCC_BIT(rst);
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	ea22 0000 	bic.w	r0, r2, r0
 8001740:	6018      	str	r0, [r3, #0]
}
 8001742:	4770      	bx	lr

08001744 <usbd_register_sof_callback>:
	usbd_dev->user_callback_resume = callback;
}

void usbd_register_sof_callback(usbd_device *usbd_dev, void (*callback)(void))
{
	usbd_dev->user_callback_sof = callback;
 8001744:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001746:	4770      	bx	lr

08001748 <usbd_poll>:
	}
}

/* Functions to wrap the low-level driver */
void usbd_poll(usbd_device *usbd_dev)
{
 8001748:	b508      	push	{r3, lr}
	usbd_dev->driver->poll(usbd_dev);
 800174a:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	4798      	blx	r3
}
 8001752:	bd08      	pop	{r3, pc}

08001754 <usbd_ep_setup>:
	}
}

void usbd_ep_setup(usbd_device *usbd_dev, uint8_t addr, uint8_t type,
		   uint16_t max_size, usbd_endpoint_callback callback)
{
 8001754:	b530      	push	{r4, r5, lr}
 8001756:	b083      	sub	sp, #12
	usbd_dev->driver->ep_setup(usbd_dev, addr, type, max_size, callback);
 8001758:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
 800175c:	68a4      	ldr	r4, [r4, #8]
 800175e:	9d06      	ldr	r5, [sp, #24]
 8001760:	9500      	str	r5, [sp, #0]
 8001762:	47a0      	blx	r4
}
 8001764:	b003      	add	sp, #12
 8001766:	bd30      	pop	{r4, r5, pc}

08001768 <_usbd_reset>:
{
 8001768:	b530      	push	{r4, r5, lr}
 800176a:	b083      	sub	sp, #12
 800176c:	4604      	mov	r4, r0
	usbd_dev->current_address = 0;
 800176e:	2500      	movs	r5, #0
 8001770:	7585      	strb	r5, [r0, #22]
	usbd_dev->current_config = 0;
 8001772:	75c5      	strb	r5, [r0, #23]
	usbd_ep_setup(usbd_dev, 0, USB_ENDPOINT_ATTR_CONTROL, usbd_dev->desc->bMaxPacketSize0, NULL);
 8001774:	6803      	ldr	r3, [r0, #0]
 8001776:	79db      	ldrb	r3, [r3, #7]
 8001778:	9500      	str	r5, [sp, #0]
 800177a:	462a      	mov	r2, r5
 800177c:	4629      	mov	r1, r5
 800177e:	f7ff ffe9 	bl	8001754 <usbd_ep_setup>
	usbd_dev->driver->set_address(usbd_dev, 0);
 8001782:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4629      	mov	r1, r5
 800178a:	4620      	mov	r0, r4
 800178c:	4798      	blx	r3
	if (usbd_dev->user_callback_reset) {
 800178e:	69e3      	ldr	r3, [r4, #28]
 8001790:	b103      	cbz	r3, 8001794 <_usbd_reset+0x2c>
		usbd_dev->user_callback_reset();
 8001792:	4798      	blx	r3
}
 8001794:	b003      	add	sp, #12
 8001796:	bd30      	pop	{r4, r5, pc}

08001798 <usbd_ep_write_packet>:

uint16_t usbd_ep_write_packet(usbd_device *usbd_dev, uint8_t addr,
			 const void *buf, uint16_t len)
{
 8001798:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_write_packet(usbd_dev, addr, buf, len);
 800179a:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
 800179e:	69e4      	ldr	r4, [r4, #28]
 80017a0:	47a0      	blx	r4
}
 80017a2:	bd10      	pop	{r4, pc}

080017a4 <usbd_ep_read_packet>:

uint16_t usbd_ep_read_packet(usbd_device *usbd_dev, uint8_t addr, void *buf,
			     uint16_t len)
{
 80017a4:	b510      	push	{r4, lr}
	return usbd_dev->driver->ep_read_packet(usbd_dev, addr, buf, len);
 80017a6:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
 80017aa:	6a24      	ldr	r4, [r4, #32]
 80017ac:	47a0      	blx	r4
}
 80017ae:	bd10      	pop	{r4, pc}

080017b0 <usbd_ep_stall_set>:

void usbd_ep_stall_set(usbd_device *usbd_dev, uint8_t addr, uint8_t stall)
{
 80017b0:	b508      	push	{r3, lr}
	usbd_dev->driver->ep_stall_set(usbd_dev, addr, stall);
 80017b2:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	4798      	blx	r3
}
 80017ba:	bd08      	pop	{r3, pc}

080017bc <usbd_ep_stall_get>:

uint8_t usbd_ep_stall_get(usbd_device *usbd_dev, uint8_t addr)
{
 80017bc:	b508      	push	{r3, lr}
	return usbd_dev->driver->ep_stall_get(usbd_dev, addr);
 80017be:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4798      	blx	r3
}
 80017c6:	bd08      	pop	{r3, pc}

080017c8 <stall_transaction>:
 * According to the USB 2.0 specification, section 8.5.3, when a control
 * transfer is stalled, the pipe becomes idle. We provide one utility to stall
 * a transaction to reduce boilerplate code.
 */
static void stall_transaction(usbd_device *usbd_dev)
{
 80017c8:	b510      	push	{r4, lr}
 80017ca:	4604      	mov	r4, r0
	usbd_ep_stall_set(usbd_dev, 0, 1);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2100      	movs	r1, #0
 80017d0:	f7ff ffee 	bl	80017b0 <usbd_ep_stall_set>
	usbd_dev->control_state.state = IDLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80017da:	bd10      	pop	{r4, pc}

080017dc <usb_control_setup_write>:
	}
}

static void usb_control_setup_write(usbd_device *usbd_dev,
				    struct usb_setup_data *req)
{
 80017dc:	b508      	push	{r3, lr}
	if (req->wLength > usbd_dev->ctrl_buf_len) {
 80017de:	88ca      	ldrh	r2, [r1, #6]
 80017e0:	8a83      	ldrh	r3, [r0, #20]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d80c      	bhi.n	8001800 <usb_control_setup_write+0x24>
		stall_transaction(usbd_dev);
		return;
	}

	/* Buffer into which to write received data. */
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 80017e6:	6903      	ldr	r3, [r0, #16]
 80017e8:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	8783      	strh	r3, [r0, #60]	; 0x3c
	/* Wait for DATA OUT stage. */
	if (req->wLength > usbd_dev->desc->bMaxPacketSize0) {
 80017ee:	88ca      	ldrh	r2, [r1, #6]
 80017f0:	6803      	ldr	r3, [r0, #0]
 80017f2:	79db      	ldrb	r3, [r3, #7]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d806      	bhi.n	8001806 <usb_control_setup_write+0x2a>
		usbd_dev->control_state.state = DATA_OUT;
	} else {
		usbd_dev->control_state.state = LAST_DATA_OUT;
 80017f8:	2306      	movs	r3, #6
 80017fa:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
	}
}
 80017fe:	bd08      	pop	{r3, pc}
		stall_transaction(usbd_dev);
 8001800:	f7ff ffe2 	bl	80017c8 <stall_transaction>
		return;
 8001804:	e7fb      	b.n	80017fe <usb_control_setup_write+0x22>
		usbd_dev->control_state.state = DATA_OUT;
 8001806:	2305      	movs	r3, #5
 8001808:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 800180c:	e7f7      	b.n	80017fe <usb_control_setup_write+0x22>

0800180e <usb_control_recv_chunk>:
{
 800180e:	b570      	push	{r4, r5, r6, lr}
 8001810:	4605      	mov	r5, r0
	uint16_t packetsize = MIN(usbd_dev->desc->bMaxPacketSize0,
 8001812:	8ec4      	ldrh	r4, [r0, #54]	; 0x36
 8001814:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
 8001816:	1aa4      	subs	r4, r4, r2
 8001818:	6803      	ldr	r3, [r0, #0]
 800181a:	79db      	ldrb	r3, [r3, #7]
 800181c:	429c      	cmp	r4, r3
 800181e:	bfa8      	it	ge
 8001820:	461c      	movge	r4, r3
 8001822:	b2a6      	uxth	r6, r4
				       usbd_dev->control_state.ctrl_buf +
 8001824:	6b81      	ldr	r1, [r0, #56]	; 0x38
	uint16_t size = usbd_ep_read_packet(usbd_dev, 0,
 8001826:	4633      	mov	r3, r6
 8001828:	440a      	add	r2, r1
 800182a:	2100      	movs	r1, #0
 800182c:	f7ff ffba 	bl	80017a4 <usbd_ep_read_packet>
	if (size != packetsize) {
 8001830:	4286      	cmp	r6, r0
 8001832:	d104      	bne.n	800183e <usb_control_recv_chunk+0x30>
	usbd_dev->control_state.ctrl_len += size;
 8001834:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 8001836:	4418      	add	r0, r3
 8001838:	87a8      	strh	r0, [r5, #60]	; 0x3c
 800183a:	b2a0      	uxth	r0, r4
}
 800183c:	bd70      	pop	{r4, r5, r6, pc}
		stall_transaction(usbd_dev);
 800183e:	4628      	mov	r0, r5
 8001840:	f7ff ffc2 	bl	80017c8 <stall_transaction>
		return -1;
 8001844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001848:	e7f8      	b.n	800183c <usb_control_recv_chunk+0x2e>

0800184a <usb_control_send_chunk>:
{
 800184a:	b510      	push	{r4, lr}
 800184c:	4604      	mov	r4, r0
	if (usbd_dev->desc->bMaxPacketSize0 <
 800184e:	6803      	ldr	r3, [r0, #0]
 8001850:	79da      	ldrb	r2, [r3, #7]
			usbd_dev->control_state.ctrl_len) {
 8001852:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
	if (usbd_dev->desc->bMaxPacketSize0 <
 8001854:	429a      	cmp	r2, r3
 8001856:	d30a      	bcc.n	800186e <usb_control_send_chunk+0x24>
		usbd_ep_write_packet(usbd_dev, 0,
 8001858:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800185a:	2100      	movs	r1, #0
 800185c:	f7ff ff9c 	bl	8001798 <usbd_ep_write_packet>
		usbd_dev->control_state.state = LAST_DATA_IN;
 8001860:	2303      	movs	r3, #3
 8001862:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		usbd_dev->control_state.ctrl_len = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	87a3      	strh	r3, [r4, #60]	; 0x3c
		usbd_dev->control_state.ctrl_buf = NULL;
 800186a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800186c:	bd10      	pop	{r4, pc}
		usbd_ep_write_packet(usbd_dev, 0,
 800186e:	4613      	mov	r3, r2
 8001870:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001872:	2100      	movs	r1, #0
 8001874:	f7ff ff90 	bl	8001798 <usbd_ep_write_packet>
		usbd_dev->control_state.state = DATA_IN;
 8001878:	2302      	movs	r3, #2
 800187a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			usbd_dev->desc->bMaxPacketSize0;
 800187e:	6822      	ldr	r2, [r4, #0]
 8001880:	79d1      	ldrb	r1, [r2, #7]
		usbd_dev->control_state.ctrl_buf +=
 8001882:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001884:	440b      	add	r3, r1
 8001886:	63a3      	str	r3, [r4, #56]	; 0x38
			usbd_dev->desc->bMaxPacketSize0;
 8001888:	79d2      	ldrb	r2, [r2, #7]
		usbd_dev->control_state.ctrl_len -=
 800188a:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 800188c:	1a9b      	subs	r3, r3, r2
 800188e:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8001890:	e7ec      	b.n	800186c <usb_control_send_chunk+0x22>

08001892 <usb_control_request_dispatch>:
{
 8001892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	4605      	mov	r5, r0
 800189a:	4688      	mov	r8, r1
	struct user_control_callback *cb = usbd_dev->user_control_callback;
 800189c:	f100 0744 	add.w	r7, r0, #68	; 0x44
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 80018a0:	2400      	movs	r4, #0
 80018a2:	e000      	b.n	80018a6 <usb_control_request_dispatch+0x14>
 80018a4:	3401      	adds	r4, #1
 80018a6:	2c03      	cmp	r4, #3
 80018a8:	dc18      	bgt.n	80018dc <usb_control_request_dispatch+0x4a>
		if (cb[i].cb == NULL) {
 80018aa:	eb07 02c4 	add.w	r2, r7, r4, lsl #3
 80018ae:	f857 6034 	ldr.w	r6, [r7, r4, lsl #3]
 80018b2:	b19e      	cbz	r6, 80018dc <usb_control_request_dispatch+0x4a>
		if ((req->bmRequestType & cb[i].type_mask) == cb[i].type) {
 80018b4:	f898 3000 	ldrb.w	r3, [r8]
 80018b8:	7951      	ldrb	r1, [r2, #5]
 80018ba:	400b      	ands	r3, r1
 80018bc:	7912      	ldrb	r2, [r2, #4]
 80018be:	4293      	cmp	r3, r2
 80018c0:	d1f0      	bne.n	80018a4 <usb_control_request_dispatch+0x12>
			result = cb[i].cb(usbd_dev, req,
 80018c2:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 80018cc:	f105 0238 	add.w	r2, r5, #56	; 0x38
 80018d0:	4641      	mov	r1, r8
 80018d2:	4628      	mov	r0, r5
 80018d4:	47b0      	blx	r6
			if (result == USBD_REQ_HANDLED ||
 80018d6:	2801      	cmp	r0, #1
 80018d8:	d8e4      	bhi.n	80018a4 <usb_control_request_dispatch+0x12>
 80018da:	e007      	b.n	80018ec <usb_control_request_dispatch+0x5a>
	return _usbd_standard_request(usbd_dev, req,
 80018dc:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 80018e0:	f105 0238 	add.w	r2, r5, #56	; 0x38
 80018e4:	4641      	mov	r1, r8
 80018e6:	4628      	mov	r0, r5
 80018e8:	f000 fb43 	bl	8001f72 <_usbd_standard_request>
}
 80018ec:	b002      	add	sp, #8
 80018ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080018f2 <usb_control_setup_read>:
{
 80018f2:	b510      	push	{r4, lr}
 80018f4:	4604      	mov	r4, r0
	usbd_dev->control_state.ctrl_buf = usbd_dev->ctrl_buf;
 80018f6:	6903      	ldr	r3, [r0, #16]
 80018f8:	6383      	str	r3, [r0, #56]	; 0x38
	usbd_dev->control_state.ctrl_len = req->wLength;
 80018fa:	88cb      	ldrh	r3, [r1, #6]
 80018fc:	8783      	strh	r3, [r0, #60]	; 0x3c
	if (usb_control_request_dispatch(usbd_dev, req)) {
 80018fe:	f7ff ffc8 	bl	8001892 <usb_control_request_dispatch>
 8001902:	b178      	cbz	r0, 8001924 <usb_control_setup_read+0x32>
		if (usbd_dev->control_state.ctrl_len) {
 8001904:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
 8001906:	b11b      	cbz	r3, 8001910 <usb_control_setup_read+0x1e>
			usb_control_send_chunk(usbd_dev);
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff ff9e 	bl	800184a <usb_control_send_chunk>
}
 800190e:	bd10      	pop	{r4, pc}
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 8001910:	2300      	movs	r3, #0
 8001912:	461a      	mov	r2, r3
 8001914:	4619      	mov	r1, r3
 8001916:	4620      	mov	r0, r4
 8001918:	f7ff ff3e 	bl	8001798 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 800191c:	2304      	movs	r3, #4
 800191e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001922:	e7f4      	b.n	800190e <usb_control_setup_read+0x1c>
		stall_transaction(usbd_dev);
 8001924:	4620      	mov	r0, r4
 8001926:	f7ff ff4f 	bl	80017c8 <stall_transaction>
}
 800192a:	e7f0      	b.n	800190e <usb_control_setup_read+0x1c>

0800192c <usbd_register_control_callback>:
{
 800192c:	b430      	push	{r4, r5}
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 800192e:	2400      	movs	r4, #0
 8001930:	2c03      	cmp	r4, #3
 8001932:	dc10      	bgt.n	8001956 <usbd_register_control_callback+0x2a>
		if (usbd_dev->user_control_callback[i].cb) {
 8001934:	f104 0508 	add.w	r5, r4, #8
 8001938:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 800193c:	686d      	ldr	r5, [r5, #4]
 800193e:	b10d      	cbz	r5, 8001944 <usbd_register_control_callback+0x18>
	for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001940:	3401      	adds	r4, #1
 8001942:	e7f5      	b.n	8001930 <usbd_register_control_callback+0x4>
		usbd_dev->user_control_callback[i].type = type;
 8001944:	3408      	adds	r4, #8
 8001946:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800194a:	7221      	strb	r1, [r4, #8]
		usbd_dev->user_control_callback[i].type_mask = type_mask;
 800194c:	7262      	strb	r2, [r4, #9]
		usbd_dev->user_control_callback[i].cb = callback;
 800194e:	6063      	str	r3, [r4, #4]
		return 0;
 8001950:	2000      	movs	r0, #0
}
 8001952:	bc30      	pop	{r4, r5}
 8001954:	4770      	bx	lr
	return -1;
 8001956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800195a:	e7fa      	b.n	8001952 <usbd_register_control_callback+0x26>

0800195c <_usbd_control_setup>:

/* Do not appear to belong to the API, so are omitted from docs */
/**@}*/

void _usbd_control_setup(usbd_device *usbd_dev, uint8_t ea)
{
 800195c:	b538      	push	{r3, r4, r5, lr}
 800195e:	4604      	mov	r4, r0
	struct usb_setup_data *req = &usbd_dev->control_state.req;
 8001960:	f100 0530 	add.w	r5, r0, #48	; 0x30
	(void)ea;

	usbd_dev->control_state.complete = NULL;
 8001964:	2100      	movs	r1, #0
 8001966:	6401      	str	r1, [r0, #64]	; 0x40

	if (usbd_ep_read_packet(usbd_dev, 0, req, 8) != 8) {
 8001968:	2308      	movs	r3, #8
 800196a:	462a      	mov	r2, r5
 800196c:	f7ff ff1a 	bl	80017a4 <usbd_ep_read_packet>
 8001970:	2808      	cmp	r0, #8
 8001972:	d10a      	bne.n	800198a <_usbd_control_setup+0x2e>
		stall_transaction(usbd_dev);
		return;
	}

	if (req->wLength == 0) {
 8001974:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001976:	b163      	cbz	r3, 8001992 <_usbd_control_setup+0x36>
		usb_control_setup_read(usbd_dev, req);
	} else if (req->bmRequestType & 0x80) {
 8001978:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0d      	blt.n	800199c <_usbd_control_setup+0x40>
		usb_control_setup_read(usbd_dev, req);
	} else {
		usb_control_setup_write(usbd_dev, req);
 8001980:	4629      	mov	r1, r5
 8001982:	4620      	mov	r0, r4
 8001984:	f7ff ff2a 	bl	80017dc <usb_control_setup_write>
 8001988:	e002      	b.n	8001990 <_usbd_control_setup+0x34>
		stall_transaction(usbd_dev);
 800198a:	4620      	mov	r0, r4
 800198c:	f7ff ff1c 	bl	80017c8 <stall_transaction>
	}
}
 8001990:	bd38      	pop	{r3, r4, r5, pc}
		usb_control_setup_read(usbd_dev, req);
 8001992:	4629      	mov	r1, r5
 8001994:	4620      	mov	r0, r4
 8001996:	f7ff ffac 	bl	80018f2 <usb_control_setup_read>
 800199a:	e7f9      	b.n	8001990 <_usbd_control_setup+0x34>
		usb_control_setup_read(usbd_dev, req);
 800199c:	4629      	mov	r1, r5
 800199e:	4620      	mov	r0, r4
 80019a0:	f7ff ffa7 	bl	80018f2 <usb_control_setup_read>
 80019a4:	e7f4      	b.n	8001990 <_usbd_control_setup+0x34>

080019a6 <_usbd_control_out>:

void _usbd_control_out(usbd_device *usbd_dev, uint8_t ea)
{
 80019a6:	b510      	push	{r4, lr}
 80019a8:	4604      	mov	r4, r0
	(void)ea;

	switch (usbd_dev->control_state.state) {
 80019aa:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d015      	beq.n	80019de <_usbd_control_out+0x38>
 80019b2:	2b07      	cmp	r3, #7
 80019b4:	d02b      	beq.n	8001a0e <_usbd_control_out+0x68>
 80019b6:	2b05      	cmp	r3, #5
 80019b8:	d002      	beq.n	80019c0 <_usbd_control_out+0x1a>
					&(usbd_dev->control_state.req));
		}
		usbd_dev->control_state.complete = NULL;
		break;
	default:
		stall_transaction(usbd_dev);
 80019ba:	f7ff ff05 	bl	80017c8 <stall_transaction>
	}
}
 80019be:	e036      	b.n	8001a2e <_usbd_control_out+0x88>
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 80019c0:	f7ff ff25 	bl	800180e <usb_control_recv_chunk>
 80019c4:	2800      	cmp	r0, #0
 80019c6:	db32      	blt.n	8001a2e <_usbd_control_out+0x88>
		if ((usbd_dev->control_state.req.wLength -
 80019c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
					usbd_dev->control_state.ctrl_len) <=
 80019ca:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
		if ((usbd_dev->control_state.req.wLength -
 80019cc:	1a9b      	subs	r3, r3, r2
					usbd_dev->desc->bMaxPacketSize0) {
 80019ce:	6822      	ldr	r2, [r4, #0]
 80019d0:	79d2      	ldrb	r2, [r2, #7]
		if ((usbd_dev->control_state.req.wLength -
 80019d2:	4293      	cmp	r3, r2
 80019d4:	dc2b      	bgt.n	8001a2e <_usbd_control_out+0x88>
			usbd_dev->control_state.state = LAST_DATA_OUT;
 80019d6:	2306      	movs	r3, #6
 80019d8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80019dc:	e027      	b.n	8001a2e <_usbd_control_out+0x88>
		if (usb_control_recv_chunk(usbd_dev) < 0) {
 80019de:	f7ff ff16 	bl	800180e <usb_control_recv_chunk>
 80019e2:	2800      	cmp	r0, #0
 80019e4:	db23      	blt.n	8001a2e <_usbd_control_out+0x88>
		if (usb_control_request_dispatch(usbd_dev,
 80019e6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff ff51 	bl	8001892 <usb_control_request_dispatch>
 80019f0:	b148      	cbz	r0, 8001a06 <_usbd_control_out+0x60>
			usbd_ep_write_packet(usbd_dev, 0, NULL, 0);
 80019f2:	2300      	movs	r3, #0
 80019f4:	461a      	mov	r2, r3
 80019f6:	4619      	mov	r1, r3
 80019f8:	4620      	mov	r0, r4
 80019fa:	f7ff fecd 	bl	8001798 <usbd_ep_write_packet>
			usbd_dev->control_state.state = STATUS_IN;
 80019fe:	2304      	movs	r3, #4
 8001a00:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8001a04:	e013      	b.n	8001a2e <_usbd_control_out+0x88>
			stall_transaction(usbd_dev);
 8001a06:	4620      	mov	r0, r4
 8001a08:	f7ff fede 	bl	80017c8 <stall_transaction>
 8001a0c:	e00f      	b.n	8001a2e <_usbd_control_out+0x88>
		usbd_ep_read_packet(usbd_dev, 0, NULL, 0);
 8001a0e:	2300      	movs	r3, #0
 8001a10:	461a      	mov	r2, r3
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7ff fec6 	bl	80017a4 <usbd_ep_read_packet>
		usbd_dev->control_state.state = IDLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		if (usbd_dev->control_state.complete) {
 8001a1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a20:	b11b      	cbz	r3, 8001a2a <_usbd_control_out+0x84>
			usbd_dev->control_state.complete(usbd_dev,
 8001a22:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8001a26:	4620      	mov	r0, r4
 8001a28:	4798      	blx	r3
		usbd_dev->control_state.complete = NULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001a2e:	bd10      	pop	{r4, pc}

08001a30 <_usbd_control_in>:
void _usbd_control_in(usbd_device *usbd_dev, uint8_t ea)
{
	(void)ea;
	struct usb_setup_data *req = &(usbd_dev->control_state.req);

	switch (usbd_dev->control_state.state) {
 8001a30:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8001a34:	2b03      	cmp	r3, #3
 8001a36:	d00b      	beq.n	8001a50 <_usbd_control_in+0x20>
{
 8001a38:	b510      	push	{r4, lr}
 8001a3a:	4604      	mov	r4, r0
	switch (usbd_dev->control_state.state) {
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d00b      	beq.n	8001a58 <_usbd_control_in+0x28>
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d002      	beq.n	8001a4a <_usbd_control_in+0x1a>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
		}
		usbd_dev->control_state.state = IDLE;
		break;
	default:
		stall_transaction(usbd_dev);
 8001a44:	f7ff fec0 	bl	80017c8 <stall_transaction>
	}
}
 8001a48:	e001      	b.n	8001a4e <_usbd_control_in+0x1e>
		usb_control_send_chunk(usbd_dev);
 8001a4a:	f7ff fefe 	bl	800184a <usb_control_send_chunk>
}
 8001a4e:	bd10      	pop	{r4, pc}
		usbd_dev->control_state.state = STATUS_OUT;
 8001a50:	2307      	movs	r3, #7
 8001a52:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8001a56:	4770      	bx	lr
		if (usbd_dev->control_state.complete) {
 8001a58:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001a5a:	b113      	cbz	r3, 8001a62 <_usbd_control_in+0x32>
			usbd_dev->control_state.complete(usbd_dev,
 8001a5c:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8001a60:	4798      	blx	r3
		if ((req->bmRequestType == 0) &&
 8001a62:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8001a66:	b953      	cbnz	r3, 8001a7e <_usbd_control_in+0x4e>
		    (req->bRequest == USB_REQ_SET_ADDRESS)) {
 8001a68:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
		if ((req->bmRequestType == 0) &&
 8001a6c:	2b05      	cmp	r3, #5
 8001a6e:	d106      	bne.n	8001a7e <_usbd_control_in+0x4e>
			usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001a70:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8001a78:	b2c9      	uxtb	r1, r1
 8001a7a:	4620      	mov	r0, r4
 8001a7c:	4798      	blx	r3
		usbd_dev->control_state.state = IDLE;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
		break;
 8001a84:	e7e3      	b.n	8001a4e <_usbd_control_in+0x1e>

08001a86 <usb_descriptor_type>:
}
 8001a86:	0a00      	lsrs	r0, r0, #8
 8001a88:	4770      	bx	lr

08001a8a <usb_descriptor_index>:
}
 8001a8a:	b2c0      	uxtb	r0, r0
 8001a8c:	4770      	bx	lr

08001a8e <usb_standard_set_address>:
{
 8001a8e:	b508      	push	{r3, lr}
	if ((req->bmRequestType != 0) || (req->wValue >= 128)) {
 8001a90:	780b      	ldrb	r3, [r1, #0]
 8001a92:	b973      	cbnz	r3, 8001ab2 <usb_standard_set_address+0x24>
 8001a94:	884b      	ldrh	r3, [r1, #2]
 8001a96:	2b7f      	cmp	r3, #127	; 0x7f
 8001a98:	d80d      	bhi.n	8001ab6 <usb_standard_set_address+0x28>
	usbd_dev->current_address = req->wValue;
 8001a9a:	7583      	strb	r3, [r0, #22]
	if (usbd_dev->driver->set_address_before_status) {
 8001a9c:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8001aa0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001aa4:	b14a      	cbz	r2, 8001aba <usb_standard_set_address+0x2c>
		usbd_dev->driver->set_address(usbd_dev, req->wValue);
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	8849      	ldrh	r1, [r1, #2]
 8001aaa:	b2c9      	uxtb	r1, r1
 8001aac:	4798      	blx	r3
	return 1;
 8001aae:	2001      	movs	r0, #1
 8001ab0:	e000      	b.n	8001ab4 <usb_standard_set_address+0x26>
		return 0;
 8001ab2:	2000      	movs	r0, #0
}
 8001ab4:	bd08      	pop	{r3, pc}
		return 0;
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	e7fc      	b.n	8001ab4 <usb_standard_set_address+0x26>
	return 1;
 8001aba:	2001      	movs	r0, #1
 8001abc:	e7fa      	b.n	8001ab4 <usb_standard_set_address+0x26>

08001abe <usb_standard_set_configuration>:
{
 8001abe:	b570      	push	{r4, r5, r6, lr}
	if(req->wValue > 0) {
 8001ac0:	884c      	ldrh	r4, [r1, #2]
 8001ac2:	b974      	cbnz	r4, 8001ae2 <usb_standard_set_configuration+0x24>
	int found_index = -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	usbd_dev->current_config = found_index + 1;
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	75c3      	strb	r3, [r0, #23]
	if (usbd_dev->current_config > 0) {
 8001ace:	b35b      	cbz	r3, 8001b28 <usb_standard_set_configuration+0x6a>
		cfg = &usbd_dev->config[usbd_dev->current_config - 1];
 8001ad0:	6842      	ldr	r2, [r0, #4]
 8001ad2:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8001ad6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001ada:	3b0d      	subs	r3, #13
 8001adc:	4413      	add	r3, r2
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001ade:	2200      	movs	r2, #0
 8001ae0:	e016      	b.n	8001b10 <usb_standard_set_configuration+0x52>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	6802      	ldr	r2, [r0, #0]
 8001ae6:	7c52      	ldrb	r2, [r2, #17]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d90a      	bls.n	8001b02 <usb_standard_set_configuration+0x44>
			if (req->wValue == usbd_dev->config[i].bConfigurationValue) {
 8001aec:	6842      	ldr	r2, [r0, #4]
 8001aee:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8001af2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001af6:	442a      	add	r2, r5
 8001af8:	7952      	ldrb	r2, [r2, #5]
 8001afa:	4294      	cmp	r4, r2
 8001afc:	d003      	beq.n	8001b06 <usb_standard_set_configuration+0x48>
		for (i = 0; i < usbd_dev->desc->bNumConfigurations; i++) {
 8001afe:	3301      	adds	r3, #1
 8001b00:	e7f0      	b.n	8001ae4 <usb_standard_set_configuration+0x26>
	int found_index = -1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		if (found_index < 0) {
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	dade      	bge.n	8001ac8 <usb_standard_set_configuration+0xa>
			return USBD_REQ_NOTSUPP;
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	e033      	b.n	8001b76 <usb_standard_set_configuration+0xb8>
		for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001b0e:	3201      	adds	r2, #1
 8001b10:	791c      	ldrb	r4, [r3, #4]
 8001b12:	4294      	cmp	r4, r2
 8001b14:	d908      	bls.n	8001b28 <usb_standard_set_configuration+0x6a>
			if (cfg->interface[i].cur_altsetting) {
 8001b16:	f8d3 5009 	ldr.w	r5, [r3, #9]
 8001b1a:	0114      	lsls	r4, r2, #4
 8001b1c:	592c      	ldr	r4, [r5, r4]
 8001b1e:	2c00      	cmp	r4, #0
 8001b20:	d0f5      	beq.n	8001b0e <usb_standard_set_configuration+0x50>
				*cfg->interface[i].cur_altsetting = 0;
 8001b22:	2500      	movs	r5, #0
 8001b24:	7025      	strb	r5, [r4, #0]
 8001b26:	e7f2      	b.n	8001b0e <usb_standard_set_configuration+0x50>
 8001b28:	460e      	mov	r6, r1
 8001b2a:	4604      	mov	r4, r0
	usbd_dev->driver->ep_reset(usbd_dev);
 8001b2c:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	4798      	blx	r3
	if (usbd_dev->user_callback_set_config[0]) {
 8001b34:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8001b38:	b10b      	cbz	r3, 8001b3e <usb_standard_set_configuration+0x80>
		for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e008      	b.n	8001b50 <usb_standard_set_configuration+0x92>
	return 1;
 8001b3e:	2001      	movs	r0, #1
 8001b40:	e019      	b.n	8001b76 <usb_standard_set_configuration+0xb8>
			usbd_dev->user_control_callback[i].cb = NULL;
 8001b42:	f103 0208 	add.w	r2, r3, #8
 8001b46:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	6051      	str	r1, [r2, #4]
		for (i = 0; i < MAX_USER_CONTROL_CALLBACK; i++) {
 8001b4e:	3301      	adds	r3, #1
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d9f6      	bls.n	8001b42 <usb_standard_set_configuration+0x84>
		for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001b54:	2500      	movs	r5, #0
 8001b56:	e000      	b.n	8001b5a <usb_standard_set_configuration+0x9c>
 8001b58:	3501      	adds	r5, #1
 8001b5a:	2d03      	cmp	r5, #3
 8001b5c:	d80a      	bhi.n	8001b74 <usb_standard_set_configuration+0xb6>
			if (usbd_dev->user_callback_set_config[i]) {
 8001b5e:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8001b62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f5      	beq.n	8001b58 <usb_standard_set_configuration+0x9a>
				usbd_dev->user_callback_set_config[i](usbd_dev,
 8001b6c:	8871      	ldrh	r1, [r6, #2]
 8001b6e:	4620      	mov	r0, r4
 8001b70:	4798      	blx	r3
 8001b72:	e7f1      	b.n	8001b58 <usb_standard_set_configuration+0x9a>
	return 1;
 8001b74:	2001      	movs	r0, #1
}
 8001b76:	bd70      	pop	{r4, r5, r6, pc}

08001b78 <usb_standard_get_configuration>:
	if (*len > 1) {
 8001b78:	8819      	ldrh	r1, [r3, #0]
 8001b7a:	2901      	cmp	r1, #1
 8001b7c:	d901      	bls.n	8001b82 <usb_standard_get_configuration+0xa>
		*len = 1;
 8001b7e:	2101      	movs	r1, #1
 8001b80:	8019      	strh	r1, [r3, #0]
	const struct usb_config_descriptor *cfg = &usbd_dev->config[usbd_dev->current_config - 1];
 8001b82:	6841      	ldr	r1, [r0, #4]
 8001b84:	7dc3      	ldrb	r3, [r0, #23]
 8001b86:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8001b8a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001b8e:	3b0d      	subs	r3, #13
 8001b90:	440b      	add	r3, r1
	(*buf)[0] = cfg->bConfigurationValue;
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	795b      	ldrb	r3, [r3, #5]
 8001b96:	7013      	strb	r3, [r2, #0]
}
 8001b98:	2001      	movs	r0, #1
 8001b9a:	4770      	bx	lr

08001b9c <usb_standard_set_interface>:
{
 8001b9c:	b570      	push	{r4, r5, r6, lr}
	const struct usb_config_descriptor *cfx = &usbd_dev->config[usbd_dev->current_config - 1];
 8001b9e:	6844      	ldr	r4, [r0, #4]
 8001ba0:	7dc2      	ldrb	r2, [r0, #23]
 8001ba2:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 8001ba6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8001baa:	3a0d      	subs	r2, #13
 8001bac:	4422      	add	r2, r4
	if (req->wIndex >= cfx->bNumInterfaces) {
 8001bae:	888c      	ldrh	r4, [r1, #4]
 8001bb0:	7915      	ldrb	r5, [r2, #4]
 8001bb2:	42ac      	cmp	r4, r5
 8001bb4:	d219      	bcs.n	8001bea <usb_standard_set_interface+0x4e>
	iface = &cfx->interface[req->wIndex];
 8001bb6:	f8d2 5009 	ldr.w	r5, [r2, #9]
 8001bba:	0124      	lsls	r4, r4, #4
 8001bbc:	192e      	adds	r6, r5, r4
	if (req->wValue >= iface->num_altsetting) {
 8001bbe:	884a      	ldrh	r2, [r1, #2]
 8001bc0:	7936      	ldrb	r6, [r6, #4]
 8001bc2:	42b2      	cmp	r2, r6
 8001bc4:	d213      	bcs.n	8001bee <usb_standard_set_interface+0x52>
	if (iface->cur_altsetting) {
 8001bc6:	592c      	ldr	r4, [r5, r4]
 8001bc8:	b15c      	cbz	r4, 8001be2 <usb_standard_set_interface+0x46>
		*iface->cur_altsetting = req->wValue;
 8001bca:	7022      	strb	r2, [r4, #0]
 8001bcc:	461c      	mov	r4, r3
	if (usbd_dev->user_callback_set_altsetting) {
 8001bce:	f8d0 30d4 	ldr.w	r3, [r0, #212]	; 0xd4
 8001bd2:	b113      	cbz	r3, 8001bda <usb_standard_set_interface+0x3e>
			usbd_dev->user_callback_set_altsetting(usbd_dev,
 8001bd4:	884a      	ldrh	r2, [r1, #2]
 8001bd6:	8889      	ldrh	r1, [r1, #4]
 8001bd8:	4798      	blx	r3
	*len = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	8023      	strh	r3, [r4, #0]
	return USBD_REQ_HANDLED;
 8001bde:	2001      	movs	r0, #1
 8001be0:	e004      	b.n	8001bec <usb_standard_set_interface+0x50>
	} else if (req->wValue > 0) {
 8001be2:	2a00      	cmp	r2, #0
 8001be4:	d0f2      	beq.n	8001bcc <usb_standard_set_interface+0x30>
		return USBD_REQ_NOTSUPP;
 8001be6:	2000      	movs	r0, #0
 8001be8:	e000      	b.n	8001bec <usb_standard_set_interface+0x50>
		return USBD_REQ_NOTSUPP;
 8001bea:	2000      	movs	r0, #0
}
 8001bec:	bd70      	pop	{r4, r5, r6, pc}
		return USBD_REQ_NOTSUPP;
 8001bee:	2000      	movs	r0, #0
 8001bf0:	e7fc      	b.n	8001bec <usb_standard_set_interface+0x50>

08001bf2 <usb_standard_get_interface>:
{
 8001bf2:	b430      	push	{r4, r5}
	const struct usb_config_descriptor *cfx = &usbd_dev->config[usbd_dev->current_config - 1];
 8001bf4:	6844      	ldr	r4, [r0, #4]
 8001bf6:	7dc0      	ldrb	r0, [r0, #23]
 8001bf8:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001bfc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8001c00:	380d      	subs	r0, #13
 8001c02:	4420      	add	r0, r4
	if (req->wIndex >= cfx->bNumInterfaces) {
 8001c04:	888d      	ldrh	r5, [r1, #4]
 8001c06:	7904      	ldrb	r4, [r0, #4]
 8001c08:	42a5      	cmp	r5, r4
 8001c0a:	d20f      	bcs.n	8001c2c <usb_standard_get_interface+0x3a>
	*len = 1;
 8001c0c:	2401      	movs	r4, #1
 8001c0e:	801c      	strh	r4, [r3, #0]
	cur_altsetting = cfx->interface[req->wIndex].cur_altsetting;
 8001c10:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8001c14:	888b      	ldrh	r3, [r1, #4]
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	58c3      	ldr	r3, [r0, r3]
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8001c1a:	b12b      	cbz	r3, 8001c28 <usb_standard_get_interface+0x36>
 8001c1c:	7819      	ldrb	r1, [r3, #0]
 8001c1e:	6813      	ldr	r3, [r2, #0]
 8001c20:	7019      	strb	r1, [r3, #0]
	return USBD_REQ_HANDLED;
 8001c22:	2001      	movs	r0, #1
}
 8001c24:	bc30      	pop	{r4, r5}
 8001c26:	4770      	bx	lr
	(*buf)[0] = (cur_altsetting) ? *cur_altsetting : 0;
 8001c28:	2100      	movs	r1, #0
 8001c2a:	e7f8      	b.n	8001c1e <usb_standard_get_interface+0x2c>
		return USBD_REQ_NOTSUPP;
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	e7f9      	b.n	8001c24 <usb_standard_get_interface+0x32>

08001c30 <usb_standard_device_get_status>:
	if (*len > 2) {
 8001c30:	8819      	ldrh	r1, [r3, #0]
 8001c32:	2902      	cmp	r1, #2
 8001c34:	d901      	bls.n	8001c3a <usb_standard_device_get_status+0xa>
		*len = 2;
 8001c36:	2102      	movs	r1, #2
 8001c38:	8019      	strh	r1, [r3, #0]
	(*buf)[0] = 0;
 8001c3a:	6811      	ldr	r1, [r2, #0]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	7053      	strb	r3, [r2, #1]
}
 8001c44:	2001      	movs	r0, #1
 8001c46:	4770      	bx	lr

08001c48 <usb_standard_interface_get_status>:
	if (*len > 2) {
 8001c48:	8819      	ldrh	r1, [r3, #0]
 8001c4a:	2902      	cmp	r1, #2
 8001c4c:	d901      	bls.n	8001c52 <usb_standard_interface_get_status+0xa>
		*len = 2;
 8001c4e:	2102      	movs	r1, #2
 8001c50:	8019      	strh	r1, [r3, #0]
	(*buf)[0] = 0;
 8001c52:	6811      	ldr	r1, [r2, #0]
 8001c54:	2300      	movs	r3, #0
 8001c56:	700b      	strb	r3, [r1, #0]
	(*buf)[1] = 0;
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	7053      	strb	r3, [r2, #1]
}
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	4770      	bx	lr

08001c60 <build_config_descriptor>:
{
 8001c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c64:	b089      	sub	sp, #36	; 0x24
 8001c66:	4617      	mov	r7, r2
 8001c68:	9207      	str	r2, [sp, #28]
 8001c6a:	461d      	mov	r5, r3
	const struct usb_config_descriptor *cfg = &usbd_dev->config[index];
 8001c6c:	6846      	ldr	r6, [r0, #4]
 8001c6e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8001c72:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8001c76:	1931      	adds	r1, r6, r4
 8001c78:	9104      	str	r1, [sp, #16]
	memcpy(buf, cfg, count = MIN(len, cfg->bLength));
 8001c7a:	5d33      	ldrb	r3, [r6, r4]
 8001c7c:	42ab      	cmp	r3, r5
 8001c7e:	bf28      	it	cs
 8001c80:	462b      	movcs	r3, r5
 8001c82:	469b      	mov	fp, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	4638      	mov	r0, r7
 8001c88:	f000 fc8d 	bl	80025a6 <memcpy>
	buf += count;
 8001c8c:	eb07 0a0b 	add.w	sl, r7, fp
	len -= count;
 8001c90:	eba5 050b 	sub.w	r5, r5, fp
 8001c94:	fa1f f985 	uxth.w	r9, r5
	totallen += cfg->bLength;
 8001c98:	5d33      	ldrb	r3, [r6, r4]
 8001c9a:	9301      	str	r3, [sp, #4]
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9306      	str	r3, [sp, #24]
 8001ca0:	e08c      	b.n	8001dbc <build_config_descriptor+0x15c>
			for (k = 0; k < iface->bNumEndpoints; k++) {
 8001ca2:	3501      	adds	r5, #1
 8001ca4:	b2ad      	uxth	r5, r5
 8001ca6:	9b02      	ldr	r3, [sp, #8]
 8001ca8:	791b      	ldrb	r3, [r3, #4]
 8001caa:	42ab      	cmp	r3, r5
 8001cac:	d93a      	bls.n	8001d24 <build_config_descriptor+0xc4>
				    &iface->endpoint[k];
 8001cae:	9b02      	ldr	r3, [sp, #8]
 8001cb0:	f8d3 8009 	ldr.w	r8, [r3, #9]
 8001cb4:	ebc5 1705 	rsb	r7, r5, r5, lsl #4
				const struct usb_endpoint_descriptor *ep =
 8001cb8:	eb08 0607 	add.w	r6, r8, r7
				memcpy(buf, ep, count = MIN(len, ep->bLength));
 8001cbc:	f818 4007 	ldrb.w	r4, [r8, r7]
 8001cc0:	454c      	cmp	r4, r9
 8001cc2:	bf28      	it	cs
 8001cc4:	464c      	movcs	r4, r9
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	4631      	mov	r1, r6
 8001cca:	4650      	mov	r0, sl
 8001ccc:	f000 fc6b 	bl	80025a6 <memcpy>
				buf += count;
 8001cd0:	44a2      	add	sl, r4
				len -= count;
 8001cd2:	eba9 0904 	sub.w	r9, r9, r4
 8001cd6:	fa1f f989 	uxth.w	r9, r9
				total += count;
 8001cda:	44a3      	add	fp, r4
 8001cdc:	fa1f fb8b 	uxth.w	fp, fp
				totallen += ep->bLength;
 8001ce0:	f818 3007 	ldrb.w	r3, [r8, r7]
 8001ce4:	9a01      	ldr	r2, [sp, #4]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	b29f      	uxth	r7, r3
 8001cea:	9701      	str	r7, [sp, #4]
				if (ep->extra) {
 8001cec:	f8d6 1007 	ldr.w	r1, [r6, #7]
 8001cf0:	2900      	cmp	r1, #0
 8001cf2:	d0d6      	beq.n	8001ca2 <build_config_descriptor+0x42>
					       count = MIN(len, ep->extralen));
 8001cf4:	f8d6 400b 	ldr.w	r4, [r6, #11]
 8001cf8:	454c      	cmp	r4, r9
 8001cfa:	bfa8      	it	ge
 8001cfc:	464c      	movge	r4, r9
 8001cfe:	b2a4      	uxth	r4, r4
					memcpy(buf, ep->extra,
 8001d00:	4622      	mov	r2, r4
 8001d02:	4650      	mov	r0, sl
 8001d04:	f000 fc4f 	bl	80025a6 <memcpy>
					buf += count;
 8001d08:	44a2      	add	sl, r4
					len -= count;
 8001d0a:	eba9 0904 	sub.w	r9, r9, r4
 8001d0e:	fa1f f989 	uxth.w	r9, r9
					total += count;
 8001d12:	44a3      	add	fp, r4
 8001d14:	fa1f fb8b 	uxth.w	fp, fp
					totallen += ep->extralen;
 8001d18:	f8d6 300b 	ldr.w	r3, [r6, #11]
 8001d1c:	443b      	add	r3, r7
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	e7be      	b.n	8001ca2 <build_config_descriptor+0x42>
		for (j = 0; j < cfg->interface[i].num_altsetting; j++) {
 8001d24:	9b03      	ldr	r3, [sp, #12]
 8001d26:	3301      	adds	r3, #1
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	9303      	str	r3, [sp, #12]
 8001d2c:	9b04      	ldr	r3, [sp, #16]
 8001d2e:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8001d32:	9a05      	ldr	r2, [sp, #20]
 8001d34:	4413      	add	r3, r2
 8001d36:	791a      	ldrb	r2, [r3, #4]
 8001d38:	9903      	ldr	r1, [sp, #12]
 8001d3a:	428a      	cmp	r2, r1
 8001d3c:	d93a      	bls.n	8001db4 <build_config_descriptor+0x154>
					&cfg->interface[i].altsetting[j];
 8001d3e:	68de      	ldr	r6, [r3, #12]
 8001d40:	9b03      	ldr	r3, [sp, #12]
 8001d42:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8001d46:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
			const struct usb_interface_descriptor *iface =
 8001d4a:	1973      	adds	r3, r6, r5
 8001d4c:	461f      	mov	r7, r3
 8001d4e:	9302      	str	r3, [sp, #8]
			memcpy(buf, iface, count = MIN(len, iface->bLength));
 8001d50:	5d74      	ldrb	r4, [r6, r5]
 8001d52:	454c      	cmp	r4, r9
 8001d54:	bf28      	it	cs
 8001d56:	464c      	movcs	r4, r9
 8001d58:	4622      	mov	r2, r4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4650      	mov	r0, sl
 8001d5e:	f000 fc22 	bl	80025a6 <memcpy>
			buf += count;
 8001d62:	44a2      	add	sl, r4
			len -= count;
 8001d64:	eba9 0904 	sub.w	r9, r9, r4
 8001d68:	fa1f f989 	uxth.w	r9, r9
			total += count;
 8001d6c:	44a3      	add	fp, r4
 8001d6e:	fa1f fb8b 	uxth.w	fp, fp
			totallen += iface->bLength;
 8001d72:	5d73      	ldrb	r3, [r6, r5]
 8001d74:	9a01      	ldr	r2, [sp, #4]
 8001d76:	4413      	add	r3, r2
 8001d78:	b29e      	uxth	r6, r3
 8001d7a:	9601      	str	r6, [sp, #4]
			if (iface->extra) {
 8001d7c:	f8d7 100d 	ldr.w	r1, [r7, #13]
 8001d80:	b1b1      	cbz	r1, 8001db0 <build_config_descriptor+0x150>
				       count = MIN(len, iface->extralen));
 8001d82:	f8d7 4011 	ldr.w	r4, [r7, #17]
 8001d86:	454c      	cmp	r4, r9
 8001d88:	bfa8      	it	ge
 8001d8a:	464c      	movge	r4, r9
 8001d8c:	b2a4      	uxth	r4, r4
				memcpy(buf, iface->extra,
 8001d8e:	4622      	mov	r2, r4
 8001d90:	4650      	mov	r0, sl
 8001d92:	f000 fc08 	bl	80025a6 <memcpy>
				buf += count;
 8001d96:	44a2      	add	sl, r4
				len -= count;
 8001d98:	eba9 0904 	sub.w	r9, r9, r4
 8001d9c:	fa1f f989 	uxth.w	r9, r9
				total += count;
 8001da0:	44a3      	add	fp, r4
 8001da2:	fa1f fb8b 	uxth.w	fp, fp
				totallen += iface->extralen;
 8001da6:	f8d7 3011 	ldr.w	r3, [r7, #17]
 8001daa:	4433      	add	r3, r6
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	9301      	str	r3, [sp, #4]
{
 8001db0:	2500      	movs	r5, #0
 8001db2:	e778      	b.n	8001ca6 <build_config_descriptor+0x46>
	for (i = 0; i < cfg->bNumInterfaces; i++) {
 8001db4:	9b06      	ldr	r3, [sp, #24]
 8001db6:	3301      	adds	r3, #1
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	9306      	str	r3, [sp, #24]
 8001dbc:	9b04      	ldr	r3, [sp, #16]
 8001dbe:	791b      	ldrb	r3, [r3, #4]
 8001dc0:	9a06      	ldr	r2, [sp, #24]
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d921      	bls.n	8001e0a <build_config_descriptor+0x1aa>
		if (cfg->interface[i].iface_assoc) {
 8001dc6:	9b04      	ldr	r3, [sp, #16]
 8001dc8:	f8d3 3009 	ldr.w	r3, [r3, #9]
 8001dcc:	9a06      	ldr	r2, [sp, #24]
 8001dce:	0112      	lsls	r2, r2, #4
 8001dd0:	9205      	str	r2, [sp, #20]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	689d      	ldr	r5, [r3, #8]
 8001dd6:	b1ad      	cbz	r5, 8001e04 <build_config_descriptor+0x1a4>
			memcpy(buf, assoc, count = MIN(len, assoc->bLength));
 8001dd8:	782c      	ldrb	r4, [r5, #0]
 8001dda:	454c      	cmp	r4, r9
 8001ddc:	bf28      	it	cs
 8001dde:	464c      	movcs	r4, r9
 8001de0:	4622      	mov	r2, r4
 8001de2:	4629      	mov	r1, r5
 8001de4:	4650      	mov	r0, sl
 8001de6:	f000 fbde 	bl	80025a6 <memcpy>
			buf += count;
 8001dea:	44a2      	add	sl, r4
			len -= count;
 8001dec:	eba9 0904 	sub.w	r9, r9, r4
 8001df0:	fa1f f989 	uxth.w	r9, r9
			total += count;
 8001df4:	445c      	add	r4, fp
 8001df6:	fa1f fb84 	uxth.w	fp, r4
			totallen += assoc->bLength;
 8001dfa:	782b      	ldrb	r3, [r5, #0]
 8001dfc:	9a01      	ldr	r2, [sp, #4]
 8001dfe:	4413      	add	r3, r2
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	9301      	str	r3, [sp, #4]
{
 8001e04:	2300      	movs	r3, #0
 8001e06:	9303      	str	r3, [sp, #12]
 8001e08:	e790      	b.n	8001d2c <build_config_descriptor+0xcc>
	*(uint16_t *)(tmpbuf + 2) = totallen;
 8001e0a:	9b07      	ldr	r3, [sp, #28]
 8001e0c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001e10:	805a      	strh	r2, [r3, #2]
}
 8001e12:	4658      	mov	r0, fp
 8001e14:	b009      	add	sp, #36	; 0x24
 8001e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001e1a <usb_standard_get_descriptor>:
{
 8001e1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e1e:	4605      	mov	r5, r0
 8001e20:	460f      	mov	r7, r1
 8001e22:	4691      	mov	r9, r2
 8001e24:	461e      	mov	r6, r3
	descr_idx = usb_descriptor_index(req->wValue);
 8001e26:	884c      	ldrh	r4, [r1, #2]
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f7ff fe2e 	bl	8001a8a <usb_descriptor_index>
 8001e2e:	4680      	mov	r8, r0
	switch (usb_descriptor_type(req->wValue)) {
 8001e30:	4620      	mov	r0, r4
 8001e32:	f7ff fe28 	bl	8001a86 <usb_descriptor_type>
 8001e36:	2802      	cmp	r0, #2
 8001e38:	d011      	beq.n	8001e5e <usb_standard_get_descriptor+0x44>
 8001e3a:	2803      	cmp	r0, #3
 8001e3c:	d01b      	beq.n	8001e76 <usb_standard_get_descriptor+0x5c>
 8001e3e:	2801      	cmp	r0, #1
 8001e40:	d001      	beq.n	8001e46 <usb_standard_get_descriptor+0x2c>
	return USBD_REQ_NOTSUPP;
 8001e42:	2000      	movs	r0, #0
 8001e44:	e009      	b.n	8001e5a <usb_standard_get_descriptor+0x40>
		*buf = (uint8_t *) usbd_dev->desc;
 8001e46:	682b      	ldr	r3, [r5, #0]
 8001e48:	f8c9 3000 	str.w	r3, [r9]
		*len = MIN(*len, usbd_dev->desc->bLength);
 8001e4c:	682b      	ldr	r3, [r5, #0]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	8832      	ldrh	r2, [r6, #0]
 8001e52:	4293      	cmp	r3, r2
 8001e54:	bf28      	it	cs
 8001e56:	4613      	movcs	r3, r2
 8001e58:	8033      	strh	r3, [r6, #0]
}
 8001e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		*buf = usbd_dev->ctrl_buf;
 8001e5e:	692a      	ldr	r2, [r5, #16]
 8001e60:	f8c9 2000 	str.w	r2, [r9]
		*len = build_config_descriptor(usbd_dev, descr_idx, *buf, *len);
 8001e64:	8833      	ldrh	r3, [r6, #0]
 8001e66:	fa5f f188 	uxtb.w	r1, r8
 8001e6a:	4628      	mov	r0, r5
 8001e6c:	f7ff fef8 	bl	8001c60 <build_config_descriptor>
 8001e70:	8030      	strh	r0, [r6, #0]
		return USBD_REQ_HANDLED;
 8001e72:	2001      	movs	r0, #1
 8001e74:	e7f1      	b.n	8001e5a <usb_standard_get_descriptor+0x40>
		sd = (struct usb_string_descriptor *)usbd_dev->ctrl_buf;
 8001e76:	692c      	ldr	r4, [r5, #16]
		if (descr_idx == 0) {
 8001e78:	f1b8 0f00 	cmp.w	r8, #0
 8001e7c:	d10f      	bne.n	8001e9e <usb_standard_get_descriptor+0x84>
			sd->wData[0] = USB_LANGID_ENGLISH_US;
 8001e7e:	2309      	movs	r3, #9
 8001e80:	70a3      	strb	r3, [r4, #2]
 8001e82:	2304      	movs	r3, #4
 8001e84:	70e3      	strb	r3, [r4, #3]
			sd->bLength = sizeof(sd->bLength) +
 8001e86:	7023      	strb	r3, [r4, #0]
			*len = MIN(*len, sd->bLength);
 8001e88:	8833      	ldrh	r3, [r6, #0]
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	bf28      	it	cs
 8001e8e:	2304      	movcs	r3, #4
 8001e90:	8033      	strh	r3, [r6, #0]
		sd->bDescriptorType = USB_DT_STRING;
 8001e92:	2303      	movs	r3, #3
 8001e94:	7063      	strb	r3, [r4, #1]
		*buf = (uint8_t *)sd;
 8001e96:	f8c9 4000 	str.w	r4, [r9]
		return USBD_REQ_HANDLED;
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	e7dd      	b.n	8001e5a <usb_standard_get_descriptor+0x40>
			array_idx = descr_idx - 1;
 8001e9e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
			if (!usbd_dev->strings) {
 8001ea2:	68ab      	ldr	r3, [r5, #8]
 8001ea4:	b343      	cbz	r3, 8001ef8 <usb_standard_get_descriptor+0xde>
			if (array_idx >= usbd_dev->num_strings) {
 8001ea6:	68ea      	ldr	r2, [r5, #12]
 8001ea8:	4542      	cmp	r2, r8
 8001eaa:	dd27      	ble.n	8001efc <usb_standard_get_descriptor+0xe2>
			if (req->wIndex != USB_LANGID_ENGLISH_US) {
 8001eac:	88b9      	ldrh	r1, [r7, #4]
 8001eae:	f240 4209 	movw	r2, #1033	; 0x409
 8001eb2:	4291      	cmp	r1, r2
 8001eb4:	d001      	beq.n	8001eba <usb_standard_get_descriptor+0xa0>
				return USBD_REQ_NOTSUPP;
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	e7cf      	b.n	8001e5a <usb_standard_get_descriptor+0x40>
			sd->bLength = strlen(usbd_dev->strings[array_idx]) * 2 +
 8001eba:	ea4f 0788 	mov.w	r7, r8, lsl #2
 8001ebe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8001ec2:	f000 fb88 	bl	80025d6 <strlen>
 8001ec6:	1c43      	adds	r3, r0, #1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	7023      	strb	r3, [r4, #0]
			*len = MIN(*len, sd->bLength);
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	8832      	ldrh	r2, [r6, #0]
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	bf28      	it	cs
 8001ed6:	4613      	movcs	r3, r2
 8001ed8:	8033      	strh	r3, [r6, #0]
			for (i = 0; i < (*len / 2) - 1; i++) {
 8001eda:	2200      	movs	r2, #0
 8001edc:	e006      	b.n	8001eec <usb_standard_get_descriptor+0xd2>
					usbd_dev->strings[array_idx][i];
 8001ede:	68ab      	ldr	r3, [r5, #8]
 8001ee0:	59db      	ldr	r3, [r3, r7]
 8001ee2:	5c99      	ldrb	r1, [r3, r2]
				sd->wData[i] =
 8001ee4:	eb04 0342 	add.w	r3, r4, r2, lsl #1
 8001ee8:	8059      	strh	r1, [r3, #2]
			for (i = 0; i < (*len / 2) - 1; i++) {
 8001eea:	3201      	adds	r2, #1
 8001eec:	8833      	ldrh	r3, [r6, #0]
 8001eee:	085b      	lsrs	r3, r3, #1
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	dcf3      	bgt.n	8001ede <usb_standard_get_descriptor+0xc4>
 8001ef6:	e7cc      	b.n	8001e92 <usb_standard_get_descriptor+0x78>
				return USBD_REQ_NOTSUPP;
 8001ef8:	2000      	movs	r0, #0
 8001efa:	e7ae      	b.n	8001e5a <usb_standard_get_descriptor+0x40>
				return USBD_REQ_NOTSUPP;
 8001efc:	2000      	movs	r0, #0
 8001efe:	e7ac      	b.n	8001e5a <usb_standard_get_descriptor+0x40>

08001f00 <usb_standard_endpoint_get_status>:
{
 8001f00:	b510      	push	{r4, lr}
 8001f02:	4614      	mov	r4, r2
	if (*len > 2) {
 8001f04:	881a      	ldrh	r2, [r3, #0]
 8001f06:	2a02      	cmp	r2, #2
 8001f08:	d901      	bls.n	8001f0e <usb_standard_endpoint_get_status+0xe>
		*len = 2;
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	801a      	strh	r2, [r3, #0]
	(*buf)[0] = usbd_ep_stall_get(usbd_dev, req->wIndex) ? 1 : 0;
 8001f0e:	8889      	ldrh	r1, [r1, #4]
 8001f10:	b2c9      	uxtb	r1, r1
 8001f12:	f7ff fc53 	bl	80017bc <usbd_ep_stall_get>
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	3000      	adds	r0, #0
 8001f1a:	bf18      	it	ne
 8001f1c:	2001      	movne	r0, #1
 8001f1e:	7018      	strb	r0, [r3, #0]
	(*buf)[1] = 0;
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	2200      	movs	r2, #0
 8001f24:	705a      	strb	r2, [r3, #1]
}
 8001f26:	2001      	movs	r0, #1
 8001f28:	bd10      	pop	{r4, pc}

08001f2a <usb_standard_endpoint_stall>:
{
 8001f2a:	b508      	push	{r3, lr}
	usbd_ep_stall_set(usbd_dev, req->wIndex, 1);
 8001f2c:	8889      	ldrh	r1, [r1, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	b2c9      	uxtb	r1, r1
 8001f32:	f7ff fc3d 	bl	80017b0 <usbd_ep_stall_set>
}
 8001f36:	2001      	movs	r0, #1
 8001f38:	bd08      	pop	{r3, pc}

08001f3a <usb_standard_endpoint_unstall>:
{
 8001f3a:	b508      	push	{r3, lr}
	usbd_ep_stall_set(usbd_dev, req->wIndex, 0);
 8001f3c:	8889      	ldrh	r1, [r1, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	b2c9      	uxtb	r1, r1
 8001f42:	f7ff fc35 	bl	80017b0 <usbd_ep_stall_set>
}
 8001f46:	2001      	movs	r0, #1
 8001f48:	bd08      	pop	{r3, pc}

08001f4a <usbd_register_set_config_callback>:
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	dc0d      	bgt.n	8001f6c <usbd_register_set_config_callback+0x22>
		if (usbd_dev->user_callback_set_config[i])
 8001f50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001f54:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001f58:	6852      	ldr	r2, [r2, #4]
 8001f5a:	b10a      	cbz	r2, 8001f60 <usbd_register_set_config_callback+0x16>
	for (i = 0; i < MAX_USER_SET_CONFIG_CALLBACK; i++) {
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	e7f5      	b.n	8001f4c <usbd_register_set_config_callback+0x2>
		usbd_dev->user_callback_set_config[i] = callback;
 8001f60:	3330      	adds	r3, #48	; 0x30
 8001f62:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001f66:	6059      	str	r1, [r3, #4]
		return 0;
 8001f68:	2000      	movs	r0, #0
 8001f6a:	4770      	bx	lr
	return -1;
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001f70:	4770      	bx	lr

08001f72 <_usbd_standard_request>:

int _usbd_standard_request(usbd_device *usbd_dev, struct usb_setup_data *req,
			   uint8_t **buf, uint16_t *len)
{
 8001f72:	b510      	push	{r4, lr}
	/* FIXME: Have class/vendor requests as well. */
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) {
 8001f74:	780c      	ldrb	r4, [r1, #0]
 8001f76:	f014 0f60 	tst.w	r4, #96	; 0x60
 8001f7a:	d111      	bne.n	8001fa0 <_usbd_standard_request+0x2e>
		return 0;
	}

	switch (req->bmRequestType & USB_REQ_TYPE_RECIPIENT) {
 8001f7c:	f004 041f 	and.w	r4, r4, #31
 8001f80:	2c01      	cmp	r4, #1
 8001f82:	d007      	beq.n	8001f94 <_usbd_standard_request+0x22>
 8001f84:	b11c      	cbz	r4, 8001f8e <_usbd_standard_request+0x1c>
 8001f86:	2c02      	cmp	r4, #2
 8001f88:	d007      	beq.n	8001f9a <_usbd_standard_request+0x28>
		return _usbd_standard_request_interface(usbd_dev, req,
							buf, len);
	case USB_REQ_TYPE_ENDPOINT:
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
	default:
		return 0;
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	e009      	b.n	8001fa2 <_usbd_standard_request+0x30>
		return _usbd_standard_request_device(usbd_dev, req, buf, len);
 8001f8e:	f7ff f8a1 	bl	80010d4 <_usbd_standard_request_device>
 8001f92:	e006      	b.n	8001fa2 <_usbd_standard_request+0x30>
		return _usbd_standard_request_interface(usbd_dev, req,
 8001f94:	f7ff f8c4 	bl	8001120 <_usbd_standard_request_interface>
 8001f98:	e003      	b.n	8001fa2 <_usbd_standard_request+0x30>
		return _usbd_standard_request_endpoint(usbd_dev, req, buf, len);
 8001f9a:	f7ff f8db 	bl	8001154 <_usbd_standard_request_endpoint>
 8001f9e:	e000      	b.n	8001fa2 <_usbd_standard_request+0x30>
		return 0;
 8001fa0:	2000      	movs	r0, #0
	}
}
 8001fa2:	bd10      	pop	{r4, pc}

08001fa4 <st_usbfs_copy_to_pm>:

void st_usbfs_copy_to_pm(volatile void *vPM, const void *buf, uint16_t len)
{
	const uint16_t *lbuf = buf;
	volatile uint32_t *PM = vPM;
	for (len = (len + 1) >> 1; len; len--) {
 8001fa4:	3201      	adds	r2, #1
 8001fa6:	0852      	lsrs	r2, r2, #1
 8001fa8:	e005      	b.n	8001fb6 <st_usbfs_copy_to_pm+0x12>
		*PM++ = *lbuf++;
 8001faa:	880b      	ldrh	r3, [r1, #0]
 8001fac:	6003      	str	r3, [r0, #0]
	for (len = (len + 1) >> 1; len; len--) {
 8001fae:	3a01      	subs	r2, #1
 8001fb0:	b292      	uxth	r2, r2
		*PM++ = *lbuf++;
 8001fb2:	3004      	adds	r0, #4
 8001fb4:	3102      	adds	r1, #2
	for (len = (len + 1) >> 1; len; len--) {
 8001fb6:	2a00      	cmp	r2, #0
 8001fb8:	d1f7      	bne.n	8001faa <st_usbfs_copy_to_pm+0x6>
	}
}
 8001fba:	4770      	bx	lr

08001fbc <st_usbfs_copy_from_pm>:
 * @param buf Source pointer to data buffer.
 * @param vPM Destination pointer into packet memory.
 * @param len Number of bytes to copy.
 */
void st_usbfs_copy_from_pm(void *buf, const volatile void *vPM, uint16_t len)
{
 8001fbc:	b410      	push	{r4}
	uint16_t *lbuf = buf;
	const volatile uint16_t *PM = vPM;
	uint8_t odd = len & 1;
 8001fbe:	f002 0401 	and.w	r4, r2, #1

	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 8001fc2:	0852      	lsrs	r2, r2, #1
 8001fc4:	e005      	b.n	8001fd2 <st_usbfs_copy_from_pm+0x16>
		*lbuf = *PM;
 8001fc6:	f831 3b04 	ldrh.w	r3, [r1], #4
 8001fca:	f820 3b02 	strh.w	r3, [r0], #2
	for (len >>= 1; len; PM += 2, lbuf++, len--) {
 8001fce:	3a01      	subs	r2, #1
 8001fd0:	b292      	uxth	r2, r2
 8001fd2:	2a00      	cmp	r2, #0
 8001fd4:	d1f7      	bne.n	8001fc6 <st_usbfs_copy_from_pm+0xa>
	}

	if (odd) {
 8001fd6:	b10c      	cbz	r4, 8001fdc <st_usbfs_copy_from_pm+0x20>
		*(uint8_t *) lbuf = *(uint8_t *) PM;
 8001fd8:	780b      	ldrb	r3, [r1, #0]
 8001fda:	7003      	strb	r3, [r0, #0]
	}
}
 8001fdc:	bc10      	pop	{r4}
 8001fde:	4770      	bx	lr

08001fe0 <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 8001fe0:	f000 021f 	and.w	r2, r0, #31
 8001fe4:	0940      	lsrs	r0, r0, #5
 8001fe6:	0080      	lsls	r0, r0, #2
 8001fe8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001fec:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	4093      	lsls	r3, r2
 8001ff4:	6003      	str	r3, [r0, #0]
}
 8001ff6:	4770      	bx	lr

08001ff8 <st_usbfs_endpoints_reset>:
{
 8001ff8:	b410      	push	{r4}
	for (i = 1; i < 8; i++) {
 8001ffa:	2401      	movs	r4, #1
 8001ffc:	e01b      	b.n	8002036 <st_usbfs_endpoints_reset+0x3e>
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	b29b      	uxth	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1fb      	bne.n	8001ffe <st_usbfs_endpoints_reset+0x6>
 8002006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800200a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800200e:	600a      	str	r2, [r1, #0]
		USB_SET_EP_RX_STAT(i, USB_EP_RX_STAT_DISABLED);
 8002010:	680b      	ldr	r3, [r1, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201c:	b29a      	uxth	r2, r3
 800201e:	2301      	movs	r3, #1
 8002020:	e001      	b.n	8002026 <st_usbfs_endpoints_reset+0x2e>
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1fb      	bne.n	8002022 <st_usbfs_endpoints_reset+0x2a>
 800202a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800202e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002032:	600a      	str	r2, [r1, #0]
	for (i = 1; i < 8; i++) {
 8002034:	3401      	adds	r4, #1
 8002036:	2c07      	cmp	r4, #7
 8002038:	dc0d      	bgt.n	8002056 <st_usbfs_endpoints_reset+0x5e>
		USB_SET_EP_TX_STAT(i, USB_EP_TX_STAT_DISABLED);
 800203a:	00a1      	lsls	r1, r4, #2
 800203c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002040:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 8002044:	680b      	ldr	r3, [r1, #0]
 8002046:	b29b      	uxth	r3, r3
 8002048:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800204c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002050:	b29a      	uxth	r2, r3
 8002052:	2301      	movs	r3, #1
 8002054:	e7d5      	b.n	8002002 <st_usbfs_endpoints_reset+0xa>
	dev->pm_top = USBD_PM_TOP + (2 * dev->desc->bMaxPacketSize0);
 8002056:	6803      	ldr	r3, [r0, #0]
 8002058:	79db      	ldrb	r3, [r3, #7]
 800205a:	3320      	adds	r3, #32
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	8303      	strh	r3, [r0, #24]
}
 8002060:	bc10      	pop	{r4}
 8002062:	4770      	bx	lr

08002064 <st_usbfs_ep_stall_set>:
{
 8002064:	b470      	push	{r4, r5, r6}
	if (addr == 0) {
 8002066:	460d      	mov	r5, r1
 8002068:	b9f9      	cbnz	r1, 80020aa <st_usbfs_ep_stall_set+0x46>
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 800206a:	008e      	lsls	r6, r1, #2
 800206c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002070:	f506 46b8 	add.w	r6, r6, #23552	; 0x5c00
 8002074:	6834      	ldr	r4, [r6, #0]
 8002076:	b2a4      	uxth	r4, r4
 8002078:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 800207c:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8002080:	b2a4      	uxth	r4, r4
 8002082:	2301      	movs	r3, #1
 8002084:	e003      	b.n	800208e <st_usbfs_ep_stall_set+0x2a>
 8002086:	2020      	movs	r0, #32
 8002088:	e006      	b.n	8002098 <st_usbfs_ep_stall_set+0x34>
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	b29b      	uxth	r3, r3
 800208e:	b13b      	cbz	r3, 80020a0 <st_usbfs_ep_stall_set+0x3c>
 8002090:	4619      	mov	r1, r3
 8002092:	2a00      	cmp	r2, #0
 8002094:	d0f7      	beq.n	8002086 <st_usbfs_ep_stall_set+0x22>
 8002096:	2010      	movs	r0, #16
 8002098:	4201      	tst	r1, r0
 800209a:	d0f6      	beq.n	800208a <st_usbfs_ep_stall_set+0x26>
 800209c:	405c      	eors	r4, r3
 800209e:	e7f4      	b.n	800208a <st_usbfs_ep_stall_set+0x26>
 80020a0:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80020a4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80020a8:	6034      	str	r4, [r6, #0]
	if (addr & 0x80) {
 80020aa:	f015 0f80 	tst.w	r5, #128	; 0x80
 80020ae:	d11b      	bne.n	80020e8 <st_usbfs_ep_stall_set+0x84>
		if (!stall) {
 80020b0:	b962      	cbnz	r2, 80020cc <st_usbfs_ep_stall_set+0x68>
			USB_CLR_EP_RX_DTOG(addr);
 80020b2:	00ab      	lsls	r3, r5, #2
 80020b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80020b8:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 80020bc:	6819      	ldr	r1, [r3, #0]
 80020be:	f421 5141 	bic.w	r1, r1, #12352	; 0x3040
 80020c2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
 80020c6:	0409      	lsls	r1, r1, #16
 80020c8:	0c09      	lsrs	r1, r1, #16
 80020ca:	6019      	str	r1, [r3, #0]
		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 80020cc:	00ad      	lsls	r5, r5, #2
 80020ce:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80020d2:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 80020d6:	682c      	ldr	r4, [r5, #0]
 80020d8:	b2a4      	uxth	r4, r4
 80020da:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 80020de:	f024 0470 	bic.w	r4, r4, #112	; 0x70
 80020e2:	b2a4      	uxth	r4, r4
 80020e4:	2301      	movs	r3, #1
 80020e6:	e030      	b.n	800214a <st_usbfs_ep_stall_set+0xe6>
		addr &= 0x7F;
 80020e8:	f005 057f 	and.w	r5, r5, #127	; 0x7f
		USB_SET_EP_TX_STAT(addr, stall ? USB_EP_TX_STAT_STALL :
 80020ec:	00ad      	lsls	r5, r5, #2
 80020ee:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80020f2:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
 80020f6:	682c      	ldr	r4, [r5, #0]
 80020f8:	b2a4      	uxth	r4, r4
 80020fa:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 80020fe:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8002102:	b2a4      	uxth	r4, r4
 8002104:	2301      	movs	r3, #1
 8002106:	e003      	b.n	8002110 <st_usbfs_ep_stall_set+0xac>
 8002108:	2020      	movs	r0, #32
 800210a:	e006      	b.n	800211a <st_usbfs_ep_stall_set+0xb6>
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	b29b      	uxth	r3, r3
 8002110:	b13b      	cbz	r3, 8002122 <st_usbfs_ep_stall_set+0xbe>
 8002112:	4619      	mov	r1, r3
 8002114:	2a00      	cmp	r2, #0
 8002116:	d0f7      	beq.n	8002108 <st_usbfs_ep_stall_set+0xa4>
 8002118:	2010      	movs	r0, #16
 800211a:	4201      	tst	r1, r0
 800211c:	d0f6      	beq.n	800210c <st_usbfs_ep_stall_set+0xa8>
 800211e:	405c      	eors	r4, r3
 8002120:	e7f4      	b.n	800210c <st_usbfs_ep_stall_set+0xa8>
 8002122:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002126:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 800212a:	602c      	str	r4, [r5, #0]
		if (!stall) {
 800212c:	b9e2      	cbnz	r2, 8002168 <st_usbfs_ep_stall_set+0x104>
			USB_CLR_EP_TX_DTOG(addr);
 800212e:	682b      	ldr	r3, [r5, #0]
 8002130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002134:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002138:	041b      	lsls	r3, r3, #16
 800213a:	0c1b      	lsrs	r3, r3, #16
 800213c:	602b      	str	r3, [r5, #0]
 800213e:	e013      	b.n	8002168 <st_usbfs_ep_stall_set+0x104>
		USB_SET_EP_RX_STAT(addr, stall ? USB_EP_RX_STAT_STALL :
 8002140:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8002144:	e007      	b.n	8002156 <st_usbfs_ep_stall_set+0xf2>
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	b29b      	uxth	r3, r3
 800214a:	b143      	cbz	r3, 800215e <st_usbfs_ep_stall_set+0xfa>
 800214c:	4619      	mov	r1, r3
 800214e:	2a00      	cmp	r2, #0
 8002150:	d0f6      	beq.n	8002140 <st_usbfs_ep_stall_set+0xdc>
 8002152:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002156:	4201      	tst	r1, r0
 8002158:	d0f5      	beq.n	8002146 <st_usbfs_ep_stall_set+0xe2>
 800215a:	405c      	eors	r4, r3
 800215c:	e7f3      	b.n	8002146 <st_usbfs_ep_stall_set+0xe2>
 800215e:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002162:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002166:	602c      	str	r4, [r5, #0]
}
 8002168:	bc70      	pop	{r4, r5, r6}
 800216a:	4770      	bx	lr

0800216c <st_usbfs_ep_stall_get>:
	if (addr & 0x80) {
 800216c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002170:	d10c      	bne.n	800218c <st_usbfs_ep_stall_get+0x20>
		if ((*USB_EP_REG(addr) & USB_EP_RX_STAT) ==
 8002172:	0089      	lsls	r1, r1, #2
 8002174:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002178:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800217c:	680b      	ldr	r3, [r1, #0]
 800217e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002186:	d011      	beq.n	80021ac <st_usbfs_ep_stall_get+0x40>
	return 0;
 8002188:	2000      	movs	r0, #0
 800218a:	4770      	bx	lr
		if ((*USB_EP_REG(addr & 0x7F) & USB_EP_TX_STAT) ==
 800218c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002190:	0089      	lsls	r1, r1, #2
 8002192:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8002196:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 800219a:	680b      	ldr	r3, [r1, #0]
 800219c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80021a0:	2b10      	cmp	r3, #16
 80021a2:	d001      	beq.n	80021a8 <st_usbfs_ep_stall_get+0x3c>
	return 0;
 80021a4:	2000      	movs	r0, #0
 80021a6:	4770      	bx	lr
			return 1;
 80021a8:	2001      	movs	r0, #1
 80021aa:	4770      	bx	lr
			return 1;
 80021ac:	2001      	movs	r0, #1
}
 80021ae:	4770      	bx	lr

080021b0 <os_event_init>:
static Evt_t lastSignaledEvent = NO_EVENT;
#endif

void os_event_init(void) {
#if( N_TOTAL_EVENTS > 0 )
    nEvents = 0;
 80021b0:	4b01      	ldr	r3, [pc, #4]	; (80021b8 <os_event_init+0x8>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
#endif
}
 80021b6:	4770      	bx	lr
 80021b8:	2000022a 	.word	0x2000022a

080021bc <os_signal_event>:
    }
#endif
}


void os_signal_event( Evt_t ev ) {
 80021bc:	b508      	push	{r3, lr}
	lastSignaledEvent = ev;
 80021be:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <os_signal_event+0xc>)
 80021c0:	7018      	strb	r0, [r3, #0]
    os_task_signal_event( ev );
 80021c2:	f000 f95d 	bl	8002480 <os_task_signal_event>
}
 80021c6:	bd08      	pop	{r3, pc}
 80021c8:	20000014 	.word	0x20000014

080021cc <os_event_set_signaling_tid>:


void os_event_set_signaling_tid( Evt_t ev, uint8_t tid ) {
#if( N_TOTAL_EVENTS > 0 )
	eventList[ ev ].signaledByTid = tid;
 80021cc:	4b02      	ldr	r3, [pc, #8]	; (80021d8 <os_event_set_signaling_tid+0xc>)
 80021ce:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80021d2:	7041      	strb	r1, [r0, #1]
#endif
}
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	2000016c 	.word	0x2000016c

080021dc <os_init>:
*   }
*   @endcode
*       
*		 */
/*********************************************************************************/
void os_init( void ) {
 80021dc:	b508      	push	{r3, lr}
	running_tid = NO_TID;
 80021de:	23ff      	movs	r3, #255	; 0xff
 80021e0:	4a07      	ldr	r2, [pc, #28]	; (8002200 <os_init+0x24>)
 80021e2:	7013      	strb	r3, [r2, #0]
    last_running_task = NO_TID;
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <os_init+0x28>)
 80021e6:	7013      	strb	r3, [r2, #0]
    running = 0;
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <os_init+0x2c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
    os_sem_init();
 80021ee:	f000 f869 	bl	80022c4 <os_sem_init>
    os_event_init();
 80021f2:	f7ff ffdd 	bl	80021b0 <os_event_init>
    os_msgQ_init();
 80021f6:	f000 f80f 	bl	8002218 <os_msgQ_init>
    os_task_init();
 80021fa:	f000 f881 	bl	8002300 <os_task_init>
}
 80021fe:	bd08      	pop	{r3, pc}
 8002200:	2000083c 	.word	0x2000083c
 8002204:	2000083e 	.word	0x2000083e
 8002208:	2000083d 	.word	0x2000083d

0800220c <os_running>:
}


uint8_t os_running( void ) {
    return running;
}
 800220c:	4b01      	ldr	r3, [pc, #4]	; (8002214 <os_running+0x8>)
 800220e:	7818      	ldrb	r0, [r3, #0]
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	2000083d 	.word	0x2000083d

08002218 <os_msgQ_init>:

void os_msgQ_init() {
    
#if( N_QUEUES > 0 )
    uint8_t i;
    nQueues = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <os_msgQ_init+0x30>)
 800221c:	7013      	strb	r3, [r2, #0]
    for ( i = 0; i < N_QUEUES; ++i  ) {
 800221e:	2b01      	cmp	r3, #1
 8002220:	d811      	bhi.n	8002246 <os_msgQ_init+0x2e>
void os_msgQ_init() {
 8002222:	b410      	push	{r4}
        msgQList[ i ].q.list = 0;
 8002224:	4c09      	ldr	r4, [pc, #36]	; (800224c <os_msgQ_init+0x34>)
 8002226:	0118      	lsls	r0, r3, #4
 8002228:	1821      	adds	r1, r4, r0
 800222a:	2200      	movs	r2, #0
 800222c:	5022      	str	r2, [r4, r0]
        msgQList[ i ].q.head = 0;
 800222e:	718a      	strb	r2, [r1, #6]
        msgQList[ i ].q.tail = 0;
 8002230:	71ca      	strb	r2, [r1, #7]
        msgQList[ i ].q.size = 0;
 8002232:	720a      	strb	r2, [r1, #8]
        msgQList[ i ].q.messageSize = 0;
 8002234:	808a      	strh	r2, [r1, #4]
        msgQList[ i ].taskId = 0;
 8002236:	730a      	strb	r2, [r1, #12]
        msgQList[ i ].change = 0;
 8002238:	734a      	strb	r2, [r1, #13]
    for ( i = 0; i < N_QUEUES; ++i  ) {
 800223a:	3301      	adds	r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d9f0      	bls.n	8002224 <os_msgQ_init+0xc>
    }
#endif
}
 8002242:	bc10      	pop	{r4}
 8002244:	4770      	bx	lr
 8002246:	4770      	bx	lr
 8002248:	2000022b 	.word	0x2000022b
 800224c:	2000017c 	.word	0x2000017c

08002250 <os_msgQ_tick>:
#else
    return 0;
#endif
}

void os_msgQ_tick( MsgQ_t queue ) {
 8002250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002254:	4604      	mov	r4, r0
#if( N_QUEUES > 0 )
    uint8_t nextMessage;
    Msg_t *pMsg;
    OSQueue_t *q = &msgQList[ queue ].q;
    nextMessage = (q->tail+1) % q->size;
 8002256:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <os_msgQ_tick+0x70>)
 8002258:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800225c:	79d3      	ldrb	r3, [r2, #7]
 800225e:	1c59      	adds	r1, r3, #1
 8002260:	7a10      	ldrb	r0, [r2, #8]
 8002262:	fb91 f3f0 	sdiv	r3, r1, r0
 8002266:	fb00 1313 	mls	r3, r0, r3, r1
 800226a:	b2db      	uxtb	r3, r3

    uint8_t head = q->head;
 800226c:	7995      	ldrb	r5, [r2, #6]
    uint16_t msgSz = q->messageSize;
 800226e:	8896      	ldrh	r6, [r2, #4]

    while ( nextMessage != head ) {
 8002270:	e009      	b.n	8002286 <os_msgQ_tick+0x36>
            --(pMsg->delay);
            if ( pMsg->delay == 0 ) {
                event_ISR_signal( msgQList[ queue ].change );
            }
        }
        nextMessage = (nextMessage + 1) % q->size;
 8002272:	1c7a      	adds	r2, r7, #1
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <os_msgQ_tick+0x70>)
 8002276:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800227a:	7a19      	ldrb	r1, [r3, #8]
 800227c:	fb92 f3f1 	sdiv	r3, r2, r1
 8002280:	fb01 2313 	mls	r3, r1, r3, r2
 8002284:	b2db      	uxtb	r3, r3
    while ( nextMessage != head ) {
 8002286:	42ab      	cmp	r3, r5
 8002288:	d018      	beq.n	80022bc <os_msgQ_tick+0x6c>
        pMsg = (Msg_t*)( (Mem_t)q->list + nextMessage * msgSz );
 800228a:	0122      	lsls	r2, r4, #4
 800228c:	490c      	ldr	r1, [pc, #48]	; (80022c0 <os_msgQ_tick+0x70>)
 800228e:	588a      	ldr	r2, [r1, r2]
 8002290:	461f      	mov	r7, r3
 8002292:	fb03 2306 	mla	r3, r3, r6, r2
        if ( pMsg->delay > 0 ) {
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	2a00      	cmp	r2, #0
 800229a:	d0ea      	beq.n	8002272 <os_msgQ_tick+0x22>
            --(pMsg->delay);
 800229c:	3a01      	subs	r2, #1
 800229e:	605a      	str	r2, [r3, #4]
            if ( pMsg->delay == 0 ) {
 80022a0:	2a00      	cmp	r2, #0
 80022a2:	d1e6      	bne.n	8002272 <os_msgQ_tick+0x22>
                event_ISR_signal( msgQList[ queue ].change );
 80022a4:	eb01 1804 	add.w	r8, r1, r4, lsl #4
 80022a8:	f898 000d 	ldrb.w	r0, [r8, #13]
 80022ac:	f7ff ff86 	bl	80021bc <os_signal_event>
 80022b0:	21fe      	movs	r1, #254	; 0xfe
 80022b2:	f898 000d 	ldrb.w	r0, [r8, #13]
 80022b6:	f7ff ff89 	bl	80021cc <os_event_set_signaling_tid>
 80022ba:	e7da      	b.n	8002272 <os_msgQ_tick+0x22>

    }
#endif    
}
 80022bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022c0:	2000017c 	.word	0x2000017c

080022c4 <os_sem_init>:
static Sem_t nSemaphores;
#endif							   

void os_sem_init(void) {
#if ( N_TOTAL_SEMAPHORES > 0 )
    nSemaphores = 0;
 80022c4:	4b01      	ldr	r3, [pc, #4]	; (80022cc <os_sem_init+0x8>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
#endif
}
 80022ca:	4770      	bx	lr
 80022cc:	2000022c 	.word	0x2000022c

080022d0 <os_task_wait_queue_empty>:
    result = 1;
    event = EVENT_QUEUE_SIZE;

    do {
        --event;
        if ( task_list[ tid ].eventQueue.eventList[ event ] != 0 ) {
 80022d0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80022d4:	0082      	lsls	r2, r0, #2
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <os_task_wait_queue_empty+0x18>)
 80022d8:	4413      	add	r3, r2
 80022da:	7d5b      	ldrb	r3, [r3, #21]
 80022dc:	b10b      	cbz	r3, 80022e2 <os_task_wait_queue_empty+0x12>
            result = 0;
 80022de:	2000      	movs	r0, #0
        }
    } while ( event != 0 );
        

    return result;
}
 80022e0:	4770      	bx	lr
        if ( task_list[ tid ].eventQueue.eventList[ event ] != 0 ) {
 80022e2:	2001      	movs	r0, #1
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	2000019c 	.word	0x2000019c

080022ec <task_ready_set>:
    task_list[ tid ].semaphore = sem;
}


static void task_ready_set( uint8_t tid ) {
    task_list[ tid ].state = READY;
 80022ec:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80022f0:	0082      	lsls	r2, r0, #2
 80022f2:	4b02      	ldr	r3, [pc, #8]	; (80022fc <task_ready_set+0x10>)
 80022f4:	4413      	add	r3, r2
 80022f6:	2205      	movs	r2, #5
 80022f8:	711a      	strb	r2, [r3, #4]
}
 80022fa:	4770      	bx	lr
 80022fc:	2000019c 	.word	0x2000019c

08002300 <os_task_init>:
    nTasks = 0;
 8002300:	2100      	movs	r1, #0
 8002302:	4b1a      	ldr	r3, [pc, #104]	; (800236c <os_task_init+0x6c>)
 8002304:	7019      	strb	r1, [r3, #0]
    for ( i = 0; i < N_TASKS; ++i ) {
 8002306:	2904      	cmp	r1, #4
 8002308:	d82f      	bhi.n	800236a <os_task_init+0x6a>
void os_task_init( void ) {
 800230a:	b470      	push	{r4, r5, r6}
        task = &task_list[i];
 800230c:	4608      	mov	r0, r1
        task->clockId = 0xff;
 800230e:	4e18      	ldr	r6, [pc, #96]	; (8002370 <os_task_init+0x70>)
 8002310:	00cb      	lsls	r3, r1, #3
 8002312:	1a5b      	subs	r3, r3, r1
 8002314:	009d      	lsls	r5, r3, #2
 8002316:	1972      	adds	r2, r6, r5
 8002318:	24ff      	movs	r4, #255	; 0xff
 800231a:	7514      	strb	r4, [r2, #20]
        task->internal_state = 0xff;
 800231c:	80d4      	strh	r4, [r2, #6]
        task->msgQ = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	73d3      	strb	r3, [r2, #15]
        task->waitQ = 0;
 8002322:	7413      	strb	r3, [r2, #16]
        task->msgChangeEvent = 0;
 8002324:	7453      	strb	r3, [r2, #17]
        task->msgResult = 0;
 8002326:	7493      	strb	r3, [r2, #18]
        task->prio = 0;
 8002328:	7353      	strb	r3, [r2, #13]
        task->savedState = SUSPENDED;
 800232a:	7153      	strb	r3, [r2, #5]
        task->semaphore = NO_SEM;
 800232c:	7394      	strb	r4, [r2, #14]
        task->state = SUSPENDED;
 800232e:	7113      	strb	r3, [r2, #4]
        task->taskproc = 0;
 8002330:	5173      	str	r3, [r6, r5]
        task->tid = NO_TID;
 8002332:	7314      	strb	r4, [r2, #12]
        task->time = 0;
 8002334:	6093      	str	r3, [r2, #8]
        task->waitSingleEvent = 0;
 8002336:	74d3      	strb	r3, [r2, #19]
        for ( j = 0; j < sizeof( task->eventQueue.eventList); j++ ) {
 8002338:	b163      	cbz	r3, 8002354 <os_task_init+0x54>
        task->data = 0;
 800233a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800233e:	0082      	lsls	r2, r0, #2
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <os_task_init+0x70>)
 8002342:	4413      	add	r3, r2
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
    for ( i = 0; i < N_TASKS; ++i ) {
 8002348:	3101      	adds	r1, #1
 800234a:	b2c9      	uxtb	r1, r1
 800234c:	2904      	cmp	r1, #4
 800234e:	d9dd      	bls.n	800230c <os_task_init+0xc>
}
 8002350:	bc70      	pop	{r4, r5, r6}
 8002352:	4770      	bx	lr
            task->eventQueue.eventList[j] = 0xff;
 8002354:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8002358:	0094      	lsls	r4, r2, #2
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <os_task_init+0x70>)
 800235c:	4422      	add	r2, r4
 800235e:	441a      	add	r2, r3
 8002360:	24ff      	movs	r4, #255	; 0xff
 8002362:	7554      	strb	r4, [r2, #21]
        for ( j = 0; j < sizeof( task->eventQueue.eventList); j++ ) {
 8002364:	3301      	adds	r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	e7e6      	b.n	8002338 <os_task_init+0x38>
 800236a:	4770      	bx	lr
 800236c:	2000022d 	.word	0x2000022d
 8002370:	2000019c 	.word	0x2000019c

08002374 <os_task_highest_prio_ready_task>:
uint8_t os_task_highest_prio_ready_task( void ) {
 8002374:	b470      	push	{r4, r5, r6}
    uint8_t highest_prio = 255;
 8002376:	26ff      	movs	r6, #255	; 0xff
    uint8_t highest_prio_task = NO_TID;
 8002378:	4630      	mov	r0, r6
    for ( index = 0; index != nTasks; ++index ) {
 800237a:	2300      	movs	r3, #0
 800237c:	e001      	b.n	8002382 <os_task_highest_prio_ready_task+0xe>
 800237e:	3301      	adds	r3, #1
 8002380:	b29b      	uxth	r3, r3
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <os_task_highest_prio_ready_task+0x3c>)
 8002384:	7812      	ldrb	r2, [r2, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d010      	beq.n	80023ac <os_task_highest_prio_ready_task+0x38>
        prio = task->prio;
 800238a:	490a      	ldr	r1, [pc, #40]	; (80023b4 <os_task_highest_prio_ready_task+0x40>)
 800238c:	00da      	lsls	r2, r3, #3
 800238e:	1ad5      	subs	r5, r2, r3
 8002390:	00ac      	lsls	r4, r5, #2
 8002392:	440c      	add	r4, r1
 8002394:	7b65      	ldrb	r5, [r4, #13]
        state = task->state;
 8002396:	1ad2      	subs	r2, r2, r3
 8002398:	0094      	lsls	r4, r2, #2
 800239a:	4421      	add	r1, r4
 800239c:	790a      	ldrb	r2, [r1, #4]
        if ( READY == state ) {
 800239e:	2a05      	cmp	r2, #5
 80023a0:	d1ed      	bne.n	800237e <os_task_highest_prio_ready_task+0xa>
            if ( prio < highest_prio ) {
 80023a2:	42ae      	cmp	r6, r5
 80023a4:	d9eb      	bls.n	800237e <os_task_highest_prio_ready_task+0xa>
                highest_prio_task = index;
 80023a6:	b2d8      	uxtb	r0, r3
                highest_prio = prio;
 80023a8:	462e      	mov	r6, r5
 80023aa:	e7e8      	b.n	800237e <os_task_highest_prio_ready_task+0xa>
}
 80023ac:	bc70      	pop	{r4, r5, r6}
 80023ae:	4770      	bx	lr
 80023b0:	2000022d 	.word	0x2000022d
 80023b4:	2000019c 	.word	0x2000019c

080023b8 <os_task_clear_wait_queue>:
void os_task_clear_wait_queue( uint8_t tid ) {
 80023b8:	b410      	push	{r4}
    task->waitSingleEvent = 0;
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <os_task_clear_wait_queue+0x18>)
 80023bc:	00c3      	lsls	r3, r0, #3
 80023be:	1a1c      	subs	r4, r3, r0
 80023c0:	00a1      	lsls	r1, r4, #2
 80023c2:	4411      	add	r1, r2
 80023c4:	2400      	movs	r4, #0
 80023c6:	74cc      	strb	r4, [r1, #19]
        task->eventQueue.eventList[ event ] = 0;
 80023c8:	754c      	strb	r4, [r1, #21]
}
 80023ca:	bc10      	pop	{r4}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	2000019c 	.word	0x2000019c

080023d4 <os_task_tick>:
void os_task_tick( uint8_t id, uint32_t tickSize ) {
 80023d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d6:	4606      	mov	r6, r0
 80023d8:	460f      	mov	r7, r1
    for ( index = 0; index != nTasks; ++index ) {
 80023da:	2400      	movs	r4, #0
 80023dc:	e012      	b.n	8002404 <os_task_tick+0x30>
        if ( task_list[ index ].clockId == id ) {
 80023de:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 80023e2:	0091      	lsls	r1, r2, #2
 80023e4:	4a24      	ldr	r2, [pc, #144]	; (8002478 <os_task_tick+0xa4>)
 80023e6:	440a      	add	r2, r1
 80023e8:	7d12      	ldrb	r2, [r2, #20]
 80023ea:	42b2      	cmp	r2, r6
 80023ec:	d024      	beq.n	8002438 <os_task_tick+0x64>
        if ( id == 0 ) {
 80023ee:	b93e      	cbnz	r6, 8002400 <os_task_tick+0x2c>
            if ( task_list[ index ].msgQ != NO_QUEUE ) {
 80023f0:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 80023f4:	00aa      	lsls	r2, r5, #2
 80023f6:	4b20      	ldr	r3, [pc, #128]	; (8002478 <os_task_tick+0xa4>)
 80023f8:	4413      	add	r3, r2
 80023fa:	7bd8      	ldrb	r0, [r3, #15]
 80023fc:	28ff      	cmp	r0, #255	; 0xff
 80023fe:	d136      	bne.n	800246e <os_task_tick+0x9a>
    for ( index = 0; index != nTasks; ++index ) {
 8002400:	3401      	adds	r4, #1
 8002402:	b2e4      	uxtb	r4, r4
 8002404:	4b1d      	ldr	r3, [pc, #116]	; (800247c <os_task_tick+0xa8>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	42a3      	cmp	r3, r4
 800240a:	d033      	beq.n	8002474 <os_task_tick+0xa0>
		state = task_list[ index ].state;
 800240c:	4625      	mov	r5, r4
 800240e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8002412:	009a      	lsls	r2, r3, #2
 8002414:	4b18      	ldr	r3, [pc, #96]	; (8002478 <os_task_tick+0xa4>)
 8002416:	4413      	add	r3, r2
 8002418:	791b      	ldrb	r3, [r3, #4]
    if (( state == WAITING_TIME ) || ( state == WAITING_EVENT_TIMEOUT )){
 800241a:	2b02      	cmp	r3, #2
 800241c:	d0df      	beq.n	80023de <os_task_tick+0xa>
 800241e:	2b04      	cmp	r3, #4
 8002420:	d0dd      	beq.n	80023de <os_task_tick+0xa>
		else if ( state ==  WAITING_SEM ) {
 8002422:	2b01      	cmp	r3, #1
 8002424:	d1e3      	bne.n	80023ee <os_task_tick+0x1a>
			task_list[ index ].time++;
 8002426:	00e2      	lsls	r2, r4, #3
 8002428:	1b12      	subs	r2, r2, r4
 800242a:	0091      	lsls	r1, r2, #2
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <os_task_tick+0xa4>)
 800242e:	440b      	add	r3, r1
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	3201      	adds	r2, #1
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	e7da      	b.n	80023ee <os_task_tick+0x1a>
          if ( task_list[ index ].time <= tickSize ) {
 8002438:	4a0f      	ldr	r2, [pc, #60]	; (8002478 <os_task_tick+0xa4>)
 800243a:	440a      	add	r2, r1
 800243c:	6892      	ldr	r2, [r2, #8]
 800243e:	42ba      	cmp	r2, r7
 8002440:	d80d      	bhi.n	800245e <os_task_tick+0x8a>
            task_list[ index ].time = 0;
 8002442:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <os_task_tick+0xa4>)
 8002444:	440a      	add	r2, r1
 8002446:	2100      	movs	r1, #0
 8002448:	6091      	str	r1, [r2, #8]
            if ( state == WAITING_EVENT_TIMEOUT ) {
 800244a:	2b04      	cmp	r3, #4
 800244c:	d003      	beq.n	8002456 <os_task_tick+0x82>
            task_ready_set( index );
 800244e:	4620      	mov	r0, r4
 8002450:	f7ff ff4c 	bl	80022ec <task_ready_set>
 8002454:	e7cb      	b.n	80023ee <os_task_tick+0x1a>
              os_task_clear_wait_queue( index );
 8002456:	4620      	mov	r0, r4
 8002458:	f7ff ffae 	bl	80023b8 <os_task_clear_wait_queue>
 800245c:	e7f7      	b.n	800244e <os_task_tick+0x7a>
            task_list[ index ].time -= tickSize;
 800245e:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8002462:	0099      	lsls	r1, r3, #2
 8002464:	4b04      	ldr	r3, [pc, #16]	; (8002478 <os_task_tick+0xa4>)
 8002466:	440b      	add	r3, r1
 8002468:	1bd2      	subs	r2, r2, r7
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	e7bf      	b.n	80023ee <os_task_tick+0x1a>
                os_msgQ_tick( task_list[ index ].msgQ );
 800246e:	f7ff feef 	bl	8002250 <os_msgQ_tick>
 8002472:	e7c5      	b.n	8002400 <os_task_tick+0x2c>
}
 8002474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002476:	bf00      	nop
 8002478:	2000019c 	.word	0x2000019c
 800247c:	2000022d 	.word	0x2000022d

08002480 <os_task_signal_event>:
void os_task_signal_event( Evt_t eventId ) {
 8002480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eventListIndex = eventId / 8;
 8002482:	08c6      	lsrs	r6, r0, #3
    shift = eventId & 0x07;
 8002484:	f000 0507 	and.w	r5, r0, #7
    for ( index = 0; index != nTasks; index++ ) {
 8002488:	2400      	movs	r4, #0
 800248a:	e009      	b.n	80024a0 <os_task_signal_event+0x20>
		    taskWaitStateOK = 1;
 800248c:	2001      	movs	r0, #1
 800248e:	e017      	b.n	80024c0 <os_task_signal_event+0x40>
                os_task_clear_wait_queue( index );
 8002490:	4620      	mov	r0, r4
 8002492:	f7ff ff91 	bl	80023b8 <os_task_clear_wait_queue>
                task_ready_set( index );
 8002496:	4620      	mov	r0, r4
 8002498:	f7ff ff28 	bl	80022ec <task_ready_set>
    for ( index = 0; index != nTasks; index++ ) {
 800249c:	3401      	adds	r4, #1
 800249e:	b2e4      	uxtb	r4, r4
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <os_task_signal_event+0x90>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	42a3      	cmp	r3, r4
 80024a6:	d032      	beq.n	800250e <os_task_signal_event+0x8e>
		state = task_list[ index ].state;
 80024a8:	4622      	mov	r2, r4
 80024aa:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80024ae:	0099      	lsls	r1, r3, #2
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <os_task_signal_event+0x94>)
 80024b2:	440b      	add	r3, r1
 80024b4:	791b      	ldrb	r3, [r3, #4]
		if (( state == WAITING_EVENT ) || ( state == WAITING_EVENT_TIMEOUT )) {
 80024b6:	3b03      	subs	r3, #3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d9e6      	bls.n	800248c <os_task_signal_event+0xc>
		taskWaitStateOK = 0;
 80024be:	2000      	movs	r0, #0
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 80024c0:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80024c4:	0099      	lsls	r1, r3, #2
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <os_task_signal_event+0x94>)
 80024c8:	440b      	add	r3, r1
 80024ca:	4433      	add	r3, r6
 80024cc:	f993 1015 	ldrsb.w	r1, [r3, #21]
 80024d0:	2301      	movs	r3, #1
 80024d2:	40ab      	lsls	r3, r5
 80024d4:	b25b      	sxtb	r3, r3
        if ( taskWaitingForEvent  &&  taskWaitStateOK ) {
 80024d6:	4219      	tst	r1, r3
 80024d8:	d0e0      	beq.n	800249c <os_task_signal_event+0x1c>
 80024da:	2800      	cmp	r0, #0
 80024dc:	d0de      	beq.n	800249c <os_task_signal_event+0x1c>
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 80024de:	f8df c034 	ldr.w	ip, [pc, #52]	; 8002514 <os_task_signal_event+0x94>
 80024e2:	00d7      	lsls	r7, r2, #3
 80024e4:	eba7 0e02 	sub.w	lr, r7, r2
 80024e8:	ea4f 008e 	mov.w	r0, lr, lsl #2
 80024ec:	4686      	mov	lr, r0
 80024ee:	4460      	add	r0, ip
 80024f0:	4430      	add	r0, r6
 80024f2:	ea21 0303 	bic.w	r3, r1, r3
 80024f6:	7543      	strb	r3, [r0, #21]
            if ( task_list[ index ].waitSingleEvent || os_task_wait_queue_empty( index ) ) {
 80024f8:	44f4      	add	ip, lr
 80024fa:	f89c 3013 	ldrb.w	r3, [ip, #19]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1c6      	bne.n	8002490 <os_task_signal_event+0x10>
 8002502:	4620      	mov	r0, r4
 8002504:	f7ff fee4 	bl	80022d0 <os_task_wait_queue_empty>
 8002508:	2800      	cmp	r0, #0
 800250a:	d0c7      	beq.n	800249c <os_task_signal_event+0x1c>
 800250c:	e7c0      	b.n	8002490 <os_task_signal_event+0x10>
}
 800250e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002510:	2000022d 	.word	0x2000022d
 8002514:	2000019c 	.word	0x2000019c

08002518 <os_task_run>:
void os_task_run( void ) {
 8002518:	b508      	push	{r3, lr}
    os_assert( running_tid < nTasks );
 800251a:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <os_task_run+0x2c>)
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <os_task_run+0x30>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d208      	bcs.n	8002538 <os_task_run+0x20>
    task_list[ running_tid ].taskproc();
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <os_task_run+0x2c>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800252e:	009a      	lsls	r2, r3, #2
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <os_task_run+0x34>)
 8002532:	589b      	ldr	r3, [r3, r2]
 8002534:	4798      	blx	r3
}
 8002536:	bd08      	pop	{r3, pc}
    os_assert( running_tid < nTasks );
 8002538:	f44f 701c 	mov.w	r0, #624	; 0x270
 800253c:	f000 f808 	bl	8002550 <os_on_assert>
 8002540:	e7f1      	b.n	8002526 <os_task_run+0xe>
 8002542:	bf00      	nop
 8002544:	2000083c 	.word	0x2000083c
 8002548:	2000022d 	.word	0x2000022d
 800254c:	2000019c 	.word	0x2000019c

08002550 <os_on_assert>:


#include "cocoos.h"
#include <logger.h> ////

void os_on_assert( uint16_t line ) {
 8002550:	b508      	push	{r3, lr}
 8002552:	4604      	mov	r4, r0
    debug_print("*** cocoos assert failed "); debug_print_unsigned(line); debug_flush();
 8002554:	4806      	ldr	r0, [pc, #24]	; (8002570 <os_on_assert+0x20>)
 8002556:	f000 f9b1 	bl	80028bc <debug_print>
 800255a:	4620      	mov	r0, r4
 800255c:	f000 f9be 	bl	80028dc <debug_print_unsigned>
 8002560:	f000 f9a7 	bl	80028b2 <debug_flush>
    static volatile uint16_t l;
    os_disable_interrupts();
    l = line;
 8002564:	4b03      	ldr	r3, [pc, #12]	; (8002574 <os_on_assert+0x24>)
 8002566:	801c      	strh	r4, [r3, #0]
    l = l;
 8002568:	881a      	ldrh	r2, [r3, #0]
 800256a:	b292      	uxth	r2, r2
 800256c:	801a      	strh	r2, [r3, #0]
 800256e:	e7fe      	b.n	800256e <os_on_assert+0x1e>
 8002570:	08004730 	.word	0x08004730
 8002574:	20000228 	.word	0x20000228

08002578 <os_cbkSleep>:
*       
*/
/*********************************************************************************/
void os_cbkSleep( void ) {
    /* Enter low power mode here */
}
 8002578:	4770      	bx	lr

0800257a <os_tick>:
void os_tick( void ) {
 800257a:	b508      	push	{r3, lr}
    os_task_tick( 0, 1 );
 800257c:	2101      	movs	r1, #1
 800257e:	2000      	movs	r0, #0
 8002580:	f7ff ff28 	bl	80023d4 <os_task_tick>
}
 8002584:	bd08      	pop	{r3, pc}

08002586 <memcmp>:

int
memcmp (const void *m1,
	const void *m2,
	size_t n)
{
 8002586:	b410      	push	{r4}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  unsigned char *s1 = (unsigned char *) m1;
  unsigned char *s2 = (unsigned char *) m2;

  while (n--)
 8002588:	1e54      	subs	r4, r2, #1
 800258a:	b14a      	cbz	r2, 80025a0 <memcmp+0x1a>
    {
      if (*s1 != *s2)
 800258c:	7803      	ldrb	r3, [r0, #0]
 800258e:	780a      	ldrb	r2, [r1, #0]
 8002590:	4293      	cmp	r3, r2
 8002592:	d103      	bne.n	800259c <memcmp+0x16>
	{
	  return *s1 - *s2;
	}
      s1++;
 8002594:	3001      	adds	r0, #1
      s2++;
 8002596:	3101      	adds	r1, #1
  while (n--)
 8002598:	4622      	mov	r2, r4
 800259a:	e7f5      	b.n	8002588 <memcmp+0x2>
	  return *s1 - *s2;
 800259c:	1a98      	subs	r0, r3, r2
 800259e:	e000      	b.n	80025a2 <memcmp+0x1c>
    }
  return 0;
 80025a0:	2000      	movs	r0, #0
      s2++;
    }

  return 0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 80025a2:	bc10      	pop	{r4}
 80025a4:	4770      	bx	lr

080025a6 <memcpy>:
void *
__inhibit_loop_to_libcall
memcpy (void *__restrict dst0,
	const void *__restrict src0,
	size_t len0)
{
 80025a6:	b410      	push	{r4}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *dst = (char *) dst0;
 80025a8:	4603      	mov	r3, r0
  char *src = (char *) src0;

  void *save = dst0;

  while (len0--)
 80025aa:	e004      	b.n	80025b6 <memcpy+0x10>
    {
      *dst++ = *src++;
 80025ac:	780a      	ldrb	r2, [r1, #0]
 80025ae:	701a      	strb	r2, [r3, #0]
 80025b0:	3101      	adds	r1, #1
 80025b2:	3301      	adds	r3, #1
  while (len0--)
 80025b4:	4622      	mov	r2, r4
 80025b6:	1e54      	subs	r4, r2, #1
 80025b8:	2a00      	cmp	r2, #0
 80025ba:	d1f7      	bne.n	80025ac <memcpy+0x6>
  while (len0--)
    *dst++ = *src++;

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 80025bc:	bc10      	pop	{r4}
 80025be:	4770      	bx	lr

080025c0 <memset>:
void *
__inhibit_loop_to_libcall
memset (void *m,
	int c,
	size_t n)
{
 80025c0:	b410      	push	{r4}
  char *s = (char *) m;
 80025c2:	4603      	mov	r3, r0
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 80025c4:	e002      	b.n	80025cc <memset+0xc>
    *s++ = (char) c;
 80025c6:	7019      	strb	r1, [r3, #0]
 80025c8:	3301      	adds	r3, #1
  while (n--)
 80025ca:	4622      	mov	r2, r4
 80025cc:	1e54      	subs	r4, r2, #1
 80025ce:	2a00      	cmp	r2, #0
 80025d0:	d1f9      	bne.n	80025c6 <memset+0x6>

  return m;
}
 80025d2:	bc10      	pop	{r4}
 80025d4:	4770      	bx	lr

080025d6 <strlen>:
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 80025d6:	4603      	mov	r3, r0
 80025d8:	e000      	b.n	80025dc <strlen+0x6>
    str++;
 80025da:	3301      	adds	r3, #1
  while (*str)
 80025dc:	781a      	ldrb	r2, [r3, #0]
 80025de:	2a00      	cmp	r2, #0
 80025e0:	d1fb      	bne.n	80025da <strlen+0x4>
  return str - start;
}
 80025e2:	1a18      	subs	r0, r3, r0
 80025e4:	4770      	bx	lr

080025e6 <strncpy>:
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *dscan;
  const char *sscan;

  dscan = dst0;
 80025e6:	4603      	mov	r3, r0
  sscan = src0;
  while (count > 0)
 80025e8:	b1ca      	cbz	r2, 800261e <strncpy+0x38>
{
 80025ea:	b430      	push	{r4, r5}
    {
      --count;
 80025ec:	3a01      	subs	r2, #1
      if ((*dscan++ = *sscan++) == '\0')
 80025ee:	1c4d      	adds	r5, r1, #1
 80025f0:	1c5c      	adds	r4, r3, #1
 80025f2:	7809      	ldrb	r1, [r1, #0]
 80025f4:	7019      	strb	r1, [r3, #0]
 80025f6:	b121      	cbz	r1, 8002602 <strncpy+0x1c>
 80025f8:	4629      	mov	r1, r5
 80025fa:	4623      	mov	r3, r4
  while (count > 0)
 80025fc:	2a00      	cmp	r2, #0
 80025fe:	d1f5      	bne.n	80025ec <strncpy+0x6>
 8002600:	e000      	b.n	8002604 <strncpy+0x1e>
      if ((*dscan++ = *sscan++) == '\0')
 8002602:	4623      	mov	r3, r4
	break;
    }
  while (count-- > 0)
 8002604:	1e51      	subs	r1, r2, #1
 8002606:	b122      	cbz	r2, 8002612 <strncpy+0x2c>
    *dscan++ = '\0';
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	3301      	adds	r3, #1
  while (count-- > 0)
 800260e:	460a      	mov	r2, r1
 8002610:	e7f8      	b.n	8002604 <strncpy+0x1e>
  while (count-- > 0)
    *dst++ = '\0';

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8002612:	bc30      	pop	{r4, r5}
 8002614:	4770      	bx	lr
    *dscan++ = '\0';
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	3301      	adds	r3, #1
  while (count-- > 0)
 800261c:	460a      	mov	r2, r1
 800261e:	1e51      	subs	r1, r2, #1
 8002620:	2a00      	cmp	r2, #0
 8002622:	d1f8      	bne.n	8002616 <strncpy+0x30>
 8002624:	4770      	bx	lr
	...

08002628 <_ZL10__semihostiPv>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/connect.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!logEnabled) return -1;
 8002628:	4b07      	ldr	r3, [pc, #28]	; (8002648 <_ZL10__semihostiPv+0x20>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b143      	cbz	r3, 8002640 <_ZL10__semihostiPv+0x18>
static int __semihost(int command, void* message) {
 800262e:	b410      	push	{r4}
 8002630:	4602      	mov	r2, r0
 8002632:	460c      	mov	r4, r1
	:  //  Input operand list:
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
 8002634:	4610      	mov	r0, r2
 8002636:	4621      	mov	r1, r4
 8002638:	beab      	bkpt	0x00ab
	return 0;  //  TODO
 800263a:	2000      	movs	r0, #0
}
 800263c:	bc10      	pop	{r4}
 800263e:	4770      	bx	lr
    if (!logEnabled) return -1;
 8002640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000446 	.word	0x20000446

0800264c <_ZL16write_all_outputPKhtb>:
#define MAX_OUTPUT_LENGTH 60  //  Output at most 60 bytes at a time.

static uint16_t write_all_output(
    const uint8_t *buf,
	uint16_t len,
    bool forced) {
 800264c:	b570      	push	{r4, r5, r6, lr}
 800264e:	4606      	mov	r6, r0
    //  Write the buffer to all outputs: Arm Semihosting, USB Serial, HF2, ...
    //  We must flush as quickly as possible and USB Serial can only handle 64 bytes, so we just flush the next 60 bytes.
    //  Return the number of bytes flushed.
    ////if (!forced && target_in_isr()) { return 0; }      //  Can't write when called by interrupt routine, unless it's forced.
    //  if (target_in_isr()) { return 0; }      //  Can't write when called by interrupt routine
    uint16_t outlen = (len > MAX_OUTPUT_LENGTH) ? MAX_OUTPUT_LENGTH : len;
 8002650:	293c      	cmp	r1, #60	; 0x3c
 8002652:	bf28      	it	cs
 8002654:	213c      	movcs	r1, #60	; 0x3c
 8002656:	460d      	mov	r5, r1
#define ENABLE_SEMIHOSTING 
#endif  //  PLATFORMIO

#ifdef ENABLE_SEMIHOSTING
    #warning Semihosting ENABLED
    semihost_write(SEMIHOST_HANDLE, (const unsigned char *) buf, outlen);
 8002658:	460a      	mov	r2, r1
 800265a:	4601      	mov	r1, r0
 800265c:	2002      	movs	r0, #2
 800265e:	f000 f919 	bl	8002894 <_ZL14semihost_writemPKhj>
#else
    #warning Semihosting DISABLED
#endif  //  ENABLE_SEMIHOSTING
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8002662:	2400      	movs	r4, #0
 8002664:	e000      	b.n	8002668 <_ZL16write_all_outputPKhtb+0x1c>
 8002666:	3401      	adds	r4, #1
 8002668:	2c03      	cmp	r4, #3
 800266a:	dc08      	bgt.n	800267e <_ZL16write_all_outputPKhtb+0x32>
        if (output_funcs[i]) {
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <_ZL16write_all_outputPKhtb+0x38>)
 800266e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f7      	beq.n	8002666 <_ZL16write_all_outputPKhtb+0x1a>
            logger_output_func *func = output_funcs[i];
            func(buf, outlen);
 8002676:	4629      	mov	r1, r5
 8002678:	4630      	mov	r0, r6
 800267a:	4798      	blx	r3
 800267c:	e7f3      	b.n	8002666 <_ZL16write_all_outputPKhtb+0x1a>
        }
    }
    return outlen;
}
 800267e:	4628      	mov	r0, r5
 8002680:	bd70      	pop	{r4, r5, r6, pc}
 8002682:	bf00      	nop
 8002684:	20000434 	.word	0x20000434

08002688 <_ZL12debug_appendPKcj>:
    }
}

static void debug_append(const char *buffer, unsigned int length) {
    //  Append "length" number of bytes from "buffer" to the debug buffer.
    if (length >= DEBUG_BUFFER_SIZE) { return; }  //  Don't allow logging of very long messages.
 8002688:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800268c:	d223      	bcs.n	80026d6 <_ZL12debug_appendPKcj+0x4e>
static void debug_append(const char *buffer, unsigned int length) {
 800268e:	b538      	push	{r3, r4, r5, lr}
 8002690:	4605      	mov	r5, r0
 8002692:	460b      	mov	r3, r1
    if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) {
 8002694:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <_ZL12debug_appendPKcj+0x50>)
 8002696:	8812      	ldrh	r2, [r2, #0]
 8002698:	440a      	add	r2, r1
 800269a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800269e:	d30c      	bcc.n	80026ba <_ZL12debug_appendPKcj+0x32>
        //  Erase the entire buffer.  Latest log is more important than old log.
        strcpy(debugBuffer, "[DROPPED]");
 80026a0:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <_ZL12debug_appendPKcj+0x54>)
 80026a2:	4c0f      	ldr	r4, [pc, #60]	; (80026e0 <_ZL12debug_appendPKcj+0x58>)
 80026a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80026a6:	c403      	stmia	r4!, {r0, r1}
 80026a8:	8022      	strh	r2, [r4, #0]
        debugBufferLength = 9;
 80026aa:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <_ZL12debug_appendPKcj+0x50>)
 80026ac:	2109      	movs	r1, #9
 80026ae:	8011      	strh	r1, [r2, #0]
        //  Still can't fit after clearing.  Quit.
        if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) { return; }
 80026b0:	8812      	ldrh	r2, [r2, #0]
 80026b2:	441a      	add	r2, r3
 80026b4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80026b8:	d20c      	bcs.n	80026d4 <_ZL12debug_appendPKcj+0x4c>
 80026ba:	461c      	mov	r4, r3
 80026bc:	4629      	mov	r1, r5
    }
    //  Else append to the buffer.
    memcpy(&debugBuffer[debugBufferLength], buffer, length);
 80026be:	4d06      	ldr	r5, [pc, #24]	; (80026d8 <_ZL12debug_appendPKcj+0x50>)
 80026c0:	882b      	ldrh	r3, [r5, #0]
 80026c2:	4622      	mov	r2, r4
 80026c4:	4806      	ldr	r0, [pc, #24]	; (80026e0 <_ZL12debug_appendPKcj+0x58>)
 80026c6:	4418      	add	r0, r3
 80026c8:	f7ff ff6d 	bl	80025a6 <memcpy>
    debugBufferLength += length;
 80026cc:	882b      	ldrh	r3, [r5, #0]
 80026ce:	4423      	add	r3, r4
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	802b      	strh	r3, [r5, #0]
}
 80026d4:	bd38      	pop	{r3, r4, r5, pc}
 80026d6:	4770      	bx	lr
 80026d8:	20000444 	.word	0x20000444
 80026dc:	08004760 	.word	0x08004760
 80026e0:	20000230 	.word	0x20000230

080026e4 <enable_log>:
void enable_log(void) { logEnabled = true; }
 80026e4:	4b01      	ldr	r3, [pc, #4]	; (80026ec <enable_log+0x8>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	4770      	bx	lr
 80026ec:	20000446 	.word	0x20000446

080026f0 <logger_add_output>:
    if (!func) { return -1; }
 80026f0:	4601      	mov	r1, r0
 80026f2:	b1b8      	cbz	r0, 8002724 <logger_add_output+0x34>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 80026f4:	2300      	movs	r3, #0
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	dc06      	bgt.n	8002708 <logger_add_output+0x18>
        if (output_funcs[i] == func) {
 80026fa:	4a0e      	ldr	r2, [pc, #56]	; (8002734 <logger_add_output+0x44>)
 80026fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002700:	428a      	cmp	r2, r1
 8002702:	d012      	beq.n	800272a <logger_add_output+0x3a>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8002704:	3301      	adds	r3, #1
 8002706:	e7f6      	b.n	80026f6 <logger_add_output+0x6>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8002708:	2300      	movs	r3, #0
 800270a:	2b03      	cmp	r3, #3
 800270c:	dc0f      	bgt.n	800272e <logger_add_output+0x3e>
        if (!output_funcs[i]) {
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <logger_add_output+0x44>)
 8002710:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002714:	b10a      	cbz	r2, 800271a <logger_add_output+0x2a>
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8002716:	3301      	adds	r3, #1
 8002718:	e7f7      	b.n	800270a <logger_add_output+0x1a>
            output_funcs[i] = func;
 800271a:	4a06      	ldr	r2, [pc, #24]	; (8002734 <logger_add_output+0x44>)
 800271c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            return 0;
 8002720:	2000      	movs	r0, #0
 8002722:	4770      	bx	lr
    if (!func) { return -1; }
 8002724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002728:	4770      	bx	lr
            return 0;  //  Already added.
 800272a:	2000      	movs	r0, #0
 800272c:	4770      	bx	lr
    return -1;  //  Too many outputs.
 800272e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8002732:	4770      	bx	lr
 8002734:	20000434 	.word	0x20000434

08002738 <_Z20debug_flush_internalb>:
void debug_flush_internal(bool forced) {
 8002738:	b538      	push	{r3, r4, r5, lr}
    if (debugBufferLength == 0) { return; }  //  Debug buffer is empty, nothing to write.
 800273a:	4b11      	ldr	r3, [pc, #68]	; (8002780 <_Z20debug_flush_internalb+0x48>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	b903      	cbnz	r3, 8002744 <_Z20debug_flush_internalb+0xc>
}
 8002742:	bd38      	pop	{r3, r4, r5, pc}
 8002744:	4602      	mov	r2, r0
	uint16_t outlen = write_all_output((const uint8_t *) debugBuffer, debugBufferLength, forced);
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <_Z20debug_flush_internalb+0x48>)
 8002748:	8819      	ldrh	r1, [r3, #0]
 800274a:	480e      	ldr	r0, [pc, #56]	; (8002784 <_Z20debug_flush_internalb+0x4c>)
 800274c:	f7ff ff7e 	bl	800264c <_ZL16write_all_outputPKhtb>
    if (outlen == 0) {
 8002750:	4604      	mov	r4, r0
 8002752:	2800      	cmp	r0, #0
 8002754:	d0f5      	beq.n	8002742 <_Z20debug_flush_internalb+0xa>
    } else if (outlen >= debugBufferLength) {
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <_Z20debug_flush_internalb+0x48>)
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4283      	cmp	r3, r0
 800275e:	d803      	bhi.n	8002768 <_Z20debug_flush_internalb+0x30>
        debugBufferLength = 0;
 8002760:	4b07      	ldr	r3, [pc, #28]	; (8002780 <_Z20debug_flush_internalb+0x48>)
 8002762:	2200      	movs	r2, #0
 8002764:	801a      	strh	r2, [r3, #0]
        return;
 8002766:	e7ec      	b.n	8002742 <_Z20debug_flush_internalb+0xa>
    memcpy(debugBuffer, &debugBuffer[outlen], debugBufferLength - outlen);
 8002768:	4806      	ldr	r0, [pc, #24]	; (8002784 <_Z20debug_flush_internalb+0x4c>)
 800276a:	4d05      	ldr	r5, [pc, #20]	; (8002780 <_Z20debug_flush_internalb+0x48>)
 800276c:	882a      	ldrh	r2, [r5, #0]
 800276e:	1b12      	subs	r2, r2, r4
 8002770:	1901      	adds	r1, r0, r4
 8002772:	f7ff ff18 	bl	80025a6 <memcpy>
    debugBufferLength -= outlen;
 8002776:	882b      	ldrh	r3, [r5, #0]
 8002778:	1b1c      	subs	r4, r3, r4
 800277a:	b2a4      	uxth	r4, r4
 800277c:	802c      	strh	r4, [r5, #0]
 800277e:	e7e0      	b.n	8002742 <_Z20debug_flush_internalb+0xa>
 8002780:	20000444 	.word	0x20000444
 8002784:	20000230 	.word	0x20000230

08002788 <debug_force_flush>:
void debug_force_flush(void) {
 8002788:	b510      	push	{r4, lr}
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 800278a:	2400      	movs	r4, #0
 800278c:	2c63      	cmp	r4, #99	; 0x63
 800278e:	dc08      	bgt.n	80027a2 <debug_force_flush+0x1a>
        if (debugBufferLength == 0) { return; }  //  No more chunks.
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <debug_force_flush+0x1c>)
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	b123      	cbz	r3, 80027a2 <debug_force_flush+0x1a>
        debug_flush_internal(true);
 8002798:	2001      	movs	r0, #1
 800279a:	f7ff ffcd 	bl	8002738 <_Z20debug_flush_internalb>
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 800279e:	3401      	adds	r4, #1
 80027a0:	e7f4      	b.n	800278c <debug_force_flush+0x4>
}
 80027a2:	bd10      	pop	{r4, pc}
 80027a4:	20000444 	.word	0x20000444

080027a8 <_Z11debug_printj>:

void debug_print(size_t l) {
 80027a8:	b510      	push	{r4, lr}
 80027aa:	b084      	sub	sp, #16
    #define MAX_INT_LENGTH 10
    char buffer[MAX_INT_LENGTH + 1];
    int size = MAX_INT_LENGTH + 1;
    bool prefixByZero = false;
    int length = 0;
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 80027ac:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <_Z11debug_printj+0x7c>)
    int length = 0;
 80027ae:	2100      	movs	r1, #0
 80027b0:	e012      	b.n	80027d8 <_Z11debug_printj+0x30>
        char digit = '0' + (char)(l / divisor);
        if (digit > '9') {
            debug_print("(Overflow)");
 80027b2:	481d      	ldr	r0, [pc, #116]	; (8002828 <_Z11debug_printj+0x80>)
 80027b4:	f000 f882 	bl	80028bc <debug_print>
 80027b8:	e032      	b.n	8002820 <_Z11debug_printj+0x78>
            return;
        }
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
 80027ba:	290a      	cmp	r1, #10
 80027bc:	dc04      	bgt.n	80027c8 <_Z11debug_printj+0x20>
                buffer[length++] = digit;
 80027be:	ac04      	add	r4, sp, #16
 80027c0:	440c      	add	r4, r1
 80027c2:	f804 2c0c 	strb.w	r2, [r4, #-12]
 80027c6:	3101      	adds	r1, #1
            }
        }
        l = l % divisor;
 80027c8:	fbb0 f2f3 	udiv	r2, r0, r3
 80027cc:	fb03 0012 	mls	r0, r3, r2, r0
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 80027d0:	4a16      	ldr	r2, [pc, #88]	; (800282c <_Z11debug_printj+0x84>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	08db      	lsrs	r3, r3, #3
 80027d8:	b153      	cbz	r3, 80027f0 <_Z11debug_printj+0x48>
        char digit = '0' + (char)(l / divisor);
 80027da:	fbb0 f2f3 	udiv	r2, r0, r3
 80027de:	3230      	adds	r2, #48	; 0x30
 80027e0:	b2d2      	uxtb	r2, r2
        if (digit > '9') {
 80027e2:	2a39      	cmp	r2, #57	; 0x39
 80027e4:	d8e5      	bhi.n	80027b2 <_Z11debug_printj+0xa>
        if (digit > '0' || length > 0 || prefixByZero) {
 80027e6:	2a30      	cmp	r2, #48	; 0x30
 80027e8:	d8e7      	bhi.n	80027ba <_Z11debug_printj+0x12>
 80027ea:	2900      	cmp	r1, #0
 80027ec:	dce5      	bgt.n	80027ba <_Z11debug_printj+0x12>
 80027ee:	e7eb      	b.n	80027c8 <_Z11debug_printj+0x20>
    }
    if (length == 0) { buffer[length++] = '0'; };
 80027f0:	b929      	cbnz	r1, 80027fe <_Z11debug_printj+0x56>
 80027f2:	ab04      	add	r3, sp, #16
 80027f4:	440b      	add	r3, r1
 80027f6:	2230      	movs	r2, #48	; 0x30
 80027f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80027fc:	3101      	adds	r1, #1
    if (length < size) buffer[length] = 0;
 80027fe:	290a      	cmp	r1, #10
 8002800:	dc04      	bgt.n	800280c <_Z11debug_printj+0x64>
 8002802:	ab04      	add	r3, sp, #16
 8002804:	4419      	add	r1, r3
 8002806:	2300      	movs	r3, #0
 8002808:	f801 3c0c 	strb.w	r3, [r1, #-12]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 800280c:	2300      	movs	r3, #0
 800280e:	f88d 300e 	strb.w	r3, [sp, #14]

    debug_append(buffer, strlen(buffer));
 8002812:	a801      	add	r0, sp, #4
 8002814:	f7ff fedf 	bl	80025d6 <strlen>
 8002818:	4601      	mov	r1, r0
 800281a:	a801      	add	r0, sp, #4
 800281c:	f7ff ff34 	bl	8002688 <_ZL12debug_appendPKcj>
}
 8002820:	b004      	add	sp, #16
 8002822:	bd10      	pop	{r4, pc}
 8002824:	3b9aca00 	.word	0x3b9aca00
 8002828:	08004754 	.word	0x08004754
 800282c:	cccccccd 	.word	0xcccccccd

08002830 <_Z11debug_printi>:

void debug_print(int i) {
 8002830:	b510      	push	{r4, lr}
    if (i == 0) { debug_append("0", 1); } 
 8002832:	b128      	cbz	r0, 8002840 <_Z11debug_printi+0x10>
 8002834:	4604      	mov	r4, r0
    else if (i >= 0) { debug_print((size_t) i); }
 8002836:	2800      	cmp	r0, #0
 8002838:	db07      	blt.n	800284a <_Z11debug_printi+0x1a>
 800283a:	f7ff ffb5 	bl	80027a8 <_Z11debug_printj>
    else {  // i < 0.
        debug_append("-", 1);
        debug_print((size_t) -i);
    }
}
 800283e:	bd10      	pop	{r4, pc}
    if (i == 0) { debug_append("0", 1); } 
 8002840:	2101      	movs	r1, #1
 8002842:	4806      	ldr	r0, [pc, #24]	; (800285c <_Z11debug_printi+0x2c>)
 8002844:	f7ff ff20 	bl	8002688 <_ZL12debug_appendPKcj>
 8002848:	e7f9      	b.n	800283e <_Z11debug_printi+0xe>
        debug_append("-", 1);
 800284a:	2101      	movs	r1, #1
 800284c:	4804      	ldr	r0, [pc, #16]	; (8002860 <_Z11debug_printi+0x30>)
 800284e:	f7ff ff1b 	bl	8002688 <_ZL12debug_appendPKcj>
        debug_print((size_t) -i);
 8002852:	4260      	negs	r0, r4
 8002854:	f7ff ffa8 	bl	80027a8 <_Z11debug_printj>
}
 8002858:	e7f1      	b.n	800283e <_Z11debug_printi+0xe>
 800285a:	bf00      	nop
 800285c:	0800474c 	.word	0x0800474c
 8002860:	08004750 	.word	0x08004750

08002864 <debug_println>:
void debug_print(const char *s) {
    if (s[0] == 0) return;
	debug_append(s, strlen(s));
}

void debug_println(const char *s) {
 8002864:	b508      	push	{r3, lr}
    if (s[0] != 0) { debug_print(s); }
 8002866:	7803      	ldrb	r3, [r0, #0]
 8002868:	b923      	cbnz	r3, 8002874 <debug_println+0x10>
    debug_append("\r\n", 2);
 800286a:	2102      	movs	r1, #2
 800286c:	4803      	ldr	r0, [pc, #12]	; (800287c <debug_println+0x18>)
 800286e:	f7ff ff0b 	bl	8002688 <_ZL12debug_appendPKcj>
}
 8002872:	bd08      	pop	{r3, pc}
    if (s[0] != 0) { debug_print(s); }
 8002874:	f000 f822 	bl	80028bc <debug_print>
 8002878:	e7f7      	b.n	800286a <debug_println+0x6>
 800287a:	bf00      	nop
 800287c:	0800476c 	.word	0x0800476c

08002880 <_Z13debug_printlni>:

void debug_print(char ch) {
	debug_append(&ch, 1);
}

void debug_println(int i) {
 8002880:	b508      	push	{r3, lr}
    debug_print(i);
 8002882:	f7ff ffd5 	bl	8002830 <_Z11debug_printi>
    debug_append("\r\n", 2);
 8002886:	2102      	movs	r1, #2
 8002888:	4801      	ldr	r0, [pc, #4]	; (8002890 <_Z13debug_printlni+0x10>)
 800288a:	f7ff fefd 	bl	8002688 <_ZL12debug_appendPKcj>
}
 800288e:	bd08      	pop	{r3, pc}
 8002890:	0800476c 	.word	0x0800476c

08002894 <_ZL14semihost_writemPKhj>:
    if (length == 0) { return 0; }
 8002894:	b90a      	cbnz	r2, 800289a <_ZL14semihost_writemPKhj+0x6>
 8002896:	2000      	movs	r0, #0
}
 8002898:	4770      	bx	lr
static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
 800289a:	b500      	push	{lr}
 800289c:	b085      	sub	sp, #20
    args[0] = (uint32_t)fh;
 800289e:	9001      	str	r0, [sp, #4]
    args[1] = (uint32_t)buffer;
 80028a0:	9102      	str	r1, [sp, #8]
    args[2] = (uint32_t)length;
 80028a2:	9203      	str	r2, [sp, #12]
    return __semihost(SYS_WRITE, args);
 80028a4:	a901      	add	r1, sp, #4
 80028a6:	2005      	movs	r0, #5
 80028a8:	f7ff febe 	bl	8002628 <_ZL10__semihostiPv>
}
 80028ac:	b005      	add	sp, #20
 80028ae:	f85d fb04 	ldr.w	pc, [sp], #4

080028b2 <debug_flush>:
void debug_flush(void) {
 80028b2:	b508      	push	{r3, lr}
    return debug_flush_internal(false);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7ff ff3f 	bl	8002738 <_Z20debug_flush_internalb>
}
 80028ba:	bd08      	pop	{r3, pc}

080028bc <debug_print>:
    if (s[0] == 0) return;
 80028bc:	7803      	ldrb	r3, [r0, #0]
 80028be:	b903      	cbnz	r3, 80028c2 <debug_print+0x6>
 80028c0:	4770      	bx	lr
void debug_print(const char *s) {
 80028c2:	b510      	push	{r4, lr}
 80028c4:	4604      	mov	r4, r0
	debug_append(s, strlen(s));
 80028c6:	f7ff fe86 	bl	80025d6 <strlen>
 80028ca:	4601      	mov	r1, r0
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7ff fedb 	bl	8002688 <_ZL12debug_appendPKcj>
}
 80028d2:	bd10      	pop	{r4, pc}

080028d4 <debug_print_int>:
void debug_println(float f) {
    debug_print(f);
    debug_append("\r\n", 2);
}

void debug_print_int(int i) { debug_print(i); }
 80028d4:	b508      	push	{r3, lr}
 80028d6:	f7ff ffab 	bl	8002830 <_Z11debug_printi>
 80028da:	bd08      	pop	{r3, pc}

080028dc <debug_print_unsigned>:
void debug_print_unsigned(size_t l) { debug_print(l); }
 80028dc:	b508      	push	{r3, lr}
 80028de:	f7ff ff63 	bl	80027a8 <_Z11debug_printj>
 80028e2:	bd08      	pop	{r3, pc}

080028e4 <debug_printhex>:
void debug_print_char(char ch) { debug_print(ch); }
void debug_print_float(float f) { debug_print(f); }

void debug_printhex(uint8_t v) {
 80028e4:	b510      	push	{r4, lr}
 80028e6:	b082      	sub	sp, #8
    #define MAX_BYTE_LENGTH 2
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 80028e8:	2310      	movs	r3, #16
    int length = 0;
 80028ea:	2200      	movs	r2, #0
 80028ec:	e005      	b.n	80028fa <debug_printhex+0x16>
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
                buffer[length++] = digit;
            }
        }
        v = v % divisor;
 80028ee:	fbb0 f1f3 	udiv	r1, r0, r3
 80028f2:	fb03 0011 	mls	r0, r3, r1, r0
 80028f6:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 80028f8:	091b      	lsrs	r3, r3, #4
 80028fa:	b18b      	cbz	r3, 8002920 <debug_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
 80028fc:	fbb0 f1f3 	udiv	r1, r0, r3
 8002900:	b249      	sxtb	r1, r1
 8002902:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8002906:	b2e4      	uxtb	r4, r4
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8002908:	2c39      	cmp	r4, #57	; 0x39
 800290a:	d901      	bls.n	8002910 <debug_printhex+0x2c>
 800290c:	3157      	adds	r1, #87	; 0x57
 800290e:	b2cc      	uxtb	r4, r1
            if (length < size) {
 8002910:	2a02      	cmp	r2, #2
 8002912:	dcec      	bgt.n	80028ee <debug_printhex+0xa>
                buffer[length++] = digit;
 8002914:	a902      	add	r1, sp, #8
 8002916:	4411      	add	r1, r2
 8002918:	f801 4c04 	strb.w	r4, [r1, #-4]
 800291c:	3201      	adds	r2, #1
 800291e:	e7e6      	b.n	80028ee <debug_printhex+0xa>
    }
    if (length == 0) { buffer[length++] = '0'; };
 8002920:	b92a      	cbnz	r2, 800292e <debug_printhex+0x4a>
 8002922:	ab02      	add	r3, sp, #8
 8002924:	4413      	add	r3, r2
 8002926:	2130      	movs	r1, #48	; 0x30
 8002928:	f803 1c04 	strb.w	r1, [r3, #-4]
 800292c:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
 800292e:	2a02      	cmp	r2, #2
 8002930:	dc04      	bgt.n	800293c <debug_printhex+0x58>
 8002932:	ab02      	add	r3, sp, #8
 8002934:	441a      	add	r2, r3
 8002936:	2300      	movs	r3, #0
 8002938:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 800293c:	2300      	movs	r3, #0
 800293e:	f88d 3006 	strb.w	r3, [sp, #6]

    debug_append(buffer, strlen(buffer));
 8002942:	a801      	add	r0, sp, #4
 8002944:	f7ff fe47 	bl	80025d6 <strlen>
 8002948:	4601      	mov	r1, r0
 800294a:	a801      	add	r0, sp, #4
 800294c:	f7ff fe9c 	bl	8002688 <_ZL12debug_appendPKcj>
}
 8002950:	b002      	add	sp, #8
 8002952:	bd10      	pop	{r4, pc}

08002954 <debug_printhex_unsigned>:

void debug_printhex_unsigned(size_t l) {
 8002954:	b538      	push	{r3, r4, r5, lr}
 8002956:	4605      	mov	r5, r0
    //  Write an unsigned int in hexadecimal to the buffered debug log.
    for (int i = sizeof(l) - 1; i >= 0; i--) {
 8002958:	2403      	movs	r4, #3
 800295a:	2c00      	cmp	r4, #0
 800295c:	db07      	blt.n	800296e <debug_printhex_unsigned+0x1a>
        uint8_t b = 0xff & (l >> (8 * i));
 800295e:	00e0      	lsls	r0, r4, #3
 8002960:	fa25 f000 	lsr.w	r0, r5, r0
        debug_printhex(b);
 8002964:	b2c0      	uxtb	r0, r0
 8002966:	f7ff ffbd 	bl	80028e4 <debug_printhex>
    for (int i = sizeof(l) - 1; i >= 0; i--) {
 800296a:	3c01      	subs	r4, #1
 800296c:	e7f5      	b.n	800295a <debug_printhex_unsigned+0x6>
    }
}
 800296e:	bd38      	pop	{r3, r4, r5, pc}

08002970 <platform_setup>:
extern "C" void target_panic(int statusCode); ////

//  Debugging is off by default.  Developer must switch it on with enable_debug().
static bool debugEnabled = false;

void platform_setup(void) {
 8002970:	b508      	push	{r3, lr}
    //  Initialise the STM32 platform. At startup, the onboard LED will blink on-off-on-off-on and stays on.
	//  If LED blinks on-off-on-off and stays off, then debug mode is enabled and no debugger is connected.
	rcc_clock_setup_in_hse_8mhz_out_72mhz();
 8002972:	f7fe fa19 	bl	8000da8 <rcc_clock_setup_in_hse_8mhz_out_72mhz>
	led_setup();
 8002976:	f000 f82b 	bl	80029d0 <led_setup>
	if (debugEnabled) {
 800297a:	4b0e      	ldr	r3, [pc, #56]	; (80029b4 <platform_setup+0x44>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b913      	cbnz	r3, 8002986 <platform_setup+0x16>
  		debug_println("----platform_setup");
		led_on();
	}

	////TODO
	test_codal();
 8002980:	f7fd ffc4 	bl	800090c <test_codal>
}
 8002984:	bd08      	pop	{r3, pc}
		led_on(); led_wait();
 8002986:	f000 f833 	bl	80029f0 <led_on>
 800298a:	f000 f845 	bl	8002a18 <led_wait>
		led_off(); led_wait();
 800298e:	f000 f839 	bl	8002a04 <led_off>
 8002992:	f000 f841 	bl	8002a18 <led_wait>
		led_on(); led_wait();
 8002996:	f000 f82b 	bl	80029f0 <led_on>
 800299a:	f000 f83d 	bl	8002a18 <led_wait>
		led_off(); led_wait();
 800299e:	f000 f831 	bl	8002a04 <led_off>
 80029a2:	f000 f839 	bl	8002a18 <led_wait>
  		debug_println("----platform_setup");
 80029a6:	4804      	ldr	r0, [pc, #16]	; (80029b8 <platform_setup+0x48>)
 80029a8:	f7ff ff5c 	bl	8002864 <debug_println>
		led_on();
 80029ac:	f000 f820 	bl	80029f0 <led_on>
 80029b0:	e7e6      	b.n	8002980 <platform_setup+0x10>
 80029b2:	bf00      	nop
 80029b4:	20000458 	.word	0x20000458
 80029b8:	08004770 	.word	0x08004770

080029bc <enable_debug>:

void enable_debug(void) {
 80029bc:	b508      	push	{r3, lr}
	//  Enable ARM Semihosting for displaying debug messages.
	debugEnabled = true;
 80029be:	4b03      	ldr	r3, [pc, #12]	; (80029cc <enable_debug+0x10>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
	enable_log();
 80029c4:	f7ff fe8e 	bl	80026e4 <enable_log>
}
 80029c8:	bd08      	pop	{r3, pc}
 80029ca:	bf00      	nop
 80029cc:	20000458 	.word	0x20000458

080029d0 <led_setup>:
//  Blink code from https://github.com/Apress/Beg-STM32-Devel-FreeRTOS-libopencm3-GCC
#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/gpio.h>
#include "bluepill.h"

void led_setup(void) {
 80029d0:	b508      	push	{r3, lr}
	//  Set up Blue Pill LED GPIO.
	//  Enable GPIOC clock.
	rcc_periph_clock_enable(RCC_GPIOC);
 80029d2:	f44f 7041 	mov.w	r0, #772	; 0x304
 80029d6:	f7fe fe96 	bl	8001706 <rcc_periph_clock_enable>
	//  Set GPIO13 (in GPIO port C) to 'output push-pull'.
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 80029da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029de:	2200      	movs	r2, #0
 80029e0:	2102      	movs	r1, #2
 80029e2:	4802      	ldr	r0, [pc, #8]	; (80029ec <led_setup+0x1c>)
 80029e4:	f7fe fe50 	bl	8001688 <gpio_set_mode>
}
 80029e8:	bd08      	pop	{r3, pc}
 80029ea:	bf00      	nop
 80029ec:	40011000 	.word	0x40011000

080029f0 <led_on>:

void led_on(void) {
 80029f0:	b508      	push	{r3, lr}
	//  Switch Blue Pill LED on.
	gpio_clear(GPIOC, GPIO13);
 80029f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029f6:	4802      	ldr	r0, [pc, #8]	; (8002a00 <led_on+0x10>)
 80029f8:	f7fe fe7e 	bl	80016f8 <gpio_clear>
}
 80029fc:	bd08      	pop	{r3, pc}
 80029fe:	bf00      	nop
 8002a00:	40011000 	.word	0x40011000

08002a04 <led_off>:

void led_off(void) {
 8002a04:	b508      	push	{r3, lr}
	//  Switch Blue Pill LED off.
	gpio_set(GPIOC, GPIO13);
 8002a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a0a:	4802      	ldr	r0, [pc, #8]	; (8002a14 <led_off+0x10>)
 8002a0c:	f7fe fe72 	bl	80016f4 <gpio_set>
}
 8002a10:	bd08      	pop	{r3, pc}
 8002a12:	bf00      	nop
 8002a14:	40011000 	.word	0x40011000

08002a18 <led_wait>:
	//  Toggle Blue Pill LED.
	gpio_toggle(GPIOC, GPIO13);
}

void led_wait(void) {
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
 8002a18:	2300      	movs	r3, #0
 8002a1a:	4a03      	ldr	r2, [pc, #12]	; (8002a28 <led_wait+0x10>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	dc02      	bgt.n	8002a26 <led_wait+0xe>
		__asm__("nop");
 8002a20:	bf00      	nop
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
 8002a22:	3301      	adds	r3, #1
 8002a24:	e7f9      	b.n	8002a1a <led_wait+0x2>
}
 8002a26:	4770      	bx	lr
 8002a28:	0016e35f 	.word	0x0016e35f

08002a2c <_ZL25custom_rtc_awake_from_off7rcc_osc>:
select the clock source, clear the RTC registers and enable the RTC.
@param[in] clock_source ::rcc_osc. RTC clock source. Only the values HSE, LSE
    and LSI are permitted.
*/
static void custom_rtc_awake_from_off(enum rcc_osc clock_source)
{
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	4604      	mov	r4, r0
	uint32_t reg32;

	/* Enable power and backup interface clocks. */
	rcc_periph_clock_enable(RCC_PWR);
 8002a30:	f44f 7067 	mov.w	r0, #924	; 0x39c
 8002a34:	f7fe fe67 	bl	8001706 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_BKP);
 8002a38:	f240 309b 	movw	r0, #923	; 0x39b
 8002a3c:	f7fe fe63 	bl	8001706 <rcc_periph_clock_enable>

	/* Enable access to the backup registers and the RTC. */
	pwr_disable_backup_domain_write_protect();
 8002a40:	f7fe faca 	bl	8000fd8 <pwr_disable_backup_domain_write_protect>

	/* Set the clock source */
	rcc_set_rtc_clock_source(clock_source);
 8002a44:	4620      	mov	r0, r4
 8002a46:	f7fe f937 	bl	8000cb8 <rcc_set_rtc_clock_source>

	/* Clear the RTC Control Register */
	RTC_CRH = 0;
 8002a4a:	2400      	movs	r4, #0
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x64>)
 8002a4e:	601c      	str	r4, [r3, #0]
	RTC_CRL = 0;
 8002a50:	4d10      	ldr	r5, [pc, #64]	; (8002a94 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x68>)
 8002a52:	602c      	str	r4, [r5, #0]

	/* Enable the RTC. */
	rcc_enable_rtc_clock();
 8002a54:	f7fe f928 	bl	8000ca8 <rcc_enable_rtc_clock>

	/* Clear the Registers */
	rtc_enter_config_mode();
 8002a58:	f7fe f9ee 	bl	8000e38 <rtc_enter_config_mode>
	RTC_PRLH = 0;
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x6c>)
 8002a5e:	601c      	str	r4, [r3, #0]
	RTC_PRLL = 0;
 8002a60:	3304      	adds	r3, #4
 8002a62:	601c      	str	r4, [r3, #0]
	RTC_CNTH = 0;
 8002a64:	330c      	adds	r3, #12
 8002a66:	601c      	str	r4, [r3, #0]
	RTC_CNTL = 0;
 8002a68:	3304      	adds	r3, #4
 8002a6a:	601c      	str	r4, [r3, #0]
	RTC_ALRH = 0xFFFF;
 8002a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a70:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <_ZL25custom_rtc_awake_from_off7rcc_osc+0x70>)
 8002a72:	6013      	str	r3, [r2, #0]
	RTC_ALRL = 0xFFFF;
 8002a74:	3204      	adds	r2, #4
 8002a76:	6013      	str	r3, [r2, #0]
	rtc_exit_config_mode();
 8002a78:	f7fe f9f0 	bl	8000e5c <rtc_exit_config_mode>

	/* Wait for the RSF bit in RTC_CRL to be set by hardware. */
	RTC_CRL &= ~RTC_CRL_RSF;
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	f023 0308 	bic.w	r3, r3, #8
 8002a82:	602b      	str	r3, [r5, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RSF)) == 0);
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x68>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f013 0f08 	tst.w	r3, #8
 8002a8c:	d0fa      	beq.n	8002a84 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x58>
}
 8002a8e:	bd38      	pop	{r3, r4, r5, pc}
 8002a90:	40002800 	.word	0x40002800
 8002a94:	40002804 	.word	0x40002804
 8002a98:	40002808 	.word	0x40002808
 8002a9c:	40002820 	.word	0x40002820

08002aa0 <_ZL9rtc_setupv>:
static void rtc_setup(void) {
 8002aa0:	b508      	push	{r3, lr}
	rcc_enable_rtc_clock();
 8002aa2:	f7fe f901 	bl	8000ca8 <rcc_enable_rtc_clock>
	rtc_interrupt_disable(RTC_SEC);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fe fa44 	bl	8000f34 <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_ALR);
 8002aac:	2001      	movs	r0, #1
 8002aae:	f7fe fa41 	bl	8000f34 <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_OW);
 8002ab2:	2002      	movs	r0, #2
 8002ab4:	f7fe fa3e 	bl	8000f34 <rtc_interrupt_disable>
	debug_println("rtc awake..."); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 8002ab8:	481b      	ldr	r0, [pc, #108]	; (8002b28 <_ZL9rtc_setupv+0x88>)
 8002aba:	f7ff fed3 	bl	8002864 <debug_println>
 8002abe:	f7ff fef8 	bl	80028b2 <debug_flush>
	custom_rtc_awake_from_off(clock_source);  //  This will enable RTC.
 8002ac2:	2005      	movs	r0, #5
 8002ac4:	f7ff ffb2 	bl	8002a2c <_ZL25custom_rtc_awake_from_off7rcc_osc>
	rtc_set_prescale_val(prescale);
 8002ac8:	2020      	movs	r0, #32
 8002aca:	f7fe f9e9 	bl	8000ea0 <rtc_set_prescale_val>
	debug_println("rtc awake ok"); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 8002ace:	4817      	ldr	r0, [pc, #92]	; (8002b2c <_ZL9rtc_setupv+0x8c>)
 8002ad0:	f7ff fec8 	bl	8002864 <debug_println>
 8002ad4:	f7ff feed 	bl	80028b2 <debug_flush>
	rtc_set_counter_val(0);              //  Start counting millisecond ticks from 0.
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7fe f9fb 	bl	8000ed4 <rtc_set_counter_val>
	rtc_set_alarm_time((uint32_t) -1);   //  Reset alarm to -1 or 0xffffffff so we don't trigger now.
 8002ade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ae2:	f7fe f9cd 	bl	8000e80 <rtc_set_alarm_time>
	exti_set_trigger(EXTI17, EXTI_TRIGGER_RISING);  //  Enable alarm wakeup via the interrupt.
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002aec:	f7fe fa84 	bl	8000ff8 <exti_set_trigger>
	exti_enable_request(EXTI17);
 8002af0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002af4:	f7fe faa6 	bl	8001044 <exti_enable_request>
	nvic_enable_irq(NVIC_RTC_IRQ);        //  Enable RTC tick interrupt processing.
 8002af8:	2003      	movs	r0, #3
 8002afa:	f7ff fa71 	bl	8001fe0 <nvic_enable_irq>
	nvic_enable_irq(NVIC_RTC_ALARM_IRQ);  //  Enable RTC alarm wakeup interrupt processing.
 8002afe:	2029      	movs	r0, #41	; 0x29
 8002b00:	f7ff fa6e 	bl	8001fe0 <nvic_enable_irq>
 8002b04:	b672      	cpsid	i
	rtc_clear_flag(RTC_SEC);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7fe fa34 	bl	8000f74 <rtc_clear_flag>
	rtc_clear_flag(RTC_ALR);
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f7fe fa31 	bl	8000f74 <rtc_clear_flag>
	rtc_clear_flag(RTC_OW);
 8002b12:	2002      	movs	r0, #2
 8002b14:	f7fe fa2e 	bl	8000f74 <rtc_clear_flag>
	rtc_interrupt_enable(RTC_SEC);  //  Allow RTC to generate tick interrupts.
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7fe f9eb 	bl	8000ef4 <rtc_interrupt_enable>
	rtc_interrupt_enable(RTC_ALR);  //  Allow RTC to generate alarm interrupts.
 8002b1e:	2001      	movs	r0, #1
 8002b20:	f7fe f9e8 	bl	8000ef4 <rtc_interrupt_enable>
	__asm__("CPSIE I\n");
 8002b24:	b662      	cpsie	i
}
 8002b26:	bd08      	pop	{r3, pc}
 8002b28:	08004784 	.word	0x08004784
 8002b2c:	08004794 	.word	0x08004794

08002b30 <platform_start_timer>:
void platform_start_timer(void (*tickFunc0)(void), void (*alarmFunc0)(void)) {
 8002b30:	b508      	push	{r3, lr}
  	tickFunc = tickFunc0;    //  Allow tickFunc to be modified at every call to platform_start_timer().
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <platform_start_timer+0x24>)
 8002b34:	6018      	str	r0, [r3, #0]
  	alarmFunc = alarmFunc0;  //  Allow alarmFunc to be modified at every call to platform_start_timer().
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <platform_start_timer+0x28>)
 8002b38:	6019      	str	r1, [r3, #0]
	if (timerStarted) { return; }
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <platform_start_timer+0x2c>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	b103      	cbz	r3, 8002b42 <platform_start_timer+0x12>
}
 8002b40:	bd08      	pop	{r3, pc}
	timerStarted = true;
 8002b42:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <platform_start_timer+0x2c>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
	debug_println("platform_start_timer"); ////
 8002b48:	4805      	ldr	r0, [pc, #20]	; (8002b60 <platform_start_timer+0x30>)
 8002b4a:	f7ff fe8b 	bl	8002864 <debug_println>
	rtc_setup();
 8002b4e:	f7ff ffa7 	bl	8002aa0 <_ZL9rtc_setupv>
 8002b52:	e7f5      	b.n	8002b40 <platform_start_timer+0x10>
 8002b54:	2000044c 	.word	0x2000044c
 8002b58:	20000450 	.word	0x20000450
 8002b5c:	20000459 	.word	0x20000459
 8002b60:	080047ac 	.word	0x080047ac

08002b64 <platform_set_alarm>:
void platform_set_alarm(uint32_t millisec) {
 8002b64:	b510      	push	{r4, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	4604      	mov	r4, r0
	if (!alarmFunc) { debug_print("alm? "); } ////
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <platform_set_alarm+0x2c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	b153      	cbz	r3, 8002b86 <platform_set_alarm+0x22>
	volatile uint32_t now = rtc_get_counter_val();
 8002b70:	f7fe f9a6 	bl	8000ec0 <rtc_get_counter_val>
 8002b74:	9001      	str	r0, [sp, #4]
	pwr_disable_backup_domain_write_protect();
 8002b76:	f7fe fa2f 	bl	8000fd8 <pwr_disable_backup_domain_write_protect>
	rtc_set_alarm_time(now + millisec);
 8002b7a:	9801      	ldr	r0, [sp, #4]
 8002b7c:	4420      	add	r0, r4
 8002b7e:	f7fe f97f 	bl	8000e80 <rtc_set_alarm_time>
}
 8002b82:	b002      	add	sp, #8
 8002b84:	bd10      	pop	{r4, pc}
	if (!alarmFunc) { debug_print("alm? "); } ////
 8002b86:	4803      	ldr	r0, [pc, #12]	; (8002b94 <platform_set_alarm+0x30>)
 8002b88:	f7ff fe98 	bl	80028bc <debug_print>
 8002b8c:	e7f0      	b.n	8002b70 <platform_set_alarm+0xc>
 8002b8e:	bf00      	nop
 8002b90:	20000450 	.word	0x20000450
 8002b94:	080047a4 	.word	0x080047a4

08002b98 <platform_alarm_count>:
	return alarmCount;  //  For testing whether alarm ISR was called.
 8002b98:	4b01      	ldr	r3, [pc, #4]	; (8002ba0 <platform_alarm_count+0x8>)
 8002b9a:	6818      	ldr	r0, [r3, #0]
}
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000448 	.word	0x20000448

08002ba4 <__cxa_pure_virtual>:
}

//  These functions must be located here or the compiler will pull in the standard C library versions.
//  From https://github.com/lancaster-university/codal-arduino-uno/blob/master/source/codal_target_hal.cpp

extern "C" void __cxa_pure_virtual() {
 8002ba4:	b508      	push	{r3, lr}
	//  Disable exceptions for abstract classes. See https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/abstract_classes.html
    target_panic(1000);
 8002ba6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002baa:	f7fd fe9b 	bl	80008e4 <target_panic>
}
 8002bae:	bd08      	pop	{r3, pc}

08002bb0 <_Znwj>:

// define new and delete.
extern "C" void *operator new(size_t objsize) {
 8002bb0:	b508      	push	{r3, lr}
    return malloc(objsize);
 8002bb2:	f004 fdb9 	bl	8007728 <device_malloc>
}
 8002bb6:	bd08      	pop	{r3, pc}

08002bb8 <_ZdlPv>:

extern "C" void operator delete(void* obj) {
 8002bb8:	b508      	push	{r3, lr}
    free(obj);
 8002bba:	f004 fddf 	bl	800777c <device_free>
}
 8002bbe:	bd08      	pop	{r3, pc}

08002bc0 <millis>:
volatile uint32_t millis(void) {
 8002bc0:	b508      	push	{r3, lr}
	return rtc_get_counter_val();  //  More accurate, uses hardware counters.
 8002bc2:	f7fe f97d 	bl	8000ec0 <rtc_get_counter_val>
}
 8002bc6:	bd08      	pop	{r3, pc}

08002bc8 <get_serial_number>:
    void test_baseloader_end(void) {
        dest = NULL; src = NULL; half_word_count = 0; debug_dump2(); ////
    }
#endif  //  NOTUSED

static void get_serial_number(void) {
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	b088      	sub	sp, #32
    char serial[USB_SERIAL_NUM_LENGTH+1];
    serial[0] = '\0';
 8002bcc:	ac08      	add	r4, sp, #32
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f804 3d1c 	strb.w	r3, [r4, #-28]!
    debug_println("boot_target_get_serial_number");  // debug_flush();
 8002bd4:	4807      	ldr	r0, [pc, #28]	; (8002bf4 <get_serial_number+0x2c>)
 8002bd6:	f7ff fe45 	bl	8002864 <debug_println>
    boot_target_get_serial_number(serial, USB_SERIAL_NUM_LENGTH);
 8002bda:	2118      	movs	r1, #24
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f001 fcce 	bl	800457e <boot_target_get_serial_number>

    debug_println("usb_set_serial_number");  // debug_flush();
 8002be2:	4805      	ldr	r0, [pc, #20]	; (8002bf8 <get_serial_number+0x30>)
 8002be4:	f7ff fe3e 	bl	8002864 <debug_println>
    usb_set_serial_number(serial);
 8002be8:	4620      	mov	r0, r4
 8002bea:	f000 fbc5 	bl	8003378 <usb_set_serial_number>
}
 8002bee:	b008      	add	sp, #32
 8002bf0:	bd10      	pop	{r4, pc}
 8002bf2:	bf00      	nop
 8002bf4:	08004864 	.word	0x08004864
 8002bf8:	08004884 	.word	0x08004884

08002bfc <poll_restart_callback>:
int poll_restart_callback(void) {
 8002bfc:	b508      	push	{r3, lr}
    debug_println("restart callback");  debug_flush(); 
 8002bfe:	4805      	ldr	r0, [pc, #20]	; (8002c14 <poll_restart_callback+0x18>)
 8002c00:	f7ff fe30 	bl	8002864 <debug_println>
 8002c04:	f7ff fe55 	bl	80028b2 <debug_flush>
    poll_restart_requested = true;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <poll_restart_callback+0x1c>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	701a      	strb	r2, [r3, #0]
}
 8002c0e:	2000      	movs	r0, #0
 8002c10:	bd08      	pop	{r3, pc}
 8002c12:	bf00      	nop
 8002c14:	080048c4 	.word	0x080048c4
 8002c18:	2000072c 	.word	0x2000072c

08002c1c <poll_loop>:
static void poll_loop(void) {
 8002c1c:	b510      	push	{r4, lr}
    debug_println("usbd polling...");  debug_flush();  debug_flush();  // test_hf2(); test_backup();          //  Test backup.
 8002c1e:	4828      	ldr	r0, [pc, #160]	; (8002cc0 <poll_loop+0xa4>)
 8002c20:	f7ff fe20 	bl	8002864 <debug_println>
 8002c24:	f7ff fe45 	bl	80028b2 <debug_flush>
 8002c28:	f7ff fe43 	bl	80028b2 <debug_flush>
    boot_target_set_restart_callback(poll_restart_callback);
 8002c2c:	4825      	ldr	r0, [pc, #148]	; (8002cc4 <poll_loop+0xa8>)
 8002c2e:	f000 fa41 	bl	80030b4 <boot_target_set_restart_callback>
        usbd_poll(usbd_dev);
 8002c32:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <poll_loop+0xac>)
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	f7fe fd87 	bl	8001748 <usbd_poll>
        cycleCount++;
 8002c3a:	4a24      	ldr	r2, [pc, #144]	; (8002ccc <poll_loop+0xb0>)
 8002c3c:	6813      	ldr	r3, [r2, #0]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	6013      	str	r3, [r2, #0]
        if (cycleCount >= 700) {
 8002c42:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8002c46:	d3f4      	bcc.n	8002c32 <poll_loop+0x16>
            cycleCount = 0;
 8002c48:	4613      	mov	r3, r2
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
            boot_target_set_led((msTimer++ % 500) < 50);
 8002c4e:	4a20      	ldr	r2, [pc, #128]	; (8002cd0 <poll_loop+0xb4>)
 8002c50:	6813      	ldr	r3, [r2, #0]
 8002c52:	1c59      	adds	r1, r3, #1
 8002c54:	6011      	str	r1, [r2, #0]
 8002c56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002c5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8002c5e:	fb02 3010 	mls	r0, r2, r0, r3
 8002c62:	2831      	cmp	r0, #49	; 0x31
 8002c64:	bf8c      	ite	hi
 8002c66:	2000      	movhi	r0, #0
 8002c68:	2001      	movls	r0, #1
 8002c6a:	f000 f9c3 	bl	8002ff4 <boot_target_set_led>
            if (flushCount++ % 1000 == 0 && get_usb_status() == 0) {  //  If USB is not busy...
 8002c6e:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <poll_loop+0xb8>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	1c51      	adds	r1, r2, #1
 8002c74:	6019      	str	r1, [r3, #0]
 8002c76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002c7a:	fbb2 f3f1 	udiv	r3, r2, r1
 8002c7e:	fb01 2313 	mls	r3, r1, r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1d5      	bne.n	8002c32 <poll_loop+0x16>
 8002c86:	f000 fb0b 	bl	80032a0 <get_usb_status>
 8002c8a:	4604      	mov	r4, r0
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	d1d0      	bne.n	8002c32 <poll_loop+0x16>
                debug_flush(); 
 8002c90:	f7ff fe0f 	bl	80028b2 <debug_flush>
                if (poll_restart_requested) {  //  Flush the log and restart.
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <poll_loop+0xbc>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ca      	beq.n	8002c32 <poll_loop+0x16>
                    debug_println("restarting...");
 8002c9c:	480f      	ldr	r0, [pc, #60]	; (8002cdc <poll_loop+0xc0>)
 8002c9e:	f7ff fde1 	bl	8002864 <debug_println>
                    debug_force_flush();
 8002ca2:	f7ff fd71 	bl	8002788 <debug_force_flush>
                    for (int i = 0; i < us*10; i++) { __asm__("nop"); }
 8002ca6:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <poll_loop+0xc4>)
 8002ca8:	429c      	cmp	r4, r3
 8002caa:	dd06      	ble.n	8002cba <poll_loop+0x9e>
                    debug_println("done");
 8002cac:	480d      	ldr	r0, [pc, #52]	; (8002ce4 <poll_loop+0xc8>)
 8002cae:	f7ff fdd9 	bl	8002864 <debug_println>
                    debug_force_flush();
 8002cb2:	f7ff fd69 	bl	8002788 <debug_force_flush>
                    scb_reset_system();
 8002cb6:	f7fe fa87 	bl	80011c8 <scb_reset_system>
                    for (int i = 0; i < us*10; i++) { __asm__("nop"); }
 8002cba:	bf00      	nop
 8002cbc:	3401      	adds	r4, #1
 8002cbe:	e7f2      	b.n	8002ca6 <poll_loop+0x8a>
 8002cc0:	0800489c 	.word	0x0800489c
 8002cc4:	08002bfd 	.word	0x08002bfd
 8002cc8:	20000480 	.word	0x20000480
 8002ccc:	20000468 	.word	0x20000468
 8002cd0:	20000474 	.word	0x20000474
 8002cd4:	20000018 	.word	0x20000018
 8002cd8:	2000072c 	.word	0x2000072c
 8002cdc:	080048ac 	.word	0x080048ac
 8002ce0:	0098967f 	.word	0x0098967f
 8002ce4:	080048bc 	.word	0x080048bc

08002ce8 <bootloader_poll>:
int bootloader_poll(void) {
 8002ce8:	b508      	push	{r3, lr}
    last_poll = millis();
 8002cea:	f7ff ff69 	bl	8002bc0 <millis>
    if (!usbd_dev) { return -1; }
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <bootloader_poll+0x28>)
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	b150      	cbz	r0, 8002d0a <bootloader_poll+0x22>
	usbd_poll(usbd_dev);
 8002cf4:	f7fe fd28 	bl	8001748 <usbd_poll>
    status = get_usb_status();  //  if (status != last_status) { debug_print("@"); debug_print_unsigned(status); debug_print(" "); } ////
 8002cf8:	f000 fad2 	bl	80032a0 <get_usb_status>
 8002cfc:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <bootloader_poll+0x2c>)
 8002cfe:	6018      	str	r0, [r3, #0]
    last_status = status;
 8002d00:	6819      	ldr	r1, [r3, #0]
 8002d02:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <bootloader_poll+0x30>)
 8002d04:	6011      	str	r1, [r2, #0]
    return status;  // if (delay > 0) { debug_print("p"); debug_print_unsigned(delay); debug_print(" / "); }
 8002d06:	6818      	ldr	r0, [r3, #0]
}
 8002d08:	bd08      	pop	{r3, pc}
    if (!usbd_dev) { return -1; }
 8002d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d0e:	e7fb      	b.n	8002d08 <bootloader_poll+0x20>
 8002d10:	20000480 	.word	0x20000480
 8002d14:	2000047c 	.word	0x2000047c
 8002d18:	20000470 	.word	0x20000470

08002d1c <bootloader_start>:
    if (usbd_dev) { return 1; }  // Already started, quit.
 8002d1c:	4b56      	ldr	r3, [pc, #344]	; (8002e78 <bootloader_start+0x15c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b10b      	cbz	r3, 8002d26 <bootloader_start+0xa>
 8002d22:	2001      	movs	r0, #1
}
 8002d24:	4770      	bx	lr
int bootloader_start(void) {
 8002d26:	b510      	push	{r4, lr}
    debug_println("----bootloader");  // debug_flush();    
 8002d28:	4854      	ldr	r0, [pc, #336]	; (8002e7c <bootloader_start+0x160>)
 8002d2a:	f7ff fd9b 	bl	8002864 <debug_println>
    boot_target_gpio_setup();  //  Initialize GPIO/LEDs if needed
 8002d2e:	f000 f971 	bl	8003014 <boot_target_gpio_setup>
    get_serial_number();  //  Get the unique Blue Pill serial number.
 8002d32:	f7ff ff49 	bl	8002bc8 <get_serial_number>
    if (boot_target_get_startup_mode() == BOOTLOADER_MODE) { 
 8002d36:	f000 f901 	bl	8002f3c <boot_target_get_startup_mode>
 8002d3a:	2802      	cmp	r0, #2
 8002d3c:	d00f      	beq.n	8002d5e <bootloader_start+0x42>
    debug_println("usb_setup");  // debug_flush();
 8002d3e:	4850      	ldr	r0, [pc, #320]	; (8002e80 <bootloader_start+0x164>)
 8002d40:	f7ff fd90 	bl	8002864 <debug_println>
    usbd_dev = usb_setup();
 8002d44:	f000 fa48 	bl	80031d8 <usb_setup>
 8002d48:	4b4b      	ldr	r3, [pc, #300]	; (8002e78 <bootloader_start+0x15c>)
 8002d4a:	6018      	str	r0, [r3, #0]
    if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 8002d4c:	f000 f8f6 	bl	8002f3c <boot_target_get_startup_mode>
 8002d50:	2801      	cmp	r0, #1
 8002d52:	d108      	bne.n	8002d66 <bootloader_start+0x4a>
        target_set_bootloader_callback(bootloader_poll);
 8002d54:	484b      	ldr	r0, [pc, #300]	; (8002e84 <bootloader_start+0x168>)
 8002d56:	f7fd fe1f 	bl	8000998 <target_set_bootloader_callback>
        return 0; 
 8002d5a:	2000      	movs	r0, #0
}
 8002d5c:	bd10      	pop	{r4, pc}
        __set_MSP((uint32_t) &_boot_stack);
 8002d5e:	4b4a      	ldr	r3, [pc, #296]	; (8002e88 <bootloader_start+0x16c>)
    asm("msr msp, %0" : : "r" (topOfMainStack));
 8002d60:	f383 8808 	msr	MSP, r3
 8002d64:	e7eb      	b.n	8002d3e <bootloader_start+0x22>
	baseloader_addr = NULL;
 8002d66:	4849      	ldr	r0, [pc, #292]	; (8002e8c <bootloader_start+0x170>)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	6003      	str	r3, [r0, #0]
	baseloader_status = baseloader_fetch(&baseloader_addr, &dest, &src, &byte_count);  //  Fetch the baseloader address, which will be at a temporary location.
 8002d6c:	4b48      	ldr	r3, [pc, #288]	; (8002e90 <bootloader_start+0x174>)
 8002d6e:	4a49      	ldr	r2, [pc, #292]	; (8002e94 <bootloader_start+0x178>)
 8002d70:	4949      	ldr	r1, [pc, #292]	; (8002e98 <bootloader_start+0x17c>)
 8002d72:	f7fd fbb7 	bl	80004e4 <baseloader_fetch>
 8002d76:	4c49      	ldr	r4, [pc, #292]	; (8002e9c <bootloader_start+0x180>)
 8002d78:	6020      	str	r0, [r4, #0]
	debug_print("----baseloader "); if (baseloader_status == 0) { 
 8002d7a:	4849      	ldr	r0, [pc, #292]	; (8002ea0 <bootloader_start+0x184>)
 8002d7c:	f7ff fd9e 	bl	80028bc <debug_print>
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d145      	bne.n	8002e12 <bootloader_start+0xf6>
        debug_print(" found "); debug_printhex_unsigned((uint32_t) baseloader_addr); 
 8002d86:	4847      	ldr	r0, [pc, #284]	; (8002ea4 <bootloader_start+0x188>)
 8002d88:	f7ff fd98 	bl	80028bc <debug_print>
 8002d8c:	4c3f      	ldr	r4, [pc, #252]	; (8002e8c <bootloader_start+0x170>)
 8002d8e:	6820      	ldr	r0, [r4, #0]
 8002d90:	f7ff fde0 	bl	8002954 <debug_printhex_unsigned>
		debug_print(", dest "); debug_printhex_unsigned((uint32_t) dest);
 8002d94:	4844      	ldr	r0, [pc, #272]	; (8002ea8 <bootloader_start+0x18c>)
 8002d96:	f7ff fd91 	bl	80028bc <debug_print>
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <bootloader_start+0x17c>)
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	f7ff fdd9 	bl	8002954 <debug_printhex_unsigned>
		debug_print(", src "); debug_printhex_unsigned((uint32_t) src);
 8002da2:	4842      	ldr	r0, [pc, #264]	; (8002eac <bootloader_start+0x190>)
 8002da4:	f7ff fd8a 	bl	80028bc <debug_print>
 8002da8:	4b3a      	ldr	r3, [pc, #232]	; (8002e94 <bootloader_start+0x178>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	f7ff fdd2 	bl	8002954 <debug_printhex_unsigned>
		debug_print(", len "); debug_printhex_unsigned(byte_count); debug_force_flush();  
 8002db0:	483f      	ldr	r0, [pc, #252]	; (8002eb0 <bootloader_start+0x194>)
 8002db2:	f7ff fd83 	bl	80028bc <debug_print>
 8002db6:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <bootloader_start+0x174>)
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	f7ff fdcb 	bl	8002954 <debug_printhex_unsigned>
 8002dbe:	f7ff fce3 	bl	8002788 <debug_force_flush>
		debug_print(", *func "); debug_printhex_unsigned(*(uint32_t *) baseloader_addr); debug_force_flush();  
 8002dc2:	483c      	ldr	r0, [pc, #240]	; (8002eb4 <bootloader_start+0x198>)
 8002dc4:	f7ff fd7a 	bl	80028bc <debug_print>
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	f7ff fdc2 	bl	8002954 <debug_printhex_unsigned>
 8002dd0:	f7ff fcda 	bl	8002788 <debug_force_flush>
    }; debug_println(""); debug_force_flush();
 8002dd4:	4838      	ldr	r0, [pc, #224]	; (8002eb8 <bootloader_start+0x19c>)
 8002dd6:	f7ff fd45 	bl	8002864 <debug_println>
 8002dda:	f7ff fcd5 	bl	8002788 <debug_force_flush>
	if (baseloader_status == 0 && baseloader_addr) {
 8002dde:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <bootloader_start+0x180>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b9a3      	cbnz	r3, 8002e0e <bootloader_start+0xf2>
 8002de4:	4b29      	ldr	r3, [pc, #164]	; (8002e8c <bootloader_start+0x170>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	b18b      	cbz	r3, 8002e0e <bootloader_start+0xf2>
		baseloader_status = baseloader_addr(dest, src, byte_count);  //  Call the baseloader.
 8002dea:	4a29      	ldr	r2, [pc, #164]	; (8002e90 <bootloader_start+0x174>)
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	4929      	ldr	r1, [pc, #164]	; (8002e94 <bootloader_start+0x178>)
 8002df0:	6809      	ldr	r1, [r1, #0]
 8002df2:	4829      	ldr	r0, [pc, #164]	; (8002e98 <bootloader_start+0x17c>)
 8002df4:	6800      	ldr	r0, [r0, #0]
 8002df6:	4798      	blx	r3
 8002df8:	4c28      	ldr	r4, [pc, #160]	; (8002e9c <bootloader_start+0x180>)
 8002dfa:	6020      	str	r0, [r4, #0]
		debug_print("baseloader failed "); debug_print_int(baseloader_status); debug_println("");  //  If it returned, it must have failed.
 8002dfc:	482f      	ldr	r0, [pc, #188]	; (8002ebc <bootloader_start+0x1a0>)
 8002dfe:	f7ff fd5d 	bl	80028bc <debug_print>
 8002e02:	6820      	ldr	r0, [r4, #0]
 8002e04:	f7ff fd66 	bl	80028d4 <debug_print_int>
 8002e08:	482b      	ldr	r0, [pc, #172]	; (8002eb8 <bootloader_start+0x19c>)
 8002e0a:	f7ff fd2b 	bl	8002864 <debug_println>
    poll_loop();
 8002e0e:	f7ff ff05 	bl	8002c1c <poll_loop>
        debug_print("not found "); debug_print_int(baseloader_status); debug_print(" ");
 8002e12:	482b      	ldr	r0, [pc, #172]	; (8002ec0 <bootloader_start+0x1a4>)
 8002e14:	f7ff fd52 	bl	80028bc <debug_print>
 8002e18:	4c20      	ldr	r4, [pc, #128]	; (8002e9c <bootloader_start+0x180>)
 8002e1a:	6820      	ldr	r0, [r4, #0]
 8002e1c:	f7ff fd5a 	bl	80028d4 <debug_print_int>
 8002e20:	4828      	ldr	r0, [pc, #160]	; (8002ec4 <bootloader_start+0x1a8>)
 8002e22:	f7ff fd4b 	bl	80028bc <debug_print>
            (baseloader_status == -3) ? "too big " :
 8002e26:	6823      	ldr	r3, [r4, #0]
        debug_print(
 8002e28:	f113 0f03 	cmn.w	r3, #3
 8002e2c:	d020      	beq.n	8002e70 <bootloader_start+0x154>
            (baseloader_status == -3) ? "too big " :
 8002e2e:	f113 0f04 	cmn.w	r3, #4
 8002e32:	d11f      	bne.n	8002e74 <bootloader_start+0x158>
 8002e34:	4824      	ldr	r0, [pc, #144]	; (8002ec8 <bootloader_start+0x1ac>)
        debug_print(
 8002e36:	f7ff fd41 	bl	80028bc <debug_print>
        debug_printhex_unsigned(baseloader_fail);
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <bootloader_start+0x1b0>)
 8002e3c:	6818      	ldr	r0, [r3, #0]
 8002e3e:	f7ff fd89 	bl	8002954 <debug_printhex_unsigned>
        if (baseloader_status == -4) { 
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <bootloader_start+0x180>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f113 0f04 	cmn.w	r3, #4
 8002e4a:	d1c3      	bne.n	8002dd4 <bootloader_start+0xb8>
            debug_print(", oldapp "); debug_printhex_unsigned((uint32_t) FLASH_ADDRESS(application_start)); 
 8002e4c:	4820      	ldr	r0, [pc, #128]	; (8002ed0 <bootloader_start+0x1b4>)
 8002e4e:	f7ff fd35 	bl	80028bc <debug_print>
 8002e52:	4820      	ldr	r0, [pc, #128]	; (8002ed4 <bootloader_start+0x1b8>)
 8002e54:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 8002e58:	f020 0003 	bic.w	r0, r0, #3
 8002e5c:	f7ff fd7a 	bl	8002954 <debug_printhex_unsigned>
            debug_print(", bootlen "); debug_printhex_unsigned(byte_count); 
 8002e60:	481d      	ldr	r0, [pc, #116]	; (8002ed8 <bootloader_start+0x1bc>)
 8002e62:	f7ff fd2b 	bl	80028bc <debug_print>
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <bootloader_start+0x174>)
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	f7ff fd73 	bl	8002954 <debug_printhex_unsigned>
 8002e6e:	e7b1      	b.n	8002dd4 <bootloader_start+0xb8>
        debug_print(
 8002e70:	481a      	ldr	r0, [pc, #104]	; (8002edc <bootloader_start+0x1c0>)
 8002e72:	e7e0      	b.n	8002e36 <bootloader_start+0x11a>
            (baseloader_status == -3) ? "too big " :
 8002e74:	4810      	ldr	r0, [pc, #64]	; (8002eb8 <bootloader_start+0x19c>)
 8002e76:	e7de      	b.n	8002e36 <bootloader_start+0x11a>
 8002e78:	20000480 	.word	0x20000480
 8002e7c:	080047d4 	.word	0x080047d4
 8002e80:	080047e4 	.word	0x080047e4
 8002e84:	08002ce9 	.word	0x08002ce9
 8002e88:	200047bc 	.word	0x200047bc
 8002e8c:	2000045c 	.word	0x2000045c
 8002e90:	20000464 	.word	0x20000464
 8002e94:	20000478 	.word	0x20000478
 8002e98:	2000046c 	.word	0x2000046c
 8002e9c:	20000460 	.word	0x20000460
 8002ea0:	080047f0 	.word	0x080047f0
 8002ea4:	08004800 	.word	0x08004800
 8002ea8:	08004808 	.word	0x08004808
 8002eac:	08004810 	.word	0x08004810
 8002eb0:	08004818 	.word	0x08004818
 8002eb4:	08004820 	.word	0x08004820
 8002eb8:	080046c4 	.word	0x080046c4
 8002ebc:	08004850 	.word	0x08004850
 8002ec0:	0800482c 	.word	0x0800482c
 8002ec4:	08004b14 	.word	0x08004b14
 8002ec8:	080047d0 	.word	0x080047d0
 8002ecc:	2000012c 	.word	0x2000012c
 8002ed0:	08004838 	.word	0x08004838
 8002ed4:	08006c01 	.word	0x08006c01
 8002ed8:	08004844 	.word	0x08004844
 8002edc:	080047c4 	.word	0x080047c4

08002ee0 <validate_application>:
static const uint32_t CMD_BOOT = 0x544F4F42UL;  //  Forced startup into Bootloader Mode.
static const uint32_t CMD_APP  = 0x3f82722aUL;  //  Forced startup into Application Mode.
static enum StartupMode startup_mode        = UNKNOWN_MODE;  //  Current startup mode.
static enum StartupMode forced_startup_mode = UNKNOWN_MODE;  //  Forced startup mode, if we were forced into this mode before restarting. If we were not forced, set to UNKNOWN_MODE.

static bool validate_application(void) {
 8002ee0:	b510      	push	{r4, lr}
    //  Return true if there is a valid application in firmware.  The second or fourth byte should be 0xb5, the "push" instruction.
    uint32_t first_word = *(volatile uint32_t *)APP_BASE_ADDRESS;
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <validate_application+0x48>)
 8002ee4:	681c      	ldr	r4, [r3, #0]
    if ((first_word & 0xff00) == 0xb500 || (first_word & 0xff000000) == 0xb5000000) {
 8002ee6:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 8002eea:	f5b3 4f35 	cmp.w	r3, #46336	; 0xb500
 8002eee:	d015      	beq.n	8002f1c <validate_application+0x3c>
 8002ef0:	f004 437f 	and.w	r3, r4, #4278190080	; 0xff000000
 8002ef4:	f1b3 4f35 	cmp.w	r3, #3036676096	; 0xb5000000
 8002ef8:	d010      	beq.n	8002f1c <validate_application+0x3c>
        debug_println("app exists");
        return true;
    }
    debug_print("app missing "); debug_printhex_unsigned((size_t) APP_BASE_ADDRESS);
 8002efa:	480c      	ldr	r0, [pc, #48]	; (8002f2c <validate_application+0x4c>)
 8002efc:	f7ff fcde 	bl	80028bc <debug_print>
 8002f00:	4809      	ldr	r0, [pc, #36]	; (8002f28 <validate_application+0x48>)
 8002f02:	f7ff fd27 	bl	8002954 <debug_printhex_unsigned>
    debug_print(" = "); debug_printhex_unsigned(first_word); debug_println("");
 8002f06:	480a      	ldr	r0, [pc, #40]	; (8002f30 <validate_application+0x50>)
 8002f08:	f7ff fcd8 	bl	80028bc <debug_print>
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	f7ff fd21 	bl	8002954 <debug_printhex_unsigned>
 8002f12:	4808      	ldr	r0, [pc, #32]	; (8002f34 <validate_application+0x54>)
 8002f14:	f7ff fca6 	bl	8002864 <debug_println>
    return false;
 8002f18:	2000      	movs	r0, #0
 8002f1a:	e003      	b.n	8002f24 <validate_application+0x44>
        debug_println("app exists");
 8002f1c:	4806      	ldr	r0, [pc, #24]	; (8002f38 <validate_application+0x58>)
 8002f1e:	f7ff fca1 	bl	8002864 <debug_println>
        return true;
 8002f22:	2001      	movs	r0, #1
}
 8002f24:	bd10      	pop	{r4, pc}
 8002f26:	bf00      	nop
 8002f28:	08006c00 	.word	0x08006c00
 8002f2c:	0800497c 	.word	0x0800497c
 8002f30:	0800498c 	.word	0x0800498c
 8002f34:	080046c4 	.word	0x080046c4
 8002f38:	08004970 	.word	0x08004970

08002f3c <boot_target_get_startup_mode>:

enum StartupMode boot_target_get_startup_mode(void) {
 8002f3c:	b538      	push	{r3, r4, r5, lr}
    //  Get the startup mode: Bootloader or Application.
    //  return BOOTLOADER_MODE; ////
    
    if (startup_mode != UNKNOWN_MODE) { return startup_mode; }
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <boot_target_get_startup_mode+0x94>)
 8002f40:	7818      	ldrb	r0, [r3, #0]
 8002f42:	b100      	cbz	r0, 8002f46 <boot_target_get_startup_mode+0xa>
        //  Else go to Application Mode.
        debug_print("----application mode"); debug_println((forced_startup_mode == APPLICATION_MODE) ? " (forced)" : "");
        startup_mode = APPLICATION_MODE;
    }
    return startup_mode;
}
 8002f44:	bd38      	pop	{r3, r4, r5, pc}
    bool appValid = validate_application();
 8002f46:	f7ff ffcb 	bl	8002ee0 <validate_application>
 8002f4a:	4605      	mov	r5, r0
    uint32_t cmd = backup_read(BKP0);  //  Returns 0, CMD_BOOT, CMD_APP.
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f001 f9e5 	bl	800431c <backup_read>
 8002f52:	4604      	mov	r4, r0
    backup_write(BKP0, 0);  //  Clear the backup register so it will boot back into Application Mode next time.
 8002f54:	2100      	movs	r1, #0
 8002f56:	4608      	mov	r0, r1
 8002f58:	f001 f9c6 	bl	80042e8 <backup_write>
    switch(cmd) {
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <boot_target_get_startup_mode+0x98>)
 8002f5e:	429c      	cmp	r4, r3
 8002f60:	d017      	beq.n	8002f92 <boot_target_get_startup_mode+0x56>
 8002f62:	f103 53a6 	add.w	r3, r3, #348127232	; 0x14c00000
 8002f66:	f503 234d 	add.w	r3, r3, #839680	; 0xcd000
 8002f6a:	f603 5318 	addw	r3, r3, #3352	; 0xd18
 8002f6e:	429c      	cmp	r4, r3
 8002f70:	d113      	bne.n	8002f9a <boot_target_get_startup_mode+0x5e>
        case (int) CMD_BOOT: forced_startup_mode = BOOTLOADER_MODE; break;
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <boot_target_get_startup_mode+0x9c>)
 8002f74:	2202      	movs	r2, #2
 8002f76:	701a      	strb	r2, [r3, #0]
    if (cmd == CMD_BOOT) {
 8002f78:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <boot_target_get_startup_mode+0xa0>)
 8002f7a:	429c      	cmp	r4, r3
 8002f7c:	d011      	beq.n	8002fa2 <boot_target_get_startup_mode+0x66>
    } else if (!appValid) {
 8002f7e:	b9bd      	cbnz	r5, 8002fb0 <boot_target_get_startup_mode+0x74>
        debug_println("----bootloader mode (no app)");
 8002f80:	4817      	ldr	r0, [pc, #92]	; (8002fe0 <boot_target_get_startup_mode+0xa4>)
 8002f82:	f7ff fc6f 	bl	8002864 <debug_println>
        startup_mode = BOOTLOADER_MODE;
 8002f86:	4b12      	ldr	r3, [pc, #72]	; (8002fd0 <boot_target_get_startup_mode+0x94>)
 8002f88:	2202      	movs	r2, #2
 8002f8a:	701a      	strb	r2, [r3, #0]
    return startup_mode;
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <boot_target_get_startup_mode+0x94>)
 8002f8e:	7818      	ldrb	r0, [r3, #0]
 8002f90:	e7d8      	b.n	8002f44 <boot_target_get_startup_mode+0x8>
        case (int) CMD_APP:  forced_startup_mode = APPLICATION_MODE; break;
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <boot_target_get_startup_mode+0x9c>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e7ee      	b.n	8002f78 <boot_target_get_startup_mode+0x3c>
        default:             forced_startup_mode = UNKNOWN_MODE; break;
 8002f9a:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <boot_target_get_startup_mode+0x9c>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	e7ea      	b.n	8002f78 <boot_target_get_startup_mode+0x3c>
        debug_println("----bootloader mode (forced)");
 8002fa2:	4810      	ldr	r0, [pc, #64]	; (8002fe4 <boot_target_get_startup_mode+0xa8>)
 8002fa4:	f7ff fc5e 	bl	8002864 <debug_println>
        startup_mode = BOOTLOADER_MODE;
 8002fa8:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <boot_target_get_startup_mode+0x94>)
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
 8002fae:	e7ed      	b.n	8002f8c <boot_target_get_startup_mode+0x50>
        debug_print("----application mode"); debug_println((forced_startup_mode == APPLICATION_MODE) ? " (forced)" : "");
 8002fb0:	480d      	ldr	r0, [pc, #52]	; (8002fe8 <boot_target_get_startup_mode+0xac>)
 8002fb2:	f7ff fc83 	bl	80028bc <debug_print>
 8002fb6:	4b08      	ldr	r3, [pc, #32]	; (8002fd8 <boot_target_get_startup_mode+0x9c>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d006      	beq.n	8002fcc <boot_target_get_startup_mode+0x90>
 8002fbe:	480b      	ldr	r0, [pc, #44]	; (8002fec <boot_target_get_startup_mode+0xb0>)
 8002fc0:	f7ff fc50 	bl	8002864 <debug_println>
        startup_mode = APPLICATION_MODE;
 8002fc4:	4b02      	ldr	r3, [pc, #8]	; (8002fd0 <boot_target_get_startup_mode+0x94>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]
 8002fca:	e7df      	b.n	8002f8c <boot_target_get_startup_mode+0x50>
        debug_print("----application mode"); debug_println((forced_startup_mode == APPLICATION_MODE) ? " (forced)" : "");
 8002fcc:	4808      	ldr	r0, [pc, #32]	; (8002ff0 <boot_target_get_startup_mode+0xb4>)
 8002fce:	e7f7      	b.n	8002fc0 <boot_target_get_startup_mode+0x84>
 8002fd0:	2000072e 	.word	0x2000072e
 8002fd4:	3f82722a 	.word	0x3f82722a
 8002fd8:	2000072d 	.word	0x2000072d
 8002fdc:	544f4f42 	.word	0x544f4f42
 8002fe0:	08004904 	.word	0x08004904
 8002fe4:	080048e4 	.word	0x080048e4
 8002fe8:	08004924 	.word	0x08004924
 8002fec:	080046c4 	.word	0x080046c4
 8002ff0:	080048d8 	.word	0x080048d8

08002ff4 <boot_target_set_led>:
    //  Return the forced startup mode, if we were forced into this mode before restarting.  If we were not forced, return UNKNOWN_MODE.
    boot_target_get_startup_mode();
    return forced_startup_mode;
}

void boot_target_set_led(int on) {
 8002ff4:	b508      	push	{r3, lr}
#if HAVE_LED
        if ((on && LED_OPEN_DRAIN) || (!on && !LED_OPEN_DRAIN)) {
 8002ff6:	b928      	cbnz	r0, 8003004 <boot_target_set_led+0x10>
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
        } else {
            gpio_set(LED_GPIO_PORT, LED_GPIO_PIN);
 8002ff8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ffc:	4804      	ldr	r0, [pc, #16]	; (8003010 <boot_target_set_led+0x1c>)
 8002ffe:	f7fe fb79 	bl	80016f4 <gpio_set>
        }
#else
    (void)on;
#endif
}
 8003002:	bd08      	pop	{r3, pc}
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
 8003004:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003008:	4801      	ldr	r0, [pc, #4]	; (8003010 <boot_target_set_led+0x1c>)
 800300a:	f7fe fb75 	bl	80016f8 <gpio_clear>
 800300e:	e7f8      	b.n	8003002 <boot_target_set_led+0xe>
 8003010:	40011000 	.word	0x40011000

08003014 <boot_target_gpio_setup>:
    for (int i = 0; i < us*10; i++) {
        __asm__("nop");
    }
}

void boot_target_gpio_setup(void) {
 8003014:	b510      	push	{r4, lr}
    /* Enable GPIO and USB clocks */
    rcc_periph_clock_enable(RCC_GPIOA);  //  USB on PA11, PA12.
 8003016:	f240 3002 	movw	r0, #770	; 0x302
 800301a:	f7fe fb74 	bl	8001706 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOB);
 800301e:	f240 3003 	movw	r0, #771	; 0x303
 8003022:	f7fe fb70 	bl	8001706 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_GPIOC);  //  LED on PC13.
 8003026:	f44f 7041 	mov.w	r0, #772	; 0x304
 800302a:	f7fe fb6c 	bl	8001706 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_USB);
 800302e:	f240 3097 	movw	r0, #919	; 0x397
 8003032:	f7fe fb68 	bl	8001706 <rcc_periph_clock_enable>
    {
        const uint8_t mode = GPIO_MODE_OUTPUT_10_MHZ;
        const uint8_t conf = (LED_OPEN_DRAIN ? GPIO_CNF_OUTPUT_OPENDRAIN
                                             : GPIO_CNF_OUTPUT_PUSHPULL);
        if (LED_OPEN_DRAIN) {
            gpio_set(LED_GPIO_PORT, LED_GPIO_PIN);
 8003036:	4c10      	ldr	r4, [pc, #64]	; (8003078 <boot_target_gpio_setup+0x64>)
 8003038:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800303c:	4620      	mov	r0, r4
 800303e:	f7fe fb59 	bl	80016f4 <gpio_set>
        } else {
            gpio_clear(LED_GPIO_PORT, LED_GPIO_PIN);
        }
        gpio_set_mode(LED_GPIO_PORT, mode, conf, LED_GPIO_PIN);
 8003042:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003046:	2201      	movs	r2, #1
 8003048:	4611      	mov	r1, r2
 800304a:	4620      	mov	r0, r4
 800304c:	f7fe fb1c 	bl	8001688 <gpio_set_mode>
        gpio_set_mode(USB_PULLUP_GPIO_PORT, mode, conf, USB_PULLUP_GPIO_PIN);
    }
#else
    {
        /* Drive the USB DP pin to override the pull-up */
        gpio_set_mode(GPIOA, GPIO_MODE_OUTPUT_10_MHZ,
 8003050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003054:	2200      	movs	r2, #0
 8003056:	2101      	movs	r1, #1
 8003058:	4808      	ldr	r0, [pc, #32]	; (800307c <boot_target_gpio_setup+0x68>)
 800305a:	f7fe fb15 	bl	8001688 <gpio_set_mode>
    }
#endif

    // TFT
    // RST
    gpio_clear(GPIOC, (1 << 4));
 800305e:	2110      	movs	r1, #16
 8003060:	4620      	mov	r0, r4
 8003062:	f7fe fb49 	bl	80016f8 <gpio_clear>
    sleep_us(20000);
 8003066:	f644 6020 	movw	r0, #20000	; 0x4e20
 800306a:	f001 fa7e 	bl	800456a <sleep_us>
    //gpio_set(GPIOC, (1 << 4));
    sleep_us(20000);
 800306e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003072:	f001 fa7a 	bl	800456a <sleep_us>
}
 8003076:	bd10      	pop	{r4, pc}
 8003078:	40011000 	.word	0x40011000
 800307c:	40010800 	.word	0x40010800

08003080 <boot_target_usb_init>:

const usbd_driver* boot_target_usb_init(void) {
 8003080:	b508      	push	{r3, lr}
    rcc_periph_reset_pulse(RST_USB);
 8003082:	f240 2017 	movw	r0, #535	; 0x217
 8003086:	f7fe fb4c 	bl	8001722 <rcc_periph_reset_pulse>
    } else {
        gpio_clear(USB_PULLUP_GPIO_PORT, USB_PULLUP_GPIO_PIN);
    }
#else
    /* Override hard-wired USB pullup to disconnect and reconnect */
    gpio_clear(GPIOA, GPIO12);
 800308a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800308e:	4806      	ldr	r0, [pc, #24]	; (80030a8 <boot_target_usb_init+0x28>)
 8003090:	f7fe fb32 	bl	80016f8 <gpio_clear>
    int i;
    for (i = 0; i < 800000; i++) {
 8003094:	2300      	movs	r3, #0
 8003096:	e001      	b.n	800309c <boot_target_usb_init+0x1c>
        __asm__("nop");
 8003098:	bf00      	nop
    for (i = 0; i < 800000; i++) {
 800309a:	3301      	adds	r3, #1
 800309c:	4a03      	ldr	r2, [pc, #12]	; (80030ac <boot_target_usb_init+0x2c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	ddfa      	ble.n	8003098 <boot_target_usb_init+0x18>
    }
#endif

    return &st_usbfs_v1_usb_driver;
}
 80030a2:	4803      	ldr	r0, [pc, #12]	; (80030b0 <boot_target_usb_init+0x30>)
 80030a4:	bd08      	pop	{r3, pc}
 80030a6:	bf00      	nop
 80030a8:	40010800 	.word	0x40010800
 80030ac:	000c34ff 	.word	0x000c34ff
 80030b0:	080046f4 	.word	0x080046f4

080030b4 <boot_target_set_restart_callback>:

static restart_callback_type *restart_callback_func = NULL;

void boot_target_set_restart_callback(restart_callback_type *func) {
 80030b4:	b510      	push	{r4, lr}
 80030b6:	4604      	mov	r4, r0
    //  Call this function when we need to restart.  Used in Application Mode only.
    debug_print("set restart callback "); debug_printhex_unsigned((size_t) func); debug_println("");
 80030b8:	4804      	ldr	r0, [pc, #16]	; (80030cc <boot_target_set_restart_callback+0x18>)
 80030ba:	f7ff fbff 	bl	80028bc <debug_print>
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff fc48 	bl	8002954 <debug_printhex_unsigned>
 80030c4:	4802      	ldr	r0, [pc, #8]	; (80030d0 <boot_target_set_restart_callback+0x1c>)
 80030c6:	f7ff fbcd 	bl	8002864 <debug_println>
    restart_callback_func = func;
}
 80030ca:	bd10      	pop	{r4, pc}
 80030cc:	08004958 	.word	0x08004958
 80030d0:	080046c4 	.word	0x080046c4

080030d4 <boot_target_manifest_app>:

void boot_target_manifest_app(void) {
 80030d4:	b508      	push	{r3, lr}
    //  Restart into Application Mode to run the application.
    debug_println("boot app");
 80030d6:	4805      	ldr	r0, [pc, #20]	; (80030ec <boot_target_manifest_app+0x18>)
 80030d8:	f7ff fbc4 	bl	8002864 <debug_println>
    debug_force_flush(); ////
 80030dc:	f7ff fb54 	bl	8002788 <debug_force_flush>
    backup_write(BKP0, CMD_APP);
 80030e0:	4903      	ldr	r1, [pc, #12]	; (80030f0 <boot_target_manifest_app+0x1c>)
 80030e2:	2000      	movs	r0, #0
 80030e4:	f001 f900 	bl	80042e8 <backup_write>
        if (restart_callback_func) { 
            restart_callback_func(); 
            return;
        }
    #endif  //  NOTUSED
    scb_reset_system();  //  Otherwise restart now.
 80030e8:	f7fe f86e 	bl	80011c8 <scb_reset_system>
 80030ec:	0800493c 	.word	0x0800493c
 80030f0:	3f82722a 	.word	0x3f82722a

080030f4 <boot_target_manifest_bootloader>:
}

void boot_target_manifest_bootloader(void) {
 80030f4:	b508      	push	{r3, lr}
    //  Restart into Bootloader Mode to run the bootloader.
    debug_println("boot bootloader"); 
 80030f6:	4805      	ldr	r0, [pc, #20]	; (800310c <boot_target_manifest_bootloader+0x18>)
 80030f8:	f7ff fbb4 	bl	8002864 <debug_println>
    debug_force_flush(); ////
 80030fc:	f7ff fb44 	bl	8002788 <debug_force_flush>
    backup_write(BKP0, CMD_BOOT);
 8003100:	4903      	ldr	r1, [pc, #12]	; (8003110 <boot_target_manifest_bootloader+0x1c>)
 8003102:	2000      	movs	r0, #0
 8003104:	f001 f8f0 	bl	80042e8 <backup_write>
    scb_reset_system();  //  Otherwise restart now.
 8003108:	f7fe f85e 	bl	80011c8 <scb_reset_system>
 800310c:	08004948 	.word	0x08004948
 8003110:	544f4f42 	.word	0x544f4f42

08003114 <hf2_connected>:
    return hf2_transmit(usbd_dev, buf, len);
}

static void hf2_connected(void) {
    //  Called when HF2 is connected.  We set the HF2 port as a logger output.
    if (hf2_is_connected) { return; }
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <hf2_connected+0x10>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	b913      	cbnz	r3, 8003120 <hf2_connected+0xc>
    hf2_is_connected = 1;
 800311a:	4b02      	ldr	r3, [pc, #8]	; (8003124 <hf2_connected+0x10>)
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
    ////logger_add_output(usb_hf2_transmit);
}
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000730 	.word	0x20000730

08003128 <cdc_connected>:
static void cdc_connected(void) {
 8003128:	b508      	push	{r3, lr}
    if (cdc_is_connected) { return; }
 800312a:	4b05      	ldr	r3, [pc, #20]	; (8003140 <cdc_connected+0x18>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	b103      	cbz	r3, 8003132 <cdc_connected+0xa>
}
 8003130:	bd08      	pop	{r3, pc}
    cdc_is_connected = 1;
 8003132:	4b03      	ldr	r3, [pc, #12]	; (8003140 <cdc_connected+0x18>)
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
    logger_add_output(usb_cdc_transmit);
 8003138:	4802      	ldr	r0, [pc, #8]	; (8003144 <cdc_connected+0x1c>)
 800313a:	f7ff fad9 	bl	80026f0 <logger_add_output>
 800313e:	e7f7      	b.n	8003130 <cdc_connected+0x8>
 8003140:	2000072f 	.word	0x2000072f
 8003144:	08003149 	.word	0x08003149

08003148 <usb_cdc_transmit>:
	uint16_t len) {
 8003148:	b508      	push	{r3, lr}
    if (!usbd_dev || !cdc_is_connected) { return -1; }
 800314a:	4b09      	ldr	r3, [pc, #36]	; (8003170 <usb_cdc_transmit+0x28>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b143      	cbz	r3, 8003162 <usb_cdc_transmit+0x1a>
 8003150:	4a08      	ldr	r2, [pc, #32]	; (8003174 <usb_cdc_transmit+0x2c>)
 8003152:	7812      	ldrb	r2, [r2, #0]
 8003154:	b142      	cbz	r2, 8003168 <usb_cdc_transmit+0x20>
 8003156:	460a      	mov	r2, r1
 8003158:	4601      	mov	r1, r0
    return cdcadm_transmit(usbd_dev, buf, len);
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fc5a 	bl	8003a14 <cdcadm_transmit>
}
 8003160:	bd08      	pop	{r3, pc}
    if (!usbd_dev || !cdc_is_connected) { return -1; }
 8003162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003166:	e7fb      	b.n	8003160 <usb_cdc_transmit+0x18>
 8003168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800316c:	e7f8      	b.n	8003160 <usb_cdc_transmit+0x18>
 800316e:	bf00      	nop
 8003170:	20000520 	.word	0x20000520
 8003174:	2000072f 	.word	0x2000072f

08003178 <sof_callback>:
static void sof_callback(void) {
 8003178:	b508      	push	{r3, lr}
    last_frame_time = millis();
 800317a:	f7ff fd21 	bl	8002bc0 <millis>
 800317e:	4b01      	ldr	r3, [pc, #4]	; (8003184 <sof_callback+0xc>)
 8003180:	6018      	str	r0, [r3, #0]
}
 8003182:	bd08      	pop	{r3, pc}
 8003184:	20000500 	.word	0x20000500

08003188 <set_aggregate_callback>:
	return USBD_REQ_NEXT_CALLBACK;
}

static void set_aggregate_callback(
  usbd_device *usbd_dev,
  uint16_t wValue) {
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	4605      	mov	r5, r0
    //  This callback is called when the device is updated.  We set our control callback.
    if (wValue != (uint16_t) -1) {  //  If this is an actual callback, not a call by usb_setup()...
 800318c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003190:	4299      	cmp	r1, r3
 8003192:	d00c      	beq.n	80031ae <set_aggregate_callback+0x26>
 8003194:	460e      	mov	r6, r1
        //  Call the config functions before setting our callback.
        //  debug_println("set_aggregate_callback"); ////
        int i;
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 8003196:	2400      	movs	r4, #0
 8003198:	2c09      	cmp	r4, #9
 800319a:	dc08      	bgt.n	80031ae <set_aggregate_callback+0x26>
            if (!config_callback[i]) { break; }
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <set_aggregate_callback+0x44>)
 800319e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80031a2:	b123      	cbz	r3, 80031ae <set_aggregate_callback+0x26>
            (config_callback[i])(usbd_dev, wValue);
 80031a4:	4631      	mov	r1, r6
 80031a6:	4628      	mov	r0, r5
 80031a8:	4798      	blx	r3
        for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80031aa:	3401      	adds	r4, #1
 80031ac:	e7f4      	b.n	8003198 <set_aggregate_callback+0x10>
        }
    }
    //  Set our callback.
	int status;
        status = usbd_register_control_callback(
 80031ae:	4b08      	ldr	r3, [pc, #32]	; (80031d0 <set_aggregate_callback+0x48>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	4611      	mov	r1, r2
 80031b4:	4628      	mov	r0, r5
 80031b6:	f7fe fbb9 	bl	800192c <usbd_register_control_callback>
		usbd_dev,
        0,  //  Register for all notifications.
        0,
		aggregate_callback);
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 80031ba:	2800      	cmp	r0, #0
 80031bc:	db00      	blt.n	80031c0 <set_aggregate_callback+0x38>
}
 80031be:	bd70      	pop	{r4, r5, r6, pc}
	if (status < 0) { debug_println("*** ERROR: set_aggregate_callback failed"); debug_flush(); }  
 80031c0:	4804      	ldr	r0, [pc, #16]	; (80031d4 <set_aggregate_callback+0x4c>)
 80031c2:	f7ff fb4f 	bl	8002864 <debug_println>
 80031c6:	f7ff fb74 	bl	80028b2 <debug_flush>
}
 80031ca:	e7f8      	b.n	80031be <set_aggregate_callback+0x36>
 80031cc:	20000484 	.word	0x20000484
 80031d0:	08003589 	.word	0x08003589
 80031d4:	08004b8c 	.word	0x08004b8c

080031d8 <usb_setup>:
usbd_device* usb_setup(void) {
 80031d8:	b510      	push	{r4, lr}
 80031da:	b084      	sub	sp, #16
    const usbd_driver* driver = boot_target_usb_init();
 80031dc:	f7ff ff50 	bl	8003080 <boot_target_usb_init>
    usbd_dev = usbd_init(driver, &dev, &config, 
 80031e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031e4:	9302      	str	r3, [sp, #8]
 80031e6:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <usb_setup+0x7c>)
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	2309      	movs	r3, #9
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <usb_setup+0x80>)
 80031f0:	4a1a      	ldr	r2, [pc, #104]	; (800325c <usb_setup+0x84>)
 80031f2:	491b      	ldr	r1, [pc, #108]	; (8003260 <usb_setup+0x88>)
 80031f4:	f7fd ff42 	bl	800107c <usbd_init>
 80031f8:	4c1a      	ldr	r4, [pc, #104]	; (8003264 <usb_setup+0x8c>)
 80031fa:	6020      	str	r0, [r4, #0]
    usbd_register_sof_callback(usbd_dev, sof_callback);
 80031fc:	491a      	ldr	r1, [pc, #104]	; (8003268 <usb_setup+0x90>)
 80031fe:	f7fe faa1 	bl	8001744 <usbd_register_sof_callback>
    cdc_setup(usbd_dev, cdc_connected);
 8003202:	491a      	ldr	r1, [pc, #104]	; (800326c <usb_setup+0x94>)
 8003204:	6820      	ldr	r0, [r4, #0]
 8003206:	f000 fc5f 	bl	8003ac8 <cdc_setup>
    hf2_setup(usbd_dev, hf2_connected);
 800320a:	4919      	ldr	r1, [pc, #100]	; (8003270 <usb_setup+0x98>)
 800320c:	6820      	ldr	r0, [r4, #0]
 800320e:	f001 f82b 	bl	8004268 <hf2_setup>
	usb21_setup(usbd_dev, &bos_descriptor);
 8003212:	4918      	ldr	r1, [pc, #96]	; (8003274 <usb_setup+0x9c>)
 8003214:	6820      	ldr	r0, [r4, #0]
 8003216:	f001 f8cf 	bl	80043b8 <usb21_setup>
	webusb_setup(usbd_dev, origin_url);
 800321a:	4917      	ldr	r1, [pc, #92]	; (8003278 <usb_setup+0xa0>)
 800321c:	6820      	ldr	r0, [r4, #0]
 800321e:	f000 fa83 	bl	8003728 <webusb_setup>
	winusb_setup(usbd_dev, INTF_HF2);
 8003222:	2100      	movs	r1, #0
 8003224:	6820      	ldr	r0, [r4, #0]
 8003226:	f000 fb49 	bl	80038bc <winusb_setup>
	int status = usbd_register_set_config_callback(usbd_dev, set_aggregate_callback);
 800322a:	4914      	ldr	r1, [pc, #80]	; (800327c <usb_setup+0xa4>)
 800322c:	6820      	ldr	r0, [r4, #0]
 800322e:	f7fe fe8c 	bl	8001f4a <usbd_register_set_config_callback>
    if (status < 0) { debug_println("*** usb_setup failed"); debug_flush(); }
 8003232:	2800      	cmp	r0, #0
 8003234:	db08      	blt.n	8003248 <usb_setup+0x70>
    set_aggregate_callback(usbd_dev, (uint16_t) -1);
 8003236:	4c0b      	ldr	r4, [pc, #44]	; (8003264 <usb_setup+0x8c>)
 8003238:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800323c:	6820      	ldr	r0, [r4, #0]
 800323e:	f7ff ffa3 	bl	8003188 <set_aggregate_callback>
}
 8003242:	6820      	ldr	r0, [r4, #0]
 8003244:	b004      	add	sp, #16
 8003246:	bd10      	pop	{r4, pc}
    if (status < 0) { debug_println("*** usb_setup failed"); debug_flush(); }
 8003248:	480d      	ldr	r0, [pc, #52]	; (8003280 <usb_setup+0xa8>)
 800324a:	f7ff fb0b 	bl	8002864 <debug_println>
 800324e:	f7ff fb30 	bl	80028b2 <debug_flush>
 8003252:	e7f0      	b.n	8003236 <usb_setup+0x5e>
 8003254:	2000062c 	.word	0x2000062c
 8003258:	20000024 	.word	0x20000024
 800325c:	08004a3c 	.word	0x08004a3c
 8003260:	08004a84 	.word	0x08004a84
 8003264:	20000520 	.word	0x20000520
 8003268:	08003179 	.word	0x08003179
 800326c:	08003129 	.word	0x08003129
 8003270:	08003115 	.word	0x08003115
 8003274:	080049ec 	.word	0x080049ec
 8003278:	08004c40 	.word	0x08004c40
 800327c:	08003189 	.word	0x08003189
 8003280:	08004c5c 	.word	0x08004c5c

08003284 <set_usb_busy>:
void set_usb_busy(void) {
 8003284:	b508      	push	{r3, lr}
    last_busy_time = millis();
 8003286:	f7ff fc9b 	bl	8002bc0 <millis>
 800328a:	4b03      	ldr	r3, [pc, #12]	; (8003298 <set_usb_busy+0x14>)
 800328c:	6018      	str	r0, [r3, #0]
    debug_print(".");
 800328e:	4803      	ldr	r0, [pc, #12]	; (800329c <set_usb_busy+0x18>)
 8003290:	f7ff fb14 	bl	80028bc <debug_print>
}
 8003294:	bd08      	pop	{r3, pc}
 8003296:	bf00      	nop
 8003298:	200004fc 	.word	0x200004fc
 800329c:	080048b8 	.word	0x080048b8

080032a0 <get_usb_status>:
    if (last_busy_time == 0) { return 0; }
 80032a0:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <get_usb_status+0x34>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	b90b      	cbnz	r3, 80032aa <get_usb_status+0xa>
 80032a6:	2000      	movs	r0, #0
}
 80032a8:	4770      	bx	lr
volatile int get_usb_status(void) { 
 80032aa:	b500      	push	{lr}
 80032ac:	b083      	sub	sp, #12
    volatile uint32_t now = millis();
 80032ae:	f7ff fc87 	bl	8002bc0 <millis>
 80032b2:	9001      	str	r0, [sp, #4]
    if (now < (last_busy_time + BUSY_DURATION)) { 
 80032b4:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <get_usb_status+0x34>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80032bc:	3308      	adds	r3, #8
 80032be:	9a01      	ldr	r2, [sp, #4]
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d805      	bhi.n	80032d0 <get_usb_status+0x30>
    last_busy_time = 0;
 80032c4:	2000      	movs	r0, #0
 80032c6:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <get_usb_status+0x34>)
 80032c8:	6018      	str	r0, [r3, #0]
}
 80032ca:	b003      	add	sp, #12
 80032cc:	f85d fb04 	ldr.w	pc, [sp], #4
        return 1; 
 80032d0:	2001      	movs	r0, #1
 80032d2:	e7fa      	b.n	80032ca <get_usb_status+0x2a>
 80032d4:	200004fc 	.word	0x200004fc

080032d8 <aggregate_register_config_callback>:
	usbd_set_config_callback callback) {
 80032d8:	b508      	push	{r3, lr}
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80032da:	2300      	movs	r3, #0
 80032dc:	2b09      	cmp	r3, #9
 80032de:	dc0c      	bgt.n	80032fa <aggregate_register_config_callback+0x22>
		if (config_callback[i]) {
 80032e0:	4a0b      	ldr	r2, [pc, #44]	; (8003310 <aggregate_register_config_callback+0x38>)
 80032e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032e6:	b11a      	cbz	r2, 80032f0 <aggregate_register_config_callback+0x18>
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 80032e8:	428a      	cmp	r2, r1
 80032ea:	d00e      	beq.n	800330a <aggregate_register_config_callback+0x32>
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80032ec:	3301      	adds	r3, #1
 80032ee:	e7f5      	b.n	80032dc <aggregate_register_config_callback+0x4>
		config_callback[i] = callback;
 80032f0:	4a07      	ldr	r2, [pc, #28]	; (8003310 <aggregate_register_config_callback+0x38>)
 80032f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 0;
 80032f6:	2000      	movs	r0, #0
 80032f8:	e008      	b.n	800330c <aggregate_register_config_callback+0x34>
    debug_println("*** ERROR: Too many config callbacks"); debug_flush();
 80032fa:	4806      	ldr	r0, [pc, #24]	; (8003314 <aggregate_register_config_callback+0x3c>)
 80032fc:	f7ff fab2 	bl	8002864 <debug_println>
 8003300:	f7ff fad7 	bl	80028b2 <debug_flush>
	return -1;
 8003304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003308:	e000      	b.n	800330c <aggregate_register_config_callback+0x34>
            if (config_callback[i] == callback) { return 0; }  //  Skip duplicate.
 800330a:	2000      	movs	r0, #0
}
 800330c:	bd08      	pop	{r3, pc}
 800330e:	bf00      	nop
 8003310:	20000484 	.word	0x20000484
 8003314:	080049c4 	.word	0x080049c4

08003318 <aggregate_register_callback>:
    usbd_control_callback callback) {
 8003318:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 800331a:	2000      	movs	r0, #0
 800331c:	e000      	b.n	8003320 <aggregate_register_callback+0x8>
 800331e:	3001      	adds	r0, #1
 8003320:	2809      	cmp	r0, #9
 8003322:	dc1c      	bgt.n	800335e <aggregate_register_callback+0x46>
		if (control_callback[i].cb) { 
 8003324:	4c12      	ldr	r4, [pc, #72]	; (8003370 <aggregate_register_callback+0x58>)
 8003326:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800332a:	6864      	ldr	r4, [r4, #4]
 800332c:	b174      	cbz	r4, 800334c <aggregate_register_callback+0x34>
            if (control_callback[i].type == type &&
 800332e:	4d10      	ldr	r5, [pc, #64]	; (8003370 <aggregate_register_callback+0x58>)
 8003330:	f815 5030 	ldrb.w	r5, [r5, r0, lsl #3]
 8003334:	428d      	cmp	r5, r1
 8003336:	d1f2      	bne.n	800331e <aggregate_register_callback+0x6>
                control_callback[i].type_mask == type_mask &&
 8003338:	4d0d      	ldr	r5, [pc, #52]	; (8003370 <aggregate_register_callback+0x58>)
 800333a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
 800333e:	786d      	ldrb	r5, [r5, #1]
            if (control_callback[i].type == type &&
 8003340:	4295      	cmp	r5, r2
 8003342:	d1ec      	bne.n	800331e <aggregate_register_callback+0x6>
                control_callback[i].type_mask == type_mask &&
 8003344:	429c      	cmp	r4, r3
 8003346:	d1ea      	bne.n	800331e <aggregate_register_callback+0x6>
                    return 0;
 8003348:	2000      	movs	r0, #0
}
 800334a:	bd38      	pop	{r3, r4, r5, pc}
		control_callback[i].type = type;
 800334c:	4c08      	ldr	r4, [pc, #32]	; (8003370 <aggregate_register_callback+0x58>)
 800334e:	f804 1030 	strb.w	r1, [r4, r0, lsl #3]
		control_callback[i].type_mask = type_mask;
 8003352:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8003356:	7042      	strb	r2, [r0, #1]
		control_callback[i].cb = callback;
 8003358:	6043      	str	r3, [r0, #4]
		return 0;
 800335a:	2000      	movs	r0, #0
 800335c:	e7f5      	b.n	800334a <aggregate_register_callback+0x32>
    debug_println("*** ERROR: Too many control callbacks"); debug_flush();
 800335e:	4805      	ldr	r0, [pc, #20]	; (8003374 <aggregate_register_callback+0x5c>)
 8003360:	f7ff fa80 	bl	8002864 <debug_println>
 8003364:	f7ff faa5 	bl	80028b2 <debug_flush>
	return -1;
 8003368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800336c:	e7ed      	b.n	800334a <aggregate_register_callback+0x32>
 800336e:	bf00      	nop
 8003370:	200004ac 	.word	0x200004ac
 8003374:	0800499c 	.word	0x0800499c

08003378 <usb_set_serial_number>:

void usb_set_serial_number(const char* serial) {
    serial_number[0] = '\0';
 8003378:	4b07      	ldr	r3, [pc, #28]	; (8003398 <usb_set_serial_number+0x20>)
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]
    if (serial) {
 800337e:	b148      	cbz	r0, 8003394 <usb_set_serial_number+0x1c>
void usb_set_serial_number(const char* serial) {
 8003380:	b510      	push	{r4, lr}
 8003382:	4601      	mov	r1, r0
        strncpy(serial_number, serial, USB_SERIAL_NUM_LENGTH);
 8003384:	461c      	mov	r4, r3
 8003386:	2218      	movs	r2, #24
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff f92c 	bl	80025e6 <strncpy>
        serial_number[USB_SERIAL_NUM_LENGTH] = '\0';
 800338e:	2300      	movs	r3, #0
 8003390:	7623      	strb	r3, [r4, #24]
    }
}
 8003392:	bd10      	pop	{r4, pc}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000504 	.word	0x20000504

0800339c <dump_buffer>:

void dump_buffer(const char *msg, const uint8_t *buf, int len) {
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	460e      	mov	r6, r1
 80033a0:	4615      	mov	r5, r2
    debug_print(msg); debug_print(" ");
 80033a2:	f7ff fa8b 	bl	80028bc <debug_print>
 80033a6:	480c      	ldr	r0, [pc, #48]	; (80033d8 <dump_buffer+0x3c>)
 80033a8:	f7ff fa88 	bl	80028bc <debug_print>
    debug_print_unsigned(len); debug_print(" / ");
 80033ac:	4628      	mov	r0, r5
 80033ae:	f7ff fa95 	bl	80028dc <debug_print_unsigned>
 80033b2:	480a      	ldr	r0, [pc, #40]	; (80033dc <dump_buffer+0x40>)
 80033b4:	f7ff fa82 	bl	80028bc <debug_print>
    int i;
    for (i = 0; i < len; i++) { 
 80033b8:	2400      	movs	r4, #0
 80033ba:	e006      	b.n	80033ca <dump_buffer+0x2e>
        debug_printhex(buf[i]); debug_print(" "); 
 80033bc:	5d30      	ldrb	r0, [r6, r4]
 80033be:	f7ff fa91 	bl	80028e4 <debug_printhex>
 80033c2:	4805      	ldr	r0, [pc, #20]	; (80033d8 <dump_buffer+0x3c>)
 80033c4:	f7ff fa7a 	bl	80028bc <debug_print>
    for (i = 0; i < len; i++) { 
 80033c8:	3401      	adds	r4, #1
 80033ca:	42ac      	cmp	r4, r5
 80033cc:	dbf6      	blt.n	80033bc <dump_buffer+0x20>
    }
    debug_println("");
 80033ce:	4804      	ldr	r0, [pc, #16]	; (80033e0 <dump_buffer+0x44>)
 80033d0:	f7ff fa48 	bl	8002864 <debug_println>
}
 80033d4:	bd70      	pop	{r4, r5, r6, pc}
 80033d6:	bf00      	nop
 80033d8:	08004b14 	.word	0x08004b14
 80033dc:	08004a98 	.word	0x08004a98
 80033e0:	080046c4 	.word	0x080046c4

080033e4 <dump_usb_request>:

void dump_usb_request(const char *msg, struct usb_setup_data *req) {
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	460c      	mov	r4, r1
    debug_print(msg);
 80033e8:	f7ff fa68 	bl	80028bc <debug_print>
    ////debug_println(""); return; ////

    uint8_t desc_type = usb_descriptor_type(req->wValue);
 80033ec:	8865      	ldrh	r5, [r4, #2]
 80033ee:	4628      	mov	r0, r5
 80033f0:	f001 f8ca 	bl	8004588 <usb_descriptor_type>
 80033f4:	4606      	mov	r6, r0
    uint8_t desc_index = usb_descriptor_index(req->wValue);
 80033f6:	4628      	mov	r0, r5
 80033f8:	f001 f8c8 	bl	800458c <usb_descriptor_index>
 80033fc:	4605      	mov	r5, r0
    debug_print(" typ "); debug_printhex(req->bmRequestType);
 80033fe:	4850      	ldr	r0, [pc, #320]	; (8003540 <dump_usb_request+0x15c>)
 8003400:	f7ff fa5c 	bl	80028bc <debug_print>
 8003404:	7820      	ldrb	r0, [r4, #0]
 8003406:	f7ff fa6d 	bl	80028e4 <debug_printhex>
    debug_print(", req "); debug_printhex(req->bRequest);
 800340a:	484e      	ldr	r0, [pc, #312]	; (8003544 <dump_usb_request+0x160>)
 800340c:	f7ff fa56 	bl	80028bc <debug_print>
 8003410:	7860      	ldrb	r0, [r4, #1]
 8003412:	f7ff fa67 	bl	80028e4 <debug_printhex>
    debug_print(", val "); debug_printhex(req->wValue >> 8); debug_printhex(req->wValue & 0xff);
 8003416:	484c      	ldr	r0, [pc, #304]	; (8003548 <dump_usb_request+0x164>)
 8003418:	f7ff fa50 	bl	80028bc <debug_print>
 800341c:	8860      	ldrh	r0, [r4, #2]
 800341e:	0a00      	lsrs	r0, r0, #8
 8003420:	f7ff fa60 	bl	80028e4 <debug_printhex>
 8003424:	8860      	ldrh	r0, [r4, #2]
 8003426:	b2c0      	uxtb	r0, r0
 8003428:	f7ff fa5c 	bl	80028e4 <debug_printhex>
    debug_print(", idx "); debug_printhex(req->wIndex >> 8); debug_printhex(req->wIndex & 0xff);
 800342c:	4847      	ldr	r0, [pc, #284]	; (800354c <dump_usb_request+0x168>)
 800342e:	f7ff fa45 	bl	80028bc <debug_print>
 8003432:	88a0      	ldrh	r0, [r4, #4]
 8003434:	0a00      	lsrs	r0, r0, #8
 8003436:	f7ff fa55 	bl	80028e4 <debug_printhex>
 800343a:	88a0      	ldrh	r0, [r4, #4]
 800343c:	b2c0      	uxtb	r0, r0
 800343e:	f7ff fa51 	bl	80028e4 <debug_printhex>
    debug_print(", len "); debug_printhex(req->wLength >> 8); debug_printhex(req->wLength & 0xff);
 8003442:	4843      	ldr	r0, [pc, #268]	; (8003550 <dump_usb_request+0x16c>)
 8003444:	f7ff fa3a 	bl	80028bc <debug_print>
 8003448:	88e0      	ldrh	r0, [r4, #6]
 800344a:	0a00      	lsrs	r0, r0, #8
 800344c:	f7ff fa4a 	bl	80028e4 <debug_printhex>
 8003450:	88e0      	ldrh	r0, [r4, #6]
 8003452:	b2c0      	uxtb	r0, r0
 8003454:	f7ff fa46 	bl	80028e4 <debug_printhex>
    ////debug_println(""); return; ////

    if (req->bmRequestType == 0x00 || req->bmRequestType == 0x80) {
 8003458:	7823      	ldrb	r3, [r4, #0]
 800345a:	b10b      	cbz	r3, 8003460 <dump_usb_request+0x7c>
 800345c:	2b80      	cmp	r3, #128	; 0x80
 800345e:	d11d      	bne.n	800349c <dump_usb_request+0xb8>
        //  Dump USB standard requests.
        if (req->bmRequestType == 0x80 && req->bRequest == 0x06) {
 8003460:	2b80      	cmp	r3, #128	; 0x80
 8003462:	d01f      	beq.n	80034a4 <dump_usb_request+0xc0>
                case 3: debug_print("_STR"); break;
                case 4: debug_print("_INF"); break;
                case 5: debug_print("_ENP"); break;
                case 15: debug_print("_BOS"); break;
            }
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x05) {
 8003464:	b913      	cbnz	r3, 800346c <dump_usb_request+0x88>
 8003466:	7862      	ldrb	r2, [r4, #1]
 8003468:	2a05      	cmp	r2, #5
 800346a:	d05d      	beq.n	8003528 <dump_usb_request+0x144>
            //  Note: We should see SET_ADDRESS only once per session.  If we see this again, it means
            //  we have previously returned invalid data to the host and the host is attempting to reset our connection.
            debug_print(", SET_ADR    ");
        } else if (req->bmRequestType == 0x00 && req->bRequest == 0x09) {
 800346c:	b913      	cbnz	r3, 8003474 <dump_usb_request+0x90>
 800346e:	7862      	ldrb	r2, [r4, #1]
 8003470:	2a09      	cmp	r2, #9
 8003472:	d05d      	beq.n	8003530 <dump_usb_request+0x14c>
            debug_print(", SET_CFG    ");
        } else if (req->bmRequestType == 0x80 && req->bRequest == 0x09) {
 8003474:	2b80      	cmp	r3, #128	; 0x80
 8003476:	d102      	bne.n	800347e <dump_usb_request+0x9a>
 8003478:	7863      	ldrb	r3, [r4, #1]
 800347a:	2b09      	cmp	r3, #9
 800347c:	d05c      	beq.n	8003538 <dump_usb_request+0x154>
            debug_print(", SET_CFG    ");
        } else {
            debug_print(",");
 800347e:	4835      	ldr	r0, [pc, #212]	; (8003554 <dump_usb_request+0x170>)
 8003480:	f7ff fa1c 	bl	80028bc <debug_print>
        }
        debug_print(" t "); debug_printhex(desc_type); 	
 8003484:	4834      	ldr	r0, [pc, #208]	; (8003558 <dump_usb_request+0x174>)
 8003486:	f7ff fa19 	bl	80028bc <debug_print>
 800348a:	4630      	mov	r0, r6
 800348c:	f7ff fa2a 	bl	80028e4 <debug_printhex>
        debug_print(" i "); debug_printhex(desc_index); 	
 8003490:	4832      	ldr	r0, [pc, #200]	; (800355c <dump_usb_request+0x178>)
 8003492:	f7ff fa13 	bl	80028bc <debug_print>
 8003496:	4628      	mov	r0, r5
 8003498:	f7ff fa24 	bl	80028e4 <debug_printhex>
    }
    debug_println("");
 800349c:	4830      	ldr	r0, [pc, #192]	; (8003560 <dump_usb_request+0x17c>)
 800349e:	f7ff f9e1 	bl	8002864 <debug_println>
}
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
        if (req->bmRequestType == 0x80 && req->bRequest == 0x06) {
 80034a4:	7862      	ldrb	r2, [r4, #1]
 80034a6:	2a06      	cmp	r2, #6
 80034a8:	d1dc      	bne.n	8003464 <dump_usb_request+0x80>
            debug_print(", GET_DES");
 80034aa:	482e      	ldr	r0, [pc, #184]	; (8003564 <dump_usb_request+0x180>)
 80034ac:	f7ff fa06 	bl	80028bc <debug_print>
            switch(desc_type) {
 80034b0:	1e73      	subs	r3, r6, #1
 80034b2:	2b0e      	cmp	r3, #14
 80034b4:	d8e6      	bhi.n	8003484 <dump_usb_request+0xa0>
 80034b6:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <dump_usb_request+0xd8>)
 80034b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034bc:	080034f9 	.word	0x080034f9
 80034c0:	08003501 	.word	0x08003501
 80034c4:	08003509 	.word	0x08003509
 80034c8:	08003511 	.word	0x08003511
 80034cc:	08003519 	.word	0x08003519
 80034d0:	08003485 	.word	0x08003485
 80034d4:	08003485 	.word	0x08003485
 80034d8:	08003485 	.word	0x08003485
 80034dc:	08003485 	.word	0x08003485
 80034e0:	08003485 	.word	0x08003485
 80034e4:	08003485 	.word	0x08003485
 80034e8:	08003485 	.word	0x08003485
 80034ec:	08003485 	.word	0x08003485
 80034f0:	08003485 	.word	0x08003485
 80034f4:	08003521 	.word	0x08003521
                case 1: debug_print("_DEV"); break;
 80034f8:	481b      	ldr	r0, [pc, #108]	; (8003568 <dump_usb_request+0x184>)
 80034fa:	f7ff f9df 	bl	80028bc <debug_print>
 80034fe:	e7c1      	b.n	8003484 <dump_usb_request+0xa0>
                case 2: debug_print("_CFG"); break;
 8003500:	481a      	ldr	r0, [pc, #104]	; (800356c <dump_usb_request+0x188>)
 8003502:	f7ff f9db 	bl	80028bc <debug_print>
 8003506:	e7bd      	b.n	8003484 <dump_usb_request+0xa0>
                case 3: debug_print("_STR"); break;
 8003508:	4819      	ldr	r0, [pc, #100]	; (8003570 <dump_usb_request+0x18c>)
 800350a:	f7ff f9d7 	bl	80028bc <debug_print>
 800350e:	e7b9      	b.n	8003484 <dump_usb_request+0xa0>
                case 4: debug_print("_INF"); break;
 8003510:	4818      	ldr	r0, [pc, #96]	; (8003574 <dump_usb_request+0x190>)
 8003512:	f7ff f9d3 	bl	80028bc <debug_print>
 8003516:	e7b5      	b.n	8003484 <dump_usb_request+0xa0>
                case 5: debug_print("_ENP"); break;
 8003518:	4817      	ldr	r0, [pc, #92]	; (8003578 <dump_usb_request+0x194>)
 800351a:	f7ff f9cf 	bl	80028bc <debug_print>
 800351e:	e7b1      	b.n	8003484 <dump_usb_request+0xa0>
                case 15: debug_print("_BOS"); break;
 8003520:	4816      	ldr	r0, [pc, #88]	; (800357c <dump_usb_request+0x198>)
 8003522:	f7ff f9cb 	bl	80028bc <debug_print>
 8003526:	e7ad      	b.n	8003484 <dump_usb_request+0xa0>
            debug_print(", SET_ADR    ");
 8003528:	4815      	ldr	r0, [pc, #84]	; (8003580 <dump_usb_request+0x19c>)
 800352a:	f7ff f9c7 	bl	80028bc <debug_print>
 800352e:	e7a9      	b.n	8003484 <dump_usb_request+0xa0>
            debug_print(", SET_CFG    ");
 8003530:	4814      	ldr	r0, [pc, #80]	; (8003584 <dump_usb_request+0x1a0>)
 8003532:	f7ff f9c3 	bl	80028bc <debug_print>
 8003536:	e7a5      	b.n	8003484 <dump_usb_request+0xa0>
            debug_print(", SET_CFG    ");
 8003538:	4812      	ldr	r0, [pc, #72]	; (8003584 <dump_usb_request+0x1a0>)
 800353a:	f7ff f9bf 	bl	80028bc <debug_print>
 800353e:	e7a1      	b.n	8003484 <dump_usb_request+0xa0>
 8003540:	08004a9c 	.word	0x08004a9c
 8003544:	08004aa4 	.word	0x08004aa4
 8003548:	08004aac 	.word	0x08004aac
 800354c:	08004ab4 	.word	0x08004ab4
 8003550:	08004818 	.word	0x08004818
 8003554:	08004b18 	.word	0x08004b18
 8003558:	08004b1c 	.word	0x08004b1c
 800355c:	08004b20 	.word	0x08004b20
 8003560:	080046c4 	.word	0x080046c4
 8003564:	08004abc 	.word	0x08004abc
 8003568:	08004ac8 	.word	0x08004ac8
 800356c:	08004ad0 	.word	0x08004ad0
 8003570:	08004ad8 	.word	0x08004ad8
 8003574:	08004ae0 	.word	0x08004ae0
 8003578:	08004ae8 	.word	0x08004ae8
 800357c:	08004af0 	.word	0x08004af0
 8003580:	08004af8 	.word	0x08004af8
 8003584:	08004b08 	.word	0x08004b08

08003588 <aggregate_callback>:
	usbd_control_complete_callback *complete) {
 8003588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	4681      	mov	r9, r0
 8003590:	460d      	mov	r5, r1
 8003592:	4690      	mov	r8, r2
 8003594:	469a      	mov	sl, r3
 8003596:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if (req->bmRequestType == 0 && req->bRequest == 5) {
 8003598:	780b      	ldrb	r3, [r1, #0]
 800359a:	bb73      	cbnz	r3, 80035fa <aggregate_callback+0x72>
 800359c:	784b      	ldrb	r3, [r1, #1]
 800359e:	2b05      	cmp	r3, #5
 80035a0:	d001      	beq.n	80035a6 <aggregate_callback+0x1e>
 80035a2:	2400      	movs	r4, #0
 80035a4:	e00f      	b.n	80035c6 <aggregate_callback+0x3e>
        set_usb_busy();
 80035a6:	f7ff fe6d 	bl	8003284 <set_usb_busy>
        debug_println("SET_ADR");
 80035aa:	481e      	ldr	r0, [pc, #120]	; (8003624 <aggregate_callback+0x9c>)
 80035ac:	f7ff f95a 	bl	8002864 <debug_println>
        *len = 0;          //  Return an empty message.
 80035b0:	2300      	movs	r3, #0
 80035b2:	f8aa 3000 	strh.w	r3, [sl]
        return _usbd_standard_request_device(usbd_dev, req, buf, len);
 80035b6:	4653      	mov	r3, sl
 80035b8:	4642      	mov	r2, r8
 80035ba:	4629      	mov	r1, r5
 80035bc:	4648      	mov	r0, r9
 80035be:	f7fd fd89 	bl	80010d4 <_usbd_standard_request_device>
 80035c2:	e029      	b.n	8003618 <aggregate_callback+0x90>
    for (i = 0; i < MAX_CONTROL_CALLBACK; i++) {
 80035c4:	3401      	adds	r4, #1
 80035c6:	2c09      	cmp	r4, #9
 80035c8:	dc19      	bgt.n	80035fe <aggregate_callback+0x76>
        if (control_callback[i].cb == NULL) { break; }
 80035ca:	4b17      	ldr	r3, [pc, #92]	; (8003628 <aggregate_callback+0xa0>)
 80035cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80035d0:	685e      	ldr	r6, [r3, #4]
 80035d2:	b1a6      	cbz	r6, 80035fe <aggregate_callback+0x76>
        if ((req->bmRequestType & control_callback[i].type_mask) == control_callback[i].type) {
 80035d4:	782b      	ldrb	r3, [r5, #0]
 80035d6:	4a14      	ldr	r2, [pc, #80]	; (8003628 <aggregate_callback+0xa0>)
 80035d8:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
 80035dc:	7849      	ldrb	r1, [r1, #1]
 80035de:	400b      	ands	r3, r1
 80035e0:	f812 2034 	ldrb.w	r2, [r2, r4, lsl #3]
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d1ed      	bne.n	80035c4 <aggregate_callback+0x3c>
            result = control_callback[i].cb(
 80035e8:	9700      	str	r7, [sp, #0]
 80035ea:	4653      	mov	r3, sl
 80035ec:	4642      	mov	r2, r8
 80035ee:	4629      	mov	r1, r5
 80035f0:	4648      	mov	r0, r9
 80035f2:	47b0      	blx	r6
            if (result == USBD_REQ_HANDLED ||
 80035f4:	2801      	cmp	r0, #1
 80035f6:	d8e5      	bhi.n	80035c4 <aggregate_callback+0x3c>
 80035f8:	e00e      	b.n	8003618 <aggregate_callback+0x90>
 80035fa:	2400      	movs	r4, #0
 80035fc:	e7e3      	b.n	80035c6 <aggregate_callback+0x3e>
    set_usb_busy();
 80035fe:	f7ff fe41 	bl	8003284 <set_usb_busy>
    if (!(req->bmRequestType == 0x80 && req->bRequest == 0x06)) {
 8003602:	782b      	ldrb	r3, [r5, #0]
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d102      	bne.n	800360e <aggregate_callback+0x86>
 8003608:	786b      	ldrb	r3, [r5, #1]
 800360a:	2b06      	cmp	r3, #6
 800360c:	d007      	beq.n	800361e <aggregate_callback+0x96>
	    dump_usb_request(">> ", req);
 800360e:	4629      	mov	r1, r5
 8003610:	4806      	ldr	r0, [pc, #24]	; (800362c <aggregate_callback+0xa4>)
 8003612:	f7ff fee7 	bl	80033e4 <dump_usb_request>
	return USBD_REQ_NEXT_CALLBACK;
 8003616:	2002      	movs	r0, #2
}
 8003618:	b002      	add	sp, #8
 800361a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return USBD_REQ_NEXT_CALLBACK;
 800361e:	2002      	movs	r0, #2
 8003620:	e7fa      	b.n	8003618 <aggregate_callback+0x90>
 8003622:	bf00      	nop
 8003624:	08004990 	.word	0x08004990
 8003628:	200004ac 	.word	0x200004ac
 800362c:	08004998 	.word	0x08004998

08003630 <webusb_set_config>:
	}

	return status;
}

static void webusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8003630:	b508      	push	{r3, lr}
    //  debug_println("webusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <webusb_set_config+0x20>)
 8003634:	227f      	movs	r2, #127	; 0x7f
 8003636:	2140      	movs	r1, #64	; 0x40
 8003638:	f7ff fe6e 	bl	8003318 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 800363c:	2800      	cmp	r0, #0
 800363e:	db00      	blt.n	8003642 <webusb_set_config+0x12>
}
 8003640:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** webusb_set_config failed"); debug_flush(); }
 8003642:	4804      	ldr	r0, [pc, #16]	; (8003654 <webusb_set_config+0x24>)
 8003644:	f7ff f90e 	bl	8002864 <debug_println>
 8003648:	f7ff f933 	bl	80028b2 <debug_flush>
}
 800364c:	e7f8      	b.n	8003640 <webusb_set_config+0x10>
 800364e:	bf00      	nop
 8003650:	08003659 	.word	0x08003659
 8003654:	08004ccc 	.word	0x08004ccc

08003658 <webusb_control_vendor_request>:
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8003658:	7808      	ldrb	r0, [r1, #0]
 800365a:	3040      	adds	r0, #64	; 0x40
 800365c:	b2c0      	uxtb	r0, r0
 800365e:	2801      	cmp	r0, #1
 8003660:	d853      	bhi.n	800370a <webusb_control_vendor_request+0xb2>
	if (req->bRequest != WEBUSB_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 8003662:	7848      	ldrb	r0, [r1, #1]
 8003664:	2822      	cmp	r0, #34	; 0x22
 8003666:	d152      	bne.n	800370e <webusb_control_vendor_request+0xb6>
									 usbd_control_complete_callback* complete) {
 8003668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800366c:	461d      	mov	r5, r3
 800366e:	460c      	mov	r4, r1
	switch (req->wIndex) {
 8003670:	888b      	ldrh	r3, [r1, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d13b      	bne.n	80036ee <webusb_control_vendor_request+0x96>
			struct webusb_url_descriptor* url = (struct webusb_url_descriptor*)(*buf);
 8003676:	6817      	ldr	r7, [r2, #0]
			uint16_t index = req->wValue;
 8003678:	884e      	ldrh	r6, [r1, #2]
			if (index == 0) {
 800367a:	b176      	cbz	r6, 800369a <webusb_control_vendor_request+0x42>
			if (index == 1) {
 800367c:	2e01      	cmp	r6, #1
 800367e:	d019      	beq.n	80036b4 <webusb_control_vendor_request+0x5c>
    			debug_print("*** webusb notsupp index "); debug_print_unsigned(index); debug_println(""); debug_flush(); ////
 8003680:	4824      	ldr	r0, [pc, #144]	; (8003714 <webusb_control_vendor_request+0xbc>)
 8003682:	f7ff f91b 	bl	80028bc <debug_print>
 8003686:	4630      	mov	r0, r6
 8003688:	f7ff f928 	bl	80028dc <debug_print_unsigned>
 800368c:	4822      	ldr	r0, [pc, #136]	; (8003718 <webusb_control_vendor_request+0xc0>)
 800368e:	f7ff f8e9 	bl	8002864 <debug_println>
 8003692:	f7ff f90e 	bl	80028b2 <debug_flush>
				status = USBD_REQ_NOTSUPP;
 8003696:	2000      	movs	r0, #0
 8003698:	e035      	b.n	8003706 <webusb_control_vendor_request+0xae>
    			debug_print("*** webusb notsupp index "); debug_print_unsigned(index); debug_println(""); debug_flush(); ////
 800369a:	481e      	ldr	r0, [pc, #120]	; (8003714 <webusb_control_vendor_request+0xbc>)
 800369c:	f7ff f90e 	bl	80028bc <debug_print>
 80036a0:	4630      	mov	r0, r6
 80036a2:	f7ff f91b 	bl	80028dc <debug_print_unsigned>
 80036a6:	481c      	ldr	r0, [pc, #112]	; (8003718 <webusb_control_vendor_request+0xc0>)
 80036a8:	f7ff f8dc 	bl	8002864 <debug_println>
 80036ac:	f7ff f901 	bl	80028b2 <debug_flush>
				return USBD_REQ_NOTSUPP;
 80036b0:	2000      	movs	r0, #0
 80036b2:	e028      	b.n	8003706 <webusb_control_vendor_request+0xae>
				dump_usb_request("weburl", req); // debug_flush(); ////
 80036b4:	4819      	ldr	r0, [pc, #100]	; (800371c <webusb_control_vendor_request+0xc4>)
 80036b6:	f7ff fe95 	bl	80033e4 <dump_usb_request>
				size_t url_len = strlen(webusb_https_url);
 80036ba:	4b19      	ldr	r3, [pc, #100]	; (8003720 <webusb_control_vendor_request+0xc8>)
 80036bc:	f8d3 8000 	ldr.w	r8, [r3]
 80036c0:	4640      	mov	r0, r8
 80036c2:	f7fe ff88 	bl	80025d6 <strlen>
 80036c6:	4602      	mov	r2, r0
				url->bLength = WEBUSB_DT_URL_DESCRIPTOR_SIZE + url_len;
 80036c8:	1cc6      	adds	r6, r0, #3
 80036ca:	b2f6      	uxtb	r6, r6
 80036cc:	703e      	strb	r6, [r7, #0]
				url->bDescriptorType = WEBUSB_DT_URL;
 80036ce:	2303      	movs	r3, #3
 80036d0:	707b      	strb	r3, [r7, #1]
				url->bScheme = WEBUSB_URL_SCHEME_HTTPS;
 80036d2:	2401      	movs	r4, #1
 80036d4:	70bc      	strb	r4, [r7, #2]
				memcpy(&url->URL, webusb_https_url, url_len);
 80036d6:	4641      	mov	r1, r8
 80036d8:	18f8      	adds	r0, r7, r3
 80036da:	f7fe ff64 	bl	80025a6 <memcpy>
				*len = MIN(*len, url->bLength);
 80036de:	882b      	ldrh	r3, [r5, #0]
 80036e0:	b2b6      	uxth	r6, r6
 80036e2:	429e      	cmp	r6, r3
 80036e4:	bf28      	it	cs
 80036e6:	461e      	movcs	r6, r3
 80036e8:	802e      	strh	r6, [r5, #0]
				status = USBD_REQ_HANDLED;
 80036ea:	4620      	mov	r0, r4
 80036ec:	e00b      	b.n	8003706 <webusb_control_vendor_request+0xae>
    		debug_print("*** webusb notsupp wIndex "); debug_print_unsigned(req->wIndex); debug_println(""); debug_flush(); ////
 80036ee:	480d      	ldr	r0, [pc, #52]	; (8003724 <webusb_control_vendor_request+0xcc>)
 80036f0:	f7ff f8e4 	bl	80028bc <debug_print>
 80036f4:	88a0      	ldrh	r0, [r4, #4]
 80036f6:	f7ff f8f1 	bl	80028dc <debug_print_unsigned>
 80036fa:	4807      	ldr	r0, [pc, #28]	; (8003718 <webusb_control_vendor_request+0xc0>)
 80036fc:	f7ff f8b2 	bl	8002864 <debug_println>
 8003700:	f7ff f8d7 	bl	80028b2 <debug_flush>
			status = USBD_REQ_NOTSUPP;
 8003704:	2000      	movs	r0, #0
}
 8003706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 800370a:	2002      	movs	r0, #2
 800370c:	4770      	bx	lr
	if (req->bRequest != WEBUSB_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 800370e:	2002      	movs	r0, #2
}
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	08004c74 	.word	0x08004c74
 8003718:	080046c4 	.word	0x080046c4
 800371c:	08004c90 	.word	0x08004c90
 8003720:	20000524 	.word	0x20000524
 8003724:	08004c98 	.word	0x08004c98

08003728 <webusb_setup>:

void webusb_setup(usbd_device* usbd_dev, const char* https_url) {
 8003728:	b510      	push	{r4, lr}
 800372a:	4604      	mov	r4, r0
    // debug_println("webusb_setup"); // debug_flush(); ////
	webusb_https_url = https_url;
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <webusb_setup+0x3c>)
 800372e:	6019      	str	r1, [r3, #0]

	//  Register the callback now because WebUSB requests come earlier.
	int status = aggregate_register_callback(
 8003730:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <webusb_setup+0x40>)
 8003732:	227f      	movs	r2, #127	; 0x7f
 8003734:	2140      	movs	r1, #64	; 0x40
 8003736:	f7ff fdef 	bl	8003318 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		webusb_control_vendor_request);
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 800373a:	2800      	cmp	r0, #0
 800373c:	db06      	blt.n	800374c <webusb_setup+0x24>

    //  Re-register the callback in case the USB restarts.
	status = aggregate_register_config_callback(usbd_dev, webusb_set_config);
 800373e:	490b      	ldr	r1, [pc, #44]	; (800376c <webusb_setup+0x44>)
 8003740:	4620      	mov	r0, r4
 8003742:	f7ff fdc9 	bl	80032d8 <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8003746:	2800      	cmp	r0, #0
 8003748:	db06      	blt.n	8003758 <webusb_setup+0x30>
}
 800374a:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 800374c:	4808      	ldr	r0, [pc, #32]	; (8003770 <webusb_setup+0x48>)
 800374e:	f7ff f889 	bl	8002864 <debug_println>
 8003752:	f7ff f8ae 	bl	80028b2 <debug_flush>
 8003756:	e7f2      	b.n	800373e <webusb_setup+0x16>
	if (status < 0) { debug_println("*** webusb_setup failed"); debug_flush(); }
 8003758:	4805      	ldr	r0, [pc, #20]	; (8003770 <webusb_setup+0x48>)
 800375a:	f7ff f883 	bl	8002864 <debug_println>
 800375e:	f7ff f8a8 	bl	80028b2 <debug_flush>
}
 8003762:	e7f2      	b.n	800374a <webusb_setup+0x22>
 8003764:	20000524 	.word	0x20000524
 8003768:	08003659 	.word	0x08003659
 800376c:	08003631 	.word	0x08003631
 8003770:	08004cec 	.word	0x08004cec

08003774 <winusb_set_config>:
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
	}
	return status;
}

static void winusb_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8003774:	b508      	push	{r3, lr}
	//  debug_println("winusb_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 8003776:	4b07      	ldr	r3, [pc, #28]	; (8003794 <winusb_set_config+0x20>)
 8003778:	2260      	movs	r2, #96	; 0x60
 800377a:	2140      	movs	r1, #64	; 0x40
 800377c:	f7ff fdcc 	bl	8003318 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	if (status < 0) {
 8003780:	2800      	cmp	r0, #0
 8003782:	db00      	blt.n	8003786 <winusb_set_config+0x12>
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
	}
}
 8003784:	bd08      	pop	{r3, pc}
    	debug_println("*** winusb_set_config failed"); debug_flush(); ////
 8003786:	4804      	ldr	r0, [pc, #16]	; (8003798 <winusb_set_config+0x24>)
 8003788:	f7ff f86c 	bl	8002864 <debug_println>
 800378c:	f7ff f891 	bl	80028b2 <debug_flush>
}
 8003790:	e7f8      	b.n	8003784 <winusb_set_config+0x10>
 8003792:	bf00      	nop
 8003794:	080037fd 	.word	0x080037fd
 8003798:	08004dd4 	.word	0x08004dd4

0800379c <winusb_descriptor_request>:
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 800379c:	7808      	ldrb	r0, [r1, #0]
 800379e:	f010 0f60 	tst.w	r0, #96	; 0x60
 80037a2:	d120      	bne.n	80037e6 <winusb_descriptor_request+0x4a>
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR && usb_descriptor_type(req->wValue) == USB_DT_STRING) {
 80037a4:	7848      	ldrb	r0, [r1, #1]
 80037a6:	2806      	cmp	r0, #6
 80037a8:	d11f      	bne.n	80037ea <winusb_descriptor_request+0x4e>
	usbd_control_complete_callback* complete) { (void)complete; (void)usbd_dev;
 80037aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ac:	461e      	mov	r6, r3
 80037ae:	4615      	mov	r5, r2
 80037b0:	460c      	mov	r4, r1
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR && usb_descriptor_type(req->wValue) == USB_DT_STRING) {
 80037b2:	884f      	ldrh	r7, [r1, #2]
 80037b4:	4638      	mov	r0, r7
 80037b6:	f000 feeb 	bl	8004590 <usb_descriptor_type>
 80037ba:	2803      	cmp	r0, #3
 80037bc:	d117      	bne.n	80037ee <winusb_descriptor_request+0x52>
		if (usb_descriptor_index(req->wValue) == WINUSB_EXTRA_STRING_INDEX) {
 80037be:	4638      	mov	r0, r7
 80037c0:	f000 fee8 	bl	8004594 <usb_descriptor_index>
 80037c4:	28ee      	cmp	r0, #238	; 0xee
 80037c6:	d001      	beq.n	80037cc <winusb_descriptor_request+0x30>
	return USBD_REQ_NEXT_CALLBACK;
 80037c8:	2002      	movs	r0, #2
 80037ca:	e011      	b.n	80037f0 <winusb_descriptor_request+0x54>
			dump_usb_request("winee", req); // debug_flush(); ////
 80037cc:	4621      	mov	r1, r4
 80037ce:	4809      	ldr	r0, [pc, #36]	; (80037f4 <winusb_descriptor_request+0x58>)
 80037d0:	f7ff fe08 	bl	80033e4 <dump_usb_request>
			*buf = (uint8_t*) &winusb_string_descriptor;
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <winusb_descriptor_request+0x5c>)
 80037d6:	602b      	str	r3, [r5, #0]
			*len = MIN(*len, winusb_string_descriptor.bLength);
 80037d8:	8833      	ldrh	r3, [r6, #0]
 80037da:	2b12      	cmp	r3, #18
 80037dc:	bf28      	it	cs
 80037de:	2312      	movcs	r3, #18
 80037e0:	8033      	strh	r3, [r6, #0]
			return USBD_REQ_HANDLED;
 80037e2:	2001      	movs	r0, #1
 80037e4:	e004      	b.n	80037f0 <winusb_descriptor_request+0x54>
	if ((req->bmRequestType & USB_REQ_TYPE_TYPE) != USB_REQ_TYPE_STANDARD) { return USBD_REQ_NEXT_CALLBACK; }
 80037e6:	2002      	movs	r0, #2
 80037e8:	4770      	bx	lr
	return USBD_REQ_NEXT_CALLBACK;
 80037ea:	2002      	movs	r0, #2
}
 80037ec:	4770      	bx	lr
	return USBD_REQ_NEXT_CALLBACK;
 80037ee:	2002      	movs	r0, #2
}
 80037f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037f2:	bf00      	nop
 80037f4:	08004dcc 	.word	0x08004dcc
 80037f8:	08004e0c 	.word	0x08004e0c

080037fc <winusb_control_vendor_request>:
					usbd_control_complete_callback* complete) {  (void)complete; (void)usbd_dev;
 80037fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 80037fe:	780c      	ldrb	r4, [r1, #0]
 8003800:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8003804:	b2c0      	uxtb	r0, r0
 8003806:	2801      	cmp	r0, #1
 8003808:	d844      	bhi.n	8003894 <winusb_control_vendor_request+0x98>
	if (req->bRequest != WINUSB_MS_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 800380a:	7848      	ldrb	r0, [r1, #1]
 800380c:	2821      	cmp	r0, #33	; 0x21
 800380e:	d143      	bne.n	8003898 <winusb_control_vendor_request+0x9c>
 8003810:	461f      	mov	r7, r3
 8003812:	4616      	mov	r6, r2
 8003814:	460d      	mov	r5, r1
	if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8003816:	f014 041f 	ands.w	r4, r4, #31
 800381a:	d102      	bne.n	8003822 <winusb_control_vendor_request+0x26>
		(req->wIndex == MSOS20_REQ_GET_DESCRIPTOR)) {
 800381c:	888b      	ldrh	r3, [r1, #4]
	if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 800381e:	2b07      	cmp	r3, #7
 8003820:	d011      	beq.n	8003846 <winusb_control_vendor_request+0x4a>
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8003822:	b914      	cbnz	r4, 800382a <winusb_control_vendor_request+0x2e>
		(req->wIndex == WINUSB_REQ_GET_COMPATIBLE_ID_FEATURE_DESCRIPTOR)) {
 8003824:	88ab      	ldrh	r3, [r5, #4]
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_DEVICE) &&
 8003826:	2b04      	cmp	r3, #4
 8003828:	d019      	beq.n	800385e <winusb_control_vendor_request+0x62>
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_INTERFACE) &&
 800382a:	2c01      	cmp	r4, #1
 800382c:	d136      	bne.n	800389c <winusb_control_vendor_request+0xa0>
		(req->wIndex == WINUSB_REQ_GET_EXTENDED_PROPERTIES_OS_FEATURE_DESCRIPTOR) &&
 800382e:	88ab      	ldrh	r3, [r5, #4]
	} else if (((req->bmRequestType & USB_REQ_TYPE_RECIPIENT) == USB_REQ_TYPE_INTERFACE) &&
 8003830:	2b05      	cmp	r3, #5
 8003832:	d135      	bne.n	80038a0 <winusb_control_vendor_request+0xa4>
		(usb_descriptor_index(req->wValue) == winusb_wcid.functions[0].bInterfaceNumber)) {
 8003834:	8868      	ldrh	r0, [r5, #2]
 8003836:	f000 fead 	bl	8004594 <usb_descriptor_index>
 800383a:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <winusb_control_vendor_request+0xa8>)
 800383c:	7c1b      	ldrb	r3, [r3, #16]
		(req->wIndex == WINUSB_REQ_GET_EXTENDED_PROPERTIES_OS_FEATURE_DESCRIPTOR) &&
 800383e:	4298      	cmp	r0, r3
 8003840:	d01b      	beq.n	800387a <winusb_control_vendor_request+0x7e>
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
 8003842:	2002      	movs	r0, #2
 8003844:	e027      	b.n	8003896 <winusb_control_vendor_request+0x9a>
		dump_usb_request("windes", req); // debug_flush(); ////
 8003846:	4818      	ldr	r0, [pc, #96]	; (80038a8 <winusb_control_vendor_request+0xac>)
 8003848:	f7ff fdcc 	bl	80033e4 <dump_usb_request>
		*buf = (uint8_t*) &msos20_descriptor_set;
 800384c:	4b17      	ldr	r3, [pc, #92]	; (80038ac <winusb_control_vendor_request+0xb0>)
 800384e:	6033      	str	r3, [r6, #0]
		*len = MIN(*len, MSOS20_DESCRIPTOR_SET_SIZE);
 8003850:	883b      	ldrh	r3, [r7, #0]
 8003852:	2bb2      	cmp	r3, #178	; 0xb2
 8003854:	bf28      	it	cs
 8003856:	23b2      	movcs	r3, #178	; 0xb2
 8003858:	803b      	strh	r3, [r7, #0]
		status = USBD_REQ_HANDLED;
 800385a:	2001      	movs	r0, #1
 800385c:	e01b      	b.n	8003896 <winusb_control_vendor_request+0x9a>
		dump_usb_request("winid", req); // debug_flush(); ////
 800385e:	4629      	mov	r1, r5
 8003860:	4813      	ldr	r0, [pc, #76]	; (80038b0 <winusb_control_vendor_request+0xb4>)
 8003862:	f7ff fdbf 	bl	80033e4 <dump_usb_request>
		*buf = (uint8_t*)(&winusb_wcid);
 8003866:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <winusb_control_vendor_request+0xa8>)
 8003868:	6032      	str	r2, [r6, #0]
		*len = MIN(*len, winusb_wcid.header.dwLength);
 800386a:	883b      	ldrh	r3, [r7, #0]
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	4293      	cmp	r3, r2
 8003870:	bf28      	it	cs
 8003872:	4613      	movcs	r3, r2
 8003874:	803b      	strh	r3, [r7, #0]
		status = USBD_REQ_HANDLED;
 8003876:	2001      	movs	r0, #1
 8003878:	e00d      	b.n	8003896 <winusb_control_vendor_request+0x9a>
		dump_usb_request("winprp", req); // debug_flush(); ////
 800387a:	4629      	mov	r1, r5
 800387c:	480d      	ldr	r0, [pc, #52]	; (80038b4 <winusb_control_vendor_request+0xb8>)
 800387e:	f7ff fdb1 	bl	80033e4 <dump_usb_request>
		*buf = (uint8_t*)(&guid);
 8003882:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <winusb_control_vendor_request+0xbc>)
 8003884:	6033      	str	r3, [r6, #0]
		*len = MIN(*len, guid.header.dwLength);
 8003886:	883b      	ldrh	r3, [r7, #0]
 8003888:	2b92      	cmp	r3, #146	; 0x92
 800388a:	bf28      	it	cs
 800388c:	2392      	movcs	r3, #146	; 0x92
 800388e:	803b      	strh	r3, [r7, #0]
		status = USBD_REQ_HANDLED;
 8003890:	2001      	movs	r0, #1
 8003892:	e000      	b.n	8003896 <winusb_control_vendor_request+0x9a>
	if (req->bmRequestType != 0xc0 && req->bmRequestType != 0xc1) { return USBD_REQ_NEXT_CALLBACK; }
 8003894:	2002      	movs	r0, #2
}
 8003896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (req->bRequest != WINUSB_MS_VENDOR_CODE) { return USBD_REQ_NEXT_CALLBACK; }
 8003898:	2002      	movs	r0, #2
 800389a:	e7fc      	b.n	8003896 <winusb_control_vendor_request+0x9a>
		status = USBD_REQ_NEXT_CALLBACK;  //  Previously USBD_REQ_NOTSUPP
 800389c:	2002      	movs	r0, #2
 800389e:	e7fa      	b.n	8003896 <winusb_control_vendor_request+0x9a>
 80038a0:	2002      	movs	r0, #2
 80038a2:	e7f8      	b.n	8003896 <winusb_control_vendor_request+0x9a>
 80038a4:	200000fc 	.word	0x200000fc
 80038a8:	08004db4 	.word	0x08004db4
 80038ac:	20000048 	.word	0x20000048
 80038b0:	08004dbc 	.word	0x08004dbc
 80038b4:	08004dc4 	.word	0x08004dc4
 80038b8:	08004d04 	.word	0x08004d04

080038bc <winusb_setup>:

void winusb_setup(usbd_device* usbd_dev, uint8_t interface) {
 80038bc:	b570      	push	{r4, r5, r6, lr}
 80038be:	4604      	mov	r4, r0
	//  debug_println("winusb_setup"); // debug_flush(); ////
	//  Send to host the USB Interface ID for the DFU Interface, which will support WinUSB.
	winusb_wcid.functions[0].bInterfaceNumber = interface;
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <winusb_setup+0x44>)
 80038c2:	7419      	strb	r1, [r3, #16]
	int status = aggregate_register_config_callback(usbd_dev, winusb_set_config);
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <winusb_setup+0x48>)
 80038c6:	f7ff fd07 	bl	80032d8 <aggregate_register_config_callback>
 80038ca:	4605      	mov	r5, r0

	//  Windows probes the compatible ID before setting the configuration, so also register the callback now.
	int status1 = aggregate_register_callback(
 80038cc:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <winusb_setup+0x4c>)
 80038ce:	2260      	movs	r2, #96	; 0x60
 80038d0:	2140      	movs	r1, #64	; 0x40
 80038d2:	4620      	mov	r0, r4
 80038d4:	f7ff fd20 	bl	8003318 <aggregate_register_callback>
 80038d8:	4606      	mov	r6, r0
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		winusb_control_vendor_request);
	int status2 = aggregate_register_callback(
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <winusb_setup+0x50>)
 80038dc:	221f      	movs	r2, #31
 80038de:	2100      	movs	r1, #0
 80038e0:	4620      	mov	r0, r4
 80038e2:	f7ff fd19 	bl	8003318 <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		winusb_descriptor_request);
	if (status < 0 || status1 < 0 || status2 < 0) { debug_println("*** winusb_setup failed"); debug_flush(); }
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	db03      	blt.n	80038f2 <winusb_setup+0x36>
 80038ea:	2e00      	cmp	r6, #0
 80038ec:	db01      	blt.n	80038f2 <winusb_setup+0x36>
 80038ee:	2800      	cmp	r0, #0
 80038f0:	da04      	bge.n	80038fc <winusb_setup+0x40>
 80038f2:	4807      	ldr	r0, [pc, #28]	; (8003910 <winusb_setup+0x54>)
 80038f4:	f7fe ffb6 	bl	8002864 <debug_println>
 80038f8:	f7fe ffdb 	bl	80028b2 <debug_flush>
}
 80038fc:	bd70      	pop	{r4, r5, r6, pc}
 80038fe:	bf00      	nop
 8003900:	200000fc 	.word	0x200000fc
 8003904:	08003775 	.word	0x08003775
 8003908:	080037fd 	.word	0x080037fd
 800390c:	0800379d 	.word	0x0800379d
 8003910:	08004df4 	.word	0x08004df4

08003914 <cdcacm_comm_cb>:
}

static void cdcacm_comm_cb(
  usbd_device *usbd_dev,
  uint8_t ep __attribute__((unused))
) {
 8003914:	b508      	push	{r3, lr}
	//  Callback for the comm channel.
	debug_println("comm");
 8003916:	4802      	ldr	r0, [pc, #8]	; (8003920 <cdcacm_comm_cb+0xc>)
 8003918:	f7fe ffa4 	bl	8002864 <debug_println>
}
 800391c:	bd08      	pop	{r3, pc}
 800391e:	bf00      	nop
 8003920:	08004e38 	.word	0x08004e38

08003924 <cdcacm_set_config>:

static void cdcacm_set_config(
  usbd_device *usbd_dev,
  uint16_t wValue __attribute__((unused))
) {
 8003924:	b510      	push	{r4, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	4604      	mov	r4, r0
	//  Callback for setting the USB configuration.
	//  From https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f3/stm32f3-discovery/usb_cdcacm/cdcacm.c
    //  debug_println("*** cdcacm_set_config"); ////
	usbd_ep_setup(usbd_dev, DATA_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, cdcacm_data_rx_cb);
 800392a:	4b13      	ldr	r3, [pc, #76]	; (8003978 <cdcacm_set_config+0x54>)
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	2340      	movs	r3, #64	; 0x40
 8003930:	2202      	movs	r2, #2
 8003932:	2103      	movs	r1, #3
 8003934:	f7fd ff0e 	bl	8001754 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, DATA_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, NULL);
 8003938:	2300      	movs	r3, #0
 800393a:	9300      	str	r3, [sp, #0]
 800393c:	2340      	movs	r3, #64	; 0x40
 800393e:	2202      	movs	r2, #2
 8003940:	2183      	movs	r1, #131	; 0x83
 8003942:	4620      	mov	r0, r4
 8003944:	f7fd ff06 	bl	8001754 <usbd_ep_setup>
	usbd_ep_setup(usbd_dev, COMM_IN, USB_ENDPOINT_ATTR_INTERRUPT, COMM_PACKET_SIZE, cdcacm_comm_cb);
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <cdcacm_set_config+0x58>)
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2310      	movs	r3, #16
 800394e:	2203      	movs	r2, #3
 8003950:	2184      	movs	r1, #132	; 0x84
 8003952:	4620      	mov	r0, r4
 8003954:	f7fd fefe 	bl	8001754 <usbd_ep_setup>
	int status = aggregate_register_callback(
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <cdcacm_set_config+0x5c>)
 800395a:	227f      	movs	r2, #127	; 0x7f
 800395c:	2121      	movs	r1, #33	; 0x21
 800395e:	4620      	mov	r0, r4
 8003960:	f7ff fcda 	bl	8003318 <aggregate_register_callback>
		usbd_dev,
		CONTROL_CALLBACK_TYPE,
		CONTROL_CALLBACK_MASK,
		(usbd_control_callback) cdcacm_control_request);
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 8003964:	2800      	cmp	r0, #0
 8003966:	db01      	blt.n	800396c <cdcacm_set_config+0x48>
}
 8003968:	b002      	add	sp, #8
 800396a:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** cdcacm_set_config failed"); debug_flush(); }
 800396c:	4805      	ldr	r0, [pc, #20]	; (8003984 <cdcacm_set_config+0x60>)
 800396e:	f7fe ff79 	bl	8002864 <debug_println>
 8003972:	f7fe ff9e 	bl	80028b2 <debug_flush>
}
 8003976:	e7f7      	b.n	8003968 <cdcacm_set_config+0x44>
 8003978:	08003a7d 	.word	0x08003a7d
 800397c:	08003915 	.word	0x08003915
 8003980:	08003989 	.word	0x08003989
 8003984:	08004e68 	.word	0x08004e68

08003988 <cdcacm_control_request>:
) {
 8003988:	b510      	push	{r4, lr}
 800398a:	461c      	mov	r4, r3
	switch (req->bRequest) {
 800398c:	784b      	ldrb	r3, [r1, #1]
 800398e:	2b21      	cmp	r3, #33	; 0x21
 8003990:	d007      	beq.n	80039a2 <cdcacm_control_request+0x1a>
 8003992:	2b22      	cmp	r3, #34	; 0x22
 8003994:	d003      	beq.n	800399e <cdcacm_control_request+0x16>
 8003996:	2b20      	cmp	r3, #32
 8003998:	d01d      	beq.n	80039d6 <cdcacm_control_request+0x4e>
	return USBD_REQ_NEXT_CALLBACK;  //  Hand over to next callback.
 800399a:	2002      	movs	r0, #2
 800399c:	e000      	b.n	80039a0 <cdcacm_control_request+0x18>
			return USBD_REQ_HANDLED;
 800399e:	2001      	movs	r0, #1
}
 80039a0:	bd10      	pop	{r4, pc}
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 80039a2:	8823      	ldrh	r3, [r4, #0]
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d905      	bls.n	80039b4 <cdcacm_control_request+0x2c>
			*buf = (uint8_t *) &line_coding;
 80039a8:	4b16      	ldr	r3, [pc, #88]	; (8003a04 <cdcacm_control_request+0x7c>)
 80039aa:	6013      	str	r3, [r2, #0]
			*len = sizeof(struct usb_cdc_line_coding);
 80039ac:	2307      	movs	r3, #7
 80039ae:	8023      	strh	r3, [r4, #0]
			return USBD_REQ_HANDLED;
 80039b0:	2001      	movs	r0, #1
 80039b2:	e7f5      	b.n	80039a0 <cdcacm_control_request+0x18>
				debug_print("*** cdcacm_control notsupp line_coding "); debug_print_unsigned(sizeof(struct usb_cdc_line_coding)); 
 80039b4:	4814      	ldr	r0, [pc, #80]	; (8003a08 <cdcacm_control_request+0x80>)
 80039b6:	f7fe ff81 	bl	80028bc <debug_print>
 80039ba:	2007      	movs	r0, #7
 80039bc:	f7fe ff8e 	bl	80028dc <debug_print_unsigned>
				debug_print(", len "); debug_print_unsigned(*len);
 80039c0:	4812      	ldr	r0, [pc, #72]	; (8003a0c <cdcacm_control_request+0x84>)
 80039c2:	f7fe ff7b 	bl	80028bc <debug_print>
 80039c6:	8820      	ldrh	r0, [r4, #0]
 80039c8:	f7fe ff88 	bl	80028dc <debug_print_unsigned>
				debug_println("");
 80039cc:	4810      	ldr	r0, [pc, #64]	; (8003a10 <cdcacm_control_request+0x88>)
 80039ce:	f7fe ff49 	bl	8002864 <debug_println>
				return USBD_REQ_NOTSUPP;
 80039d2:	2000      	movs	r0, #0
 80039d4:	e7e4      	b.n	80039a0 <cdcacm_control_request+0x18>
			if ( *len < sizeof(struct usb_cdc_line_coding) ) {
 80039d6:	8823      	ldrh	r3, [r4, #0]
 80039d8:	2b06      	cmp	r3, #6
 80039da:	d901      	bls.n	80039e0 <cdcacm_control_request+0x58>
			return USBD_REQ_HANDLED;
 80039dc:	2001      	movs	r0, #1
 80039de:	e7df      	b.n	80039a0 <cdcacm_control_request+0x18>
				debug_print("*** cdcacm_control notsupp line_coding "); debug_print_unsigned(sizeof(struct usb_cdc_line_coding)); 
 80039e0:	4809      	ldr	r0, [pc, #36]	; (8003a08 <cdcacm_control_request+0x80>)
 80039e2:	f7fe ff6b 	bl	80028bc <debug_print>
 80039e6:	2007      	movs	r0, #7
 80039e8:	f7fe ff78 	bl	80028dc <debug_print_unsigned>
				debug_print(", len "); debug_print_unsigned(*len);
 80039ec:	4807      	ldr	r0, [pc, #28]	; (8003a0c <cdcacm_control_request+0x84>)
 80039ee:	f7fe ff65 	bl	80028bc <debug_print>
 80039f2:	8820      	ldrh	r0, [r4, #0]
 80039f4:	f7fe ff72 	bl	80028dc <debug_print_unsigned>
				debug_println("");
 80039f8:	4805      	ldr	r0, [pc, #20]	; (8003a10 <cdcacm_control_request+0x88>)
 80039fa:	f7fe ff33 	bl	8002864 <debug_println>
				return USBD_REQ_NOTSUPP;
 80039fe:	2000      	movs	r0, #0
 8003a00:	e7ce      	b.n	80039a0 <cdcacm_control_request+0x18>
 8003a02:	bf00      	nop
 8003a04:	08004e88 	.word	0x08004e88
 8003a08:	08004e40 	.word	0x08004e40
 8003a0c:	08004818 	.word	0x08004818
 8003a10:	080046c4 	.word	0x080046c4

08003a14 <cdcadm_transmit>:
) {
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!connected || !usbd_dev || !buf) { return -1; }
 8003a16:	4b18      	ldr	r3, [pc, #96]	; (8003a78 <cdcadm_transmit+0x64>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b303      	cbz	r3, 8003a5e <cdcadm_transmit+0x4a>
 8003a1c:	4607      	mov	r7, r0
 8003a1e:	460e      	mov	r6, r1
 8003a20:	4614      	mov	r4, r2
 8003a22:	b1f8      	cbz	r0, 8003a64 <cdcadm_transmit+0x50>
 8003a24:	b309      	cbz	r1, 8003a6a <cdcadm_transmit+0x56>
	if (len == 0) { return 0; }
 8003a26:	b31a      	cbz	r2, 8003a70 <cdcadm_transmit+0x5c>
	if (len <= MAX_USB_PACKET_SIZE) {
 8003a28:	2a40      	cmp	r2, #64	; 0x40
 8003a2a:	d910      	bls.n	8003a4e <cdcadm_transmit+0x3a>
	while (len > 0) {
 8003a2c:	b1ac      	cbz	r4, 8003a5a <cdcadm_transmit+0x46>
		uint16_t tx_len = (len > MAX_USB_PACKET_SIZE) ? MAX_USB_PACKET_SIZE : len;
 8003a2e:	4625      	mov	r5, r4
 8003a30:	2c40      	cmp	r4, #64	; 0x40
 8003a32:	bf28      	it	cs
 8003a34:	2540      	movcs	r5, #64	; 0x40
		len = len - tx_len;
 8003a36:	1b64      	subs	r4, r4, r5
 8003a38:	b2a4      	uxth	r4, r4
		uint16_t status = usbd_ep_write_packet(usbd_dev, DATA_IN, buf, tx_len);  //  Returns the bytes sent.
 8003a3a:	462b      	mov	r3, r5
 8003a3c:	4632      	mov	r2, r6
 8003a3e:	2183      	movs	r1, #131	; 0x83
 8003a40:	4638      	mov	r0, r7
 8003a42:	f7fd fea9 	bl	8001798 <usbd_ep_write_packet>
		if (status != tx_len) { return 0; }  //  Stop if error.
 8003a46:	4285      	cmp	r5, r0
 8003a48:	d114      	bne.n	8003a74 <cdcadm_transmit+0x60>
		buf = &buf[tx_len];
 8003a4a:	442e      	add	r6, r5
 8003a4c:	e7ee      	b.n	8003a2c <cdcadm_transmit+0x18>
		return usbd_ep_write_packet(usbd_dev, DATA_IN, buf, len);  //  Returns the bytes sent.
 8003a4e:	4613      	mov	r3, r2
 8003a50:	460a      	mov	r2, r1
 8003a52:	2183      	movs	r1, #131	; 0x83
 8003a54:	f7fd fea0 	bl	8001798 <usbd_ep_write_packet>
 8003a58:	e00b      	b.n	8003a72 <cdcadm_transmit+0x5e>
	return len;
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	e009      	b.n	8003a72 <cdcadm_transmit+0x5e>
	if (!connected || !usbd_dev || !buf) { return -1; }
 8003a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a62:	e006      	b.n	8003a72 <cdcadm_transmit+0x5e>
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a68:	e003      	b.n	8003a72 <cdcadm_transmit+0x5e>
 8003a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a6e:	e000      	b.n	8003a72 <cdcadm_transmit+0x5e>
	if (len == 0) { return 0; }
 8003a70:	2000      	movs	r0, #0
}
 8003a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (status != tx_len) { return 0; }  //  Stop if error.
 8003a74:	2000      	movs	r0, #0
 8003a76:	e7fc      	b.n	8003a72 <cdcadm_transmit+0x5e>
 8003a78:	20000731 	.word	0x20000731

08003a7c <cdcacm_data_rx_cb>:
) {
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4605      	mov	r5, r0
	uint16_t len = usbd_ep_read_packet(usbd_dev, DATA_OUT, rx_buf, MAX_USB_PACKET_SIZE);
 8003a80:	2340      	movs	r3, #64	; 0x40
 8003a82:	4a0e      	ldr	r2, [pc, #56]	; (8003abc <cdcacm_data_rx_cb+0x40>)
 8003a84:	2103      	movs	r1, #3
 8003a86:	f7fd fe8d 	bl	80017a4 <usbd_ep_read_packet>
    if (len == 0) { return; }
 8003a8a:	b1b0      	cbz	r0, 8003aba <cdcacm_data_rx_cb+0x3e>
 8003a8c:	4604      	mov	r4, r0
    uint16_t pos = (len < MAX_USB_PACKET_SIZE) ? len : MAX_USB_PACKET_SIZE;
 8003a8e:	2840      	cmp	r0, #64	; 0x40
 8003a90:	bf28      	it	cs
 8003a92:	2440      	movcs	r4, #64	; 0x40
 8003a94:	b2a4      	uxth	r4, r4
    rx_buf[pos] = 0;
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <cdcacm_data_rx_cb+0x40>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	551a      	strb	r2, [r3, r4]
	if (!connected) {
 8003a9c:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <cdcacm_data_rx_cb+0x44>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	b933      	cbnz	r3, 8003ab0 <cdcacm_data_rx_cb+0x34>
		connected = 1;
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <cdcacm_data_rx_cb+0x44>)
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	701a      	strb	r2, [r3, #0]
		if (connected_func) { connected_func(); }
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <cdcacm_data_rx_cb+0x48>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	b103      	cbz	r3, 8003ab0 <cdcacm_data_rx_cb+0x34>
 8003aae:	4798      	blx	r3
	cdcadm_transmit(usbd_dev, rx_buf, pos);  //  Echo the packet.	
 8003ab0:	4622      	mov	r2, r4
 8003ab2:	4902      	ldr	r1, [pc, #8]	; (8003abc <cdcacm_data_rx_cb+0x40>)
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f7ff ffad 	bl	8003a14 <cdcadm_transmit>
}
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	2000052c 	.word	0x2000052c
 8003ac0:	20000731 	.word	0x20000731
 8003ac4:	20000528 	.word	0x20000528

08003ac8 <cdc_setup>:

void cdc_setup(usbd_device* usbd_dev, connected_callback *connected_func0) {
 8003ac8:	b508      	push	{r3, lr}
	//  Setup the USB interface.
    //  debug_println("*** cdc_setup"); ////
	connected_func = connected_func0;
 8003aca:	4b07      	ldr	r3, [pc, #28]	; (8003ae8 <cdc_setup+0x20>)
 8003acc:	6019      	str	r1, [r3, #0]
	int status = aggregate_register_config_callback(usbd_dev, cdcacm_set_config);
 8003ace:	4907      	ldr	r1, [pc, #28]	; (8003aec <cdc_setup+0x24>)
 8003ad0:	f7ff fc02 	bl	80032d8 <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	db00      	blt.n	8003ada <cdc_setup+0x12>
}
 8003ad8:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** cdc_setup failed"); debug_flush(); }
 8003ada:	4805      	ldr	r0, [pc, #20]	; (8003af0 <cdc_setup+0x28>)
 8003adc:	f7fe fec2 	bl	8002864 <debug_println>
 8003ae0:	f7fe fee7 	bl	80028b2 <debug_flush>
}
 8003ae4:	e7f8      	b.n	8003ad8 <cdc_setup+0x10>
 8003ae6:	bf00      	nop
 8003ae8:	20000528 	.word	0x20000528
 8003aec:	08003925 	.word	0x08003925
 8003af0:	08004e20 	.word	0x08004e20

08003af4 <assert>:
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
    if (status < 0) { debug_println("*** hf2_setup failed"); }
}

static void assert(bool assertion, const char *msg) {
    if (assertion) { return; }
 8003af4:	b100      	cbz	r0, 8003af8 <assert+0x4>
 8003af6:	4770      	bx	lr
static void assert(bool assertion, const char *msg) {
 8003af8:	b510      	push	{r4, lr}
 8003afa:	460c      	mov	r4, r1
    debug_print("*** ERROR: "); debug_println(msg); debug_force_flush();
 8003afc:	4804      	ldr	r0, [pc, #16]	; (8003b10 <assert+0x1c>)
 8003afe:	f7fe fedd 	bl	80028bc <debug_print>
 8003b02:	4620      	mov	r0, r4
 8003b04:	f7fe feae 	bl	8002864 <debug_println>
 8003b08:	f7fe fe3e 	bl	8002788 <debug_force_flush>
}
 8003b0c:	bd10      	pop	{r4, pc}
 8003b0e:	bf00      	nop
 8003b10:	08004e90 	.word	0x08004e90

08003b14 <hf2_set_config>:
static void hf2_set_config(usbd_device *usbd_dev, uint16_t wValue) {  (void)wValue;
 8003b14:	b510      	push	{r4, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	4604      	mov	r4, r0
    LOG("hf2 set config");
 8003b1a:	480b      	ldr	r0, [pc, #44]	; (8003b48 <hf2_set_config+0x34>)
 8003b1c:	f7fe fea2 	bl	8002864 <debug_println>
    debug_force_flush(); ////
 8003b20:	f7fe fe32 	bl	8002788 <debug_force_flush>
    usbd_ep_setup(usbd_dev, HF2_IN, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_tx_cb);
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <hf2_set_config+0x38>)
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	2340      	movs	r3, #64	; 0x40
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	2182      	movs	r1, #130	; 0x82
 8003b2e:	4620      	mov	r0, r4
 8003b30:	f7fd fe10 	bl	8001754 <usbd_ep_setup>
    usbd_ep_setup(usbd_dev, HF2_OUT, USB_ENDPOINT_ATTR_BULK, MAX_USB_PACKET_SIZE, hf2_data_rx_cb);
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <hf2_set_config+0x3c>)
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	2340      	movs	r3, #64	; 0x40
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f7fd fe08 	bl	8001754 <usbd_ep_setup>
}
 8003b44:	b002      	add	sp, #8
 8003b46:	bd10      	pop	{r4, pc}
 8003b48:	0800506c 	.word	0x0800506c
 8003b4c:	08004211 	.word	0x08004211
 8003b50:	0800414d 	.word	0x0800414d

08003b54 <pokeSend>:
    uint8_t dataToSendFlag) {
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	4605      	mov	r5, r0
 8003b5a:	9101      	str	r1, [sp, #4]
 8003b5c:	4616      	mov	r6, r2
    memset(tx_buf, 0, sizeof(tx_buf));
 8003b5e:	2240      	movs	r2, #64	; 0x40
 8003b60:	2100      	movs	r1, #0
 8003b62:	4826      	ldr	r0, [pc, #152]	; (8003bfc <pokeSend+0xa8>)
 8003b64:	f7fe fd2c 	bl	80025c0 <memset>
	__asm__("CPSID I\n");
 8003b68:	b672      	cpsid	i
    if (dataToSendLength) {
 8003b6a:	9b01      	ldr	r3, [sp, #4]
 8003b6c:	b1e3      	cbz	r3, 8003ba8 <pokeSend+0x54>
        int flag = dataToSendFlag;
 8003b6e:	4633      	mov	r3, r6
        if ((int) dataToSendLength < s) {
 8003b70:	9a01      	ldr	r2, [sp, #4]
 8003b72:	2a3e      	cmp	r2, #62	; 0x3e
 8003b74:	dc11      	bgt.n	8003b9a <pokeSend+0x46>
            s = dataToSendLength;
 8003b76:	9c01      	ldr	r4, [sp, #4]
        tx_buf[0] = flag | s;
 8003b78:	4323      	orrs	r3, r4
 8003b7a:	4820      	ldr	r0, [pc, #128]	; (8003bfc <pokeSend+0xa8>)
 8003b7c:	f800 3b01 	strb.w	r3, [r0], #1
        memcpy(tx_buf + 1, dataToSend, s);
 8003b80:	4622      	mov	r2, r4
 8003b82:	4629      	mov	r1, r5
 8003b84:	f7fe fd0f 	bl	80025a6 <memcpy>
        dataToSend += s;
 8003b88:	4425      	add	r5, r4
        dataToSendLength -= s;
 8003b8a:	9b01      	ldr	r3, [sp, #4]
 8003b8c:	1b1b      	subs	r3, r3, r4
 8003b8e:	9301      	str	r3, [sp, #4]
        sendIt = true;
 8003b90:	2301      	movs	r3, #1
	__asm__("CPSIE I\n");
 8003b92:	b662      	cpsie	i
    if (sendIt) {
 8003b94:	b95b      	cbnz	r3, 8003bae <pokeSend+0x5a>
}
 8003b96:	b002      	add	sp, #8
 8003b98:	bd70      	pop	{r4, r5, r6, pc}
            if (flag == HF2_FLAG_CMDPKT_LAST)
 8003b9a:	2e40      	cmp	r6, #64	; 0x40
 8003b9c:	d001      	beq.n	8003ba2 <pokeSend+0x4e>
    int s = sizeof(tx_buf) - 1;  //  63
 8003b9e:	243f      	movs	r4, #63	; 0x3f
 8003ba0:	e7ea      	b.n	8003b78 <pokeSend+0x24>
                flag = HF2_FLAG_CMDPKT_BODY;
 8003ba2:	2300      	movs	r3, #0
    int s = sizeof(tx_buf) - 1;  //  63
 8003ba4:	243f      	movs	r4, #63	; 0x3f
 8003ba6:	e7e7      	b.n	8003b78 <pokeSend+0x24>
 8003ba8:	243f      	movs	r4, #63	; 0x3f
    bool sendIt = false;
 8003baa:	2300      	movs	r3, #0
 8003bac:	e7f1      	b.n	8003b92 <pokeSend+0x3e>
        usbd_ep_write_packet(_usbd_dev, HF2_IN, tx_buf, len);
 8003bae:	2340      	movs	r3, #64	; 0x40
 8003bb0:	4a12      	ldr	r2, [pc, #72]	; (8003bfc <pokeSend+0xa8>)
 8003bb2:	2182      	movs	r1, #130	; 0x82
 8003bb4:	4812      	ldr	r0, [pc, #72]	; (8003c00 <pokeSend+0xac>)
 8003bb6:	6800      	ldr	r0, [r0, #0]
 8003bb8:	f7fd fdee 	bl	8001798 <usbd_ep_write_packet>
        if (dataToSendLength > 0) {
 8003bbc:	9b01      	ldr	r3, [sp, #4]
 8003bbe:	b19b      	cbz	r3, 8003be8 <pokeSend+0x94>
            remDataToSend = dataToSend;
 8003bc0:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <pokeSend+0xb0>)
 8003bc2:	601d      	str	r5, [r3, #0]
            remDataToSendLength = dataToSendLength;
 8003bc4:	9a01      	ldr	r2, [sp, #4]
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <pokeSend+0xb4>)
 8003bc8:	601a      	str	r2, [r3, #0]
            remDataToSendFlag = dataToSendFlag;
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <pokeSend+0xb8>)
 8003bcc:	701e      	strb	r6, [r3, #0]
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 8003bce:	2c02      	cmp	r4, #2
 8003bd0:	dd0e      	ble.n	8003bf0 <pokeSend+0x9c>
        else { debug_print("hf2 << "); debug_printhex(s + 1); debug_println(""); }
 8003bd2:	480f      	ldr	r0, [pc, #60]	; (8003c10 <pokeSend+0xbc>)
 8003bd4:	f7fe fe72 	bl	80028bc <debug_print>
 8003bd8:	1c60      	adds	r0, r4, #1
 8003bda:	b2c0      	uxtb	r0, r0
 8003bdc:	f7fe fe82 	bl	80028e4 <debug_printhex>
 8003be0:	480c      	ldr	r0, [pc, #48]	; (8003c14 <pokeSend+0xc0>)
 8003be2:	f7fe fe3f 	bl	8002864 <debug_println>
}
 8003be6:	e7d6      	b.n	8003b96 <pokeSend+0x42>
            remDataToSendLength = 0;  //  No more data to send.
 8003be8:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <pokeSend+0xb4>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	e7ee      	b.n	8003bce <pokeSend+0x7a>
        if (s < 3) { dump_buffer("hf2 <<", tx_buf, s + 1); }
 8003bf0:	1c62      	adds	r2, r4, #1
 8003bf2:	4902      	ldr	r1, [pc, #8]	; (8003bfc <pokeSend+0xa8>)
 8003bf4:	4808      	ldr	r0, [pc, #32]	; (8003c18 <pokeSend+0xc4>)
 8003bf6:	f7ff fbd1 	bl	800339c <dump_buffer>
 8003bfa:	e7cc      	b.n	8003b96 <pokeSend+0x42>
 8003bfc:	200005e0 	.word	0x200005e0
 8003c00:	20000570 	.word	0x20000570
 8003c04:	20000594 	.word	0x20000594
 8003c08:	20000598 	.word	0x20000598
 8003c0c:	20000734 	.word	0x20000734
 8003c10:	080050b4 	.word	0x080050b4
 8003c14:	080046c4 	.word	0x080046c4
 8003c18:	080050ac 	.word	0x080050ac

08003c1c <handle_flash_write>:
static void handle_flash_write(HF2_Buffer *pkt) {
 8003c1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c20:	4605      	mov	r5, r0
    int sz = pkt->size;
 8003c22:	8806      	ldrh	r6, [r0, #0]
    uint32_t target_addr = cmd->write_flash_page.target_addr;
 8003c24:	f8d0 400a 	ldr.w	r4, [r0, #10]
    const uint8_t *data = (const uint8_t *) cmd->write_flash_page.data;
 8003c28:	f100 070e 	add.w	r7, r0, #14
    const char *valid = VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE) ? " " : " !!! ";
 8003c2c:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 8003c30:	d307      	bcc.n	8003c42 <handle_flash_write+0x26>
 8003c32:	f504 7280 	add.w	r2, r4, #256	; 0x100
 8003c36:	4ba0      	ldr	r3, [pc, #640]	; (8003eb8 <handle_flash_write+0x29c>)
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d979      	bls.n	8003d30 <handle_flash_write+0x114>
 8003c3c:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8003f30 <handle_flash_write+0x314>
 8003c40:	e001      	b.n	8003c46 <handle_flash_write+0x2a>
 8003c42:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8003f30 <handle_flash_write+0x314>
    cmdId = cmd->command_id;
 8003c46:	f8d5 3002 	ldr.w	r3, [r5, #2]
 8003c4a:	4a9c      	ldr	r2, [pc, #624]	; (8003ebc <handle_flash_write+0x2a0>)
 8003c4c:	6013      	str	r3, [r2, #0]
    if (cmdId != prevCmdId) { debug_print("hf2 >> flash "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }  ////
 8003c4e:	4a9c      	ldr	r2, [pc, #624]	; (8003ec0 <handle_flash_write+0x2a4>)
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d06f      	beq.n	8003d36 <handle_flash_write+0x11a>
 8003c56:	489b      	ldr	r0, [pc, #620]	; (8003ec4 <handle_flash_write+0x2a8>)
 8003c58:	f7fe fe30 	bl	80028bc <debug_print>
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	f7fe fe79 	bl	8002954 <debug_printhex_unsigned>
 8003c62:	4640      	mov	r0, r8
 8003c64:	f7fe fe2a 	bl	80028bc <debug_print>
    if (flush_count++) { debug_flush(); }
 8003c68:	4a97      	ldr	r2, [pc, #604]	; (8003ec8 <handle_flash_write+0x2ac>)
 8003c6a:	7813      	ldrb	r3, [r2, #0]
 8003c6c:	1c59      	adds	r1, r3, #1
 8003c6e:	7011      	strb	r1, [r2, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d16a      	bne.n	8003d4a <handle_flash_write+0x12e>
    prevCmdId = cmdId; 
 8003c74:	4b91      	ldr	r3, [pc, #580]	; (8003ebc <handle_flash_write+0x2a0>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4b91      	ldr	r3, [pc, #580]	; (8003ec0 <handle_flash_write+0x2a4>)
 8003c7a:	601a      	str	r2, [r3, #0]
    send_hf2_response(pkt, 0);
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	4628      	mov	r0, r5
 8003c80:	f000 fc8a 	bl	8004598 <send_hf2_response>
    const uint32_t old_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);  //  Bootloader will be staged here for Baseloader.
 8003c84:	4b91      	ldr	r3, [pc, #580]	; (8003ecc <handle_flash_write+0x2b0>)
 8003c86:	691d      	ldr	r5, [r3, #16]
 8003c88:	f425 757f 	bic.w	r5, r5, #1020	; 0x3fc
 8003c8c:	f025 0503 	bic.w	r5, r5, #3
    const uint32_t old_app_start_offset = old_app_start - FLASH_BASE;  //  When writing Bootloader, shift by this offset so we don't overwrite the existing Bootloader.
 8003c90:	f105 4878 	add.w	r8, r5, #4160749568	; 0xf8000000
    if (new_app_start == 0 || target_addr == FLASH_BASE) {
 8003c94:	4b8e      	ldr	r3, [pc, #568]	; (8003ed0 <handle_flash_write+0x2b4>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	b113      	cbz	r3, 8003ca0 <handle_flash_write+0x84>
 8003c9a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 8003c9e:	d118      	bne.n	8003cd2 <handle_flash_write+0xb6>
        debug_println("find vector..."); debug_force_flush();
 8003ca0:	488c      	ldr	r0, [pc, #560]	; (8003ed4 <handle_flash_write+0x2b8>)
 8003ca2:	f7fe fddf 	bl	8002864 <debug_println>
 8003ca6:	f7fe fd6f 	bl	8002788 <debug_force_flush>
        new_base_vector = NULL;
 8003caa:	4b8b      	ldr	r3, [pc, #556]	; (8003ed8 <handle_flash_write+0x2bc>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
        new_app_start = (uint32_t) FLASH_ADDRESS(base_vector_table.application);
 8003cb0:	4986      	ldr	r1, [pc, #536]	; (8003ecc <handle_flash_write+0x2b0>)
 8003cb2:	690b      	ldr	r3, [r1, #16]
 8003cb4:	f423 727f 	bic.w	r2, r3, #1020	; 0x3fc
 8003cb8:	f022 0203 	bic.w	r2, r2, #3
 8003cbc:	4884      	ldr	r0, [pc, #528]	; (8003ed0 <handle_flash_write+0x2b4>)
 8003cbe:	6002      	str	r2, [r0, #0]
        new_bootloader_size = (uint32_t) base_vector_table.application - FLASH_BASE;
 8003cc0:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8003cc4:	4a85      	ldr	r2, [pc, #532]	; (8003edc <handle_flash_write+0x2c0>)
 8003cc6:	6013      	str	r3, [r2, #0]
        new_baseloader_size = (uint32_t) base_vector_table.baseloader_end - FLASH_BASE;
 8003cc8:	68cb      	ldr	r3, [r1, #12]
 8003cca:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8003cce:	4a84      	ldr	r2, [pc, #528]	; (8003ee0 <handle_flash_write+0x2c4>)
 8003cd0:	6013      	str	r3, [r2, #0]
    if (!new_base_vector && IS_VALID_BASE_VECTOR_TABLE(old_app_start)) {
 8003cd2:	4b81      	ldr	r3, [pc, #516]	; (8003ed8 <handle_flash_write+0x2bc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d03a      	beq.n	8003d50 <handle_flash_write+0x134>
    if (target_addr < new_app_start) {  //  If writing Bootloader Page...
 8003cda:	4b7d      	ldr	r3, [pc, #500]	; (8003ed0 <handle_flash_write+0x2b4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	42a3      	cmp	r3, r4
 8003ce0:	d975      	bls.n	8003dce <handle_flash_write+0x1b2>
        target_addr += old_app_start_offset;
 8003ce2:	4444      	add	r4, r8
        if (!VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE)) { debug_print("*** ERROR: Invalid addr "); debug_printhex_unsigned(target_addr); debug_println(""); debug_force_flush(); }
 8003ce4:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 8003ce8:	d304      	bcc.n	8003cf4 <handle_flash_write+0xd8>
 8003cea:	f504 7280 	add.w	r2, r4, #256	; 0x100
 8003cee:	4b72      	ldr	r3, [pc, #456]	; (8003eb8 <handle_flash_write+0x29c>)
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d90a      	bls.n	8003d0a <handle_flash_write+0xee>
 8003cf4:	487b      	ldr	r0, [pc, #492]	; (8003ee4 <handle_flash_write+0x2c8>)
 8003cf6:	f7fe fde1 	bl	80028bc <debug_print>
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f7fe fe2a 	bl	8002954 <debug_printhex_unsigned>
 8003d00:	4879      	ldr	r0, [pc, #484]	; (8003ee8 <handle_flash_write+0x2cc>)
 8003d02:	f7fe fdaf 	bl	8002864 <debug_println>
 8003d06:	f7fe fd3f 	bl	8002788 <debug_force_flush>
    checkDataSize(write_flash_page, HF2_PAGE_SIZE);
 8003d0a:	4978      	ldr	r1, [pc, #480]	; (8003eec <handle_flash_write+0x2d0>)
 8003d0c:	f5b6 7f86 	cmp.w	r6, #268	; 0x10c
 8003d10:	bf14      	ite	ne
 8003d12:	2000      	movne	r0, #0
 8003d14:	2001      	moveq	r0, #1
 8003d16:	f7ff feed 	bl	8003af4 <assert>
    if (VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE)) {
 8003d1a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 8003d1e:	d305      	bcc.n	8003d2c <handle_flash_write+0x110>
 8003d20:	f504 7280 	add.w	r2, r4, #256	; 0x100
 8003d24:	4b64      	ldr	r3, [pc, #400]	; (8003eb8 <handle_flash_write+0x29c>)
 8003d26:	429a      	cmp	r2, r3
 8003d28:	f240 80bf 	bls.w	8003eaa <handle_flash_write+0x28e>
}
 8003d2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char *valid = VALID_FLASH_ADDR(target_addr, HF2_PAGE_SIZE) ? " " : " !!! ";
 8003d30:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8003f34 <handle_flash_write+0x318>
 8003d34:	e787      	b.n	8003c46 <handle_flash_write+0x2a>
    else { debug_print(">> "); debug_printhex_unsigned((size_t) target_addr); debug_print(valid); }
 8003d36:	486e      	ldr	r0, [pc, #440]	; (8003ef0 <handle_flash_write+0x2d4>)
 8003d38:	f7fe fdc0 	bl	80028bc <debug_print>
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	f7fe fe09 	bl	8002954 <debug_printhex_unsigned>
 8003d42:	4640      	mov	r0, r8
 8003d44:	f7fe fdba 	bl	80028bc <debug_print>
 8003d48:	e78e      	b.n	8003c68 <handle_flash_write+0x4c>
    if (flush_count++) { debug_flush(); }
 8003d4a:	f7fe fdb2 	bl	80028b2 <debug_flush>
 8003d4e:	e791      	b.n	8003c74 <handle_flash_write+0x58>
    if (!new_base_vector && IS_VALID_BASE_VECTOR_TABLE(old_app_start)) {
 8003d50:	4b5e      	ldr	r3, [pc, #376]	; (8003ecc <handle_flash_write+0x2b0>)
 8003d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d56:	432b      	orrs	r3, r5
 8003d58:	6819      	ldr	r1, [r3, #0]
 8003d5a:	4a66      	ldr	r2, [pc, #408]	; (8003ef4 <handle_flash_write+0x2d8>)
 8003d5c:	4291      	cmp	r1, r2
 8003d5e:	d1bc      	bne.n	8003cda <handle_flash_write+0xbe>
 8003d60:	6959      	ldr	r1, [r3, #20]
 8003d62:	4a65      	ldr	r2, [pc, #404]	; (8003ef8 <handle_flash_write+0x2dc>)
 8003d64:	4291      	cmp	r1, r2
 8003d66:	d1b8      	bne.n	8003cda <handle_flash_write+0xbe>
        new_base_vector = BASE_VECTOR_TABLE(old_app_start);
 8003d68:	4a5b      	ldr	r2, [pc, #364]	; (8003ed8 <handle_flash_write+0x2bc>)
 8003d6a:	6013      	str	r3, [r2, #0]
        new_app_start = (uint32_t) FLASH_ADDRESS(new_base_vector->application);
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8003d72:	f022 0203 	bic.w	r2, r2, #3
 8003d76:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8003ed0 <handle_flash_write+0x2b4>
 8003d7a:	f8c9 2000 	str.w	r2, [r9]
        new_bootloader_size = new_app_start - FLASH_BASE;
 8003d7e:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 8003d82:	f8df a158 	ldr.w	sl, [pc, #344]	; 8003edc <handle_flash_write+0x2c0>
 8003d86:	f8ca 2000 	str.w	r2, [sl]
        new_baseloader_size = (uint32_t) (new_base_vector->baseloader_end) - FLASH_BASE;
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8003d90:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8003ee0 <handle_flash_write+0x2c4>
 8003d94:	f8cb 3000 	str.w	r3, [fp]
        debug_print("found vector, app "); debug_printhex_unsigned(new_app_start);
 8003d98:	4858      	ldr	r0, [pc, #352]	; (8003efc <handle_flash_write+0x2e0>)
 8003d9a:	f7fe fd8f 	bl	80028bc <debug_print>
 8003d9e:	f8d9 0000 	ldr.w	r0, [r9]
 8003da2:	f7fe fdd7 	bl	8002954 <debug_printhex_unsigned>
        debug_print(", boot size "); debug_printhex_unsigned(new_bootloader_size);
 8003da6:	4856      	ldr	r0, [pc, #344]	; (8003f00 <handle_flash_write+0x2e4>)
 8003da8:	f7fe fd88 	bl	80028bc <debug_print>
 8003dac:	f8da 0000 	ldr.w	r0, [sl]
 8003db0:	f7fe fdd0 	bl	8002954 <debug_printhex_unsigned>
        debug_print(", base size "); debug_printhex_unsigned(new_baseloader_size);
 8003db4:	4853      	ldr	r0, [pc, #332]	; (8003f04 <handle_flash_write+0x2e8>)
 8003db6:	f7fe fd81 	bl	80028bc <debug_print>
 8003dba:	f8db 0000 	ldr.w	r0, [fp]
 8003dbe:	f7fe fdc9 	bl	8002954 <debug_printhex_unsigned>
        debug_println(""); debug_force_flush();
 8003dc2:	4849      	ldr	r0, [pc, #292]	; (8003ee8 <handle_flash_write+0x2cc>)
 8003dc4:	f7fe fd4e 	bl	8002864 <debug_println>
 8003dc8:	f7fe fcde 	bl	8002788 <debug_force_flush>
 8003dcc:	e785      	b.n	8003cda <handle_flash_write+0xbe>
    }  else if (new_base_vector && (target_addr == new_app_start)) {  //  When we are finished writing the Bootloader and now writing first Application Page...
 8003dce:	4a42      	ldr	r2, [pc, #264]	; (8003ed8 <handle_flash_write+0x2bc>)
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	2a00      	cmp	r2, #0
 8003dd4:	d099      	beq.n	8003d0a <handle_flash_write+0xee>
 8003dd6:	42a3      	cmp	r3, r4
 8003dd8:	d197      	bne.n	8003d0a <handle_flash_write+0xee>
        debug_println("wrote bootloader"); debug_force_flush();
 8003dda:	484b      	ldr	r0, [pc, #300]	; (8003f08 <handle_flash_write+0x2ec>)
 8003ddc:	f7fe fd42 	bl	8002864 <debug_println>
 8003de0:	f7fe fcd2 	bl	8002788 <debug_force_flush>
        flash_flush();  //  Flush the last Bootloader page.
 8003de4:	f000 fb02 	bl	80043ec <flash_flush>
        debug_println("compare bootloader..."); debug_force_flush();
 8003de8:	4848      	ldr	r0, [pc, #288]	; (8003f0c <handle_flash_write+0x2f0>)
 8003dea:	f7fe fd3b 	bl	8002864 <debug_println>
 8003dee:	f7fe fccb 	bl	8002788 <debug_force_flush>
        int bootloader_changed = memcmp((void *) old_app_start, (void *) FLASH_BASE, new_bootloader_size);
 8003df2:	4b3a      	ldr	r3, [pc, #232]	; (8003edc <handle_flash_write+0x2c0>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f7fe fbc3 	bl	8002586 <memcmp>
        if (bootloader_changed) {
 8003e00:	b990      	cbnz	r0, 8003e28 <handle_flash_write+0x20c>
        debug_print("bootloader identical "); debug_printhex_unsigned(old_app_start);
 8003e02:	4843      	ldr	r0, [pc, #268]	; (8003f10 <handle_flash_write+0x2f4>)
 8003e04:	f7fe fd5a 	bl	80028bc <debug_print>
 8003e08:	4628      	mov	r0, r5
 8003e0a:	f7fe fda3 	bl	8002954 <debug_printhex_unsigned>
        debug_print(", size "); debug_printhex_unsigned(new_bootloader_size);
 8003e0e:	4841      	ldr	r0, [pc, #260]	; (8003f14 <handle_flash_write+0x2f8>)
 8003e10:	f7fe fd54 	bl	80028bc <debug_print>
 8003e14:	4b31      	ldr	r3, [pc, #196]	; (8003edc <handle_flash_write+0x2c0>)
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	f7fe fd9c 	bl	8002954 <debug_printhex_unsigned>
        debug_println(""); debug_force_flush();
 8003e1c:	4832      	ldr	r0, [pc, #200]	; (8003ee8 <handle_flash_write+0x2cc>)
 8003e1e:	f7fe fd21 	bl	8002864 <debug_println>
 8003e22:	f7fe fcb1 	bl	8002788 <debug_force_flush>
 8003e26:	e770      	b.n	8003d0a <handle_flash_write+0xee>
            debug_println("bootloader changed"); debug_force_flush();
 8003e28:	483b      	ldr	r0, [pc, #236]	; (8003f18 <handle_flash_write+0x2fc>)
 8003e2a:	f7fe fd1b 	bl	8002864 <debug_println>
 8003e2e:	f7fe fcab 	bl	8002788 <debug_force_flush>
            uint32_t new_baseloader_addr = target_addr + old_app_start_offset;
 8003e32:	4444      	add	r4, r8
            debug_print("copy baseloader to "); debug_printhex_unsigned(new_baseloader_addr); 
 8003e34:	4839      	ldr	r0, [pc, #228]	; (8003f1c <handle_flash_write+0x300>)
 8003e36:	f7fe fd41 	bl	80028bc <debug_print>
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f7fe fd8a 	bl	8002954 <debug_printhex_unsigned>
            debug_print(", size "); debug_printhex_unsigned(new_baseloader_size);
 8003e40:	4834      	ldr	r0, [pc, #208]	; (8003f14 <handle_flash_write+0x2f8>)
 8003e42:	f7fe fd3b 	bl	80028bc <debug_print>
 8003e46:	4e26      	ldr	r6, [pc, #152]	; (8003ee0 <handle_flash_write+0x2c4>)
 8003e48:	6830      	ldr	r0, [r6, #0]
 8003e4a:	f7fe fd83 	bl	8002954 <debug_printhex_unsigned>
            debug_println(""); debug_force_flush();
 8003e4e:	4f26      	ldr	r7, [pc, #152]	; (8003ee8 <handle_flash_write+0x2cc>)
 8003e50:	4638      	mov	r0, r7
 8003e52:	f7fe fd07 	bl	8002864 <debug_println>
 8003e56:	f7fe fc97 	bl	8002788 <debug_force_flush>
            flash_write(new_baseloader_addr, (const uint8_t *) old_app_start, new_baseloader_size);
 8003e5a:	6832      	ldr	r2, [r6, #0]
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f000 fb12 	bl	8004488 <flash_write>
            flash_flush();
 8003e64:	f000 fac2 	bl	80043ec <flash_flush>
            debug_print("restart to baseloader "); debug_printhex_unsigned(new_baseloader_addr);
 8003e68:	482d      	ldr	r0, [pc, #180]	; (8003f20 <handle_flash_write+0x304>)
 8003e6a:	f7fe fd27 	bl	80028bc <debug_print>
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f7fe fd70 	bl	8002954 <debug_printhex_unsigned>
            debug_print(", baselen "); debug_printhex_unsigned(new_baseloader_size);
 8003e74:	482b      	ldr	r0, [pc, #172]	; (8003f24 <handle_flash_write+0x308>)
 8003e76:	f7fe fd21 	bl	80028bc <debug_print>
 8003e7a:	6830      	ldr	r0, [r6, #0]
 8003e7c:	f7fe fd6a 	bl	8002954 <debug_printhex_unsigned>
            debug_print(", oldapp "); debug_printhex_unsigned(old_app_start);
 8003e80:	4829      	ldr	r0, [pc, #164]	; (8003f28 <handle_flash_write+0x30c>)
 8003e82:	f7fe fd1b 	bl	80028bc <debug_print>
 8003e86:	4628      	mov	r0, r5
 8003e88:	f7fe fd64 	bl	8002954 <debug_printhex_unsigned>
            debug_print(", bootlen "); debug_printhex_unsigned(new_bootloader_size);
 8003e8c:	4827      	ldr	r0, [pc, #156]	; (8003f2c <handle_flash_write+0x310>)
 8003e8e:	f7fe fd15 	bl	80028bc <debug_print>
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <handle_flash_write+0x2c0>)
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	f7fe fd5d 	bl	8002954 <debug_printhex_unsigned>
            debug_println(""); debug_force_flush();
 8003e9a:	4638      	mov	r0, r7
 8003e9c:	f7fe fce2 	bl	8002864 <debug_println>
 8003ea0:	f7fe fc72 	bl	8002788 <debug_force_flush>
            boot_target_manifest_bootloader();  //  Never returns.
 8003ea4:	f7ff f926 	bl	80030f4 <boot_target_manifest_bootloader>
            return;
 8003ea8:	e740      	b.n	8003d2c <handle_flash_write+0x110>
        flash_write(target_addr, data, HF2_PAGE_SIZE);
 8003eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eae:	4639      	mov	r1, r7
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f000 fae9 	bl	8004488 <flash_write>
 8003eb6:	e739      	b.n	8003d2c <handle_flash_write+0x110>
 8003eb8:	08010000 	.word	0x08010000
 8003ebc:	20000574 	.word	0x20000574
 8003ec0:	20000590 	.word	0x20000590
 8003ec4:	08004f44 	.word	0x08004f44
 8003ec8:	20000733 	.word	0x20000733
 8003ecc:	08000150 	.word	0x08000150
 8003ed0:	2000057c 	.word	0x2000057c
 8003ed4:	08004f54 	.word	0x08004f54
 8003ed8:	20000580 	.word	0x20000580
 8003edc:	20000588 	.word	0x20000588
 8003ee0:	20000584 	.word	0x20000584
 8003ee4:	08004f98 	.word	0x08004f98
 8003ee8:	080046c4 	.word	0x080046c4
 8003eec:	0800504c 	.word	0x0800504c
 8003ef0:	08004998 	.word	0x08004998
 8003ef4:	22051969 	.word	0x22051969
 8003ef8:	19690522 	.word	0x19690522
 8003efc:	08004f64 	.word	0x08004f64
 8003f00:	08004f78 	.word	0x08004f78
 8003f04:	08004f88 	.word	0x08004f88
 8003f08:	08004fb4 	.word	0x08004fb4
 8003f0c:	08004fc8 	.word	0x08004fc8
 8003f10:	08005034 	.word	0x08005034
 8003f14:	08005008 	.word	0x08005008
 8003f18:	08004fe0 	.word	0x08004fe0
 8003f1c:	08004ff4 	.word	0x08004ff4
 8003f20:	08005010 	.word	0x08005010
 8003f24:	08005028 	.word	0x08005028
 8003f28:	08004838 	.word	0x08004838
 8003f2c:	08004844 	.word	0x08004844
 8003f30:	08004f3c 	.word	0x08004f3c
 8003f34:	08004b14 	.word	0x08004b14

08003f38 <handle_command>:
static void handle_command(HF2_Buffer *pkt) {
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	4604      	mov	r4, r0
	if (!connected) {
 8003f3c:	4b73      	ldr	r3, [pc, #460]	; (800410c <handle_command+0x1d4>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	b933      	cbnz	r3, 8003f50 <handle_command+0x18>
		connected = 1;
 8003f42:	4b72      	ldr	r3, [pc, #456]	; (800410c <handle_command+0x1d4>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	701a      	strb	r2, [r3, #0]
		if (connected_func) { connected_func(); }
 8003f48:	4b71      	ldr	r3, [pc, #452]	; (8004110 <handle_command+0x1d8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	b103      	cbz	r3, 8003f50 <handle_command+0x18>
 8003f4e:	4798      	blx	r3
    uint32_t cmdId = cmd->command_id;
 8003f50:	f8d4 5002 	ldr.w	r5, [r4, #2]
    int sz = pkt->size;
 8003f54:	8826      	ldrh	r6, [r4, #0]
    resp->tag = cmd->tag;
 8003f56:	88e3      	ldrh	r3, [r4, #6]
 8003f58:	8063      	strh	r3, [r4, #2]
    resp->status16 = HF2_STATUS_OK;  //  Default status is OK.
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	7123      	strb	r3, [r4, #4]
 8003f5e:	7163      	strb	r3, [r4, #5]
    switch (cmdId) {
 8003f60:	1e6b      	subs	r3, r5, #1
 8003f62:	2b07      	cmp	r3, #7
 8003f64:	f200 80be 	bhi.w	80040e4 <handle_command+0x1ac>
 8003f68:	e8df f003 	tbb	[pc, r3]
 8003f6c:	897a3204 	.word	0x897a3204
 8003f70:	96bc6555 	.word	0x96bc6555
        case HF2_CMD_BININFO: {  debug_println("hf2 >> bininfo");
 8003f74:	4867      	ldr	r0, [pc, #412]	; (8004114 <handle_command+0x1dc>)
 8003f76:	f7fe fc75 	bl	8002864 <debug_println>
            assert(sizeof(resp->bininfo) < HF2_MINI_BUF_SIZE, "hf2 buf too small");
 8003f7a:	4967      	ldr	r1, [pc, #412]	; (8004118 <handle_command+0x1e0>)
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	f7ff fdb9 	bl	8003af4 <assert>
            resp->bininfo.mode = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?                        
 8003f82:	f7fe ffdb 	bl	8002f3c <boot_target_get_startup_mode>
                HF2_MODE_BOOTLOADER :
 8003f86:	2802      	cmp	r0, #2
 8003f88:	d000      	beq.n	8003f8c <handle_command+0x54>
 8003f8a:	2502      	movs	r5, #2
            resp->bininfo.mode = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?                        
 8003f8c:	f8c4 5006 	str.w	r5, [r4, #6]
            resp->bininfo.flash_page_size = HF2_PAGE_SIZE;  //  Previously 128 * 1024
 8003f90:	2300      	movs	r3, #0
 8003f92:	72a3      	strb	r3, [r4, #10]
 8003f94:	2201      	movs	r2, #1
 8003f96:	72e2      	strb	r2, [r4, #11]
 8003f98:	7323      	strb	r3, [r4, #12]
 8003f9a:	7363      	strb	r3, [r4, #13]
            resp->bininfo.flash_num_pages = FLASH_SIZE_OVERRIDE / HF2_PAGE_SIZE;
 8003f9c:	73a3      	strb	r3, [r4, #14]
 8003f9e:	73e2      	strb	r2, [r4, #15]
 8003fa0:	7423      	strb	r3, [r4, #16]
 8003fa2:	7463      	strb	r3, [r4, #17]
            resp->bininfo.max_message_size = HF2_BUF_SIZE;  //  Previously sizeof(pkt->buf);
 8003fa4:	2240      	movs	r2, #64	; 0x40
 8003fa6:	74a2      	strb	r2, [r4, #18]
 8003fa8:	2204      	movs	r2, #4
 8003faa:	74e2      	strb	r2, [r4, #19]
 8003fac:	7523      	strb	r3, [r4, #20]
 8003fae:	7563      	strb	r3, [r4, #21]
            resp->bininfo.uf2_family = UF2_FAMILY;
 8003fb0:	2372      	movs	r3, #114	; 0x72
 8003fb2:	75a3      	strb	r3, [r4, #22]
 8003fb4:	2310      	movs	r3, #16
 8003fb6:	75e3      	strb	r3, [r4, #23]
 8003fb8:	f06f 031d 	mvn.w	r3, #29
 8003fbc:	7623      	strb	r3, [r4, #24]
 8003fbe:	235e      	movs	r3, #94	; 0x5e
 8003fc0:	7663      	strb	r3, [r4, #25]
            send_hf2_response(pkt, sizeof(resp->bininfo)); debug_force_flush(); ////
 8003fc2:	2114      	movs	r1, #20
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f000 fae7 	bl	8004598 <send_hf2_response>
 8003fca:	f7fe fbdd 	bl	8002788 <debug_force_flush>
}
 8003fce:	bd70      	pop	{r4, r5, r6, pc}
        case HF2_CMD_INFO: { debug_println("hf2 >> info");
 8003fd0:	4852      	ldr	r0, [pc, #328]	; (800411c <handle_command+0x1e4>)
 8003fd2:	f7fe fc47 	bl	8002864 <debug_println>
            int info_size = strlen(infoUf2File);
 8003fd6:	4e52      	ldr	r6, [pc, #328]	; (8004120 <handle_command+0x1e8>)
 8003fd8:	4630      	mov	r0, r6
 8003fda:	f7fe fafc 	bl	80025d6 <strlen>
            assert(info_size > 0, "empty hf2 info");
 8003fde:	4605      	mov	r5, r0
 8003fe0:	4950      	ldr	r1, [pc, #320]	; (8004124 <handle_command+0x1ec>)
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	bfd4      	ite	le
 8003fe6:	2000      	movle	r0, #0
 8003fe8:	2001      	movgt	r0, #1
 8003fea:	f7ff fd83 	bl	8003af4 <assert>
            assert((info_size + 4) < (int) HF2_MINI_BUF_SIZE, "hf2 buf too small");
 8003fee:	1d28      	adds	r0, r5, #4
 8003ff0:	4949      	ldr	r1, [pc, #292]	; (8004118 <handle_command+0x1e0>)
 8003ff2:	2858      	cmp	r0, #88	; 0x58
 8003ff4:	bfcc      	ite	gt
 8003ff6:	2000      	movgt	r0, #0
 8003ff8:	2001      	movle	r0, #1
 8003ffa:	f7ff fd7b 	bl	8003af4 <assert>
            memcpy(pkt->resp.data8, infoUf2File, info_size);
 8003ffe:	462a      	mov	r2, r5
 8004000:	4631      	mov	r1, r6
 8004002:	1da0      	adds	r0, r4, #6
 8004004:	f7fe facf 	bl	80025a6 <memcpy>
            send_hf2_response(pkt, info_size); debug_force_flush(); ////
 8004008:	4629      	mov	r1, r5
 800400a:	4620      	mov	r0, r4
 800400c:	f000 fac4 	bl	8004598 <send_hf2_response>
 8004010:	f7fe fbba 	bl	8002788 <debug_force_flush>
            return;
 8004014:	e7db      	b.n	8003fce <handle_command+0x96>
        case HF2_CMD_START_FLASH: { debug_println("hf2 >> start");
 8004016:	4844      	ldr	r0, [pc, #272]	; (8004128 <handle_command+0x1f0>)
 8004018:	f7fe fc24 	bl	8002864 <debug_println>
            send_hf2_response(pkt, 0); debug_force_flush(); ////            
 800401c:	2100      	movs	r1, #0
 800401e:	4620      	mov	r0, r4
 8004020:	f000 faba 	bl	8004598 <send_hf2_response>
 8004024:	f7fe fbb0 	bl	8002788 <debug_force_flush>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 8004028:	f7fe ff88 	bl	8002f3c <boot_target_get_startup_mode>
 800402c:	2801      	cmp	r0, #1
 800402e:	d1ce      	bne.n	8003fce <handle_command+0x96>
                boot_target_manifest_bootloader();  //  Never returns.
 8004030:	f7ff f860 	bl	80030f4 <boot_target_manifest_bootloader>
 8004034:	e7cb      	b.n	8003fce <handle_command+0x96>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { debug_println("hf2 >> flash");  debug_force_flush(); ////
 8004036:	f7fe ff81 	bl	8002f3c <boot_target_get_startup_mode>
 800403a:	2801      	cmp	r0, #1
 800403c:	d003      	beq.n	8004046 <handle_command+0x10e>
            handle_flash_write(pkt);
 800403e:	4620      	mov	r0, r4
 8004040:	f7ff fdec 	bl	8003c1c <handle_flash_write>
            return;
 8004044:	e7c3      	b.n	8003fce <handle_command+0x96>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { debug_println("hf2 >> flash");  debug_force_flush(); ////
 8004046:	4839      	ldr	r0, [pc, #228]	; (800412c <handle_command+0x1f4>)
 8004048:	f7fe fc0c 	bl	8002864 <debug_println>
 800404c:	f7fe fb9c 	bl	8002788 <debug_force_flush>
                restart_request = BOOTLOADER_MODE; 
 8004050:	4b37      	ldr	r3, [pc, #220]	; (8004130 <handle_command+0x1f8>)
 8004052:	2202      	movs	r2, #2
 8004054:	701a      	strb	r2, [r3, #0]
                send_hf2_response(pkt, 0);
 8004056:	2100      	movs	r1, #0
 8004058:	4620      	mov	r0, r4
 800405a:	f000 fa9d 	bl	8004598 <send_hf2_response>
                return;
 800405e:	e7b6      	b.n	8003fce <handle_command+0x96>
        case HF2_CMD_RESET_INTO_APP: { debug_println("hf2 >> app");
 8004060:	4834      	ldr	r0, [pc, #208]	; (8004134 <handle_command+0x1fc>)
 8004062:	f7fe fbff 	bl	8002864 <debug_println>
            flash_flush();  //  Flush any pending flash writes.
 8004066:	f000 f9c1 	bl	80043ec <flash_flush>
            restart_request = APPLICATION_MODE;
 800406a:	4b31      	ldr	r3, [pc, #196]	; (8004130 <handle_command+0x1f8>)
 800406c:	2201      	movs	r2, #1
 800406e:	701a      	strb	r2, [r3, #0]
            send_hf2_response(pkt, 0); debug_force_flush(); ////
 8004070:	2100      	movs	r1, #0
 8004072:	4620      	mov	r0, r4
 8004074:	f000 fa90 	bl	8004598 <send_hf2_response>
 8004078:	f7fe fb86 	bl	8002788 <debug_force_flush>
            return;
 800407c:	e7a7      	b.n	8003fce <handle_command+0x96>
            debug_println("hf2 >> boot");
 800407e:	482e      	ldr	r0, [pc, #184]	; (8004138 <handle_command+0x200>)
 8004080:	f7fe fbf0 	bl	8002864 <debug_println>
            restart_request = BOOTLOADER_MODE;
 8004084:	4b2a      	ldr	r3, [pc, #168]	; (8004130 <handle_command+0x1f8>)
 8004086:	2202      	movs	r2, #2
 8004088:	701a      	strb	r2, [r3, #0]
            send_hf2_response(pkt, 0);
 800408a:	2100      	movs	r1, #0
 800408c:	4620      	mov	r0, r4
 800408e:	f000 fa83 	bl	8004598 <send_hf2_response>
            debug_force_flush(); ////
 8004092:	f7fe fb79 	bl	8002788 <debug_force_flush>
            return;
 8004096:	e79a      	b.n	8003fce <handle_command+0x96>
        case HF2_CMD_READ_WORDS: { debug_println("hf2 >> read"); debug_force_flush(); ////
 8004098:	4828      	ldr	r0, [pc, #160]	; (800413c <handle_command+0x204>)
 800409a:	f7fe fbe3 	bl	8002864 <debug_println>
 800409e:	f7fe fb73 	bl	8002788 <debug_force_flush>
            if (boot_target_get_startup_mode() == APPLICATION_MODE) { 
 80040a2:	f7fe ff4b 	bl	8002f3c <boot_target_get_startup_mode>
 80040a6:	2801      	cmp	r0, #1
 80040a8:	d014      	beq.n	80040d4 <handle_command+0x19c>
            checkDataSize(read_words, 0);
 80040aa:	4925      	ldr	r1, [pc, #148]	; (8004140 <handle_command+0x208>)
 80040ac:	2e10      	cmp	r6, #16
 80040ae:	bf14      	ite	ne
 80040b0:	2000      	movne	r0, #0
 80040b2:	2001      	moveq	r0, #1
 80040b4:	f7ff fd1e 	bl	8003af4 <assert>
            int num_words = cmd->read_words.num_words;
 80040b8:	f8d4 500e 	ldr.w	r5, [r4, #14]
            memcpy(resp->data32, (void *)cmd->read_words.target_addr, num_words << 2);
 80040bc:	00ad      	lsls	r5, r5, #2
 80040be:	462a      	mov	r2, r5
 80040c0:	f8d4 100a 	ldr.w	r1, [r4, #10]
 80040c4:	1da0      	adds	r0, r4, #6
 80040c6:	f7fe fa6e 	bl	80025a6 <memcpy>
            send_hf2_response(pkt, num_words << 2);
 80040ca:	4629      	mov	r1, r5
 80040cc:	4620      	mov	r0, r4
 80040ce:	f000 fa63 	bl	8004598 <send_hf2_response>
            return;
 80040d2:	e77c      	b.n	8003fce <handle_command+0x96>
                restart_request = BOOTLOADER_MODE; 
 80040d4:	4b16      	ldr	r3, [pc, #88]	; (8004130 <handle_command+0x1f8>)
 80040d6:	2202      	movs	r2, #2
 80040d8:	701a      	strb	r2, [r3, #0]
                send_hf2_response(pkt, 0);
 80040da:	2100      	movs	r1, #0
 80040dc:	4620      	mov	r0, r4
 80040de:	f000 fa5b 	bl	8004598 <send_hf2_response>
                return;
 80040e2:	e774      	b.n	8003fce <handle_command+0x96>
        default: { debug_print("hf2 >> unknown "); debug_print_unsigned(cmdId); debug_println(""); debug_force_flush(); ////
 80040e4:	4817      	ldr	r0, [pc, #92]	; (8004144 <handle_command+0x20c>)
 80040e6:	f7fe fbe9 	bl	80028bc <debug_print>
 80040ea:	4628      	mov	r0, r5
 80040ec:	f7fe fbf6 	bl	80028dc <debug_print_unsigned>
 80040f0:	4815      	ldr	r0, [pc, #84]	; (8004148 <handle_command+0x210>)
 80040f2:	f7fe fbb7 	bl	8002864 <debug_println>
 80040f6:	f7fe fb47 	bl	8002788 <debug_force_flush>
            resp->status16 = HF2_STATUS_INVALID_CMD;
 80040fa:	2100      	movs	r1, #0
 80040fc:	2301      	movs	r3, #1
 80040fe:	7123      	strb	r3, [r4, #4]
 8004100:	7161      	strb	r1, [r4, #5]
    send_hf2_response(pkt, 0);
 8004102:	4620      	mov	r0, r4
 8004104:	f000 fa48 	bl	8004598 <send_hf2_response>
 8004108:	e761      	b.n	8003fce <handle_command+0x96>
 800410a:	bf00      	nop
 800410c:	20000732 	.word	0x20000732
 8004110:	20000578 	.word	0x20000578
 8004114:	08004ea8 	.word	0x08004ea8
 8004118:	08004eb8 	.word	0x08004eb8
 800411c:	08004ecc 	.word	0x08004ecc
 8004120:	0800515c 	.word	0x0800515c
 8004124:	08004ed8 	.word	0x08004ed8
 8004128:	08004ee8 	.word	0x08004ee8
 800412c:	08004ef8 	.word	0x08004ef8
 8004130:	20000735 	.word	0x20000735
 8004134:	08004f08 	.word	0x08004f08
 8004138:	08004f14 	.word	0x08004f14
 800413c:	08004f20 	.word	0x08004f20
 8004140:	0800504c 	.word	0x0800504c
 8004144:	08004f2c 	.word	0x08004f2c
 8004148:	080046c4 	.word	0x080046c4

0800414c <hf2_data_rx_cb>:
static void hf2_data_rx_cb(usbd_device *usbd_dev, uint8_t ep) {
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int len = usbd_ep_read_packet(usbd_dev, ep, rx_buf, sizeof(rx_buf));    
 800414e:	2340      	movs	r3, #64	; 0x40
 8004150:	4a28      	ldr	r2, [pc, #160]	; (80041f4 <hf2_data_rx_cb+0xa8>)
 8004152:	f7fd fb27 	bl	80017a4 <usbd_ep_read_packet>
 8004156:	4604      	mov	r4, r0
    rx_time = millis();
 8004158:	f7fe fd32 	bl	8002bc0 <millis>
 800415c:	4b26      	ldr	r3, [pc, #152]	; (80041f8 <hf2_data_rx_cb+0xac>)
 800415e:	6018      	str	r0, [r3, #0]
    if (len <= 0) return;
 8004160:	2c00      	cmp	r4, #0
 8004162:	d03f      	beq.n	80041e4 <hf2_data_rx_cb+0x98>
    uint8_t tag = rx_buf[0];
 8004164:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <hf2_data_rx_cb+0xa8>)
 8004166:	781c      	ldrb	r4, [r3, #0]
    if (!pkt) {
 8004168:	4b24      	ldr	r3, [pc, #144]	; (80041fc <hf2_data_rx_cb+0xb0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	b143      	cbz	r3, 8004180 <hf2_data_rx_cb+0x34>
    usb_assert(pkt->size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 800416e:	4b23      	ldr	r3, [pc, #140]	; (80041fc <hf2_data_rx_cb+0xb0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b173      	cbz	r3, 8004194 <hf2_data_rx_cb+0x48>
 8004176:	f014 0f80 	tst.w	r4, #128	; 0x80
 800417a:	d134      	bne.n	80041e6 <hf2_data_rx_cb+0x9a>
 800417c:	2001      	movs	r0, #1
 800417e:	e00a      	b.n	8004196 <hf2_data_rx_cb+0x4a>
        pkt = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?
 8004180:	f7fe fedc 	bl	8002f3c <boot_target_get_startup_mode>
            &hf2_buffer :
 8004184:	2802      	cmp	r0, #2
 8004186:	d003      	beq.n	8004190 <hf2_data_rx_cb+0x44>
 8004188:	4a1d      	ldr	r2, [pc, #116]	; (8004200 <hf2_data_rx_cb+0xb4>)
        pkt = (boot_target_get_startup_mode() == BOOTLOADER_MODE) ?
 800418a:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <hf2_data_rx_cb+0xb0>)
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e7ee      	b.n	800416e <hf2_data_rx_cb+0x22>
            &hf2_buffer :
 8004190:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <hf2_data_rx_cb+0xb8>)
 8004192:	e7fa      	b.n	800418a <hf2_data_rx_cb+0x3e>
    usb_assert(pkt->size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 8004194:	2001      	movs	r0, #1
 8004196:	4f1c      	ldr	r7, [pc, #112]	; (8004208 <hf2_data_rx_cb+0xbc>)
 8004198:	4639      	mov	r1, r7
 800419a:	f7ff fcab 	bl	8003af4 <assert>
 800419e:	f004 063f 	and.w	r6, r4, #63	; 0x3f
    usb_assert(pkt->size + size <= (int) HF2_BUF_SIZE /* Was sizeof(pkt->buf) */, bad_packet_message);
 80041a2:	4d16      	ldr	r5, [pc, #88]	; (80041fc <hf2_data_rx_cb+0xb0>)
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	8818      	ldrh	r0, [r3, #0]
 80041a8:	4430      	add	r0, r6
 80041aa:	4639      	mov	r1, r7
 80041ac:	f5b0 6f88 	cmp.w	r0, #1088	; 0x440
 80041b0:	bfcc      	ite	gt
 80041b2:	2000      	movgt	r0, #0
 80041b4:	2001      	movle	r0, #1
 80041b6:	f7ff fc9d 	bl	8003af4 <assert>
    memcpy(pkt->buf + pkt->size, rx_buf + 1, size);
 80041ba:	682d      	ldr	r5, [r5, #0]
 80041bc:	1ca8      	adds	r0, r5, #2
 80041be:	882b      	ldrh	r3, [r5, #0]
 80041c0:	4632      	mov	r2, r6
 80041c2:	4912      	ldr	r1, [pc, #72]	; (800420c <hf2_data_rx_cb+0xc0>)
 80041c4:	4418      	add	r0, r3
 80041c6:	f7fe f9ee 	bl	80025a6 <memcpy>
    pkt->size += size;
 80041ca:	882a      	ldrh	r2, [r5, #0]
 80041cc:	4432      	add	r2, r6
 80041ce:	802a      	strh	r2, [r5, #0]
    if (tag != HF2_FLAG_CMDPKT_BODY) {
 80041d0:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
 80041d4:	d006      	beq.n	80041e4 <hf2_data_rx_cb+0x98>
        if (tag == HF2_FLAG_CMDPKT_LAST) {
 80041d6:	2c40      	cmp	r4, #64	; 0x40
 80041d8:	d007      	beq.n	80041ea <hf2_data_rx_cb+0x9e>
        pkt->size = 0;
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <hf2_data_rx_cb+0xb0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2200      	movs	r2, #0
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	705a      	strb	r2, [r3, #1]
}
 80041e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    usb_assert(pkt->size == 0 || !(tag & HF2_FLAG_SERIAL_OUT), bad_packet_message);
 80041e6:	2000      	movs	r0, #0
 80041e8:	e7d5      	b.n	8004196 <hf2_data_rx_cb+0x4a>
            handle_command(pkt);
 80041ea:	4628      	mov	r0, r5
 80041ec:	f7ff fea4 	bl	8003f38 <handle_command>
 80041f0:	e7f3      	b.n	80041da <hf2_data_rx_cb+0x8e>
 80041f2:	bf00      	nop
 80041f4:	2000059c 	.word	0x2000059c
 80041f8:	200005dc 	.word	0x200005dc
 80041fc:	2000058c 	.word	0x2000058c
 8004200:	20000840 	.word	0x20000840
 8004204:	200047bc 	.word	0x200047bc
 8004208:	08004e9c 	.word	0x08004e9c
 800420c:	2000059d 	.word	0x2000059d

08004210 <hf2_data_tx_cb>:
static void hf2_data_tx_cb(usbd_device *usbd_dev, uint8_t ep) { (void)usbd_dev; (void)ep;
 8004210:	b508      	push	{r3, lr}
    if (remDataToSendLength > 0) {  //  If there is remaining data to be sent...
 8004212:	4b11      	ldr	r3, [pc, #68]	; (8004258 <hf2_data_tx_cb+0x48>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	b94b      	cbnz	r3, 800422c <hf2_data_tx_cb+0x1c>
    if (remDataToSendLength == 0) {  //  If there is no more data to be sent...
 8004218:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <hf2_data_tx_cb+0x48>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	b92b      	cbnz	r3, 800422a <hf2_data_tx_cb+0x1a>
        if (restart_request == BOOTLOADER_MODE) {  //  Restart to Bootloader Mode if requested.
 800421e:	4b0f      	ldr	r3, [pc, #60]	; (800425c <hf2_data_tx_cb+0x4c>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d00b      	beq.n	800423e <hf2_data_tx_cb+0x2e>
        } else if (restart_request == APPLICATION_MODE) {  //  Restart to Application Mode if requested.
 8004226:	2b01      	cmp	r3, #1
 8004228:	d00f      	beq.n	800424a <hf2_data_tx_cb+0x3a>
}
 800422a:	bd08      	pop	{r3, pc}
        pokeSend(remDataToSend, remDataToSendLength, remDataToSendFlag);  //  Send it.
 800422c:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <hf2_data_tx_cb+0x48>)
 800422e:	6819      	ldr	r1, [r3, #0]
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <hf2_data_tx_cb+0x50>)
 8004232:	781a      	ldrb	r2, [r3, #0]
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <hf2_data_tx_cb+0x54>)
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	f7ff fc8c 	bl	8003b54 <pokeSend>
 800423c:	e7ec      	b.n	8004218 <hf2_data_tx_cb+0x8>
            restart_request = UNKNOWN_MODE;
 800423e:	4b07      	ldr	r3, [pc, #28]	; (800425c <hf2_data_tx_cb+0x4c>)
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
            boot_target_manifest_bootloader();  //  Never returns.
 8004244:	f7fe ff56 	bl	80030f4 <boot_target_manifest_bootloader>
 8004248:	e7ef      	b.n	800422a <hf2_data_tx_cb+0x1a>
            restart_request = UNKNOWN_MODE;
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <hf2_data_tx_cb+0x4c>)
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
            boot_target_manifest_app();  //  Never returns.
 8004250:	f7fe ff40 	bl	80030d4 <boot_target_manifest_app>
}
 8004254:	e7e9      	b.n	800422a <hf2_data_tx_cb+0x1a>
 8004256:	bf00      	nop
 8004258:	20000598 	.word	0x20000598
 800425c:	20000735 	.word	0x20000735
 8004260:	20000734 	.word	0x20000734
 8004264:	20000594 	.word	0x20000594

08004268 <hf2_setup>:
void hf2_setup(usbd_device *usbd_dev, connected_callback *connected_func0) {
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4604      	mov	r4, r0
 800426c:	460d      	mov	r5, r1
    debug_print("flash allow "); debug_printhex_unsigned(USER_FLASH_START); debug_print(" to "); debug_printhex_unsigned(USER_FLASH_END); debug_println("");  //  Show the addresses that flashing is allowed.
 800426e:	4814      	ldr	r0, [pc, #80]	; (80042c0 <hf2_setup+0x58>)
 8004270:	f7fe fb24 	bl	80028bc <debug_print>
 8004274:	4813      	ldr	r0, [pc, #76]	; (80042c4 <hf2_setup+0x5c>)
 8004276:	f7fe fb6d 	bl	8002954 <debug_printhex_unsigned>
 800427a:	4813      	ldr	r0, [pc, #76]	; (80042c8 <hf2_setup+0x60>)
 800427c:	f7fe fb1e 	bl	80028bc <debug_print>
 8004280:	4812      	ldr	r0, [pc, #72]	; (80042cc <hf2_setup+0x64>)
 8004282:	f7fe fb67 	bl	8002954 <debug_printhex_unsigned>
 8004286:	4812      	ldr	r0, [pc, #72]	; (80042d0 <hf2_setup+0x68>)
 8004288:	f7fe faec 	bl	8002864 <debug_println>
    _usbd_dev = usbd_dev;
 800428c:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <hf2_setup+0x6c>)
 800428e:	601c      	str	r4, [r3, #0]
    connected_func = connected_func0;  //  test_hf2(); ////
 8004290:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <hf2_setup+0x70>)
 8004292:	601d      	str	r5, [r3, #0]
    if (boot_target_get_startup_mode() == BOOTLOADER_MODE) {
 8004294:	f7fe fe52 	bl	8002f3c <boot_target_get_startup_mode>
 8004298:	2802      	cmp	r0, #2
 800429a:	d006      	beq.n	80042aa <hf2_setup+0x42>
    int status = aggregate_register_config_callback(usbd_dev, hf2_set_config);
 800429c:	490f      	ldr	r1, [pc, #60]	; (80042dc <hf2_setup+0x74>)
 800429e:	4620      	mov	r0, r4
 80042a0:	f7ff f81a 	bl	80032d8 <aggregate_register_config_callback>
    if (status < 0) { debug_println("*** hf2_setup failed"); }
 80042a4:	2800      	cmp	r0, #0
 80042a6:	db07      	blt.n	80042b8 <hf2_setup+0x50>
}
 80042a8:	bd38      	pop	{r3, r4, r5, pc}
        memset(&hf2_buffer, 0, sizeof(hf2_buffer));
 80042aa:	f240 4242 	movw	r2, #1090	; 0x442
 80042ae:	2100      	movs	r1, #0
 80042b0:	480b      	ldr	r0, [pc, #44]	; (80042e0 <hf2_setup+0x78>)
 80042b2:	f7fe f985 	bl	80025c0 <memset>
 80042b6:	e7f1      	b.n	800429c <hf2_setup+0x34>
    if (status < 0) { debug_println("*** hf2_setup failed"); }
 80042b8:	480a      	ldr	r0, [pc, #40]	; (80042e4 <hf2_setup+0x7c>)
 80042ba:	f7fe fad3 	bl	8002864 <debug_println>
}
 80042be:	e7f3      	b.n	80042a8 <hf2_setup+0x40>
 80042c0:	0800507c 	.word	0x0800507c
 80042c4:	08006c00 	.word	0x08006c00
 80042c8:	0800508c 	.word	0x0800508c
 80042cc:	08010000 	.word	0x08010000
 80042d0:	080046c4 	.word	0x080046c4
 80042d4:	20000570 	.word	0x20000570
 80042d8:	20000578 	.word	0x20000578
 80042dc:	08003b15 	.word	0x08003b15
 80042e0:	200047bc 	.word	0x200047bc
 80042e4:	08005094 	.word	0x08005094

080042e8 <backup_write>:

#include "backup.h"

#define RTC_BKP_DR(reg)  MMIO16(BACKUP_REGS_BASE + 4 + (4 * (reg)))

void backup_write(enum BackupRegister reg, uint32_t value) {
 80042e8:	b538      	push	{r3, r4, r5, lr}
 80042ea:	4605      	mov	r5, r0
 80042ec:	460c      	mov	r4, r1
    rcc_periph_clock_enable(RCC_PWR);
 80042ee:	f44f 7067 	mov.w	r0, #924	; 0x39c
 80042f2:	f7fd fa08 	bl	8001706 <rcc_periph_clock_enable>
    rcc_periph_clock_enable(RCC_BKP);
 80042f6:	f240 309b 	movw	r0, #923	; 0x39b
 80042fa:	f7fd fa04 	bl	8001706 <rcc_periph_clock_enable>

    pwr_disable_backup_domain_write_protect();
 80042fe:	f7fc fe6b 	bl	8000fd8 <pwr_disable_backup_domain_write_protect>
    RTC_BKP_DR((int)reg*2) = value & 0xFFFFUL;
 8004302:	b2a2      	uxth	r2, r4
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <backup_write+0x30>)
 8004306:	f823 2035 	strh.w	r2, [r3, r5, lsl #3]
    RTC_BKP_DR((int)reg*2+1) = (value & 0xFFFF0000UL) >> 16;
 800430a:	0c24      	lsrs	r4, r4, #16
 800430c:	3304      	adds	r3, #4
 800430e:	f823 4035 	strh.w	r4, [r3, r5, lsl #3]
    pwr_enable_backup_domain_write_protect();
 8004312:	f7fc fe69 	bl	8000fe8 <pwr_enable_backup_domain_write_protect>
    //  Previously: (void)reg; *(volatile uint32_t*)0x2000f000 = value;
}
 8004316:	bd38      	pop	{r3, r4, r5, pc}
 8004318:	40006c04 	.word	0x40006c04

0800431c <backup_read>:

uint32_t backup_read(enum BackupRegister reg) {
    //  Previously: (void)reg; return *(volatile uint32_t*)0x2000f000;
    uint32_t value = ((uint32_t)RTC_BKP_DR((int)reg*2+1) << 16)
 800431c:	4b04      	ldr	r3, [pc, #16]	; (8004330 <backup_read+0x14>)
 800431e:	f833 2030 	ldrh.w	r2, [r3, r0, lsl #3]
                   | ((uint32_t)RTC_BKP_DR((int)reg*2) << 0);
 8004322:	3b04      	subs	r3, #4
 8004324:	f833 0030 	ldrh.w	r0, [r3, r0, lsl #3]
    return value;
}
 8004328:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40006c08 	.word	0x40006c08

08004334 <usb21_set_config>:
		return USBD_REQ_HANDLED;
	}
	return USBD_REQ_NEXT_CALLBACK;
}

static void usb21_set_config(usbd_device* usbd_dev, uint16_t wValue) {
 8004334:	b508      	push	{r3, lr}
    //  debug_println("usb21_set_config"); // debug_flush(); ////
	(void)wValue;
	int status = aggregate_register_callback(
 8004336:	4b07      	ldr	r3, [pc, #28]	; (8004354 <usb21_set_config+0x20>)
 8004338:	22ff      	movs	r2, #255	; 0xff
 800433a:	2180      	movs	r1, #128	; 0x80
 800433c:	f7fe ffec 	bl	8003318 <aggregate_register_callback>
		usbd_dev,
		DESCRIPTOR_CALLBACK_TYPE,
		DESCRIPTOR_CALLBACK_MASK,
		&usb21_standard_get_descriptor);
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 8004340:	2800      	cmp	r0, #0
 8004342:	db00      	blt.n	8004346 <usb21_set_config+0x12>
}
 8004344:	bd08      	pop	{r3, pc}
	if (status < 0) { debug_println("*** usb21_set_config failed"); debug_flush(); }
 8004346:	4804      	ldr	r0, [pc, #16]	; (8004358 <usb21_set_config+0x24>)
 8004348:	f7fe fa8c 	bl	8002864 <debug_println>
 800434c:	f7fe fab1 	bl	80028b2 <debug_flush>
}
 8004350:	e7f8      	b.n	8004344 <usb21_set_config+0x10>
 8004352:	bf00      	nop
 8004354:	0800435d 	.word	0x0800435d
 8004358:	080050bc 	.word	0x080050bc

0800435c <usb21_standard_get_descriptor>:
	int descr_type = req->wValue >> 8;
 800435c:	8848      	ldrh	r0, [r1, #2]
 800435e:	0a00      	lsrs	r0, r0, #8
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 8004360:	280f      	cmp	r0, #15
 8004362:	d121      	bne.n	80043a8 <usb21_standard_get_descriptor+0x4c>
											usbd_control_complete_callback* complete) {
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	461d      	mov	r5, r3
 8004368:	4614      	mov	r4, r2
	if (!usb21_bos) {
 800436a:	4b10      	ldr	r3, [pc, #64]	; (80043ac <usb21_standard_get_descriptor+0x50>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	b123      	cbz	r3, 800437a <usb21_standard_get_descriptor+0x1e>
	if (req->bRequest == USB_REQ_GET_DESCRIPTOR) {
 8004370:	784b      	ldrb	r3, [r1, #1]
 8004372:	2b06      	cmp	r3, #6
 8004374:	d008      	beq.n	8004388 <usb21_standard_get_descriptor+0x2c>
	return USBD_REQ_NEXT_CALLBACK;
 8004376:	2002      	movs	r0, #2
}
 8004378:	bd70      	pop	{r4, r5, r6, pc}
		debug_println("*** usb21_descriptor no bos "); debug_flush(); ////
 800437a:	480d      	ldr	r0, [pc, #52]	; (80043b0 <usb21_standard_get_descriptor+0x54>)
 800437c:	f7fe fa72 	bl	8002864 <debug_println>
 8004380:	f7fe fa97 	bl	80028b2 <debug_flush>
		return USBD_REQ_NOTSUPP;
 8004384:	2000      	movs	r0, #0
 8004386:	e7f7      	b.n	8004378 <usb21_standard_get_descriptor+0x1c>
		dump_usb_request("bos", req); // debug_flush(); ////
 8004388:	480a      	ldr	r0, [pc, #40]	; (80043b4 <usb21_standard_get_descriptor+0x58>)
 800438a:	f7ff f82b 	bl	80033e4 <dump_usb_request>
		*len = MIN(*len, build_bos_descriptor(usb21_bos, *buf, *len));
 800438e:	882e      	ldrh	r6, [r5, #0]
 8004390:	4632      	mov	r2, r6
 8004392:	6821      	ldr	r1, [r4, #0]
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <usb21_standard_get_descriptor+0x50>)
 8004396:	6818      	ldr	r0, [r3, #0]
 8004398:	f000 f90a 	bl	80045b0 <build_bos_descriptor>
 800439c:	4286      	cmp	r6, r0
 800439e:	d200      	bcs.n	80043a2 <usb21_standard_get_descriptor+0x46>
 80043a0:	4630      	mov	r0, r6
 80043a2:	8028      	strh	r0, [r5, #0]
		return USBD_REQ_HANDLED;
 80043a4:	2001      	movs	r0, #1
 80043a6:	e7e7      	b.n	8004378 <usb21_standard_get_descriptor+0x1c>
    if (descr_type != USB_DT_BOS) { return USBD_REQ_NEXT_CALLBACK; }
 80043a8:	2002      	movs	r0, #2
}
 80043aa:	4770      	bx	lr
 80043ac:	20000620 	.word	0x20000620
 80043b0:	080050f0 	.word	0x080050f0
 80043b4:	08005110 	.word	0x08005110

080043b8 <usb21_setup>:

void usb21_setup(usbd_device* usbd_dev, const struct usb_bos_descriptor* binary_object_store) {
 80043b8:	b510      	push	{r4, lr}
 80043ba:	4604      	mov	r4, r0
    // debug_println("usb21_setup"); // debug_flush(); ////
	usb21_bos = binary_object_store;
 80043bc:	4b08      	ldr	r3, [pc, #32]	; (80043e0 <usb21_setup+0x28>)
 80043be:	6019      	str	r1, [r3, #0]

	/* Register the control request handler _before_ the config is set */
	usb21_set_config(usbd_dev, 0x0000);
 80043c0:	2100      	movs	r1, #0
 80043c2:	f7ff ffb7 	bl	8004334 <usb21_set_config>
	int status = aggregate_register_config_callback(usbd_dev, usb21_set_config);
 80043c6:	4907      	ldr	r1, [pc, #28]	; (80043e4 <usb21_setup+0x2c>)
 80043c8:	4620      	mov	r0, r4
 80043ca:	f7fe ff85 	bl	80032d8 <aggregate_register_config_callback>
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 80043ce:	2800      	cmp	r0, #0
 80043d0:	db00      	blt.n	80043d4 <usb21_setup+0x1c>
}
 80043d2:	bd10      	pop	{r4, pc}
	if (status < 0) { debug_println("*** usb21_setup failed"); debug_flush(); }
 80043d4:	4804      	ldr	r0, [pc, #16]	; (80043e8 <usb21_setup+0x30>)
 80043d6:	f7fe fa45 	bl	8002864 <debug_println>
 80043da:	f7fe fa6a 	bl	80028b2 <debug_flush>
}
 80043de:	e7f8      	b.n	80043d2 <usb21_setup+0x1a>
 80043e0:	20000620 	.word	0x20000620
 80043e4:	08004335 	.word	0x08004335
 80043e8:	080050d8 	.word	0x080050d8

080043ec <flash_flush>:
	return (bytes_flashed > 0) ? bytes_flashed / 2 : bytes_flashed;
}

void flash_flush(void) {
    //  Flush the page of cached flashing data to ROM.
    lastFlush = ms;
 80043ec:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <flash_flush+0x78>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4b1d      	ldr	r3, [pc, #116]	; (8004468 <flash_flush+0x7c>)
 80043f2:	601a      	str	r2, [r3, #0]
    if (flashAddr == NO_CACHE) { return; }
 80043f4:	4b1d      	ldr	r3, [pc, #116]	; (800446c <flash_flush+0x80>)
 80043f6:	6819      	ldr	r1, [r3, #0]
 80043f8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80043fc:	d031      	beq.n	8004462 <flash_flush+0x76>
void flash_flush(void) {
 80043fe:	b510      	push	{r4, lr}
    if (firstFlush) { firstFlush = false; }  //  TODO: disable bootloader or something
 8004400:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <flash_flush+0x84>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	b113      	cbz	r3, 800440c <flash_flush+0x20>
 8004406:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <flash_flush+0x84>)
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]
    DBG("Flush at %x", flashAddr);
    if (memcmp(flashBuf, (void *)flashAddr, FLASH_PAGE_SIZE) != 0) {
 800440c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004410:	4818      	ldr	r0, [pc, #96]	; (8004474 <flash_flush+0x88>)
 8004412:	f7fe f8b8 	bl	8002586 <memcmp>
 8004416:	b920      	cbnz	r0, 8004422 <flash_flush+0x36>
        //  If the page contents are different, write to ROM.
        debug_print("-> "); debug_printhex_unsigned((size_t) flashAddr); debug_print(" "); //// DBG("Write flush at %x", flashAddr);
        int words_flashed = base_flash_program_array((void *)flashAddr, (void*)flashBuf, FLASH_PAGE_SIZE / 2);
        if (words_flashed != FLASH_PAGE_SIZE / 2) { debug_print("*** ERROR: Flash failed "); debug_print_int(words_flashed); debug_println(""); debug_force_flush(); }
    }
    flashAddr = NO_CACHE;
 8004418:	4b14      	ldr	r3, [pc, #80]	; (800446c <flash_flush+0x80>)
 800441a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800441e:	601a      	str	r2, [r3, #0]
}
 8004420:	bd10      	pop	{r4, pc}
        debug_print("-> "); debug_printhex_unsigned((size_t) flashAddr); debug_print(" "); //// DBG("Write flush at %x", flashAddr);
 8004422:	4815      	ldr	r0, [pc, #84]	; (8004478 <flash_flush+0x8c>)
 8004424:	f7fe fa4a 	bl	80028bc <debug_print>
 8004428:	4c10      	ldr	r4, [pc, #64]	; (800446c <flash_flush+0x80>)
 800442a:	6820      	ldr	r0, [r4, #0]
 800442c:	f7fe fa92 	bl	8002954 <debug_printhex_unsigned>
 8004430:	4812      	ldr	r0, [pc, #72]	; (800447c <flash_flush+0x90>)
 8004432:	f7fe fa43 	bl	80028bc <debug_print>
        int words_flashed = base_flash_program_array((void *)flashAddr, (void*)flashBuf, FLASH_PAGE_SIZE / 2);
 8004436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800443a:	490e      	ldr	r1, [pc, #56]	; (8004474 <flash_flush+0x88>)
 800443c:	6820      	ldr	r0, [r4, #0]
 800443e:	f000 f8f5 	bl	800462c <base_flash_program_array>
 8004442:	4604      	mov	r4, r0
        if (words_flashed != FLASH_PAGE_SIZE / 2) { debug_print("*** ERROR: Flash failed "); debug_print_int(words_flashed); debug_println(""); debug_force_flush(); }
 8004444:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004448:	d0e6      	beq.n	8004418 <flash_flush+0x2c>
 800444a:	480d      	ldr	r0, [pc, #52]	; (8004480 <flash_flush+0x94>)
 800444c:	f7fe fa36 	bl	80028bc <debug_print>
 8004450:	4620      	mov	r0, r4
 8004452:	f7fe fa3f 	bl	80028d4 <debug_print_int>
 8004456:	480b      	ldr	r0, [pc, #44]	; (8004484 <flash_flush+0x98>)
 8004458:	f7fe fa04 	bl	8002864 <debug_println>
 800445c:	f7fe f994 	bl	8002788 <debug_force_flush>
 8004460:	e7da      	b.n	8004418 <flash_flush+0x2c>
 8004462:	4770      	bx	lr
 8004464:	20000628 	.word	0x20000628
 8004468:	20000624 	.word	0x20000624
 800446c:	20000124 	.word	0x20000124
 8004470:	20000128 	.word	0x20000128
 8004474:	20004c00 	.word	0x20004c00
 8004478:	08005114 	.word	0x08005114
 800447c:	08004b14 	.word	0x08004b14
 8004480:	08005118 	.word	0x08005118
 8004484:	080046c4 	.word	0x080046c4

08004488 <flash_write>:

void flash_write(uint32_t dst, const uint8_t *src, int byte_count) {
 8004488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800448c:	4604      	mov	r4, r0
 800448e:	460e      	mov	r6, r1
 8004490:	4615      	mov	r5, r2
    //  Write len bytes from src to ROM at address dst.  The writing is buffered in RAM until flash_flush() is called.    
    //  TODO: Support other memory sizes.
    int valid = 
        (dst >= 0x08000000 && (dst + byte_count) < 0x8010000 &&
 8004492:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8004496:	d313      	bcc.n	80044c0 <flash_write+0x38>
 8004498:	4611      	mov	r1, r2
 800449a:	4402      	add	r2, r0
 800449c:	4b28      	ldr	r3, [pc, #160]	; (8004540 <flash_write+0xb8>)
 800449e:	429a      	cmp	r2, r3
 80044a0:	d80e      	bhi.n	80044c0 <flash_write+0x38>
        (
            ((uint32_t) src >= 0x08000000 && ((uint32_t) src + byte_count) < 0x08010000) ||
 80044a2:	4633      	mov	r3, r6
        (dst >= 0x08000000 && (dst + byte_count) < 0x8010000 &&
 80044a4:	f1b6 6f00 	cmp.w	r6, #134217728	; 0x8000000
 80044a8:	d303      	bcc.n	80044b2 <flash_write+0x2a>
            ((uint32_t) src >= 0x08000000 && ((uint32_t) src + byte_count) < 0x08010000) ||
 80044aa:	1970      	adds	r0, r6, r5
 80044ac:	4a24      	ldr	r2, [pc, #144]	; (8004540 <flash_write+0xb8>)
 80044ae:	4290      	cmp	r0, r2
 80044b0:	d92a      	bls.n	8004508 <flash_write+0x80>
 80044b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044b6:	d303      	bcc.n	80044c0 <flash_write+0x38>
            ((uint32_t) src >= 0x20000000 && ((uint32_t) src + byte_count) < 0x20005000)
 80044b8:	4419      	add	r1, r3
 80044ba:	4b22      	ldr	r3, [pc, #136]	; (8004544 <flash_write+0xbc>)
 80044bc:	4299      	cmp	r1, r3
 80044be:	d923      	bls.n	8004508 <flash_write+0x80>
        ));
    if (!valid) {
        debug_print("**** ERROR: Invalid flash write, dst "); debug_printhex_unsigned(dst); 
 80044c0:	4821      	ldr	r0, [pc, #132]	; (8004548 <flash_write+0xc0>)
 80044c2:	f7fe f9fb 	bl	80028bc <debug_print>
 80044c6:	4620      	mov	r0, r4
 80044c8:	f7fe fa44 	bl	8002954 <debug_printhex_unsigned>
        debug_print(", src "); debug_printhex_unsigned((uint32_t) src);
 80044cc:	481f      	ldr	r0, [pc, #124]	; (800454c <flash_write+0xc4>)
 80044ce:	f7fe f9f5 	bl	80028bc <debug_print>
 80044d2:	4630      	mov	r0, r6
 80044d4:	f7fe fa3e 	bl	8002954 <debug_printhex_unsigned>
        debug_print(", len "); debug_printhex_unsigned(byte_count); debug_println(""); debug_force_flush();
 80044d8:	481d      	ldr	r0, [pc, #116]	; (8004550 <flash_write+0xc8>)
 80044da:	f7fe f9ef 	bl	80028bc <debug_print>
 80044de:	4628      	mov	r0, r5
 80044e0:	f7fe fa38 	bl	8002954 <debug_printhex_unsigned>
 80044e4:	481b      	ldr	r0, [pc, #108]	; (8004554 <flash_write+0xcc>)
 80044e6:	f7fe f9bd 	bl	8002864 <debug_println>
 80044ea:	f7fe f94d 	bl	8002788 <debug_force_flush>
        //  Copy next page.
        dst += len;
        src += len;
        byte_count -= len;
    }
}
 80044ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint32_t offset = dst & (FLASH_PAGE_SIZE - 1);
 80044f2:	f3c4 0309 	ubfx	r3, r4, #0, #10
        memcpy(flashBuf + offset, src, len);
 80044f6:	463a      	mov	r2, r7
 80044f8:	4631      	mov	r1, r6
 80044fa:	4817      	ldr	r0, [pc, #92]	; (8004558 <flash_write+0xd0>)
 80044fc:	4418      	add	r0, r3
 80044fe:	f7fe f852 	bl	80025a6 <memcpy>
        dst += len;
 8004502:	443c      	add	r4, r7
        src += len;
 8004504:	443e      	add	r6, r7
        byte_count -= len;
 8004506:	1bed      	subs	r5, r5, r7
    while (byte_count > 0) {
 8004508:	2d00      	cmp	r5, #0
 800450a:	ddf0      	ble.n	80044ee <flash_write+0x66>
        int len = (byte_count > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : byte_count;
 800450c:	462f      	mov	r7, r5
 800450e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004512:	bfa8      	it	ge
 8004514:	f44f 6780 	movge.w	r7, #1024	; 0x400
        uint32_t newAddr = dst & ~(FLASH_PAGE_SIZE - 1);
 8004518:	f424 787f 	bic.w	r8, r4, #1020	; 0x3fc
 800451c:	f028 0803 	bic.w	r8, r8, #3
        if (newAddr != flashAddr) {  //  If the cache has a different page...
 8004520:	4b0e      	ldr	r3, [pc, #56]	; (800455c <flash_write+0xd4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4543      	cmp	r3, r8
 8004526:	d0e4      	beq.n	80044f2 <flash_write+0x6a>
            flash_flush();           //  Flush the previous cached page.
 8004528:	f7ff ff60 	bl	80043ec <flash_flush>
            flashAddr = newAddr;
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <flash_write+0xd4>)
 800452e:	f8c3 8000 	str.w	r8, [r3]
            memcpy(flashBuf, (void *)newAddr, FLASH_PAGE_SIZE);  //  Copy the current ROM page into the buffer.
 8004532:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004536:	4641      	mov	r1, r8
 8004538:	4807      	ldr	r0, [pc, #28]	; (8004558 <flash_write+0xd0>)
 800453a:	f7fe f834 	bl	80025a6 <memcpy>
 800453e:	e7d8      	b.n	80044f2 <flash_write+0x6a>
 8004540:	0800ffff 	.word	0x0800ffff
 8004544:	20004fff 	.word	0x20004fff
 8004548:	08005134 	.word	0x08005134
 800454c:	08004810 	.word	0x08004810
 8004550:	08004818 	.word	0x08004818
 8004554:	080046c4 	.word	0x080046c4
 8004558:	20004c00 	.word	0x20004c00
 800455c:	20000124 	.word	0x20000124

08004560 <bootloader_set_restart_callback>:
int bootloader_set_restart_callback(restart_callback_type *func) {
 8004560:	b508      	push	{r3, lr}
    boot_target_set_restart_callback(func);
 8004562:	f7fe fda7 	bl	80030b4 <boot_target_set_restart_callback>
}
 8004566:	2000      	movs	r0, #0
 8004568:	bd08      	pop	{r3, pc}

0800456a <sleep_us>:
    for (int i = 0; i < us*10; i++) {
 800456a:	2100      	movs	r1, #0
 800456c:	e001      	b.n	8004572 <sleep_us+0x8>
        __asm__("nop");
 800456e:	bf00      	nop
    for (int i = 0; i < us*10; i++) {
 8004570:	3101      	adds	r1, #1
 8004572:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8004576:	0053      	lsls	r3, r2, #1
 8004578:	428b      	cmp	r3, r1
 800457a:	dcf8      	bgt.n	800456e <sleep_us+0x4>
}
 800457c:	4770      	bx	lr

0800457e <boot_target_get_serial_number>:
}

void boot_target_get_serial_number(char* dest, size_t max_chars) {
 800457e:	b508      	push	{r3, lr}
    desig_get_unique_id_as_string(dest, max_chars+1);
 8004580:	3101      	adds	r1, #1
 8004582:	f7fc fad1 	bl	8000b28 <desig_get_unique_id_as_string>
}
 8004586:	bd08      	pop	{r3, pc}

08004588 <usb_descriptor_type>:
}
 8004588:	0a00      	lsrs	r0, r0, #8
 800458a:	4770      	bx	lr

0800458c <usb_descriptor_index>:
}
 800458c:	b2c0      	uxtb	r0, r0
 800458e:	4770      	bx	lr

08004590 <usb_descriptor_type>:
static int usb_descriptor_type(uint16_t wValue) { return wValue >> 8; }
 8004590:	0a00      	lsrs	r0, r0, #8
 8004592:	4770      	bx	lr

08004594 <usb_descriptor_index>:
static int usb_descriptor_index(uint16_t wValue) { return wValue & 0xFF; }
 8004594:	b2c0      	uxtb	r0, r0
 8004596:	4770      	bx	lr

08004598 <send_hf2_response>:
static void send_hf2_response(HF2_Buffer *pkt, int size) {
 8004598:	b500      	push	{lr}
 800459a:	b083      	sub	sp, #12
    volatile uint32_t dataToSendLength = 4 + size;
 800459c:	3104      	adds	r1, #4
 800459e:	9101      	str	r1, [sp, #4]
    pokeSend(dataToSend, dataToSendLength, dataToSendFlag);
 80045a0:	9901      	ldr	r1, [sp, #4]
 80045a2:	2240      	movs	r2, #64	; 0x40
 80045a4:	3002      	adds	r0, #2
 80045a6:	f7ff fad5 	bl	8003b54 <pokeSend>
}
 80045aa:	b003      	add	sp, #12
 80045ac:	f85d fb04 	ldr.w	pc, [sp], #4

080045b0 <build_bos_descriptor>:
									 uint8_t *buf, uint16_t len) {
 80045b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b4:	b083      	sub	sp, #12
 80045b6:	4682      	mov	sl, r0
 80045b8:	460c      	mov	r4, r1
 80045ba:	9101      	str	r1, [sp, #4]
 80045bc:	4616      	mov	r6, r2
	bytes_to_copy = MIN(len, bos->bLength);
 80045be:	f890 8000 	ldrb.w	r8, [r0]
 80045c2:	4590      	cmp	r8, r2
 80045c4:	bf28      	it	cs
 80045c6:	4690      	movcs	r8, r2
	memcpy(buf, bos, bytes_to_copy);
 80045c8:	4642      	mov	r2, r8
 80045ca:	4601      	mov	r1, r0
 80045cc:	4620      	mov	r0, r4
 80045ce:	f7fd ffea 	bl	80025a6 <memcpy>
	buf += bytes_to_copy;
 80045d2:	eb04 0908 	add.w	r9, r4, r8
	len -= bytes_to_copy;
 80045d6:	eba6 0608 	sub.w	r6, r6, r8
 80045da:	b2b6      	uxth	r6, r6
	totallen += bos->bLength;
 80045dc:	f89a b000 	ldrb.w	fp, [sl]
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 80045e0:	2500      	movs	r5, #0
 80045e2:	e018      	b.n	8004616 <build_bos_descriptor+0x66>
			bos->capabilities[i];
 80045e4:	f8da 3005 	ldr.w	r3, [sl, #5]
		const struct usb_device_capability_descriptor *cap =
 80045e8:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
		bytes_to_copy = MIN(len, cap->bLength);
 80045ec:	783c      	ldrb	r4, [r7, #0]
 80045ee:	42b4      	cmp	r4, r6
 80045f0:	bf28      	it	cs
 80045f2:	4634      	movcs	r4, r6
		memcpy(buf, cap, bytes_to_copy);
 80045f4:	4622      	mov	r2, r4
 80045f6:	4639      	mov	r1, r7
 80045f8:	4648      	mov	r0, r9
 80045fa:	f7fd ffd4 	bl	80025a6 <memcpy>
		buf += bytes_to_copy;
 80045fe:	44a1      	add	r9, r4
		len -= bytes_to_copy;
 8004600:	1b36      	subs	r6, r6, r4
 8004602:	b2b6      	uxth	r6, r6
		total += bytes_to_copy;
 8004604:	44a0      	add	r8, r4
 8004606:	fa1f f888 	uxth.w	r8, r8
		totallen += cap->bLength;
 800460a:	783b      	ldrb	r3, [r7, #0]
 800460c:	449b      	add	fp, r3
 800460e:	fa1f fb8b 	uxth.w	fp, fp
	for (i = 0; i < bos->bNumDeviceCaps; i++) {
 8004612:	3501      	adds	r5, #1
 8004614:	b2ad      	uxth	r5, r5
 8004616:	f89a 3004 	ldrb.w	r3, [sl, #4]
 800461a:	42ab      	cmp	r3, r5
 800461c:	d8e2      	bhi.n	80045e4 <build_bos_descriptor+0x34>
	*(uint16_t *)(tmpbuf + 2) = totallen;
 800461e:	9b01      	ldr	r3, [sp, #4]
 8004620:	f8a3 b002 	strh.w	fp, [r3, #2]
}
 8004624:	4640      	mov	r0, r8
 8004626:	b003      	add	sp, #12
 8004628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800462c <base_flash_program_array>:
int base_flash_program_array(uint16_t *dest0, const uint16_t *src0, size_t half_word_count0) {
 800462c:	b508      	push	{r3, lr}
	int bytes_flashed = baseloader_start((uint32_t *) dest0, (const uint32_t *) src0, half_word_count0 * 2);
 800462e:	0052      	lsls	r2, r2, #1
 8004630:	f7fb fd9a 	bl	8000168 <baseloader_start>
	return (bytes_flashed > 0) ? bytes_flashed / 2 : bytes_flashed;
 8004634:	2800      	cmp	r0, #0
 8004636:	dd02      	ble.n	800463e <base_flash_program_array+0x12>
 8004638:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800463c:	1040      	asrs	r0, r0, #1
}
 800463e:	bd08      	pop	{r3, pc}
 8004640:	202a2a2a 	.word	0x202a2a2a
 8004644:	206c6168 	.word	0x206c6168
 8004648:	2f737362 	.word	0x2f737362
 800464c:	61746164 	.word	0x61746164
 8004650:	69616620 	.word	0x69616620
 8004654:	2c64656c 	.word	0x2c64656c
 8004658:	73736220 	.word	0x73736220
 800465c:	7365745f 	.word	0x7365745f
 8004660:	203d2074 	.word	0x203d2074
 8004664:	00000000 	.word	0x00000000
 8004668:	6164202c 	.word	0x6164202c
 800466c:	745f6174 	.word	0x745f6174
 8004670:	20747365 	.word	0x20747365
 8004674:	0000203d 	.word	0x0000203d
 8004678:	00203f61 	.word	0x00203f61
 800467c:	00207b75 	.word	0x00207b75
 8004680:	0000207d 	.word	0x0000207d
 8004684:	2a2a2a2a 	.word	0x2a2a2a2a
 8004688:	7261742a 	.word	0x7261742a
 800468c:	5f746567 	.word	0x5f746567
 8004690:	696e6170 	.word	0x696e6170
 8004694:	00002063 	.word	0x00002063
 8004698:	3c207477 	.word	0x3c207477
 800469c:	00000000 	.word	0x00000000
 80046a0:	0000203e 	.word	0x0000203e
 80046a4:	70616568 	.word	0x70616568
 80046a8:	61747320 	.word	0x61747320
 80046ac:	203a7472 	.word	0x203a7472
 80046b0:	00000000 	.word	0x00000000
 80046b4:	6e65202c 	.word	0x6e65202c
 80046b8:	00203a64 	.word	0x00203a64
 80046bc:	6973202c 	.word	0x6973202c
 80046c0:	203a657a 	.word	0x203a657a
 80046c4:	00000000 	.word	0x00000000
 80046c8:	2c424b20 	.word	0x2c424b20
 80046cc:	61747320 	.word	0x61747320
 80046d0:	75206b63 	.word	0x75206b63
 80046d4:	3a646573 	.word	0x3a646573
 80046d8:	00000020 	.word	0x00000020
 80046dc:	00424b20 	.word	0x00424b20

080046e0 <chars.4166>:
 80046e0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 80046f0:	00000000                                ....

080046f4 <st_usbfs_v1_usb_driver>:
 80046f4:	08001199 080011d9 08001249 08001ff9     ........I.......
 8004704:	08002065 080013a9 0800216d 08001429     e ......m!..)...
 8004714:	080014b9 0800158d 00000000 00000000     ................
 8004724:	00000000 04000200 06000000 202a2a2a     ............*** 
 8004734:	6f636f63 6120736f 72657373 61662074     cocoos assert fa
 8004744:	64656c69 00000020 00000030 0000002d     iled ...0...-...
 8004754:	65764f28 6f6c6672 00002977 4f52445b     (Overflow)..[DRO
 8004764:	44455050 0000005d 00000a0d 2d2d2d2d     PPED].......----
 8004774:	74616c70 6d726f66 7465735f 00007075     platform_setup..
 8004784:	20637472 6b617761 2e2e2e65 00000000     rtc awake.......
 8004794:	20637472 6b617761 6b6f2065 00000000     rtc awake ok....
 80047a4:	3f6d6c61 00000020 74616c70 6d726f66     alm? ...platform
 80047b4:	6174735f 745f7472 72656d69 00000000     _start_timer....
 80047c4:	206f6f74 20676962 00000000 00207461     too big ....at .
 80047d4:	2d2d2d2d 746f6f62 64616f6c 00007265     ----bootloader..
 80047e4:	5f627375 75746573 00000070 2d2d2d2d     usb_setup...----
 80047f4:	65736162 64616f6c 00207265 756f6620     baseloader . fou
 8004804:	0020646e 6564202c 00207473 7273202c     nd ., dest ., sr
 8004814:	00002063 656c202c 0000206e 662a202c     c .., len .., *f
 8004824:	20636e75 00000000 20746f6e 6e756f66     unc ....not foun
 8004834:	00002064 6c6f202c 70706164 00000020     d .., oldapp ...
 8004844:	6f62202c 656c746f 0000206e 65736162     , bootlen ..base
 8004854:	64616f6c 66207265 656c6961 00002064     loader failed ..
 8004864:	746f6f62 7261745f 5f746567 5f746567     boot_target_get_
 8004874:	69726573 6e5f6c61 65626d75 00000072     serial_number...
 8004884:	5f627375 5f746573 69726573 6e5f6c61     usb_set_serial_n
 8004894:	65626d75 00000072 64627375 6c6f7020     umber...usbd pol
 80048a4:	676e696c 002e2e2e 74736572 69747261     ling....restarti
 80048b4:	2e2e676e 0000002e 656e6f64 00000000     ng......done....
 80048c4:	74736572 20747261 6c6c6163 6b636162     restart callback
 80048d4:	00000000 6f662820 64656372 00000029     .... (forced)...
 80048e4:	2d2d2d2d 746f6f62 64616f6c 6d207265     ----bootloader m
 80048f4:	2065646f 726f6628 29646563 00000000     ode (forced)....
 8004904:	2d2d2d2d 746f6f62 64616f6c 6d207265     ----bootloader m
 8004914:	2065646f 206f6e28 29707061 00000000     ode (no app)....
 8004924:	2d2d2d2d 6c707061 74616369 206e6f69     ----application 
 8004934:	65646f6d 00000000 746f6f62 70706120     mode....boot app
 8004944:	00000000 746f6f62 6f6f6220 616f6c74     ....boot bootloa
 8004954:	00726564 20746573 74736572 20747261     der.set restart 
 8004964:	6c6c6163 6b636162 00000020 20707061     callback ...app 
 8004974:	73697865 00007374 20707061 7373696d     exists..app miss
 8004984:	20676e69 00000000 00203d20 5f544553     ing .... = .SET_
 8004994:	00524441 00203e3e 202a2a2a 4f525245     ADR.>> .*** ERRO
 80049a4:	54203a52 6d206f6f 20796e61 746e6f63     R: Too many cont
 80049b4:	206c6f72 6c6c6163 6b636162 00000073     rol callbacks...
 80049c4:	202a2a2a 4f525245 54203a52 6d206f6f     *** ERROR: Too m
 80049d4:	20796e61 666e6f63 63206769 626c6c61     any config callb
 80049e4:	736b6361 00000000                       acks....

080049ec <bos_descriptor>:
 80049ec:	00000f05 00001c02 00000020              ........ ...

080049f8 <cdc_iface_assoc>:
 80049f8:	02010b08 06010202                       ........

08004a00 <cdcacm_functional_descriptors>:
 8004a00:	10002405 01240501 24040200 24050002     .$....$....$...$
 8004a10:	00020106                                ....

08004a14 <comm_endp>:
 8004a14:	03840507 00ff0010 00000000 00000000     ................

08004a24 <comm_iface>:
 8004a24:	00010409 01020201 004a1407 004a0008     ..........J...J.
 8004a34:	00001308 00000000                       ........

08004a3c <config>:
 8004a3c:	00000209 80000103 004b5cfa 00000008     .........\K.....

08004a4c <data_endp>:
 8004a4c:	02030507 00010040 00000000 07000000     ....@...........
 8004a5c:	40028305 00000100 00000000 00000000     ...@............

08004a6c <data_iface>:
 8004a6c:	00020409 00000a02 004a4c08 00000008     .........LJ.....
	...

08004a84 <dev>:
 8004a84:	02100112 400102ef db421209 02010221     .......@..B.!...
 8004a94:	00000103 00202f20 70797420 00000020     .... / . typ ...
 8004aa4:	6572202c 00002071 6176202c 0000206c     , req .., val ..
 8004ab4:	6469202c 00002078 4547202c 45445f54     , idx .., GET_DE
 8004ac4:	00000053 5645445f 00000000 4746435f     S..._DEV...._CFG
 8004ad4:	00000000 5254535f 00000000 464e495f     ...._STR...._INF
 8004ae4:	00000000 504e455f 00000000 534f425f     ...._ENP...._BOS
 8004af4:	00000000 4553202c 44415f54 20202052     ...., SET_ADR   
 8004b04:	00000020 4553202c 46435f54 20202047      ..., SET_CFG   
 8004b14:	00000020 0000002c 00207420 00206920      ...,... t . i .

08004b24 <hf2_endp>:
 8004b24:	02020507 00000040 00000000 07000000     ....@...........
 8004b34:	40028205 00000000 00000000 00000000     ...@............

08004b44 <hf2_iface>:
 8004b44:	00000409 012aff02 004b2409 00000008     ......*..$K.....
	...

08004b5c <interfaces>:
 8004b5c:	00000000 00000001 00000000 08004b44     ............DK..
 8004b6c:	00000000 00000001 080049f8 08004a24     .........I..$J..
 8004b7c:	00000000 00000001 00000000 08004a6c     ............lJ..
 8004b8c:	202a2a2a 4f525245 73203a52 615f7465     *** ERROR: set_a
 8004b9c:	65726767 65746167 6c61635f 6361626c     ggregate_callbac
 8004bac:	6166206b 64656c69 00000000 61766544     k failed....Deva
 8004bbc:	6372616e 00007968 42504144 20746f6f     narchy..DAPBoot 
 8004bcc:	20554644 746f6f42 64616f6c 00007265     DFU Bootloader..
 8004bdc:	42504144 20746f6f 00554644 65756c42     DAPBoot DFU.Blue
 8004bec:	6c695020 534d206c 00000043 65756c42      Pill MSC...Blue
 8004bfc:	6c695020 6553206c 6c616972 726f5020      Pill Serial Por
 8004c0c:	00000074 65756c42 6c695020 4f43206c     t...Blue Pill CO
 8004c1c:	00004d4d 65756c42 6c695020 4144206c     MM..Blue Pill DA
 8004c2c:	00004154 65756c42 6c695020 4648206c     TA..Blue Pill HF
 8004c3c:	00000032 75736976 6c626c61 69706575     2...visualbluepi
 8004c4c:	672e6c6c 75687469 6f692e62 00000000     ll.github.io....
 8004c5c:	202a2a2a 5f627375 75746573 61662070     *** usb_setup fa
 8004c6c:	64656c69 00000000 202a2a2a 75626577     iled....*** webu
 8004c7c:	6e206273 7573746f 69207070 7865646e     sb notsupp index
 8004c8c:	00000020 75626577 00006c72 202a2a2a      ...weburl..*** 
 8004c9c:	75626577 6e206273 7573746f 77207070     webusb notsupp w
 8004cac:	65646e49 00002078                       Index ..

08004cb4 <webusb_platform_capability_descriptor>:
 8004cb4:	00051018 3408b638 47a009a9 76a0fd8b     ....8..4...G...v
 8004cc4:	65b61588 01220100 202a2a2a 75626577     ...e..".*** webu
 8004cd4:	735f6273 635f7465 69666e6f 61662067     sb_set_config fa
 8004ce4:	64656c69 00000000 202a2a2a 75626577     iled....*** webu
 8004cf4:	735f6273 70757465 69616620 0064656c     sb_setup failed.

08004d04 <guid>:
 8004d04:	00000092 00050100 00880001 00070000     ................
 8004d14:	002a0000 00650044 00690076 00650063     ..*.D.e.v.i.c.e.
 8004d24:	006e0049 00650074 00660072 00630061     I.n.t.e.r.f.a.c.
 8004d34:	00470065 00490055 00730044 00500000     e.G.U.I.D.s...P.
 8004d44:	007b0000 00320030 00330036 00350062     ..{.0.2.6.3.b.5.
 8004d54:	00320031 0038002d 00630038 002d0062     1.2.-.8.8.c.b.-.
 8004d64:	00310034 00360033 0039002d 00310036     4.1.3.6.-.9.6.1.
 8004d74:	002d0033 00630035 00650038 00300031     3.-.5.c.8.e.1.0.
 8004d84:	00640039 00650038 00350066 0000007d     9.d.8.e.f.5.}...
 8004d94:	00000000                                ....

08004d98 <microsoft_platform_capability_descriptor>:
 8004d98:	0005101c d8dd60df 4cc74589 9d65d29c     .....`...E.L..e.
 8004da8:	9f8a649e 06030000 002100b2 646e6977     .d........!.wind
 8004db8:	00007365 696e6977 00000064 706e6977     es..winid...winp
 8004dc8:	00007072 656e6977 00000065 202a2a2a     rp..winee...*** 
 8004dd8:	756e6977 735f6273 635f7465 69666e6f     winusb_set_confi
 8004de8:	61662067 64656c69 00000000 202a2a2a     g failed....*** 
 8004df8:	756e6977 735f6273 70757465 69616620     winusb_setup fai
 8004e08:	0064656c                                led.

08004e0c <winusb_string_descriptor>:
 8004e0c:	004d0312 00460053 00310054 00300030     ..M.S.F.T.1.0.0.
 8004e1c:	00000021 202a2a2a 5f636463 75746573     !...*** cdc_setu
 8004e2c:	61662070 64656c69 00000000 6d6d6f63     p failed....comm
 8004e3c:	00000000 202a2a2a 61636463 635f6d63     ....*** cdcacm_c
 8004e4c:	72746e6f 6e206c6f 7573746f 6c207070     ontrol notsupp l
 8004e5c:	5f656e69 69646f63 0020676e 202a2a2a     ine_coding .*** 
 8004e6c:	61636463 735f6d63 635f7465 69666e6f     cdcacm_set_confi
 8004e7c:	61662067 64656c69 00000000              g failed....

08004e88 <line_coding>:
 8004e88:	0001c200 00080000 202a2a2a 4f525245     ........*** ERRO
 8004e98:	00203a52                                R: .

08004e9c <bad_packet_message>:
 8004e9c:	20646162 6b636170 00007465 20326668     bad packet..hf2 
 8004eac:	62203e3e 6e696e69 00006f66 20326668     >> bininfo..hf2 
 8004ebc:	20667562 206f6f74 6c616d73 0000006c     buf too small...
 8004ecc:	20326668 69203e3e 006f666e 74706d65     hf2 >> info.empt
 8004edc:	66682079 6e692032 00006f66 20326668     y hf2 info..hf2 
 8004eec:	73203e3e 74726174 00000000 20326668     >> start....hf2 
 8004efc:	66203e3e 6873616c 00000000 20326668     >> flash....hf2 
 8004f0c:	61203e3e 00007070 20326668 62203e3e     >> app..hf2 >> b
 8004f1c:	00746f6f 20326668 72203e3e 00646165     oot.hf2 >> read.
 8004f2c:	20326668 75203e3e 6f6e6b6e 00206e77     hf2 >> unknown .
 8004f3c:	21212120 00000020 20326668 66203e3e      !!! ...hf2 >> f
 8004f4c:	6873616c 00000020 646e6966 63657620     lash ...find vec
 8004f5c:	2e726f74 00002e2e 6e756f66 65762064     tor.....found ve
 8004f6c:	726f7463 7061202c 00002070 6f62202c     ctor, app .., bo
 8004f7c:	7320746f 20657a69 00000000 6162202c     ot size ...., ba
 8004f8c:	73206573 20657a69 00000000 202a2a2a     se size ....*** 
 8004f9c:	4f525245 49203a52 6c61766e 61206469     ERROR: Invalid a
 8004fac:	20726464 00000000 746f7277 6f622065     ddr ....wrote bo
 8004fbc:	6f6c746f 72656461 00000000 706d6f63     otloader....comp
 8004fcc:	20657261 746f6f62 64616f6c 2e2e7265     are bootloader..
 8004fdc:	0000002e 746f6f62 64616f6c 63207265     ....bootloader c
 8004fec:	676e6168 00006465 79706f63 73616220     hanged..copy bas
 8004ffc:	616f6c65 20726564 00206f74 6973202c     eloader to ., si
 800500c:	0020657a 74736572 20747261 62206f74     ze .restart to b
 800501c:	6c657361 6564616f 00002072 6162202c     aseloader .., ba
 800502c:	656c6573 0000206e 746f6f62 64616f6c     selen ..bootload
 800503c:	69207265 746e6564 6c616369 00000020     er identical ...
 800504c:	202a2a2a 4f525245 63203a52 6b636568     *** ERROR: check
 800505c:	61746144 657a6953 69616620 0064656c     DataSize failed.
 800506c:	20326668 20746573 666e6f63 00006769     hf2 set config..
 800507c:	73616c66 6c612068 20776f6c 00000000     flash allow ....
 800508c:	206f7420 00000000 202a2a2a 5f326668      to ....*** hf2_
 800509c:	75746573 61662070 64656c69 00000000     setup failed....
 80050ac:	20326668 00003c3c 20326668 00203c3c     hf2 <<..hf2 << .
 80050bc:	202a2a2a 32627375 65735f31 6f635f74     *** usb21_set_co
 80050cc:	6769666e 69616620 0064656c 202a2a2a     nfig failed.*** 
 80050dc:	32627375 65735f31 20707574 6c696166     usb21_setup fail
 80050ec:	00006465 202a2a2a 32627375 65645f31     ed..*** usb21_de
 80050fc:	69726373 726f7470 206f6e20 20736f62     scriptor no bos 
 800510c:	00000000 00736f62 00203e2d 202a2a2a     ....bos.-> .*** 
 800511c:	4f525245 46203a52 6873616c 69616620     ERROR: Flash fai
 800512c:	2064656c 00000000 2a2a2a2a 52524520     led ....**** ERR
 800513c:	203a524f 61766e49 2064696c 73616c66     OR: Invalid flas
 800514c:	72772068 2c657469 74736420 00000020     h write, dst ...

0800515c <infoUf2File>:
 800515c:	20324655 746f6f42 64616f6c 76207265     UF2 Bootloader v
 800516c:	2e312e31 46532033 4d0a0d41 6c65646f     1.1.3 SFA..Model
 800517c:	5453203a 4232334d 5045554c 0d4c4c49     : STM32BLUEPILL.
 800518c:	616f420a 492d6472 53203a44 32334d54     .Board-ID: STM32
 800519c:	33303146 422d3843 5065756c 2d6c6c69     F103C8-BluePill-
 80051ac:	0a0d3076 00000000                       v0......

Disassembly of section .text:

08006c00 <application_start>:
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
        for(;;) {}
    }
}

extern "C" void application_start(void) {
 8006c00:	b510      	push	{r4, lr}
	//  application_start() is always located at a fixed address (_text) so we can change the application easily.
	funcp_t *fp;

	//  Copy Application data section from ROM to RAM.
	volatile uint32_t *src = &_data_loadaddr;
	volatile uint32_t *dest = &_data;
 8006c02:	4b17      	ldr	r3, [pc, #92]	; (8006c60 <application_start+0x60>)
	volatile uint32_t *src = &_data_loadaddr;
 8006c04:	4917      	ldr	r1, [pc, #92]	; (8006c64 <application_start+0x64>)
	while (dest < &_edata) {
 8006c06:	4a18      	ldr	r2, [pc, #96]	; (8006c68 <application_start+0x68>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d204      	bcs.n	8006c16 <application_start+0x16>
		*dest = *src;
 8006c0c:	f851 2b04 	ldr.w	r2, [r1], #4
 8006c10:	f843 2b04 	str.w	r2, [r3], #4
	while (dest < &_edata) {
 8006c14:	e7f7      	b.n	8006c06 <application_start+0x6>
		src = src + 1;
		dest = dest + 1;
	}

	//  Init variables in Application BSS section to null.
	while (dest < &_ebss) { *dest++ = 0; }
 8006c16:	4a15      	ldr	r2, [pc, #84]	; (8006c6c <application_start+0x6c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d203      	bcs.n	8006c24 <application_start+0x24>
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	3304      	adds	r3, #4
 8006c22:	e7f8      	b.n	8006c16 <application_start+0x16>

	//  Call any init functions here.
	pre_main();
 8006c24:	f001 f9ca 	bl	8007fbc <_ZL8pre_mainv>
	
	//  Call C++ constructors for Application.
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8006c28:	4c11      	ldr	r4, [pc, #68]	; (8006c70 <application_start+0x70>)
 8006c2a:	4b12      	ldr	r3, [pc, #72]	; (8006c74 <application_start+0x74>)
 8006c2c:	429c      	cmp	r4, r3
 8006c2e:	d203      	bcs.n	8006c38 <application_start+0x38>
		(*fp)();
 8006c30:	f854 3b04 	ldr.w	r3, [r4], #4
 8006c34:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8006c36:	e7f8      	b.n	8006c2a <application_start+0x2a>
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8006c38:	4c0f      	ldr	r4, [pc, #60]	; (8006c78 <application_start+0x78>)
 8006c3a:	4b10      	ldr	r3, [pc, #64]	; (8006c7c <application_start+0x7c>)
 8006c3c:	429c      	cmp	r4, r3
 8006c3e:	d203      	bcs.n	8006c48 <application_start+0x48>
		(*fp)();
 8006c40:	f854 3b04 	ldr.w	r3, [r4], #4
 8006c44:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8006c46:	e7f8      	b.n	8006c3a <application_start+0x3a>
	}

	//  Call the application's entry point.
	main();
 8006c48:	f000 f81e 	bl	8006c88 <main>

	//  Call C++ destructors.  Not used because we never return from main().
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8006c4c:	4c0c      	ldr	r4, [pc, #48]	; (8006c80 <application_start+0x80>)
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <application_start+0x84>)
 8006c50:	429c      	cmp	r4, r3
 8006c52:	d203      	bcs.n	8006c5c <application_start+0x5c>
		(*fp)();
 8006c54:	f854 3b04 	ldr.w	r3, [r4], #4
 8006c58:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 8006c5a:	e7f8      	b.n	8006c4e <application_start+0x4e>
	}
}
 8006c5c:	bd10      	pop	{r4, pc}
 8006c5e:	bf00      	nop
 8006c60:	20001000 	.word	0x20001000
 8006c64:	0800a814 	.word	0x0800a814
 8006c68:	20001008 	.word	0x20001008
 8006c6c:	20002218 	.word	0x20002218
 8006c70:	0800a800 	.word	0x0800a800
 8006c74:	0800a800 	.word	0x0800a800
 8006c78:	0800a800 	.word	0x0800a800
 8006c7c:	0800a814 	.word	0x0800a814
 8006c80:	0800a814 	.word	0x0800a814
 8006c84:	0800a814 	.word	0x0800a814

08006c88 <main>:
static void debug_dump(codal::STM32BluePill& bluepill, const char *msg);

//  Blue Pill constructor will generate debug messages, make sure that the target has been initialised.
STM32BluePill bluepill;

int main() {
 8006c88:	b508      	push	{r3, lr}
    bluepill.init();
 8006c8a:	4c03      	ldr	r4, [pc, #12]	; (8006c98 <main+0x10>)
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f001 fa9f 	bl	80081d0 <_ZN5codal13STM32BluePill4initEv>
    Blink_main(bluepill);
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 f85c 	bl	8006d50 <_Z10Blink_mainRN5codal13STM32BluePillE>
 8006c98:	20001008 	.word	0x20001008

08006c9c <_ZN5codal14CodalComponent4initEv>:

        /**
          * Implement this function to receive a function call after the devices'
          * device model has been instantiated.
          */
        virtual int init() { return DEVICE_NOT_SUPPORTED; }
 8006c9c:	4800      	ldr	r0, [pc, #0]	; (8006ca0 <_ZN5codal14CodalComponent4initEv+0x4>)
 8006c9e:	4770      	bx	lr
 8006ca0:	fffffc16 	.word	0xfffffc16

08006ca4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>:

        //  At t = 30 seconds, device should wakeup by alarm and restart as though t = 0.
    }
}

static void debug_dump(codal::STM32BluePill& bluepill, const char *msg) {
 8006ca4:	b508      	push	{r3, lr}
    debug_print(msg);
 8006ca6:	4608      	mov	r0, r1
 8006ca8:	f7fb fe08 	bl	80028bc <debug_print>
    debug_print(" t "); debug_print((size_t) (millis() / 1000)); 
 8006cac:	480a      	ldr	r0, [pc, #40]	; (8006cd8 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc+0x34>)
 8006cae:	f7fb fe05 	bl	80028bc <debug_print>
 8006cb2:	f7fb ff85 	bl	8002bc0 <millis>
 8006cb6:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <_ZL10debug_dumpRN5codal13STM32BluePillEPKc+0x38>)
 8006cb8:	fba3 3000 	umull	r3, r0, r3, r0
 8006cbc:	0980      	lsrs	r0, r0, #6
 8006cbe:	f7fb fd73 	bl	80027a8 <_Z11debug_printj>
    // debug_print(", ms "); debug_print((size_t) bluepill.timer.getTime()); 
    // debug_print(", us "); debug_print((size_t) bluepill.timer.getTimeUs()); 
    debug_print(", alm "); debug_print((size_t) platform_alarm_count()); 
 8006cc2:	4807      	ldr	r0, [pc, #28]	; (8006ce0 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc+0x3c>)
 8006cc4:	f7fb fdfa 	bl	80028bc <debug_print>
 8006cc8:	f7fb ff66 	bl	8002b98 <platform_alarm_count>
 8006ccc:	f7fb fd6c 	bl	80027a8 <_Z11debug_printj>
    // debug_print(", tick "); debug_print((size_t) platform_tick_count()); 
    debug_println(""); 
 8006cd0:	4804      	ldr	r0, [pc, #16]	; (8006ce4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc+0x40>)
 8006cd2:	f7fb fdc7 	bl	8002864 <debug_println>
    ////debug_flush(); ////
}
 8006cd6:	bd08      	pop	{r3, pc}
 8006cd8:	0800a280 	.word	0x0800a280
 8006cdc:	10624dd3 	.word	0x10624dd3
 8006ce0:	0800a284 	.word	0x0800a284
 8006ce4:	0800a428 	.word	0x0800a428

08006ce8 <_Z41__static_initialization_and_destruction_0ii>:
 8006ce8:	2801      	cmp	r0, #1
 8006cea:	d000      	beq.n	8006cee <_Z41__static_initialization_and_destruction_0ii+0x6>
 8006cec:	4770      	bx	lr
 8006cee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006cf2:	4299      	cmp	r1, r3
 8006cf4:	d1fa      	bne.n	8006cec <_Z41__static_initialization_and_destruction_0ii+0x4>
 8006cf6:	b510      	push	{r4, lr}
STM32BluePill bluepill;
 8006cf8:	4c04      	ldr	r4, [pc, #16]	; (8006d0c <_Z41__static_initialization_and_destruction_0ii+0x24>)
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f001 faa8 	bl	8008250 <_ZN5codal13STM32BluePillC1Ev>
 8006d00:	4a03      	ldr	r2, [pc, #12]	; (8006d10 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8006d02:	4904      	ldr	r1, [pc, #16]	; (8006d14 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8006d04:	4620      	mov	r0, r4
 8006d06:	f7f9 fe67 	bl	80009d8 <__aeabi_atexit>
}
 8006d0a:	bd10      	pop	{r4, pc}
 8006d0c:	20001008 	.word	0x20001008
 8006d10:	20000164 	.word	0x20000164
 8006d14:	08006dc5 	.word	0x08006dc5

08006d18 <_ZN5codal14CodalComponentD1Ev>:

        /**
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
 8006d18:	b510      	push	{r4, lr}
 8006d1a:	4604      	mov	r4, r0
        {
 8006d1c:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <_ZN5codal14CodalComponentD1Ev+0x14>)
 8006d1e:	6003      	str	r3, [r0, #0]
            status = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	80c3      	strh	r3, [r0, #6]
            removeComponent();
 8006d24:	f000 f94a 	bl	8006fbc <_ZN5codal14CodalComponent15removeComponentEv>
        }
 8006d28:	4620      	mov	r0, r4
 8006d2a:	bd10      	pop	{r4, pc}
 8006d2c:	0800a244 	.word	0x0800a244

08006d30 <_ZN5codal14CodalComponentD0Ev>:
        virtual ~CodalComponent()
 8006d30:	b510      	push	{r4, lr}
 8006d32:	4604      	mov	r4, r0
        {
 8006d34:	4b05      	ldr	r3, [pc, #20]	; (8006d4c <_ZN5codal14CodalComponentD0Ev+0x1c>)
 8006d36:	6003      	str	r3, [r0, #0]
            status = 0;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	80c3      	strh	r3, [r0, #6]
            removeComponent();
 8006d3c:	f000 f93e 	bl	8006fbc <_ZN5codal14CodalComponent15removeComponentEv>
        }
 8006d40:	4620      	mov	r0, r4
 8006d42:	f7fb ff39 	bl	8002bb8 <_ZdlPv>
 8006d46:	4620      	mov	r0, r4
 8006d48:	bd10      	pop	{r4, pc}
 8006d4a:	bf00      	nop
 8006d4c:	0800a244 	.word	0x0800a244

08006d50 <_Z10Blink_mainRN5codal13STM32BluePillE>:
void Blink_main(codal::STM32BluePill& bluepill) {
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	4605      	mov	r5, r0
    debug_dump(bluepill, "set led");
 8006d54:	4915      	ldr	r1, [pc, #84]	; (8006dac <_Z10Blink_mainRN5codal13STM32BluePillE+0x5c>)
 8006d56:	f7ff ffa5 	bl	8006ca4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
	bluepill.io.led.setDigitalValue(0);
 8006d5a:	f505 6679 	add.w	r6, r5, #3984	; 0xf90
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4630      	mov	r0, r6
 8006d62:	f000 ffc3 	bl	8007cec <_ZN5codal3_cm3Pin15setDigitalValueEi>
    debug_dump(bluepill, "target wait");
 8006d66:	4912      	ldr	r1, [pc, #72]	; (8006db0 <_Z10Blink_mainRN5codal13STM32BluePillE+0x60>)
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f7ff ff9b 	bl	8006ca4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
    target_wait_us(1000000);  //  Test the RTC.
 8006d6e:	4811      	ldr	r0, [pc, #68]	; (8006db4 <_Z10Blink_mainRN5codal13STM32BluePillE+0x64>)
 8006d70:	f7f9 fdae 	bl	80008d0 <target_wait_us>
    debug_dump(bluepill, "sleep");
 8006d74:	4910      	ldr	r1, [pc, #64]	; (8006db8 <_Z10Blink_mainRN5codal13STM32BluePillE+0x68>)
 8006d76:	4628      	mov	r0, r5
 8006d78:	f7ff ff94 	bl	8006ca4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
     * @return STM32BLUEPILL_OK on success, STM32BLUEPILL_INVALID_PARAMETER milliseconds is less than zero.
     *
     */
    inline void STM32BluePill::sleep(uint32_t milliseconds)
    {
        fiber_sleep(milliseconds);
 8006d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d80:	f000 fc18 	bl	80075b4 <_ZN5codal11fiber_sleepEm>
    debug_dump(bluepill, "loop");
 8006d84:	490d      	ldr	r1, [pc, #52]	; (8006dbc <_Z10Blink_mainRN5codal13STM32BluePillE+0x6c>)
 8006d86:	4628      	mov	r0, r5
 8006d88:	f7ff ff8c 	bl	8006ca4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
	int state = 1;
 8006d8c:	2401      	movs	r4, #1
		bluepill.io.led.setDigitalValue(state);
 8006d8e:	4621      	mov	r1, r4
 8006d90:	4630      	mov	r0, r6
 8006d92:	f000 ffab 	bl	8007cec <_ZN5codal3_cm3Pin15setDigitalValueEi>
        debug_dump(bluepill, "slp");
 8006d96:	490a      	ldr	r1, [pc, #40]	; (8006dc0 <_Z10Blink_mainRN5codal13STM32BluePillE+0x70>)
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f7ff ff83 	bl	8006ca4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
 8006d9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006da2:	f000 fc07 	bl	80075b4 <_ZN5codal11fiber_sleepEm>
        state = !state;
 8006da6:	f084 0401 	eor.w	r4, r4, #1
 8006daa:	e7f0      	b.n	8006d8e <_Z10Blink_mainRN5codal13STM32BluePillE+0x3e>
 8006dac:	0800a258 	.word	0x0800a258
 8006db0:	0800a260 	.word	0x0800a260
 8006db4:	000f4240 	.word	0x000f4240
 8006db8:	0800a26c 	.word	0x0800a26c
 8006dbc:	0800a274 	.word	0x0800a274
 8006dc0:	0800a27c 	.word	0x0800a27c

08006dc4 <_ZN5codal13STM32BluePillD1Ev>:
    class STM32BluePill : public CodalComponent
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	4b0d      	ldr	r3, [pc, #52]	; (8006e00 <_ZN5codal13STM32BluePillD1Ev+0x3c>)
 8006dca:	6003      	str	r3, [r0, #0]
        /**
          * Class definition for DeviceSerial.
          *
          * Represents an instance of RawSerial which accepts codal device specific data types.
          */
        class Serial : public codal::Serial
 8006dcc:	f241 0010 	movw	r0, #4112	; 0x1010
 8006dd0:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <_ZN5codal13STM32BluePillD1Ev+0x40>)
 8006dd2:	5023      	str	r3, [r4, r0]
 8006dd4:	4420      	add	r0, r4
 8006dd6:	f000 fd23 	bl	8007820 <_ZN5codal6SerialD1Ev>
 8006dda:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8006dde:	f000 fed5 	bl	8007b8c <_ZN5codal10MessageBusD1Ev>

namespace codal
{
    namespace _cm
    {
        class Timer : public codal::Timer
 8006de2:	4620      	mov	r0, r4
 8006de4:	4b08      	ldr	r3, [pc, #32]	; (8006e08 <_ZN5codal13STM32BluePillD1Ev+0x44>)
 8006de6:	f840 3f08 	str.w	r3, [r0, #8]!
 8006dea:	f002 fc52 	bl	8009692 <_ZN5codal5TimerD1Ev>
        {
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <_ZN5codal13STM32BluePillD1Ev+0x48>)
 8006df0:	6023      	str	r3, [r4, #0]
            status = 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	80e3      	strh	r3, [r4, #6]
            removeComponent();
 8006df6:	4620      	mov	r0, r4
 8006df8:	f000 f8e0 	bl	8006fbc <_ZN5codal14CodalComponent15removeComponentEv>
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	bd10      	pop	{r4, pc}
 8006e00:	0800a5b8 	.word	0x0800a5b8
 8006e04:	0800a394 	.word	0x0800a394
 8006e08:	0800a3f4 	.word	0x0800a3f4
 8006e0c:	0800a244 	.word	0x0800a244

08006e10 <_ZN5codal13STM32BluePillD0Ev>:
 8006e10:	b510      	push	{r4, lr}
 8006e12:	4604      	mov	r4, r0
 8006e14:	4b0f      	ldr	r3, [pc, #60]	; (8006e54 <_ZN5codal13STM32BluePillD0Ev+0x44>)
 8006e16:	6003      	str	r3, [r0, #0]
 8006e18:	f241 0010 	movw	r0, #4112	; 0x1010
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <_ZN5codal13STM32BluePillD0Ev+0x48>)
 8006e1e:	5023      	str	r3, [r4, r0]
 8006e20:	4420      	add	r0, r4
 8006e22:	f000 fcfd 	bl	8007820 <_ZN5codal6SerialD1Ev>
 8006e26:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8006e2a:	f000 feaf 	bl	8007b8c <_ZN5codal10MessageBusD1Ev>
 8006e2e:	4620      	mov	r0, r4
 8006e30:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <_ZN5codal13STM32BluePillD0Ev+0x4c>)
 8006e32:	f840 3f08 	str.w	r3, [r0, #8]!
 8006e36:	f002 fc2c 	bl	8009692 <_ZN5codal5TimerD1Ev>
        {
 8006e3a:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <_ZN5codal13STM32BluePillD0Ev+0x50>)
 8006e3c:	6023      	str	r3, [r4, #0]
            status = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	80e3      	strh	r3, [r4, #6]
            removeComponent();
 8006e42:	4620      	mov	r0, r4
 8006e44:	f000 f8ba 	bl	8006fbc <_ZN5codal14CodalComponent15removeComponentEv>
 8006e48:	4620      	mov	r0, r4
 8006e4a:	f7fb feb5 	bl	8002bb8 <_ZdlPv>
 8006e4e:	4620      	mov	r0, r4
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	bf00      	nop
 8006e54:	0800a5b8 	.word	0x0800a5b8
 8006e58:	0800a394 	.word	0x0800a394
 8006e5c:	0800a3f4 	.word	0x0800a3f4
 8006e60:	0800a244 	.word	0x0800a244

08006e64 <_Z41__static_initialization_and_destruction_0ii>:
  //  Log the character in hex e.g. '\r' becomes "[0x0d]"
  debug_print("[0x");
  debug_write((uint8_t) nibbleToHex[ch / 16]);
  debug_write((uint8_t) nibbleToHex[ch % 16]);
  debug_print("]");
}
 8006e64:	2801      	cmp	r0, #1
 8006e66:	d000      	beq.n	8006e6a <_Z41__static_initialization_and_destruction_0ii+0x6>
 8006e68:	4770      	bx	lr
 8006e6a:	b508      	push	{r3, lr}
 8006e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e70:	4299      	cmp	r1, r3
 8006e72:	d000      	beq.n	8006e76 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8006e74:	bd08      	pop	{r3, pc}
UARTInterface serialPort(UART_RX_PORT, UART_TX_PORT);  //  UART port for send/receive.
 8006e76:	2204      	movs	r2, #4
 8006e78:	2105      	movs	r1, #5
 8006e7a:	4802      	ldr	r0, [pc, #8]	; (8006e84 <_Z41__static_initialization_and_destruction_0ii+0x20>)
 8006e7c:	f003 f898 	bl	8009fb0 <_ZN13UARTInterfaceC1Ejj>
}
 8006e80:	e7f8      	b.n	8006e74 <_Z41__static_initialization_and_destruction_0ii+0x10>
 8006e82:	bf00      	nop
 8006e84:	2000204c 	.word	0x2000204c

08006e88 <_Z18component_callbackN5codal5EventE>:

/**
  * The periodic callback for all components.
  */
void component_callback(Event evt)
{
 8006e88:	b530      	push	{r4, r5, lr}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	ab02      	add	r3, sp, #8
 8006e8e:	e903 0003 	stmdb	r3, {r0, r1}
    uint8_t i = 0;

    if(evt.value == DEVICE_COMPONENT_EVT_SYSTEM_TICK)
 8006e92:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8006e96:	2d01      	cmp	r5, #1
 8006e98:	d004      	beq.n	8006ea4 <_Z18component_callbackN5codal5EventE+0x1c>
    uint8_t i = 0;
 8006e9a:	2400      	movs	r4, #0

            i++;
        }
    }

    if(evt.value == DEVICE_SCHEDULER_EVT_IDLE)
 8006e9c:	2d02      	cmp	r5, #2
 8006e9e:	d016      	beq.n	8006ece <_Z18component_callbackN5codal5EventE+0x46>
                CodalComponent::components[i]->idleCallback();

            i++;
        }
    }
}
 8006ea0:	b003      	add	sp, #12
 8006ea2:	bd30      	pop	{r4, r5, pc}
    uint8_t i = 0;
 8006ea4:	2400      	movs	r4, #0
 8006ea6:	e001      	b.n	8006eac <_Z18component_callbackN5codal5EventE+0x24>
            i++;
 8006ea8:	3401      	adds	r4, #1
 8006eaa:	b2e4      	uxtb	r4, r4
        while(i < DEVICE_COMPONENT_COUNT)
 8006eac:	2c3b      	cmp	r4, #59	; 0x3b
 8006eae:	d8f5      	bhi.n	8006e9c <_Z18component_callbackN5codal5EventE+0x14>
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_SYSTEM_TICK)
 8006eb0:	4b0e      	ldr	r3, [pc, #56]	; (8006eec <_Z18component_callbackN5codal5EventE+0x64>)
 8006eb2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d0f6      	beq.n	8006ea8 <_Z18component_callbackN5codal5EventE+0x20>
 8006eba:	88c3      	ldrh	r3, [r0, #6]
 8006ebc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006ec0:	d0f2      	beq.n	8006ea8 <_Z18component_callbackN5codal5EventE+0x20>
                CodalComponent::components[i]->periodicCallback();
 8006ec2:	6803      	ldr	r3, [r0, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	4798      	blx	r3
 8006ec8:	e7ee      	b.n	8006ea8 <_Z18component_callbackN5codal5EventE+0x20>
            i++;
 8006eca:	3401      	adds	r4, #1
 8006ecc:	b2e4      	uxtb	r4, r4
        while(i < DEVICE_COMPONENT_COUNT)
 8006ece:	2c3b      	cmp	r4, #59	; 0x3b
 8006ed0:	d8e6      	bhi.n	8006ea0 <_Z18component_callbackN5codal5EventE+0x18>
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_IDLE_TICK)
 8006ed2:	4b06      	ldr	r3, [pc, #24]	; (8006eec <_Z18component_callbackN5codal5EventE+0x64>)
 8006ed4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006ed8:	2800      	cmp	r0, #0
 8006eda:	d0f6      	beq.n	8006eca <_Z18component_callbackN5codal5EventE+0x42>
 8006edc:	88c3      	ldrh	r3, [r0, #6]
 8006ede:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8006ee2:	d0f2      	beq.n	8006eca <_Z18component_callbackN5codal5EventE+0x42>
                CodalComponent::components[i]->idleCallback();
 8006ee4:	6803      	ldr	r3, [r0, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	4798      	blx	r3
 8006eea:	e7ee      	b.n	8006eca <_Z18component_callbackN5codal5EventE+0x42>
 8006eec:	20002050 	.word	0x20002050

08006ef0 <_ZN5codal14CodalComponent12addComponentEv>:
/**
  * Adds the current CodalComponent instance to our array of components.
  */
void CodalComponent::addComponent()
{
    uint8_t i = 0;
 8006ef0:	2300      	movs	r3, #0

    // iterate through our list until an empty space is found.
    while(i < DEVICE_COMPONENT_COUNT)
 8006ef2:	2b3b      	cmp	r3, #59	; 0x3b
 8006ef4:	d80a      	bhi.n	8006f0c <_ZN5codal14CodalComponent12addComponentEv+0x1c>
    {
        if(components[i] == NULL)
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4a2c      	ldr	r2, [pc, #176]	; (8006fac <_ZN5codal14CodalComponent12addComponentEv+0xbc>)
 8006efa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006efe:	b112      	cbz	r2, 8006f06 <_ZN5codal14CodalComponent12addComponentEv+0x16>
        {
            components[i] = this;
            break;
        }

        i++;
 8006f00:	3301      	adds	r3, #1
 8006f02:	b2db      	uxtb	r3, r3
    while(i < DEVICE_COMPONENT_COUNT)
 8006f04:	e7f5      	b.n	8006ef2 <_ZN5codal14CodalComponent12addComponentEv+0x2>
            components[i] = this;
 8006f06:	4b29      	ldr	r3, [pc, #164]	; (8006fac <_ZN5codal14CodalComponent12addComponentEv+0xbc>)
 8006f08:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    }

    if(!(configuration & DEVICE_COMPONENT_LISTENERS_CONFIGURED) && EventModel::defaultEventBus)
 8006f0c:	4b28      	ldr	r3, [pc, #160]	; (8006fb0 <_ZN5codal14CodalComponent12addComponentEv+0xc0>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	f013 0f01 	tst.w	r3, #1
 8006f14:	d148      	bne.n	8006fa8 <_ZN5codal14CodalComponent12addComponentEv+0xb8>
 8006f16:	4b27      	ldr	r3, [pc, #156]	; (8006fb4 <_ZN5codal14CodalComponent12addComponentEv+0xc4>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d044      	beq.n	8006fa8 <_ZN5codal14CodalComponent12addComponentEv+0xb8>
{
 8006f1e:	b530      	push	{r4, r5, lr}
 8006f20:	b083      	sub	sp, #12
    {
        int ret = system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK);
 8006f22:	2201      	movs	r2, #1
 8006f24:	2110      	movs	r1, #16
 8006f26:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8006f2a:	f000 fcb3 	bl	8007894 <_ZN5codal27system_timer_event_every_usEmtt>

        if(ret == DEVICE_OK)
 8006f2e:	b108      	cbz	r0, 8006f34 <_ZN5codal14CodalComponent12addComponentEv+0x44>
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);

            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
        }
    }
}
 8006f30:	b003      	add	sp, #12
 8006f32:	bd30      	pop	{r4, r5, pc}
            EventModel::defaultEventBus->listen(DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8006f34:	4b1f      	ldr	r3, [pc, #124]	; (8006fb4 <_ZN5codal14CodalComponent12addComponentEv+0xc4>)
 8006f36:	681d      	ldr	r5, [r3, #0]
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 8006f38:	2020      	movs	r0, #32
 8006f3a:	f7fb fe39 	bl	8002bb0 <_Znwj>
 8006f3e:	4604      	mov	r4, r0
 8006f40:	23c0      	movs	r3, #192	; 0xc0
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	4b1c      	ldr	r3, [pc, #112]	; (8006fb8 <_ZN5codal14CodalComponent12addComponentEv+0xc8>)
 8006f46:	2201      	movs	r2, #1
 8006f48:	2110      	movs	r1, #16
 8006f4a:	f002 f938 	bl	80091be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 8006f4e:	682b      	ldr	r3, [r5, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	4621      	mov	r1, r4
 8006f54:	4628      	mov	r0, r5
 8006f56:	4798      	blx	r3
 8006f58:	b130      	cbz	r0, 8006f68 <_ZN5codal14CodalComponent12addComponentEv+0x78>
                return DEVICE_OK;

            delete newListener;
 8006f5a:	b12c      	cbz	r4, 8006f68 <_ZN5codal14CodalComponent12addComponentEv+0x78>
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f002 f942 	bl	80091e6 <_ZN5codal8ListenerD1Ev>
 8006f62:	4620      	mov	r0, r4
 8006f64:	f7fb fe28 	bl	8002bb8 <_ZdlPv>
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8006f68:	4b12      	ldr	r3, [pc, #72]	; (8006fb4 <_ZN5codal14CodalComponent12addComponentEv+0xc4>)
 8006f6a:	681d      	ldr	r5, [r3, #0]
            Listener *newListener = new Listener(id, value, handler, flags);
 8006f6c:	2020      	movs	r0, #32
 8006f6e:	f7fb fe1f 	bl	8002bb0 <_Znwj>
 8006f72:	4604      	mov	r4, r0
 8006f74:	23c0      	movs	r3, #192	; 0xc0
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <_ZN5codal14CodalComponent12addComponentEv+0xc8>)
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	210f      	movs	r1, #15
 8006f7e:	f002 f91e 	bl	80091be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8006f82:	682b      	ldr	r3, [r5, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	4621      	mov	r1, r4
 8006f88:	4628      	mov	r0, r5
 8006f8a:	4798      	blx	r3
 8006f8c:	b130      	cbz	r0, 8006f9c <_ZN5codal14CodalComponent12addComponentEv+0xac>
            delete newListener;
 8006f8e:	b12c      	cbz	r4, 8006f9c <_ZN5codal14CodalComponent12addComponentEv+0xac>
 8006f90:	4620      	mov	r0, r4
 8006f92:	f002 f928 	bl	80091e6 <_ZN5codal8ListenerD1Ev>
 8006f96:	4620      	mov	r0, r4
 8006f98:	f7fb fe0e 	bl	8002bb8 <_ZdlPv>
            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
 8006f9c:	4a04      	ldr	r2, [pc, #16]	; (8006fb0 <_ZN5codal14CodalComponent12addComponentEv+0xc0>)
 8006f9e:	7813      	ldrb	r3, [r2, #0]
 8006fa0:	f043 0301 	orr.w	r3, r3, #1
 8006fa4:	7013      	strb	r3, [r2, #0]
}
 8006fa6:	e7c3      	b.n	8006f30 <_ZN5codal14CodalComponent12addComponentEv+0x40>
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	20002050 	.word	0x20002050
 8006fb0:	20002210 	.word	0x20002210
 8006fb4:	20002170 	.word	0x20002170
 8006fb8:	08006e89 	.word	0x08006e89

08006fbc <_ZN5codal14CodalComponent15removeComponentEv>:
/**
  * Removes the current CodalComponent instance from our array of components.
  */
void CodalComponent::removeComponent()
{
    uint8_t i = 0;
 8006fbc:	2300      	movs	r3, #0

    while(i < DEVICE_COMPONENT_COUNT)
 8006fbe:	2b3b      	cmp	r3, #59	; 0x3b
 8006fc0:	d80d      	bhi.n	8006fde <_ZN5codal14CodalComponent15removeComponentEv+0x22>
    {
        if(components[i] == this)
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4a06      	ldr	r2, [pc, #24]	; (8006fe0 <_ZN5codal14CodalComponent15removeComponentEv+0x24>)
 8006fc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006fca:	4282      	cmp	r2, r0
 8006fcc:	d002      	beq.n	8006fd4 <_ZN5codal14CodalComponent15removeComponentEv+0x18>
        {
            components[i] = NULL;
            return;
        }

        i++;
 8006fce:	3301      	adds	r3, #1
 8006fd0:	b2db      	uxtb	r3, r3
    while(i < DEVICE_COMPONENT_COUNT)
 8006fd2:	e7f4      	b.n	8006fbe <_ZN5codal14CodalComponent15removeComponentEv+0x2>
            components[i] = NULL;
 8006fd4:	4b02      	ldr	r3, [pc, #8]	; (8006fe0 <_ZN5codal14CodalComponent15removeComponentEv+0x24>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            return;
 8006fdc:	4770      	bx	lr
    }
}
 8006fde:	4770      	bx	lr
 8006fe0:	20002050 	.word	0x20002050

08006fe4 <codal_dmesg_flush>:
{
    dmesg_flush_fn = fn;
}

void codal_dmesg_flush()
{
 8006fe4:	b508      	push	{r3, lr}
    if (dmesg_flush_fn)
 8006fe6:	4b02      	ldr	r3, [pc, #8]	; (8006ff0 <codal_dmesg_flush+0xc>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	b103      	cbz	r3, 8006fee <codal_dmesg_flush+0xa>
        dmesg_flush_fn();
 8006fec:	4798      	blx	r3
}
 8006fee:	bd08      	pop	{r3, pc}
 8006ff0:	20002140 	.word	0x20002140

08006ff4 <_ZN5codal14scheduler_tickENS_5EventE>:
  * The timer callback, called from interrupt context once every SYSTEM_TICK_PERIOD_MS milliseconds.
  * This function checks to determine if any fibers blocked on the sleep queue need to be woken up
  * and made runnable.
  */
void codal::scheduler_tick(Event evt)
{
 8006ff4:	b530      	push	{r4, r5, lr}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	ab02      	add	r3, sp, #8
 8006ffa:	e903 0003 	stmdb	r3, {r0, r1}
    Fiber *f = sleepQueue;
 8006ffe:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <_ZN5codal14scheduler_tickENS_5EventE+0x34>)
 8007000:	681c      	ldr	r4, [r3, #0]
 8007002:	e000      	b.n	8007006 <_ZN5codal14scheduler_tickENS_5EventE+0x12>
{
 8007004:	462c      	mov	r4, r5
#if !CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
    evt.timestamp /= 1000;
#endif

    // Check the sleep queue, and wake up any fibers as necessary.
    while (f != NULL)
 8007006:	b164      	cbz	r4, 8007022 <_ZN5codal14scheduler_tickENS_5EventE+0x2e>
    {
        t = f->next;
 8007008:	69a5      	ldr	r5, [r4, #24]

        if (evt.timestamp >= f->context)
 800700a:	68e3      	ldr	r3, [r4, #12]
 800700c:	9a01      	ldr	r2, [sp, #4]
 800700e:	429a      	cmp	r2, r3
 8007010:	d3f8      	bcc.n	8007004 <_ZN5codal14scheduler_tickENS_5EventE+0x10>
        {
            // Wakey wakey!
            dequeue_fiber(f);
 8007012:	4620      	mov	r0, r4
 8007014:	f002 f81f 	bl	8009056 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
            queue_fiber(f,&runQueue);
 8007018:	4904      	ldr	r1, [pc, #16]	; (800702c <_ZN5codal14scheduler_tickENS_5EventE+0x38>)
 800701a:	4620      	mov	r0, r4
 800701c:	f002 f804 	bl	8009028 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
 8007020:	e7f0      	b.n	8007004 <_ZN5codal14scheduler_tickENS_5EventE+0x10>
        }

        f = t;
    }
}
 8007022:	b003      	add	sp, #12
 8007024:	bd30      	pop	{r4, r5, pc}
 8007026:	bf00      	nop
 8007028:	2000214c 	.word	0x2000214c
 800702c:	20002154 	.word	0x20002154

08007030 <_ZN5codal15scheduler_eventENS_5EventE>:
  * and made runnable due to the event.
  *
  * @param evt the event that has just been raised on an instance of DeviceMessageBus.
  */
void codal::scheduler_event(Event evt)
{
 8007030:	b570      	push	{r4, r5, r6, lr}
 8007032:	b08c      	sub	sp, #48	; 0x30
 8007034:	ab02      	add	r3, sp, #8
 8007036:	e883 0003 	stmia.w	r3, {r0, r1}
    Fiber *f = waitQueue;
 800703a:	4b29      	ldr	r3, [pc, #164]	; (80070e0 <_ZN5codal15scheduler_eventENS_5EventE+0xb0>)
 800703c:	681c      	ldr	r4, [r3, #0]
    int notifyOneComplete = 0;

    // This should never happen.
    // It is however, safe to simply ignore any events provided, as if no messageBus if recorded,
    // no fibers are permitted to block on events.
    if (messageBus == NULL)
 800703e:	4b29      	ldr	r3, [pc, #164]	; (80070e4 <_ZN5codal15scheduler_eventENS_5EventE+0xb4>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d04a      	beq.n	80070dc <_ZN5codal15scheduler_eventENS_5EventE+0xac>
    int notifyOneComplete = 0;
 8007046:	2600      	movs	r6, #0
 8007048:	e01a      	b.n	8007080 <_ZN5codal15scheduler_eventENS_5EventE+0x50>
        // extract the event data this fiber is blocked on.
        uint16_t id = f->context & 0xFFFF;
        uint16_t value = (f->context & 0xFFFF0000) >> 16;

        // Special case for the NOTIFY_ONE channel...
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800704a:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800704e:	4282      	cmp	r2, r0
 8007050:	d121      	bne.n	8007096 <_ZN5codal15scheduler_eventENS_5EventE+0x66>
 8007052:	b11b      	cbz	r3, 800705c <_ZN5codal15scheduler_eventENS_5EventE+0x2c>
 8007054:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8007058:	4298      	cmp	r0, r3
 800705a:	d11c      	bne.n	8007096 <_ZN5codal15scheduler_eventENS_5EventE+0x66>
        {
            if (!notifyOneComplete)
 800705c:	b97e      	cbnz	r6, 800707e <_ZN5codal15scheduler_eventENS_5EventE+0x4e>
            {
                // Wakey wakey!
                dequeue_fiber(f);
 800705e:	4620      	mov	r0, r4
 8007060:	f001 fff9 	bl	8009056 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
                queue_fiber(f,&runQueue);
 8007064:	4920      	ldr	r1, [pc, #128]	; (80070e8 <_ZN5codal15scheduler_eventENS_5EventE+0xb8>)
 8007066:	4620      	mov	r0, r4
 8007068:	f001 ffde 	bl	8009028 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
                notifyOneComplete = 1;
 800706c:	2601      	movs	r6, #1
 800706e:	e006      	b.n	800707e <_ZN5codal15scheduler_eventENS_5EventE+0x4e>

        // Normal case.
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
        {
            // Wakey wakey!
            dequeue_fiber(f);
 8007070:	4620      	mov	r0, r4
 8007072:	f001 fff0 	bl	8009056 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
            queue_fiber(f,&runQueue);
 8007076:	491c      	ldr	r1, [pc, #112]	; (80070e8 <_ZN5codal15scheduler_eventENS_5EventE+0xb8>)
 8007078:	4620      	mov	r0, r4
 800707a:	f001 ffd5 	bl	8009028 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
                notifyOneComplete = 1;
 800707e:	462c      	mov	r4, r5
    while (f != NULL)
 8007080:	b19c      	cbz	r4, 80070aa <_ZN5codal15scheduler_eventENS_5EventE+0x7a>
        t = f->next;
 8007082:	69a5      	ldr	r5, [r4, #24]
        uint16_t id = f->context & 0xFFFF;
 8007084:	68e3      	ldr	r3, [r4, #12]
 8007086:	b29a      	uxth	r2, r3
        uint16_t value = (f->context & 0xFFFF0000) >> 16;
 8007088:	0c1b      	lsrs	r3, r3, #16
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 800708a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800708e:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8007092:	4281      	cmp	r1, r0
 8007094:	d0d9      	beq.n	800704a <_ZN5codal15scheduler_eventENS_5EventE+0x1a>
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
 8007096:	b10a      	cbz	r2, 800709c <_ZN5codal15scheduler_eventENS_5EventE+0x6c>
 8007098:	4291      	cmp	r1, r2
 800709a:	d1f0      	bne.n	800707e <_ZN5codal15scheduler_eventENS_5EventE+0x4e>
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0e7      	beq.n	8007070 <_ZN5codal15scheduler_eventENS_5EventE+0x40>
 80070a0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d1ea      	bne.n	800707e <_ZN5codal15scheduler_eventENS_5EventE+0x4e>
 80070a8:	e7e2      	b.n	8007070 <_ZN5codal15scheduler_eventENS_5EventE+0x40>

        f = t;
    }

    // Unregister this event, as we've woken up all the fibers with this match.
    if (evt.source != DEVICE_ID_NOTIFY && evt.source != DEVICE_ID_NOTIFY_ONE)
 80070aa:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80070ae:	f2a1 33fe 	subw	r3, r1, #1022	; 0x3fe
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d911      	bls.n	80070dc <_ZN5codal15scheduler_eventENS_5EventE+0xac>
        messageBus->ignore(evt.source, evt.value, scheduler_event);
 80070b8:	4b0a      	ldr	r3, [pc, #40]	; (80070e4 <_ZN5codal15scheduler_eventENS_5EventE+0xb4>)
 80070ba:	681c      	ldr	r4, [r3, #0]
 80070bc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
        int ignore(int id, int value, void (*handler)(Event))
        {
            if (handler == NULL)
                return DEVICE_INVALID_PARAMETER;

            Listener listener(id, value, handler);
 80070c0:	2310      	movs	r3, #16
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	4b09      	ldr	r3, [pc, #36]	; (80070ec <_ZN5codal15scheduler_eventENS_5EventE+0xbc>)
 80070c6:	a804      	add	r0, sp, #16
 80070c8:	f002 f879 	bl	80091be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            remove(&listener);
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	a904      	add	r1, sp, #16
 80070d2:	4620      	mov	r0, r4
 80070d4:	4798      	blx	r3
            Listener listener(id, value, handler);
 80070d6:	a804      	add	r0, sp, #16
 80070d8:	f002 f885 	bl	80091e6 <_ZN5codal8ListenerD1Ev>
}
 80070dc:	b00c      	add	sp, #48	; 0x30
 80070de:	bd70      	pop	{r4, r5, r6, pc}
 80070e0:	20002160 	.word	0x20002160
 80070e4:	20002148 	.word	0x20002148
 80070e8:	20002154 	.word	0x20002154
 80070ec:	08007031 	.word	0x08007031

080070f0 <_Z15getFiberContextv>:
{
 80070f0:	b538      	push	{r3, r4, r5, lr}
    target_disable_irq();
 80070f2:	f7f9 fc59 	bl	80009a8 <target_disable_irq>
    if (fiberPool != NULL)
 80070f6:	4b13      	ldr	r3, [pc, #76]	; (8007144 <_Z15getFiberContextv+0x54>)
 80070f8:	681c      	ldr	r4, [r3, #0]
 80070fa:	b184      	cbz	r4, 800711e <_Z15getFiberContextv+0x2e>
        dequeue_fiber(f);
 80070fc:	4620      	mov	r0, r4
 80070fe:	f001 ffaa 	bl	8009056 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
    target_enable_irq();
 8007102:	f7f9 fc4f 	bl	80009a4 <target_enable_irq>
    f->flags = 0;
 8007106:	2300      	movs	r3, #0
 8007108:	6123      	str	r3, [r4, #16]
    f->user_data = 0;
 800710a:	6223      	str	r3, [r4, #32]
    tcb_configure_stack_base(f->tcb, fiber_initial_stack_base());
 800710c:	6825      	ldr	r5, [r4, #0]
 800710e:	f7f9 fbf9 	bl	8000904 <fiber_initial_stack_base>
 8007112:	4601      	mov	r1, r0
 8007114:	4628      	mov	r0, r5
 8007116:	f7f9 fc52 	bl	80009be <tcb_configure_stack_base>
}
 800711a:	4620      	mov	r0, r4
 800711c:	bd38      	pop	{r3, r4, r5, pc}
        f = new Fiber();
 800711e:	2024      	movs	r0, #36	; 0x24
 8007120:	f7fb fd46 	bl	8002bb0 <_Znwj>
 8007124:	4604      	mov	r4, r0
 8007126:	2224      	movs	r2, #36	; 0x24
 8007128:	2100      	movs	r1, #0
 800712a:	f7fb fa49 	bl	80025c0 <memset>
        if (f == NULL) {
 800712e:	b134      	cbz	r4, 800713e <_Z15getFiberContextv+0x4e>
        f->tcb = tcb_allocate();
 8007130:	f7f9 fc3c 	bl	80009ac <tcb_allocate>
 8007134:	6020      	str	r0, [r4, #0]
        f->stack_bottom = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	6063      	str	r3, [r4, #4]
        f->stack_top = 0;
 800713a:	60a3      	str	r3, [r4, #8]
 800713c:	e7e1      	b.n	8007102 <_Z15getFiberContextv+0x12>
            target_enable_irq();
 800713e:	f7f9 fc31 	bl	80009a4 <target_enable_irq>
            return NULL;
 8007142:	e7ea      	b.n	800711a <_Z15getFiberContextv+0x2a>
 8007144:	20002158 	.word	0x20002158

08007148 <_ZL10handle_fobv>:

static Fiber* handle_fob()
{
 8007148:	b510      	push	{r4, lr}
    Fiber *f = currentFiber;
 800714a:	4b0a      	ldr	r3, [pc, #40]	; (8007174 <_ZL10handle_fobv+0x2c>)
 800714c:	681c      	ldr	r4, [r3, #0]

    // This is a blocking call, so if we're in a fork on block context,
    // it's time to spawn a new fiber...
    if (f->flags & DEVICE_FIBER_FLAG_FOB)
 800714e:	6923      	ldr	r3, [r4, #16]
 8007150:	f013 0f01 	tst.w	r3, #1
 8007154:	d101      	bne.n	800715a <_ZL10handle_fobv+0x12>
#endif
            f = forkedFiber;
        }
    }
    return f;
}
 8007156:	4620      	mov	r0, r4
 8007158:	bd10      	pop	{r4, pc}
        forkedFiber = getFiberContext();
 800715a:	f7ff ffc9 	bl	80070f0 <_Z15getFiberContextv>
 800715e:	4b06      	ldr	r3, [pc, #24]	; (8007178 <_ZL10handle_fobv+0x30>)
 8007160:	6018      	str	r0, [r3, #0]
        if (forkedFiber != NULL) {
 8007162:	2800      	cmp	r0, #0
 8007164:	d0f7      	beq.n	8007156 <_ZL10handle_fobv+0xe>
            forkedFiber->user_data = f->user_data;
 8007166:	6a23      	ldr	r3, [r4, #32]
 8007168:	6203      	str	r3, [r0, #32]
            f->user_data = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	6223      	str	r3, [r4, #32]
            f = forkedFiber;
 800716e:	4604      	mov	r4, r0
    return f;
 8007170:	e7f1      	b.n	8007156 <_ZL10handle_fobv+0xe>
 8007172:	bf00      	nop
 8007174:	20002144 	.word	0x20002144
 8007178:	20002150 	.word	0x20002150

0800717c <_ZN5codal23fiber_scheduler_runningEv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 800717c:	4b04      	ldr	r3, [pc, #16]	; (8007190 <_ZN5codal23fiber_scheduler_runningEv+0x14>)
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	f013 0f01 	tst.w	r3, #1
 8007184:	d101      	bne.n	800718a <_ZN5codal23fiber_scheduler_runningEv+0xe>
    return 0;
 8007186:	2000      	movs	r0, #0
}
 8007188:	4770      	bx	lr
        return 1;
 800718a:	2001      	movs	r0, #1
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	20002211 	.word	0x20002211

08007194 <_ZN5codal14scheduler_initERNS_10EventModelE>:
{
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	4604      	mov	r4, r0
    if (fiber_scheduler_running())
 800719a:	f7ff ffef 	bl	800717c <_ZN5codal23fiber_scheduler_runningEv>
 800719e:	b108      	cbz	r0, 80071a4 <_ZN5codal14scheduler_initERNS_10EventModelE+0x10>
}
 80071a0:	b002      	add	sp, #8
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
    messageBus = &_messageBus;
 80071a4:	4d3a      	ldr	r5, [pc, #232]	; (8007290 <_ZN5codal14scheduler_initERNS_10EventModelE+0xfc>)
 80071a6:	602c      	str	r4, [r5, #0]
    currentFiber = getFiberContext();
 80071a8:	f7ff ffa2 	bl	80070f0 <_Z15getFiberContextv>
 80071ac:	4b39      	ldr	r3, [pc, #228]	; (8007294 <_ZN5codal14scheduler_initERNS_10EventModelE+0x100>)
 80071ae:	6018      	str	r0, [r3, #0]
    queue_fiber(currentFiber, &runQueue);
 80071b0:	4939      	ldr	r1, [pc, #228]	; (8007298 <_ZN5codal14scheduler_initERNS_10EventModelE+0x104>)
 80071b2:	f001 ff39 	bl	8009028 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    idleFiber = getFiberContext();
 80071b6:	f7ff ff9b 	bl	80070f0 <_Z15getFiberContextv>
 80071ba:	4c38      	ldr	r4, [pc, #224]	; (800729c <_ZN5codal14scheduler_initERNS_10EventModelE+0x108>)
 80071bc:	6020      	str	r0, [r4, #0]
    tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 80071be:	6806      	ldr	r6, [r0, #0]
 80071c0:	f7f9 fba0 	bl	8000904 <fiber_initial_stack_base>
 80071c4:	1f01      	subs	r1, r0, #4
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7f9 fbf7 	bl	80009ba <tcb_configure_sp>
    tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	4934      	ldr	r1, [pc, #208]	; (80072a0 <_ZN5codal14scheduler_initERNS_10EventModelE+0x10c>)
 80071d0:	6818      	ldr	r0, [r3, #0]
 80071d2:	f7f9 fbf0 	bl	80009b6 <tcb_configure_lr>
    if (messageBus)
 80071d6:	682c      	ldr	r4, [r5, #0]
 80071d8:	2c00      	cmp	r4, #0
 80071da:	d053      	beq.n	8007284 <_ZN5codal14scheduler_initERNS_10EventModelE+0xf0>
            Listener *newListener = new Listener(id, value, handler, flags);
 80071dc:	2020      	movs	r0, #32
 80071de:	f7fb fce7 	bl	8002bb0 <_Znwj>
 80071e2:	4605      	mov	r5, r0
 80071e4:	23c0      	movs	r3, #192	; 0xc0
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	4b2e      	ldr	r3, [pc, #184]	; (80072a4 <_ZN5codal14scheduler_initERNS_10EventModelE+0x110>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80071f0:	f001 ffe5 	bl	80091be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	4629      	mov	r1, r5
 80071fa:	4620      	mov	r0, r4
 80071fc:	4798      	blx	r3
 80071fe:	b130      	cbz	r0, 800720e <_ZN5codal14scheduler_initERNS_10EventModelE+0x7a>
            delete newListener;
 8007200:	b12d      	cbz	r5, 800720e <_ZN5codal14scheduler_initERNS_10EventModelE+0x7a>
 8007202:	4628      	mov	r0, r5
 8007204:	f001 ffef 	bl	80091e6 <_ZN5codal8ListenerD1Ev>
 8007208:	4628      	mov	r0, r5
 800720a:	f7fb fcd5 	bl	8002bb8 <_ZdlPv>
        messageBus->listen(DEVICE_ID_NOTIFY_ONE, DEVICE_EVT_ANY, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 800720e:	4b20      	ldr	r3, [pc, #128]	; (8007290 <_ZN5codal14scheduler_initERNS_10EventModelE+0xfc>)
 8007210:	681d      	ldr	r5, [r3, #0]
            Listener *newListener = new Listener(id, value, handler, flags);
 8007212:	2020      	movs	r0, #32
 8007214:	f7fb fccc 	bl	8002bb0 <_Znwj>
 8007218:	4604      	mov	r4, r0
 800721a:	23c0      	movs	r3, #192	; 0xc0
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	4b21      	ldr	r3, [pc, #132]	; (80072a4 <_ZN5codal14scheduler_initERNS_10EventModelE+0x110>)
 8007220:	2200      	movs	r2, #0
 8007222:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8007226:	f001 ffca 	bl	80091be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800722a:	682b      	ldr	r3, [r5, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	4621      	mov	r1, r4
 8007230:	4628      	mov	r0, r5
 8007232:	4798      	blx	r3
 8007234:	b130      	cbz	r0, 8007244 <_ZN5codal14scheduler_initERNS_10EventModelE+0xb0>
            delete newListener;
 8007236:	b12c      	cbz	r4, 8007244 <_ZN5codal14scheduler_initERNS_10EventModelE+0xb0>
 8007238:	4620      	mov	r0, r4
 800723a:	f001 ffd4 	bl	80091e6 <_ZN5codal8ListenerD1Ev>
 800723e:	4620      	mov	r0, r4
 8007240:	f7fb fcba 	bl	8002bb8 <_ZdlPv>
        system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK);
 8007244:	2201      	movs	r2, #1
 8007246:	210f      	movs	r1, #15
 8007248:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800724c:	f000 fb22 	bl	8007894 <_ZN5codal27system_timer_event_every_usEmtt>
        messageBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK, scheduler_tick, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007250:	4b0f      	ldr	r3, [pc, #60]	; (8007290 <_ZN5codal14scheduler_initERNS_10EventModelE+0xfc>)
 8007252:	681d      	ldr	r5, [r3, #0]
            Listener *newListener = new Listener(id, value, handler, flags);
 8007254:	2020      	movs	r0, #32
 8007256:	f7fb fcab 	bl	8002bb0 <_Znwj>
 800725a:	4604      	mov	r4, r0
 800725c:	23c0      	movs	r3, #192	; 0xc0
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	4b11      	ldr	r3, [pc, #68]	; (80072a8 <_ZN5codal14scheduler_initERNS_10EventModelE+0x114>)
 8007262:	2201      	movs	r2, #1
 8007264:	210f      	movs	r1, #15
 8007266:	f001 ffaa 	bl	80091be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 800726a:	682b      	ldr	r3, [r5, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	4621      	mov	r1, r4
 8007270:	4628      	mov	r0, r5
 8007272:	4798      	blx	r3
 8007274:	b130      	cbz	r0, 8007284 <_ZN5codal14scheduler_initERNS_10EventModelE+0xf0>
            delete newListener;
 8007276:	b12c      	cbz	r4, 8007284 <_ZN5codal14scheduler_initERNS_10EventModelE+0xf0>
 8007278:	4620      	mov	r0, r4
 800727a:	f001 ffb4 	bl	80091e6 <_ZN5codal8ListenerD1Ev>
 800727e:	4620      	mov	r0, r4
 8007280:	f7fb fc9a 	bl	8002bb8 <_ZdlPv>
    fiber_flags |= DEVICE_SCHEDULER_RUNNING;
 8007284:	4a09      	ldr	r2, [pc, #36]	; (80072ac <_ZN5codal14scheduler_initERNS_10EventModelE+0x118>)
 8007286:	7813      	ldrb	r3, [r2, #0]
 8007288:	f043 0301 	orr.w	r3, r3, #1
 800728c:	7013      	strb	r3, [r2, #0]
 800728e:	e787      	b.n	80071a0 <_ZN5codal14scheduler_initERNS_10EventModelE+0xc>
 8007290:	20002148 	.word	0x20002148
 8007294:	20002144 	.word	0x20002144
 8007298:	20002154 	.word	0x20002154
 800729c:	2000215c 	.word	0x2000215c
 80072a0:	08009113 	.word	0x08009113
 80072a4:	08007031 	.word	0x08007031
 80072a8:	08006ff5 	.word	0x08006ff5
 80072ac:	20002211 	.word	0x20002211

080072b0 <_ZN5codal19fiber_wake_on_eventEtt>:
  * schedule();
  * @endcode
  */
int codal::fiber_wake_on_event(uint16_t id, uint16_t value)
{
    if (messageBus == NULL || !fiber_scheduler_running())
 80072b0:	4b1f      	ldr	r3, [pc, #124]	; (8007330 <_ZN5codal19fiber_wake_on_eventEtt+0x80>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d034      	beq.n	8007322 <_ZN5codal19fiber_wake_on_eventEtt+0x72>
{
 80072b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ba:	b083      	sub	sp, #12
 80072bc:	460e      	mov	r6, r1
 80072be:	4604      	mov	r4, r0
    if (messageBus == NULL || !fiber_scheduler_running())
 80072c0:	f7ff ff5c 	bl	800717c <_ZN5codal23fiber_scheduler_runningEv>
 80072c4:	b378      	cbz	r0, 8007326 <_ZN5codal19fiber_wake_on_eventEtt+0x76>
        return DEVICE_NOT_SUPPORTED;

    Fiber *f = handle_fob();
 80072c6:	f7ff ff3f 	bl	8007148 <_ZL10handle_fobv>
 80072ca:	4605      	mov	r5, r0

    // Encode the event data in the context field. It's handy having a 32 bit core. :-)
    f->context = (uint32_t)value << 16 | id;
 80072cc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 80072d0:	60c3      	str	r3, [r0, #12]

    // Remove ourselves from the run queue
    dequeue_fiber(f);
 80072d2:	f001 fec0 	bl	8009056 <_ZN5codal13dequeue_fiberEPNS_5FiberE>

    // Add ourselves to the sleep queue. We maintain strict ordering here to reduce lookup times.
    queue_fiber(f, &waitQueue);
 80072d6:	4917      	ldr	r1, [pc, #92]	; (8007334 <_ZN5codal19fiber_wake_on_eventEtt+0x84>)
 80072d8:	4628      	mov	r0, r5
 80072da:	f001 fea5 	bl	8009028 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    // Register to receive this event, so we can wake up the fiber when it happens.
    // Special case for the notify channel, as we always stay registered for that.
    if (id != DEVICE_ID_NOTIFY && id != DEVICE_ID_NOTIFY_ONE)
 80072de:	f2a4 33fe 	subw	r3, r4, #1022	; 0x3fe
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d920      	bls.n	800732a <_ZN5codal19fiber_wake_on_eventEtt+0x7a>
        messageBus->listen(id, value, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 80072e8:	4b11      	ldr	r3, [pc, #68]	; (8007330 <_ZN5codal19fiber_wake_on_eventEtt+0x80>)
 80072ea:	681f      	ldr	r7, [r3, #0]
            Listener *newListener = new Listener(id, value, handler, flags);
 80072ec:	2020      	movs	r0, #32
 80072ee:	f7fb fc5f 	bl	8002bb0 <_Znwj>
 80072f2:	4605      	mov	r5, r0
 80072f4:	23c0      	movs	r3, #192	; 0xc0
 80072f6:	9300      	str	r3, [sp, #0]
 80072f8:	4b0f      	ldr	r3, [pc, #60]	; (8007338 <_ZN5codal19fiber_wake_on_eventEtt+0x88>)
 80072fa:	4632      	mov	r2, r6
 80072fc:	4621      	mov	r1, r4
 80072fe:	f001 ff5e 	bl	80091be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	4629      	mov	r1, r5
 8007308:	4638      	mov	r0, r7
 800730a:	4798      	blx	r3
 800730c:	b130      	cbz	r0, 800731c <_ZN5codal19fiber_wake_on_eventEtt+0x6c>
            delete newListener;
 800730e:	b12d      	cbz	r5, 800731c <_ZN5codal19fiber_wake_on_eventEtt+0x6c>
 8007310:	4628      	mov	r0, r5
 8007312:	f001 ff68 	bl	80091e6 <_ZN5codal8ListenerD1Ev>
 8007316:	4628      	mov	r0, r5
 8007318:	f7fb fc4e 	bl	8002bb8 <_ZdlPv>

    return DEVICE_OK;
 800731c:	2000      	movs	r0, #0
}
 800731e:	b003      	add	sp, #12
 8007320:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return DEVICE_NOT_SUPPORTED;
 8007322:	4806      	ldr	r0, [pc, #24]	; (800733c <_ZN5codal19fiber_wake_on_eventEtt+0x8c>)
}
 8007324:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 8007326:	4805      	ldr	r0, [pc, #20]	; (800733c <_ZN5codal19fiber_wake_on_eventEtt+0x8c>)
 8007328:	e7f9      	b.n	800731e <_ZN5codal19fiber_wake_on_eventEtt+0x6e>
    return DEVICE_OK;
 800732a:	2000      	movs	r0, #0
 800732c:	e7f7      	b.n	800731e <_ZN5codal19fiber_wake_on_eventEtt+0x6e>
 800732e:	bf00      	nop
 8007330:	20002148 	.word	0x20002148
 8007334:	20002160 	.word	0x20002160
 8007338:	08007031 	.word	0x08007031
 800733c:	fffffc16 	.word	0xfffffc16

08007340 <_Z14__create_fibermmmi>:
    release_fiber(pm);
}


Fiber *__create_fiber(uint32_t ep, uint32_t cp, uint32_t pm, int parameterised)
{
 8007340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // Validate our parameters.
    if (ep == 0 || cp == 0)
 8007344:	b328      	cbz	r0, 8007392 <_Z14__create_fibermmmi+0x52>
 8007346:	4606      	mov	r6, r0
 8007348:	b329      	cbz	r1, 8007396 <_Z14__create_fibermmmi+0x56>
 800734a:	4698      	mov	r8, r3
 800734c:	4617      	mov	r7, r2
 800734e:	460d      	mov	r5, r1
        return NULL;

    // Allocate a TCB from the new fiber. This will come from the fiber pool if availiable,
    // else a new one will be allocated on the heap.
    Fiber *newFiber = getFiberContext();
 8007350:	f7ff fece 	bl	80070f0 <_Z15getFiberContextv>

    // If we're out of memory, there's nothing we can do.
    if (newFiber == NULL)
 8007354:	4604      	mov	r4, r0
 8007356:	b1b8      	cbz	r0, 8007388 <_Z14__create_fibermmmi+0x48>
        return NULL;

    tcb_configure_args(newFiber->tcb, ep, cp, pm);
 8007358:	463b      	mov	r3, r7
 800735a:	462a      	mov	r2, r5
 800735c:	4631      	mov	r1, r6
 800735e:	6800      	ldr	r0, [r0, #0]
 8007360:	f7f9 fb35 	bl	80009ce <tcb_configure_args>
    tcb_configure_sp(newFiber->tcb, INITIAL_STACK_DEPTH);
 8007364:	6825      	ldr	r5, [r4, #0]
 8007366:	f7f9 facd 	bl	8000904 <fiber_initial_stack_base>
 800736a:	1f01      	subs	r1, r0, #4
 800736c:	4628      	mov	r0, r5
 800736e:	f7f9 fb24 	bl	80009ba <tcb_configure_sp>
    tcb_configure_lr(newFiber->tcb, parameterised ? (PROCESSOR_WORD_TYPE) &launch_new_fiber_param : (PROCESSOR_WORD_TYPE) &launch_new_fiber);
 8007372:	6820      	ldr	r0, [r4, #0]
 8007374:	f1b8 0f00 	cmp.w	r8, #0
 8007378:	d009      	beq.n	800738e <_Z14__create_fibermmmi+0x4e>
 800737a:	4908      	ldr	r1, [pc, #32]	; (800739c <_Z14__create_fibermmmi+0x5c>)
 800737c:	f7f9 fb1b 	bl	80009b6 <tcb_configure_lr>

    // Add new fiber to the run queue.
    queue_fiber(newFiber, &runQueue);
 8007380:	4907      	ldr	r1, [pc, #28]	; (80073a0 <_Z14__create_fibermmmi+0x60>)
 8007382:	4620      	mov	r0, r4
 8007384:	f001 fe50 	bl	8009028 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    return newFiber;
}
 8007388:	4620      	mov	r0, r4
 800738a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tcb_configure_lr(newFiber->tcb, parameterised ? (PROCESSOR_WORD_TYPE) &launch_new_fiber_param : (PROCESSOR_WORD_TYPE) &launch_new_fiber);
 800738e:	4905      	ldr	r1, [pc, #20]	; (80073a4 <_Z14__create_fibermmmi+0x64>)
 8007390:	e7f4      	b.n	800737c <_Z14__create_fibermmmi+0x3c>
        return NULL;
 8007392:	2400      	movs	r4, #0
 8007394:	e7f8      	b.n	8007388 <_Z14__create_fibermmmi+0x48>
 8007396:	2400      	movs	r4, #0
 8007398:	e7f6      	b.n	8007388 <_Z14__create_fibermmmi+0x48>
 800739a:	bf00      	nop
 800739c:	080090fb 	.word	0x080090fb
 80073a0:	20002154 	.word	0x20002154
 80073a4:	080090dd 	.word	0x080090dd

080073a8 <_ZN5codal24scheduler_runqueue_emptyEv>:
  *
  * @return The number of fibers currently on the run queue
  */
int codal::scheduler_runqueue_empty()
{
    return (runQueue == NULL);
 80073a8:	4b02      	ldr	r3, [pc, #8]	; (80073b4 <_ZN5codal24scheduler_runqueue_emptyEv+0xc>)
 80073aa:	6818      	ldr	r0, [r3, #0]
}
 80073ac:	fab0 f080 	clz	r0, r0
 80073b0:	0940      	lsrs	r0, r0, #5
 80073b2:	4770      	bx	lr
 80073b4:	20002154 	.word	0x20002154

080073b8 <_ZN5codal4idleEv>:
/**
  * Set of tasks to perform when idle.
  * Service any background tasks that are required, and attempt a power efficient sleep.
  */
void codal::idle()
{
 80073b8:	b500      	push	{lr}
 80073ba:	b083      	sub	sp, #12
    // Prevent an idle loop of death:
    // We will return to idle after processing any idle events that add anything
    // to our run queue, we use the DEVICE_SCHEDULER_IDLE flag to determine this
    // scenario.
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
 80073bc:	4b0e      	ldr	r3, [pc, #56]	; (80073f8 <_ZN5codal4idleEv+0x40>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	f013 0f02 	tst.w	r3, #2
 80073c4:	d005      	beq.n	80073d2 <_ZN5codal4idleEv+0x1a>
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
    }

    // If the above did create any useful work, enter power efficient sleep.
    if(scheduler_runqueue_empty())
 80073c6:	f7ff ffef 	bl	80073a8 <_ZN5codal24scheduler_runqueue_emptyEv>
 80073ca:	b968      	cbnz	r0, 80073e8 <_ZN5codal4idleEv+0x30>
        // because we enforce MESSAGE_BUS_LISTENER_IMMEDIATE for listeners placed
        // on the scheduler.
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
        target_wait_for_event();
    }
}
 80073cc:	b003      	add	sp, #12
 80073ce:	f85d fb04 	ldr.w	pc, [sp], #4
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
 80073d2:	f043 0302 	orr.w	r3, r3, #2
 80073d6:	4a08      	ldr	r2, [pc, #32]	; (80073f8 <_ZN5codal4idleEv+0x40>)
 80073d8:	7013      	strb	r3, [r2, #0]
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
 80073da:	2301      	movs	r3, #1
 80073dc:	2202      	movs	r2, #2
 80073de:	210f      	movs	r1, #15
 80073e0:	4668      	mov	r0, sp
 80073e2:	f002 faee 	bl	80099c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
 80073e6:	e7ee      	b.n	80073c6 <_ZN5codal4idleEv+0xe>
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
 80073e8:	4a03      	ldr	r2, [pc, #12]	; (80073f8 <_ZN5codal4idleEv+0x40>)
 80073ea:	7813      	ldrb	r3, [r2, #0]
 80073ec:	f023 0302 	bic.w	r3, r3, #2
 80073f0:	7013      	strb	r3, [r2, #0]
        target_wait_for_event();
 80073f2:	f7f9 fa37 	bl	8000864 <target_wait_for_event>
}
 80073f6:	e7e9      	b.n	80073cc <_ZN5codal4idleEv+0x14>
 80073f8:	20002211 	.word	0x20002211

080073fc <_ZN5codal8scheduleEv>:
{
 80073fc:	b570      	push	{r4, r5, r6, lr}
    if (!fiber_scheduler_running())
 80073fe:	f7ff febd 	bl	800717c <_ZN5codal23fiber_scheduler_runningEv>
 8007402:	2800      	cmp	r0, #0
 8007404:	f000 80c6 	beq.w	8007594 <_ZN5codal8scheduleEv+0x198>
    Fiber *oldFiber = currentFiber;
 8007408:	4b64      	ldr	r3, [pc, #400]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 800740a:	681c      	ldr	r4, [r3, #0]
    if (currentFiber->flags & DEVICE_FIBER_FLAG_FOB)
 800740c:	6923      	ldr	r3, [r4, #16]
 800740e:	f013 0f01 	tst.w	r3, #1
 8007412:	d14d      	bne.n	80074b0 <_ZN5codal8scheduleEv+0xb4>
    if (runQueue == NULL)
 8007414:	4a62      	ldr	r2, [pc, #392]	; (80075a0 <_ZN5codal8scheduleEv+0x1a4>)
 8007416:	6812      	ldr	r2, [r2, #0]
 8007418:	2a00      	cmp	r2, #0
 800741a:	f000 808a 	beq.w	8007532 <_ZN5codal8scheduleEv+0x136>
    else if (currentFiber->queue == &runQueue)
 800741e:	6960      	ldr	r0, [r4, #20]
 8007420:	495f      	ldr	r1, [pc, #380]	; (80075a0 <_ZN5codal8scheduleEv+0x1a4>)
 8007422:	4288      	cmp	r0, r1
 8007424:	f000 808a 	beq.w	800753c <_ZN5codal8scheduleEv+0x140>
        currentFiber = runQueue;
 8007428:	495c      	ldr	r1, [pc, #368]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 800742a:	600a      	str	r2, [r1, #0]
    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 800742c:	4a5b      	ldr	r2, [pc, #364]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 800742e:	6811      	ldr	r1, [r2, #0]
 8007430:	4a5c      	ldr	r2, [pc, #368]	; (80075a4 <_ZN5codal8scheduleEv+0x1a8>)
 8007432:	6812      	ldr	r2, [r2, #0]
 8007434:	4291      	cmp	r1, r2
 8007436:	f000 8088 	beq.w	800754a <_ZN5codal8scheduleEv+0x14e>
    if (currentFiber != oldFiber)
 800743a:	4b58      	ldr	r3, [pc, #352]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	42a3      	cmp	r3, r4
 8007440:	f000 80a8 	beq.w	8007594 <_ZN5codal8scheduleEv+0x198>
        if (currentFiber == idleFiber)
 8007444:	4a57      	ldr	r2, [pc, #348]	; (80075a4 <_ZN5codal8scheduleEv+0x1a8>)
 8007446:	6812      	ldr	r2, [r2, #0]
 8007448:	4293      	cmp	r3, r2
 800744a:	f000 808d 	beq.w	8007568 <_ZN5codal8scheduleEv+0x16c>
        if (oldFiber == idleFiber || oldFiber->queue == &fiberPool)
 800744e:	4b55      	ldr	r3, [pc, #340]	; (80075a4 <_ZN5codal8scheduleEv+0x1a8>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	42a3      	cmp	r3, r4
 8007454:	f000 8096 	beq.w	8007584 <_ZN5codal8scheduleEv+0x188>
 8007458:	6962      	ldr	r2, [r4, #20]
 800745a:	4b53      	ldr	r3, [pc, #332]	; (80075a8 <_ZN5codal8scheduleEv+0x1ac>)
 800745c:	429a      	cmp	r2, r3
 800745e:	f000 8091 	beq.w	8007584 <_ZN5codal8scheduleEv+0x188>
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 8007462:	6820      	ldr	r0, [r4, #0]
 8007464:	f7f9 faad 	bl	80009c2 <tcb_get_stack_base>
 8007468:	4605      	mov	r5, r0
 800746a:	f7f9 faac 	bl	80009c6 <get_current_sp>
 800746e:	1a2d      	subs	r5, r5, r0
    bufferSize = f->stack_top - f->stack_bottom;
 8007470:	68a2      	ldr	r2, [r4, #8]
 8007472:	6860      	ldr	r0, [r4, #4]
 8007474:	1a12      	subs	r2, r2, r0
    if (bufferSize < stackDepth)
 8007476:	4295      	cmp	r5, r2
 8007478:	d911      	bls.n	800749e <_ZN5codal8scheduleEv+0xa2>
        Fiber *prevCurrFiber = currentFiber;
 800747a:	4a48      	ldr	r2, [pc, #288]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 800747c:	6816      	ldr	r6, [r2, #0]
        currentFiber = f;
 800747e:	6014      	str	r4, [r2, #0]
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 8007480:	f105 0320 	add.w	r3, r5, #32
 8007484:	f023 051f 	bic.w	r5, r3, #31
        if (f->stack_bottom != 0)
 8007488:	2800      	cmp	r0, #0
 800748a:	f040 8084 	bne.w	8007596 <_ZN5codal8scheduleEv+0x19a>
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800748e:	4628      	mov	r0, r5
 8007490:	f000 f94a 	bl	8007728 <device_malloc>
 8007494:	6060      	str	r0, [r4, #4]
        f->stack_top = f->stack_bottom + bufferSize;
 8007496:	4405      	add	r5, r0
 8007498:	60a5      	str	r5, [r4, #8]
        currentFiber = prevCurrFiber;
 800749a:	4b40      	ldr	r3, [pc, #256]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 800749c:	601e      	str	r6, [r3, #0]
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
 800749e:	4b3f      	ldr	r3, [pc, #252]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	6893      	ldr	r3, [r2, #8]
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	68a1      	ldr	r1, [r4, #8]
 80074a8:	6820      	ldr	r0, [r4, #0]
 80074aa:	f7f9 fa9b 	bl	80009e4 <swap_context>
 80074ae:	e071      	b.n	8007594 <_ZN5codal8scheduleEv+0x198>
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
 80074b0:	f043 0302 	orr.w	r3, r3, #2
 80074b4:	6123      	str	r3, [r4, #16]
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 80074b6:	4d3d      	ldr	r5, [pc, #244]	; (80075ac <_ZN5codal8scheduleEv+0x1b0>)
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	f042 0204 	orr.w	r2, r2, #4
 80074c0:	611a      	str	r2, [r3, #16]
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 80074c2:	681e      	ldr	r6, [r3, #0]
 80074c4:	6820      	ldr	r0, [r4, #0]
 80074c6:	f7f9 fa80 	bl	80009ca <tcb_get_sp>
 80074ca:	4601      	mov	r1, r0
 80074cc:	4630      	mov	r0, r6
 80074ce:	f7f9 fa76 	bl	80009be <tcb_configure_stack_base>
        verify_stack_size(forkedFiber);
 80074d2:	682d      	ldr	r5, [r5, #0]
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 80074d4:	6828      	ldr	r0, [r5, #0]
 80074d6:	f7f9 fa74 	bl	80009c2 <tcb_get_stack_base>
 80074da:	4604      	mov	r4, r0
 80074dc:	f7f9 fa73 	bl	80009c6 <get_current_sp>
 80074e0:	1a24      	subs	r4, r4, r0
    bufferSize = f->stack_top - f->stack_bottom;
 80074e2:	68aa      	ldr	r2, [r5, #8]
 80074e4:	6868      	ldr	r0, [r5, #4]
 80074e6:	1a12      	subs	r2, r2, r0
    if (bufferSize < stackDepth)
 80074e8:	4294      	cmp	r4, r2
 80074ea:	d90f      	bls.n	800750c <_ZN5codal8scheduleEv+0x110>
        Fiber *prevCurrFiber = currentFiber;
 80074ec:	4a2b      	ldr	r2, [pc, #172]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 80074ee:	6816      	ldr	r6, [r2, #0]
        currentFiber = f;
 80074f0:	6015      	str	r5, [r2, #0]
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 80074f2:	f104 0320 	add.w	r3, r4, #32
 80074f6:	f023 041f 	bic.w	r4, r3, #31
        if (f->stack_bottom != 0)
 80074fa:	b9b8      	cbnz	r0, 800752c <_ZN5codal8scheduleEv+0x130>
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 80074fc:	4620      	mov	r0, r4
 80074fe:	f000 f913 	bl	8007728 <device_malloc>
 8007502:	6068      	str	r0, [r5, #4]
        f->stack_top = f->stack_bottom + bufferSize;
 8007504:	4404      	add	r4, r0
 8007506:	60ac      	str	r4, [r5, #8]
        currentFiber = prevCurrFiber;
 8007508:	4b24      	ldr	r3, [pc, #144]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 800750a:	601e      	str	r6, [r3, #0]
        save_context(forkedFiber->tcb, forkedFiber->stack_top);
 800750c:	4b27      	ldr	r3, [pc, #156]	; (80075ac <_ZN5codal8scheduleEv+0x1b0>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	6899      	ldr	r1, [r3, #8]
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	f7f9 faa7 	bl	8000a66 <save_context>
        if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 8007518:	4b20      	ldr	r3, [pc, #128]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691a      	ldr	r2, [r3, #16]
 800751e:	f012 0f02 	tst.w	r2, #2
 8007522:	d037      	beq.n	8007594 <_ZN5codal8scheduleEv+0x198>
            restore_register_context(currentFiber->tcb);
 8007524:	6818      	ldr	r0, [r3, #0]
 8007526:	f7f9 fad8 	bl	8000ada <restore_register_context>
 800752a:	e033      	b.n	8007594 <_ZN5codal8scheduleEv+0x198>
            free((void *)f->stack_bottom);
 800752c:	f000 f926 	bl	800777c <device_free>
 8007530:	e7e4      	b.n	80074fc <_ZN5codal8scheduleEv+0x100>
        currentFiber = idleFiber;
 8007532:	4a1c      	ldr	r2, [pc, #112]	; (80075a4 <_ZN5codal8scheduleEv+0x1a8>)
 8007534:	6811      	ldr	r1, [r2, #0]
 8007536:	4a19      	ldr	r2, [pc, #100]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 8007538:	6011      	str	r1, [r2, #0]
 800753a:	e777      	b.n	800742c <_ZN5codal8scheduleEv+0x30>
        currentFiber = currentFiber->next == NULL ? runQueue : currentFiber->next;
 800753c:	69a1      	ldr	r1, [r4, #24]
 800753e:	b111      	cbz	r1, 8007546 <_ZN5codal8scheduleEv+0x14a>
 8007540:	4a16      	ldr	r2, [pc, #88]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 8007542:	6011      	str	r1, [r2, #0]
 8007544:	e772      	b.n	800742c <_ZN5codal8scheduleEv+0x30>
 8007546:	4611      	mov	r1, r2
 8007548:	e7fa      	b.n	8007540 <_ZN5codal8scheduleEv+0x144>
    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 800754a:	f013 0f08 	tst.w	r3, #8
 800754e:	f43f af74 	beq.w	800743a <_ZN5codal8scheduleEv+0x3e>
        currentFiber = oldFiber;
 8007552:	4b12      	ldr	r3, [pc, #72]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 8007554:	601c      	str	r4, [r3, #0]
            idle();
 8007556:	f7ff ff2f 	bl	80073b8 <_ZN5codal4idleEv>
        while (runQueue == NULL);
 800755a:	4b11      	ldr	r3, [pc, #68]	; (80075a0 <_ZN5codal8scheduleEv+0x1a4>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0f9      	beq.n	8007556 <_ZN5codal8scheduleEv+0x15a>
        currentFiber = runQueue;
 8007562:	4a0e      	ldr	r2, [pc, #56]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 8007564:	6013      	str	r3, [r2, #0]
 8007566:	e768      	b.n	800743a <_ZN5codal8scheduleEv+0x3e>
            tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 8007568:	6815      	ldr	r5, [r2, #0]
 800756a:	f7f9 f9cb 	bl	8000904 <fiber_initial_stack_base>
 800756e:	1f01      	subs	r1, r0, #4
 8007570:	4628      	mov	r0, r5
 8007572:	f7f9 fa22 	bl	80009ba <tcb_configure_sp>
            tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 8007576:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <_ZN5codal8scheduleEv+0x1a8>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	490d      	ldr	r1, [pc, #52]	; (80075b0 <_ZN5codal8scheduleEv+0x1b4>)
 800757c:	6818      	ldr	r0, [r3, #0]
 800757e:	f7f9 fa1a 	bl	80009b6 <tcb_configure_lr>
 8007582:	e764      	b.n	800744e <_ZN5codal8scheduleEv+0x52>
            swap_context(NULL, 0, currentFiber->tcb, currentFiber->stack_top);
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <_ZN5codal8scheduleEv+0x1a0>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	6893      	ldr	r3, [r2, #8]
 800758a:	6812      	ldr	r2, [r2, #0]
 800758c:	2100      	movs	r1, #0
 800758e:	4608      	mov	r0, r1
 8007590:	f7f9 fa28 	bl	80009e4 <swap_context>
}
 8007594:	bd70      	pop	{r4, r5, r6, pc}
            free((void *)f->stack_bottom);
 8007596:	f000 f8f1 	bl	800777c <device_free>
 800759a:	e778      	b.n	800748e <_ZN5codal8scheduleEv+0x92>
 800759c:	20002144 	.word	0x20002144
 80075a0:	20002154 	.word	0x20002154
 80075a4:	2000215c 	.word	0x2000215c
 80075a8:	20002158 	.word	0x20002158
 80075ac:	20002150 	.word	0x20002150
 80075b0:	08009113 	.word	0x08009113

080075b4 <_ZN5codal11fiber_sleepEm>:
{
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	4604      	mov	r4, r0
    if (!fiber_scheduler_running())
 80075b8:	f7ff fde0 	bl	800717c <_ZN5codal23fiber_scheduler_runningEv>
 80075bc:	b180      	cbz	r0, 80075e0 <_ZN5codal11fiber_sleepEm+0x2c>
    Fiber *f = handle_fob();
 80075be:	f7ff fdc3 	bl	8007148 <_ZL10handle_fobv>
 80075c2:	4605      	mov	r5, r0
    f->context = system_timer_current_time() + t;
 80075c4:	f000 f95a 	bl	800787c <_ZN5codal25system_timer_current_timeEv>
 80075c8:	4420      	add	r0, r4
 80075ca:	60e8      	str	r0, [r5, #12]
    dequeue_fiber(f);
 80075cc:	4628      	mov	r0, r5
 80075ce:	f001 fd42 	bl	8009056 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
    queue_fiber(f, &sleepQueue);
 80075d2:	4905      	ldr	r1, [pc, #20]	; (80075e8 <_ZN5codal11fiber_sleepEm+0x34>)
 80075d4:	4628      	mov	r0, r5
 80075d6:	f001 fd27 	bl	8009028 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    schedule();
 80075da:	f7ff ff0f 	bl	80073fc <_ZN5codal8scheduleEv>
}
 80075de:	bd38      	pop	{r3, r4, r5, pc}
        target_wait(t);
 80075e0:	4620      	mov	r0, r4
 80075e2:	f7f9 f947 	bl	8000874 <target_wait>
        return;
 80075e6:	e7fa      	b.n	80075de <_ZN5codal11fiber_sleepEm+0x2a>
 80075e8:	2000214c 	.word	0x2000214c

080075ec <_ZN5codal13release_fiberEv>:
{
 80075ec:	b538      	push	{r3, r4, r5, lr}
    if (!fiber_scheduler_running())
 80075ee:	f7ff fdc5 	bl	800717c <_ZN5codal23fiber_scheduler_runningEv>
 80075f2:	b900      	cbnz	r0, 80075f6 <_ZN5codal13release_fiberEv+0xa>
}
 80075f4:	bd38      	pop	{r3, r4, r5, pc}
    dequeue_fiber(currentFiber);
 80075f6:	4d17      	ldr	r5, [pc, #92]	; (8007654 <_ZN5codal13release_fiberEv+0x68>)
 80075f8:	6828      	ldr	r0, [r5, #0]
 80075fa:	f001 fd2c 	bl	8009056 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
    queue_fiber(currentFiber, &fiberPool);
 80075fe:	4c16      	ldr	r4, [pc, #88]	; (8007658 <_ZN5codal13release_fiberEv+0x6c>)
 8007600:	4621      	mov	r1, r4
 8007602:	6828      	ldr	r0, [r5, #0]
 8007604:	f001 fd10 	bl	8009028 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    for (Fiber *p = fiberPool; p; p = p->next) {
 8007608:	6824      	ldr	r4, [r4, #0]
    int numFree = 0;
 800760a:	2200      	movs	r2, #0
 800760c:	e001      	b.n	8007612 <_ZN5codal13release_fiberEv+0x26>
        numFree++;
 800760e:	3201      	adds	r2, #1
    for (Fiber *p = fiberPool; p; p = p->next) {
 8007610:	461c      	mov	r4, r3
 8007612:	b184      	cbz	r4, 8007636 <_ZN5codal13release_fiberEv+0x4a>
        if (!p->next && numFree > 3) {
 8007614:	69a3      	ldr	r3, [r4, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1f9      	bne.n	800760e <_ZN5codal13release_fiberEv+0x22>
 800761a:	2a03      	cmp	r2, #3
 800761c:	ddf7      	ble.n	800760e <_ZN5codal13release_fiberEv+0x22>
            p->prev->next = NULL;
 800761e:	69e3      	ldr	r3, [r4, #28]
 8007620:	2200      	movs	r2, #0
 8007622:	619a      	str	r2, [r3, #24]
            free(p->tcb);
 8007624:	6820      	ldr	r0, [r4, #0]
 8007626:	f000 f8a9 	bl	800777c <device_free>
            free((void *)p->stack_bottom);
 800762a:	6860      	ldr	r0, [r4, #4]
 800762c:	f000 f8a6 	bl	800777c <device_free>
            free(p);
 8007630:	4620      	mov	r0, r4
 8007632:	f000 f8a3 	bl	800777c <device_free>
    currentFiber->flags = 0;
 8007636:	4b07      	ldr	r3, [pc, #28]	; (8007654 <_ZN5codal13release_fiberEv+0x68>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2200      	movs	r2, #0
 800763c:	611a      	str	r2, [r3, #16]
    tcb_configure_stack_base(currentFiber->tcb, fiber_initial_stack_base());
 800763e:	681c      	ldr	r4, [r3, #0]
 8007640:	f7f9 f960 	bl	8000904 <fiber_initial_stack_base>
 8007644:	4601      	mov	r1, r0
 8007646:	4620      	mov	r0, r4
 8007648:	f7f9 f9b9 	bl	80009be <tcb_configure_stack_base>
    schedule();
 800764c:	f7ff fed6 	bl	80073fc <_ZN5codal8scheduleEv>
 8007650:	e7d0      	b.n	80075f4 <_ZN5codal13release_fiberEv+0x8>
 8007652:	bf00      	nop
 8007654:	20002144 	.word	0x20002144
 8007658:	20002158 	.word	0x20002158

0800765c <_ZN5codal6invokeEPFvPvES0_>:
    if (entry_fn == NULL)
 800765c:	2800      	cmp	r0, #0
 800765e:	d03a      	beq.n	80076d6 <_ZN5codal6invokeEPFvPvES0_+0x7a>
{
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4605      	mov	r5, r0
 8007664:	460c      	mov	r4, r1
    if (!fiber_scheduler_running())
 8007666:	f7ff fd89 	bl	800717c <_ZN5codal23fiber_scheduler_runningEv>
 800766a:	2800      	cmp	r0, #0
 800766c:	d036      	beq.n	80076dc <_ZN5codal6invokeEPFvPvES0_+0x80>
    if (currentFiber->flags & (DEVICE_FIBER_FLAG_FOB | DEVICE_FIBER_FLAG_PARENT | DEVICE_FIBER_FLAG_CHILD) || HAS_THREAD_USER_DATA)
 800766e:	4b1c      	ldr	r3, [pc, #112]	; (80076e0 <_ZN5codal6invokeEPFvPvES0_+0x84>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	f012 0f07 	tst.w	r2, #7
 8007678:	d101      	bne.n	800767e <_ZN5codal6invokeEPFvPvES0_+0x22>
 800767a:	6a1a      	ldr	r2, [r3, #32]
 800767c:	b132      	cbz	r2, 800768c <_ZN5codal6invokeEPFvPvES0_+0x30>
        create_fiber(entry_fn, param);
 800767e:	4a19      	ldr	r2, [pc, #100]	; (80076e4 <_ZN5codal6invokeEPFvPvES0_+0x88>)
 8007680:	4621      	mov	r1, r4
 8007682:	4628      	mov	r0, r5
 8007684:	f001 fd10 	bl	80090a8 <_ZN5codal12create_fiberEPFvPvES0_S2_>
        return DEVICE_OK;
 8007688:	2000      	movs	r0, #0
}
 800768a:	bd38      	pop	{r3, r4, r5, pc}
    save_register_context(currentFiber->tcb);
 800768c:	6818      	ldr	r0, [r3, #0]
 800768e:	f7f9 fa0c 	bl	8000aaa <save_register_context>
    if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 8007692:	4b13      	ldr	r3, [pc, #76]	; (80076e0 <_ZN5codal6invokeEPFvPvES0_+0x84>)
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	6913      	ldr	r3, [r2, #16]
 8007698:	f013 0f02 	tst.w	r3, #2
 800769c:	d111      	bne.n	80076c2 <_ZN5codal6invokeEPFvPvES0_+0x66>
    currentFiber->flags |= DEVICE_FIBER_FLAG_FOB;
 800769e:	f043 0301 	orr.w	r3, r3, #1
 80076a2:	6113      	str	r3, [r2, #16]
    entry_fn(param);
 80076a4:	4620      	mov	r0, r4
 80076a6:	47a8      	blx	r5
    currentFiber->user_data = NULL;
 80076a8:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <_ZN5codal6invokeEPFvPvES0_+0x84>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2200      	movs	r2, #0
 80076ae:	621a      	str	r2, [r3, #32]
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 80076b0:	691a      	ldr	r2, [r3, #16]
 80076b2:	f022 0101 	bic.w	r1, r2, #1
 80076b6:	6119      	str	r1, [r3, #16]
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
 80076b8:	f012 0f04 	tst.w	r2, #4
 80076bc:	d106      	bne.n	80076cc <_ZN5codal6invokeEPFvPvES0_+0x70>
    return DEVICE_OK;
 80076be:	2000      	movs	r0, #0
 80076c0:	e7e3      	b.n	800768a <_ZN5codal6invokeEPFvPvES0_+0x2e>
        currentFiber->flags &= ~DEVICE_FIBER_FLAG_PARENT;
 80076c2:	f023 0303 	bic.w	r3, r3, #3
 80076c6:	6113      	str	r3, [r2, #16]
        return DEVICE_OK;
 80076c8:	2000      	movs	r0, #0
 80076ca:	e7de      	b.n	800768a <_ZN5codal6invokeEPFvPvES0_+0x2e>
        release_fiber(param);
 80076cc:	4620      	mov	r0, r4
 80076ce:	f001 fd0c 	bl	80090ea <_ZN5codal13release_fiberEPv>
    return DEVICE_OK;
 80076d2:	2000      	movs	r0, #0
 80076d4:	e7d9      	b.n	800768a <_ZN5codal6invokeEPFvPvES0_+0x2e>
        return DEVICE_INVALID_PARAMETER;
 80076d6:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 80076da:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 80076dc:	4802      	ldr	r0, [pc, #8]	; (80076e8 <_ZN5codal6invokeEPFvPvES0_+0x8c>)
 80076de:	e7d4      	b.n	800768a <_ZN5codal6invokeEPFvPvES0_+0x2e>
 80076e0:	20002144 	.word	0x20002144
 80076e4:	080090eb 	.word	0x080090eb
 80076e8:	fffffc16 	.word	0xfffffc16

080076ec <_Z18device_create_heapmm>:
  * code, and user code targetting the runtime. External code can choose to include this file, or
  * simply use the standard heap.
  */

int device_create_heap(PROCESSOR_WORD_TYPE start, PROCESSOR_WORD_TYPE end)
{
 80076ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ee:	4606      	mov	r6, r0
 80076f0:	460c      	mov	r4, r1
    HeapDefinition *h = &heap[heap_count];
 80076f2:	4d0b      	ldr	r5, [pc, #44]	; (8007720 <_Z18device_create_heapmm+0x34>)
 80076f4:	782f      	ldrb	r7, [r5, #0]
    if (end <= start || end - start < DEVICE_HEAP_BLOCK_SIZE*2 || end % DEVICE_HEAP_BLOCK_SIZE != 0 || start % DEVICE_HEAP_BLOCK_SIZE != 0)
        return DEVICE_INVALID_PARAMETER;
#endif

    // Disable IRQ temporarily to ensure no race conditions!
    target_disable_irq();
 80076f6:	f7f9 f957 	bl	80009a8 <target_disable_irq>

    // Record the dimensions of this new heap
    h->heap_start = (PROCESSOR_WORD_TYPE *)start;
 80076fa:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <_Z18device_create_heapmm+0x38>)
 80076fc:	f843 6037 	str.w	r6, [r3, r7, lsl #3]
    h->heap_end = (PROCESSOR_WORD_TYPE *)end;
 8007700:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007704:	605c      	str	r4, [r3, #4]

    // Initialise the heap as being completely empty and available for use.
    *h->heap_start = DEVICE_HEAP_BLOCK_FREE | (((PROCESSOR_WORD_TYPE) h->heap_end - (PROCESSOR_WORD_TYPE) h->heap_start) / DEVICE_HEAP_BLOCK_SIZE);
 8007706:	1ba4      	subs	r4, r4, r6
 8007708:	08a4      	lsrs	r4, r4, #2
 800770a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800770e:	6034      	str	r4, [r6, #0]

    heap_count++;
 8007710:	782b      	ldrb	r3, [r5, #0]
 8007712:	3301      	adds	r3, #1
 8007714:	702b      	strb	r3, [r5, #0]

    // Enable Interrupts
    target_enable_irq();
 8007716:	f7f9 f945 	bl	80009a4 <target_enable_irq>
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    device_heap_print();
#endif

    return DEVICE_OK;
}
 800771a:	2000      	movs	r0, #0
 800771c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800771e:	bf00      	nop
 8007720:	20002213 	.word	0x20002213
 8007724:	20002164 	.word	0x20002164

08007728 <device_malloc>:
  * @param size The amount of memory, in bytes, to allocate.
  *
  * @return A pointer to the allocated memory, or NULL if insufficient memory is available.
  */
void* device_malloc (size_t size)
{
 8007728:	b510      	push	{r4, lr}
    static uint8_t initialised = 0;
    void *p;

    if (size <= 0)
 800772a:	b1d8      	cbz	r0, 8007764 <device_malloc+0x3c>
 800772c:	4604      	mov	r4, r0
        return NULL;

    if (!initialised)
 800772e:	4b0e      	ldr	r3, [pc, #56]	; (8007768 <device_malloc+0x40>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	b13b      	cbz	r3, 8007744 <device_malloc+0x1c>
#endif
        initialised = 1;
    }

#if (DEVICE_MAXIMUM_HEAPS == 1)
    p = device_malloc_in(size, heap[0]);
 8007734:	490d      	ldr	r1, [pc, #52]	; (800776c <device_malloc+0x44>)
 8007736:	4620      	mov	r0, r4
 8007738:	f001 fcf1 	bl	800911e <_Z16device_malloc_injR14HeapDefinition>
        if (p != NULL)
            break;
    }
#endif

    if (p != NULL)
 800773c:	4604      	mov	r4, r0
 800773e:	b168      	cbz	r0, 800775c <device_malloc+0x34>
#if CONFIG_ENABLED(DEVICE_PANIC_HEAP_FULL)
    target_panic(DEVICE_OOM);
#endif

    return NULL;
}
 8007740:	4620      	mov	r0, r4
 8007742:	bd10      	pop	{r4, pc}
        heap_count = 0;
 8007744:	4b0a      	ldr	r3, [pc, #40]	; (8007770 <device_malloc+0x48>)
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 800774a:	490a      	ldr	r1, [pc, #40]	; (8007774 <device_malloc+0x4c>)
 800774c:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <device_malloc+0x50>)
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	f7ff ffcc 	bl	80076ec <_Z18device_create_heapmm>
        initialised = 1;
 8007754:	4b04      	ldr	r3, [pc, #16]	; (8007768 <device_malloc+0x40>)
 8007756:	2201      	movs	r2, #1
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	e7eb      	b.n	8007734 <device_malloc+0xc>
    target_panic(DEVICE_OOM);
 800775c:	2014      	movs	r0, #20
 800775e:	f7f9 f8c1 	bl	80008e4 <target_panic>
    return NULL;
 8007762:	e7ed      	b.n	8007740 <device_malloc+0x18>
        return NULL;
 8007764:	2400      	movs	r4, #0
 8007766:	e7eb      	b.n	8007740 <device_malloc+0x18>
 8007768:	20002212 	.word	0x20002212
 800776c:	20002164 	.word	0x20002164
 8007770:	20002213 	.word	0x20002213
 8007774:	20004800 	.word	0x20004800
 8007778:	20000004 	.word	0x20000004

0800777c <device_free>:
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    if (heap_count > 0)
        DMESG("device_free:   %p\n", mem);
#endif
    // Sanity check.
    if (memory == NULL)
 800777c:	b1e0      	cbz	r0, 80077b8 <device_free+0x3c>
{
 800777e:	b510      	push	{r4, lr}
 8007780:	4604      	mov	r4, r0

#if (DEVICE_MAXIMUM_HEAPS > 1)
    for (i=0; i < heap_count; i++)
#endif
    {
        if(memory > heap[i].heap_start && memory < heap[i].heap_end)
 8007782:	4b0e      	ldr	r3, [pc, #56]	; (80077bc <device_free+0x40>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4283      	cmp	r3, r0
 8007788:	d212      	bcs.n	80077b0 <device_free+0x34>
 800778a:	4b0c      	ldr	r3, [pc, #48]	; (80077bc <device_free+0x40>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	4283      	cmp	r3, r0
 8007790:	d90e      	bls.n	80077b0 <device_free+0x34>
        {
            // The memory block given is part of this heap, so we can simply
            // flag that this memory area is now free, and we're done.
            if (*cb == 0 || *cb & DEVICE_HEAP_BLOCK_FREE)
 8007792:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	dd06      	ble.n	80077a8 <device_free+0x2c>
                target_panic(DEVICE_HEAP_ERROR);
            *cb |= DEVICE_HEAP_BLOCK_FREE;
 800779a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800779e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077a2:	f844 3c04 	str.w	r3, [r4, #-4]
            return;
 80077a6:	e006      	b.n	80077b6 <device_free+0x3a>
                target_panic(DEVICE_HEAP_ERROR);
 80077a8:	201e      	movs	r0, #30
 80077aa:	f7f9 f89b 	bl	80008e4 <target_panic>
 80077ae:	e7f4      	b.n	800779a <device_free+0x1e>
        }
    }

    // If we reach here, then the memory is not part of any registered heap.
    target_panic(DEVICE_HEAP_ERROR);
 80077b0:	201e      	movs	r0, #30
 80077b2:	f7f9 f897 	bl	80008e4 <target_panic>
}
 80077b6:	bd10      	pop	{r4, pc}
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	20002164 	.word	0x20002164

080077c0 <_ZN5codal6SerialC1ERNS_3PinES2_hht>:
 *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/SerialBase.h
 *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/RawSerial.h
 *
 *       Buffers aren't allocated until the first send or receive respectively.
 */
Serial::Serial(Pin& tx, Pin& rx, uint8_t rxBufferSize, uint8_t txBufferSize, uint16_t id) : tx(tx), rx(rx)
 80077c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c4:	4604      	mov	r4, r0
 80077c6:	4688      	mov	r8, r1
 80077c8:	4617      	mov	r7, r2
 80077ca:	461e      	mov	r6, r3
        {
 80077cc:	4b12      	ldr	r3, [pc, #72]	; (8007818 <_ZN5codal6SerialC1ERNS_3PinES2_hht+0x58>)
 80077ce:	6003      	str	r3, [r0, #0]
            this->id = 0;
 80077d0:	2500      	movs	r5, #0
 80077d2:	8085      	strh	r5, [r0, #4]
            this->status = 0;
 80077d4:	80c5      	strh	r5, [r0, #6]
            addComponent();
 80077d6:	f7ff fb8b 	bl	8006ef0 <_ZN5codal14CodalComponent12addComponentEv>
 80077da:	4b10      	ldr	r3, [pc, #64]	; (800781c <_ZN5codal6SerialC1ERNS_3PinES2_hht+0x5c>)
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	f8c4 8008 	str.w	r8, [r4, #8]
 80077e2:	60e7      	str	r7, [r4, #12]
 80077e4:	f104 0010 	add.w	r0, r4, #16
 80077e8:	f002 f975 	bl	8009ad6 <_ZN5codal13ManagedStringC1Ev>
{
    this->id = id;
 80077ec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80077f0:	80a3      	strh	r3, [r4, #4]

    // + 1 so there is a usable buffer size, of the size the user requested.
    this->rxBuffSize = rxBufferSize + 1;
 80077f2:	3601      	adds	r6, #1
 80077f4:	7726      	strb	r6, [r4, #28]
    this->txBuffSize = txBufferSize + 1;
 80077f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80077fa:	3301      	adds	r3, #1
 80077fc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    this->rxBuff = NULL;
 8007800:	61a5      	str	r5, [r4, #24]
    this->txBuff = NULL;
 8007802:	6265      	str	r5, [r4, #36]	; 0x24

    this->rxBuffHead = 0;
 8007804:	83e5      	strh	r5, [r4, #30]
    this->rxBuffTail = 0;
 8007806:	8425      	strh	r5, [r4, #32]

    this->txBuffHead = 0;
 8007808:	8565      	strh	r5, [r4, #42]	; 0x2a
    this->txBuffTail = 0;
 800780a:	85a5      	strh	r5, [r4, #44]	; 0x2c

    this->rxBuffHeadMatch = -1;
 800780c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007810:	6163      	str	r3, [r4, #20]
}
 8007812:	4620      	mov	r0, r4
 8007814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007818:	0800a244 	.word	0x0800a244
 800781c:	0800a294 	.word	0x0800a294

08007820 <_ZN5codal6SerialD1Ev>:
int Serial::txInUse()
{
    return (status & CODAL_SERIAL_TX_IN_USE);
}

Serial::~Serial()
 8007820:	b510      	push	{r4, lr}
 8007822:	4604      	mov	r4, r0
 8007824:	4b06      	ldr	r3, [pc, #24]	; (8007840 <_ZN5codal6SerialD1Ev+0x20>)
 8007826:	f840 3b10 	str.w	r3, [r0], #16
 800782a:	f002 f8f8 	bl	8009a1e <_ZN5codal13ManagedStringD1Ev>
        {
 800782e:	4b05      	ldr	r3, [pc, #20]	; (8007844 <_ZN5codal6SerialD1Ev+0x24>)
 8007830:	6023      	str	r3, [r4, #0]
            status = 0;
 8007832:	2300      	movs	r3, #0
 8007834:	80e3      	strh	r3, [r4, #6]
            removeComponent();
 8007836:	4620      	mov	r0, r4
 8007838:	f7ff fbc0 	bl	8006fbc <_ZN5codal14CodalComponent15removeComponentEv>
{

 800783c:	4620      	mov	r0, r4
 800783e:	bd10      	pop	{r4, pc}
 8007840:	0800a294 	.word	0x0800a294
 8007844:	0800a244 	.word	0x0800a244

08007848 <_ZN5codal5TimerC1Ev>:
}

/**
 * Constructor for a generic system clock interface.
 */
Timer::Timer()
 8007848:	b510      	push	{r4, lr}
 800784a:	4604      	mov	r4, r0
 800784c:	4b09      	ldr	r3, [pc, #36]	; (8007874 <_ZN5codal5TimerC1Ev+0x2c>)
 800784e:	6003      	str	r3, [r0, #0]
{
    // Register ourselves as the defualt timer - most recent timer wins.
    system_timer = this;
 8007850:	4b09      	ldr	r3, [pc, #36]	; (8007878 <_ZN5codal5TimerC1Ev+0x30>)
 8007852:	6018      	str	r0, [r3, #0]

    // Create an empty event list of the default size.
    eventListSize = CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE;
 8007854:	230a      	movs	r3, #10
 8007856:	6183      	str	r3, [r0, #24]
    timerEventList = (TimerEvent *) malloc(sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
 8007858:	2078      	movs	r0, #120	; 0x78
 800785a:	f7ff ff65 	bl	8007728 <device_malloc>
 800785e:	6120      	str	r0, [r4, #16]
      *
      * @param b the number of bytes to clear.
      */
    inline void *memclr(void *a, size_t b)
    {
        return memset(a,0,b);
 8007860:	2278      	movs	r2, #120	; 0x78
 8007862:	2100      	movs	r1, #0
 8007864:	f7fa feac 	bl	80025c0 <memset>
    memclr(timerEventList, sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
    nextTimerEvent = NULL;
 8007868:	2300      	movs	r3, #0
 800786a:	6163      	str	r3, [r4, #20]

    // Reset clock
    currentTime = 0;
 800786c:	6063      	str	r3, [r4, #4]
    currentTimeUs = 0;
 800786e:	60a3      	str	r3, [r4, #8]
}
 8007870:	4620      	mov	r0, r4
 8007872:	bd10      	pop	{r4, pc}
 8007874:	0800a2cc 	.word	0x0800a2cc
 8007878:	2000216c 	.word	0x2000216c

0800787c <_ZN5codal25system_timer_current_timeEv>:
  * Determines the time since the device was powered on.
  *
  * @return the current time since power on in milliseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time()
{
 800787c:	b508      	push	{r3, lr}
    if(system_timer == NULL)
 800787e:	4b04      	ldr	r3, [pc, #16]	; (8007890 <_ZN5codal25system_timer_current_timeEv+0x14>)
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	b110      	cbz	r0, 800788a <_ZN5codal25system_timer_current_timeEv+0xe>
        return 0;

    return system_timer->getTime();
 8007884:	f001 fe56 	bl	8009534 <_ZN5codal5Timer7getTimeEv>
}
 8007888:	bd08      	pop	{r3, pc}
        return 0;
 800788a:	2000      	movs	r0, #0
 800788c:	e7fc      	b.n	8007888 <_ZN5codal25system_timer_current_timeEv+0xc>
 800788e:	bf00      	nop
 8007890:	2000216c 	.word	0x2000216c

08007894 <_ZN5codal27system_timer_event_every_usEmtt>:
  * @param the value to fire against the current system_timer id.
  *
  * @return DEVICE_OK or DEVICE_NOT_SUPPORTED if no timer has been registered.
  */
int codal::system_timer_event_every_us(CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
{
 8007894:	b510      	push	{r4, lr}
    if(system_timer == NULL)
 8007896:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <_ZN5codal27system_timer_event_every_usEmtt+0x1c>)
 8007898:	681c      	ldr	r4, [r3, #0]
 800789a:	b134      	cbz	r4, 80078aa <_ZN5codal27system_timer_event_every_usEmtt+0x16>
 800789c:	4613      	mov	r3, r2
 800789e:	460a      	mov	r2, r1
 80078a0:	4601      	mov	r1, r0
        return DEVICE_NOT_SUPPORTED;

    return system_timer->eventEveryUs(period, id, value);
 80078a2:	4620      	mov	r0, r4
 80078a4:	f001 fe89 	bl	80095ba <_ZN5codal5Timer12eventEveryUsEmtt>
}
 80078a8:	bd10      	pop	{r4, pc}
        return DEVICE_NOT_SUPPORTED;
 80078aa:	4802      	ldr	r0, [pc, #8]	; (80078b4 <_ZN5codal27system_timer_event_every_usEmtt+0x20>)
 80078ac:	e7fc      	b.n	80078a8 <_ZN5codal27system_timer_event_every_usEmtt+0x14>
 80078ae:	bf00      	nop
 80078b0:	2000216c 	.word	0x2000216c
 80078b4:	fffffc16 	.word	0xfffffc16

080078b8 <_ZN5codal10EventModel4sendENS_5EventE>:
        virtual int send(Event)
 80078b8:	b082      	sub	sp, #8
 80078ba:	ab02      	add	r3, sp, #8
 80078bc:	e903 0006 	stmdb	r3, {r1, r2}
        }
 80078c0:	4801      	ldr	r0, [pc, #4]	; (80078c8 <_ZN5codal10EventModel4sendENS_5EventE+0x10>)
 80078c2:	b002      	add	sp, #8
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	fffffc16 	.word	0xfffffc16

080078cc <_ZN5codal10EventModel3addEPNS_8ListenerE>:
        }
 80078cc:	4800      	ldr	r0, [pc, #0]	; (80078d0 <_ZN5codal10EventModel3addEPNS_8ListenerE+0x4>)
 80078ce:	4770      	bx	lr
 80078d0:	fffffc16 	.word	0xfffffc16

080078d4 <_ZN5codal10EventModel6removeEPNS_8ListenerE>:
        }
 80078d4:	4800      	ldr	r0, [pc, #0]	; (80078d8 <_ZN5codal10EventModel6removeEPNS_8ListenerE+0x4>)
 80078d6:	4770      	bx	lr
 80078d8:	fffffc16 	.word	0xfffffc16

080078dc <_ZN5codal10MessageBus3addEPNS_8ListenerE>:
{
    Listener *l, *p;
    int methodCallback;

    //handler can't be NULL!
    if (newListener == NULL)
 80078dc:	2900      	cmp	r1, #0
 80078de:	d06c      	beq.n	80079ba <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xde>
{
 80078e0:	b570      	push	{r4, r5, r6, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	460d      	mov	r5, r1
 80078e6:	4606      	mov	r6, r0
        return DEVICE_INVALID_PARAMETER;

    l = listeners;
 80078e8:	6944      	ldr	r4, [r0, #20]
 80078ea:	e005      	b.n	80078f8 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1c>

    // We always check the ID, VALUE and CB_METHOD fields.
    // If we have a callback to a method, check the cb_method class. Otherwise, the cb function point is sufficient.
    while (l != NULL)
    {
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 80078ec:	2100      	movs	r1, #0

        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 80078ee:	6822      	ldr	r2, [r4, #0]
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d00d      	beq.n	8007912 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x36>
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;

            return DEVICE_NOT_SUPPORTED;
        }

        l = l->next;
 80078f6:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 80078f8:	b314      	cbz	r4, 8007940 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x64>
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 80078fa:	88ab      	ldrh	r3, [r5, #4]
 80078fc:	f013 0f02 	tst.w	r3, #2
 8007900:	d0f4      	beq.n	80078ec <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x10>
 8007902:	88a3      	ldrh	r3, [r4, #4]
 8007904:	f013 0f02 	tst.w	r3, #2
 8007908:	d101      	bne.n	800790e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x32>
 800790a:	2100      	movs	r1, #0
 800790c:	e7ef      	b.n	80078ee <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x12>
 800790e:	2101      	movs	r1, #1
 8007910:	e7ed      	b.n	80078ee <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x12>
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 8007912:	b949      	cbnz	r1, 8007928 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x4c>
 8007914:	68a2      	ldr	r2, [r4, #8]
 8007916:	68ab      	ldr	r3, [r5, #8]
 8007918:	429a      	cmp	r2, r3
 800791a:	d1ec      	bne.n	80078f6 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1a>
            if(l->flags & MESSAGE_BUS_LISTENER_DELETING)
 800791c:	88a3      	ldrh	r3, [r4, #4]
 800791e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8007922:	d108      	bne.n	8007936 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x5a>
            return DEVICE_NOT_SUPPORTED;
 8007924:	4826      	ldr	r0, [pc, #152]	; (80079c0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xe4>)
 8007926:	e03a      	b.n	800799e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc2>
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 8007928:	68a9      	ldr	r1, [r5, #8]
 800792a:	68a0      	ldr	r0, [r4, #8]
 800792c:	f002 f958 	bl	8009be0 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 8007930:	2800      	cmp	r0, #0
 8007932:	d0e0      	beq.n	80078f6 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1a>
 8007934:	e7f2      	b.n	800791c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x40>
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;
 8007936:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800793a:	80a3      	strh	r3, [r4, #4]
            return DEVICE_NOT_SUPPORTED;
 800793c:	4820      	ldr	r0, [pc, #128]	; (80079c0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xe4>)
 800793e:	e02e      	b.n	800799e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc2>
    }

    // We have a valid, new event handler. Add it to the list.
    // if listeners is null - we can automatically add this listener to the list at the beginning...
    if (listeners == NULL)
 8007940:	6974      	ldr	r4, [r6, #20]
 8007942:	b114      	cbz	r4, 800794a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x6e>
    // We maintain an ordered list of listeners.
    // The chain is held stictly in increasing order of ID (first level), then value code (second level).
    // Find the correct point in the chain for this event.
    // Adding a listener is a rare occurance, so we just walk the list...

    p = listeners;
 8007944:	4622      	mov	r2, r4
    l = listeners;
 8007946:	4623      	mov	r3, r4
 8007948:	e00b      	b.n	8007962 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x86>
        listeners = newListener;
 800794a:	6175      	str	r5, [r6, #20]
        Event(DEVICE_ID_MESSAGE_BUS_LISTENER, newListener->id);
 800794c:	2301      	movs	r3, #1
 800794e:	882a      	ldrh	r2, [r5, #0]
 8007950:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8007954:	4668      	mov	r0, sp
 8007956:	f002 f834 	bl	80099c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
        return DEVICE_OK;
 800795a:	2000      	movs	r0, #0
 800795c:	e01f      	b.n	800799e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc2>

    while (l != NULL && l->id < newListener->id)
    {
        p = l;
 800795e:	461a      	mov	r2, r3
        l = l->next;
 8007960:	69db      	ldr	r3, [r3, #28]
    while (l != NULL && l->id < newListener->id)
 8007962:	b11b      	cbz	r3, 800796c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x90>
 8007964:	8818      	ldrh	r0, [r3, #0]
 8007966:	8829      	ldrh	r1, [r5, #0]
 8007968:	4288      	cmp	r0, r1
 800796a:	d3f8      	bcc.n	800795e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x82>
    }

    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800796c:	b153      	cbz	r3, 8007984 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa8>
 800796e:	8818      	ldrh	r0, [r3, #0]
 8007970:	8829      	ldrh	r1, [r5, #0]
 8007972:	4288      	cmp	r0, r1
 8007974:	d106      	bne.n	8007984 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa8>
 8007976:	8858      	ldrh	r0, [r3, #2]
 8007978:	8869      	ldrh	r1, [r5, #2]
 800797a:	4288      	cmp	r0, r1
 800797c:	d202      	bcs.n	8007984 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa8>
    {
        p = l;
 800797e:	461a      	mov	r2, r3
        l = l->next;
 8007980:	69db      	ldr	r3, [r3, #28]
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 8007982:	e7f3      	b.n	800796c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x90>
    }

    //add at front of list
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 8007984:	4294      	cmp	r4, r2
 8007986:	d00c      	beq.n	80079a2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc6>
    }

    //add after p
    else
    {
        newListener->next = p->next;
 8007988:	69d3      	ldr	r3, [r2, #28]
 800798a:	61eb      	str	r3, [r5, #28]
        p->next = newListener;
 800798c:	61d5      	str	r5, [r2, #28]
    }

    Event(DEVICE_ID_MESSAGE_BUS_LISTENER, newListener->id);
 800798e:	2301      	movs	r3, #1
 8007990:	882a      	ldrh	r2, [r5, #0]
 8007992:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8007996:	a802      	add	r0, sp, #8
 8007998:	f002 f813 	bl	80099c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
    return DEVICE_OK;
 800799c:	2000      	movs	r0, #0
}
 800799e:	b004      	add	sp, #16
 80079a0:	bd70      	pop	{r4, r5, r6, pc}
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 80079a2:	8829      	ldrh	r1, [r5, #0]
 80079a4:	8813      	ldrh	r3, [r2, #0]
 80079a6:	4299      	cmp	r1, r3
 80079a8:	d304      	bcc.n	80079b4 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd8>
 80079aa:	d1ed      	bne.n	8007988 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xac>
 80079ac:	8851      	ldrh	r1, [r2, #2]
 80079ae:	886b      	ldrh	r3, [r5, #2]
 80079b0:	4299      	cmp	r1, r3
 80079b2:	d9e9      	bls.n	8007988 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xac>
        newListener->next = p;
 80079b4:	61ea      	str	r2, [r5, #28]
        listeners = newListener;
 80079b6:	6175      	str	r5, [r6, #20]
 80079b8:	e7e9      	b.n	800798e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xb2>
        return DEVICE_INVALID_PARAMETER;
 80079ba:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 80079be:	4770      	bx	lr
 80079c0:	fffffc16 	.word	0xfffffc16

080079c4 <_ZN5codal10MessageBus7processERNS_5EventEb>:
{
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	460d      	mov	r5, r1
 80079c8:	4617      	mov	r7, r2
    l = listeners;
 80079ca:	6944      	ldr	r4, [r0, #20]
    int complete = 1;
 80079cc:	2601      	movs	r6, #1
 80079ce:	e004      	b.n	80079da <_ZN5codal10MessageBus7processERNS_5EventEb+0x16>
                listenerUrgent = true;
 80079d0:	2301      	movs	r3, #1
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 80079d2:	42bb      	cmp	r3, r7
 80079d4:	d01b      	beq.n	8007a0e <_ZN5codal10MessageBus7processERNS_5EventEb+0x4a>
                complete = 0;
 80079d6:	2600      	movs	r6, #0
        l = l->next;
 80079d8:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 80079da:	2c00      	cmp	r4, #0
 80079dc:	d032      	beq.n	8007a44 <_ZN5codal10MessageBus7processERNS_5EventEb+0x80>
        if((l->id == evt.source || l->id == DEVICE_ID_ANY) && (l->value == evt.value || l->value == DEVICE_EVT_ANY))
 80079de:	8823      	ldrh	r3, [r4, #0]
 80079e0:	882a      	ldrh	r2, [r5, #0]
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d001      	beq.n	80079ea <_ZN5codal10MessageBus7processERNS_5EventEb+0x26>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1f6      	bne.n	80079d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
 80079ea:	8863      	ldrh	r3, [r4, #2]
 80079ec:	886a      	ldrh	r2, [r5, #2]
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d001      	beq.n	80079f6 <_ZN5codal10MessageBus7processERNS_5EventEb+0x32>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1f0      	bne.n	80079d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
            if (fiber_scheduler_running())
 80079f6:	f7ff fbc1 	bl	800717c <_ZN5codal23fiber_scheduler_runningEv>
 80079fa:	2800      	cmp	r0, #0
 80079fc:	d0e8      	beq.n	80079d0 <_ZN5codal10MessageBus7processERNS_5EventEb+0xc>
                listenerUrgent = (l->flags & MESSAGE_BUS_LISTENER_IMMEDIATE) == MESSAGE_BUS_LISTENER_IMMEDIATE;
 80079fe:	88a3      	ldrh	r3, [r4, #4]
 8007a00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a04:	2bc0      	cmp	r3, #192	; 0xc0
 8007a06:	bf14      	ite	ne
 8007a08:	2300      	movne	r3, #0
 8007a0a:	2301      	moveq	r3, #1
 8007a0c:	e7e1      	b.n	80079d2 <_ZN5codal10MessageBus7processERNS_5EventEb+0xe>
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 8007a0e:	88a2      	ldrh	r2, [r4, #4]
 8007a10:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8007a14:	d114      	bne.n	8007a40 <_ZN5codal10MessageBus7processERNS_5EventEb+0x7c>
                l->evt = evt;
 8007a16:	f104 0310 	add.w	r3, r4, #16
 8007a1a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007a1e:	e883 0003 	stmia.w	r3, {r0, r1}
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 8007a22:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007a26:	d102      	bne.n	8007a2e <_ZN5codal10MessageBus7processERNS_5EventEb+0x6a>
 8007a28:	f7ff fba8 	bl	800717c <_ZN5codal23fiber_scheduler_runningEv>
 8007a2c:	b918      	cbnz	r0, 8007a36 <_ZN5codal10MessageBus7processERNS_5EventEb+0x72>
                    async_callback(l);
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f001 fe53 	bl	80096da <_Z14async_callbackPv>
 8007a34:	e7d0      	b.n	80079d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
                    invoke(async_callback, l);
 8007a36:	4621      	mov	r1, r4
 8007a38:	4803      	ldr	r0, [pc, #12]	; (8007a48 <_ZN5codal10MessageBus7processERNS_5EventEb+0x84>)
 8007a3a:	f7ff fe0f 	bl	800765c <_ZN5codal6invokeEPFvPvES0_>
 8007a3e:	e7cb      	b.n	80079d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
                complete = 0;
 8007a40:	2600      	movs	r6, #0
 8007a42:	e7c9      	b.n	80079d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
}
 8007a44:	4630      	mov	r0, r6
 8007a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a48:	080096db 	.word	0x080096db

08007a4c <_ZN5codal19allocateNotifyEventEv>:
/**
 * Allocate a NOTIFY event code dynamicaly, for generally purpose condition synchronisation.
 */
uint16_t allocateNotifyEvent()
{
    return userNotifyId++;
 8007a4c:	4b02      	ldr	r3, [pc, #8]	; (8007a58 <_ZN5codal19allocateNotifyEventEv+0xc>)
 8007a4e:	8818      	ldrh	r0, [r3, #0]
 8007a50:	1c42      	adds	r2, r0, #1
 8007a52:	801a      	strh	r2, [r3, #0]
}
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20001004 	.word	0x20001004

08007a5c <_ZN5codal22MemberFunctionCallbackC1INS_10MessageBusEEEPT_MS3_FvNS_5EventEE>:
      * @param object The object the callback method should be invooked on.
      *
      * @param method The method to invoke.
      */
    template <typename T>
    MemberFunctionCallback::MemberFunctionCallback(T* object, void (T::*method)(Event e))
 8007a5c:	b410      	push	{r4}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	4604      	mov	r4, r0
 8007a62:	4668      	mov	r0, sp
 8007a64:	e880 000c 	stmia.w	r0, {r2, r3}
    {
        this->object = object;
 8007a68:	4622      	mov	r2, r4
 8007a6a:	f842 1b04 	str.w	r1, [r2], #4
 8007a6e:	2300      	movs	r3, #0
 8007a70:	6093      	str	r3, [r2, #8]
 8007a72:	60d3      	str	r3, [r2, #12]
        memclr(this->method, sizeof(this->method));
        memcpy(this->method, &method, sizeof(method));
 8007a74:	4603      	mov	r3, r0
 8007a76:	cb03      	ldmia	r3!, {r0, r1}
 8007a78:	6060      	str	r0, [r4, #4]
 8007a7a:	6051      	str	r1, [r2, #4]
        invoke = &MemberFunctionCallback::methodCall<T>;
 8007a7c:	4b02      	ldr	r3, [pc, #8]	; (8007a88 <_ZN5codal22MemberFunctionCallbackC1INS_10MessageBusEEEPT_MS3_FvNS_5EventEE+0x2c>)
 8007a7e:	6163      	str	r3, [r4, #20]
    }
 8007a80:	4620      	mov	r0, r4
 8007a82:	b003      	add	sp, #12
 8007a84:	bc10      	pop	{r4}
 8007a86:	4770      	bx	lr
 8007a88:	080096a5 	.word	0x080096a5

08007a8c <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt>:
      *
      * @return DEVICE_OK on success or DEVICE_INVALID_PARAMETER if the handler or object
      *         pointers are NULL.
      */
    template <typename T>
    int EventModel::listen(uint16_t id, uint16_t value, T* object, void (T::*handler)(Event), uint16_t flags)
 8007a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a90:	b085      	sub	sp, #20
 8007a92:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
    {
        if (object == NULL || handler == NULL)
 8007a96:	b3ab      	cbz	r3, 8007b04 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x78>
 8007a98:	461f      	mov	r7, r3
 8007a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a9c:	b35b      	cbz	r3, 8007af6 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x6a>
            return DEVICE_INVALID_PARAMETER;

        if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
 8007a9e:	290f      	cmp	r1, #15
 8007aa0:	d102      	bne.n	8007aa8 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x1c>
 8007aa2:	f1b8 0fc0 	cmp.w	r8, #192	; 0xc0
 8007aa6:	d130      	bne.n	8007b0a <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x7e>
 8007aa8:	4691      	mov	r9, r2
 8007aaa:	460c      	mov	r4, r1
 8007aac:	4605      	mov	r5, r0
            return DEVICE_INVALID_PARAMETER;

        Listener *newListener = new Listener(id, value, object, handler, flags);
 8007aae:	2020      	movs	r0, #32
 8007ab0:	f7fb f87e 	bl	8002bb0 <_Znwj>
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	f8cd 8008 	str.w	r8, [sp, #8]
 8007aba:	ab0c      	add	r3, sp, #48	; 0x30
 8007abc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007ac0:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	464a      	mov	r2, r9
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4630      	mov	r0, r6
 8007acc:	f001 ff1d 	bl	800990a <_ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt>

        if(add(newListener) == DEVICE_OK)
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	4798      	blx	r3
 8007ada:	4603      	mov	r3, r0
 8007adc:	b138      	cbz	r0, 8007aee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
            return DEVICE_OK;

        delete newListener;
 8007ade:	b1be      	cbz	r6, 8007b10 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x84>
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	f001 fb80 	bl	80091e6 <_ZN5codal8ListenerD1Ev>
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f7fb f866 	bl	8002bb8 <_ZdlPv>
        return DEVICE_NOT_SUPPORTED;
 8007aec:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x88>)
    }
 8007aee:	4618      	mov	r0, r3
 8007af0:	b005      	add	sp, #20
 8007af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (object == NULL || handler == NULL)
 8007af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007af8:	f013 0f01 	tst.w	r3, #1
 8007afc:	d1cf      	bne.n	8007a9e <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x12>
            return DEVICE_INVALID_PARAMETER;
 8007afe:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8007b02:	e7f4      	b.n	8007aee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
 8007b04:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8007b08:	e7f1      	b.n	8007aee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
            return DEVICE_INVALID_PARAMETER;
 8007b0a:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8007b0e:	e7ee      	b.n	8007aee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
        return DEVICE_NOT_SUPPORTED;
 8007b10:	4b00      	ldr	r3, [pc, #0]	; (8007b14 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x88>)
 8007b12:	e7ec      	b.n	8007aee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
 8007b14:	fffffc16 	.word	0xfffffc16

08007b18 <_ZN5codal10MessageBusC1Ev>:
MessageBus::MessageBus()
 8007b18:	b530      	push	{r4, r5, lr}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	4604      	mov	r4, r0
    class EventModel
 8007b1e:	4b16      	ldr	r3, [pc, #88]	; (8007b78 <_ZN5codal10MessageBusC1Ev+0x60>)
 8007b20:	f840 3b08 	str.w	r3, [r0], #8
        {
 8007b24:	4b15      	ldr	r3, [pc, #84]	; (8007b7c <_ZN5codal10MessageBusC1Ev+0x64>)
 8007b26:	60a3      	str	r3, [r4, #8]
            this->id = 0;
 8007b28:	2500      	movs	r5, #0
 8007b2a:	81a5      	strh	r5, [r4, #12]
            this->status = 0;
 8007b2c:	81e5      	strh	r5, [r4, #14]
            addComponent();
 8007b2e:	f7ff f9df 	bl	8006ef0 <_ZN5codal14CodalComponent12addComponentEv>
 8007b32:	4b13      	ldr	r3, [pc, #76]	; (8007b80 <_ZN5codal10MessageBusC1Ev+0x68>)
 8007b34:	f103 0208 	add.w	r2, r3, #8
 8007b38:	6022      	str	r2, [r4, #0]
 8007b3a:	3328      	adds	r3, #40	; 0x28
 8007b3c:	60a3      	str	r3, [r4, #8]
    this->listeners = NULL;
 8007b3e:	6165      	str	r5, [r4, #20]
    this->evt_queue_head = NULL;
 8007b40:	61a5      	str	r5, [r4, #24]
    this->evt_queue_tail = NULL;
 8007b42:	61e5      	str	r5, [r4, #28]
    this->queueLength = 0;
 8007b44:	8465      	strh	r5, [r4, #34]	; 0x22
    listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, this, &MessageBus::idle, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007b46:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <_ZN5codal10MessageBusC1Ev+0x6c>)
 8007b48:	9304      	str	r3, [sp, #16]
 8007b4a:	9505      	str	r5, [sp, #20]
 8007b4c:	23c0      	movs	r3, #192	; 0xc0
 8007b4e:	9302      	str	r3, [sp, #8]
 8007b50:	ab06      	add	r3, sp, #24
 8007b52:	e913 0003 	ldmdb	r3, {r0, r1}
 8007b56:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007b5a:	4623      	mov	r3, r4
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	210f      	movs	r1, #15
 8007b60:	4620      	mov	r0, r4
 8007b62:	f7ff ff93 	bl	8007a8c <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt>
    if(EventModel::defaultEventBus == NULL)
 8007b66:	4b08      	ldr	r3, [pc, #32]	; (8007b88 <_ZN5codal10MessageBusC1Ev+0x70>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	b113      	cbz	r3, 8007b72 <_ZN5codal10MessageBusC1Ev+0x5a>
}
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	b007      	add	sp, #28
 8007b70:	bd30      	pop	{r4, r5, pc}
        EventModel::defaultEventBus = this;
 8007b72:	4b05      	ldr	r3, [pc, #20]	; (8007b88 <_ZN5codal10MessageBusC1Ev+0x70>)
 8007b74:	601c      	str	r4, [r3, #0]
 8007b76:	e7f9      	b.n	8007b6c <_ZN5codal10MessageBusC1Ev+0x54>
 8007b78:	0800a2e4 	.word	0x0800a2e4
 8007b7c:	0800a244 	.word	0x0800a244
 8007b80:	0800a2f0 	.word	0x0800a2f0
 8007b84:	080098cd 	.word	0x080098cd
 8007b88:	20002170 	.word	0x20002170

08007b8c <_ZN5codal10MessageBusD1Ev>:
}

/**
  * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
  */
MessageBus::~MessageBus()
 8007b8c:	b530      	push	{r4, r5, lr}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	4604      	mov	r4, r0
 8007b92:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <_ZN5codal10MessageBusD1Ev+0x44>)
 8007b94:	f103 0208 	add.w	r2, r3, #8
 8007b98:	6002      	str	r2, [r0, #0]
 8007b9a:	3328      	adds	r3, #40	; 0x28
 8007b9c:	6083      	str	r3, [r0, #8]
{
    ignore(DEVICE_ID_SCHEDULER, DEVICE_EVT_ANY, this, &MessageBus::idle);
 8007b9e:	4b0d      	ldr	r3, [pc, #52]	; (8007bd4 <_ZN5codal10MessageBusD1Ev+0x48>)
 8007ba0:	9302      	str	r3, [sp, #8]
 8007ba2:	2500      	movs	r5, #0
 8007ba4:	9503      	str	r5, [sp, #12]
 8007ba6:	ab04      	add	r3, sp, #16
 8007ba8:	e913 0003 	ldmdb	r3, {r0, r1}
 8007bac:	e88d 0003 	stmia.w	sp, {r0, r1}
 8007bb0:	4623      	mov	r3, r4
 8007bb2:	462a      	mov	r2, r5
 8007bb4:	210f      	movs	r1, #15
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f001 fec6 	bl	8009948 <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE>
        {
 8007bbc:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <_ZN5codal10MessageBusD1Ev+0x4c>)
 8007bbe:	60a3      	str	r3, [r4, #8]
            status = 0;
 8007bc0:	81e5      	strh	r5, [r4, #14]
            removeComponent();
 8007bc2:	f104 0008 	add.w	r0, r4, #8
 8007bc6:	f7ff f9f9 	bl	8006fbc <_ZN5codal14CodalComponent15removeComponentEv>
}
 8007bca:	4620      	mov	r0, r4
 8007bcc:	b005      	add	sp, #20
 8007bce:	bd30      	pop	{r4, r5, pc}
 8007bd0:	0800a2f0 	.word	0x0800a2f0
 8007bd4:	080098cd 	.word	0x080098cd
 8007bd8:	0800a244 	.word	0x0800a244

08007bdc <_ZN5codal5Event4fireEv>:

/**
  * Fires this Event onto the Default EventModel, or a custom one!
  */
void Event::fire()
{
 8007bdc:	b538      	push	{r3, r4, r5, lr}
    if(EventModel::defaultEventBus)
 8007bde:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <_ZN5codal5Event4fireEv+0x18>)
 8007be0:	681c      	ldr	r4, [r3, #0]
 8007be2:	b12c      	cbz	r4, 8007bf0 <_ZN5codal5Event4fireEv+0x14>
        EventModel::defaultEventBus->send(*this);
 8007be4:	6822      	ldr	r2, [r4, #0]
 8007be6:	6815      	ldr	r5, [r2, #0]
 8007be8:	e9d0 1200 	ldrd	r1, r2, [r0]
 8007bec:	4620      	mov	r0, r4
 8007bee:	47a8      	blx	r5
}
 8007bf0:	bd38      	pop	{r3, r4, r5, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20002170 	.word	0x20002170

08007bf8 <_ZN5codal13ManagedString9initEmptyEv>:
  *
  * Configures this ManagedString to refer to the static EmptyString
  */
void ManagedString::initEmpty()
{
    ptr = EMPTY_DATA;
 8007bf8:	4b01      	ldr	r3, [pc, #4]	; (8007c00 <_ZN5codal13ManagedString9initEmptyEv+0x8>)
 8007bfa:	6003      	str	r3, [r0, #0]
}
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	0800a32c 	.word	0x0800a32c

08007c04 <_Z41__static_initialization_and_destruction_0ii>:
}

/**
  * Empty string constant literal
  */
ManagedString ManagedString::EmptyString(EMPTY_DATA);
 8007c04:	2801      	cmp	r0, #1
 8007c06:	d000      	beq.n	8007c0a <_Z41__static_initialization_and_destruction_0ii+0x6>
 8007c08:	4770      	bx	lr
 8007c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c0e:	4299      	cmp	r1, r3
 8007c10:	d1fa      	bne.n	8007c08 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8007c12:	b510      	push	{r4, lr}
 8007c14:	4c05      	ldr	r4, [pc, #20]	; (8007c2c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8007c16:	4906      	ldr	r1, [pc, #24]	; (8007c30 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f001 ff1e 	bl	8009a5a <_ZN5codal13ManagedStringC1EPNS_10StringDataE>
 8007c1e:	4a05      	ldr	r2, [pc, #20]	; (8007c34 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8007c20:	4905      	ldr	r1, [pc, #20]	; (8007c38 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8007c22:	4620      	mov	r0, r4
 8007c24:	f7f8 fed8 	bl	80009d8 <__aeabi_atexit>
 8007c28:	bd10      	pop	{r4, pc}
 8007c2a:	bf00      	nop
 8007c2c:	20002174 	.word	0x20002174
 8007c30:	0800a32c 	.word	0x0800a32c
 8007c34:	20000164 	.word	0x20000164
 8007c38:	08009a1f 	.word	0x08009a1f

08007c3c <_ZN5codal4itoaEiPc>:
int codal::itoa(int n, char *s)
{
    int i = 0;
    int positive = (n >= 0);

    if (s == NULL)
 8007c3c:	b369      	cbz	r1, 8007c9a <_ZN5codal4itoaEiPc+0x5e>
{
 8007c3e:	b570      	push	{r4, r5, r6, lr}
 8007c40:	460d      	mov	r5, r1
        return DEVICE_INVALID_PARAMETER;

    // Record the sign of the number,
    // Ensure our working value is positive.
    if (positive)
 8007c42:	2800      	cmp	r0, #0
 8007c44:	db02      	blt.n	8007c4c <_ZN5codal4itoaEiPc+0x10>
        n = -n;
 8007c46:	4241      	negs	r1, r0
 8007c48:	2400      	movs	r4, #0
 8007c4a:	e002      	b.n	8007c52 <_ZN5codal4itoaEiPc+0x16>
 8007c4c:	4601      	mov	r1, r0
 8007c4e:	e7fb      	b.n	8007c48 <_ZN5codal4itoaEiPc+0xc>

    // Calculate each character, starting with the LSB.
    do {
         s[i++] = abs(n % 10) + '0';
 8007c50:	4634      	mov	r4, r6
 8007c52:	4a13      	ldr	r2, [pc, #76]	; (8007ca0 <_ZN5codal4itoaEiPc+0x64>)
 8007c54:	fb82 3201 	smull	r3, r2, r2, r1
 8007c58:	17cb      	asrs	r3, r1, #31
 8007c5a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8007c5e:	461a      	mov	r2, r3
 8007c60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007c64:	005e      	lsls	r6, r3, #1
 8007c66:	1b8b      	subs	r3, r1, r6
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bfb8      	it	lt
 8007c6c:	425b      	neglt	r3, r3
 8007c6e:	1c66      	adds	r6, r4, #1
 8007c70:	3330      	adds	r3, #48	; 0x30
 8007c72:	552b      	strb	r3, [r5, r4]
    } while (abs(n /= 10) > 0);
 8007c74:	4611      	mov	r1, r2
 8007c76:	2a00      	cmp	r2, #0
 8007c78:	bfb8      	it	lt
 8007c7a:	4252      	neglt	r2, r2
 8007c7c:	2a00      	cmp	r2, #0
 8007c7e:	dce7      	bgt.n	8007c50 <_ZN5codal4itoaEiPc+0x14>

    // Add a negative sign as needed
    if (!positive)
 8007c80:	2800      	cmp	r0, #0
 8007c82:	db06      	blt.n	8007c92 <_ZN5codal4itoaEiPc+0x56>
 8007c84:	4628      	mov	r0, r5
        s[i++] = '-';

    // Terminate the string.
    s[i] = '\0';
 8007c86:	2400      	movs	r4, #0
 8007c88:	55ac      	strb	r4, [r5, r6]

    // Flip the order.
    string_reverse(s);
 8007c8a:	f001 ff84 	bl	8009b96 <_ZN5codal14string_reverseEPc>

    return DEVICE_OK;
 8007c8e:	4620      	mov	r0, r4
}
 8007c90:	bd70      	pop	{r4, r5, r6, pc}
        s[i++] = '-';
 8007c92:	232d      	movs	r3, #45	; 0x2d
 8007c94:	55ab      	strb	r3, [r5, r6]
 8007c96:	1ca6      	adds	r6, r4, #2
 8007c98:	e7f4      	b.n	8007c84 <_ZN5codal4itoaEiPc+0x48>
        return DEVICE_INVALID_PARAMETER;
 8007c9a:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 8007c9e:	4770      	bx	lr
 8007ca0:	66666667 	.word	0x66666667

08007ca4 <_ZN5codal3_cm3Pin14setAnalogValueEi>:
  *         if the given pin does not have analog capability.
  */
int Pin::setAnalogValue(int value)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 8007ca4:	7903      	ldrb	r3, [r0, #4]
 8007ca6:	f013 0f01 	tst.w	r3, #1
 8007caa:	d007      	beq.n	8007cbc <_ZN5codal3_cm3Pin14setAnalogValueEi+0x18>
        return DEVICE_NOT_SUPPORTED;

    //sanitise the level value
    if(value < 0 || value > DEVICE_PIN_MAX_OUTPUT)
 8007cac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007cb0:	d201      	bcs.n	8007cb6 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x12>
#ifdef TODO
    //obtain use of the DynamicPwm instance, if it has changed / configure if we do not have one
    if(obtainAnalogChannel() == DEVICE_OK)
        return ((DynamicPwm *)pin)->write(level);
#endif  //  TODO
    return DEVICE_OK;
 8007cb2:	2000      	movs	r0, #0
}
 8007cb4:	4770      	bx	lr
        return DEVICE_INVALID_PARAMETER;
 8007cb6:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 8007cba:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 8007cbc:	4800      	ldr	r0, [pc, #0]	; (8007cc0 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x1c>)
 8007cbe:	4770      	bx	lr
 8007cc0:	fffffc16 	.word	0xfffffc16

08007cc4 <_ZN5codal3_cm3Pin9isTouchedEv>:
  * @endcode
  */
int Pin::isTouched()
{
    return DEVICE_NOT_SUPPORTED;
}
 8007cc4:	4800      	ldr	r0, [pc, #0]	; (8007cc8 <_ZN5codal3_cm3Pin9isTouchedEv+0x4>)
 8007cc6:	4770      	bx	lr
 8007cc8:	fffffc16 	.word	0xfffffc16

08007ccc <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv>:
        return DEVICE_NOT_SUPPORTED;

    return ((DynamicPwm *)pin)->getPeriodUs();
#endif  //  TODO
    return DEVICE_NOT_SUPPORTED;
}
 8007ccc:	4800      	ldr	r0, [pc, #0]	; (8007cd0 <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv+0x4>)
 8007cce:	4770      	bx	lr
 8007cd0:	fffffc16 	.word	0xfffffc16

08007cd4 <_ZN5codal3_cm3Pin15getAnalogPeriodEv>:
  *
  * @return the period on success, or DEVICE_NOT_SUPPORTED if the
  *         given pin is not configured as an analog output.
  */
int Pin::getAnalogPeriod()
{
 8007cd4:	b508      	push	{r3, lr}
    return getAnalogPeriodUs()/1000;
 8007cd6:	6803      	ldr	r3, [r0, #0]
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	4798      	blx	r3
 8007cdc:	4b02      	ldr	r3, [pc, #8]	; (8007ce8 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x14>)
 8007cde:	fba3 3000 	umull	r3, r0, r3, r0
}
 8007ce2:	0980      	lsrs	r0, r0, #6
 8007ce4:	bd08      	pop	{r3, pc}
 8007ce6:	bf00      	nop
 8007ce8:	10624dd3 	.word	0x10624dd3

08007cec <_ZN5codal3_cm3Pin15setDigitalValueEi>:
{
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	4605      	mov	r5, r0
 8007cf0:	460c      	mov	r4, r1
    debug_print("pin "); debug_println(value); ////
 8007cf2:	4815      	ldr	r0, [pc, #84]	; (8007d48 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x5c>)
 8007cf4:	f7fa fde2 	bl	80028bc <debug_print>
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f7fa fdc1 	bl	8002880 <_Z13debug_printlni>
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 8007cfe:	792b      	ldrb	r3, [r5, #4]
 8007d00:	f013 0f01 	tst.w	r3, #1
 8007d04:	d01b      	beq.n	8007d3e <_ZN5codal3_cm3Pin15setDigitalValueEi+0x52>
    if (value < 0 || value > 1)
 8007d06:	2c01      	cmp	r4, #1
 8007d08:	d81b      	bhi.n	8007d42 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x56>
	rcc_periph_clock_enable(RCC_GPIOC);
 8007d0a:	f44f 7041 	mov.w	r0, #772	; 0x304
 8007d0e:	f7f9 fcfa 	bl	8001706 <rcc_periph_clock_enable>
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 8007d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d16:	2200      	movs	r2, #0
 8007d18:	2102      	movs	r1, #2
 8007d1a:	480c      	ldr	r0, [pc, #48]	; (8007d4c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x60>)
 8007d1c:	f7f9 fcb4 	bl	8001688 <gpio_set_mode>
    if (value) {
 8007d20:	b934      	cbnz	r4, 8007d30 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x44>
	    gpio_clear(GPIOC, GPIO13);
 8007d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007d26:	4809      	ldr	r0, [pc, #36]	; (8007d4c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x60>)
 8007d28:	f7f9 fce6 	bl	80016f8 <gpio_clear>
    return DEVICE_OK;
 8007d2c:	4620      	mov	r0, r4
}
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
        gpio_set(GPIOC, GPIO13);
 8007d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007d34:	4805      	ldr	r0, [pc, #20]	; (8007d4c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x60>)
 8007d36:	f7f9 fcdd 	bl	80016f4 <gpio_set>
    return DEVICE_OK;
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	e7f7      	b.n	8007d2e <_ZN5codal3_cm3Pin15setDigitalValueEi+0x42>
        return DEVICE_NOT_SUPPORTED;
 8007d3e:	4804      	ldr	r0, [pc, #16]	; (8007d50 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x64>)
 8007d40:	e7f5      	b.n	8007d2e <_ZN5codal3_cm3Pin15setDigitalValueEi+0x42>
        return DEVICE_INVALID_PARAMETER;
 8007d42:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 8007d46:	e7f2      	b.n	8007d2e <_ZN5codal3_cm3Pin15setDigitalValueEi+0x42>
 8007d48:	0800a330 	.word	0x0800a330
 8007d4c:	40011000 	.word	0x40011000
 8007d50:	fffffc16 	.word	0xfffffc16

08007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>:
Pin::Pin(
 8007d54:	b470      	push	{r4, r5, r6}
    rcc(rcc), port(port), pin(pin) {
 8007d56:	f101 0664 	add.w	r6, r1, #100	; 0x64
          * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_ALL);
          * @endcode
          */
        Pin(int id, PinNumber name, PinCapability capability)
        {
            this->status = 0;
 8007d5a:	2500      	movs	r5, #0
 8007d5c:	8185      	strh	r5, [r0, #12]
            this->id = id;
 8007d5e:	81c6      	strh	r6, [r0, #14]
            this->name = name;
 8007d60:	7401      	strb	r1, [r0, #16]
            this->capability = capability;
 8007d62:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8007d66:	7101      	strb	r1, [r0, #4]
 8007d68:	4904      	ldr	r1, [pc, #16]	; (8007d7c <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE+0x28>)
 8007d6a:	6001      	str	r1, [r0, #0]
 8007d6c:	6142      	str	r2, [r0, #20]
 8007d6e:	6183      	str	r3, [r0, #24]
 8007d70:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007d74:	8383      	strh	r3, [r0, #28]
    this->pullMode = DEVICE_DEFAULT_PULLMODE;
 8007d76:	6085      	str	r5, [r0, #8]
}
 8007d78:	bc70      	pop	{r4, r5, r6}
 8007d7a:	4770      	bx	lr
 8007d7c:	0800a340 	.word	0x0800a340

08007d80 <_ZN5codal3_cm3Pin13setServoValueEiii>:
{
 8007d80:	b538      	push	{r3, r4, r5, lr}
    if(!(PIN_CAPABILITY_ANALOG & capability))
 8007d82:	7904      	ldrb	r4, [r0, #4]
 8007d84:	f014 0f02 	tst.w	r4, #2
 8007d88:	d024      	beq.n	8007dd4 <_ZN5codal3_cm3Pin13setServoValueEiii+0x54>
    if(value < 0 || range < 1 || center < 1)
 8007d8a:	2900      	cmp	r1, #0
 8007d8c:	db24      	blt.n	8007dd8 <_ZN5codal3_cm3Pin13setServoValueEiii+0x58>
 8007d8e:	2a00      	cmp	r2, #0
 8007d90:	dd25      	ble.n	8007dde <_ZN5codal3_cm3Pin13setServoValueEiii+0x5e>
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	dd26      	ble.n	8007de4 <_ZN5codal3_cm3Pin13setServoValueEiii+0x64>
    if(value > DEVICE_PIN_MAX_SERVO_RANGE)
 8007d96:	29b4      	cmp	r1, #180	; 0xb4
 8007d98:	dd00      	ble.n	8007d9c <_ZN5codal3_cm3Pin13setServoValueEiii+0x1c>
        value = DEVICE_PIN_MAX_SERVO_RANGE;
 8007d9a:	21b4      	movs	r1, #180	; 0xb4
    int lower = (center - (range / 2)) * 1000;
 8007d9c:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 8007da0:	eba3 0364 	sub.w	r3, r3, r4, asr #1
 8007da4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    value = value * 1000;
 8007da8:	fb05 f101 	mul.w	r1, r5, r1
    int scaled = lower + (range * (value / DEVICE_PIN_MAX_SERVO_RANGE));
 8007dac:	4c0f      	ldr	r4, [pc, #60]	; (8007dec <_ZN5codal3_cm3Pin13setServoValueEiii+0x6c>)
 8007dae:	fb84 c401 	smull	ip, r4, r4, r1
 8007db2:	440c      	add	r4, r1
 8007db4:	17c9      	asrs	r1, r1, #31
 8007db6:	ebc1 11e4 	rsb	r1, r1, r4, asr #7
 8007dba:	fb02 f101 	mul.w	r1, r2, r1
 8007dbe:	fb05 1303 	mla	r3, r5, r3, r1
    return setServoPulseUs(scaled / 1000);
 8007dc2:	490b      	ldr	r1, [pc, #44]	; (8007df0 <_ZN5codal3_cm3Pin13setServoValueEiii+0x70>)
 8007dc4:	fb81 2103 	smull	r2, r1, r1, r3
 8007dc8:	17db      	asrs	r3, r3, #31
 8007dca:	ebc3 11a1 	rsb	r1, r3, r1, asr #6
 8007dce:	f001 ff5e 	bl	8009c8e <_ZN5codal3_cm3Pin15setServoPulseUsEi>
}
 8007dd2:	bd38      	pop	{r3, r4, r5, pc}
        return DEVICE_NOT_SUPPORTED;
 8007dd4:	4807      	ldr	r0, [pc, #28]	; (8007df4 <_ZN5codal3_cm3Pin13setServoValueEiii+0x74>)
 8007dd6:	e7fc      	b.n	8007dd2 <_ZN5codal3_cm3Pin13setServoValueEiii+0x52>
        return DEVICE_INVALID_PARAMETER;
 8007dd8:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 8007ddc:	e7f9      	b.n	8007dd2 <_ZN5codal3_cm3Pin13setServoValueEiii+0x52>
 8007dde:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 8007de2:	e7f6      	b.n	8007dd2 <_ZN5codal3_cm3Pin13setServoValueEiii+0x52>
 8007de4:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 8007de8:	e7f3      	b.n	8007dd2 <_ZN5codal3_cm3Pin13setServoValueEiii+0x52>
 8007dea:	bf00      	nop
 8007dec:	b60b60b7 	.word	0xb60b60b7
 8007df0:	10624dd3 	.word	0x10624dd3
 8007df4:	fffffc16 	.word	0xfffffc16

08007df8 <_ZN5codal3_cm6SerialD1Ev>:
 8007df8:	b510      	push	{r4, lr}
 8007dfa:	4604      	mov	r4, r0
 8007dfc:	4b02      	ldr	r3, [pc, #8]	; (8007e08 <_ZN5codal3_cm6SerialD1Ev+0x10>)
 8007dfe:	6003      	str	r3, [r0, #0]
 8007e00:	f7ff fd0e 	bl	8007820 <_ZN5codal6SerialD1Ev>
 8007e04:	4620      	mov	r0, r4
 8007e06:	bd10      	pop	{r4, pc}
 8007e08:	0800a394 	.word	0x0800a394

08007e0c <_ZN5codal3_cm6SerialD0Ev>:
 8007e0c:	b510      	push	{r4, lr}
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4b04      	ldr	r3, [pc, #16]	; (8007e24 <_ZN5codal3_cm6SerialD0Ev+0x18>)
 8007e12:	6003      	str	r3, [r0, #0]
 8007e14:	f7ff fd04 	bl	8007820 <_ZN5codal6SerialD1Ev>
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f7fa fecd 	bl	8002bb8 <_ZdlPv>
 8007e1e:	4620      	mov	r0, r4
 8007e20:	bd10      	pop	{r4, pc}
 8007e22:	bf00      	nop
 8007e24:	0800a394 	.word	0x0800a394

08007e28 <_ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh>:
          *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/SerialBase.h
          *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/RawSerial.h
          *
          *       Buffers aren't allocated until the first send or receive respectively.
          */
        Serial::Serial(Pin &tx, Pin &rx, uint8_t rxBufferSize, uint8_t txBufferSize) 
 8007e28:	b530      	push	{r4, r5, lr}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	4604      	mov	r4, r0
 8007e2e:	461d      	mov	r5, r3
            : codal::Serial(tx, rx)
 8007e30:	230c      	movs	r3, #12
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	2314      	movs	r3, #20
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	f7ff fcc2 	bl	80077c0 <_ZN5codal6SerialC1ERNS_3PinES2_hht>
 8007e3c:	4b0d      	ldr	r3, [pc, #52]	; (8007e74 <_ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh+0x4c>)
 8007e3e:	6023      	str	r3, [r4, #0]
        {
            // + 1 so there is a usable buffer size, of the size the user requested.
            this->rxBuffSize = rxBufferSize + 1;
 8007e40:	3501      	adds	r5, #1
 8007e42:	7725      	strb	r5, [r4, #28]
            this->txBuffSize = txBufferSize + 1;
 8007e44:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

            this->rxBuff = NULL;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61a3      	str	r3, [r4, #24]
            this->txBuff = NULL;
 8007e52:	6263      	str	r3, [r4, #36]	; 0x24

            this->rxBuffHead = 0;
 8007e54:	83e3      	strh	r3, [r4, #30]
            this->rxBuffTail = 0;
 8007e56:	8423      	strh	r3, [r4, #32]

            this->txBuffHead = 0;
 8007e58:	8563      	strh	r3, [r4, #42]	; 0x2a
            this->txBuffTail = 0;
 8007e5a:	85a3      	strh	r3, [r4, #44]	; 0x2c

            this->rxBuffHeadMatch = -1;
 8007e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e60:	6163      	str	r3, [r4, #20]

            this->baud(CODAL_SERIAL_DEFAULT_BAUD_RATE);
 8007e62:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8007e66:	4620      	mov	r0, r4
 8007e68:	f001 ff90 	bl	8009d8c <_ZN5codal3_cm6Serial4baudEi>
        }
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	b003      	add	sp, #12
 8007e70:	bd30      	pop	{r4, r5, pc}
 8007e72:	bf00      	nop
 8007e74:	0800a394 	.word	0x0800a394

08007e78 <_ZN5codal3_cm13tick_callbackEv>:
                }
            }
#endif  //  TODO
        }

        void tick_callback() {
 8007e78:	b508      	push	{r3, lr}
            //  Will be called at every millisecond tick.  Needed to keep CODAL scheduler running.
            //  Warning: This is called from an Interrupt Service Routine.  Don't trigger any interrupts or call slow functions.
            if (!Timer::instance) { return; }  //  No timer to trigger, quit.
 8007e7a:	4b09      	ldr	r3, [pc, #36]	; (8007ea0 <_ZN5codal3_cm13tick_callbackEv+0x28>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	b133      	cbz	r3, 8007e8e <_ZN5codal3_cm13tick_callbackEv+0x16>
            CODAL_TIMESTAMP now = millis();
 8007e80:	f7fa fe9e 	bl	8002bc0 <millis>
            //  If we have exceed the tick period (4 millisec)...
            if (last_trigger + (SCHEDULER_TICK_PERIOD_US / 1000) <= now) {
 8007e84:	4b07      	ldr	r3, [pc, #28]	; (8007ea4 <_ZN5codal3_cm13tick_callbackEv+0x2c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3304      	adds	r3, #4
 8007e8a:	4283      	cmp	r3, r0
 8007e8c:	d900      	bls.n	8007e90 <_ZN5codal3_cm13tick_callbackEv+0x18>
                last_trigger = now;
                Timer::instance->trigger();  //  Trigger the CODAL Scheduler.
            }
        }
 8007e8e:	bd08      	pop	{r3, pc}
                last_trigger = now;
 8007e90:	4b04      	ldr	r3, [pc, #16]	; (8007ea4 <_ZN5codal3_cm13tick_callbackEv+0x2c>)
 8007e92:	6018      	str	r0, [r3, #0]
                Timer::instance->trigger();  //  Trigger the CODAL Scheduler.
 8007e94:	4b02      	ldr	r3, [pc, #8]	; (8007ea0 <_ZN5codal3_cm13tick_callbackEv+0x28>)
 8007e96:	6818      	ldr	r0, [r3, #0]
 8007e98:	f001 fba9 	bl	80095ee <_ZN5codal5Timer7triggerEv>
 8007e9c:	e7f7      	b.n	8007e8e <_ZN5codal3_cm13tick_callbackEv+0x16>
 8007e9e:	bf00      	nop
 8007ea0:	20002178 	.word	0x20002178
 8007ea4:	2000217c 	.word	0x2000217c

08007ea8 <_ZN5codal3_cm14alarm_callbackEv>:

        void alarm_callback() {
 8007ea8:	b508      	push	{r3, lr}
            //  Will be called when an alarm is triggered.  Needed to keep CODAL scheduler running, which sets alarms every few seconds.
            //  Warning: This is called from an Interrupt Service Routine.  Don't trigger any interrupts or call slow functions.
            if (!Timer::instance) { return; }  //  No timer to trigger, quit.
 8007eaa:	4b03      	ldr	r3, [pc, #12]	; (8007eb8 <_ZN5codal3_cm14alarm_callbackEv+0x10>)
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	b108      	cbz	r0, 8007eb4 <_ZN5codal3_cm14alarm_callbackEv+0xc>
            Timer::instance->trigger();        //  Trigger the CODAL Scheduler.
 8007eb0:	f001 fb9d 	bl	80095ee <_ZN5codal5Timer7triggerEv>
        }
 8007eb4:	bd08      	pop	{r3, pc}
 8007eb6:	bf00      	nop
 8007eb8:	20002178 	.word	0x20002178

08007ebc <_ZN5codal3_cm5Timer9triggerInEm>:
            NVIC_EnableIRQ(TIM5_IRQn);
            HAL_TIM_OC_Start(&TimHandle, TIM_CHANNEL_1);
#endif  //  TODO
        }

        void Timer::triggerIn(CODAL_TIMESTAMP t) {
 8007ebc:	b508      	push	{r3, lr}
            //  Set alarm for millis() + t millisecs.
            if (!initialised) {
 8007ebe:	f890 3020 	ldrb.w	r3, [r0, #32]
 8007ec2:	b11b      	cbz	r3, 8007ecc <_ZN5codal3_cm5Timer9triggerInEm+0x10>
                trigger_period = t;
                debug_println("triggerIn b4 init!");
                return;
            }
            //  debug_print("triggerIn "); debug_println((size_t) t); debug_flush(); debug_printhex_unsigned(platform_get_alarm()); debug_print(" "); debug_flush(); ////
            platform_set_alarm(t);
 8007ec4:	4608      	mov	r0, r1
 8007ec6:	f7fa fe4d 	bl	8002b64 <platform_set_alarm>
            __HAL_TIM_SET_COMPARE(&TimHandle, TIM_CHANNEL_1,
                                (uint32_t)(__HAL_TIM_GET_COUNTER(&TimHandle) + t));
            __HAL_TIM_ENABLE_IT(&TimHandle, TIM_IT_CC1);
            target_enable_irq();
#endif  //  TODO
        }
 8007eca:	bd08      	pop	{r3, pc}
                trigger_period = t;
 8007ecc:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <_ZN5codal3_cm5Timer9triggerInEm+0x1c>)
 8007ece:	6019      	str	r1, [r3, #0]
                debug_println("triggerIn b4 init!");
 8007ed0:	4802      	ldr	r0, [pc, #8]	; (8007edc <_ZN5codal3_cm5Timer9triggerInEm+0x20>)
 8007ed2:	f7fa fcc7 	bl	8002864 <debug_println>
                return;
 8007ed6:	e7f8      	b.n	8007eca <_ZN5codal3_cm5Timer9triggerInEm+0xe>
 8007ed8:	20002180 	.word	0x20002180
 8007edc:	0800a3d8 	.word	0x0800a3d8

08007ee0 <_ZN5codal3_cm5Timer11syncRequestEv>:

        void Timer::syncRequest() {
 8007ee0:	b510      	push	{r4, lr}
 8007ee2:	b082      	sub	sp, #8
            if (!initialised) {
 8007ee4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8007ee8:	b1bb      	cbz	r3, 8007f1a <_ZN5codal3_cm5Timer11syncRequestEv+0x3a>
 8007eea:	4604      	mov	r4, r0
                debug_print("sync! ");  //  Warning: syncRequest called before init
                return;
            }
            target_disable_irq();
 8007eec:	f7f8 fd5c 	bl	80009a8 <target_disable_irq>
            volatile uint32_t curr = millis();
 8007ef0:	f7fa fe66 	bl	8002bc0 <millis>
 8007ef4:	9001      	str	r0, [sp, #4]
            volatile uint32_t delta = curr - this->prev;  //  In milliseconds.
 8007ef6:	9b01      	ldr	r3, [sp, #4]
 8007ef8:	69e2      	ldr	r2, [r4, #28]
 8007efa:	1a9b      	subs	r3, r3, r2
 8007efc:	9300      	str	r3, [sp, #0]

            // update the hal...
            // uwTick += delta;
            this->prev = curr;
 8007efe:	9b01      	ldr	r3, [sp, #4]
 8007f00:	61e3      	str	r3, [r4, #28]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 8007f02:	9b00      	ldr	r3, [sp, #0]
 8007f04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007f08:	fb01 f103 	mul.w	r1, r1, r3
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f001 fb5c 	bl	80095ca <_ZN5codal5Timer4syncEm>
            target_enable_irq();            
 8007f12:	f7f8 fd47 	bl	80009a4 <target_enable_irq>
            //  debug_print("timer sync "); debug_println((size_t) delta * 1000);
        }
 8007f16:	b002      	add	sp, #8
 8007f18:	bd10      	pop	{r4, pc}
                debug_print("sync! ");  //  Warning: syncRequest called before init
 8007f1a:	4802      	ldr	r0, [pc, #8]	; (8007f24 <_ZN5codal3_cm5Timer11syncRequestEv+0x44>)
 8007f1c:	f7fa fcce 	bl	80028bc <debug_print>
                return;
 8007f20:	e7f9      	b.n	8007f16 <_ZN5codal3_cm5Timer11syncRequestEv+0x36>
 8007f22:	bf00      	nop
 8007f24:	0800a3c4 	.word	0x0800a3c4

08007f28 <_ZN5codal3_cm5TimerC1Ev>:
        Timer::Timer() : codal::Timer() {
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	f7ff fc8c 	bl	8007848 <_ZN5codal5TimerC1Ev>
 8007f30:	4b06      	ldr	r3, [pc, #24]	; (8007f4c <_ZN5codal3_cm5TimerC1Ev+0x24>)
 8007f32:	6023      	str	r3, [r4, #0]
            initialised = false;
 8007f34:	2300      	movs	r3, #0
 8007f36:	f884 3020 	strb.w	r3, [r4, #32]
            instance = this;
 8007f3a:	4a05      	ldr	r2, [pc, #20]	; (8007f50 <_ZN5codal3_cm5TimerC1Ev+0x28>)
 8007f3c:	6014      	str	r4, [r2, #0]
            prev = 0;
 8007f3e:	61e3      	str	r3, [r4, #28]
            trigger_period = 0;
 8007f40:	4a04      	ldr	r2, [pc, #16]	; (8007f54 <_ZN5codal3_cm5TimerC1Ev+0x2c>)
 8007f42:	6013      	str	r3, [r2, #0]
            last_trigger = 0;
 8007f44:	4a04      	ldr	r2, [pc, #16]	; (8007f58 <_ZN5codal3_cm5TimerC1Ev+0x30>)
 8007f46:	6013      	str	r3, [r2, #0]
        }
 8007f48:	4620      	mov	r0, r4
 8007f4a:	bd10      	pop	{r4, pc}
 8007f4c:	0800a3f4 	.word	0x0800a3f4
 8007f50:	20002178 	.word	0x20002178
 8007f54:	20002180 	.word	0x20002180
 8007f58:	2000217c 	.word	0x2000217c

08007f5c <_ZN5codal3_cm5Timer4initEv>:
            if (initialised) { return; }  //  If already initialised, quit.
 8007f5c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8007f60:	b103      	cbz	r3, 8007f64 <_ZN5codal3_cm5Timer4initEv+0x8>
 8007f62:	4770      	bx	lr
        void Timer::init() {
 8007f64:	b510      	push	{r4, lr}
 8007f66:	4604      	mov	r4, r0
            debug_println("timer init"); ////
 8007f68:	480f      	ldr	r0, [pc, #60]	; (8007fa8 <_ZN5codal3_cm5Timer4initEv+0x4c>)
 8007f6a:	f7fa fc7b 	bl	8002864 <debug_println>
            initialised = true;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f884 3020 	strb.w	r3, [r4, #32]
            prev = millis();
 8007f74:	f7fa fe24 	bl	8002bc0 <millis>
 8007f78:	61e0      	str	r0, [r4, #28]
            target_set_tick_callback(tick_callback);
 8007f7a:	480c      	ldr	r0, [pc, #48]	; (8007fac <_ZN5codal3_cm5Timer4initEv+0x50>)
 8007f7c:	f7f8 fd00 	bl	8000980 <target_set_tick_callback>
            target_set_alarm_callback(alarm_callback);
 8007f80:	480b      	ldr	r0, [pc, #44]	; (8007fb0 <_ZN5codal3_cm5Timer4initEv+0x54>)
 8007f82:	f7f8 fd03 	bl	800098c <target_set_alarm_callback>
            if (trigger_period > 0) {
 8007f86:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <_ZN5codal3_cm5Timer4initEv+0x58>)
 8007f88:	6819      	ldr	r1, [r3, #0]
 8007f8a:	b929      	cbnz	r1, 8007f98 <_ZN5codal3_cm5Timer4initEv+0x3c>
            start_background_tasks();
 8007f8c:	f000 f8b0 	bl	80080f0 <start_background_tasks>
            bootloader_set_restart_callback(restart_callback);
 8007f90:	4809      	ldr	r0, [pc, #36]	; (8007fb8 <_ZN5codal3_cm5Timer4initEv+0x5c>)
 8007f92:	f7fc fae5 	bl	8004560 <bootloader_set_restart_callback>
        }
 8007f96:	bd10      	pop	{r4, pc}
                triggerIn(trigger_period);
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	4798      	blx	r3
                trigger_period = 0;
 8007fa0:	4b04      	ldr	r3, [pc, #16]	; (8007fb4 <_ZN5codal3_cm5Timer4initEv+0x58>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	e7f1      	b.n	8007f8c <_ZN5codal3_cm5Timer4initEv+0x30>
 8007fa8:	0800a3cc 	.word	0x0800a3cc
 8007fac:	08007e79 	.word	0x08007e79
 8007fb0:	08007ea9 	.word	0x08007ea9
 8007fb4:	20002180 	.word	0x20002180
 8007fb8:	08008095 	.word	0x08008095

08007fbc <_ZL8pre_mainv>:
static void pre_main() {
 8007fbc:	b508      	push	{r3, lr}
    if (app_bss_test != 0x0 || app_data_test != 0x12345678) {
 8007fbe:	4b0c      	ldr	r3, [pc, #48]	; (8007ff0 <_ZL8pre_mainv+0x34>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	b923      	cbnz	r3, 8007fce <_ZL8pre_mainv+0x12>
 8007fc4:	4b0b      	ldr	r3, [pc, #44]	; (8007ff4 <_ZL8pre_mainv+0x38>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	4b0b      	ldr	r3, [pc, #44]	; (8007ff8 <_ZL8pre_mainv+0x3c>)
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d00e      	beq.n	8007fec <_ZL8pre_mainv+0x30>
        debug_print("*** app bss/data failed, bss_test = "); debug_printhex_unsigned(app_bss_test);
 8007fce:	480b      	ldr	r0, [pc, #44]	; (8007ffc <_ZL8pre_mainv+0x40>)
 8007fd0:	f7fa fc74 	bl	80028bc <debug_print>
 8007fd4:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <_ZL8pre_mainv+0x34>)
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	f7fa fcbc 	bl	8002954 <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
 8007fdc:	4808      	ldr	r0, [pc, #32]	; (8008000 <_ZL8pre_mainv+0x44>)
 8007fde:	f7fa fc6d 	bl	80028bc <debug_print>
 8007fe2:	4b04      	ldr	r3, [pc, #16]	; (8007ff4 <_ZL8pre_mainv+0x38>)
 8007fe4:	6818      	ldr	r0, [r3, #0]
 8007fe6:	f7fa fcb5 	bl	8002954 <debug_printhex_unsigned>
 8007fea:	e7fe      	b.n	8007fea <_ZL8pre_mainv+0x2e>
}
 8007fec:	bd08      	pop	{r3, pc}
 8007fee:	bf00      	nop
 8007ff0:	20002184 	.word	0x20002184
 8007ff4:	20001000 	.word	0x20001000
 8007ff8:	12345678 	.word	0x12345678
 8007ffc:	0800a404 	.word	0x0800a404
 8008000:	0800a42c 	.word	0x0800a42c

08008004 <_ZL15restart_handlerN5codal5EventE>:
static codal::Event restart_event(  //  This event will be triggered for a restart request.
    CM_SOURCE_BOOTLOADER, CM_EVT_RESTART, codal::CREATE_ONLY);
static bool restart_listener_started = false;
static bool restart_requested = false;

static void restart_handler(codal::Event evt) {
 8008004:	b500      	push	{lr}
 8008006:	b083      	sub	sp, #12
 8008008:	ab02      	add	r3, sp, #8
 800800a:	e903 0003 	stmdb	r3, {r0, r1}
    //  Handle a restart request.  Flush the log then restart.
    debug_println("restart handler");
 800800e:	480e      	ldr	r0, [pc, #56]	; (8008048 <_ZL15restart_handlerN5codal5EventE+0x44>)
 8008010:	f7fa fc28 	bl	8002864 <debug_println>
    if (evt.value != CM_EVT_RESTART) { return; }
 8008014:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8008018:	f640 039d 	movw	r3, #2205	; 0x89d
 800801c:	429a      	cmp	r2, r3
 800801e:	d002      	beq.n	8008026 <_ZL15restart_handlerN5codal5EventE+0x22>
    codal::fiber_sleep(5000);

    debug_println("done");
    debug_force_flush();
    scb_reset_system();
}
 8008020:	b003      	add	sp, #12
 8008022:	f85d fb04 	ldr.w	pc, [sp], #4
    debug_println("restarting...");
 8008026:	4809      	ldr	r0, [pc, #36]	; (800804c <_ZL15restart_handlerN5codal5EventE+0x48>)
 8008028:	f7fa fc1c 	bl	8002864 <debug_println>
    debug_force_flush();
 800802c:	f7fa fbac 	bl	8002788 <debug_force_flush>
    codal::fiber_sleep(5000);
 8008030:	f241 3088 	movw	r0, #5000	; 0x1388
 8008034:	f7ff fabe 	bl	80075b4 <_ZN5codal11fiber_sleepEm>
    debug_println("done");
 8008038:	4805      	ldr	r0, [pc, #20]	; (8008050 <_ZL15restart_handlerN5codal5EventE+0x4c>)
 800803a:	f7fa fc13 	bl	8002864 <debug_println>
    debug_force_flush();
 800803e:	f7fa fba3 	bl	8002788 <debug_force_flush>
    scb_reset_system();
 8008042:	f7f9 f8c1 	bl	80011c8 <scb_reset_system>
 8008046:	bf00      	nop
 8008048:	0800a448 	.word	0x0800a448
 800804c:	0800a458 	.word	0x0800a458
 8008050:	0800a468 	.word	0x0800a468

08008054 <_ZL10flush_taskv>:
        return status;
    }
    return 0;
}

static void flush_task(void) {
 8008054:	b508      	push	{r3, lr}
    //  Flush the log periodically.
    debug_println("flush task");
 8008056:	4804      	ldr	r0, [pc, #16]	; (8008068 <_ZL10flush_taskv+0x14>)
 8008058:	f7fa fc04 	bl	8002864 <debug_println>
    while (true) {
        debug_flush();
 800805c:	f7fa fc29 	bl	80028b2 <debug_flush>
        codal::fiber_sleep(200);
 8008060:	20c8      	movs	r0, #200	; 0xc8
 8008062:	f7ff faa7 	bl	80075b4 <_ZN5codal11fiber_sleepEm>
 8008066:	e7f9      	b.n	800805c <_ZL10flush_taskv+0x8>
 8008068:	0800a43c 	.word	0x0800a43c

0800806c <_Z41__static_initialization_and_destruction_0ii>:
                restart_listener_started = true;
            }
        }
    }
    return 0;
}
 800806c:	2801      	cmp	r0, #1
 800806e:	d000      	beq.n	8008072 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8008070:	4770      	bx	lr
 8008072:	b508      	push	{r3, lr}
 8008074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008078:	4299      	cmp	r1, r3
 800807a:	d000      	beq.n	800807e <_Z41__static_initialization_and_destruction_0ii+0x12>
 800807c:	bd08      	pop	{r3, pc}
    CM_SOURCE_BOOTLOADER, CM_EVT_RESTART, codal::CREATE_ONLY);
 800807e:	2300      	movs	r3, #0
 8008080:	f640 029d 	movw	r2, #2205	; 0x89d
 8008084:	f645 0134 	movw	r1, #22580	; 0x5834
 8008088:	4801      	ldr	r0, [pc, #4]	; (8008090 <_Z41__static_initialization_and_destruction_0ii+0x24>)
 800808a:	f001 fc9a 	bl	80099c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
}
 800808e:	e7f5      	b.n	800807c <_Z41__static_initialization_and_destruction_0ii+0x10>
 8008090:	20002188 	.word	0x20002188

08008094 <restart_callback>:
int restart_callback(void) {
 8008094:	b510      	push	{r4, lr}
    debug_println("restart callback");
 8008096:	4810      	ldr	r0, [pc, #64]	; (80080d8 <restart_callback+0x44>)
 8008098:	f7fa fbe4 	bl	8002864 <debug_println>
    if (!codal::EventModel::defaultEventBus) {
 800809c:	4b0f      	ldr	r3, [pc, #60]	; (80080dc <restart_callback+0x48>)
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	b148      	cbz	r0, 80080b6 <restart_callback+0x22>
    int status = codal::EventModel::defaultEventBus->send(restart_event);
 80080a2:	4b0f      	ldr	r3, [pc, #60]	; (80080e0 <restart_callback+0x4c>)
 80080a4:	6802      	ldr	r2, [r0, #0]
 80080a6:	6814      	ldr	r4, [r2, #0]
 80080a8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80080ac:	47a0      	blx	r4
    if (status) {
 80080ae:	4604      	mov	r4, r0
 80080b0:	b938      	cbnz	r0, 80080c2 <restart_callback+0x2e>
}
 80080b2:	4620      	mov	r0, r4
 80080b4:	bd10      	pop	{r4, pc}
        debug_println("*** ERROR: missing event bus");
 80080b6:	480b      	ldr	r0, [pc, #44]	; (80080e4 <restart_callback+0x50>)
 80080b8:	f7fa fbd4 	bl	8002864 <debug_println>
        return -1;
 80080bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80080c0:	e7f7      	b.n	80080b2 <restart_callback+0x1e>
        debug_print("*** ERROR: unable to send restart event ");
 80080c2:	4809      	ldr	r0, [pc, #36]	; (80080e8 <restart_callback+0x54>)
 80080c4:	f7fa fbfa 	bl	80028bc <debug_print>
        debug_print_unsigned(status); debug_println("");
 80080c8:	4620      	mov	r0, r4
 80080ca:	f7fa fc07 	bl	80028dc <debug_print_unsigned>
 80080ce:	4807      	ldr	r0, [pc, #28]	; (80080ec <restart_callback+0x58>)
 80080d0:	f7fa fbc8 	bl	8002864 <debug_println>
        return status;
 80080d4:	e7ed      	b.n	80080b2 <restart_callback+0x1e>
 80080d6:	bf00      	nop
 80080d8:	0800a470 	.word	0x0800a470
 80080dc:	20002170 	.word	0x20002170
 80080e0:	20002188 	.word	0x20002188
 80080e4:	0800a484 	.word	0x0800a484
 80080e8:	0800a4a4 	.word	0x0800a4a4
 80080ec:	0800a428 	.word	0x0800a428

080080f0 <start_background_tasks>:
int start_background_tasks(void) {
 80080f0:	b530      	push	{r4, r5, lr}
 80080f2:	b083      	sub	sp, #12
    if (!flush_task_fibre) {
 80080f4:	4b29      	ldr	r3, [pc, #164]	; (800819c <start_background_tasks+0xac>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	b34b      	cbz	r3, 800814e <start_background_tasks+0x5e>
    if (!restart_listener_started) {
 80080fa:	4b29      	ldr	r3, [pc, #164]	; (80081a0 <start_background_tasks+0xb0>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	bb1b      	cbnz	r3, 8008148 <start_background_tasks+0x58>
        if (!codal::EventModel::defaultEventBus) {
 8008100:	4b28      	ldr	r3, [pc, #160]	; (80081a4 <start_background_tasks+0xb4>)
 8008102:	681c      	ldr	r4, [r3, #0]
 8008104:	2c00      	cmp	r4, #0
 8008106:	d038      	beq.n	800817a <start_background_tasks+0x8a>
            Listener *newListener = new Listener(id, value, handler, flags);
 8008108:	2020      	movs	r0, #32
 800810a:	f7fa fd51 	bl	8002bb0 <_Znwj>
 800810e:	4605      	mov	r5, r0
 8008110:	2310      	movs	r3, #16
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	4b24      	ldr	r3, [pc, #144]	; (80081a8 <start_background_tasks+0xb8>)
 8008116:	f640 029d 	movw	r2, #2205	; 0x89d
 800811a:	f645 0134 	movw	r1, #22580	; 0x5834
 800811e:	f001 f84e 	bl	80091be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8008122:	6823      	ldr	r3, [r4, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	4629      	mov	r1, r5
 8008128:	4620      	mov	r0, r4
 800812a:	4798      	blx	r3
 800812c:	4604      	mov	r4, r0
 800812e:	b138      	cbz	r0, 8008140 <start_background_tasks+0x50>
            delete newListener;
 8008130:	b33d      	cbz	r5, 8008182 <start_background_tasks+0x92>
 8008132:	4628      	mov	r0, r5
 8008134:	f001 f857 	bl	80091e6 <_ZN5codal8ListenerD1Ev>
 8008138:	4628      	mov	r0, r5
 800813a:	f7fa fd3d 	bl	8002bb8 <_ZdlPv>
            return DEVICE_NOT_SUPPORTED;
 800813e:	4c1b      	ldr	r4, [pc, #108]	; (80081ac <start_background_tasks+0xbc>)
            if (status) {
 8008140:	bb0c      	cbnz	r4, 8008186 <start_background_tasks+0x96>
                restart_listener_started = true;
 8008142:	4b17      	ldr	r3, [pc, #92]	; (80081a0 <start_background_tasks+0xb0>)
 8008144:	2201      	movs	r2, #1
 8008146:	701a      	strb	r2, [r3, #0]
}
 8008148:	2000      	movs	r0, #0
 800814a:	b003      	add	sp, #12
 800814c:	bd30      	pop	{r4, r5, pc}
        if (!codal::fiber_scheduler_running()) {
 800814e:	f7ff f815 	bl	800717c <_ZN5codal23fiber_scheduler_runningEv>
 8008152:	b918      	cbnz	r0, 800815c <start_background_tasks+0x6c>
            debug_println("no scheduler, start bg tasks later");
 8008154:	4816      	ldr	r0, [pc, #88]	; (80081b0 <start_background_tasks+0xc0>)
 8008156:	f7fa fb85 	bl	8002864 <debug_println>
 800815a:	e7ce      	b.n	80080fa <start_background_tasks+0xa>
            debug_println("start bg tasks");
 800815c:	4815      	ldr	r0, [pc, #84]	; (80081b4 <start_background_tasks+0xc4>)
 800815e:	f7fa fb81 	bl	8002864 <debug_println>
            flush_task_fibre = codal::create_fiber(flush_task);
 8008162:	4915      	ldr	r1, [pc, #84]	; (80081b8 <start_background_tasks+0xc8>)
 8008164:	4815      	ldr	r0, [pc, #84]	; (80081bc <start_background_tasks+0xcc>)
 8008166:	f000 ff90 	bl	800908a <_ZN5codal12create_fiberEPFvvES1_>
 800816a:	4b0c      	ldr	r3, [pc, #48]	; (800819c <start_background_tasks+0xac>)
 800816c:	6018      	str	r0, [r3, #0]
            if (!flush_task_fibre) {
 800816e:	2800      	cmp	r0, #0
 8008170:	d1c3      	bne.n	80080fa <start_background_tasks+0xa>
                debug_println("*** ERROR: create fibre failed");
 8008172:	4813      	ldr	r0, [pc, #76]	; (80081c0 <start_background_tasks+0xd0>)
 8008174:	f7fa fb76 	bl	8002864 <debug_println>
 8008178:	e7bf      	b.n	80080fa <start_background_tasks+0xa>
            debug_println("*** ERROR: missing event bus");
 800817a:	4812      	ldr	r0, [pc, #72]	; (80081c4 <start_background_tasks+0xd4>)
 800817c:	f7fa fb72 	bl	8002864 <debug_println>
 8008180:	e7e2      	b.n	8008148 <start_background_tasks+0x58>
 8008182:	4c0a      	ldr	r4, [pc, #40]	; (80081ac <start_background_tasks+0xbc>)
 8008184:	e7dc      	b.n	8008140 <start_background_tasks+0x50>
                debug_print("*** ERROR: unable to listen for restart event ");
 8008186:	4810      	ldr	r0, [pc, #64]	; (80081c8 <start_background_tasks+0xd8>)
 8008188:	f7fa fb98 	bl	80028bc <debug_print>
                debug_printhex_unsigned(status); debug_println("");
 800818c:	4620      	mov	r0, r4
 800818e:	f7fa fbe1 	bl	8002954 <debug_printhex_unsigned>
 8008192:	480e      	ldr	r0, [pc, #56]	; (80081cc <start_background_tasks+0xdc>)
 8008194:	f7fa fb66 	bl	8002864 <debug_println>
 8008198:	e7d6      	b.n	8008148 <start_background_tasks+0x58>
 800819a:	bf00      	nop
 800819c:	20002190 	.word	0x20002190
 80081a0:	20002214 	.word	0x20002214
 80081a4:	20002170 	.word	0x20002170
 80081a8:	08008005 	.word	0x08008005
 80081ac:	fffffc16 	.word	0xfffffc16
 80081b0:	0800a4d0 	.word	0x0800a4d0
 80081b4:	0800a4f4 	.word	0x0800a4f4
 80081b8:	080075ed 	.word	0x080075ed
 80081bc:	08008055 	.word	0x08008055
 80081c0:	0800a504 	.word	0x0800a504
 80081c4:	0800a484 	.word	0x0800a484
 80081c8:	0800a524 	.word	0x0800a524
 80081cc:	0800a428 	.word	0x0800a428

080081d0 <_ZN5codal13STM32BluePill4initEv>:
  *
  * @note This method must be called before user code utilises any functionality
  *       contained within the GenuinoZero class.
  */
int STM32BluePill::init()
{
 80081d0:	b538      	push	{r3, r4, r5, lr}
    if (status & DEVICE_INITIALIZED)
 80081d2:	88c3      	ldrh	r3, [r0, #6]
 80081d4:	f013 0f01 	tst.w	r3, #1
 80081d8:	d12e      	bne.n	8008238 <_ZN5codal13STM32BluePill4initEv+0x68>
 80081da:	4605      	mov	r5, r0
        return DEVICE_NOT_SUPPORTED;
    status |= DEVICE_INITIALIZED;
 80081dc:	f043 0301 	orr.w	r3, r3, #1
 80081e0:	80c3      	strh	r3, [r0, #6]

    debug_println("bluepill init scheduler"); debug_flush(); ////
 80081e2:	4816      	ldr	r0, [pc, #88]	; (800823c <_ZN5codal13STM32BluePill4initEv+0x6c>)
 80081e4:	f7fa fb3e 	bl	8002864 <debug_println>
 80081e8:	f7fa fb63 	bl	80028b2 <debug_flush>

    //  Codal initialisation... Bring up fiber scheduler.
    scheduler_init(messageBus);
 80081ec:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80081f0:	f7fe ffd0 	bl	8007194 <_ZN5codal14scheduler_initERNS_10EventModelE>
    debug_println("bluepill init components"); debug_flush(); ////
 80081f4:	4812      	ldr	r0, [pc, #72]	; (8008240 <_ZN5codal13STM32BluePill4initEv+0x70>)
 80081f6:	f7fa fb35 	bl	8002864 <debug_println>
 80081fa:	f7fa fb5a 	bl	80028b2 <debug_flush>

    //  Init the timer first, all other components depend on the timer.
    timer.init();
 80081fe:	f105 0008 	add.w	r0, r5, #8
 8008202:	f7ff feab 	bl	8007f5c <_ZN5codal3_cm5Timer4initEv>

    //  Initialise all the Codal components.
    for(int i = 0; i < DEVICE_COMPONENT_COUNT; i++)
 8008206:	2400      	movs	r4, #0
 8008208:	e000      	b.n	800820c <_ZN5codal13STM32BluePill4initEv+0x3c>
 800820a:	3401      	adds	r4, #1
 800820c:	2c3b      	cmp	r4, #59	; 0x3b
 800820e:	dc08      	bgt.n	8008222 <_ZN5codal13STM32BluePill4initEv+0x52>
    {
        if(CodalComponent::components[i])
 8008210:	4b0c      	ldr	r3, [pc, #48]	; (8008244 <_ZN5codal13STM32BluePill4initEv+0x74>)
 8008212:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008216:	2800      	cmp	r0, #0
 8008218:	d0f7      	beq.n	800820a <_ZN5codal13STM32BluePill4initEv+0x3a>
            CodalComponent::components[i]->init();
 800821a:	6803      	ldr	r3, [r0, #0]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4798      	blx	r3
 8008220:	e7f3      	b.n	800820a <_ZN5codal13STM32BluePill4initEv+0x3a>
    }
    status |= DEVICE_COMPONENT_STATUS_IDLE_TICK;
 8008222:	88eb      	ldrh	r3, [r5, #6]
 8008224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008228:	80eb      	strh	r3, [r5, #6]
    debug_println("bluepill init ok"); debug_flush(); ////
 800822a:	4807      	ldr	r0, [pc, #28]	; (8008248 <_ZN5codal13STM32BluePill4initEv+0x78>)
 800822c:	f7fa fb1a 	bl	8002864 <debug_println>
 8008230:	f7fa fb3f 	bl	80028b2 <debug_flush>
    return DEVICE_OK;
 8008234:	2000      	movs	r0, #0
}
 8008236:	bd38      	pop	{r3, r4, r5, pc}
        return DEVICE_NOT_SUPPORTED;
 8008238:	4804      	ldr	r0, [pc, #16]	; (800824c <_ZN5codal13STM32BluePill4initEv+0x7c>)
 800823a:	e7fc      	b.n	8008236 <_ZN5codal13STM32BluePill4initEv+0x66>
 800823c:	0800a554 	.word	0x0800a554
 8008240:	0800a56c 	.word	0x0800a56c
 8008244:	20002050 	.word	0x20002050
 8008248:	0800a588 	.word	0x0800a588
 800824c:	fffffc16 	.word	0xfffffc16

08008250 <_ZN5codal13STM32BluePillC1Ev>:
STM32BluePill::STM32BluePill() :
 8008250:	b530      	push	{r4, r5, lr}
 8008252:	b083      	sub	sp, #12
 8008254:	4604      	mov	r4, r0
        {
 8008256:	4b25      	ldr	r3, [pc, #148]	; (80082ec <_ZN5codal13STM32BluePillC1Ev+0x9c>)
 8008258:	6003      	str	r3, [r0, #0]
            this->id = 0;
 800825a:	2500      	movs	r5, #0
 800825c:	8085      	strh	r5, [r0, #4]
            this->status = 0;
 800825e:	80c5      	strh	r5, [r0, #6]
            addComponent();
 8008260:	f7fe fe46 	bl	8006ef0 <_ZN5codal14CodalComponent12addComponentEv>
    usart2(io.tx2, io.rx2) {  //  Port USART2 (USART1, USART3 not supported yet)
 8008264:	4620      	mov	r0, r4
 8008266:	4b22      	ldr	r3, [pc, #136]	; (80082f0 <_ZN5codal13STM32BluePillC1Ev+0xa0>)
 8008268:	f840 3b08 	str.w	r3, [r0], #8
 800826c:	f7ff fe5c 	bl	8007f28 <_ZN5codal3_cm5TimerC1Ev>
 8008270:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8008274:	f7ff fc50 	bl	8007b18 <_ZN5codal10MessageBusC1Ev>
 8008278:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800827c:	f000 f83c 	bl	80082f8 <_ZN5codal15STM32BluePillIOC1Ev>
 8008280:	f504 6241 	add.w	r2, r4, #3088	; 0xc10
 8008284:	f504 6143 	add.w	r1, r4, #3120	; 0xc30
 8008288:	f504 607b 	add.w	r0, r4, #4016	; 0xfb0
 800828c:	f000 fdee 	bl	8008e6c <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>
 8008290:	f504 6351 	add.w	r3, r4, #3344	; 0xd10
 8008294:	9300      	str	r3, [sp, #0]
 8008296:	f504 6353 	add.w	r3, r4, #3376	; 0xd30
 800829a:	f504 6255 	add.w	r2, r4, #3408	; 0xd50
 800829e:	f504 6157 	add.w	r1, r4, #3440	; 0xd70
 80082a2:	f504 607c 	add.w	r0, r4, #4032	; 0xfc0
 80082a6:	f000 fe1d 	bl	8008ee4 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_>
 80082aa:	f504 6361 	add.w	r3, r4, #3600	; 0xe10
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	f504 6363 	add.w	r3, r4, #3632	; 0xe30
 80082b4:	f504 6265 	add.w	r2, r4, #3664	; 0xe50
 80082b8:	f504 6167 	add.w	r1, r4, #3696	; 0xe70
 80082bc:	f604 70e8 	addw	r0, r4, #4072	; 0xfe8
 80082c0:	f000 fe10 	bl	8008ee4 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_>
 80082c4:	2314      	movs	r3, #20
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	f504 6229 	add.w	r2, r4, #2704	; 0xa90
 80082cc:	f504 6127 	add.w	r1, r4, #2672	; 0xa70
 80082d0:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 80082d4:	3010      	adds	r0, #16
 80082d6:	f7ff fda7 	bl	8007e28 <_ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh>
    status = 0;
 80082da:	80e5      	strh	r5, [r4, #6]
    debug_println("bluepill construct"); debug_flush(); ////
 80082dc:	4805      	ldr	r0, [pc, #20]	; (80082f4 <_ZN5codal13STM32BluePillC1Ev+0xa4>)
 80082de:	f7fa fac1 	bl	8002864 <debug_println>
 80082e2:	f7fa fae6 	bl	80028b2 <debug_flush>
}
 80082e6:	4620      	mov	r0, r4
 80082e8:	b003      	add	sp, #12
 80082ea:	bd30      	pop	{r4, r5, pc}
 80082ec:	0800a244 	.word	0x0800a244
 80082f0:	0800a5b8 	.word	0x0800a5b8
 80082f4:	0800a59c 	.word	0x0800a59c

080082f8 <_ZN5codal15STM32BluePillIOC1Ev>:
  * Create a representation of all given I/O pins on the edge connector
  *
  * Accepts a sequence of unique ID's used to distinguish events raised
  * by MicroBitPin instances on the default EventModel.
  */
STM32BluePillIO::STM32BluePillIO() :
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	b083      	sub	sp, #12
 80082fe:	4604      	mov	r4, r0
mosi3        (CM_PIN_SPI_MOSI3       , RCC_GPIOB, GPIOB, GPIO5, PIN_CAPABILITY_DIGITAL),
nss3_remap   (CM_PIN_SPI_NSS3_REMAP  , RCC_GPIOA, GPIOA, GPIO4, PIN_CAPABILITY_DIGITAL),
sck3_remap   (CM_PIN_SPI_SCK3_REMAP  , RCC_GPIOC, GPIOC, GPIO10, PIN_CAPABILITY_DIGITAL),
miso3_remap  (CM_PIN_SPI_MISO3_REMAP , RCC_GPIOC, GPIOC, GPIO11, PIN_CAPABILITY_DIGITAL),
mosi3_remap  (CM_PIN_SPI_MOSI3_REMAP , RCC_GPIOC, GPIOC, GPIO12, PIN_CAPABILITY_DIGITAL),
led         (CM_PIN_LED        , RCC_GPIOC, GPIOC, GPIO13, PIN_CAPABILITY_DIGITAL)
 8008300:	2501      	movs	r5, #1
 8008302:	9501      	str	r5, [sp, #4]
 8008304:	9500      	str	r5, [sp, #0]
 8008306:	4bd1      	ldr	r3, [pc, #836]	; (800864c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008308:	f240 3202 	movw	r2, #770	; 0x302
 800830c:	2100      	movs	r1, #0
 800830e:	f7ff fd21 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008312:	9501      	str	r5, [sp, #4]
 8008314:	2702      	movs	r7, #2
 8008316:	9700      	str	r7, [sp, #0]
 8008318:	4bcc      	ldr	r3, [pc, #816]	; (800864c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 800831a:	f240 3202 	movw	r2, #770	; 0x302
 800831e:	4629      	mov	r1, r5
 8008320:	f104 0020 	add.w	r0, r4, #32
 8008324:	f7ff fd16 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008328:	9501      	str	r5, [sp, #4]
 800832a:	f04f 0804 	mov.w	r8, #4
 800832e:	f8cd 8000 	str.w	r8, [sp]
 8008332:	4bc6      	ldr	r3, [pc, #792]	; (800864c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008334:	f240 3202 	movw	r2, #770	; 0x302
 8008338:	4639      	mov	r1, r7
 800833a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800833e:	f7ff fd09 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008342:	9501      	str	r5, [sp, #4]
 8008344:	f04f 0a08 	mov.w	sl, #8
 8008348:	f8cd a000 	str.w	sl, [sp]
 800834c:	4bbf      	ldr	r3, [pc, #764]	; (800864c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 800834e:	f240 3202 	movw	r2, #770	; 0x302
 8008352:	2103      	movs	r1, #3
 8008354:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8008358:	f7ff fcfc 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800835c:	9501      	str	r5, [sp, #4]
 800835e:	2310      	movs	r3, #16
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	4bba      	ldr	r3, [pc, #744]	; (800864c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008364:	f240 3202 	movw	r2, #770	; 0x302
 8008368:	4641      	mov	r1, r8
 800836a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800836e:	f7ff fcf1 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008372:	9501      	str	r5, [sp, #4]
 8008374:	2320      	movs	r3, #32
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	4bb4      	ldr	r3, [pc, #720]	; (800864c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 800837a:	f240 3202 	movw	r2, #770	; 0x302
 800837e:	2105      	movs	r1, #5
 8008380:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 8008384:	f7ff fce6 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008388:	9501      	str	r5, [sp, #4]
 800838a:	2640      	movs	r6, #64	; 0x40
 800838c:	9600      	str	r6, [sp, #0]
 800838e:	4baf      	ldr	r3, [pc, #700]	; (800864c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008390:	f240 3202 	movw	r2, #770	; 0x302
 8008394:	2106      	movs	r1, #6
 8008396:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 800839a:	f7ff fcdb 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800839e:	9501      	str	r5, [sp, #4]
 80083a0:	2380      	movs	r3, #128	; 0x80
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	4ba9      	ldr	r3, [pc, #676]	; (800864c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 80083a6:	f240 3202 	movw	r2, #770	; 0x302
 80083aa:	2107      	movs	r1, #7
 80083ac:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 80083b0:	f7ff fcd0 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80083b4:	9501      	str	r5, [sp, #4]
 80083b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	4ba3      	ldr	r3, [pc, #652]	; (800864c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 80083be:	f240 3202 	movw	r2, #770	; 0x302
 80083c2:	4651      	mov	r1, sl
 80083c4:	f504 7080 	add.w	r0, r4, #256	; 0x100
 80083c8:	f7ff fcc4 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80083cc:	9501      	str	r5, [sp, #4]
 80083ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083d2:	9300      	str	r3, [sp, #0]
 80083d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80083d8:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 80083dc:	f240 3202 	movw	r2, #770	; 0x302
 80083e0:	2109      	movs	r1, #9
 80083e2:	f504 7090 	add.w	r0, r4, #288	; 0x120
 80083e6:	f7ff fcb5 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80083ea:	9501      	str	r5, [sp, #4]
 80083ec:	f44f 6b80 	mov.w	fp, #1024	; 0x400
 80083f0:	f8cd b000 	str.w	fp, [sp]
 80083f4:	4b95      	ldr	r3, [pc, #596]	; (800864c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 80083f6:	f240 3202 	movw	r2, #770	; 0x302
 80083fa:	210a      	movs	r1, #10
 80083fc:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8008400:	f7ff fca8 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008404:	9501      	str	r5, [sp, #4]
 8008406:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008410:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008414:	f240 3202 	movw	r2, #770	; 0x302
 8008418:	210b      	movs	r1, #11
 800841a:	f504 70b0 	add.w	r0, r4, #352	; 0x160
 800841e:	f7ff fc99 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008422:	9501      	str	r5, [sp, #4]
 8008424:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8008428:	f8cd 9000 	str.w	r9, [sp]
 800842c:	4b87      	ldr	r3, [pc, #540]	; (800864c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 800842e:	f240 3202 	movw	r2, #770	; 0x302
 8008432:	210c      	movs	r1, #12
 8008434:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8008438:	f7ff fc8c 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800843c:	9501      	str	r5, [sp, #4]
 800843e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008448:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 800844c:	f240 3202 	movw	r2, #770	; 0x302
 8008450:	210d      	movs	r1, #13
 8008452:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
 8008456:	f7ff fc7d 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800845a:	9501      	str	r5, [sp, #4]
 800845c:	9500      	str	r5, [sp, #0]
 800845e:	4b7c      	ldr	r3, [pc, #496]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008460:	f240 3203 	movw	r2, #771	; 0x303
 8008464:	210e      	movs	r1, #14
 8008466:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 800846a:	f7ff fc73 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800846e:	9501      	str	r5, [sp, #4]
 8008470:	9700      	str	r7, [sp, #0]
 8008472:	4b77      	ldr	r3, [pc, #476]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008474:	f240 3203 	movw	r2, #771	; 0x303
 8008478:	210f      	movs	r1, #15
 800847a:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 800847e:	f7ff fc69 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008482:	9501      	str	r5, [sp, #4]
 8008484:	f8cd a000 	str.w	sl, [sp]
 8008488:	4b71      	ldr	r3, [pc, #452]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 800848a:	f240 3203 	movw	r2, #771	; 0x303
 800848e:	2110      	movs	r1, #16
 8008490:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8008494:	f7ff fc5e 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008498:	9501      	str	r5, [sp, #4]
 800849a:	2310      	movs	r3, #16
 800849c:	9300      	str	r3, [sp, #0]
 800849e:	4b6c      	ldr	r3, [pc, #432]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 80084a0:	f240 3203 	movw	r2, #771	; 0x303
 80084a4:	2111      	movs	r1, #17
 80084a6:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80084aa:	f7ff fc53 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80084ae:	9501      	str	r5, [sp, #4]
 80084b0:	2320      	movs	r3, #32
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	4b66      	ldr	r3, [pc, #408]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 80084b6:	f240 3203 	movw	r2, #771	; 0x303
 80084ba:	2112      	movs	r1, #18
 80084bc:	f504 7010 	add.w	r0, r4, #576	; 0x240
 80084c0:	f7ff fc48 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80084c4:	9501      	str	r5, [sp, #4]
 80084c6:	9600      	str	r6, [sp, #0]
 80084c8:	4b61      	ldr	r3, [pc, #388]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 80084ca:	f240 3203 	movw	r2, #771	; 0x303
 80084ce:	2113      	movs	r1, #19
 80084d0:	f504 7018 	add.w	r0, r4, #608	; 0x260
 80084d4:	f7ff fc3e 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80084d8:	9501      	str	r5, [sp, #4]
 80084da:	2380      	movs	r3, #128	; 0x80
 80084dc:	9300      	str	r3, [sp, #0]
 80084de:	4b5c      	ldr	r3, [pc, #368]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 80084e0:	f240 3203 	movw	r2, #771	; 0x303
 80084e4:	2114      	movs	r1, #20
 80084e6:	f504 7020 	add.w	r0, r4, #640	; 0x280
 80084ea:	f7ff fc33 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80084ee:	9501      	str	r5, [sp, #4]
 80084f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	4b56      	ldr	r3, [pc, #344]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 80084f8:	f240 3203 	movw	r2, #771	; 0x303
 80084fc:	2115      	movs	r1, #21
 80084fe:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
 8008502:	f7ff fc27 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008506:	9501      	str	r5, [sp, #4]
 8008508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	4b50      	ldr	r3, [pc, #320]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008510:	f240 3203 	movw	r2, #771	; 0x303
 8008514:	2116      	movs	r1, #22
 8008516:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
 800851a:	f7ff fc1b 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800851e:	9501      	str	r5, [sp, #4]
 8008520:	f8cd b000 	str.w	fp, [sp]
 8008524:	4b4a      	ldr	r3, [pc, #296]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008526:	f240 3203 	movw	r2, #771	; 0x303
 800852a:	2117      	movs	r1, #23
 800852c:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
 8008530:	f7ff fc10 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008534:	9501      	str	r5, [sp, #4]
 8008536:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	4b44      	ldr	r3, [pc, #272]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 800853e:	f240 3203 	movw	r2, #771	; 0x303
 8008542:	2118      	movs	r1, #24
 8008544:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8008548:	f7ff fc04 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800854c:	9501      	str	r5, [sp, #4]
 800854e:	f8cd 9000 	str.w	r9, [sp]
 8008552:	4b3f      	ldr	r3, [pc, #252]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008554:	f240 3203 	movw	r2, #771	; 0x303
 8008558:	2119      	movs	r1, #25
 800855a:	f504 7048 	add.w	r0, r4, #800	; 0x320
 800855e:	f7ff fbf9 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008562:	9501      	str	r5, [sp, #4]
 8008564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	4b39      	ldr	r3, [pc, #228]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 800856c:	f240 3203 	movw	r2, #771	; 0x303
 8008570:	211a      	movs	r1, #26
 8008572:	f504 7050 	add.w	r0, r4, #832	; 0x340
 8008576:	f7ff fbed 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800857a:	9501      	str	r5, [sp, #4]
 800857c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	4b33      	ldr	r3, [pc, #204]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8008584:	f240 3203 	movw	r2, #771	; 0x303
 8008588:	211b      	movs	r1, #27
 800858a:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800858e:	f7ff fbe1 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008592:	9501      	str	r5, [sp, #4]
 8008594:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	4b2d      	ldr	r3, [pc, #180]	; (8008650 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 800859c:	f240 3203 	movw	r2, #771	; 0x303
 80085a0:	211c      	movs	r1, #28
 80085a2:	f504 7060 	add.w	r0, r4, #896	; 0x380
 80085a6:	f7ff fbd5 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80085aa:	9501      	str	r5, [sp, #4]
 80085ac:	f8cd b000 	str.w	fp, [sp]
 80085b0:	4b28      	ldr	r3, [pc, #160]	; (8008654 <_ZN5codal15STM32BluePillIOC1Ev+0x35c>)
 80085b2:	f44f 7241 	mov.w	r2, #772	; 0x304
 80085b6:	211d      	movs	r1, #29
 80085b8:	f504 7068 	add.w	r0, r4, #928	; 0x3a0
 80085bc:	f7ff fbca 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80085c0:	9501      	str	r5, [sp, #4]
 80085c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80085cc:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80085d0:	f44f 7241 	mov.w	r2, #772	; 0x304
 80085d4:	211e      	movs	r1, #30
 80085d6:	f504 7070 	add.w	r0, r4, #960	; 0x3c0
 80085da:	f7ff fbbb 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80085de:	9501      	str	r5, [sp, #4]
 80085e0:	f8cd 9000 	str.w	r9, [sp]
 80085e4:	4b1b      	ldr	r3, [pc, #108]	; (8008654 <_ZN5codal15STM32BluePillIOC1Ev+0x35c>)
 80085e6:	f44f 7241 	mov.w	r2, #772	; 0x304
 80085ea:	211f      	movs	r1, #31
 80085ec:	f504 7078 	add.w	r0, r4, #992	; 0x3e0
 80085f0:	f7ff fbb0 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80085f4:	9501      	str	r5, [sp, #4]
 80085f6:	f8cd 8000 	str.w	r8, [sp]
 80085fa:	4b17      	ldr	r3, [pc, #92]	; (8008658 <_ZN5codal15STM32BluePillIOC1Ev+0x360>)
 80085fc:	f240 3205 	movw	r2, #773	; 0x305
 8008600:	2120      	movs	r1, #32
 8008602:	eb04 000b 	add.w	r0, r4, fp
 8008606:	f7ff fba5 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800860a:	9501      	str	r5, [sp, #4]
 800860c:	f8cd a000 	str.w	sl, [sp]
 8008610:	4b11      	ldr	r3, [pc, #68]	; (8008658 <_ZN5codal15STM32BluePillIOC1Ev+0x360>)
 8008612:	f240 3205 	movw	r2, #773	; 0x305
 8008616:	2121      	movs	r1, #33	; 0x21
 8008618:	f504 6084 	add.w	r0, r4, #1056	; 0x420
 800861c:	f7ff fb9a 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008620:	9501      	str	r5, [sp, #4]
 8008622:	2310      	movs	r3, #16
 8008624:	9300      	str	r3, [sp, #0]
 8008626:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <_ZN5codal15STM32BluePillIOC1Ev+0x360>)
 8008628:	f240 3205 	movw	r2, #773	; 0x305
 800862c:	2122      	movs	r1, #34	; 0x22
 800862e:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 8008632:	f7ff fb8f 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008636:	9501      	str	r5, [sp, #4]
 8008638:	2320      	movs	r3, #32
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	4b06      	ldr	r3, [pc, #24]	; (8008658 <_ZN5codal15STM32BluePillIOC1Ev+0x360>)
 800863e:	f240 3205 	movw	r2, #773	; 0x305
 8008642:	2123      	movs	r1, #35	; 0x23
 8008644:	f504 608c 	add.w	r0, r4, #1120	; 0x460
 8008648:	e008      	b.n	800865c <_ZN5codal15STM32BluePillIOC1Ev+0x364>
 800864a:	bf00      	nop
 800864c:	40010800 	.word	0x40010800
 8008650:	40010c00 	.word	0x40010c00
 8008654:	40011000 	.word	0x40011000
 8008658:	40011400 	.word	0x40011400
 800865c:	f7ff fb7a 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008660:	9501      	str	r5, [sp, #4]
 8008662:	9600      	str	r6, [sp, #0]
 8008664:	4bce      	ldr	r3, [pc, #824]	; (80089a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8008666:	f240 3205 	movw	r2, #773	; 0x305
 800866a:	2124      	movs	r1, #36	; 0x24
 800866c:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 8008670:	f7ff fb70 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008674:	9501      	str	r5, [sp, #4]
 8008676:	2380      	movs	r3, #128	; 0x80
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	4bc9      	ldr	r3, [pc, #804]	; (80089a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 800867c:	f240 3205 	movw	r2, #773	; 0x305
 8008680:	2125      	movs	r1, #37	; 0x25
 8008682:	f504 6094 	add.w	r0, r4, #1184	; 0x4a0
 8008686:	f7ff fb65 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800868a:	9501      	str	r5, [sp, #4]
 800868c:	f8cd 9000 	str.w	r9, [sp]
 8008690:	4bc3      	ldr	r3, [pc, #780]	; (80089a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8008692:	f240 3205 	movw	r2, #773	; 0x305
 8008696:	2126      	movs	r1, #38	; 0x26
 8008698:	f504 6098 	add.w	r0, r4, #1216	; 0x4c0
 800869c:	f7ff fb5a 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80086a0:	9501      	str	r5, [sp, #4]
 80086a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	4bbd      	ldr	r3, [pc, #756]	; (80089a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 80086aa:	f240 3205 	movw	r2, #773	; 0x305
 80086ae:	2127      	movs	r1, #39	; 0x27
 80086b0:	f504 609c 	add.w	r0, r4, #1248	; 0x4e0
 80086b4:	f7ff fb4e 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80086b8:	9501      	str	r5, [sp, #4]
 80086ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	4bb7      	ldr	r3, [pc, #732]	; (80089a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 80086c2:	f240 3205 	movw	r2, #773	; 0x305
 80086c6:	2128      	movs	r1, #40	; 0x28
 80086c8:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 80086cc:	f7ff fb42 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80086d0:	9501      	str	r5, [sp, #4]
 80086d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	4bb1      	ldr	r3, [pc, #708]	; (80089a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 80086da:	f240 3205 	movw	r2, #773	; 0x305
 80086de:	2129      	movs	r1, #41	; 0x29
 80086e0:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 80086e4:	f7ff fb36 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80086e8:	9501      	str	r5, [sp, #4]
 80086ea:	9500      	str	r5, [sp, #0]
 80086ec:	4bad      	ldr	r3, [pc, #692]	; (80089a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 80086ee:	f240 3202 	movw	r2, #770	; 0x302
 80086f2:	212a      	movs	r1, #42	; 0x2a
 80086f4:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
 80086f8:	f7ff fb2c 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80086fc:	9501      	str	r5, [sp, #4]
 80086fe:	9700      	str	r7, [sp, #0]
 8008700:	4ba8      	ldr	r3, [pc, #672]	; (80089a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8008702:	f240 3202 	movw	r2, #770	; 0x302
 8008706:	212b      	movs	r1, #43	; 0x2b
 8008708:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
 800870c:	f7ff fb22 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008710:	9501      	str	r5, [sp, #4]
 8008712:	f8cd 8000 	str.w	r8, [sp]
 8008716:	4ba3      	ldr	r3, [pc, #652]	; (80089a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8008718:	f240 3202 	movw	r2, #770	; 0x302
 800871c:	212c      	movs	r1, #44	; 0x2c
 800871e:	f504 60b0 	add.w	r0, r4, #1408	; 0x580
 8008722:	f7ff fb17 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008726:	9501      	str	r5, [sp, #4]
 8008728:	f8cd a000 	str.w	sl, [sp]
 800872c:	4b9d      	ldr	r3, [pc, #628]	; (80089a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 800872e:	f240 3202 	movw	r2, #770	; 0x302
 8008732:	212d      	movs	r1, #45	; 0x2d
 8008734:	f504 60b4 	add.w	r0, r4, #1440	; 0x5a0
 8008738:	f7ff fb0c 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800873c:	9501      	str	r5, [sp, #4]
 800873e:	9600      	str	r6, [sp, #0]
 8008740:	4b99      	ldr	r3, [pc, #612]	; (80089a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8008742:	f240 3203 	movw	r2, #771	; 0x303
 8008746:	212e      	movs	r1, #46	; 0x2e
 8008748:	f504 60b8 	add.w	r0, r4, #1472	; 0x5c0
 800874c:	f7ff fb02 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008750:	9501      	str	r5, [sp, #4]
 8008752:	2380      	movs	r3, #128	; 0x80
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	4b94      	ldr	r3, [pc, #592]	; (80089a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8008758:	f240 3203 	movw	r2, #771	; 0x303
 800875c:	212f      	movs	r1, #47	; 0x2f
 800875e:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 8008762:	f7ff faf7 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008766:	9501      	str	r5, [sp, #4]
 8008768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	4b8e      	ldr	r3, [pc, #568]	; (80089a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8008770:	f240 3203 	movw	r2, #771	; 0x303
 8008774:	2130      	movs	r1, #48	; 0x30
 8008776:	f504 60c0 	add.w	r0, r4, #1536	; 0x600
 800877a:	f7ff faeb 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800877e:	9501      	str	r5, [sp, #4]
 8008780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008784:	9300      	str	r3, [sp, #0]
 8008786:	4b88      	ldr	r3, [pc, #544]	; (80089a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8008788:	f240 3203 	movw	r2, #771	; 0x303
 800878c:	2131      	movs	r1, #49	; 0x31
 800878e:	f504 60c4 	add.w	r0, r4, #1568	; 0x620
 8008792:	f7ff fadf 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008796:	9501      	str	r5, [sp, #4]
 8008798:	f8cd 9000 	str.w	r9, [sp]
 800879c:	4b80      	ldr	r3, [pc, #512]	; (80089a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 800879e:	f240 3205 	movw	r2, #773	; 0x305
 80087a2:	2132      	movs	r1, #50	; 0x32
 80087a4:	f504 60c8 	add.w	r0, r4, #1600	; 0x640
 80087a8:	f7ff fad4 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80087ac:	9501      	str	r5, [sp, #4]
 80087ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	4b7a      	ldr	r3, [pc, #488]	; (80089a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 80087b6:	f240 3205 	movw	r2, #773	; 0x305
 80087ba:	2133      	movs	r1, #51	; 0x33
 80087bc:	f504 60cc 	add.w	r0, r4, #1632	; 0x660
 80087c0:	f7ff fac8 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80087c4:	9501      	str	r5, [sp, #4]
 80087c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	4b74      	ldr	r3, [pc, #464]	; (80089a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 80087ce:	f240 3205 	movw	r2, #773	; 0x305
 80087d2:	2134      	movs	r1, #52	; 0x34
 80087d4:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 80087d8:	f7ff fabc 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80087dc:	9501      	str	r5, [sp, #4]
 80087de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	4b6e      	ldr	r3, [pc, #440]	; (80089a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 80087e6:	f240 3205 	movw	r2, #773	; 0x305
 80087ea:	2135      	movs	r1, #53	; 0x35
 80087ec:	f504 60d4 	add.w	r0, r4, #1696	; 0x6a0
 80087f0:	f7ff fab0 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80087f4:	9501      	str	r5, [sp, #4]
 80087f6:	9600      	str	r6, [sp, #0]
 80087f8:	4b6a      	ldr	r3, [pc, #424]	; (80089a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 80087fa:	f240 3202 	movw	r2, #770	; 0x302
 80087fe:	2136      	movs	r1, #54	; 0x36
 8008800:	f504 60d8 	add.w	r0, r4, #1728	; 0x6c0
 8008804:	f7ff faa6 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008808:	9501      	str	r5, [sp, #4]
 800880a:	2380      	movs	r3, #128	; 0x80
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	4b65      	ldr	r3, [pc, #404]	; (80089a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8008810:	f240 3202 	movw	r2, #770	; 0x302
 8008814:	2137      	movs	r1, #55	; 0x37
 8008816:	f504 60dc 	add.w	r0, r4, #1760	; 0x6e0
 800881a:	f7ff fa9b 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800881e:	9501      	str	r5, [sp, #4]
 8008820:	9500      	str	r5, [sp, #0]
 8008822:	4b61      	ldr	r3, [pc, #388]	; (80089a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8008824:	f240 3203 	movw	r2, #771	; 0x303
 8008828:	2138      	movs	r1, #56	; 0x38
 800882a:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 800882e:	f7ff fa91 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008832:	9501      	str	r5, [sp, #4]
 8008834:	9700      	str	r7, [sp, #0]
 8008836:	4b5c      	ldr	r3, [pc, #368]	; (80089a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8008838:	f240 3203 	movw	r2, #771	; 0x303
 800883c:	2139      	movs	r1, #57	; 0x39
 800883e:	f504 60e4 	add.w	r0, r4, #1824	; 0x720
 8008842:	f7ff fa87 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008846:	9501      	str	r5, [sp, #4]
 8008848:	9700      	str	r7, [sp, #0]
 800884a:	4b56      	ldr	r3, [pc, #344]	; (80089a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 800884c:	f240 3202 	movw	r2, #770	; 0x302
 8008850:	213a      	movs	r1, #58	; 0x3a
 8008852:	f504 60e8 	add.w	r0, r4, #1856	; 0x740
 8008856:	f7ff fa7d 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800885a:	9501      	str	r5, [sp, #4]
 800885c:	f8cd 8000 	str.w	r8, [sp]
 8008860:	4b50      	ldr	r3, [pc, #320]	; (80089a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8008862:	f240 3202 	movw	r2, #770	; 0x302
 8008866:	213b      	movs	r1, #59	; 0x3b
 8008868:	f504 60ec 	add.w	r0, r4, #1888	; 0x760
 800886c:	f7ff fa72 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008870:	9501      	str	r5, [sp, #4]
 8008872:	f8cd a000 	str.w	sl, [sp]
 8008876:	4b4b      	ldr	r3, [pc, #300]	; (80089a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8008878:	f240 3202 	movw	r2, #770	; 0x302
 800887c:	213c      	movs	r1, #60	; 0x3c
 800887e:	f504 60f0 	add.w	r0, r4, #1920	; 0x780
 8008882:	f7ff fa67 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008886:	9501      	str	r5, [sp, #4]
 8008888:	f8cd 9000 	str.w	r9, [sp]
 800888c:	4b45      	ldr	r3, [pc, #276]	; (80089a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 800888e:	f240 3202 	movw	r2, #770	; 0x302
 8008892:	213d      	movs	r1, #61	; 0x3d
 8008894:	f504 60f4 	add.w	r0, r4, #1952	; 0x7a0
 8008898:	f7ff fa5c 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800889c:	9501      	str	r5, [sp, #4]
 800889e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088a2:	9300      	str	r3, [sp, #0]
 80088a4:	4b3f      	ldr	r3, [pc, #252]	; (80089a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 80088a6:	f240 3202 	movw	r2, #770	; 0x302
 80088aa:	213e      	movs	r1, #62	; 0x3e
 80088ac:	f504 60f8 	add.w	r0, r4, #1984	; 0x7c0
 80088b0:	f7ff fa50 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80088b4:	9501      	str	r5, [sp, #4]
 80088b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80088c0:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 80088c4:	f240 3202 	movw	r2, #770	; 0x302
 80088c8:	213f      	movs	r1, #63	; 0x3f
 80088ca:	f504 60fc 	add.w	r0, r4, #2016	; 0x7e0
 80088ce:	f7ff fa41 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80088d2:	9501      	str	r5, [sp, #4]
 80088d4:	f8cd b000 	str.w	fp, [sp]
 80088d8:	4b32      	ldr	r3, [pc, #200]	; (80089a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 80088da:	f240 3202 	movw	r2, #770	; 0x302
 80088de:	4631      	mov	r1, r6
 80088e0:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 80088e4:	f7ff fa36 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80088e8:	9501      	str	r5, [sp, #4]
 80088ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80088f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80088f8:	f240 3202 	movw	r2, #770	; 0x302
 80088fc:	2141      	movs	r1, #65	; 0x41
 80088fe:	f504 6002 	add.w	r0, r4, #2080	; 0x820
 8008902:	f7ff fa27 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008906:	9501      	str	r5, [sp, #4]
 8008908:	f8cd 9000 	str.w	r9, [sp]
 800890c:	4b26      	ldr	r3, [pc, #152]	; (80089a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 800890e:	f240 3203 	movw	r2, #771	; 0x303
 8008912:	2142      	movs	r1, #66	; 0x42
 8008914:	f504 6004 	add.w	r0, r4, #2112	; 0x840
 8008918:	f7ff fa1c 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800891c:	9501      	str	r5, [sp, #4]
 800891e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	4b20      	ldr	r3, [pc, #128]	; (80089a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8008926:	f240 3203 	movw	r2, #771	; 0x303
 800892a:	2143      	movs	r1, #67	; 0x43
 800892c:	f504 6006 	add.w	r0, r4, #2144	; 0x860
 8008930:	f7ff fa10 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008934:	9501      	str	r5, [sp, #4]
 8008936:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	4b1a      	ldr	r3, [pc, #104]	; (80089a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 800893e:	f240 3203 	movw	r2, #771	; 0x303
 8008942:	2144      	movs	r1, #68	; 0x44
 8008944:	f504 6008 	add.w	r0, r4, #2176	; 0x880
 8008948:	f7ff fa04 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800894c:	9501      	str	r5, [sp, #4]
 800894e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	4b14      	ldr	r3, [pc, #80]	; (80089a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8008956:	f240 3203 	movw	r2, #771	; 0x303
 800895a:	2145      	movs	r1, #69	; 0x45
 800895c:	f504 600a 	add.w	r0, r4, #2208	; 0x8a0
 8008960:	f7ff f9f8 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008964:	9501      	str	r5, [sp, #4]
 8008966:	f8cd 9000 	str.w	r9, [sp]
 800896a:	4b10      	ldr	r3, [pc, #64]	; (80089ac <_ZN5codal15STM32BluePillIOC1Ev+0x6b4>)
 800896c:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008970:	2146      	movs	r1, #70	; 0x46
 8008972:	f504 600c 	add.w	r0, r4, #2240	; 0x8c0
 8008976:	f7ff f9ed 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800897a:	9501      	str	r5, [sp, #4]
 800897c:	f8cd 8000 	str.w	r8, [sp]
 8008980:	4b07      	ldr	r3, [pc, #28]	; (80089a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8008982:	f240 3205 	movw	r2, #773	; 0x305
 8008986:	2147      	movs	r1, #71	; 0x47
 8008988:	f504 600e 	add.w	r0, r4, #2272	; 0x8e0
 800898c:	f7ff f9e2 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008990:	9501      	str	r5, [sp, #4]
 8008992:	f8cd b000 	str.w	fp, [sp]
 8008996:	4b05      	ldr	r3, [pc, #20]	; (80089ac <_ZN5codal15STM32BluePillIOC1Ev+0x6b4>)
 8008998:	f44f 7241 	mov.w	r2, #772	; 0x304
 800899c:	2148      	movs	r1, #72	; 0x48
 800899e:	e007      	b.n	80089b0 <_ZN5codal15STM32BluePillIOC1Ev+0x6b8>
 80089a0:	40011400 	.word	0x40011400
 80089a4:	40010800 	.word	0x40010800
 80089a8:	40010c00 	.word	0x40010c00
 80089ac:	40011000 	.word	0x40011000
 80089b0:	f504 6010 	add.w	r0, r4, #2304	; 0x900
 80089b4:	f7ff f9ce 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80089b8:	9501      	str	r5, [sp, #4]
 80089ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80089c4:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80089c8:	f44f 7241 	mov.w	r2, #772	; 0x304
 80089cc:	2149      	movs	r1, #73	; 0x49
 80089ce:	f504 6012 	add.w	r0, r4, #2336	; 0x920
 80089d2:	f7ff f9bf 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80089d6:	9501      	str	r5, [sp, #4]
 80089d8:	f8cd b000 	str.w	fp, [sp]
 80089dc:	4bd6      	ldr	r3, [pc, #856]	; (8008d38 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 80089de:	f240 3203 	movw	r2, #771	; 0x303
 80089e2:	214a      	movs	r1, #74	; 0x4a
 80089e4:	f504 6014 	add.w	r0, r4, #2368	; 0x940
 80089e8:	f7ff f9b4 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80089ec:	9501      	str	r5, [sp, #4]
 80089ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	4bd0      	ldr	r3, [pc, #832]	; (8008d38 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 80089f6:	f240 3203 	movw	r2, #771	; 0x303
 80089fa:	214b      	movs	r1, #75	; 0x4b
 80089fc:	f504 6016 	add.w	r0, r4, #2400	; 0x960
 8008a00:	f7ff f9a8 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a04:	9501      	str	r5, [sp, #4]
 8008a06:	f8cd 9000 	str.w	r9, [sp]
 8008a0a:	4bcb      	ldr	r3, [pc, #812]	; (8008d38 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 8008a0c:	f240 3203 	movw	r2, #771	; 0x303
 8008a10:	214c      	movs	r1, #76	; 0x4c
 8008a12:	f504 6018 	add.w	r0, r4, #2432	; 0x980
 8008a16:	f7ff f99d 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a1a:	9501      	str	r5, [sp, #4]
 8008a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	4bc5      	ldr	r3, [pc, #788]	; (8008d38 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 8008a24:	f240 3203 	movw	r2, #771	; 0x303
 8008a28:	214d      	movs	r1, #77	; 0x4d
 8008a2a:	f504 601a 	add.w	r0, r4, #2464	; 0x9a0
 8008a2e:	f7ff f991 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a32:	9501      	str	r5, [sp, #4]
 8008a34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	4bbf      	ldr	r3, [pc, #764]	; (8008d38 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 8008a3c:	f240 3203 	movw	r2, #771	; 0x303
 8008a40:	214e      	movs	r1, #78	; 0x4e
 8008a42:	f504 601c 	add.w	r0, r4, #2496	; 0x9c0
 8008a46:	f7ff f985 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a4a:	9501      	str	r5, [sp, #4]
 8008a4c:	9500      	str	r5, [sp, #0]
 8008a4e:	4bbb      	ldr	r3, [pc, #748]	; (8008d3c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8008a50:	f240 3202 	movw	r2, #770	; 0x302
 8008a54:	214f      	movs	r1, #79	; 0x4f
 8008a56:	f504 601e 	add.w	r0, r4, #2528	; 0x9e0
 8008a5a:	f7ff f97b 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a5e:	9501      	str	r5, [sp, #4]
 8008a60:	9700      	str	r7, [sp, #0]
 8008a62:	4bb6      	ldr	r3, [pc, #728]	; (8008d3c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8008a64:	f240 3202 	movw	r2, #770	; 0x302
 8008a68:	2150      	movs	r1, #80	; 0x50
 8008a6a:	f504 6020 	add.w	r0, r4, #2560	; 0xa00
 8008a6e:	f7ff f971 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a72:	9501      	str	r5, [sp, #4]
 8008a74:	f8cd 8000 	str.w	r8, [sp]
 8008a78:	4bb0      	ldr	r3, [pc, #704]	; (8008d3c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8008a7a:	f240 3202 	movw	r2, #770	; 0x302
 8008a7e:	2151      	movs	r1, #81	; 0x51
 8008a80:	f504 6022 	add.w	r0, r4, #2592	; 0xa20
 8008a84:	f7ff f966 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a88:	9501      	str	r5, [sp, #4]
 8008a8a:	f8cd a000 	str.w	sl, [sp]
 8008a8e:	4bab      	ldr	r3, [pc, #684]	; (8008d3c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8008a90:	f240 3202 	movw	r2, #770	; 0x302
 8008a94:	2152      	movs	r1, #82	; 0x52
 8008a96:	f504 6024 	add.w	r0, r4, #2624	; 0xa40
 8008a9a:	f7ff f95b 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008a9e:	9501      	str	r5, [sp, #4]
 8008aa0:	2310      	movs	r3, #16
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	4ba5      	ldr	r3, [pc, #660]	; (8008d3c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8008aa6:	f240 3202 	movw	r2, #770	; 0x302
 8008aaa:	2153      	movs	r1, #83	; 0x53
 8008aac:	f504 6026 	add.w	r0, r4, #2656	; 0xa60
 8008ab0:	f7ff f950 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ab4:	9501      	str	r5, [sp, #4]
 8008ab6:	f8cd a000 	str.w	sl, [sp]
 8008aba:	4ba1      	ldr	r3, [pc, #644]	; (8008d40 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 8008abc:	f240 3205 	movw	r2, #773	; 0x305
 8008ac0:	2154      	movs	r1, #84	; 0x54
 8008ac2:	f504 6028 	add.w	r0, r4, #2688	; 0xa80
 8008ac6:	f7ff f945 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008aca:	9501      	str	r5, [sp, #4]
 8008acc:	2310      	movs	r3, #16
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	4b9b      	ldr	r3, [pc, #620]	; (8008d40 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 8008ad2:	f240 3205 	movw	r2, #773	; 0x305
 8008ad6:	2155      	movs	r1, #85	; 0x55
 8008ad8:	f504 602a 	add.w	r0, r4, #2720	; 0xaa0
 8008adc:	f7ff f93a 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ae0:	9501      	str	r5, [sp, #4]
 8008ae2:	2320      	movs	r3, #32
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	4b96      	ldr	r3, [pc, #600]	; (8008d40 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 8008ae8:	f240 3205 	movw	r2, #773	; 0x305
 8008aec:	2156      	movs	r1, #86	; 0x56
 8008aee:	f504 602c 	add.w	r0, r4, #2752	; 0xac0
 8008af2:	f7ff f92f 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008af6:	9501      	str	r5, [sp, #4]
 8008af8:	9600      	str	r6, [sp, #0]
 8008afa:	4b91      	ldr	r3, [pc, #580]	; (8008d40 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 8008afc:	f240 3205 	movw	r2, #773	; 0x305
 8008b00:	2157      	movs	r1, #87	; 0x57
 8008b02:	f504 602e 	add.w	r0, r4, #2784	; 0xae0
 8008b06:	f7ff f925 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b0a:	9501      	str	r5, [sp, #4]
 8008b0c:	2380      	movs	r3, #128	; 0x80
 8008b0e:	9300      	str	r3, [sp, #0]
 8008b10:	4b8b      	ldr	r3, [pc, #556]	; (8008d40 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 8008b12:	f240 3205 	movw	r2, #773	; 0x305
 8008b16:	2158      	movs	r1, #88	; 0x58
 8008b18:	f504 6030 	add.w	r0, r4, #2816	; 0xb00
 8008b1c:	f7ff f91a 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b20:	9501      	str	r5, [sp, #4]
 8008b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b2c:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 8008b30:	f240 3202 	movw	r2, #770	; 0x302
 8008b34:	2159      	movs	r1, #89	; 0x59
 8008b36:	f504 6032 	add.w	r0, r4, #2848	; 0xb20
 8008b3a:	f7ff f90b 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b3e:	9501      	str	r5, [sp, #4]
 8008b40:	f8cd b000 	str.w	fp, [sp]
 8008b44:	4b7d      	ldr	r3, [pc, #500]	; (8008d3c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8008b46:	f240 3202 	movw	r2, #770	; 0x302
 8008b4a:	215a      	movs	r1, #90	; 0x5a
 8008b4c:	f504 6034 	add.w	r0, r4, #2880	; 0xb40
 8008b50:	f7ff f900 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b54:	4e78      	ldr	r6, [pc, #480]	; (8008d38 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 8008b56:	9501      	str	r5, [sp, #4]
 8008b58:	f04f 0b40 	mov.w	fp, #64	; 0x40
 8008b5c:	f8cd b000 	str.w	fp, [sp]
 8008b60:	4633      	mov	r3, r6
 8008b62:	f240 3203 	movw	r2, #771	; 0x303
 8008b66:	215b      	movs	r1, #91	; 0x5b
 8008b68:	f504 6036 	add.w	r0, r4, #2912	; 0xb60
 8008b6c:	f7ff f8f2 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b70:	9501      	str	r5, [sp, #4]
 8008b72:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8008b76:	f8cd a000 	str.w	sl, [sp]
 8008b7a:	4633      	mov	r3, r6
 8008b7c:	f240 3203 	movw	r2, #771	; 0x303
 8008b80:	215c      	movs	r1, #92	; 0x5c
 8008b82:	f504 6038 	add.w	r0, r4, #2944	; 0xb80
 8008b86:	f7ff f8e5 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008b8a:	9501      	str	r5, [sp, #4]
 8008b8c:	2720      	movs	r7, #32
 8008b8e:	9700      	str	r7, [sp, #0]
 8008b90:	4633      	mov	r3, r6
 8008b92:	f240 3203 	movw	r2, #771	; 0x303
 8008b96:	215d      	movs	r1, #93	; 0x5d
 8008b98:	f504 603a 	add.w	r0, r4, #2976	; 0xba0
 8008b9c:	f7ff f8da 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ba0:	9501      	str	r5, [sp, #4]
 8008ba2:	f8cd b000 	str.w	fp, [sp]
 8008ba6:	4633      	mov	r3, r6
 8008ba8:	f240 3203 	movw	r2, #771	; 0x303
 8008bac:	215e      	movs	r1, #94	; 0x5e
 8008bae:	f504 603c 	add.w	r0, r4, #3008	; 0xbc0
 8008bb2:	f7ff f8cf 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008bb6:	9501      	str	r5, [sp, #4]
 8008bb8:	f8cd a000 	str.w	sl, [sp]
 8008bbc:	4633      	mov	r3, r6
 8008bbe:	f240 3203 	movw	r2, #771	; 0x303
 8008bc2:	215f      	movs	r1, #95	; 0x5f
 8008bc4:	f504 603e 	add.w	r0, r4, #3040	; 0xbe0
 8008bc8:	f7ff f8c4 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008bcc:	9501      	str	r5, [sp, #4]
 8008bce:	9700      	str	r7, [sp, #0]
 8008bd0:	4633      	mov	r3, r6
 8008bd2:	f240 3203 	movw	r2, #771	; 0x303
 8008bd6:	2160      	movs	r1, #96	; 0x60
 8008bd8:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
 8008bdc:	f7ff f8ba 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008be0:	9501      	str	r5, [sp, #4]
 8008be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	4633      	mov	r3, r6
 8008bea:	f240 3203 	movw	r2, #771	; 0x303
 8008bee:	2161      	movs	r1, #97	; 0x61
 8008bf0:	f504 6042 	add.w	r0, r4, #3104	; 0xc20
 8008bf4:	f7ff f8ae 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008bf8:	9501      	str	r5, [sp, #4]
 8008bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	4633      	mov	r3, r6
 8008c02:	f240 3203 	movw	r2, #771	; 0x303
 8008c06:	2162      	movs	r1, #98	; 0x62
 8008c08:	f504 6044 	add.w	r0, r4, #3136	; 0xc40
 8008c0c:	f7ff f8a2 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c10:	9501      	str	r5, [sp, #4]
 8008c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	4633      	mov	r3, r6
 8008c1a:	f240 3203 	movw	r2, #771	; 0x303
 8008c1e:	2163      	movs	r1, #99	; 0x63
 8008c20:	f504 6046 	add.w	r0, r4, #3168	; 0xc60
 8008c24:	f7ff f896 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c28:	9501      	str	r5, [sp, #4]
 8008c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	4633      	mov	r3, r6
 8008c32:	f240 3203 	movw	r2, #771	; 0x303
 8008c36:	2164      	movs	r1, #100	; 0x64
 8008c38:	f504 6048 	add.w	r0, r4, #3200	; 0xc80
 8008c3c:	f7ff f88a 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c40:	9501      	str	r5, [sp, #4]
 8008c42:	f8cd 9000 	str.w	r9, [sp]
 8008c46:	4633      	mov	r3, r6
 8008c48:	f240 3203 	movw	r2, #771	; 0x303
 8008c4c:	2165      	movs	r1, #101	; 0x65
 8008c4e:	f504 604a 	add.w	r0, r4, #3232	; 0xca0
 8008c52:	f7ff f87f 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c56:	9501      	str	r5, [sp, #4]
 8008c58:	f04f 0810 	mov.w	r8, #16
 8008c5c:	f8cd 8000 	str.w	r8, [sp]
 8008c60:	4b36      	ldr	r3, [pc, #216]	; (8008d3c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8008c62:	f240 3202 	movw	r2, #770	; 0x302
 8008c66:	2166      	movs	r1, #102	; 0x66
 8008c68:	f504 604c 	add.w	r0, r4, #3264	; 0xcc0
 8008c6c:	f7ff f872 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c70:	9501      	str	r5, [sp, #4]
 8008c72:	9700      	str	r7, [sp, #0]
 8008c74:	4b31      	ldr	r3, [pc, #196]	; (8008d3c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8008c76:	f240 3202 	movw	r2, #770	; 0x302
 8008c7a:	2167      	movs	r1, #103	; 0x67
 8008c7c:	f504 604e 	add.w	r0, r4, #3296	; 0xce0
 8008c80:	f7ff f868 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c84:	9501      	str	r5, [sp, #4]
 8008c86:	f8cd b000 	str.w	fp, [sp]
 8008c8a:	4b2c      	ldr	r3, [pc, #176]	; (8008d3c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8008c8c:	f240 3202 	movw	r2, #770	; 0x302
 8008c90:	2168      	movs	r1, #104	; 0x68
 8008c92:	f504 6050 	add.w	r0, r4, #3328	; 0xd00
 8008c96:	f7ff f85d 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008c9a:	9501      	str	r5, [sp, #4]
 8008c9c:	f8cd a000 	str.w	sl, [sp]
 8008ca0:	4b26      	ldr	r3, [pc, #152]	; (8008d3c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8008ca2:	f240 3202 	movw	r2, #770	; 0x302
 8008ca6:	2169      	movs	r1, #105	; 0x69
 8008ca8:	f504 6052 	add.w	r0, r4, #3360	; 0xd20
 8008cac:	f7ff f852 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008cb0:	9501      	str	r5, [sp, #4]
 8008cb2:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
 8008cb6:	f8cd a000 	str.w	sl, [sp]
 8008cba:	4b20      	ldr	r3, [pc, #128]	; (8008d3c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8008cbc:	f240 3202 	movw	r2, #770	; 0x302
 8008cc0:	216a      	movs	r1, #106	; 0x6a
 8008cc2:	f504 6054 	add.w	r0, r4, #3392	; 0xd40
 8008cc6:	f7ff f845 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008cca:	9501      	str	r5, [sp, #4]
 8008ccc:	2308      	movs	r3, #8
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	4633      	mov	r3, r6
 8008cd2:	f240 3203 	movw	r2, #771	; 0x303
 8008cd6:	216b      	movs	r1, #107	; 0x6b
 8008cd8:	f504 6056 	add.w	r0, r4, #3424	; 0xd60
 8008cdc:	f7ff f83a 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008ce0:	9501      	str	r5, [sp, #4]
 8008ce2:	f8cd 8000 	str.w	r8, [sp]
 8008ce6:	4633      	mov	r3, r6
 8008ce8:	f240 3203 	movw	r2, #771	; 0x303
 8008cec:	216c      	movs	r1, #108	; 0x6c
 8008cee:	f504 6058 	add.w	r0, r4, #3456	; 0xd80
 8008cf2:	f7ff f82f 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008cf6:	9501      	str	r5, [sp, #4]
 8008cf8:	9700      	str	r7, [sp, #0]
 8008cfa:	4633      	mov	r3, r6
 8008cfc:	f240 3203 	movw	r2, #771	; 0x303
 8008d00:	216d      	movs	r1, #109	; 0x6d
 8008d02:	f504 605a 	add.w	r0, r4, #3488	; 0xda0
 8008d06:	f7ff f825 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d0a:	9501      	str	r5, [sp, #4]
 8008d0c:	f8cd 9000 	str.w	r9, [sp]
 8008d10:	4633      	mov	r3, r6
 8008d12:	f240 3203 	movw	r2, #771	; 0x303
 8008d16:	216e      	movs	r1, #110	; 0x6e
 8008d18:	f504 605c 	add.w	r0, r4, #3520	; 0xdc0
 8008d1c:	f7ff f81a 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d20:	9501      	str	r5, [sp, #4]
 8008d22:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8008d26:	f8cd b000 	str.w	fp, [sp]
 8008d2a:	4633      	mov	r3, r6
 8008d2c:	f240 3203 	movw	r2, #771	; 0x303
 8008d30:	216f      	movs	r1, #111	; 0x6f
 8008d32:	f504 605e 	add.w	r0, r4, #3552	; 0xde0
 8008d36:	e005      	b.n	8008d44 <_ZN5codal15STM32BluePillIOC1Ev+0xa4c>
 8008d38:	40010c00 	.word	0x40010c00
 8008d3c:	40010800 	.word	0x40010800
 8008d40:	40011400 	.word	0x40011400
 8008d44:	f7ff f806 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d48:	9501      	str	r5, [sp, #4]
 8008d4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d4e:	9300      	str	r3, [sp, #0]
 8008d50:	4633      	mov	r3, r6
 8008d52:	f240 3203 	movw	r2, #771	; 0x303
 8008d56:	2170      	movs	r1, #112	; 0x70
 8008d58:	f504 6060 	add.w	r0, r4, #3584	; 0xe00
 8008d5c:	f7fe fffa 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d60:	9501      	str	r5, [sp, #4]
 8008d62:	f8cd a000 	str.w	sl, [sp]
 8008d66:	4633      	mov	r3, r6
 8008d68:	f240 3203 	movw	r2, #771	; 0x303
 8008d6c:	2171      	movs	r1, #113	; 0x71
 8008d6e:	f504 6062 	add.w	r0, r4, #3616	; 0xe20
 8008d72:	f7fe ffef 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d76:	9501      	str	r5, [sp, #4]
 8008d78:	f8cd a000 	str.w	sl, [sp]
 8008d7c:	4b33      	ldr	r3, [pc, #204]	; (8008e4c <_ZN5codal15STM32BluePillIOC1Ev+0xb54>)
 8008d7e:	f240 3202 	movw	r2, #770	; 0x302
 8008d82:	2172      	movs	r1, #114	; 0x72
 8008d84:	f504 6064 	add.w	r0, r4, #3648	; 0xe40
 8008d88:	f7fe ffe4 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008d8c:	9501      	str	r5, [sp, #4]
 8008d8e:	2308      	movs	r3, #8
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	4633      	mov	r3, r6
 8008d94:	f240 3203 	movw	r2, #771	; 0x303
 8008d98:	2173      	movs	r1, #115	; 0x73
 8008d9a:	f504 6066 	add.w	r0, r4, #3680	; 0xe60
 8008d9e:	f7fe ffd9 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008da2:	9501      	str	r5, [sp, #4]
 8008da4:	f8cd 8000 	str.w	r8, [sp]
 8008da8:	4633      	mov	r3, r6
 8008daa:	f240 3203 	movw	r2, #771	; 0x303
 8008dae:	2174      	movs	r1, #116	; 0x74
 8008db0:	f504 6068 	add.w	r0, r4, #3712	; 0xe80
 8008db4:	f7fe ffce 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008db8:	9501      	str	r5, [sp, #4]
 8008dba:	9700      	str	r7, [sp, #0]
 8008dbc:	4633      	mov	r3, r6
 8008dbe:	f240 3203 	movw	r2, #771	; 0x303
 8008dc2:	2175      	movs	r1, #117	; 0x75
 8008dc4:	f504 606a 	add.w	r0, r4, #3744	; 0xea0
 8008dc8:	f7fe ffc4 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008dcc:	9501      	str	r5, [sp, #4]
 8008dce:	f8cd 8000 	str.w	r8, [sp]
 8008dd2:	4b1e      	ldr	r3, [pc, #120]	; (8008e4c <_ZN5codal15STM32BluePillIOC1Ev+0xb54>)
 8008dd4:	f240 3202 	movw	r2, #770	; 0x302
 8008dd8:	2176      	movs	r1, #118	; 0x76
 8008dda:	f504 606c 	add.w	r0, r4, #3776	; 0xec0
 8008dde:	f7fe ffb9 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008de2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8008de6:	9501      	str	r5, [sp, #4]
 8008de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	4633      	mov	r3, r6
 8008df0:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008df4:	2177      	movs	r1, #119	; 0x77
 8008df6:	f504 606e 	add.w	r0, r4, #3808	; 0xee0
 8008dfa:	f7fe ffab 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008dfe:	9501      	str	r5, [sp, #4]
 8008e00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	4633      	mov	r3, r6
 8008e08:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008e0c:	2178      	movs	r1, #120	; 0x78
 8008e0e:	f504 6070 	add.w	r0, r4, #3840	; 0xf00
 8008e12:	f7fe ff9f 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e16:	9501      	str	r5, [sp, #4]
 8008e18:	f8cd 9000 	str.w	r9, [sp]
 8008e1c:	4633      	mov	r3, r6
 8008e1e:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008e22:	2179      	movs	r1, #121	; 0x79
 8008e24:	f504 6072 	add.w	r0, r4, #3872	; 0xf20
 8008e28:	f7fe ff94 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008e2c:	9501      	str	r5, [sp, #4]
 8008e2e:	f8cd b000 	str.w	fp, [sp]
 8008e32:	4633      	mov	r3, r6
 8008e34:	f44f 7241 	mov.w	r2, #772	; 0x304
 8008e38:	217a      	movs	r1, #122	; 0x7a
 8008e3a:	f504 6074 	add.w	r0, r4, #3904	; 0xf40
 8008e3e:	f7fe ff89 	bl	8007d54 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
vbat        (CM_PIN_VBAT       , RCC_GPIOADC, GPIOADC, GPIOVBAT, PIN_CAPABILITY_DIGITAL),
#endif  //  TODO

//  End of autogenerated section
{
}
 8008e42:	4620      	mov	r0, r4
 8008e44:	b003      	add	sp, #12
 8008e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4a:	bf00      	nop
 8008e4c:	40010800 	.word	0x40010800

08008e50 <_Z41__static_initialization_and_destruction_0ii>:

void UARTInterface::write(uint8_t ch) {
    //  Send the byte to the UART port.
    //  debug_println("uart_write"); debug_flush();
    usart_send(USART2, ch);
}
 8008e50:	2801      	cmp	r0, #1
 8008e52:	d000      	beq.n	8008e56 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8008e54:	4770      	bx	lr
 8008e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008e5a:	4299      	cmp	r1, r3
 8008e5c:	d1fa      	bne.n	8008e54 <_Z41__static_initialization_and_destruction_0ii+0x4>
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8008e5e:	4b02      	ldr	r3, [pc, #8]	; (8008e68 <_Z41__static_initialization_and_destruction_0ii+0x18>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	641a      	str	r2, [r3, #64]	; 0x40
 8008e66:	e7f5      	b.n	8008e54 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8008e68:	20002194 	.word	0x20002194

08008e6c <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>:
            int res = HAL_I2C_Init(&i2c);
            CODAL_ASSERT(res == HAL_OK);
#endif  //  TODO            
        }

        I2C::I2C(codal::Pin &sda, codal::Pin &scl) : codal::I2C(sda, scl), sda(sda), scl(scl)
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	4604      	mov	r4, r0
 8008e70:	460e      	mov	r6, r1
 8008e72:	4615      	mov	r5, r2
 8008e74:	f000 f8c2 	bl	8008ffc <_ZN5codal3I2CC1ERNS_3PinES2_>
 8008e78:	4b02      	ldr	r3, [pc, #8]	; (8008e84 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_+0x18>)
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	6066      	str	r6, [r4, #4]
 8008e7e:	60a5      	str	r5, [r4, #8]
            i2c.Init.OwnAddress1 = 0xFE;
            i2c.Init.OwnAddress2 = 0xFE;

            needsInit = true;
#endif  //  TODO            
        }
 8008e80:	4620      	mov	r0, r4
 8008e82:	bd70      	pop	{r4, r5, r6, pc}
 8008e84:	0800a6f4 	.word	0x0800a6f4

08008e88 <_ZN5codal3_cm3SPI4initEv>:
            p->setup(mode, cnf);
            CODAL_ASSERT(!prev || prev == peri);
            return peri;
        }

        void SPI::init() {
 8008e88:	b538      	push	{r3, r4, r5, lr}
            auto res = HAL_OK;
            if (!needsInit) { return; }
 8008e8a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008e8e:	b903      	cbnz	r3, 8008e92 <_ZN5codal3_cm3SPI4initEv+0xa>
            }
            spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
            auto res = HAL_SPI_Init(&spi);
#endif  //  TODO
            CODAL_ASSERT(res == HAL_OK);
        }
 8008e90:	bd38      	pop	{r3, r4, r5, pc}
 8008e92:	4604      	mov	r4, r0
            needsInit = false;
 8008e94:	2500      	movs	r5, #0
 8008e96:	f880 5020 	strb.w	r5, [r0, #32]
            uint32_t instance = _codal_setup_pin(sclk, 0, PinMap_SPI_SCK);
 8008e9a:	4a0d      	ldr	r2, [pc, #52]	; (8008ed0 <_ZN5codal3_cm3SPI4initEv+0x48>)
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	68c0      	ldr	r0, [r0, #12]
 8008ea0:	f001 f8b1 	bl	800a006 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            instance = _codal_setup_pin(miso, 0, PinMap_SPI_MISO);
 8008ea4:	4a0b      	ldr	r2, [pc, #44]	; (8008ed4 <_ZN5codal3_cm3SPI4initEv+0x4c>)
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	68a0      	ldr	r0, [r4, #8]
 8008eaa:	f001 f8ac 	bl	800a006 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            instance = _codal_setup_pin(mosi, 0, PinMap_SPI_MOSI);
 8008eae:	4a0a      	ldr	r2, [pc, #40]	; (8008ed8 <_ZN5codal3_cm3SPI4initEv+0x50>)
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	6860      	ldr	r0, [r4, #4]
 8008eb4:	f001 f8a7 	bl	800a006 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            instance = _codal_setup_pin(nss, 0, PinMap_SPI_NSS);
 8008eb8:	4a08      	ldr	r2, [pc, #32]	; (8008edc <_ZN5codal3_cm3SPI4initEv+0x54>)
 8008eba:	4629      	mov	r1, r5
 8008ebc:	6920      	ldr	r0, [r4, #16]
 8008ebe:	f001 f8a2 	bl	800a006 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            LOG("SPI instance %p", instance);
 8008ec2:	4807      	ldr	r0, [pc, #28]	; (8008ee0 <_ZN5codal3_cm3SPI4initEv+0x58>)
 8008ec4:	f7f9 fcce 	bl	8002864 <debug_println>
 8008ec8:	f7f9 fcf3 	bl	80028b2 <debug_flush>
 8008ecc:	e7e0      	b.n	8008e90 <_ZN5codal3_cm3SPI4initEv+0x8>
 8008ece:	bf00      	nop
 8008ed0:	0800a6a4 	.word	0x0800a6a4
 8008ed4:	0800a5cc 	.word	0x0800a5cc
 8008ed8:	0800a614 	.word	0x0800a614
 8008edc:	0800a65c 	.word	0x0800a65c
 8008ee0:	0800a718 	.word	0x0800a718

08008ee4 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_>:
            debug_print(" sclk "); debug_print(sclk.name); 
            debug_println(""); debug_flush();
        }

        //  New constructor.  Called by codal-libopencm3.
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk, Pin &nss) : codal::SPI() {
 8008ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ee8:	4604      	mov	r4, r0
 8008eea:	4688      	mov	r8, r1
 8008eec:	4617      	mov	r7, r2
 8008eee:	461e      	mov	r6, r3
 8008ef0:	9d06      	ldr	r5, [sp, #24]
 8008ef2:	4b1c      	ldr	r3, [pc, #112]	; (8008f64 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x80>)
 8008ef4:	6003      	str	r3, [r0, #0]
            this->mosi = &mosi;
 8008ef6:	6061      	str	r1, [r4, #4]
            this->miso = &miso;
 8008ef8:	60a2      	str	r2, [r4, #8]
            this->sclk = &sclk;
 8008efa:	60c6      	str	r6, [r0, #12]
            this->nss = &nss;
 8008efc:	6105      	str	r5, [r0, #16]
            // ZERO(spi); ZERO(hdma_tx); ZERO(hdma_rx);
            this->needsInit = true;
 8008efe:	2301      	movs	r3, #1
 8008f00:	f880 3020 	strb.w	r3, [r0, #32]
            this->transferCompleteEventCode = codal::allocateNotifyEvent();
 8008f04:	f7fe fda2 	bl	8007a4c <_ZN5codal19allocateNotifyEventEv>
 8008f08:	84a0      	strh	r0, [r4, #36]	; 0x24
            for (unsigned i = 0; i < ARRAY_SIZE(_instances); ++i) {
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	d808      	bhi.n	8008f22 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x3e>
                if (_instances[i] == NULL) {
 8008f10:	4a15      	ldr	r2, [pc, #84]	; (8008f68 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x84>)
 8008f12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008f16:	b10a      	cbz	r2, 8008f1c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x38>
            for (unsigned i = 0; i < ARRAY_SIZE(_instances); ++i) {
 8008f18:	3301      	adds	r3, #1
 8008f1a:	e7f7      	b.n	8008f0c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x28>
                    _instances[i] = this;
 8008f1c:	4a12      	ldr	r2, [pc, #72]	; (8008f68 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x84>)
 8008f1e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
                    break;
                }
            }
            debug_print("spi mosi "); debug_print(mosi.name); 
 8008f22:	4812      	ldr	r0, [pc, #72]	; (8008f6c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x88>)
 8008f24:	f7f9 fcca 	bl	80028bc <debug_print>
 8008f28:	f898 0010 	ldrb.w	r0, [r8, #16]
 8008f2c:	f7f9 fc80 	bl	8002830 <_Z11debug_printi>
            debug_print(" miso "); debug_print(miso.name); 
 8008f30:	480f      	ldr	r0, [pc, #60]	; (8008f70 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x8c>)
 8008f32:	f7f9 fcc3 	bl	80028bc <debug_print>
 8008f36:	7c38      	ldrb	r0, [r7, #16]
 8008f38:	f7f9 fc7a 	bl	8002830 <_Z11debug_printi>
            debug_print(" sclk "); debug_print(sclk.name); 
 8008f3c:	480d      	ldr	r0, [pc, #52]	; (8008f74 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x90>)
 8008f3e:	f7f9 fcbd 	bl	80028bc <debug_print>
 8008f42:	7c30      	ldrb	r0, [r6, #16]
 8008f44:	f7f9 fc74 	bl	8002830 <_Z11debug_printi>
            debug_print(" nss "); debug_print(nss.name); 
 8008f48:	480b      	ldr	r0, [pc, #44]	; (8008f78 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x94>)
 8008f4a:	f7f9 fcb7 	bl	80028bc <debug_print>
 8008f4e:	7c28      	ldrb	r0, [r5, #16]
 8008f50:	f7f9 fc6e 	bl	8002830 <_Z11debug_printi>
            debug_println(""); debug_flush();
 8008f54:	4809      	ldr	r0, [pc, #36]	; (8008f7c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x98>)
 8008f56:	f7f9 fc85 	bl	8002864 <debug_println>
 8008f5a:	f7f9 fcaa 	bl	80028b2 <debug_flush>
        }
 8008f5e:	4620      	mov	r0, r4
 8008f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f64:	0800a768 	.word	0x0800a768
 8008f68:	20002200 	.word	0x20002200
 8008f6c:	0800a74c 	.word	0x0800a74c
 8008f70:	0800a73c 	.word	0x0800a73c
 8008f74:	0800a744 	.word	0x0800a744
 8008f78:	0800a758 	.word	0x0800a758
 8008f7c:	0800a428 	.word	0x0800a428

08008f80 <pinmap_peripheral>:

static CmPeripheral pinmap_find_peripheral(codal::PinNumber pin, const PinMap *map);
static CmPinMode pinmap_find_mode(codal::PinNumber pin, const PinMap *map);
static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap *map);

CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
 8008f80:	b510      	push	{r4, lr}
    //  Return the peripheral for the pin e.g. SPI1.
    CmPeripheral peripheral = CM_PERIPHERAL_NC;
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 8008f82:	28ff      	cmp	r0, #255	; 0xff
 8008f84:	d00d      	beq.n	8008fa2 <pinmap_peripheral+0x22>

    peripheral = pinmap_find_peripheral(pin, map);
 8008f86:	f001 f87d 	bl	800a084 <_ZL22pinmap_find_peripheralhPK6PinMap>
 8008f8a:	4604      	mov	r4, r0
    if (peripheral == CM_PERIPHERAL_NC) // no mapping available
 8008f8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008f90:	d001      	beq.n	8008f96 <pinmap_peripheral+0x16>
        { error("pinmap not found for peripheral"); }
    return peripheral;
}
 8008f92:	4620      	mov	r0, r4
 8008f94:	bd10      	pop	{r4, pc}
        { error("pinmap not found for peripheral"); }
 8008f96:	4804      	ldr	r0, [pc, #16]	; (8008fa8 <pinmap_peripheral+0x28>)
 8008f98:	f7f9 fc64 	bl	8002864 <debug_println>
 8008f9c:	f7f9 fc89 	bl	80028b2 <debug_flush>
 8008fa0:	e7f7      	b.n	8008f92 <pinmap_peripheral+0x12>
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 8008fa2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008fa6:	e7f4      	b.n	8008f92 <pinmap_peripheral+0x12>
 8008fa8:	0800a7b4 	.word	0x0800a7b4

08008fac <pinmap_mode>:

CmPinMode pinmap_mode(codal::PinNumber pin, const PinMap* map) {
 8008fac:	b510      	push	{r4, lr}
    //  Return the pin mode for the peripheral e.g. GPIO_MODE_OUTPUT_2_MHZ.
    CmPinMode mode = CM_PINMODE_NC;
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }
 8008fae:	28ff      	cmp	r0, #255	; 0xff
 8008fb0:	d00c      	beq.n	8008fcc <pinmap_mode+0x20>

    mode = pinmap_find_mode(pin, map);
 8008fb2:	f001 f873 	bl	800a09c <_ZL16pinmap_find_modehPK6PinMap>
 8008fb6:	4604      	mov	r4, r0
    if (mode == CM_PINMODE_NC) // no mapping available
 8008fb8:	28ff      	cmp	r0, #255	; 0xff
 8008fba:	d001      	beq.n	8008fc0 <pinmap_mode+0x14>
        { error("pinmap not found for mode"); }
    return mode;
}
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	bd10      	pop	{r4, pc}
        { error("pinmap not found for mode"); }
 8008fc0:	4803      	ldr	r0, [pc, #12]	; (8008fd0 <pinmap_mode+0x24>)
 8008fc2:	f7f9 fc4f 	bl	8002864 <debug_println>
 8008fc6:	f7f9 fc74 	bl	80028b2 <debug_flush>
 8008fca:	e7f7      	b.n	8008fbc <pinmap_mode+0x10>
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }
 8008fcc:	24ff      	movs	r4, #255	; 0xff
 8008fce:	e7f5      	b.n	8008fbc <pinmap_mode+0x10>
 8008fd0:	0800a798 	.word	0x0800a798

08008fd4 <pinmap_cnf>:

CmPinCnf pinmap_cnf(codal::PinNumber pin, const PinMap* map) {
 8008fd4:	b510      	push	{r4, lr}
    //  Return the pin config for the peripheral e.g. GPIO_CNF_OUTPUT_PUSHPULL.
    CmPinCnf cnf = CM_PINCNF_NC;
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }
 8008fd6:	28ff      	cmp	r0, #255	; 0xff
 8008fd8:	d00c      	beq.n	8008ff4 <pinmap_cnf+0x20>

    cnf = pinmap_find_cnf(pin, map);
 8008fda:	f001 f86a 	bl	800a0b2 <_ZL15pinmap_find_cnfhPK6PinMap>
 8008fde:	4604      	mov	r4, r0
    if (cnf == CM_PINCNF_NC) // no mapping available
 8008fe0:	28ff      	cmp	r0, #255	; 0xff
 8008fe2:	d001      	beq.n	8008fe8 <pinmap_cnf+0x14>
        { error("pinmap not found for cnf"); }
    return cnf;
}
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	bd10      	pop	{r4, pc}
        { error("pinmap not found for cnf"); }
 8008fe8:	4803      	ldr	r0, [pc, #12]	; (8008ff8 <pinmap_cnf+0x24>)
 8008fea:	f7f9 fc3b 	bl	8002864 <debug_println>
 8008fee:	f7f9 fc60 	bl	80028b2 <debug_flush>
 8008ff2:	e7f7      	b.n	8008fe4 <pinmap_cnf+0x10>
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }
 8008ff4:	24ff      	movs	r4, #255	; 0xff
 8008ff6:	e7f5      	b.n	8008fe4 <pinmap_cnf+0x10>
 8008ff8:	0800a77c 	.word	0x0800a77c

08008ffc <_ZN5codal3I2CC1ERNS_3PinES2_>:
namespace codal
{
/**
  * Constructor.
  */
I2C::I2C(Pin &sda, Pin &scl)
 8008ffc:	4b01      	ldr	r3, [pc, #4]	; (8009004 <_ZN5codal3I2CC1ERNS_3PinES2_+0x8>)
 8008ffe:	6003      	str	r3, [r0, #0]
{
}
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	0800a7dc 	.word	0x0800a7dc

08009008 <_ZN5codal14CodalComponent16periodicCallbackEv>:
        virtual void periodicCallback() {}
 8009008:	4770      	bx	lr

0800900a <_ZN5codal14CodalComponent12idleCallbackEv>:
        virtual void idleCallback() {}
 800900a:	4770      	bx	lr

0800900c <_GLOBAL__sub_I_bluepill>:
}
 800900c:	b508      	push	{r3, lr}
 800900e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009012:	2001      	movs	r0, #1
 8009014:	f7fd fe68 	bl	8006ce8 <_Z41__static_initialization_and_destruction_0ii>
 8009018:	bd08      	pop	{r3, pc}

0800901a <_GLOBAL__sub_I_serialPort>:
 800901a:	b508      	push	{r3, lr}
 800901c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009020:	2001      	movs	r0, #1
 8009022:	f7fd ff1f 	bl	8006e64 <_Z41__static_initialization_and_destruction_0ii>
 8009026:	bd08      	pop	{r3, pc}

08009028 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>:
{
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4604      	mov	r4, r0
 800902c:	460d      	mov	r5, r1
    target_disable_irq();
 800902e:	f7f7 fcbb 	bl	80009a8 <target_disable_irq>
    f->queue = queue;
 8009032:	6165      	str	r5, [r4, #20]
    if (*queue == NULL)
 8009034:	682a      	ldr	r2, [r5, #0]
 8009036:	b92a      	cbnz	r2, 8009044 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x1c>
        f->next = NULL;
 8009038:	2300      	movs	r3, #0
 800903a:	61a3      	str	r3, [r4, #24]
        f->prev = NULL;
 800903c:	61e3      	str	r3, [r4, #28]
        *queue = f;
 800903e:	602c      	str	r4, [r5, #0]
 8009040:	e006      	b.n	8009050 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x28>
            last = last->next;
 8009042:	461a      	mov	r2, r3
        while (last->next != NULL)
 8009044:	6993      	ldr	r3, [r2, #24]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1fb      	bne.n	8009042 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x1a>
        last->next = f;
 800904a:	6194      	str	r4, [r2, #24]
        f->prev = last;
 800904c:	61e2      	str	r2, [r4, #28]
        f->next = NULL;
 800904e:	61a3      	str	r3, [r4, #24]
    target_enable_irq();
 8009050:	f7f7 fca8 	bl	80009a4 <target_enable_irq>
}
 8009054:	bd38      	pop	{r3, r4, r5, pc}

08009056 <_ZN5codal13dequeue_fiberEPNS_5FiberE>:
    if (f->queue == NULL)
 8009056:	6943      	ldr	r3, [r0, #20]
 8009058:	b1b3      	cbz	r3, 8009088 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x32>
{
 800905a:	b510      	push	{r4, lr}
 800905c:	4604      	mov	r4, r0
    target_disable_irq();
 800905e:	f7f7 fca3 	bl	80009a8 <target_disable_irq>
    if (f->prev != NULL)
 8009062:	69e3      	ldr	r3, [r4, #28]
 8009064:	b163      	cbz	r3, 8009080 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x2a>
        f->prev->next = f->next;
 8009066:	69a2      	ldr	r2, [r4, #24]
 8009068:	619a      	str	r2, [r3, #24]
    if(f->next)
 800906a:	69a3      	ldr	r3, [r4, #24]
 800906c:	b10b      	cbz	r3, 8009072 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x1c>
        f->next->prev = f->prev;
 800906e:	69e2      	ldr	r2, [r4, #28]
 8009070:	61da      	str	r2, [r3, #28]
    f->next = NULL;
 8009072:	2300      	movs	r3, #0
 8009074:	61a3      	str	r3, [r4, #24]
    f->prev = NULL;
 8009076:	61e3      	str	r3, [r4, #28]
    f->queue = NULL;
 8009078:	6163      	str	r3, [r4, #20]
    target_enable_irq();
 800907a:	f7f7 fc93 	bl	80009a4 <target_enable_irq>
}
 800907e:	bd10      	pop	{r4, pc}
        *(f->queue) = f->next;
 8009080:	6963      	ldr	r3, [r4, #20]
 8009082:	69a2      	ldr	r2, [r4, #24]
 8009084:	601a      	str	r2, [r3, #0]
 8009086:	e7f0      	b.n	800906a <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x14>
 8009088:	4770      	bx	lr

0800908a <_ZN5codal12create_fiberEPFvvES1_>:
{
 800908a:	b538      	push	{r3, r4, r5, lr}
 800908c:	4604      	mov	r4, r0
 800908e:	460d      	mov	r5, r1
    if (!fiber_scheduler_running())
 8009090:	f7fe f874 	bl	800717c <_ZN5codal23fiber_scheduler_runningEv>
 8009094:	b130      	cbz	r0, 80090a4 <_ZN5codal12create_fiberEPFvvES1_+0x1a>
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, 0, 0);
 8009096:	2300      	movs	r3, #0
 8009098:	461a      	mov	r2, r3
 800909a:	4629      	mov	r1, r5
 800909c:	4620      	mov	r0, r4
 800909e:	f7fe f94f 	bl	8007340 <_Z14__create_fibermmmi>
}
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
 80090a4:	2000      	movs	r0, #0
 80090a6:	e7fc      	b.n	80090a2 <_ZN5codal12create_fiberEPFvvES1_+0x18>

080090a8 <_ZN5codal12create_fiberEPFvPvES0_S2_>:
{
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	4604      	mov	r4, r0
 80090ac:	460e      	mov	r6, r1
 80090ae:	4615      	mov	r5, r2
    if (!fiber_scheduler_running())
 80090b0:	f7fe f864 	bl	800717c <_ZN5codal23fiber_scheduler_runningEv>
 80090b4:	b130      	cbz	r0, 80090c4 <_ZN5codal12create_fiberEPFvPvES0_S2_+0x1c>
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 80090b6:	2301      	movs	r3, #1
 80090b8:	4632      	mov	r2, r6
 80090ba:	4629      	mov	r1, r5
 80090bc:	4620      	mov	r0, r4
 80090be:	f7fe f93f 	bl	8007340 <_Z14__create_fibermmmi>
}
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 80090c4:	2000      	movs	r0, #0
 80090c6:	e7fc      	b.n	80090c2 <_ZN5codal12create_fiberEPFvPvES0_S2_+0x1a>

080090c8 <_ZN5codal20fiber_wait_for_eventEtt>:
{
 80090c8:	b510      	push	{r4, lr}
    int ret = fiber_wake_on_event(id, value);
 80090ca:	f7fe f8f1 	bl	80072b0 <_ZN5codal19fiber_wake_on_eventEtt>
    if(ret == DEVICE_OK)
 80090ce:	4604      	mov	r4, r0
 80090d0:	b108      	cbz	r0, 80090d6 <_ZN5codal20fiber_wait_for_eventEtt+0xe>
}
 80090d2:	4620      	mov	r0, r4
 80090d4:	bd10      	pop	{r4, pc}
        schedule();
 80090d6:	f7fe f991 	bl	80073fc <_ZN5codal8scheduleEv>
    return ret;
 80090da:	e7fa      	b.n	80090d2 <_ZN5codal20fiber_wait_for_eventEtt+0xa>

080090dc <_ZN5codal16launch_new_fiberEPFvvES1_>:
{
 80090dc:	b510      	push	{r4, lr}
 80090de:	460c      	mov	r4, r1
    ep();
 80090e0:	4780      	blx	r0
    cp();
 80090e2:	47a0      	blx	r4
    release_fiber();
 80090e4:	f7fe fa82 	bl	80075ec <_ZN5codal13release_fiberEv>
}
 80090e8:	bd10      	pop	{r4, pc}

080090ea <_ZN5codal13release_fiberEPv>:
{
 80090ea:	b508      	push	{r3, lr}
    if (!fiber_scheduler_running())
 80090ec:	f7fe f846 	bl	800717c <_ZN5codal23fiber_scheduler_runningEv>
 80090f0:	b900      	cbnz	r0, 80090f4 <_ZN5codal13release_fiberEPv+0xa>
}
 80090f2:	bd08      	pop	{r3, pc}
    release_fiber();
 80090f4:	f7fe fa7a 	bl	80075ec <_ZN5codal13release_fiberEv>
 80090f8:	e7fb      	b.n	80090f2 <_ZN5codal13release_fiberEPv+0x8>

080090fa <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_>:
{
 80090fa:	b538      	push	{r3, r4, r5, lr}
 80090fc:	4603      	mov	r3, r0
 80090fe:	460d      	mov	r5, r1
 8009100:	4614      	mov	r4, r2
    ep(pm);
 8009102:	4610      	mov	r0, r2
 8009104:	4798      	blx	r3
    cp(pm);
 8009106:	4620      	mov	r0, r4
 8009108:	47a8      	blx	r5
    release_fiber(pm);
 800910a:	4620      	mov	r0, r4
 800910c:	f7ff ffed 	bl	80090ea <_ZN5codal13release_fiberEPv>
}
 8009110:	bd38      	pop	{r3, r4, r5, pc}

08009112 <_ZN5codal9idle_taskEv>:
  * The idle task, which is called when the runtime has no fibers that require execution.
  *
  * This function typically calls idle().
  */
void codal::idle_task()
{
 8009112:	b508      	push	{r3, lr}
    while(1)
    {
        idle();
 8009114:	f7fe f950 	bl	80073b8 <_ZN5codal4idleEv>
        schedule();
 8009118:	f7fe f970 	bl	80073fc <_ZN5codal8scheduleEv>
 800911c:	e7fa      	b.n	8009114 <_ZN5codal9idle_taskEv+0x2>

0800911e <_Z16device_malloc_injR14HeapDefinition>:
{
 800911e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 8009120:	f010 0f03 	tst.w	r0, #3
 8009124:	d109      	bne.n	800913a <_Z16device_malloc_injR14HeapDefinition+0x1c>
 8009126:	0887      	lsrs	r7, r0, #2
    if (size <= 0)
 8009128:	2800      	cmp	r0, #0
 800912a:	d046      	beq.n	80091ba <_Z16device_malloc_injR14HeapDefinition+0x9c>
 800912c:	460e      	mov	r6, r1
    blocksNeeded++;
 800912e:	1c7d      	adds	r5, r7, #1
    target_disable_irq();
 8009130:	f7f7 fc3a 	bl	80009a8 <target_disable_irq>
    block = heap.heap_start;
 8009134:	6834      	ldr	r4, [r6, #0]
    PROCESSOR_WORD_TYPE	blockSize = 0;
 8009136:	2200      	movs	r2, #0
 8009138:	e019      	b.n	800916e <_Z16device_malloc_injR14HeapDefinition+0x50>
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 800913a:	0887      	lsrs	r7, r0, #2
 800913c:	3701      	adds	r7, #1
 800913e:	e7f3      	b.n	8009128 <_Z16device_malloc_injR14HeapDefinition+0xa>
        blockSize = *block & ~DEVICE_HEAP_BLOCK_FREE;
 8009140:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
        next = block + blockSize;
 8009144:	eb04 0082 	add.w	r0, r4, r2, lsl #2
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 8009148:	6803      	ldr	r3, [r0, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	da0b      	bge.n	8009166 <_Z16device_malloc_injR14HeapDefinition+0x48>
            if (next >= heap.heap_end)
 800914e:	6871      	ldr	r1, [r6, #4]
 8009150:	4281      	cmp	r1, r0
 8009152:	d908      	bls.n	8009166 <_Z16device_malloc_injR14HeapDefinition+0x48>
            blockSize += (*next & ~DEVICE_HEAP_BLOCK_FREE);
 8009154:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009158:	441a      	add	r2, r3
            *block = blockSize | DEVICE_HEAP_BLOCK_FREE;
 800915a:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
 800915e:	6023      	str	r3, [r4, #0]
            next = block + blockSize;
 8009160:	eb04 0082 	add.w	r0, r4, r2, lsl #2
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 8009164:	e7f0      	b.n	8009148 <_Z16device_malloc_injR14HeapDefinition+0x2a>
        if (blockSize >= blocksNeeded)
 8009166:	42aa      	cmp	r2, r5
 8009168:	d20a      	bcs.n	8009180 <_Z16device_malloc_injR14HeapDefinition+0x62>
        block += blockSize;
 800916a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    while (block < heap.heap_end)
 800916e:	6873      	ldr	r3, [r6, #4]
 8009170:	42a3      	cmp	r3, r4
 8009172:	d905      	bls.n	8009180 <_Z16device_malloc_injR14HeapDefinition+0x62>
        if(!(*block & DEVICE_HEAP_BLOCK_FREE))
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	dbe2      	blt.n	8009140 <_Z16device_malloc_injR14HeapDefinition+0x22>
            block += *block;
 800917a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
            continue;
 800917e:	e7f6      	b.n	800916e <_Z16device_malloc_injR14HeapDefinition+0x50>
    if (block >= heap.heap_end)
 8009180:	6873      	ldr	r3, [r6, #4]
 8009182:	42a3      	cmp	r3, r4
 8009184:	d90e      	bls.n	80091a4 <_Z16device_malloc_injR14HeapDefinition+0x86>
    if (blockSize <= blocksNeeded+1 || block+blocksNeeded+1 >= heap.heap_end)
 8009186:	3702      	adds	r7, #2
 8009188:	4297      	cmp	r7, r2
 800918a:	d203      	bcs.n	8009194 <_Z16device_malloc_injR14HeapDefinition+0x76>
 800918c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8009190:	42bb      	cmp	r3, r7
 8009192:	d80b      	bhi.n	80091ac <_Z16device_malloc_injR14HeapDefinition+0x8e>
        *block &= ~DEVICE_HEAP_BLOCK_FREE;
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800919a:	6023      	str	r3, [r4, #0]
    target_enable_irq();
 800919c:	f7f7 fc02 	bl	80009a4 <target_enable_irq>
    return block+1;
 80091a0:	1d20      	adds	r0, r4, #4
}
 80091a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        target_enable_irq();
 80091a4:	f7f7 fbfe 	bl	80009a4 <target_enable_irq>
        return NULL;
 80091a8:	2000      	movs	r0, #0
 80091aa:	e7fa      	b.n	80091a2 <_Z16device_malloc_injR14HeapDefinition+0x84>
        *splitBlock = blockSize - blocksNeeded;
 80091ac:	1b53      	subs	r3, r2, r5
        *splitBlock |= DEVICE_HEAP_BLOCK_FREE;
 80091ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091b2:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
        *block = blocksNeeded;
 80091b6:	6025      	str	r5, [r4, #0]
 80091b8:	e7f0      	b.n	800919c <_Z16device_malloc_injR14HeapDefinition+0x7e>
        return NULL;
 80091ba:	2000      	movs	r0, #0
 80091bc:	e7f1      	b.n	80091a2 <_Z16device_malloc_injR14HeapDefinition+0x84>

080091be <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>:
  * @param handler A function pointer to call when the event is detected.
  *
  * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
  * to be tuned.
  */
Listener::Listener(uint16_t id, uint16_t value, void (*handler)(Event), uint16_t flags)
 80091be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c0:	4604      	mov	r4, r0
 80091c2:	460f      	mov	r7, r1
 80091c4:	4616      	mov	r6, r2
 80091c6:	461d      	mov	r5, r3
 80091c8:	3010      	adds	r0, #16
 80091ca:	f000 fbf0 	bl	80099ae <_ZN5codal5EventC1Ev>
{
	this->id = id;
 80091ce:	8027      	strh	r7, [r4, #0]
	this->value = value;
 80091d0:	8066      	strh	r6, [r4, #2]
	this->cb = handler;
 80091d2:	60a5      	str	r5, [r4, #8]
	this->cb_arg = NULL;
 80091d4:	2300      	movs	r3, #0
 80091d6:	60e3      	str	r3, [r4, #12]
    this->flags = flags;
 80091d8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 80091dc:	80a2      	strh	r2, [r4, #4]
	this->next = NULL;
 80091de:	61e3      	str	r3, [r4, #28]
    this->evt_queue = NULL;
 80091e0:	61a3      	str	r3, [r4, #24]
}
 80091e2:	4620      	mov	r0, r4
 80091e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091e6 <_ZN5codal8ListenerD1Ev>:
}

/**
  * Destructor. Ensures all resources used by this listener are freed.
  */
Listener::~Listener()
 80091e6:	b510      	push	{r4, lr}
 80091e8:	4604      	mov	r4, r0
{
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 80091ea:	8883      	ldrh	r3, [r0, #4]
 80091ec:	f013 0f02 	tst.w	r3, #2
 80091f0:	d101      	bne.n	80091f6 <_ZN5codal8ListenerD1Ev+0x10>
        delete cb_method;
}
 80091f2:	4620      	mov	r0, r4
 80091f4:	bd10      	pop	{r4, pc}
        delete cb_method;
 80091f6:	6880      	ldr	r0, [r0, #8]
 80091f8:	f7f9 fcde 	bl	8002bb8 <_ZdlPv>
 80091fc:	e7f9      	b.n	80091f2 <_ZN5codal8ListenerD1Ev+0xc>

080091fe <_ZN5codal8Listener5queueENS_5EventE>:
  * Queues and event up to be processed.
  *
  * @param e The event to queue
  */
void Listener::queue(Event e)
{
 80091fe:	b570      	push	{r4, r5, r6, lr}
 8009200:	b086      	sub	sp, #24
 8009202:	466b      	mov	r3, sp
 8009204:	e883 0006 	stmia.w	r3, {r1, r2}
    int queueDepth;

    EventQueueItem *p = evt_queue;
 8009208:	6984      	ldr	r4, [r0, #24]

    if (evt_queue == NULL)
 800920a:	b12c      	cbz	r4, 8009218 <_ZN5codal8Listener5queueENS_5EventE+0x1a>
        evt_queue = new EventQueueItem(e);
    else
    {
        queueDepth = 1;
 800920c:	2201      	movs	r2, #1

        while (p->next != NULL)
 800920e:	68a3      	ldr	r3, [r4, #8]
 8009210:	b193      	cbz	r3, 8009238 <_ZN5codal8Listener5queueENS_5EventE+0x3a>
        {
            p = p->next;
            queueDepth++;
 8009212:	3201      	adds	r2, #1
            p = p->next;
 8009214:	461c      	mov	r4, r3
        while (p->next != NULL)
 8009216:	e7fa      	b.n	800920e <_ZN5codal8Listener5queueENS_5EventE+0x10>
 8009218:	4605      	mov	r5, r0
        evt_queue = new EventQueueItem(e);
 800921a:	ac02      	add	r4, sp, #8
 800921c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009220:	e884 0003 	stmia.w	r4, {r0, r1}
 8009224:	200c      	movs	r0, #12
 8009226:	f7f9 fcc3 	bl	8002bb0 <_Znwj>
 800922a:	4606      	mov	r6, r0
 800922c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8009230:	f000 fbe4 	bl	80099fc <_ZN5codal14EventQueueItemC1ENS_5EventE>
 8009234:	61ae      	str	r6, [r5, #24]
 8009236:	e001      	b.n	800923c <_ZN5codal8Listener5queueENS_5EventE+0x3e>
        }

        if (queueDepth < MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 8009238:	2a09      	cmp	r2, #9
 800923a:	dd01      	ble.n	8009240 <_ZN5codal8Listener5queueENS_5EventE+0x42>
            p->next = new EventQueueItem(e);
    }
}
 800923c:	b006      	add	sp, #24
 800923e:	bd70      	pop	{r4, r5, r6, pc}
            p->next = new EventQueueItem(e);
 8009240:	ad04      	add	r5, sp, #16
 8009242:	466b      	mov	r3, sp
 8009244:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009248:	e885 0003 	stmia.w	r5, {r0, r1}
 800924c:	200c      	movs	r0, #12
 800924e:	f7f9 fcaf 	bl	8002bb0 <_Znwj>
 8009252:	4606      	mov	r6, r0
 8009254:	e895 0006 	ldmia.w	r5, {r1, r2}
 8009258:	f000 fbd0 	bl	80099fc <_ZN5codal14EventQueueItemC1ENS_5EventE>
 800925c:	60a6      	str	r6, [r4, #8]
}
 800925e:	e7ed      	b.n	800923c <_ZN5codal8Listener5queueENS_5EventE+0x3e>

08009260 <_ZN5codal6Serial6lockRxEv>:
    status |= CODAL_SERIAL_RX_IN_USE;
 8009260:	88c3      	ldrh	r3, [r0, #6]
 8009262:	f043 0301 	orr.w	r3, r3, #1
 8009266:	80c3      	strh	r3, [r0, #6]
}
 8009268:	4770      	bx	lr

0800926a <_ZN5codal6Serial8unlockRxEv>:
    status &= ~CODAL_SERIAL_RX_IN_USE;
 800926a:	88c3      	ldrh	r3, [r0, #6]
 800926c:	f023 0301 	bic.w	r3, r3, #1
 8009270:	80c3      	strh	r3, [r0, #6]
}
 8009272:	4770      	bx	lr

08009274 <_ZN5codal6Serial12initialiseRxEv>:
{
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	4604      	mov	r4, r0
    if((status & CODAL_SERIAL_RX_BUFF_INIT))
 8009278:	88c3      	ldrh	r3, [r0, #6]
 800927a:	f013 0f04 	tst.w	r3, #4
 800927e:	d116      	bne.n	80092ae <_ZN5codal6Serial12initialiseRxEv+0x3a>
    status &= ~CODAL_SERIAL_RX_BUFF_INIT;
 8009280:	88e5      	ldrh	r5, [r4, #6]
 8009282:	f025 0504 	bic.w	r5, r5, #4
 8009286:	b2ad      	uxth	r5, r5
 8009288:	80e5      	strh	r5, [r4, #6]
    if((this->rxBuff = (uint8_t *)malloc(rxBuffSize)) == NULL)
 800928a:	7f20      	ldrb	r0, [r4, #28]
 800928c:	f7fe fa4c 	bl	8007728 <device_malloc>
 8009290:	61a0      	str	r0, [r4, #24]
 8009292:	b1a0      	cbz	r0, 80092be <_ZN5codal6Serial12initialiseRxEv+0x4a>
    this->rxBuffHead = 0;
 8009294:	2600      	movs	r6, #0
 8009296:	83e6      	strh	r6, [r4, #30]
    this->rxBuffTail = 0;
 8009298:	8426      	strh	r6, [r4, #32]
    status |= CODAL_SERIAL_RX_BUFF_INIT;
 800929a:	f045 0504 	orr.w	r5, r5, #4
 800929e:	80e5      	strh	r5, [r4, #6]
    enableInterrupt(RxInterrupt);
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	4631      	mov	r1, r6
 80092a6:	4620      	mov	r0, r4
 80092a8:	4798      	blx	r3
    return DEVICE_OK;
 80092aa:	4630      	mov	r0, r6
}
 80092ac:	bd70      	pop	{r4, r5, r6, pc}
        disableInterrupt(RxInterrupt);
 80092ae:	6803      	ldr	r3, [r0, #0]
 80092b0:	699b      	ldr	r3, [r3, #24]
 80092b2:	2100      	movs	r1, #0
 80092b4:	4798      	blx	r3
        free(this->rxBuff);
 80092b6:	69a0      	ldr	r0, [r4, #24]
 80092b8:	f7fe fa60 	bl	800777c <device_free>
 80092bc:	e7e0      	b.n	8009280 <_ZN5codal6Serial12initialiseRxEv+0xc>
        return DEVICE_NO_RESOURCES;
 80092be:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 80092c2:	e7f3      	b.n	80092ac <_ZN5codal6Serial12initialiseRxEv+0x38>

080092c4 <_ZN5codal6Serial12circularCopyEPhhS1_tt>:
{
 80092c4:	b470      	push	{r4, r5, r6}
 80092c6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 80092ca:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    int toBuffIndex = 0;
 80092ce:	2500      	movs	r5, #0
    while(tailPosition != headPosition)
 80092d0:	42b0      	cmp	r0, r6
 80092d2:	d009      	beq.n	80092e8 <_ZN5codal6Serial12circularCopyEPhhS1_tt+0x24>
        linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 80092d4:	5c0c      	ldrb	r4, [r1, r0]
 80092d6:	555c      	strb	r4, [r3, r5]
        tailPosition = (tailPosition + 1) % circularBuffSize;
 80092d8:	3001      	adds	r0, #1
 80092da:	fb90 f4f2 	sdiv	r4, r0, r2
 80092de:	fb02 0014 	mls	r0, r2, r4, r0
 80092e2:	b280      	uxth	r0, r0
        linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 80092e4:	3501      	adds	r5, #1
    while(tailPosition != headPosition)
 80092e6:	e7f3      	b.n	80092d0 <_ZN5codal6Serial12circularCopyEPhhS1_tt+0xc>
}
 80092e8:	bc70      	pop	{r4, r5, r6}
 80092ea:	4770      	bx	lr

080092ec <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>:
    if(mode == SYNC_SPINWAIT)
 80092ec:	2a01      	cmp	r2, #1
 80092ee:	d00f      	beq.n	8009310 <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x24>
{
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4614      	mov	r4, r2
 80092f4:	4605      	mov	r5, r0
    this->delimeters = delimeters;
 80092f6:	3010      	adds	r0, #16
 80092f8:	f000 fbf3 	bl	8009ae2 <_ZN5codal13ManagedStringaSERKS0_>
    if(mode == SYNC_SLEEP)
 80092fc:	2c02      	cmp	r4, #2
 80092fe:	d001      	beq.n	8009304 <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x18>
    return DEVICE_OK;
 8009300:	2000      	movs	r0, #0
}
 8009302:	bd38      	pop	{r3, r4, r5, pc}
        fiber_wait_for_event(this->id, CODAL_SERIAL_EVT_DELIM_MATCH);
 8009304:	2101      	movs	r1, #1
 8009306:	88a8      	ldrh	r0, [r5, #4]
 8009308:	f7ff fede 	bl	80090c8 <_ZN5codal20fiber_wait_for_eventEtt>
    return DEVICE_OK;
 800930c:	2000      	movs	r0, #0
 800930e:	e7f8      	b.n	8009302 <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x16>
        return DEVICE_INVALID_PARAMETER;
 8009310:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 8009314:	4770      	bx	lr

08009316 <_ZN5codal6Serial7rxInUseEv>:
    return (status & CODAL_SERIAL_RX_IN_USE);
 8009316:	88c0      	ldrh	r0, [r0, #6]
}
 8009318:	f000 0001 	and.w	r0, r0, #1
 800931c:	4770      	bx	lr

0800931e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE>:
{
 800931e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009322:	b089      	sub	sp, #36	; 0x24
 8009324:	af02      	add	r7, sp, #8
 8009326:	60b8      	str	r0, [r7, #8]
 8009328:	4688      	mov	r8, r1
 800932a:	4615      	mov	r5, r2
 800932c:	607b      	str	r3, [r7, #4]
    if(rxInUse())
 800932e:	4608      	mov	r0, r1
 8009330:	f7ff fff1 	bl	8009316 <_ZN5codal6Serial7rxInUseEv>
 8009334:	60f8      	str	r0, [r7, #12]
 8009336:	b990      	cbnz	r0, 800935e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x40>
    if(!(status & CODAL_SERIAL_RX_BUFF_INIT))
 8009338:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800933c:	f013 0f04 	tst.w	r3, #4
 8009340:	d104      	bne.n	800934c <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x2e>
        int result = initialiseRx();
 8009342:	4640      	mov	r0, r8
 8009344:	f7ff ff96 	bl	8009274 <_ZN5codal6Serial12initialiseRxEv>
        if(result != DEVICE_OK)
 8009348:	4601      	mov	r1, r0
 800934a:	b960      	cbnz	r0, 8009366 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x48>
    lockRx();
 800934c:	4640      	mov	r0, r8
 800934e:	f7ff ff87 	bl	8009260 <_ZN5codal6Serial6lockRxEv>
    int localTail = rxBuffTail;
 8009352:	f8b8 a020 	ldrh.w	sl, [r8, #32]
 8009356:	4656      	mov	r6, sl
    int foundIndex = -1;
 8009358:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800935c:	e063      	b.n	8009426 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x108>
        return ManagedString();
 800935e:	68b8      	ldr	r0, [r7, #8]
 8009360:	f000 fbb9 	bl	8009ad6 <_ZN5codal13ManagedStringC1Ev>
 8009364:	e045      	b.n	80093f2 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>
            return result;
 8009366:	68b8      	ldr	r0, [r7, #8]
 8009368:	f000 fb83 	bl	8009a72 <_ZN5codal13ManagedStringC1Ei>
 800936c:	e041      	b.n	80093f2 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>
    if(mode == SYNC_SPINWAIT)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d07b      	beq.n	800946c <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x14e>
    if(mode == SYNC_SLEEP && foundIndex == -1)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2b02      	cmp	r3, #2
 8009378:	f000 8086 	beq.w	8009488 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x16a>
    if(foundIndex >= 0)
 800937c:	f1b9 0f00 	cmp.w	r9, #0
 8009380:	f2c0 80ac 	blt.w	80094dc <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1be>
        return ManagedString((char *)localBuff, localBuffSize);
 8009384:	466e      	mov	r6, sp
        int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 8009386:	45d1      	cmp	r9, sl
 8009388:	f280 80a5 	bge.w	80094d6 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1b8>
 800938c:	f898 401c 	ldrb.w	r4, [r8, #28]
 8009390:	eba4 040a 	sub.w	r4, r4, sl
 8009394:	444c      	add	r4, r9
        uint8_t localBuff[localBuffSize + 1];
 8009396:	f104 0308 	add.w	r3, r4, #8
 800939a:	f023 0307 	bic.w	r3, r3, #7
 800939e:	ebad 0d03 	sub.w	sp, sp, r3
 80093a2:	ad02      	add	r5, sp, #8
 80093a4:	1c62      	adds	r2, r4, #1
 80093a6:	2100      	movs	r1, #0
 80093a8:	4628      	mov	r0, r5
 80093aa:	f7f9 f909 	bl	80025c0 <memset>
        circularCopy(rxBuff, rxBuffSize, localBuff, preservedTail, foundIndex);
 80093ae:	f898 201c 	ldrb.w	r2, [r8, #28]
 80093b2:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80093b6:	fa1f f389 	uxth.w	r3, r9
 80093ba:	9301      	str	r3, [sp, #4]
 80093bc:	f8cd a000 	str.w	sl, [sp]
 80093c0:	462b      	mov	r3, r5
 80093c2:	4640      	mov	r0, r8
 80093c4:	f7ff ff7e 	bl	80092c4 <_ZN5codal6Serial12circularCopyEPhhS1_tt>
        rxBuffTail = (rxBuffTail + localBuffSize + 1) % rxBuffSize;
 80093c8:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 80093cc:	4423      	add	r3, r4
 80093ce:	3301      	adds	r3, #1
 80093d0:	f898 101c 	ldrb.w	r1, [r8, #28]
 80093d4:	fb93 f2f1 	sdiv	r2, r3, r1
 80093d8:	fb01 3312 	mls	r3, r1, r2, r3
 80093dc:	f8a8 3020 	strh.w	r3, [r8, #32]
        unlockRx();
 80093e0:	4640      	mov	r0, r8
 80093e2:	f7ff ff42 	bl	800926a <_ZN5codal6Serial8unlockRxEv>
        return ManagedString((char *)localBuff, localBuffSize);
 80093e6:	b222      	sxth	r2, r4
 80093e8:	4629      	mov	r1, r5
 80093ea:	68b8      	ldr	r0, [r7, #8]
 80093ec:	f000 fb53 	bl	8009a96 <_ZN5codal13ManagedStringC1EPKcs>
 80093f0:	46b5      	mov	sp, r6
}
 80093f2:	68b8      	ldr	r0, [r7, #8]
 80093f4:	371c      	adds	r7, #28
 80093f6:	46bd      	mov	sp, r7
 80093f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 80093fc:	3401      	adds	r4, #1
          * display.scroll(s.length()) // scrolls "4"
          * @endcode
          */
        int16_t length() const
        {
            return ptr->len;
 80093fe:	682b      	ldr	r3, [r5, #0]
 8009400:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009404:	42a3      	cmp	r3, r4
 8009406:	dd07      	ble.n	8009418 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xfa>
            if(delimeters.charAt(delimeterIterator) == c)
 8009408:	b221      	sxth	r1, r4
 800940a:	4628      	mov	r0, r5
 800940c:	f000 fb78 	bl	8009b00 <_ZN5codal13ManagedString6charAtEs>
 8009410:	4558      	cmp	r0, fp
 8009412:	d1f3      	bne.n	80093fc <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
                foundIndex = localTail;
 8009414:	46b1      	mov	r9, r6
 8009416:	e7f1      	b.n	80093fc <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
        localTail = (localTail + 1) % rxBuffSize;
 8009418:	3601      	adds	r6, #1
 800941a:	f898 301c 	ldrb.w	r3, [r8, #28]
 800941e:	fb96 f2f3 	sdiv	r2, r6, r3
 8009422:	fb03 6612 	mls	r6, r3, r2, r6
    while(localTail != rxBuffHead && foundIndex  == -1)
 8009426:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 800942a:	b29b      	uxth	r3, r3
 800942c:	42b3      	cmp	r3, r6
 800942e:	d09e      	beq.n	800936e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x50>
 8009430:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8009434:	d19b      	bne.n	800936e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x50>
        char c = rxBuff[localTail];
 8009436:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800943a:	f813 b006 	ldrb.w	fp, [r3, r6]
        for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800943e:	68fc      	ldr	r4, [r7, #12]
 8009440:	e7dd      	b.n	80093fe <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xe0>
            for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 8009442:	3401      	adds	r4, #1
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800944a:	42a3      	cmp	r3, r4
 800944c:	dd07      	ble.n	800945e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x140>
                if(delimeters.charAt(delimeterIterator) == c)
 800944e:	b221      	sxth	r1, r4
 8009450:	4628      	mov	r0, r5
 8009452:	f000 fb55 	bl	8009b00 <_ZN5codal13ManagedString6charAtEs>
 8009456:	4558      	cmp	r0, fp
 8009458:	d1f3      	bne.n	8009442 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x124>
                    foundIndex = localTail;
 800945a:	46b1      	mov	r9, r6
 800945c:	e7f1      	b.n	8009442 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x124>
            localTail = (localTail + 1) % rxBuffSize;
 800945e:	3601      	adds	r6, #1
 8009460:	f898 301c 	ldrb.w	r3, [r8, #28]
 8009464:	fb96 f2f3 	sdiv	r2, r6, r3
 8009468:	fb03 6612 	mls	r6, r3, r2, r6
        while(foundIndex == -1)
 800946c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8009470:	d180      	bne.n	8009374 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x56>
            while(localTail == rxBuffHead);
 8009472:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 8009476:	b29b      	uxth	r3, r3
 8009478:	42b3      	cmp	r3, r6
 800947a:	d0fa      	beq.n	8009472 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x154>
            char c = rxBuff[localTail];
 800947c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009480:	f813 b006 	ldrb.w	fp, [r3, r6]
            for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 8009484:	68fc      	ldr	r4, [r7, #12]
 8009486:	e7dd      	b.n	8009444 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x126>
    if(mode == SYNC_SLEEP && foundIndex == -1)
 8009488:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800948c:	f47f af76 	bne.w	800937c <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x5e>
        eventOn(delimeters, mode);
 8009490:	4629      	mov	r1, r5
 8009492:	f107 0010 	add.w	r0, r7, #16
 8009496:	f000 fb16 	bl	8009ac6 <_ZN5codal13ManagedStringC1ERKS0_>
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	f107 0110 	add.w	r1, r7, #16
 80094a0:	4640      	mov	r0, r8
 80094a2:	f7ff ff23 	bl	80092ec <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>
 80094a6:	f107 0010 	add.w	r0, r7, #16
 80094aa:	f000 fab8 	bl	8009a1e <_ZN5codal13ManagedStringD1Ev>
        foundIndex = rxBuffHead - 1;
 80094ae:	f8b8 901e 	ldrh.w	r9, [r8, #30]
 80094b2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
        this->delimeters = ManagedString();
 80094b6:	f108 0410 	add.w	r4, r8, #16
 80094ba:	f107 0014 	add.w	r0, r7, #20
 80094be:	f000 fb0a 	bl	8009ad6 <_ZN5codal13ManagedStringC1Ev>
 80094c2:	f107 0114 	add.w	r1, r7, #20
 80094c6:	4620      	mov	r0, r4
 80094c8:	f000 fb0b 	bl	8009ae2 <_ZN5codal13ManagedStringaSERKS0_>
 80094cc:	f107 0014 	add.w	r0, r7, #20
 80094d0:	f000 faa5 	bl	8009a1e <_ZN5codal13ManagedStringD1Ev>
 80094d4:	e752      	b.n	800937c <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x5e>
        int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 80094d6:	eba9 040a 	sub.w	r4, r9, sl
 80094da:	e75c      	b.n	8009396 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x78>
    unlockRx();
 80094dc:	4640      	mov	r0, r8
 80094de:	f7ff fec4 	bl	800926a <_ZN5codal6Serial8unlockRxEv>
    return ManagedString();
 80094e2:	68b8      	ldr	r0, [r7, #8]
 80094e4:	f000 faf7 	bl	8009ad6 <_ZN5codal13ManagedStringC1Ev>
 80094e8:	e783      	b.n	80093f2 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>

080094ea <_ZN5codal5Timer17disableInterruptsEv>:
{
 80094ea:	b508      	push	{r3, lr}
    target_disable_irq();
 80094ec:	f7f7 fa5c 	bl	80009a8 <target_disable_irq>
}
 80094f0:	2000      	movs	r0, #0
 80094f2:	bd08      	pop	{r3, pc}

080094f4 <_ZN5codal5Timer16enableInterruptsEv>:
{
 80094f4:	b508      	push	{r3, lr}
    target_enable_irq();
 80094f6:	f7f7 fa55 	bl	80009a4 <target_enable_irq>
}
 80094fa:	2000      	movs	r0, #0
 80094fc:	bd08      	pop	{r3, pc}

080094fe <_ZN5codal5Timer13getTimerEventEv>:
{
 80094fe:	b410      	push	{r4}
    for (int i=0; i<eventListSize; i++)
 8009500:	2300      	movs	r3, #0
 8009502:	6982      	ldr	r2, [r0, #24]
 8009504:	429a      	cmp	r2, r3
 8009506:	dd08      	ble.n	800951a <_ZN5codal5Timer13getTimerEventEv+0x1c>
        if (timerEventList[i].id == 0)
 8009508:	6901      	ldr	r1, [r0, #16]
 800950a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800950e:	00a2      	lsls	r2, r4, #2
 8009510:	188c      	adds	r4, r1, r2
 8009512:	5a8a      	ldrh	r2, [r1, r2]
 8009514:	b112      	cbz	r2, 800951c <_ZN5codal5Timer13getTimerEventEv+0x1e>
    for (int i=0; i<eventListSize; i++)
 8009516:	3301      	adds	r3, #1
 8009518:	e7f3      	b.n	8009502 <_ZN5codal5Timer13getTimerEventEv+0x4>
    return NULL;
 800951a:	2400      	movs	r4, #0
}
 800951c:	4620      	mov	r0, r4
 800951e:	bc10      	pop	{r4}
 8009520:	4770      	bx	lr

08009522 <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE>:
    event->id = 0;
 8009522:	2300      	movs	r3, #0
 8009524:	800b      	strh	r3, [r1, #0]
    if (nextTimerEvent == event)
 8009526:	6943      	ldr	r3, [r0, #20]
 8009528:	428b      	cmp	r3, r1
 800952a:	d000      	beq.n	800952e <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE+0xc>
}
 800952c:	4770      	bx	lr
        nextTimerEvent = NULL;
 800952e:	2300      	movs	r3, #0
 8009530:	6143      	str	r3, [r0, #20]
}
 8009532:	e7fb      	b.n	800952c <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE+0xa>

08009534 <_ZN5codal5Timer7getTimeEv>:
{
 8009534:	b510      	push	{r4, lr}
 8009536:	4604      	mov	r4, r0
    syncRequest();
 8009538:	6803      	ldr	r3, [r0, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	4798      	blx	r3
}
 800953e:	6860      	ldr	r0, [r4, #4]
 8009540:	bd10      	pop	{r4, pc}

08009542 <_ZN5codal5Timer9getTimeUsEv>:
{
 8009542:	b510      	push	{r4, lr}
 8009544:	4604      	mov	r4, r0
    syncRequest();
 8009546:	6803      	ldr	r3, [r0, #0]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	4798      	blx	r3
}
 800954c:	68a0      	ldr	r0, [r4, #8]
 800954e:	bd10      	pop	{r4, pc}

08009550 <_ZN5codal5Timer8setEventEmttb>:
{
 8009550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009554:	4604      	mov	r4, r0
 8009556:	460e      	mov	r6, r1
 8009558:	4690      	mov	r8, r2
 800955a:	461f      	mov	r7, r3
 800955c:	f89d 9020 	ldrb.w	r9, [sp, #32]
    TimerEvent *evt = getTimerEvent();
 8009560:	f7ff ffcd 	bl	80094fe <_ZN5codal5Timer13getTimerEventEv>
    if (evt == NULL)
 8009564:	b330      	cbz	r0, 80095b4 <_ZN5codal5Timer8setEventEmttb+0x64>
 8009566:	4605      	mov	r5, r0
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 8009568:	4620      	mov	r0, r4
 800956a:	f7ff ffea 	bl	8009542 <_ZN5codal5Timer9getTimeUsEv>
 800956e:	4430      	add	r0, r6
 8009570:	f1b9 0f00 	cmp.w	r9, #0
 8009574:	d01c      	beq.n	80095b0 <_ZN5codal5Timer8setEventEmttb+0x60>
 8009576:	4633      	mov	r3, r6
        CODAL_TIMESTAMP period;
        CODAL_TIMESTAMP timestamp;

        void set(CODAL_TIMESTAMP timestamp, CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
        {
            this->timestamp = timestamp;
 8009578:	60a8      	str	r0, [r5, #8]
            this->period = period;
 800957a:	606b      	str	r3, [r5, #4]
            this->id = id;
 800957c:	f8a5 8000 	strh.w	r8, [r5]
            this->value = value;
 8009580:	806f      	strh	r7, [r5, #2]
    disableInterrupts();
 8009582:	6823      	ldr	r3, [r4, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	4620      	mov	r0, r4
 8009588:	4798      	blx	r3
    if (nextTimerEvent == NULL || evt->timestamp < nextTimerEvent->timestamp)
 800958a:	6963      	ldr	r3, [r4, #20]
 800958c:	b11b      	cbz	r3, 8009596 <_ZN5codal5Timer8setEventEmttb+0x46>
 800958e:	68aa      	ldr	r2, [r5, #8]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	429a      	cmp	r2, r3
 8009594:	d205      	bcs.n	80095a2 <_ZN5codal5Timer8setEventEmttb+0x52>
        nextTimerEvent = evt;
 8009596:	6165      	str	r5, [r4, #20]
        triggerIn(period);
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4631      	mov	r1, r6
 800959e:	4620      	mov	r0, r4
 80095a0:	4798      	blx	r3
    enableInterrupts();
 80095a2:	6823      	ldr	r3, [r4, #0]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	4620      	mov	r0, r4
 80095a8:	4798      	blx	r3
    return DEVICE_OK;
 80095aa:	2000      	movs	r0, #0
}
 80095ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 80095b0:	2300      	movs	r3, #0
 80095b2:	e7e1      	b.n	8009578 <_ZN5codal5Timer8setEventEmttb+0x28>
        return DEVICE_NO_RESOURCES;
 80095b4:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 80095b8:	e7f8      	b.n	80095ac <_ZN5codal5Timer8setEventEmttb+0x5c>

080095ba <_ZN5codal5Timer12eventEveryUsEmtt>:
{
 80095ba:	b510      	push	{r4, lr}
 80095bc:	b082      	sub	sp, #8
    return setEvent(period, id, value, true);
 80095be:	2401      	movs	r4, #1
 80095c0:	9400      	str	r4, [sp, #0]
 80095c2:	f7ff ffc5 	bl	8009550 <_ZN5codal5Timer8setEventEmttb>
}
 80095c6:	b002      	add	sp, #8
 80095c8:	bd10      	pop	{r4, pc}

080095ca <_ZN5codal5Timer4syncEm>:
    currentTimeUs += t;
 80095ca:	6882      	ldr	r2, [r0, #8]
 80095cc:	440a      	add	r2, r1
 80095ce:	6082      	str	r2, [r0, #8]
    overflow += t;
 80095d0:	68c3      	ldr	r3, [r0, #12]
 80095d2:	440b      	add	r3, r1
 80095d4:	60c3      	str	r3, [r0, #12]
    while(overflow >= 1000)
 80095d6:	68c3      	ldr	r3, [r0, #12]
 80095d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095dc:	d306      	bcc.n	80095ec <_ZN5codal5Timer4syncEm+0x22>
        overflow -= 1000;
 80095de:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80095e2:	60c3      	str	r3, [r0, #12]
        currentTime += 1;
 80095e4:	6843      	ldr	r3, [r0, #4]
 80095e6:	3301      	adds	r3, #1
 80095e8:	6043      	str	r3, [r0, #4]
    while(overflow >= 1000)
 80095ea:	e7f4      	b.n	80095d6 <_ZN5codal5Timer4syncEm+0xc>
}
 80095ec:	4770      	bx	lr

080095ee <_ZN5codal5Timer7triggerEv>:
{
 80095ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095f0:	b085      	sub	sp, #20
 80095f2:	4605      	mov	r5, r0
    syncRequest();
 80095f4:	6803      	ldr	r3, [r0, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	4798      	blx	r3
        TimerEvent *e = timerEventList;
 80095fa:	692c      	ldr	r4, [r5, #16]
        for (int i=0; i<eventListSize; i++)
 80095fc:	2600      	movs	r6, #0
        eventsFired = 0;
 80095fe:	4637      	mov	r7, r6
 8009600:	e005      	b.n	800960e <_ZN5codal5Timer7triggerEv+0x20>
                    e->timestamp += e->period;
 8009602:	68a3      	ldr	r3, [r4, #8]
 8009604:	4413      	add	r3, r2
 8009606:	60a3      	str	r3, [r4, #8]
                eventsFired++;
 8009608:	3701      	adds	r7, #1
            e++;
 800960a:	340c      	adds	r4, #12
        for (int i=0; i<eventListSize; i++)
 800960c:	3601      	adds	r6, #1
 800960e:	69ab      	ldr	r3, [r5, #24]
 8009610:	42b3      	cmp	r3, r6
 8009612:	dd15      	ble.n	8009640 <_ZN5codal5Timer7triggerEv+0x52>
            if (e->id != 0 && currentTimeUs >= e->timestamp)
 8009614:	8821      	ldrh	r1, [r4, #0]
 8009616:	2900      	cmp	r1, #0
 8009618:	d0f7      	beq.n	800960a <_ZN5codal5Timer7triggerEv+0x1c>
 800961a:	68aa      	ldr	r2, [r5, #8]
 800961c:	68a3      	ldr	r3, [r4, #8]
 800961e:	429a      	cmp	r2, r3
 8009620:	d3f3      	bcc.n	800960a <_ZN5codal5Timer7triggerEv+0x1c>
                Event evt(e->id, e->value, currentTime);
 8009622:	8862      	ldrh	r2, [r4, #2]
 8009624:	2301      	movs	r3, #1
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	686b      	ldr	r3, [r5, #4]
 800962a:	a802      	add	r0, sp, #8
 800962c:	f000 f9d8 	bl	80099e0 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>
                if (e->period == 0)
 8009630:	6862      	ldr	r2, [r4, #4]
 8009632:	2a00      	cmp	r2, #0
 8009634:	d1e5      	bne.n	8009602 <_ZN5codal5Timer7triggerEv+0x14>
                    releaseTimerEvent(e);
 8009636:	4621      	mov	r1, r4
 8009638:	4628      	mov	r0, r5
 800963a:	f7ff ff72 	bl	8009522 <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE>
 800963e:	e7e3      	b.n	8009608 <_ZN5codal5Timer7triggerEv+0x1a>
    } while (eventsFired);
 8009640:	2f00      	cmp	r7, #0
 8009642:	d1da      	bne.n	80095fa <_ZN5codal5Timer7triggerEv+0xc>
    nextTimerEvent = NULL;
 8009644:	2200      	movs	r2, #0
 8009646:	616a      	str	r2, [r5, #20]
    TimerEvent *e = timerEventList;
 8009648:	692a      	ldr	r2, [r5, #16]
 800964a:	e002      	b.n	8009652 <_ZN5codal5Timer7triggerEv+0x64>
            nextTimerEvent = e;
 800964c:	616a      	str	r2, [r5, #20]
        e++;
 800964e:	320c      	adds	r2, #12
    for (int i=0; i<eventListSize; i++)
 8009650:	3701      	adds	r7, #1
 8009652:	42bb      	cmp	r3, r7
 8009654:	dd0a      	ble.n	800966c <_ZN5codal5Timer7triggerEv+0x7e>
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
 8009656:	8811      	ldrh	r1, [r2, #0]
 8009658:	2900      	cmp	r1, #0
 800965a:	d0f8      	beq.n	800964e <_ZN5codal5Timer7triggerEv+0x60>
 800965c:	6969      	ldr	r1, [r5, #20]
 800965e:	2900      	cmp	r1, #0
 8009660:	d0f4      	beq.n	800964c <_ZN5codal5Timer7triggerEv+0x5e>
 8009662:	6890      	ldr	r0, [r2, #8]
 8009664:	6889      	ldr	r1, [r1, #8]
 8009666:	4288      	cmp	r0, r1
 8009668:	d2f1      	bcs.n	800964e <_ZN5codal5Timer7triggerEv+0x60>
 800966a:	e7ef      	b.n	800964c <_ZN5codal5Timer7triggerEv+0x5e>
    if (nextTimerEvent) {
 800966c:	696b      	ldr	r3, [r5, #20]
 800966e:	b143      	cbz	r3, 8009682 <_ZN5codal5Timer7triggerEv+0x94>
        if (currentTimeUs < nextTimerEvent->timestamp)
 8009670:	68aa      	ldr	r2, [r5, #8]
 8009672:	6899      	ldr	r1, [r3, #8]
 8009674:	428a      	cmp	r2, r1
 8009676:	d306      	bcc.n	8009686 <_ZN5codal5Timer7triggerEv+0x98>
            triggerIn(1);
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2101      	movs	r1, #1
 800967e:	4628      	mov	r0, r5
 8009680:	4798      	blx	r3
}
 8009682:	b005      	add	sp, #20
 8009684:	bdf0      	pop	{r4, r5, r6, r7, pc}
            triggerIn(nextTimerEvent->timestamp - currentTimeUs);
 8009686:	682b      	ldr	r3, [r5, #0]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	1a89      	subs	r1, r1, r2
 800968c:	4628      	mov	r0, r5
 800968e:	4798      	blx	r3
 8009690:	e7f7      	b.n	8009682 <_ZN5codal5Timer7triggerEv+0x94>

08009692 <_ZN5codal5TimerD1Ev>:
}
 8009692:	4770      	bx	lr

08009694 <_ZN5codal10MessageBus9elementAtEi>:
    Listener *l = listeners;
 8009694:	6940      	ldr	r0, [r0, #20]
    while (n > 0)
 8009696:	2900      	cmp	r1, #0
 8009698:	dd03      	ble.n	80096a2 <_ZN5codal10MessageBus9elementAtEi+0xe>
        if (l == NULL)
 800969a:	b110      	cbz	r0, 80096a2 <_ZN5codal10MessageBus9elementAtEi+0xe>
        n--;
 800969c:	3901      	subs	r1, #1
        l = l->next;
 800969e:	69c0      	ldr	r0, [r0, #28]
    while (n > 0)
 80096a0:	e7f9      	b.n	8009696 <_ZN5codal10MessageBus9elementAtEi+0x2>
}
 80096a2:	4770      	bx	lr

080096a4 <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE>:
      * @param method The method to invoke.
      *
      * @param method The Event to supply to the given member function.
      */
    template <typename T>
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 80096a4:	b510      	push	{r4, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	4604      	mov	r4, r0
 80096aa:	4668      	mov	r0, sp
 80096ac:	e880 000c 	stmia.w	r0, {r2, r3}
    {
        T* o = (T*)object;
        void (T::*m)(Event);
        memcpy(&m, method, sizeof(m));
 80096b0:	ab02      	add	r3, sp, #8
 80096b2:	6808      	ldr	r0, [r1, #0]
 80096b4:	6849      	ldr	r1, [r1, #4]
 80096b6:	c303      	stmia	r3!, {r0, r1}

        (o->*m)(e);
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	105a      	asrs	r2, r3, #1
 80096bc:	18a0      	adds	r0, r4, r2
 80096be:	f013 0f01 	tst.w	r3, #1
 80096c2:	d008      	beq.n	80096d6 <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE+0x32>
 80096c4:	58a2      	ldr	r2, [r4, r2]
 80096c6:	9b02      	ldr	r3, [sp, #8]
 80096c8:	58d4      	ldr	r4, [r2, r3]
 80096ca:	466b      	mov	r3, sp
 80096cc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80096d0:	47a0      	blx	r4
    }
 80096d2:	b004      	add	sp, #16
 80096d4:	bd10      	pop	{r4, pc}
        (o->*m)(e);
 80096d6:	9c02      	ldr	r4, [sp, #8]
 80096d8:	e7f7      	b.n	80096ca <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE+0x26>

080096da <_Z14async_callbackPv>:
{
 80096da:	b538      	push	{r3, r4, r5, lr}
 80096dc:	4604      	mov	r4, r0
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 80096de:	8883      	ldrh	r3, [r0, #4]
 80096e0:	f013 0f04 	tst.w	r3, #4
 80096e4:	d005      	beq.n	80096f2 <_Z14async_callbackPv+0x18>
        if (listener->flags & MESSAGE_BUS_LISTENER_DROP_IF_BUSY)
 80096e6:	f013 0f20 	tst.w	r3, #32
 80096ea:	d140      	bne.n	800976e <_Z14async_callbackPv+0x94>
        if (listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY)
 80096ec:	f013 0f10 	tst.w	r3, #16
 80096f0:	d103      	bne.n	80096fa <_Z14async_callbackPv+0x20>
    listener->flags |= MESSAGE_BUS_LISTENER_BUSY;
 80096f2:	f043 0304 	orr.w	r3, r3, #4
 80096f6:	80a3      	strh	r3, [r4, #4]
 80096f8:	e027      	b.n	800974a <_Z14async_callbackPv+0x70>
            listener->queue(listener->evt);
 80096fa:	f100 0310 	add.w	r3, r0, #16
 80096fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009702:	f7ff fd7c 	bl	80091fe <_ZN5codal8Listener5queueENS_5EventE>
            return;
 8009706:	e032      	b.n	800976e <_Z14async_callbackPv+0x94>
            listener->cb_method->fire(listener->evt);
 8009708:	f104 0310 	add.w	r3, r4, #16
 800970c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009710:	68a0      	ldr	r0, [r4, #8]
 8009712:	f000 fa59 	bl	8009bc8 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>
 8009716:	e005      	b.n	8009724 <_Z14async_callbackPv+0x4a>
            listener->cb(listener->evt);
 8009718:	68a2      	ldr	r2, [r4, #8]
 800971a:	f104 0310 	add.w	r3, r4, #16
 800971e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009722:	4790      	blx	r2
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
 8009724:	88a2      	ldrh	r2, [r4, #4]
 8009726:	f012 0f10 	tst.w	r2, #16
 800972a:	d01d      	beq.n	8009768 <_Z14async_callbackPv+0x8e>
 800972c:	69a3      	ldr	r3, [r4, #24]
 800972e:	b1db      	cbz	r3, 8009768 <_Z14async_callbackPv+0x8e>
            listener->evt = item->evt;
 8009730:	f104 0210 	add.w	r2, r4, #16
 8009734:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009738:	e882 0003 	stmia.w	r2, {r0, r1}
            listener->evt_queue = listener->evt_queue->next;
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	61a2      	str	r2, [r4, #24]
            delete item;
 8009740:	4618      	mov	r0, r3
 8009742:	f7f9 fa39 	bl	8002bb8 <_ZdlPv>
            schedule();
 8009746:	f7fd fe59 	bl	80073fc <_ZN5codal8scheduleEv>
        if (listener->flags & MESSAGE_BUS_LISTENER_METHOD)
 800974a:	88a3      	ldrh	r3, [r4, #4]
 800974c:	f013 0f02 	tst.w	r3, #2
 8009750:	d1da      	bne.n	8009708 <_Z14async_callbackPv+0x2e>
        else if (listener->flags & MESSAGE_BUS_LISTENER_PARAMETERISED)
 8009752:	f013 0f01 	tst.w	r3, #1
 8009756:	d0df      	beq.n	8009718 <_Z14async_callbackPv+0x3e>
            listener->cb_param(listener->evt, listener->cb_arg);
 8009758:	68a5      	ldr	r5, [r4, #8]
 800975a:	68e2      	ldr	r2, [r4, #12]
 800975c:	f104 0310 	add.w	r3, r4, #16
 8009760:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009764:	47a8      	blx	r5
 8009766:	e7dd      	b.n	8009724 <_Z14async_callbackPv+0x4a>
    listener->flags &= ~MESSAGE_BUS_LISTENER_BUSY;
 8009768:	f022 0204 	bic.w	r2, r2, #4
 800976c:	80a2      	strh	r2, [r4, #4]
}
 800976e:	bd38      	pop	{r3, r4, r5, pc}

08009770 <_ZN5codal10MessageBus6removeEPNS_8ListenerE>:
    if (listener == NULL)
 8009770:	2900      	cmp	r1, #0
 8009772:	d032      	beq.n	80097da <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x6a>
{
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	460d      	mov	r5, r1
    l = listeners;
 8009778:	6944      	ldr	r4, [r0, #20]
    int removed = 0;
 800977a:	2600      	movs	r6, #0
 800977c:	e016      	b.n	80097ac <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3c>
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 800977e:	68a9      	ldr	r1, [r5, #8]
 8009780:	68a0      	ldr	r0, [r4, #8]
 8009782:	f000 fa2d 	bl	8009be0 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 8009786:	b1d8      	cbz	r0, 80097c0 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x50>
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
 8009788:	882b      	ldrh	r3, [r5, #0]
 800978a:	b113      	cbz	r3, 8009792 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x22>
 800978c:	8822      	ldrh	r2, [r4, #0]
 800978e:	4293      	cmp	r3, r2
 8009790:	d10b      	bne.n	80097aa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
 8009792:	886b      	ldrh	r3, [r5, #2]
 8009794:	b113      	cbz	r3, 800979c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x2c>
 8009796:	8862      	ldrh	r2, [r4, #2]
 8009798:	4293      	cmp	r3, r2
 800979a:	d106      	bne.n	80097aa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800979c:	88a3      	ldrh	r3, [r4, #4]
 800979e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097a6:	80a3      	strh	r3, [r4, #4]
                    removed++;
 80097a8:	3601      	adds	r6, #1
        l = l->next;
 80097aa:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 80097ac:	b18c      	cbz	r4, 80097d2 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x62>
        if ((listener->flags & MESSAGE_BUS_LISTENER_METHOD) == (l->flags & MESSAGE_BUS_LISTENER_METHOD))
 80097ae:	88aa      	ldrh	r2, [r5, #4]
 80097b0:	88a3      	ldrh	r3, [r4, #4]
 80097b2:	4053      	eors	r3, r2
 80097b4:	f013 0f02 	tst.w	r3, #2
 80097b8:	d1f7      	bne.n	80097aa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 80097ba:	f012 0f02 	tst.w	r2, #2
 80097be:	d1de      	bne.n	800977e <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0xe>
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
 80097c0:	88ab      	ldrh	r3, [r5, #4]
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 80097c2:	f013 0f02 	tst.w	r3, #2
 80097c6:	d1f0      	bne.n	80097aa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
 80097c8:	68a2      	ldr	r2, [r4, #8]
 80097ca:	68ab      	ldr	r3, [r5, #8]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d1ec      	bne.n	80097aa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
 80097d0:	e7da      	b.n	8009788 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x18>
    if (removed > 0)
 80097d2:	2e00      	cmp	r6, #0
 80097d4:	dd04      	ble.n	80097e0 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x70>
        return DEVICE_OK;
 80097d6:	2000      	movs	r0, #0
}
 80097d8:	bd70      	pop	{r4, r5, r6, pc}
        return DEVICE_INVALID_PARAMETER;
 80097da:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 80097de:	4770      	bx	lr
        return DEVICE_INVALID_PARAMETER;
 80097e0:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 80097e4:	e7f8      	b.n	80097d8 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x68>

080097e6 <_ZN5codal10MessageBus12dequeueEventEv>:
{
 80097e6:	b538      	push	{r3, r4, r5, lr}
 80097e8:	4604      	mov	r4, r0
    target_disable_irq();
 80097ea:	f7f7 f8dd 	bl	80009a8 <target_disable_irq>
    if (evt_queue_head != NULL)
 80097ee:	69a5      	ldr	r5, [r4, #24]
 80097f0:	b12d      	cbz	r5, 80097fe <_ZN5codal10MessageBus12dequeueEventEv+0x18>
        evt_queue_head = item->next;
 80097f2:	68ab      	ldr	r3, [r5, #8]
 80097f4:	61a3      	str	r3, [r4, #24]
        if (evt_queue_head == NULL)
 80097f6:	b133      	cbz	r3, 8009806 <_ZN5codal10MessageBus12dequeueEventEv+0x20>
        queueLength--;
 80097f8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80097fa:	3b01      	subs	r3, #1
 80097fc:	8463      	strh	r3, [r4, #34]	; 0x22
    target_enable_irq();
 80097fe:	f7f7 f8d1 	bl	80009a4 <target_enable_irq>
}
 8009802:	4628      	mov	r0, r5
 8009804:	bd38      	pop	{r3, r4, r5, pc}
            evt_queue_tail = NULL;
 8009806:	61e3      	str	r3, [r4, #28]
 8009808:	e7f6      	b.n	80097f8 <_ZN5codal10MessageBus12dequeueEventEv+0x12>

0800980a <_ZN5codal10MessageBus21deleteMarkedListenersEv>:
{
 800980a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800980e:	4607      	mov	r7, r0
    l = listeners;
 8009810:	6944      	ldr	r4, [r0, #20]
    int removed = 0;
 8009812:	2600      	movs	r6, #0
    p = NULL;
 8009814:	4635      	mov	r5, r6
 8009816:	e004      	b.n	8009822 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x18>
                listeners = l->next;
 8009818:	69e3      	ldr	r3, [r4, #28]
 800981a:	617b      	str	r3, [r7, #20]
 800981c:	e00d      	b.n	800983a <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x30>
        p = l;
 800981e:	4625      	mov	r5, r4
        l = l->next;
 8009820:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 8009822:	b1ac      	cbz	r4, 8009850 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x46>
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 8009824:	88a3      	ldrh	r3, [r4, #4]
 8009826:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800982a:	d0f8      	beq.n	800981e <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x14>
 800982c:	f013 0f04 	tst.w	r3, #4
 8009830:	d1f5      	bne.n	800981e <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x14>
            if (p == NULL)
 8009832:	2d00      	cmp	r5, #0
 8009834:	d0f0      	beq.n	8009818 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0xe>
                p->next = l->next;
 8009836:	69e3      	ldr	r3, [r4, #28]
 8009838:	61eb      	str	r3, [r5, #28]
            l = l->next;
 800983a:	f8d4 801c 	ldr.w	r8, [r4, #28]
            delete t;
 800983e:	4620      	mov	r0, r4
 8009840:	f7ff fcd1 	bl	80091e6 <_ZN5codal8ListenerD1Ev>
 8009844:	4620      	mov	r0, r4
 8009846:	f7f9 f9b7 	bl	8002bb8 <_ZdlPv>
            removed++;
 800984a:	3601      	adds	r6, #1
            l = l->next;
 800984c:	4644      	mov	r4, r8
            continue;
 800984e:	e7e8      	b.n	8009822 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x18>
}
 8009850:	4630      	mov	r0, r6
 8009852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009856 <_ZN5codal10MessageBus10queueEventERNS_5EventE>:
{
 8009856:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009858:	b083      	sub	sp, #12
 800985a:	4604      	mov	r4, r0
 800985c:	460e      	mov	r6, r1
    EventQueueItem *prev = evt_queue_tail;
 800985e:	69c5      	ldr	r5, [r0, #28]
    processingComplete = this->process(evt, true);
 8009860:	2201      	movs	r2, #1
 8009862:	f7fe f8af 	bl	80079c4 <_ZN5codal10MessageBus7processERNS_5EventEb>
    if (processingComplete)
 8009866:	b910      	cbnz	r0, 800986e <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x18>
    if (queueLength >= MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 8009868:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800986a:	2b09      	cmp	r3, #9
 800986c:	d901      	bls.n	8009872 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x1c>
}
 800986e:	b003      	add	sp, #12
 8009870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EventQueueItem *item = new EventQueueItem(evt);
 8009872:	466f      	mov	r7, sp
 8009874:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009878:	e887 0003 	stmia.w	r7, {r0, r1}
 800987c:	200c      	movs	r0, #12
 800987e:	f7f9 f997 	bl	8002bb0 <_Znwj>
 8009882:	4606      	mov	r6, r0
 8009884:	e897 0006 	ldmia.w	r7, {r1, r2}
 8009888:	f000 f8b8 	bl	80099fc <_ZN5codal14EventQueueItemC1ENS_5EventE>
    target_disable_irq();
 800988c:	f7f7 f88c 	bl	80009a8 <target_disable_irq>
    if (prev == NULL)
 8009890:	b155      	cbz	r5, 80098a8 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x52>
        item->next = prev->next;
 8009892:	68ab      	ldr	r3, [r5, #8]
 8009894:	60b3      	str	r3, [r6, #8]
        prev->next = item;
 8009896:	60ae      	str	r6, [r5, #8]
    if (item->next == NULL)
 8009898:	68b3      	ldr	r3, [r6, #8]
 800989a:	b14b      	cbz	r3, 80098b0 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x5a>
    queueLength++;
 800989c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800989e:	3301      	adds	r3, #1
 80098a0:	8463      	strh	r3, [r4, #34]	; 0x22
    target_enable_irq();
 80098a2:	f7f7 f87f 	bl	80009a4 <target_enable_irq>
 80098a6:	e7e2      	b.n	800986e <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x18>
        item->next = evt_queue_head;
 80098a8:	69a3      	ldr	r3, [r4, #24]
 80098aa:	60b3      	str	r3, [r6, #8]
        evt_queue_head = item;
 80098ac:	61a6      	str	r6, [r4, #24]
 80098ae:	e7f3      	b.n	8009898 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x42>
        evt_queue_tail = item;
 80098b0:	61e6      	str	r6, [r4, #28]
 80098b2:	e7f3      	b.n	800989c <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x46>

080098b4 <_ZN5codal10MessageBus4sendENS_5EventE>:
{
 80098b4:	b500      	push	{lr}
 80098b6:	b083      	sub	sp, #12
 80098b8:	466b      	mov	r3, sp
 80098ba:	e883 0006 	stmia.w	r3, {r1, r2}
    this->queueEvent(evt);
 80098be:	4619      	mov	r1, r3
 80098c0:	f7ff ffc9 	bl	8009856 <_ZN5codal10MessageBus10queueEventERNS_5EventE>
}
 80098c4:	2000      	movs	r0, #0
 80098c6:	b003      	add	sp, #12
 80098c8:	f85d fb04 	ldr.w	pc, [sp], #4

080098cc <_ZN5codal10MessageBus4idleENS_5EventE>:
{
 80098cc:	b530      	push	{r4, r5, lr}
 80098ce:	b083      	sub	sp, #12
 80098d0:	4605      	mov	r5, r0
 80098d2:	ab02      	add	r3, sp, #8
 80098d4:	e903 0006 	stmdb	r3, {r1, r2}
    this->deleteMarkedListeners();
 80098d8:	f7ff ff97 	bl	800980a <_ZN5codal10MessageBus21deleteMarkedListenersEv>
    EventQueueItem *item = this->dequeueEvent();
 80098dc:	4628      	mov	r0, r5
 80098de:	f7ff ff82 	bl	80097e6 <_ZN5codal10MessageBus12dequeueEventEv>
 80098e2:	4604      	mov	r4, r0
    while (item)
 80098e4:	b17c      	cbz	r4, 8009906 <_ZN5codal10MessageBus4idleENS_5EventE+0x3a>
        this->process(item->evt);
 80098e6:	2200      	movs	r2, #0
 80098e8:	4621      	mov	r1, r4
 80098ea:	4628      	mov	r0, r5
 80098ec:	f7fe f86a 	bl	80079c4 <_ZN5codal10MessageBus7processERNS_5EventEb>
        delete item;
 80098f0:	4620      	mov	r0, r4
 80098f2:	f7f9 f961 	bl	8002bb8 <_ZdlPv>
        if(!scheduler_runqueue_empty())
 80098f6:	f7fd fd57 	bl	80073a8 <_ZN5codal24scheduler_runqueue_emptyEv>
 80098fa:	b120      	cbz	r0, 8009906 <_ZN5codal10MessageBus4idleENS_5EventE+0x3a>
        item = this->dequeueEvent();
 80098fc:	4628      	mov	r0, r5
 80098fe:	f7ff ff72 	bl	80097e6 <_ZN5codal10MessageBus12dequeueEventEv>
 8009902:	4604      	mov	r4, r0
    while (item)
 8009904:	e7ee      	b.n	80098e4 <_ZN5codal10MessageBus4idleENS_5EventE+0x18>
}
 8009906:	b003      	add	sp, #12
 8009908:	bd30      	pop	{r4, r5, pc}

0800990a <_ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt>:
      *
      * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
      * to be tuned.
      */
    template <typename T>
    Listener::Listener(uint16_t id, uint16_t value, T* object, void (T::*method)(Event), uint16_t flags)
 800990a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990c:	4604      	mov	r4, r0
 800990e:	460f      	mov	r7, r1
 8009910:	4615      	mov	r5, r2
 8009912:	461e      	mov	r6, r3
 8009914:	3010      	adds	r0, #16
 8009916:	f000 f84a 	bl	80099ae <_ZN5codal5EventC1Ev>
    {
        this->id = id;
 800991a:	8027      	strh	r7, [r4, #0]
        this->value = value;
 800991c:	8065      	strh	r5, [r4, #2]
        this->cb_method = new MemberFunctionCallback(object, method);
 800991e:	2018      	movs	r0, #24
 8009920:	f7f9 f946 	bl	8002bb0 <_Znwj>
 8009924:	4605      	mov	r5, r0
 8009926:	ab06      	add	r3, sp, #24
 8009928:	cb0c      	ldmia	r3, {r2, r3}
 800992a:	4631      	mov	r1, r6
 800992c:	f7fe f896 	bl	8007a5c <_ZN5codal22MemberFunctionCallbackC1INS_10MessageBusEEEPT_MS3_FvNS_5EventEE>
 8009930:	60a5      	str	r5, [r4, #8]
        this->cb_arg = NULL;
 8009932:	2300      	movs	r3, #0
 8009934:	60e3      	str	r3, [r4, #12]
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 8009936:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800993a:	f042 0202 	orr.w	r2, r2, #2
 800993e:	80a2      	strh	r2, [r4, #4]
        this->evt_queue = NULL;
 8009940:	61a3      	str	r3, [r4, #24]
        this->next = NULL;
 8009942:	61e3      	str	r3, [r4, #28]
    }
 8009944:	4620      	mov	r0, r4
 8009946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009948 <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE>:
      * // the previously created listener is now ignored.
      * uBit.messageBus.ignore(DEVICE_ID_BUTTON_B, DEVICE_BUTTON_EVT_CLICK, s, &SomeClass::onButtonBClick);
      * @endcode
      */
    template <typename T>
    int EventModel::ignore(uint16_t id, uint16_t value, T* object, void (T::*handler)(Event))
 8009948:	b530      	push	{r4, r5, lr}
 800994a:	b08d      	sub	sp, #52	; 0x34
    {
        if (handler == NULL)
 800994c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800994e:	b1b4      	cbz	r4, 800997e <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE+0x36>
 8009950:	460d      	mov	r5, r1
 8009952:	4604      	mov	r4, r0
            return DEVICE_INVALID_PARAMETER;

        Listener listener(id, value, object, handler);
 8009954:	2110      	movs	r1, #16
 8009956:	9102      	str	r1, [sp, #8]
 8009958:	a910      	add	r1, sp, #64	; 0x40
 800995a:	c903      	ldmia	r1, {r0, r1}
 800995c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009960:	4629      	mov	r1, r5
 8009962:	a804      	add	r0, sp, #16
 8009964:	f7ff ffd1 	bl	800990a <_ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt>
        remove(&listener);
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	a904      	add	r1, sp, #16
 800996e:	4620      	mov	r0, r4
 8009970:	4798      	blx	r3
        Listener listener(id, value, object, handler);
 8009972:	a804      	add	r0, sp, #16
 8009974:	f7ff fc37 	bl	80091e6 <_ZN5codal8ListenerD1Ev>

        return DEVICE_OK;
 8009978:	2000      	movs	r0, #0
    }
 800997a:	b00d      	add	sp, #52	; 0x34
 800997c:	bd30      	pop	{r4, r5, pc}
        if (handler == NULL)
 800997e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009980:	f014 0f01 	tst.w	r4, #1
 8009984:	d1e4      	bne.n	8009950 <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE+0x8>
            return DEVICE_INVALID_PARAMETER;
 8009986:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800998a:	e7f6      	b.n	800997a <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE+0x32>

0800998c <_ZThn8_N5codal10MessageBusD1Ev>:
        virtual Listener *elementAt(int n);

        /**
          * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
          */
        ~MessageBus();
 800998c:	f1a0 0008 	sub.w	r0, r0, #8
 8009990:	f7fe b8fc 	b.w	8007b8c <_ZN5codal10MessageBusD1Ev>

08009994 <_ZN5codal10MessageBusD0Ev>:
MessageBus::~MessageBus()
 8009994:	b510      	push	{r4, lr}
 8009996:	4604      	mov	r4, r0
}
 8009998:	f7fe f8f8 	bl	8007b8c <_ZN5codal10MessageBusD1Ev>
 800999c:	4620      	mov	r0, r4
 800999e:	f7f9 f90b 	bl	8002bb8 <_ZdlPv>
 80099a2:	4620      	mov	r0, r4
 80099a4:	bd10      	pop	{r4, pc}

080099a6 <_ZThn8_N5codal10MessageBusD0Ev>:
 80099a6:	f1a0 0008 	sub.w	r0, r0, #8
 80099aa:	f7ff bff3 	b.w	8009994 <_ZN5codal10MessageBusD0Ev>

080099ae <_ZN5codal5EventC1Ev>:
Event::Event()
 80099ae:	b510      	push	{r4, lr}
 80099b0:	4604      	mov	r4, r0
    this->source = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	8003      	strh	r3, [r0, #0]
    this->value = 0;
 80099b6:	8043      	strh	r3, [r0, #2]
    this->timestamp = system_timer_current_time();
 80099b8:	f7fd ff60 	bl	800787c <_ZN5codal25system_timer_current_timeEv>
 80099bc:	6060      	str	r0, [r4, #4]
}
 80099be:	4620      	mov	r0, r4
 80099c0:	bd10      	pop	{r4, pc}

080099c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>:
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 80099c2:	b538      	push	{r3, r4, r5, lr}
 80099c4:	4604      	mov	r4, r0
 80099c6:	461d      	mov	r5, r3
    this->source = source;
 80099c8:	8001      	strh	r1, [r0, #0]
    this->value = value;
 80099ca:	8042      	strh	r2, [r0, #2]
    this->timestamp = system_timer_current_time();
 80099cc:	f7fd ff56 	bl	800787c <_ZN5codal25system_timer_current_timeEv>
 80099d0:	6060      	str	r0, [r4, #4]
    if(mode != CREATE_ONLY)
 80099d2:	b90d      	cbnz	r5, 80099d8 <_ZN5codal5EventC1EttNS_15EventLaunchModeE+0x16>
}
 80099d4:	4620      	mov	r0, r4
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
        this->fire();
 80099d8:	4620      	mov	r0, r4
 80099da:	f7fe f8ff 	bl	8007bdc <_ZN5codal5Event4fireEv>
 80099de:	e7f9      	b.n	80099d4 <_ZN5codal5EventC1EttNS_15EventLaunchModeE+0x12>

080099e0 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>:
  Event::Event(uint16_t source, uint16_t value, CODAL_TIMESTAMP currentTimeUs, EventLaunchMode mode)
 80099e0:	b510      	push	{r4, lr}
 80099e2:	4604      	mov	r4, r0
 80099e4:	f89d 0008 	ldrb.w	r0, [sp, #8]
      this->source = source;
 80099e8:	8021      	strh	r1, [r4, #0]
      this->value = value;
 80099ea:	8062      	strh	r2, [r4, #2]
      this->timestamp = currentTimeUs;
 80099ec:	6063      	str	r3, [r4, #4]
      if(mode != CREATE_ONLY)
 80099ee:	b908      	cbnz	r0, 80099f4 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE+0x14>
  }
 80099f0:	4620      	mov	r0, r4
 80099f2:	bd10      	pop	{r4, pc}
          this->fire();
 80099f4:	4620      	mov	r0, r4
 80099f6:	f7fe f8f1 	bl	8007bdc <_ZN5codal5Event4fireEv>
 80099fa:	e7f9      	b.n	80099f0 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE+0x10>

080099fc <_ZN5codal14EventQueueItemC1ENS_5EventE>:
  * Constructor.
  * Create a new EventQueueItem.
  *
  * @param evt The event to be queued.
  */
EventQueueItem::EventQueueItem(Event evt)
 80099fc:	b530      	push	{r4, r5, lr}
 80099fe:	b083      	sub	sp, #12
 8009a00:	4604      	mov	r4, r0
 8009a02:	466d      	mov	r5, sp
 8009a04:	e885 0006 	stmia.w	r5, {r1, r2}
 8009a08:	f7ff ffd1 	bl	80099ae <_ZN5codal5EventC1Ev>
{
    this->evt = evt;
 8009a0c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009a10:	e884 0003 	stmia.w	r4, {r0, r1}
    this->next = NULL;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60a3      	str	r3, [r4, #8]
}
 8009a18:	4620      	mov	r0, r4
 8009a1a:	b003      	add	sp, #12
 8009a1c:	bd30      	pop	{r4, r5, pc}

08009a1e <_ZN5codal13ManagedStringD1Ev>:
ManagedString::~ManagedString()
 8009a1e:	b510      	push	{r4, lr}
 8009a20:	4604      	mov	r4, r0
    ptr->decr();
 8009a22:	6800      	ldr	r0, [r0, #0]
 8009a24:	f000 f895 	bl	8009b52 <_ZN5codal10RefCounted4decrEv>
}
 8009a28:	4620      	mov	r0, r4
 8009a2a:	bd10      	pop	{r4, pc}

08009a2c <_ZN5codal13ManagedString10initStringEPKci>:
{
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	4605      	mov	r5, r0
 8009a30:	460e      	mov	r6, r1
 8009a32:	4614      	mov	r4, r2
    ptr = (StringData *) malloc(sizeof(StringData) + len + 1);
 8009a34:	1d50      	adds	r0, r2, #5
 8009a36:	f7fd fe77 	bl	8007728 <device_malloc>
 8009a3a:	6028      	str	r0, [r5, #0]
    REF_COUNTED_INIT(ptr);
 8009a3c:	f000 f8a8 	bl	8009b90 <_ZN5codal10RefCounted4initEv>
    ptr->len = len;
 8009a40:	682b      	ldr	r3, [r5, #0]
 8009a42:	805c      	strh	r4, [r3, #2]
    memcpy(ptr->data, str, len);
 8009a44:	6828      	ldr	r0, [r5, #0]
 8009a46:	4622      	mov	r2, r4
 8009a48:	4631      	mov	r1, r6
 8009a4a:	3004      	adds	r0, #4
 8009a4c:	f7f8 fdab 	bl	80025a6 <memcpy>
    ptr->data[len] = 0;
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	441c      	add	r4, r3
 8009a54:	2300      	movs	r3, #0
 8009a56:	7123      	strb	r3, [r4, #4]
}
 8009a58:	bd70      	pop	{r4, r5, r6, pc}

08009a5a <_ZN5codal13ManagedStringC1EPNS_10StringDataE>:
ManagedString::ManagedString(StringData *p)
 8009a5a:	b510      	push	{r4, lr}
 8009a5c:	4604      	mov	r4, r0
    if(p == NULL)
 8009a5e:	b129      	cbz	r1, 8009a6c <_ZN5codal13ManagedStringC1EPNS_10StringDataE+0x12>
 8009a60:	4608      	mov	r0, r1
    ptr = p;
 8009a62:	6021      	str	r1, [r4, #0]
    ptr->incr();
 8009a64:	f000 f861 	bl	8009b2a <_ZN5codal10RefCounted4incrEv>
}
 8009a68:	4620      	mov	r0, r4
 8009a6a:	bd10      	pop	{r4, pc}
        initEmpty();
 8009a6c:	f7fe f8c4 	bl	8007bf8 <_ZN5codal13ManagedString9initEmptyEv>
        return;
 8009a70:	e7fa      	b.n	8009a68 <_ZN5codal13ManagedStringC1EPNS_10StringDataE+0xe>

08009a72 <_ZN5codal13ManagedStringC1Ei>:
ManagedString::ManagedString(const int value)
 8009a72:	b510      	push	{r4, lr}
 8009a74:	b084      	sub	sp, #16
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
    itoa(value, str);
 8009a7a:	a901      	add	r1, sp, #4
 8009a7c:	f7fe f8de 	bl	8007c3c <_ZN5codal4itoaEiPc>
    initString(str, strlen(str));
 8009a80:	a801      	add	r0, sp, #4
 8009a82:	f7f8 fda8 	bl	80025d6 <strlen>
 8009a86:	4602      	mov	r2, r0
 8009a88:	a901      	add	r1, sp, #4
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f7ff ffce 	bl	8009a2c <_ZN5codal13ManagedString10initStringEPKci>
}
 8009a90:	4620      	mov	r0, r4
 8009a92:	b004      	add	sp, #16
 8009a94:	bd10      	pop	{r4, pc}

08009a96 <_ZN5codal13ManagedStringC1EPKcs>:
ManagedString::ManagedString(const char *str, const int16_t length)
 8009a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a98:	4604      	mov	r4, r0
    if (str == NULL || *str == 0 || (uint16_t)length > strlen(str)) // XXX length should be unsigned on the interface
 8009a9a:	b149      	cbz	r1, 8009ab0 <_ZN5codal13ManagedStringC1EPKcs+0x1a>
 8009a9c:	4617      	mov	r7, r2
 8009a9e:	460d      	mov	r5, r1
 8009aa0:	780b      	ldrb	r3, [r1, #0]
 8009aa2:	b12b      	cbz	r3, 8009ab0 <_ZN5codal13ManagedStringC1EPKcs+0x1a>
 8009aa4:	b296      	uxth	r6, r2
 8009aa6:	4608      	mov	r0, r1
 8009aa8:	f7f8 fd95 	bl	80025d6 <strlen>
 8009aac:	4286      	cmp	r6, r0
 8009aae:	d904      	bls.n	8009aba <_ZN5codal13ManagedStringC1EPKcs+0x24>
        initEmpty();
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f7fe f8a1 	bl	8007bf8 <_ZN5codal13ManagedString9initEmptyEv>
}
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    initString(str, length);
 8009aba:	463a      	mov	r2, r7
 8009abc:	4629      	mov	r1, r5
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f7ff ffb4 	bl	8009a2c <_ZN5codal13ManagedString10initStringEPKci>
 8009ac4:	e7f7      	b.n	8009ab6 <_ZN5codal13ManagedStringC1EPKcs+0x20>

08009ac6 <_ZN5codal13ManagedStringC1ERKS0_>:
ManagedString::ManagedString(const ManagedString &s)
 8009ac6:	b510      	push	{r4, lr}
 8009ac8:	4604      	mov	r4, r0
    ptr = s.ptr;
 8009aca:	6808      	ldr	r0, [r1, #0]
 8009acc:	6020      	str	r0, [r4, #0]
    ptr->incr();
 8009ace:	f000 f82c 	bl	8009b2a <_ZN5codal10RefCounted4incrEv>
}
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	bd10      	pop	{r4, pc}

08009ad6 <_ZN5codal13ManagedStringC1Ev>:
ManagedString::ManagedString()
 8009ad6:	b510      	push	{r4, lr}
 8009ad8:	4604      	mov	r4, r0
    initEmpty();
 8009ada:	f7fe f88d 	bl	8007bf8 <_ZN5codal13ManagedString9initEmptyEv>
}
 8009ade:	4620      	mov	r0, r4
 8009ae0:	bd10      	pop	{r4, pc}

08009ae2 <_ZN5codal13ManagedStringaSERKS0_>:
{
 8009ae2:	b538      	push	{r3, r4, r5, lr}
 8009ae4:	4604      	mov	r4, r0
    if (this->ptr == s.ptr)
 8009ae6:	6800      	ldr	r0, [r0, #0]
 8009ae8:	680b      	ldr	r3, [r1, #0]
 8009aea:	4298      	cmp	r0, r3
 8009aec:	d006      	beq.n	8009afc <_ZN5codal13ManagedStringaSERKS0_+0x1a>
 8009aee:	460d      	mov	r5, r1
    ptr->decr();
 8009af0:	f000 f82f 	bl	8009b52 <_ZN5codal10RefCounted4decrEv>
    ptr = s.ptr;
 8009af4:	6828      	ldr	r0, [r5, #0]
 8009af6:	6020      	str	r0, [r4, #0]
    ptr->incr();
 8009af8:	f000 f817 	bl	8009b2a <_ZN5codal10RefCounted4incrEv>
}
 8009afc:	4620      	mov	r0, r4
 8009afe:	bd38      	pop	{r3, r4, r5, pc}

08009b00 <_ZN5codal13ManagedString6charAtEs>:
    return (index >=0 && index < length()) ? ptr->data[index] : 0;
 8009b00:	2900      	cmp	r1, #0
 8009b02:	db07      	blt.n	8009b14 <_ZN5codal13ManagedString6charAtEs+0x14>
 8009b04:	6803      	ldr	r3, [r0, #0]
 8009b06:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009b0a:	4291      	cmp	r1, r2
 8009b0c:	da04      	bge.n	8009b18 <_ZN5codal13ManagedString6charAtEs+0x18>
 8009b0e:	440b      	add	r3, r1
 8009b10:	7918      	ldrb	r0, [r3, #4]
 8009b12:	4770      	bx	lr
 8009b14:	2000      	movs	r0, #0
 8009b16:	4770      	bx	lr
 8009b18:	2000      	movs	r0, #0
}
 8009b1a:	4770      	bx	lr

08009b1c <_GLOBAL__sub_I__ZN5codal13ManagedString9initEmptyEv>:
ManagedString ManagedString::EmptyString(EMPTY_DATA);
 8009b1c:	b508      	push	{r3, lr}
 8009b1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009b22:	2001      	movs	r0, #1
 8009b24:	f7fe f86e 	bl	8007c04 <_Z41__static_initialization_and_destruction_0ii>
 8009b28:	bd08      	pop	{r3, pc}

08009b2a <_ZN5codal10RefCounted4incrEv>:
  *
  * @return true if the object resides in flash memory, false otherwise.
  */
static inline bool isReadOnlyInline(RefCounted *t)
{
    uint32_t refCount = t->refCount;
 8009b2a:	8803      	ldrh	r3, [r0, #0]

    if (refCount == 0xffff)
 8009b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d00d      	beq.n	8009b50 <_ZN5codal10RefCounted4incrEv+0x26>

/**
  * Increment reference count.
  */
void RefCounted::incr()
{
 8009b34:	b510      	push	{r4, lr}
 8009b36:	4604      	mov	r4, r0
    if (refCount == 1 ||        // object should have been deleted
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d002      	beq.n	8009b42 <_ZN5codal10RefCounted4incrEv+0x18>
 8009b3c:	f013 0f01 	tst.w	r3, #1
 8009b40:	d102      	bne.n	8009b48 <_ZN5codal10RefCounted4incrEv+0x1e>
        target_panic(DEVICE_HEAP_ERROR);
 8009b42:	201e      	movs	r0, #30
 8009b44:	f7f6 fece 	bl	80008e4 <target_panic>
    if (!isReadOnlyInline(this))
        refCount += 2;
 8009b48:	8823      	ldrh	r3, [r4, #0]
 8009b4a:	3302      	adds	r3, #2
 8009b4c:	8023      	strh	r3, [r4, #0]
}
 8009b4e:	bd10      	pop	{r4, pc}
 8009b50:	4770      	bx	lr

08009b52 <_ZN5codal10RefCounted4decrEv>:
    uint32_t refCount = t->refCount;
 8009b52:	8803      	ldrh	r3, [r0, #0]
    if (refCount == 0xffff)
 8009b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d014      	beq.n	8009b86 <_ZN5codal10RefCounted4decrEv+0x34>

/**
  * Decrement reference count.
  */
void RefCounted::decr()
{
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	4604      	mov	r4, r0
    if (refCount == 1 ||        // object should have been deleted
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d002      	beq.n	8009b6a <_ZN5codal10RefCounted4decrEv+0x18>
 8009b64:	f013 0f01 	tst.w	r3, #1
 8009b68:	d102      	bne.n	8009b70 <_ZN5codal10RefCounted4decrEv+0x1e>
        target_panic(DEVICE_HEAP_ERROR);
 8009b6a:	201e      	movs	r0, #30
 8009b6c:	f7f6 feba 	bl	80008e4 <target_panic>
    if (isReadOnlyInline(this))
        return;

    refCount -= 2;
 8009b70:	8823      	ldrh	r3, [r4, #0]
 8009b72:	3b02      	subs	r3, #2
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	8023      	strh	r3, [r4, #0]
    if (refCount == 1) {
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d000      	beq.n	8009b7e <_ZN5codal10RefCounted4decrEv+0x2c>
        // if we just call plain free(), the write to refCount will
        // be optimized away, and it will stay '3'; this way we make
        // sure to get a panic on next incr()/decr()
        destroy();
    }
}
 8009b7c:	bd10      	pop	{r4, pc}
        destroy();
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f000 f802 	bl	8009b88 <_ZN5codal10RefCounted7destroyEv>
 8009b84:	e7fa      	b.n	8009b7c <_ZN5codal10RefCounted4decrEv+0x2a>
 8009b86:	4770      	bx	lr

08009b88 <_ZN5codal10RefCounted7destroyEv>:

/**
  * Releases the current instance.
  */
void RefCounted::destroy()
{
 8009b88:	b508      	push	{r3, lr}
    free(this);
 8009b8a:	f7fd fdf7 	bl	800777c <device_free>
}
 8009b8e:	bd08      	pop	{r3, pc}

08009b90 <_ZN5codal10RefCounted4initEv>:
  * Initializes for one outstanding reference.
  */
void RefCounted::init()
{
    // Initialize to one reference (lowest bit set to 1)
    refCount = 3;
 8009b90:	2303      	movs	r3, #3
 8009b92:	8003      	strh	r3, [r0, #0]
}
 8009b94:	4770      	bx	lr

08009b96 <_ZN5codal14string_reverseEPc>:
    if(s == NULL)
 8009b96:	b190      	cbz	r0, 8009bbe <_ZN5codal14string_reverseEPc+0x28>
{
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4604      	mov	r4, r0
    j = s + strlen(s) - 1;
 8009b9c:	f7f8 fd1b 	bl	80025d6 <strlen>
 8009ba0:	3801      	subs	r0, #1
 8009ba2:	4420      	add	r0, r4
    while(s < j)
 8009ba4:	4284      	cmp	r4, r0
 8009ba6:	d20d      	bcs.n	8009bc4 <_ZN5codal14string_reverseEPc+0x2e>
        c = *s;
 8009ba8:	4623      	mov	r3, r4
 8009baa:	f813 1b01 	ldrb.w	r1, [r3], #1
        *s++ = *j;
 8009bae:	4602      	mov	r2, r0
 8009bb0:	f812 5901 	ldrb.w	r5, [r2], #-1
 8009bb4:	7025      	strb	r5, [r4, #0]
        *j-- = c;
 8009bb6:	7001      	strb	r1, [r0, #0]
 8009bb8:	4610      	mov	r0, r2
        *s++ = *j;
 8009bba:	461c      	mov	r4, r3
    while(s < j)
 8009bbc:	e7f2      	b.n	8009ba4 <_ZN5codal14string_reverseEPc+0xe>
        return DEVICE_INVALID_PARAMETER;
 8009bbe:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 8009bc2:	4770      	bx	lr
    return DEVICE_OK;
 8009bc4:	2000      	movs	r0, #0
}
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}

08009bc8 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>:
  * Calls the method reference held by this MemberFunctionCallback.
  *
  * @param e The event to deliver to the method
  */
void MemberFunctionCallback::fire(Event e)
{
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	466b      	mov	r3, sp
 8009bce:	e883 0006 	stmia.w	r3, {r1, r2}
    invoke(object, method, e);
 8009bd2:	6944      	ldr	r4, [r0, #20]
 8009bd4:	cb0c      	ldmia	r3, {r2, r3}
 8009bd6:	1d01      	adds	r1, r0, #4
 8009bd8:	6800      	ldr	r0, [r0, #0]
 8009bda:	47a0      	blx	r4
}
 8009bdc:	b002      	add	sp, #8
 8009bde:	bd10      	pop	{r4, pc}

08009be0 <_ZN5codal22MemberFunctionCallbackeqERKS0_>:
  * A comparison of two MemberFunctionCallback objects.
  *
  * @return true if the given MemberFunctionCallback is equivalent to this one, false otherwise.
  */
bool MemberFunctionCallback::operator==(const MemberFunctionCallback &mfc)
{
 8009be0:	b508      	push	{r3, lr}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 8009be2:	6802      	ldr	r2, [r0, #0]
 8009be4:	680b      	ldr	r3, [r1, #0]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d001      	beq.n	8009bee <_ZN5codal22MemberFunctionCallbackeqERKS0_+0xe>
 8009bea:	2000      	movs	r0, #0
}
 8009bec:	bd08      	pop	{r3, pc}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 8009bee:	2210      	movs	r2, #16
 8009bf0:	3104      	adds	r1, #4
 8009bf2:	3004      	adds	r0, #4
 8009bf4:	f7f8 fcc7 	bl	8002586 <memcmp>
 8009bf8:	b108      	cbz	r0, 8009bfe <_ZN5codal22MemberFunctionCallbackeqERKS0_+0x1e>
 8009bfa:	2000      	movs	r0, #0
 8009bfc:	e7f6      	b.n	8009bec <_ZN5codal22MemberFunctionCallbackeqERKS0_+0xc>
 8009bfe:	2001      	movs	r0, #1
 8009c00:	e7f4      	b.n	8009bec <_ZN5codal22MemberFunctionCallbackeqERKS0_+0xc>

08009c02 <_ZN5codal3Pin15setServoPulseUsEm>:
          *         if the given pin does not have analog capability.
          */
        virtual int setServoPulseUs(uint32_t pulseWidth)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 8009c02:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 8009c06:	4770      	bx	lr

08009c08 <_ZN5codal3Pin17setAnalogPeriodUsEm>:
          *         given pin is not configured as an analog output.
          */
        virtual int setAnalogPeriodUs(uint32_t period)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 8009c08:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 8009c0c:	4770      	bx	lr

08009c0e <_ZN5codal3Pin8drainPinEv>:
          *         than a digital input, otherwise DEVICE_OK.
          */
        virtual int drainPin()
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 8009c0e:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 8009c12:	4770      	bx	lr

08009c14 <_ZN5codal3_cm3Pin15getDigitalValueEv>:
}
 8009c14:	2001      	movs	r0, #1
 8009c16:	4770      	bx	lr

08009c18 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE>:
{
 8009c18:	b510      	push	{r4, lr}
 8009c1a:	4604      	mov	r4, r0
    setPull(pull);
 8009c1c:	6803      	ldr	r3, [r0, #0]
 8009c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c20:	4798      	blx	r3
    return getDigitalValue();
 8009c22:	6823      	ldr	r3, [r4, #0]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	4620      	mov	r0, r4
 8009c28:	4798      	blx	r3
}
 8009c2a:	bd10      	pop	{r4, pc}

08009c2c <_ZN5codal3_cm3Pin14getAnalogValueEv>:
}
 8009c2c:	20e1      	movs	r0, #225	; 0xe1
 8009c2e:	4770      	bx	lr

08009c30 <_ZN5codal3_cm3Pin7isInputEv>:
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_ANALOG_IN)) == 0 ? 0 : 1;
 8009c30:	8983      	ldrh	r3, [r0, #12]
 8009c32:	f013 0f05 	tst.w	r3, #5
}
 8009c36:	bf14      	ite	ne
 8009c38:	2001      	movne	r0, #1
 8009c3a:	2000      	moveq	r0, #0
 8009c3c:	4770      	bx	lr

08009c3e <_ZN5codal3_cm3Pin8isOutputEv>:
    return (status & (IO_STATUS_DIGITAL_OUT | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 8009c3e:	8983      	ldrh	r3, [r0, #12]
 8009c40:	f013 0f0a 	tst.w	r3, #10
}
 8009c44:	bf14      	ite	ne
 8009c46:	2001      	movne	r0, #1
 8009c48:	2000      	moveq	r0, #0
 8009c4a:	4770      	bx	lr

08009c4c <_ZN5codal3_cm3Pin9isDigitalEv>:
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_DIGITAL_OUT)) == 0 ? 0 : 1;
 8009c4c:	8980      	ldrh	r0, [r0, #12]
}
 8009c4e:	f010 0003 	ands.w	r0, r0, #3
 8009c52:	bf18      	it	ne
 8009c54:	2001      	movne	r0, #1
 8009c56:	4770      	bx	lr

08009c58 <_ZN5codal3_cm3Pin8isAnalogEv>:
    return (status & (IO_STATUS_ANALOG_IN | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 8009c58:	8983      	ldrh	r3, [r0, #12]
 8009c5a:	f013 0f0c 	tst.w	r3, #12
}
 8009c5e:	bf14      	ite	ne
 8009c60:	2001      	movne	r0, #1
 8009c62:	2000      	moveq	r0, #0
 8009c64:	4770      	bx	lr

08009c66 <_ZN5codal3_cm3Pin7setPullENS_8PullModeE>:
  * @return DEVICE_NOT_SUPPORTED if the current pin configuration is anything other
  *         than a digital input, otherwise DEVICE_OK.
  */
int Pin::setPull(PullMode pull)
{
    pullMode = pull;
 8009c66:	6081      	str	r1, [r0, #8]
        return DEVICE_OK;
    }

    return DEVICE_NOT_SUPPORTED;
#endif  //  TODO
}
 8009c68:	2000      	movs	r0, #0
 8009c6a:	4770      	bx	lr

08009c6c <_ZN5codal3_cm3Pin5setupEhh>:
) {
 8009c6c:	b570      	push	{r4, r5, r6, lr}
 8009c6e:	4604      	mov	r4, r0
 8009c70:	460d      	mov	r5, r1
 8009c72:	4616      	mov	r6, r2
	rcc_periph_clock_enable((enum rcc_periph_clken) this->rcc);
 8009c74:	8a80      	ldrh	r0, [r0, #20]
 8009c76:	f7f7 fd46 	bl	8001706 <rcc_periph_clock_enable>
	gpio_set_mode(this->port, mode, cnf, this->pin);
 8009c7a:	8ba3      	ldrh	r3, [r4, #28]
 8009c7c:	4632      	mov	r2, r6
 8009c7e:	4629      	mov	r1, r5
 8009c80:	69a0      	ldr	r0, [r4, #24]
 8009c82:	f7f7 fd01 	bl	8001688 <gpio_set_mode>
}
 8009c86:	bd70      	pop	{r4, r5, r6, pc}

08009c88 <_ZN5codal3_cm3Pin10disconnectEv>:
    this->status = 0;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	8183      	strh	r3, [r0, #12]
}
 8009c8c:	4770      	bx	lr

08009c8e <_ZN5codal3_cm3Pin15setServoPulseUsEi>:
}
 8009c8e:	2000      	movs	r0, #0
 8009c90:	4770      	bx	lr

08009c92 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>:
{
 8009c92:	b508      	push	{r3, lr}
    if (!(status & IO_STATUS_ANALOG_OUT))
 8009c94:	8983      	ldrh	r3, [r0, #12]
 8009c96:	f013 0f08 	tst.w	r3, #8
 8009c9a:	d001      	beq.n	8009ca0 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi+0xe>
    return 0;
 8009c9c:	2000      	movs	r0, #0
}
 8009c9e:	bd08      	pop	{r3, pc}
        ret = setAnalogValue(0);
 8009ca0:	6803      	ldr	r3, [r0, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	4798      	blx	r3
 8009ca8:	e7f9      	b.n	8009c9e <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi+0xc>

08009caa <_ZN5codal3_cm3Pin15setAnalogPeriodEi>:
{
 8009caa:	b508      	push	{r3, lr}
    return setAnalogPeriodUs(period*1000);
 8009cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cb0:	fb03 f101 	mul.w	r1, r3, r1
 8009cb4:	f7ff ffed 	bl	8009c92 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>
}
 8009cb8:	bd08      	pop	{r3, pc}

08009cba <_ZN5codal3_cm3Pin13disableEventsEv>:
  * the current instance attached to this Pin instance.
  *
  * @return DEVICE_OK on success.
  */
int Pin::disableEvents()
{
 8009cba:	b508      	push	{r3, lr}
    if (status & (IO_STATUS_EVENT_ON_EDGE | IO_STATUS_EVENT_PULSE_ON_EDGE | IO_STATUS_TOUCH_IN))
 8009cbc:	8983      	ldrh	r3, [r0, #12]
 8009cbe:	f013 0f70 	tst.w	r3, #112	; 0x70
 8009cc2:	d101      	bne.n	8009cc8 <_ZN5codal3_cm3Pin13disableEventsEv+0xe>
        disconnect();

    return DEVICE_OK;
}
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	bd08      	pop	{r3, pc}
        disconnect();
 8009cc8:	f7ff ffde 	bl	8009c88 <_ZN5codal3_cm3Pin10disconnectEv>
 8009ccc:	e7fa      	b.n	8009cc4 <_ZN5codal3_cm3Pin13disableEventsEv+0xa>

08009cce <_ZN5codal3_cm3Pin7eventOnEi>:
  *
  * @note In the DEVICE_PIN_EVENT_ON_PULSE mode, the smallest pulse that was reliably detected was 85us, around 5khz. If more precision is required,
  *       please use the InterruptIn class supplied by ARM mbed.
  */
int Pin::eventOn(int eventType)
{
 8009cce:	b510      	push	{r4, lr}
    switch(eventType)
 8009cd0:	2903      	cmp	r1, #3
 8009cd2:	d803      	bhi.n	8009cdc <_ZN5codal3_cm3Pin7eventOnEi+0xe>
 8009cd4:	e8df f001 	tbb	[pc, r1]
 8009cd8:	050f0f0a 	.word	0x050f0f0a
        case DEVICE_PIN_EVENT_NONE:
            disableEvents();
            break;

        default:
            return DEVICE_INVALID_PARAMETER;
 8009cdc:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 8009ce0:	e00a      	b.n	8009cf8 <_ZN5codal3_cm3Pin7eventOnEi+0x2a>
            isTouched();
 8009ce2:	6803      	ldr	r3, [r0, #0]
 8009ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce6:	4798      	blx	r3
    }

    return DEVICE_OK;
 8009ce8:	2000      	movs	r0, #0
            break;
 8009cea:	e005      	b.n	8009cf8 <_ZN5codal3_cm3Pin7eventOnEi+0x2a>
 8009cec:	460c      	mov	r4, r1
            disableEvents();
 8009cee:	f7ff ffe4 	bl	8009cba <_ZN5codal3_cm3Pin13disableEventsEv>
    return DEVICE_OK;
 8009cf2:	4620      	mov	r0, r4
            break;
 8009cf4:	e000      	b.n	8009cf8 <_ZN5codal3_cm3Pin7eventOnEi+0x2a>
    return DEVICE_OK;
 8009cf6:	2000      	movs	r0, #0
}
 8009cf8:	bd10      	pop	{r4, pc}

08009cfa <_ZN5codal3_cm6Serial15enableInterruptENS_19SerialInterruptTypeE>:
        {
            ////TODO
            int enableInterrupt(SerialInterruptType t) { return 0; }
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	4770      	bx	lr

08009cfe <_ZN5codal3_cm6Serial16disableInterruptENS_19SerialInterruptTypeE>:
            int disableInterrupt(SerialInterruptType t) { return 0; }
 8009cfe:	2000      	movs	r0, #0
 8009d00:	4770      	bx	lr

08009d02 <_ZN5codal3_cm6Serial11setBaudrateEm>:
            int setBaudrate(uint32_t baudrate) { return 0; }
 8009d02:	2000      	movs	r0, #0
 8009d04:	4770      	bx	lr

08009d06 <_ZN5codal3_cm6Serial13configurePinsERNS_3PinES3_>:
            int configurePins(codal::Pin& tx, codal::Pin& rx) { return 0; }
 8009d06:	2000      	movs	r0, #0
 8009d08:	4770      	bx	lr

08009d0a <_ZN5codal3_cm6Serial4putcEc>:
            int putc(char c) { return 1; }
 8009d0a:	2001      	movs	r0, #1
 8009d0c:	4770      	bx	lr

08009d0e <_ZN5codal3_cm6Serial4getcEv>:
            int getc() { return -1; }
 8009d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d12:	4770      	bx	lr

08009d14 <_ZN5codal3_cm6Serial6lockRxEv>:
        /**
          * Locks the mutex so that others can't use this serial instance for reception
          */
        void Serial::lockRx()
        {
            status |= CODAL_SERIAL_RX_IN_USE;
 8009d14:	88c3      	ldrh	r3, [r0, #6]
 8009d16:	f043 0301 	orr.w	r3, r3, #1
 8009d1a:	80c3      	strh	r3, [r0, #6]
        }
 8009d1c:	4770      	bx	lr

08009d1e <_ZN5codal3_cm6Serial8unlockRxEv>:
        /**
          * Unlocks the mutex so that others can use this serial instance for reception
          */
        void Serial::unlockRx()
        {
            status &= ~CODAL_SERIAL_RX_IN_USE;
 8009d1e:	88c3      	ldrh	r3, [r0, #6]
 8009d20:	f023 0301 	bic.w	r3, r3, #1
 8009d24:	80c3      	strh	r3, [r0, #6]
        }
 8009d26:	4770      	bx	lr

08009d28 <_ZN5codal3_cm6Serial12initialiseRxEv>:
        /**
          * We do not want to always have our buffers initialised, especially if users to not
          * use them. We only bring them up on demand.
          */
        int Serial::initialiseRx()
        {
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4604      	mov	r4, r0
            if((status & CODAL_SERIAL_RX_BUFF_INIT))
 8009d2c:	88c3      	ldrh	r3, [r0, #6]
 8009d2e:	f013 0f04 	tst.w	r3, #4
 8009d32:	d110      	bne.n	8009d56 <_ZN5codal3_cm6Serial12initialiseRxEv+0x2e>
                //ensure that we receive no interrupts after freeing our buffer
                detach(RxInterrupt);
                free(this->rxBuff);
            }

            status &= ~CODAL_SERIAL_RX_BUFF_INIT;
 8009d34:	88e5      	ldrh	r5, [r4, #6]
 8009d36:	f025 0504 	bic.w	r5, r5, #4
 8009d3a:	b2ad      	uxth	r5, r5
 8009d3c:	80e5      	strh	r5, [r4, #6]

            if((this->rxBuff = (uint8_t *)malloc(rxBuffSize)) == NULL)
 8009d3e:	7f20      	ldrb	r0, [r4, #28]
 8009d40:	f7fd fcf2 	bl	8007728 <device_malloc>
 8009d44:	61a0      	str	r0, [r4, #24]
 8009d46:	b150      	cbz	r0, 8009d5e <_ZN5codal3_cm6Serial12initialiseRxEv+0x36>
                return DEVICE_NO_RESOURCES;

            this->rxBuffHead = 0;
 8009d48:	2000      	movs	r0, #0
 8009d4a:	83e0      	strh	r0, [r4, #30]
            this->rxBuffTail = 0;
 8009d4c:	8420      	strh	r0, [r4, #32]

            //set the receive interrupt
            status |= CODAL_SERIAL_RX_BUFF_INIT;
 8009d4e:	f045 0504 	orr.w	r5, r5, #4
 8009d52:	80e5      	strh	r5, [r4, #6]
            attach(RxInterrupt, &Serial::dataReceived);

            return DEVICE_OK;
        }
 8009d54:	bd38      	pop	{r3, r4, r5, pc}
                free(this->rxBuff);
 8009d56:	6980      	ldr	r0, [r0, #24]
 8009d58:	f7fd fd10 	bl	800777c <device_free>
 8009d5c:	e7ea      	b.n	8009d34 <_ZN5codal3_cm6Serial12initialiseRxEv+0xc>
                return DEVICE_NO_RESOURCES;
 8009d5e:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 8009d62:	e7f7      	b.n	8009d54 <_ZN5codal3_cm6Serial12initialiseRxEv+0x2c>

08009d64 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt>:
          *
          * @note this method assumes that the linear buffer has the appropriate amount of
          *       memory to contain the copy operation
          */
        void Serial::circularCopy(uint8_t *circularBuff, uint8_t circularBuffSize, uint8_t *linearBuff, uint16_t tailPosition, uint16_t headPosition)
        {
 8009d64:	b470      	push	{r4, r5, r6}
 8009d66:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8009d6a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
            int toBuffIndex = 0;
 8009d6e:	2500      	movs	r5, #0

            while(tailPosition != headPosition)
 8009d70:	42b0      	cmp	r0, r6
 8009d72:	d009      	beq.n	8009d88 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt+0x24>
            {
                linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 8009d74:	5c0c      	ldrb	r4, [r1, r0]
 8009d76:	555c      	strb	r4, [r3, r5]

                tailPosition = (tailPosition + 1) % circularBuffSize;
 8009d78:	3001      	adds	r0, #1
 8009d7a:	fb90 f4f2 	sdiv	r4, r0, r2
 8009d7e:	fb02 0014 	mls	r0, r2, r4, r0
 8009d82:	b280      	uxth	r0, r0
                linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 8009d84:	3501      	adds	r5, #1
            while(tailPosition != headPosition)
 8009d86:	e7f3      	b.n	8009d70 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt+0xc>
            }
        }
 8009d88:	bc70      	pop	{r4, r5, r6}
 8009d8a:	4770      	bx	lr

08009d8c <_ZN5codal3_cm6Serial4baudEi>:
          *
          * @note the underlying implementation chooses the first allowable rate at or above that requested.
          */
        int Serial::baud(int baudrate)
        {
            if(baudrate < 0)
 8009d8c:	2900      	cmp	r1, #0
 8009d8e:	db02      	blt.n	8009d96 <_ZN5codal3_cm6Serial4baudEi+0xa>
                return DEVICE_INVALID_PARAMETER;

            this->baudrate = baudrate;
 8009d90:	6301      	str	r1, [r0, #48]	; 0x30
#ifdef TODO
            RawSerial::baud(baudrate);
#endif  //  TODO

            return DEVICE_OK;
 8009d92:	2000      	movs	r0, #0
 8009d94:	4770      	bx	lr
                return DEVICE_INVALID_PARAMETER;
 8009d96:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
        }
 8009d9a:	4770      	bx	lr

08009d9c <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>:
          *
          * @note delimeters are matched on a per byte basis.
          */
        int Serial::eventOn(ManagedString delimeters, SerialMode mode)
        {
            if(mode == SYNC_SPINWAIT)
 8009d9c:	2a01      	cmp	r2, #1
 8009d9e:	d00e      	beq.n	8009dbe <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x22>
        {
 8009da0:	b510      	push	{r4, lr}
 8009da2:	4614      	mov	r4, r2
                return DEVICE_INVALID_PARAMETER;

            //configure our head match...
            this->delimeters = delimeters;
 8009da4:	3010      	adds	r0, #16
 8009da6:	f7ff fe9c 	bl	8009ae2 <_ZN5codal13ManagedStringaSERKS0_>

            //block!
            if(mode == SYNC_SLEEP)
 8009daa:	2c02      	cmp	r4, #2
 8009dac:	d001      	beq.n	8009db2 <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x16>
                fiber_wait_for_event(DEVICE_ID_SERIAL, CODAL_SERIAL_EVT_DELIM_MATCH);

            return DEVICE_OK;
 8009dae:	2000      	movs	r0, #0
        }
 8009db0:	bd10      	pop	{r4, pc}
                fiber_wait_for_event(DEVICE_ID_SERIAL, CODAL_SERIAL_EVT_DELIM_MATCH);
 8009db2:	2101      	movs	r1, #1
 8009db4:	200c      	movs	r0, #12
 8009db6:	f7ff f987 	bl	80090c8 <_ZN5codal20fiber_wait_for_eventEtt>
            return DEVICE_OK;
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e7f8      	b.n	8009db0 <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x14>
                return DEVICE_INVALID_PARAMETER;
 8009dbe:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
        }
 8009dc2:	4770      	bx	lr

08009dc4 <_ZN5codal3_cm6Serial7rxInUseEv>:
          *
          * @note Only one fiber can call read at a time
          */
        int Serial::rxInUse()
        {
            return (status & CODAL_SERIAL_RX_IN_USE);
 8009dc4:	88c0      	ldrh	r0, [r0, #6]
        }
 8009dc6:	f000 0001 	and.w	r0, r0, #1
 8009dca:	4770      	bx	lr

08009dcc <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE>:
        {
 8009dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd0:	b089      	sub	sp, #36	; 0x24
 8009dd2:	af02      	add	r7, sp, #8
 8009dd4:	60b8      	str	r0, [r7, #8]
 8009dd6:	4688      	mov	r8, r1
 8009dd8:	4615      	mov	r5, r2
 8009dda:	607b      	str	r3, [r7, #4]
            if(rxInUse())
 8009ddc:	4608      	mov	r0, r1
 8009dde:	f7ff fff1 	bl	8009dc4 <_ZN5codal3_cm6Serial7rxInUseEv>
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	b990      	cbnz	r0, 8009e0c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x40>
            if(!(status & CODAL_SERIAL_RX_BUFF_INIT))
 8009de6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8009dea:	f013 0f04 	tst.w	r3, #4
 8009dee:	d104      	bne.n	8009dfa <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x2e>
                int result = initialiseRx();
 8009df0:	4640      	mov	r0, r8
 8009df2:	f7ff ff99 	bl	8009d28 <_ZN5codal3_cm6Serial12initialiseRxEv>
                if(result != DEVICE_OK)
 8009df6:	4601      	mov	r1, r0
 8009df8:	b960      	cbnz	r0, 8009e14 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x48>
            lockRx();
 8009dfa:	4640      	mov	r0, r8
 8009dfc:	f7ff ff8a 	bl	8009d14 <_ZN5codal3_cm6Serial6lockRxEv>
            int localTail = rxBuffTail;
 8009e00:	f8b8 a020 	ldrh.w	sl, [r8, #32]
 8009e04:	4656      	mov	r6, sl
            int foundIndex = -1;
 8009e06:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009e0a:	e063      	b.n	8009ed4 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x108>
                return ManagedString();
 8009e0c:	68b8      	ldr	r0, [r7, #8]
 8009e0e:	f7ff fe62 	bl	8009ad6 <_ZN5codal13ManagedStringC1Ev>
 8009e12:	e045      	b.n	8009ea0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>
                    return result;
 8009e14:	68b8      	ldr	r0, [r7, #8]
 8009e16:	f7ff fe2c 	bl	8009a72 <_ZN5codal13ManagedStringC1Ei>
 8009e1a:	e041      	b.n	8009ea0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>
            if(mode == SYNC_SPINWAIT)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d07b      	beq.n	8009f1a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x14e>
            if(mode == SYNC_SLEEP && foundIndex == -1)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	f000 8086 	beq.w	8009f36 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x16a>
            if(foundIndex >= 0)
 8009e2a:	f1b9 0f00 	cmp.w	r9, #0
 8009e2e:	f2c0 80ac 	blt.w	8009f8a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1be>
                return ManagedString((char *)localBuff, localBuffSize);
 8009e32:	466e      	mov	r6, sp
                int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 8009e34:	45d1      	cmp	r9, sl
 8009e36:	f280 80a5 	bge.w	8009f84 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1b8>
 8009e3a:	f898 401c 	ldrb.w	r4, [r8, #28]
 8009e3e:	eba4 040a 	sub.w	r4, r4, sl
 8009e42:	444c      	add	r4, r9
                uint8_t localBuff[localBuffSize + 1];
 8009e44:	f104 0308 	add.w	r3, r4, #8
 8009e48:	f023 0307 	bic.w	r3, r3, #7
 8009e4c:	ebad 0d03 	sub.w	sp, sp, r3
 8009e50:	ad02      	add	r5, sp, #8
 8009e52:	1c62      	adds	r2, r4, #1
 8009e54:	2100      	movs	r1, #0
 8009e56:	4628      	mov	r0, r5
 8009e58:	f7f8 fbb2 	bl	80025c0 <memset>
                circularCopy(rxBuff, rxBuffSize, localBuff, preservedTail, foundIndex);
 8009e5c:	f898 201c 	ldrb.w	r2, [r8, #28]
 8009e60:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8009e64:	fa1f f389 	uxth.w	r3, r9
 8009e68:	9301      	str	r3, [sp, #4]
 8009e6a:	f8cd a000 	str.w	sl, [sp]
 8009e6e:	462b      	mov	r3, r5
 8009e70:	4640      	mov	r0, r8
 8009e72:	f7ff ff77 	bl	8009d64 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt>
                rxBuffTail = (rxBuffTail + localBuffSize + 1) % rxBuffSize;
 8009e76:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 8009e7a:	4423      	add	r3, r4
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	f898 101c 	ldrb.w	r1, [r8, #28]
 8009e82:	fb93 f2f1 	sdiv	r2, r3, r1
 8009e86:	fb01 3312 	mls	r3, r1, r2, r3
 8009e8a:	f8a8 3020 	strh.w	r3, [r8, #32]
                unlockRx();
 8009e8e:	4640      	mov	r0, r8
 8009e90:	f7ff ff45 	bl	8009d1e <_ZN5codal3_cm6Serial8unlockRxEv>
                return ManagedString((char *)localBuff, localBuffSize);
 8009e94:	b222      	sxth	r2, r4
 8009e96:	4629      	mov	r1, r5
 8009e98:	68b8      	ldr	r0, [r7, #8]
 8009e9a:	f7ff fdfc 	bl	8009a96 <_ZN5codal13ManagedStringC1EPKcs>
 8009e9e:	46b5      	mov	sp, r6
        }
 8009ea0:	68b8      	ldr	r0, [r7, #8]
 8009ea2:	371c      	adds	r7, #28
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 8009eaa:	3401      	adds	r4, #1
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	dd07      	ble.n	8009ec6 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xfa>
                    if(delimeters.charAt(delimeterIterator) == c)
 8009eb6:	b221      	sxth	r1, r4
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f7ff fe21 	bl	8009b00 <_ZN5codal13ManagedString6charAtEs>
 8009ebe:	4558      	cmp	r0, fp
 8009ec0:	d1f3      	bne.n	8009eaa <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
                        foundIndex = localTail;
 8009ec2:	46b1      	mov	r9, r6
 8009ec4:	e7f1      	b.n	8009eaa <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
                localTail = (localTail + 1) % rxBuffSize;
 8009ec6:	3601      	adds	r6, #1
 8009ec8:	f898 301c 	ldrb.w	r3, [r8, #28]
 8009ecc:	fb96 f2f3 	sdiv	r2, r6, r3
 8009ed0:	fb03 6612 	mls	r6, r3, r2, r6
            while(localTail != rxBuffHead && foundIndex  == -1)
 8009ed4:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	42b3      	cmp	r3, r6
 8009edc:	d09e      	beq.n	8009e1c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x50>
 8009ede:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8009ee2:	d19b      	bne.n	8009e1c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x50>
                char c = rxBuff[localTail];
 8009ee4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009ee8:	f813 b006 	ldrb.w	fp, [r3, r6]
                for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 8009eec:	68fc      	ldr	r4, [r7, #12]
 8009eee:	e7dd      	b.n	8009eac <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xe0>
                    for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 8009ef0:	3401      	adds	r4, #1
 8009ef2:	682b      	ldr	r3, [r5, #0]
 8009ef4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009ef8:	42a3      	cmp	r3, r4
 8009efa:	dd07      	ble.n	8009f0c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x140>
                        if(delimeters.charAt(delimeterIterator) == c)
 8009efc:	b221      	sxth	r1, r4
 8009efe:	4628      	mov	r0, r5
 8009f00:	f7ff fdfe 	bl	8009b00 <_ZN5codal13ManagedString6charAtEs>
 8009f04:	4558      	cmp	r0, fp
 8009f06:	d1f3      	bne.n	8009ef0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x124>
                            foundIndex = localTail;
 8009f08:	46b1      	mov	r9, r6
 8009f0a:	e7f1      	b.n	8009ef0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x124>
                    localTail = (localTail + 1) % rxBuffSize;
 8009f0c:	3601      	adds	r6, #1
 8009f0e:	f898 301c 	ldrb.w	r3, [r8, #28]
 8009f12:	fb96 f2f3 	sdiv	r2, r6, r3
 8009f16:	fb03 6612 	mls	r6, r3, r2, r6
                while(foundIndex == -1)
 8009f1a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8009f1e:	d180      	bne.n	8009e22 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x56>
                    while(localTail == rxBuffHead);
 8009f20:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	42b3      	cmp	r3, r6
 8009f28:	d0fa      	beq.n	8009f20 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x154>
                    char c = rxBuff[localTail];
 8009f2a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009f2e:	f813 b006 	ldrb.w	fp, [r3, r6]
                    for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 8009f32:	68fc      	ldr	r4, [r7, #12]
 8009f34:	e7dd      	b.n	8009ef2 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x126>
            if(mode == SYNC_SLEEP && foundIndex == -1)
 8009f36:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8009f3a:	f47f af76 	bne.w	8009e2a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x5e>
                eventOn(delimeters, mode);
 8009f3e:	4629      	mov	r1, r5
 8009f40:	f107 0010 	add.w	r0, r7, #16
 8009f44:	f7ff fdbf 	bl	8009ac6 <_ZN5codal13ManagedStringC1ERKS0_>
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	f107 0110 	add.w	r1, r7, #16
 8009f4e:	4640      	mov	r0, r8
 8009f50:	f7ff ff24 	bl	8009d9c <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>
 8009f54:	f107 0010 	add.w	r0, r7, #16
 8009f58:	f7ff fd61 	bl	8009a1e <_ZN5codal13ManagedStringD1Ev>
                foundIndex = rxBuffHead - 1;
 8009f5c:	f8b8 901e 	ldrh.w	r9, [r8, #30]
 8009f60:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
                this->delimeters = ManagedString();
 8009f64:	f108 0410 	add.w	r4, r8, #16
 8009f68:	f107 0014 	add.w	r0, r7, #20
 8009f6c:	f7ff fdb3 	bl	8009ad6 <_ZN5codal13ManagedStringC1Ev>
 8009f70:	f107 0114 	add.w	r1, r7, #20
 8009f74:	4620      	mov	r0, r4
 8009f76:	f7ff fdb4 	bl	8009ae2 <_ZN5codal13ManagedStringaSERKS0_>
 8009f7a:	f107 0014 	add.w	r0, r7, #20
 8009f7e:	f7ff fd4e 	bl	8009a1e <_ZN5codal13ManagedStringD1Ev>
 8009f82:	e752      	b.n	8009e2a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x5e>
                int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 8009f84:	eba9 040a 	sub.w	r4, r9, sl
 8009f88:	e75c      	b.n	8009e44 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x78>
            unlockRx();
 8009f8a:	4640      	mov	r0, r8
 8009f8c:	f7ff fec7 	bl	8009d1e <_ZN5codal3_cm6Serial8unlockRxEv>
            return ManagedString();
 8009f90:	68b8      	ldr	r0, [r7, #8]
 8009f92:	f7ff fda0 	bl	8009ad6 <_ZN5codal13ManagedStringC1Ev>
 8009f96:	e783      	b.n	8009ea0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>

08009f98 <_GLOBAL__sub_I_restart_callback>:
}
 8009f98:	b508      	push	{r3, lr}
 8009f9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009f9e:	2001      	movs	r0, #1
 8009fa0:	f7fe f864 	bl	800806c <_Z41__static_initialization_and_destruction_0ii>
 8009fa4:	bd08      	pop	{r3, pc}

08009fa6 <_ZN5codal13STM32BluePill16periodicCallbackEv>:
    codal_dmesg_flush();
}

void STM32BluePill::periodicCallback() {
    //  TODO
}
 8009fa6:	4770      	bx	lr

08009fa8 <_ZN5codal13STM32BluePill12idleCallbackEv>:
void STM32BluePill::idleCallback() {
 8009fa8:	b508      	push	{r3, lr}
    codal_dmesg_flush();
 8009faa:	f7fd f81b 	bl	8006fe4 <codal_dmesg_flush>
}
 8009fae:	bd08      	pop	{r3, pc}

08009fb0 <_ZN13UARTInterfaceC1Ejj>:
}
 8009fb0:	4770      	bx	lr

08009fb2 <_GLOBAL__sub_I__ZN13UARTInterfaceC2Ejj>:
}
 8009fb2:	b508      	push	{r3, lr}
 8009fb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009fb8:	2001      	movs	r0, #1
 8009fba:	f7fe ff49 	bl	8008e50 <_Z41__static_initialization_and_destruction_0ii>
 8009fbe:	bd08      	pop	{r3, pc}

08009fc0 <_ZN5codal3_cm3I2C12setFrequencyEm>:
#ifdef TODO            
            i2c.Init.ClockSpeed = frequency;
            needsInit = true;
#endif  //  TODO
            return DEVICE_OK;
        }
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	4770      	bx	lr

08009fc4 <_ZN5codal3_cm3I2C5writeEtPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	4770      	bx	lr

08009fc8 <_ZN5codal3_cm3I2C4readEtPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 8009fc8:	2000      	movs	r0, #0
 8009fca:	4770      	bx	lr

08009fcc <_ZN5codal3_cm3I2C12readRegisterEthPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 8009fcc:	2000      	movs	r0, #0
 8009fce:	4770      	bx	lr

08009fd0 <_ZN5codal3_cm3SPI12setFrequencyEm>:

        int SPI::setFrequency(uint32_t frequency) {
            freq = frequency;
 8009fd0:	6141      	str	r1, [r0, #20]
            needsInit = true;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	f880 3020 	strb.w	r3, [r0, #32]
            return DEVICE_OK;
        }
 8009fd8:	2000      	movs	r0, #0
 8009fda:	4770      	bx	lr

08009fdc <_ZN5codal3_cm3SPI5writeEi>:
            CODAL_ASSERT(bits == 8);
            return DEVICE_OK;
        }

        int SPI::write(int data) {
            rxCh = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
            txCh = data;
 8009fe2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
#ifdef TODO
            if (transfer(&txCh, 1, &rxCh, 1) < 0) { return DEVICE_SPI_ERROR; }
#endif  //  TODO
            return rxCh;
        }
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	4770      	bx	lr

08009fea <_ZN5codal3_cm3SPI8transferEPKhmPhm>:
            LOG("SPI ->");
            schedule();
            LOG("SPI <-");
            return res;
#endif  //  TODO
        }
 8009fea:	2000      	movs	r0, #0
 8009fec:	4770      	bx	lr

08009fee <_ZN5codal3_cm3SPI7setModeEii>:
        int SPI::setMode(int mode, int bits) {
 8009fee:	b508      	push	{r3, lr}
            needsInit = true;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	f880 3020 	strb.w	r3, [r0, #32]
            CODAL_ASSERT(bits == 8);
 8009ff6:	2a08      	cmp	r2, #8
 8009ff8:	d003      	beq.n	800a002 <_ZN5codal3_cm3SPI7setModeEii+0x14>
 8009ffa:	f240 308d 	movw	r0, #909	; 0x38d
 8009ffe:	f7f6 fc71 	bl	80008e4 <target_panic>
        }
 800a002:	2000      	movs	r0, #0
 800a004:	bd08      	pop	{r3, pc}

0800a006 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>:
        uint32_t _codal_setup_pin(Pin *p, uint32_t prev, const PinMap *map) {
 800a006:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            if (!p) { return 0; }
 800a00a:	b310      	cbz	r0, 800a052 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4c>
 800a00c:	4605      	mov	r5, r0
 800a00e:	4614      	mov	r4, r2
 800a010:	460f      	mov	r7, r1
            auto pin = p->name;
 800a012:	f890 8010 	ldrb.w	r8, [r0, #16]
            CmPeripheral peri = pinmap_peripheral(pin, map);
 800a016:	4611      	mov	r1, r2
 800a018:	4640      	mov	r0, r8
 800a01a:	f7fe ffb1 	bl	8008f80 <pinmap_peripheral>
 800a01e:	4606      	mov	r6, r0
            if (peri == CM_PERIPHERAL_NC) { return peri; }
 800a020:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a024:	d016      	beq.n	800a054 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4e>
            auto mode = pinmap_mode(pin, map);
 800a026:	4621      	mov	r1, r4
 800a028:	4640      	mov	r0, r8
 800a02a:	f7fe ffbf 	bl	8008fac <pinmap_mode>
 800a02e:	4681      	mov	r9, r0
            auto cnf = pinmap_cnf(pin, map);
 800a030:	4621      	mov	r1, r4
 800a032:	4640      	mov	r0, r8
 800a034:	f7fe ffce 	bl	8008fd4 <pinmap_cnf>
            p->setup(mode, cnf);
 800a038:	4602      	mov	r2, r0
 800a03a:	4649      	mov	r1, r9
 800a03c:	4628      	mov	r0, r5
 800a03e:	f7ff fe15 	bl	8009c6c <_ZN5codal3_cm3Pin5setupEhh>
            CODAL_ASSERT(!prev || prev == peri);
 800a042:	b13f      	cbz	r7, 800a054 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4e>
 800a044:	42be      	cmp	r6, r7
 800a046:	d005      	beq.n	800a054 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4e>
 800a048:	f240 308d 	movw	r0, #909	; 0x38d
 800a04c:	f7f6 fc4a 	bl	80008e4 <target_panic>
 800a050:	e000      	b.n	800a054 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4e>
            if (!p) { return 0; }
 800a052:	2600      	movs	r6, #0
        }
 800a054:	4630      	mov	r0, r6
 800a056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800a05a <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_>:

        int SPI::startTransfer(const uint8_t *txBuffer, uint32_t txSize, uint8_t *rxBuffer,
                                uint32_t rxSize, PVoidCallback doneHandler, void *arg) {
 800a05a:	b538      	push	{r3, r4, r5, lr}
 800a05c:	4604      	mov	r4, r0
 800a05e:	4615      	mov	r5, r2
            int res = HAL_OK;
            init();
 800a060:	f7fe ff12 	bl	8008e88 <_ZN5codal3_cm3SPI4initEv>
            ////LOG("SPI start %p/%d %p/%d D=%p", txBuffer, txSize, rxBuffer, rxSize, doneHandler);
            this->doneHandler = doneHandler;
 800a064:	9b05      	ldr	r3, [sp, #20]
 800a066:	61a3      	str	r3, [r4, #24]
            this->doneHandlerArg = arg;
 800a068:	9b06      	ldr	r3, [sp, #24]
 800a06a:	61e3      	str	r3, [r4, #28]
            if (txSize && rxSize) {
 800a06c:	b11d      	cbz	r5, 800a076 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x1c>
 800a06e:	9b04      	ldr	r3, [sp, #16]
 800a070:	b10b      	cbz	r3, 800a076 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x1c>
                CODAL_ASSERT(txSize == rxSize); // we could support this if needed
 800a072:	429d      	cmp	r5, r3
 800a074:	d101      	bne.n	800a07a <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x20>
            } else {
                return 0; // nothing to do
            }
            CODAL_ASSERT(res == HAL_OK);
            return 0;
        }
 800a076:	2000      	movs	r0, #0
 800a078:	bd38      	pop	{r3, r4, r5, pc}
                CODAL_ASSERT(txSize == rxSize); // we could support this if needed
 800a07a:	f240 308d 	movw	r0, #909	; 0x38d
 800a07e:	f7f6 fc31 	bl	80008e4 <target_panic>
 800a082:	e7f8      	b.n	800a076 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x1c>

0800a084 <_ZL22pinmap_find_peripheralhPK6PinMap>:

static CmPeripheral pinmap_find_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    while (map->pin != CM_PIN_NC) {
 800a084:	780b      	ldrb	r3, [r1, #0]
 800a086:	2bff      	cmp	r3, #255	; 0xff
 800a088:	d005      	beq.n	800a096 <_ZL22pinmap_find_peripheralhPK6PinMap+0x12>
        if (map->pin == pin) { return map->peripheral; }
 800a08a:	4283      	cmp	r3, r0
 800a08c:	d001      	beq.n	800a092 <_ZL22pinmap_find_peripheralhPK6PinMap+0xe>
        map++;
 800a08e:	310c      	adds	r1, #12
    while (map->pin != CM_PIN_NC) {
 800a090:	e7f8      	b.n	800a084 <_ZL22pinmap_find_peripheralhPK6PinMap>
        if (map->pin == pin) { return map->peripheral; }
 800a092:	6848      	ldr	r0, [r1, #4]
 800a094:	4770      	bx	lr
    }
    return CM_PERIPHERAL_NC;
 800a096:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800a09a:	4770      	bx	lr

0800a09c <_ZL16pinmap_find_modehPK6PinMap>:

static CmPinMode pinmap_find_mode(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin mode for the peripheral e.g. GPIO_MODE_OUTPUT_2_MHZ.
    while (map->pin != CM_PIN_NC) {
 800a09c:	780b      	ldrb	r3, [r1, #0]
 800a09e:	2bff      	cmp	r3, #255	; 0xff
 800a0a0:	d005      	beq.n	800a0ae <_ZL16pinmap_find_modehPK6PinMap+0x12>
        if (map->pin == pin) { return map->mode; }
 800a0a2:	4283      	cmp	r3, r0
 800a0a4:	d001      	beq.n	800a0aa <_ZL16pinmap_find_modehPK6PinMap+0xe>
        map++;
 800a0a6:	310c      	adds	r1, #12
    while (map->pin != CM_PIN_NC) {
 800a0a8:	e7f8      	b.n	800a09c <_ZL16pinmap_find_modehPK6PinMap>
        if (map->pin == pin) { return map->mode; }
 800a0aa:	7a48      	ldrb	r0, [r1, #9]
 800a0ac:	4770      	bx	lr
    }
    return CM_PINMODE_NC;
 800a0ae:	20ff      	movs	r0, #255	; 0xff
}
 800a0b0:	4770      	bx	lr

0800a0b2 <_ZL15pinmap_find_cnfhPK6PinMap>:

static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin config for the peripheral e.g. GPIO_CNF_OUTPUT_PUSHPULL.
    while (map->pin != CM_PIN_NC) {
 800a0b2:	780b      	ldrb	r3, [r1, #0]
 800a0b4:	2bff      	cmp	r3, #255	; 0xff
 800a0b6:	d005      	beq.n	800a0c4 <_ZL15pinmap_find_cnfhPK6PinMap+0x12>
        if (map->pin == pin) { return map->cnf; }
 800a0b8:	4283      	cmp	r3, r0
 800a0ba:	d001      	beq.n	800a0c0 <_ZL15pinmap_find_cnfhPK6PinMap+0xe>
        map++;
 800a0bc:	310c      	adds	r1, #12
    while (map->pin != CM_PIN_NC) {
 800a0be:	e7f8      	b.n	800a0b2 <_ZL15pinmap_find_cnfhPK6PinMap>
        if (map->pin == pin) { return map->cnf; }
 800a0c0:	7a88      	ldrb	r0, [r1, #10]
 800a0c2:	4770      	bx	lr
    }
    return CM_PINCNF_NC;
 800a0c4:	20ff      	movs	r0, #255	; 0xff
}
 800a0c6:	4770      	bx	lr

0800a0c8 <_ZN5codal3I2C12setFrequencyEm>:
  * @param frequency The bus frequency in hertz
  */
int I2C::setFrequency(uint32_t frequency)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800a0c8:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a0cc:	4770      	bx	lr

0800a0ce <_ZN5codal3I2C5startEv>:
 * Issues a START condition on the I2C bus
 */
int I2C::start()
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800a0ce:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a0d2:	4770      	bx	lr

0800a0d4 <_ZN5codal3I2C4stopEv>:
 * Issues a STOP condition on the I2C bus
 */
int I2C::stop()
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800a0d4:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a0d8:	4770      	bx	lr

0800a0da <_ZN5codal3I2C5writeEh>:
* @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
*/
int I2C::write(uint8_t data)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800a0da:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a0de:	4770      	bx	lr

0800a0e0 <_ZN5codal3I2C4readENS_15AcknowledgeTypeE>:
* @return the byte read from the I2C bus, or DEVICE_I2C_ERROR if the the write request failed.
*/
int I2C::read(AcknowledgeType ack)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800a0e0:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a0e4:	4770      	bx	lr

0800a0e6 <_ZN5codal3I2C5writeEtPhib>:
  * @param len the number of bytes to write
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::write(uint16_t address, uint8_t *data, int len, bool repeated)
  {
 800a0e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0ea:	f89d 8020 	ldrb.w	r8, [sp, #32]
      if (data == NULL || len <= 0)
 800a0ee:	b31a      	cbz	r2, 800a138 <_ZN5codal3I2C5writeEtPhib+0x52>
 800a0f0:	4617      	mov	r7, r2
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	dd23      	ble.n	800a13e <_ZN5codal3I2C5writeEtPhib+0x58>
 800a0f6:	4699      	mov	r9, r3
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	4605      	mov	r5, r0
          return DEVICE_INVALID_PARAMETER; // Send a start condition

      start();
 800a0fc:	6803      	ldr	r3, [r0, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	4798      	blx	r3

      // Send the address of the slave, with a write bit set.
      write((uint8_t)address);
 800a102:	682b      	ldr	r3, [r5, #0]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	b2e1      	uxtb	r1, r4
 800a108:	4628      	mov	r0, r5
 800a10a:	4798      	blx	r3

      // Send the body of the data
      for (int i = 0; i < len; i++)
 800a10c:	2400      	movs	r4, #0
 800a10e:	454c      	cmp	r4, r9
 800a110:	da06      	bge.n	800a120 <_ZN5codal3I2C5writeEtPhib+0x3a>
          write(data[i]);
 800a112:	6829      	ldr	r1, [r5, #0]
 800a114:	68ce      	ldr	r6, [r1, #12]
 800a116:	5d39      	ldrb	r1, [r7, r4]
 800a118:	4628      	mov	r0, r5
 800a11a:	47b0      	blx	r6
      for (int i = 0; i < len; i++)
 800a11c:	3401      	adds	r4, #1
 800a11e:	e7f6      	b.n	800a10e <_ZN5codal3I2C5writeEtPhib+0x28>

      // Send a stop condition
      if (!repeated)
 800a120:	f1b8 0f00 	cmp.w	r8, #0
 800a124:	d002      	beq.n	800a12c <_ZN5codal3I2C5writeEtPhib+0x46>
          stop();

      return DEVICE_OK;
 800a126:	2000      	movs	r0, #0
  }
 800a128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          stop();
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	4628      	mov	r0, r5
 800a132:	4798      	blx	r3
      return DEVICE_OK;
 800a134:	2000      	movs	r0, #0
 800a136:	e7f7      	b.n	800a128 <_ZN5codal3I2C5writeEtPhib+0x42>
          return DEVICE_INVALID_PARAMETER; // Send a start condition
 800a138:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800a13c:	e7f4      	b.n	800a128 <_ZN5codal3I2C5writeEtPhib+0x42>
 800a13e:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800a142:	e7f1      	b.n	800a128 <_ZN5codal3I2C5writeEtPhib+0x42>

0800a144 <_ZN5codal3I2C13writeRegisterEthh>:
  * @param value The value to write.
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::writeRegister(uint16_t address, uint8_t reg, uint8_t value)
  {
 800a144:	b510      	push	{r4, lr}
 800a146:	b084      	sub	sp, #16
      uint8_t command[2];
      command[0] = reg;
 800a148:	f88d 200c 	strb.w	r2, [sp, #12]
      command[1] = value;
 800a14c:	f88d 300d 	strb.w	r3, [sp, #13]

      return write(address, command, 2);
 800a150:	6803      	ldr	r3, [r0, #0]
 800a152:	2200      	movs	r2, #0
 800a154:	9200      	str	r2, [sp, #0]
 800a156:	695c      	ldr	r4, [r3, #20]
 800a158:	2302      	movs	r3, #2
 800a15a:	aa03      	add	r2, sp, #12
 800a15c:	47a0      	blx	r4
}
 800a15e:	b004      	add	sp, #16
 800a160:	bd10      	pop	{r4, pc}

0800a162 <_ZN5codal3I2C4readEtPhib>:
* @param len the number of bytes to read into the buffer
*
* @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::read(uint16_t address, uint8_t *data, int len, bool repeated)
{
 800a162:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a166:	f89d 9020 	ldrb.w	r9, [sp, #32]
    int i = 0;

    if (data == NULL || len <= 0)
 800a16a:	2a00      	cmp	r2, #0
 800a16c:	d02f      	beq.n	800a1ce <_ZN5codal3I2C4readEtPhib+0x6c>
 800a16e:	4690      	mov	r8, r2
 800a170:	2b00      	cmp	r3, #0
 800a172:	dd2f      	ble.n	800a1d4 <_ZN5codal3I2C4readEtPhib+0x72>
 800a174:	461f      	mov	r7, r3
 800a176:	460c      	mov	r4, r1
 800a178:	4605      	mov	r5, r0
        return DEVICE_INVALID_PARAMETER;

    // Send a start condition
    start();
 800a17a:	6803      	ldr	r3, [r0, #0]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	4798      	blx	r3

    // Send the address of the slave, with a read bit set.
    write((uint8_t)(address | 0x01));
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	f044 0101 	orr.w	r1, r4, #1
 800a188:	b2c9      	uxtb	r1, r1
 800a18a:	4628      	mov	r0, r5
 800a18c:	4798      	blx	r3

    // Read the body of the data
    for (i = 0; i < len-1; i++)
 800a18e:	2400      	movs	r4, #0
 800a190:	1e79      	subs	r1, r7, #1
 800a192:	42a1      	cmp	r1, r4
 800a194:	dd08      	ble.n	800a1a8 <_ZN5codal3I2C4readEtPhib+0x46>
        data[i] = read();
 800a196:	6829      	ldr	r1, [r5, #0]
 800a198:	690e      	ldr	r6, [r1, #16]
 800a19a:	2100      	movs	r1, #0
 800a19c:	4628      	mov	r0, r5
 800a19e:	47b0      	blx	r6
 800a1a0:	f808 0004 	strb.w	r0, [r8, r4]
    for (i = 0; i < len-1; i++)
 800a1a4:	3401      	adds	r4, #1
 800a1a6:	e7f3      	b.n	800a190 <_ZN5codal3I2C4readEtPhib+0x2e>

    data[i] = read(NACK);
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	4798      	blx	r3
 800a1b2:	f808 0004 	strb.w	r0, [r8, r4]

    // Send a stop condition
    if (!repeated)
 800a1b6:	f1b9 0f00 	cmp.w	r9, #0
 800a1ba:	d002      	beq.n	800a1c2 <_ZN5codal3I2C4readEtPhib+0x60>
        stop();

    return DEVICE_OK;
 800a1bc:	2000      	movs	r0, #0
}
 800a1be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        stop();
 800a1c2:	682b      	ldr	r3, [r5, #0]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	4798      	blx	r3
    return DEVICE_OK;
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	e7f7      	b.n	800a1be <_ZN5codal3I2C4readEtPhib+0x5c>
        return DEVICE_INVALID_PARAMETER;
 800a1ce:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800a1d2:	e7f4      	b.n	800a1be <_ZN5codal3I2C4readEtPhib+0x5c>
 800a1d4:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800a1d8:	e7f1      	b.n	800a1be <_ZN5codal3I2C4readEtPhib+0x5c>

0800a1da <_ZN5codal3I2C5writeEth>:
  {
 800a1da:	b530      	push	{r4, r5, lr}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	ac04      	add	r4, sp, #16
 800a1e0:	f804 2d01 	strb.w	r2, [r4, #-1]!
      return write(address, &data, 1);
 800a1e4:	6803      	ldr	r3, [r0, #0]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	9200      	str	r2, [sp, #0]
 800a1ea:	695d      	ldr	r5, [r3, #20]
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	47a8      	blx	r5
  }
 800a1f2:	b005      	add	sp, #20
 800a1f4:	bd30      	pop	{r4, r5, pc}

0800a1f6 <_ZN5codal3I2C12readRegisterEthPhib>:
* @param repeated Use a repeated START/START/STOP transaction if true, or independent START/STOP/START/STOP transactions if fasle. Default: true
*
* @return DEVICE_OK or DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::readRegister(uint16_t address, uint8_t reg, uint8_t *data, int length, bool repeated)
{
 800a1f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1f8:	b085      	sub	sp, #20
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	460d      	mov	r5, r1
 800a1fe:	461e      	mov	r6, r3
 800a200:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800a204:	f88d 200f 	strb.w	r2, [sp, #15]
    int result;

    if (repeated)
 800a208:	b14b      	cbz	r3, 800a21e <_ZN5codal3I2C12readRegisterEthPhib+0x28>
        result = write(address, &reg, 1, true);
 800a20a:	6803      	ldr	r3, [r0, #0]
 800a20c:	695f      	ldr	r7, [r3, #20]
 800a20e:	2301      	movs	r3, #1
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	f10d 020f 	add.w	r2, sp, #15
 800a216:	47b8      	blx	r7
    else
        result = write(address, reg);

    if (result != DEVICE_OK)
 800a218:	b130      	cbz	r0, 800a228 <_ZN5codal3I2C12readRegisterEthPhib+0x32>
    result = read(address, data, length);
    if (result != DEVICE_OK)
        return result;

    return DEVICE_OK;
}
 800a21a:	b005      	add	sp, #20
 800a21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        result = write(address, reg);
 800a21e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800a222:	f7ff ffda 	bl	800a1da <_ZN5codal3I2C5writeEth>
 800a226:	e7f7      	b.n	800a218 <_ZN5codal3I2C12readRegisterEthPhib+0x22>
    result = read(address, data, length);
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	69df      	ldr	r7, [r3, #28]
 800a22c:	2300      	movs	r3, #0
 800a22e:	9300      	str	r3, [sp, #0]
 800a230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a232:	4632      	mov	r2, r6
 800a234:	4629      	mov	r1, r5
 800a236:	4620      	mov	r0, r4
 800a238:	47b8      	blx	r7
 800a23a:	e7ee      	b.n	800a21a <_ZN5codal3I2C12readRegisterEthPhib+0x24>

0800a23c <_ZTVN5codal14CodalComponentE>:
	...
 800a244:	6c9d 0800 9009 0800 900b 0800 6d19 0800     .l...........m..
 800a254:	6d31 0800 6573 2074 656c 0064 6174 6772     1m..set led.targ
 800a264:	7465 7720 6961 0074 6c73 6565 0070 0000     et wait.sleep...
 800a274:	6f6c 706f 0000 0000 6c73 0070 7420 0020     loop....slp. t .
 800a284:	202c 6c61 206d 0000                         , alm ..

0800a28c <_ZTVN5codal6SerialE>:
	...
 800a294:	6c9d 0800 9009 0800 900b 0800 0000 0000     .l..............
 800a2a4:	0000 0000 2ba5 0800 2ba5 0800 2ba5 0800     .....+...+...+..
 800a2b4:	2ba5 0800 2ba5 0800 2ba5 0800 931f 0800     .+...+...+......

0800a2c4 <_ZTVN5codal5TimerE>:
	...
 800a2cc:	2ba5 0800 2ba5 0800 94f5 0800 94eb 0800     .+...+..........

0800a2dc <_ZTVN5codal10EventModelE>:
	...
 800a2e4:	78b9 0800 78cd 0800 78d5 0800               .x...x...x..

0800a2f0 <_ZTVN5codal10MessageBusE>:
	...
 800a2f8:	98b5 0800 78dd 0800 9771 0800 9695 0800     .....x..q.......
 800a308:	7b8d 0800 9995 0800 fff8 ffff 0000 0000     .{..............
 800a318:	6c9d 0800 9009 0800 900b 0800 998d 0800     .l..............
 800a328:	99a7 0800                                   ....

0800a32c <_ZL9emptyData>:
 800a32c:	ffff 0000 6970 206e 0000 0000               ....pin ....

0800a338 <_ZTVN5codal3_cm3PinE>:
	...
 800a340:	7ced 0800 9c15 0800 9c19 0800 7ca5 0800     .|...........|..
 800a350:	7d81 0800 9c2d 0800 9c31 0800 9c3f 0800     .}..-...1...?...
 800a360:	9c4d 0800 9c59 0800 7cc5 0800 9c03 0800     M...Y....|......
 800a370:	9cab 0800 9c09 0800 7ccd 0800 7cd5 0800     .........|...|..
 800a380:	9c67 0800 9c0f 0800 9ccf 0800               g...........

0800a38c <_ZTVN5codal3_cm6SerialE>:
	...
 800a394:	6c9d 0800 9009 0800 900b 0800 7df9 0800     .l...........}..
 800a3a4:	7e0d 0800 9cfb 0800 9cff 0800 9d03 0800     .~..............
 800a3b4:	9d07 0800 9d0b 0800 9d0f 0800 9dcd 0800     ................
 800a3c4:	7973 636e 2021 0000 6974 656d 2072 6e69     sync! ..timer in
 800a3d4:	7469 0000 7274 6769 6567 4972 206e 3462     it..triggerIn b4
 800a3e4:	6920 696e 2174 0000                          init!..

0800a3ec <_ZTVN5codal3_cm5TimerE>:
	...
 800a3f4:	7ebd 0800 7ee1 0800 94f5 0800 94eb 0800     .~...~..........
 800a404:	2a2a 202a 7061 2070 7362 2f73 6164 6174     *** app bss/data
 800a414:	6620 6961 656c 2c64 6220 7373 745f 7365      failed, bss_tes
 800a424:	2074 203d 0000 0000 202c 6164 6174 745f     t = ...., data_t
 800a434:	7365 2074 203d 0000 6c66 7375 2068 6174     est = ..flush ta
 800a444:	6b73 0000 6572 7473 7261 2074 6168 646e     sk..restart hand
 800a454:	656c 0072 6572 7473 7261 6974 676e 2e2e     ler.restarting..
 800a464:	002e 0000 6f64 656e 0000 0000 6572 7473     ....done....rest
 800a474:	7261 2074 6163 6c6c 6162 6b63 0000 0000     art callback....
 800a484:	2a2a 202a 5245 4f52 3a52 6d20 7369 6973     *** ERROR: missi
 800a494:	676e 6520 6576 746e 6220 7375 0000 0000     ng event bus....
 800a4a4:	2a2a 202a 5245 4f52 3a52 7520 616e 6c62     *** ERROR: unabl
 800a4b4:	2065 6f74 7320 6e65 2064 6572 7473 7261     e to send restar
 800a4c4:	2074 7665 6e65 2074 0000 0000 6f6e 7320     t event ....no s
 800a4d4:	6863 6465 6c75 7265 202c 7473 7261 2074     cheduler, start 
 800a4e4:	6762 7420 7361 736b 6c20 7461 7265 0000     bg tasks later..
 800a4f4:	7473 7261 2074 6762 7420 7361 736b 0000     start bg tasks..
 800a504:	2a2a 202a 5245 4f52 3a52 6320 6572 7461     *** ERROR: creat
 800a514:	2065 6966 7262 2065 6166 6c69 6465 0000     e fibre failed..
 800a524:	2a2a 202a 5245 4f52 3a52 7520 616e 6c62     *** ERROR: unabl
 800a534:	2065 6f74 6c20 7369 6574 206e 6f66 2072     e to listen for 
 800a544:	6572 7473 7261 2074 7665 6e65 2074 0000     restart event ..
 800a554:	6c62 6575 6970 6c6c 6920 696e 2074 6373     bluepill init sc
 800a564:	6568 7564 656c 0072 6c62 6575 6970 6c6c     heduler.bluepill
 800a574:	6920 696e 2074 6f63 706d 6e6f 6e65 7374      init components
 800a584:	0000 0000 6c62 6575 6970 6c6c 6920 696e     ....bluepill ini
 800a594:	2074 6b6f 0000 0000 6c62 6575 6970 6c6c     t ok....bluepill
 800a5a4:	6320 6e6f 7473 7572 7463 0000                construct..

0800a5b0 <_ZTVN5codal13STM32BluePillE>:
	...
 800a5b8:	81d1 0800 9fa7 0800 9fa9 0800 6dc5 0800     .............m..
 800a5c8:	6e11 0800                                   .n..

0800a5cc <PinMap_SPI_MISO>:
 800a5cc:	0068 0000 3000 4001 0000 0001 0070 0000     h....0.@....p...
 800a5dc:	3800 4000 0000 0001 0074 0000 3c00 4000     .8.@....t....<.@
 800a5ec:	0000 0001 006c 0000 3000 4001 0001 0001     ....l....0.@....
 800a5fc:	0078 0000 3c00 4000 0001 0001 00ff 0000     x....<.@........
 800a60c:	ffff ffff ff00 00ff                         ........

0800a614 <PinMap_SPI_MOSI>:
 800a614:	0069 0000 3000 4001 0300 0002 0071 0000     i....0.@....q...
 800a624:	3800 4000 0300 0002 0075 0000 3c00 4000     .8.@....u....<.@
 800a634:	0300 0002 006d 0000 3000 4001 0301 0002     ....m....0.@....
 800a644:	0079 0000 3c00 4000 0301 0002 00ff 0000     y....<.@........
 800a654:	ffff ffff ff00 00ff                         ........

0800a65c <PinMap_SPI_NSS>:
 800a65c:	0066 0000 3000 4001 0300 0002 006e 0000     f....0.@....n...
 800a66c:	3800 4000 0300 0002 0072 0000 3c00 4000     .8.@....r....<.@
 800a67c:	0300 0002 006a 0000 3000 4001 0301 0002     ....j....0.@....
 800a68c:	0076 0000 3c00 4000 0301 0002 00ff 0000     v....<.@........
 800a69c:	ffff ffff ff00 00ff                         ........

0800a6a4 <PinMap_SPI_SCK>:
 800a6a4:	0067 0000 3000 4001 0300 0002 006f 0000     g....0.@....o...
 800a6b4:	3800 4000 0300 0002 0073 0000 3c00 4000     .8.@....s....<.@
 800a6c4:	0300 0002 006b 0000 3000 4001 0301 0002     ....k....0.@....
 800a6d4:	0077 0000 3c00 4000 0301 0002 00ff 0000     w....<.@........
 800a6e4:	ffff ffff ff00 00ff                         ........

0800a6ec <_ZTVN5codal3_cm3I2CE>:
	...
 800a6f4:	9fc1 0800 a0cf 0800 a0d5 0800 a0db 0800     ................
 800a704:	a0e1 0800 9fc5 0800 a145 0800 9fc9 0800     ........E.......
 800a714:	9fcd 0800 5053 2049 6e69 7473 6e61 6563     ....SPI instance
 800a724:	2520 0070 2a2a 202a 6f63 6164 206c 7073      %p.*** codal sp
 800a734:	2069 6f6d 6973 0020 6d20 7369 206f 0000     i mosi . miso ..
 800a744:	7320 6c63 206b 0000 7073 2069 6f6d 6973      sclk ..spi mosi
 800a754:	0020 0000 6e20 7373 0020 0000                ... nss ...

0800a760 <_ZTVN5codal3_cm3SPIE>:
	...
 800a768:	9fd1 0800 9fef 0800 9fdd 0800 9feb 0800     ................
 800a778:	a05b 0800 6970 6d6e 7061 6e20 746f 6620     [...pinmap not f
 800a788:	756f 646e 6620 726f 6320 666e 0000 0000     ound for cnf....
 800a798:	6970 6d6e 7061 6e20 746f 6620 756f 646e     pinmap not found
 800a7a8:	6620 726f 6d20 646f 0065 0000 6970 6d6e      for mode...pinm
 800a7b8:	7061 6e20 746f 6620 756f 646e 6620 726f     ap not found for
 800a7c8:	7020 7265 7069 6568 6172 006c                peripheral.

0800a7d4 <_ZTVN5codal3I2CE>:
	...
 800a7dc:	a0c9 0800 a0cf 0800 a0d5 0800 a0db 0800     ................
 800a7ec:	a0e1 0800 a0e7 0800 a145 0800 a163 0800     ........E...c...
 800a7fc:	a1f7 0800                                   ....
