
.pioenvs/bluepill_f103c8/firmware.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .base_text	00000000 .base_text
08001000 l    d  .boot_text	00000000 .boot_text
08007800 l    d  .text	00000000 .text
08002418 l    d  .boot_preinit_array	00000000 .boot_preinit_array
0800b400 l    d  .preinit_array	00000000 .preinit_array
08002418 l    d  .boot_init_array	00000000 .boot_init_array
0800b400 l    d  .init_array	00000000 .init_array
08002418 l    d  .boot_fini_array	00000000 .boot_fini_array
0800b414 l    d  .fini_array	00000000 .fini_array
20000800 l    d  .boot_data	00000000 .boot_data
20001800 l    d  .data	00000000 .data
2000081c l    d  .boot_bss	00000000 .boot_bss
20001808 l    d  .bss	00000000 .bss
200047bc l    d  .boot_buf	00000000 .boot_buf
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 vector.c
00000000 l    df *ABS*	00000000 baseloader.c
2000081c l     O .boot_bss	00000004 dest
20000820 l     O .boot_bss	00000004 erase_end.5177
20000824 l     O .boot_bss	00000004 erase_start.5176
20000828 l     O .boot_bss	00000004 flash_end.5178
2000082c l     O .boot_bss	00000004 half_word_count
20000830 l     O .boot_bss	00000004 src
20000834 l     O .boot_bss	00000004 test_dest
20000838 l     O .boot_bss	00000004 test_src
20000800 l     O .boot_data	00000001 should_disable_interrupts
20000801 l     O .boot_data	00000001 verified
00000000 l    df *ABS*	00000000 timer.cpp
08002128 l     F .boot_text	00000074 _ZL25custom_rtc_awake_from_off7rcc_osc
0800219c l     F .boot_text	00000090 _ZL9rtc_setupv
20000b34 l     O .boot_bss	00000004 _ZL10alarmCount
20000b38 l     O .boot_bss	00000004 _ZL8tickFunc
20000b3c l     O .boot_bss	00000004 _ZL9alarmFunc
20000b40 l     O .boot_bss	00000004 _ZL9tickCount
20000b45 l     O .boot_bss	00000001 _ZZ20platform_start_timerE12timerStarted
00000000 l    df *ABS*	00000000 uartint.cpp
08009a50 l     F .text	0000001c _Z41__static_initialization_and_destruction_0ii
0800abb2 l     F .text	0000000e _GLOBAL__sub_I__ZN13UARTInterfaceC2Ejj
20002994 l     O .bss	0000006c _ZL13responseQueue
00000000 l    df *ABS*	00000000 reset_handler.c
080007d8 l     F .base_text	00000050 pre_main
00000000 l    df *ABS*	00000000 codal_target_hal.cpp
08001000 l     F .boot_text	00000024 _ZL11timer_alarmv
08001024 l     F .boot_text	00000070 _ZL15poll_bootloaderv
08001094 l     F .boot_text	00000018 _ZL10timer_tickv
080010ac l     F .boot_text	0000002c _ZL11os_schedulev
20000854 l     O .boot_bss	00000001 _ZL11initialised
2000083c l     O .boot_bss	00000004 _ZL11poll_status
20000840 l     O .boot_bss	00000004 _ZL13tick_callback
20000844 l     O .boot_bss	00000004 _ZL14alarm_callback
20000848 l     O .boot_bss	00000004 _ZL16prev_poll_status
2000084c l     O .boot_bss	00000004 _ZL19bootloader_callback
00000000 l    df *ABS*	00000000 asm/CortexContextSwitch.s.o
080012ac l       .boot_text	00000000 store_context_complete
080012be l       .boot_text	00000000 store_stack_complete
080012b2 l       .boot_text	00000000 store_stack
080012d8 l       .boot_text	00000000 restore_stack_complete
080012cc l       .boot_text	00000000 restore_stack
0800132c l       .boot_text	00000000 store_stack1
00000000 l    df *ABS*	00000000 rcc.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 pwr_common_all.c
00000000 l    df *ABS*	00000000 exti_common_all.c
00000000 l    df *ABS*	00000000 flash_common_f01.c
00000000 l    df *ABS*	00000000 scb.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 gpio_common_all.c
00000000 l    df *ABS*	00000000 usart_common_f124.c
00000000 l    df *ABS*	00000000 rcc_common_all.c
00000000 l    df *ABS*	00000000 nvic.c
00000000 l    df *ABS*	00000000 os_event.c
20000858 l     O .boot_bss	0000000e eventList
20000916 l     O .boot_bss	00000001 nEvents
20000818 l     O .boot_data	00000001 lastSignaledEvent
00000000 l    df *ABS*	00000000 os_kernel.c
00000000 l    df *ABS*	00000000 os_msgqueue.c
20000868 l     O .boot_bss	00000020 msgQList
20000917 l     O .boot_bss	00000001 nQueues
00000000 l    df *ABS*	00000000 os_sem.c
20000918 l     O .boot_bss	00000001 nSemaphores
00000000 l    df *ABS*	00000000 os_task.c
08001a78 l     F .boot_text	0000001c os_task_wait_queue_empty
08001a94 l     F .boot_text	00000014 task_ready_set
20000919 l     O .boot_bss	00000001 nTasks
20000888 l     O .boot_bss	0000008c task_list
00000000 l    df *ABS*	00000000 os_assert.c
20000914 l     O .boot_bss	00000002 l.4990
00000000 l    df *ABS*	00000000 os_cbk.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 logger.cpp
08001d90 l     F .boot_text	00000024 _ZL10__semihostiPv
08001f98 l     F .boot_text	0000001e _ZL14semihost_writemPKhj
08001db4 l     F .boot_text	0000003c _ZL16write_all_outputPKhtb
08001df0 l     F .boot_text	00000040 _ZL12debug_appendPKcj
20000b32 l     O .boot_bss	00000001 _ZL10logEnabled
2000091c l     O .boot_bss	00000201 _ZL11debugBuffer
20000b20 l     O .boot_bss	00000010 _ZL12output_funcs
20000b30 l     O .boot_bss	00000002 _ZL17debugBufferLength
00000000 l    df *ABS*	00000000 bluepill.cpp
20000b44 l     O .boot_bss	00000001 _ZL12debugEnabled
00000000 l    df *ABS*	00000000 led.cpp
00000000 l    df *ABS*	00000000 target_stm32f103.c
00000000 l    df *ABS*	00000000 bootloader.c
00000000 l    df *ABS*	00000000 application.cpp
08008bbc l     F .text	00000048 _ZL8pre_mainv
00000000 l    df *ABS*	00000000 main.cpp
080078a4 l     F .text	00000044 _ZL10debug_dumpRN5codal13STM32BluePillEPKc
080078e8 l     F .text	00000030 _Z41__static_initialization_and_destruction_0ii
08009c0c l     F .text	0000000e _GLOBAL__sub_I_bluepill
00000000 l    df *ABS*	00000000 uart.cpp
08007a64 l     F .text	00000024 _Z41__static_initialization_and_destruction_0ii
08009c1a l     F .text	0000000e _GLOBAL__sub_I_serialPort
00000000 l    df *ABS*	00000000 CodalComponent.cpp
00000000 l    df *ABS*	00000000 CodalDmesg.cpp
20002940 l     O .bss	00000004 _ZL14dmesg_flush_fn
00000000 l    df *ABS*	00000000 CodalFiber.cpp
08007d48 l     F .text	00000034 _ZL10handle_fobv
20002948 l     O .bss	00000004 _ZN5codalL10messageBusE
2000294c l     O .bss	00000004 _ZN5codalL10sleepQueueE
20002a11 l     O .bss	00000001 _ZN5codalL11fiber_flagsE
20002950 l     O .bss	00000004 _ZN5codalL11forkedFiberE
20002954 l     O .bss	00000004 _ZN5codalL8runQueueE
20002958 l     O .bss	00000004 _ZN5codalL9fiberPoolE
2000295c l     O .bss	00000004 _ZN5codalL9idleFiberE
20002960 l     O .bss	00000004 _ZN5codalL9waitQueueE
00000000 l    df *ABS*	00000000 CodalHeapAllocator.cpp
20002a12 l     O .bss	00000001 _ZZ13device_mallocE11initialised
00000000 l    df *ABS*	00000000 Serial.cpp
00000000 l    df *ABS*	00000000 Timer.cpp
00000000 l    df *ABS*	00000000 MessageBus.cpp
20001804 l     O .data	00000002 _ZL12userNotifyId
00000000 l    df *ABS*	00000000 Event.cpp
00000000 l    df *ABS*	00000000 ManagedString.cpp
08008804 l     F .text	00000038 _Z41__static_initialization_and_destruction_0ii
0800a71c l     F .text	0000000e _GLOBAL__sub_I__ZN5codal13ManagedString9initEmptyEv
0800af2c l     O .text	00000004 _ZL9emptyData
00000000 l    df *ABS*	00000000 CodalCompat.cpp
00000000 l    df *ABS*	00000000 CmPin.cpp
00000000 l    df *ABS*	00000000 CmSerial.cpp
00000000 l    df *ABS*	00000000 CmTimer.cpp
2000297c l     O .bss	00000004 _ZN5codal3_cmL12last_triggerE
20002980 l     O .bss	00000004 _ZN5codal3_cmL14trigger_periodE
00000000 l    df *ABS*	00000000 tasks.cpp
08008c04 l     F .text	00000050 _ZL15restart_handlerN5codal5EventE
08008c54 l     F .text	00000018 _ZL10flush_taskv
08008c6c l     F .text	00000028 _Z41__static_initialization_and_destruction_0ii
0800ab98 l     F .text	0000000e _GLOBAL__sub_I_restart_callback
20002988 l     O .bss	00000008 _ZL13restart_event
20002990 l     O .bss	00000004 _ZL16flush_task_fibre
20002a14 l     O .bss	00000001 _ZL24restart_listener_started
00000000 l    df *ABS*	00000000 STM32BluePill.cpp
00000000 l    df *ABS*	00000000 STM32BluePillIO.cpp
00000000 l    df *ABS*	00000000 CmI2C.cpp
00000000 l    df *ABS*	00000000 CmSPI.cpp
20002a00 l     O .bss	00000010 _ZN5codal3_cmL10_instancesE
00000000 l    df *ABS*	00000000 CmPinMap.cpp
0800ac84 l     F .text	00000018 _ZL22pinmap_find_peripheralhPK6PinMap
0800ac9c l     F .text	00000016 _ZL16pinmap_find_modehPK6PinMap
0800acb2 l     F .text	00000016 _ZL15pinmap_find_cnfhPK6PinMap
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 CodalListener.cpp
00000000 l    df *ABS*	00000000 RefCounted.cpp
00000000 l    df *ABS*	00000000 RefCountedInit.cpp
00000000 l    df *ABS*	00000000 MemberFunctionCallback.cpp
08009bac g     F .text	00000028 pinmap_mode
08008448 g     F .text	00000034 _ZN5codal5TimerC1Ev
08009f1e g     F .text	000001cc _ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE
0800a88e g     F .text	00000004 _ZN5codal3_cm3Pin15setServoPulseUsEi
0800a594 g     F .text	00000012 _ZN5codal10MessageBusD0Ev
08009c08  w    F .text	00000002 _ZN5codal14CodalComponent16periodicCallbackEv
080079c4  w    F .text	0000004c _ZN5codal13STM32BluePillD1Ev
08007bf4 g     F .text	0000003c _ZN5codal14scheduler_tickENS_5EventE
0800a9c4 g     F .text	00000008 _ZN5codal3_cm6Serial7rxInUseEv
08002418 g     O .boot_preinit_array	00000004 __boot_preinit_array_start
08001256 g     F .boot_text	00000004 tcb_configure_stack_base
0800abd0 g     F .text	0000000c _ZN5codal3_cm3SPI12setFrequencyEm
08000828 g     F .base_text	00000090 reset_handler
0800a91e g     F .text	0000000a _ZN5codal3_cm6Serial8unlockRxEv
080011a8 g     F .boot_text	00000008 fiber_initial_stack_base
00006800 g       *ABS*	00000000 _bootrom_size
20002a13 g     O .bss	00000001 heap_count
0800abb0 g     F .text	00000002 _ZN13UARTInterfaceC1Ejj
080083c0 g     F .text	00000060 _ZN5codal6SerialC1ERNS_3PinES2_hht
080089f8  w    F .text	00000014 _ZN5codal3_cm6SerialD1Ev
080022c4 g     F .boot_text	00000020 boot_target_set_restart_callback
0800a83e g     F .text	0000000e _ZN5codal3_cm3Pin8isOutputEv
0800b214 g     O .text	00000048 PinMap_SPI_MOSI
08009de6 g     F .text	00000018 _ZN5codal8ListenerD2Ev
08001252 g     F .boot_text	00000004 tcb_configure_sp
0800071c  w    F .base_text	00000002 usart3_isr
08000000 g       .base_text	00000000 _base_text
080079c4  w    F .text	0000004c _ZN5codal13STM32BluePillD2Ev
08000720  w    F .base_text	00000030 rtc_isr
080009a4 g       .base_text	00000000 _base_etext
0800afec g     O .text	00000018 _ZTVN5codal3_cm5TimerE
08001f34 g     F .boot_text	00000034 _Z11debug_printi
08008718 g     F .text	00000074 _ZN5codal10MessageBusC2Ev
08001f84 g     F .boot_text	00000014 _Z13debug_printlni
0800a6e2 g     F .text	0000001e _ZN5codal13ManagedStringaSERKS0_
0800071c  w    F .base_text	00000002 tim7_isr
0800a98c g     F .text	00000010 _ZN5codal3_cm6Serial4baudEi
08001874 g     F .boot_text	0000000c exti_reset_request
20000b4c g     O .boot_bss	00000001 running_tid
0800071c  w    F .base_text	00000002 adc1_2_isr
0800a5fc g     F .text	00000022 _ZN5codal14EventQueueItemC2ENS_5EventE
08008420 g     F .text	00000028 _ZN5codal6SerialD1Ev
0800a61e g     F .text	0000000e _ZN5codal13ManagedStringD1Ev
0800b1b0 g     O .text	0000001c _ZTVN5codal13STM32BluePillE
0800125e g     F .boot_text	00000004 get_current_sp
0800071c  w    F .base_text	00000002 tim1_trg_com_isr
08009f16 g     F .text	00000008 _ZN5codal6Serial7rxInUseEv
08008420 g     F .text	00000028 _ZN5codal6SerialD2Ev
0800abcc g     F .text	00000004 _ZN5codal3_cm3I2C12readRegisterEthPhib
0800a796 g     F .text	00000032 _ZN5codal14string_reverseEPc
0800adf6 g     F .text	00000046 _ZN5codal3I2C12readRegisterEthPhib
08007bbc g     F .text	00000028 _ZN5codal14CodalComponent15removeComponentEv
0800a906  w    F .text	00000004 _ZN5codal3_cm6Serial13configurePinsERNS_3PinES3_
08001d22 g     F .boot_text	0000000c os_tick
0800a8ba g     F .text	00000014 _ZN5codal3_cm3Pin13disableEventsEv
0800071c  w    F .base_text	00000002 usb_hp_can_tx_isr
0800a8fa  w    F .text	00000004 _ZN5codal3_cm6Serial15enableInterruptENS_19SerialInterruptTypeE
08009ae4 g     F .text	0000009c _ZN5codal3_cm3SPIC2ERNS0_3PinES3_S3_S3_
08007918  w    F .text	00000018 _ZN5codal14CodalComponentD2Ev
0800ad44 g     F .text	0000001e _ZN5codal3I2C13writeRegisterEthh
0800ad62 g     F .text	00000078 _ZN5codal3I2C4readEtPhib
0800071c  w    F .base_text	00000002 tim6_isr
08002418 g       *ABS*	00000000 _boot_data_loadaddr
0800a8fe  w    F .text	00000004 _ZN5codal3_cm6Serial16disableInterruptENS_19SerialInterruptTypeE
0800b414 g       .init_array	00000000 _etext
080018a4 g     F .boot_text	0000006c gpio_set_mode
08002418 g     O .boot_fini_array	00000004 __boot_fini_array_start
08009c28 g     F .text	0000002e _ZN5codal11queue_fiberEPNS_5FiberEPS1_
0800071c  w    F .base_text	00000002 usb_wakeup_isr
0800071c g     F .base_text	00000002 blocking_handler
20000b4d g     O .boot_bss	00000001 running
00000800 g       *ABS*	00000000 _baseram_size
080020cc g     F .boot_text	00000020 led_setup
0800071c  w    F .base_text	00000002 tim5_isr
08009e74 g     F .text	00000050 _ZN5codal6Serial12initialiseRxEv
0800a696 g     F .text	00000030 _ZN5codal13ManagedStringC2EPKcs
08001f68 g     F .boot_text	0000001c debug_println
0800071c  w    F .base_text	00000002 otg_fs_isr
080011b0 g     F .boot_text	00000074 test_codal
0800a82c g     F .text	00000004 _ZN5codal3_cm3Pin14getAnalogValueEv
08009b80 g     F .text	0000002c pinmap_peripheral
0800071c  w    F .base_text	00000002 spi1_isr
08009e6a g     F .text	0000000a _ZN5codal6Serial8unlockRxEv
08001174 g     F .boot_text	00000014 target_wait_us
080082ec g     F .text	0000003c _Z18device_create_heapmm
08009d1e g     F .text	000000a0 _Z16device_malloc_injR14HeapDefinition
08001494 g     F .boot_text	00000014 rcc_set_pll_multiplication_factor
0800a8ce g     F .text	0000002c _ZN5codal3_cm3Pin7eventOnEi
08001d2e g     F .boot_text	0000001a memcpy
0800071c  w    F .base_text	00000002 exti2_isr
0800071c  w    F .base_text	00000002 dma1_channel6_isr
20001800 g     O .data	00000004 app_data_test
0800071e g     F .base_text	00000002 null_handler
2000080c g     O .boot_data	00000004 rcc_ahb_frequency
08008e50 g     F .text	000000a8 _ZN5codal13STM32BluePillC2Ev
0800ac06 g     F .text	00000054 _ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap
0800a7c8 g     F .text	00000018 _ZN5codal22MemberFunctionCallback4fireENS_5EventE
08001266 g     F .boot_text	00000008 tcb_configure_args
20002984 g     O .bss	00000004 app_bss_test
0800071c  w    F .base_text	00000002 can_rx1_isr
0800b414 g       .fini_array	00000000 __fini_array_end
0800071c  w    F .base_text	00000002 dma1_channel5_isr
0800ac5a g     F .text	0000002a _ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_
0800191a g     F .boot_text	00000008 usart_recv
08008954 g     F .text	0000002c _ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE
0800a788 g     F .text	00000008 _ZN5codal10RefCounted7destroyEv
08008328  w    F .text	00000054 malloc
0800071c  w    F .base_text	00000002 dma2_channel5_isr
08009de6 g     F .text	00000018 _ZN5codal8ListenerD1Ev
080022e4 g     F .boot_text	0000000a bootloader_set_restart_callback
0800179c g     F .boot_text	00000034 rtc_clear_flag
0800a150 g     F .text	0000006a _ZN5codal5Timer8setEventEmttb
08007f40 g     F .text	00000068 _Z14__create_fibermmmi
08007be4 g     F .text	00000010 codal_dmesg_flush
0800071c  w    F .base_text	00000002 usart1_isr
0800868c  w    F .text	0000008c _ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt
00000844 g       *ABS*	00000000 _bootbuf_size
08007fb8 g     F .text	00000044 _ZN5codal4idleEv
20000850 g     O .boot_bss	00000004 .hidden __dso_handle
08009bd4 g     F .text	00000028 pinmap_cnf
08001262 g     F .boot_text	00000004 tcb_get_sp
0800a902  w    F .text	00000004 _ZN5codal3_cm6Serial11setBaudrateEm
080088cc g     F .text	00000008 _ZN5codal3_cm3Pin17getAnalogPeriodUsEv
0800abc8 g     F .text	00000004 _ZN5codal3_cm3I2C4readEtPhib
0800a134 g     F .text	0000000e _ZN5codal5Timer7getTimeEv
08009cea g     F .text	00000010 _ZN5codal13release_fiberEPv
0800837c g     F .text	00000044 device_free
0800a80e  w    F .text	00000006 _ZN5codal3Pin8drainPinEv
0800071c  w    F .base_text	00000002 usage_fault_handler
0800071c  w    F .base_text	00000002 tim8_trg_com_isr
08008b28 g     F .text	00000034 _ZN5codal3_cm5TimerC1Ev
0800071c  w    F .base_text	00000002 can2_rx0_isr
08001fe0 g     F .boot_text	00000070 debug_printhex
080014bc g     F .boot_text	00000014 rcc_set_pllxtpre
0800ace0 g     F .text	00000006 _ZN5codal3I2C4readENS_15AcknowledgeTypeE
08001b1c g     F .boot_text	00000044 os_task_highest_prio_ready_task
0800071c  w    F .base_text	00000002 tim1_brk_isr
08008cf0 g     F .text	000000e0 start_background_tasks
080085c4 g     F .text	00000088 _ZN5codal10MessageBus7processERNS_5EventEb
0800abb0 g     F .text	00000002 _ZN13UARTInterfaceC2Ejj
08007918  w    F .text	00000018 _ZN5codal14CodalComponentD1Ev
08001fb6 g     F .boot_text	0000000a debug_flush
2000284c g     O .bss	00000001 serialPort
0800acc8 g     F .text	00000006 _ZN5codal3I2C12setFrequencyEm
080081b4 g     F .text	00000038 _ZN5codal11fiber_sleepEm
0800a4b4 g     F .text	00000018 _ZN5codal10MessageBus4sendENS_5EventE
08001684 g     F .boot_text	00000024 rtc_exit_config_mode
08001480 g     F .boot_text	00000014 rcc_set_sysclk_source
0800b2ec g     O .text	0000002c _ZTVN5codal3_cm3I2CE
0800071c  w    F .base_text	00000002 can2_rx1_isr
080022b4 g     F .boot_text	00000008 _ZdlPv
08001800 g     F .boot_text	00000010 pwr_disable_backup_domain_write_protect
08008aa8 g     F .text	00000014 _ZN5codal3_cm14alarm_callbackEv
08001000 g       .boot_text	00000000 _boot_text
0800071c  w    F .base_text	00000002 tim1_cc_isr
0800a672 g     F .text	00000024 _ZN5codal13ManagedStringC1Ei
08008494 g     F .text	00000024 _ZN5codal27system_timer_event_every_usEmtt
0800a90a  w    F .text	00000004 _ZN5codal3_cm6Serial4putcEc
080088d4 g     F .text	00000018 _ZN5codal3_cm3Pin15getAnalogPeriodEv
08001922 g     F .boot_text	0000001c rcc_periph_clock_enable
0800adda g     F .text	0000001c _ZN5codal3I2C5writeEth
08008abc g     F .text	00000024 _ZN5codal3_cm5Timer9triggerInEm
0800071c  w    F .base_text	00000002 sdio_isr
080015a8 g     F .boot_text	00000014 rcc_set_ppre1
08002294 g     F .boot_text	0000000c platform_alarm_count
0800071c  w    F .base_text	00000002 eth_isr
0800acda g     F .text	00000006 _ZN5codal3I2C5writeEh
20000810 g     O .boot_data	00000004 rcc_apb1_frequency
20002a10 g     O .bss	00000001 _ZN5codal14CodalComponent13configurationE
080015bc g     F .boot_text	00000014 rcc_set_hpre
0800071c  w    F .base_text	00000002 dma1_channel4_isr
0800071c  w    F .base_text	00000002 tim8_brk_isr
0800847c g     F .text	00000018 _ZN5codal25system_timer_current_timeEv
0800a90e  w    F .text	00000006 _ZN5codal3_cm6Serial4getcEv
0800071c  w    F .base_text	00000002 dma2_channel4_5_isr
08001b60 g     F .boot_text	0000001c os_task_clear_wait_queue
08009e60 g     F .text	0000000a _ZN5codal6Serial6lockRxEv
0800a5fc g     F .text	00000022 _ZN5codal14EventQueueItemC1ENS_5EventE
20002944 g     O .bss	00000004 _ZN5codal12currentFiberE
0800a292 g     F .text	00000002 _ZN5codal5TimerD2Ev
08001230 g     F .boot_text	0000000c target_set_alarm_callback
20002970 g     O .bss	00000004 _ZN5codal10EventModel15defaultEventBusE
08007fa8 g     F .text	00000010 _ZN5codal24scheduler_runqueue_emptyEv
08007a88 g     F .text	00000068 _Z18component_callbackN5codal5EventE
20002a18 g       .bss	00000000 _ebss
0800a5c2 g     F .text	0000001e _ZN5codal5EventC1EttNS_15EventLaunchModeE
08001984 g     F .boot_text	00000030 os_init
0800789c  w    F .text	00000008 _ZN5codal14CodalComponent4initEv
08001372 g       .boot_text	00000000 restore_register_context
0800a1ca g     F .text	00000024 _ZN5codal5Timer4syncEm
20000804 g     O .boot_data	00000004 hal_data_test
0800071c  w    F .base_text	00000002 pvd_isr
08009bfc g     F .text	0000000c _ZN5codal3I2CC2ERNS_3PinES2_
0800865c  w    F .text	00000030 _ZN5codal22MemberFunctionCallbackC1INS_10MessageBusEEEPT_MS3_FvNS_5EventEE
0800a5e0 g     F .text	0000001c _ZN5codal5EventC1EttmNS_15EventLaunchModeE
0800206c g     F .boot_text	0000004c platform_setup
08008a0c  w    F .text	0000001c _ZN5codal3_cm6SerialD0Ev
0800865c  w    F .text	00000030 _ZN5codal22MemberFunctionCallbackC2INS_10MessageBusEEEPT_MS3_FvNS_5EventEE
080084d4  w    F .text	00000008 _ZN5codal10EventModel6removeEPNS_8ListenerE
08001958 g     F .boot_text	0000000c os_event_init
08008ef8 g     F .text	00000b58 _ZN5codal15STM32BluePillIOC2Ev
08009c8a g     F .text	0000001e _ZN5codal12create_fiberEPFvvES1_
0800a696 g     F .text	00000030 _ZN5codal13ManagedStringC1EPKcs
0800a700 g     F .text	0000001c _ZN5codal13ManagedString6charAtEs
08001240 g     F .boot_text	00000004 target_disable_irq
080020ec g     F .boot_text	00000014 led_on
08009cdc g     F .text	0000000e _ZN5codal16launch_new_fiberEPFvvES1_
00001000 g       *ABS*	00000000 _bootram_size
08000160 g     F .base_text	00000374 baseloader_start
080019b4 g     F .boot_text	0000000c os_running
20000b4e g     O .boot_bss	00000001 last_running_task
0800878c g     F .text	00000050 _ZN5codal10MessageBusD2Ev
0800071e  w    F .base_text	00000002 sv_call_handler
20001808 g     O .bss	00001044 bluepill
0800071c  w    F .base_text	00000002 rcc_isr
0800a1ba g     F .text	00000010 _ZN5codal5Timer12eventEveryUsEmtt
20002974 g     O .bss	00000004 _ZN5codal13ManagedString11EmptyStringE
08000000 g     O .base_text	00000150 vector_table
08001342 g       .boot_text	00000000 save_register_context
08000608 g     F .base_text	00000114 test_copy_end
0800ae8c g     O .text	00000038 _ZTVN5codal6SerialE
08007800 g     F .text	00000088 application_start
0800071c  w    F .base_text	00000002 flash_isr
0800b414 g       *ABS*	00000000 _data_loadaddr
08007eb0 g     F .text	00000090 _ZN5codal19fiber_wake_on_eventEtt
200047bc g       .boot_buf	00000000 end
0800071c  w    F .base_text	00000002 uart4_isr
0800aba6 g     F .text	00000002 _ZN5codal13STM32BluePill16periodicCallbackEv
0800171c g     F .boot_text	00000040 rtc_interrupt_enable
08008dd0 g     F .text	00000080 _ZN5codal13STM32BluePill4initEv
080088ec g     F .text	00000068 _ZN5codal3_cm3Pin15setDigitalValueEi
08000750  w    F .base_text	0000002c rtc_alarm_isr
0800071c  w    F .base_text	00000002 exti15_10_isr
08002418 g     O .boot_init_array	00000004 __boot_init_array_end
08007d7c g     F .text	00000018 _ZN5codal23fiber_scheduler_runningEv
0800a1ee g     F .text	000000a4 _ZN5codal5Timer7triggerEv
0800a814 g     F .text	00000004 _ZN5codal3_cm3Pin15getDigitalValueEv
080014a8 g     F .boot_text	00000014 rcc_set_pll_source
0800125a g     F .boot_text	00000004 tcb_get_stack_base
0800a9cc g     F .text	000001cc _ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE
0800a5ae g     F .text	00000014 _ZN5codal5EventC2Ev
0800aba8 g     F .text	00000008 _ZN5codal13STM32BluePill12idleCallbackEv
080019f8 g     F .boot_text	00000074 os_msgQ_tick
08001244 g     F .boot_text	0000000a tcb_allocate
0800aec4 g     O .text	00000018 _ZTVN5codal5TimerE
0800a122 g     F .text	00000012 _ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE
0800b360 g     O .text	0000001c _ZTVN5codal3_cm3SPIE
0800b25c g     O .text	00000048 PinMap_SPI_NSS
0800071c  w    F .base_text	00000002 hard_fault_handler
0800ace6 g     F .text	0000005e _ZN5codal3I2C5writeEtPhib
0800071c  w    F .base_text	00000002 exti1_isr
0800a866 g     F .text	00000006 _ZN5codal3_cm3Pin7setPullENS_8PullModeE
08008b5c g     F .text	00000060 _ZN5codal3_cm5Timer4initEv
08001b7c g     F .boot_text	000000ac os_task_tick
0800071c  w    F .base_text	00000002 i2c1_ev_isr
080081ec g     F .text	00000070 _ZN5codal13release_fiberEv
0800a65a g     F .text	00000018 _ZN5codal13ManagedStringC2EPNS_10StringDataE
0800b2a4 g     O .text	00000048 PinMap_SPI_SCK
0800071c  w    F .base_text	00000002 dma2_channel1_isr
0800a2a4  w    F .text	00000036 _ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE
080084cc  w    F .text	00000008 _ZN5codal10EventModel3addEPNS_8ListenerE
08008328 g     F .text	00000054 device_malloc
08001e30 g     F .boot_text	0000000c enable_log
0800071e  w    F .base_text	00000002 pend_sv_handler
080022a0 g     F .boot_text	0000000c __cxa_pure_virtual
08007c30 g     F .text	000000c0 _ZN5codal15scheduler_eventENS_5EventE
080017d0 g     F .boot_text	00000030 rtc_check_flag
00001000 g       *ABS*	00000000 _baserom_size
0800a99c g     F .text	00000028 _ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE
0800b1cc g     O .text	00000048 PinMap_SPI_MISO
0800071c  w    F .base_text	00000002 spi2_isr
080088a4 g     F .text	00000020 _ZN5codal3_cm3Pin14setAnalogValueEi
080010d8 g     F .boot_text	00000030 target_init
20000b50 g       .boot_bss	00000000 boot_end
08007d94 g     F .text	0000011c _ZN5codal14scheduler_initERNS_10EventModelE
0800a142 g     F .text	0000000e _ZN5codal5Timer9getTimeUsEv
08001cc0 g     F .boot_text	00000038 os_task_run
08001580 g     F .boot_text	00000014 rcc_set_adcpre
0800abc4 g     F .text	00000004 _ZN5codal3_cm3I2C5writeEtPhib
0800a752 g     F .text	00000036 _ZN5codal10RefCounted4decrEv
0800071c  w    F .base_text	00000002 tim8_up_isr
08001a6c g     F .boot_text	0000000c os_sem_init
0800864c g     F .text	00000010 _ZN5codal19allocateNotifyEventEv
0800a50a  w    F .text	0000003e _ZN5codal8ListenerC2INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt
08007a10  w    F .text	00000054 _ZN5codal13STM32BluePillD0Ev
0800a548  w    F .text	00000044 _ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE
08009c56 g     F .text	00000034 _ZN5codal13dequeue_fiberEPNS_5FiberE
0800071c  w    F .base_text	00000002 dma2_channel2_isr
08001880 g     F .boot_text	00000014 flash_set_ws
08002418 g     O .boot_fini_array	00000004 __boot_fini_array_end
0800a61e g     F .text	0000000e _ZN5codal13ManagedStringD2Ev
080014e0 g     F .boot_text	000000a0 rcc_set_rtc_clock_source
08008a28 g     F .text	00000050 _ZN5codal3_cm6SerialC2ERNS0_3PinES3_hh
0800ae3c  w    O .text	0000001c _ZTVN5codal14CodalComponentE
08002418 g       .boot_init_array	00000000 _boot_etext
08001d58 g     F .boot_text	00000020 memcmp
08009ec4 g     F .text	00000028 _ZN5codal6Serial12circularCopyEPhhS1_tt
0800a858 g     F .text	0000000e _ZN5codal3_cm3Pin8isAnalogEv
08001594 g     F .boot_text	00000014 rcc_set_ppre2
0800071e  w    F .base_text	00000002 debug_monitor_handler
0800071c  w    F .base_text	00000002 exti3_isr
0800071c  w    F .base_text	00000002 adc3_isr
08007930  w    F .text	00000020 _ZN5codal14CodalComponentD0Ev
080012fe g       .boot_text	00000000 save_context
0800071c  w    F .base_text	00000002 tim3_isr
0800077c  w    F .base_text	0000005c usart2_isr
08001894 g     F .boot_text	00000010 scb_reset_system
08001188 g     F .boot_text	00000020 target_panic
0800a0fe g     F .text	00000024 _ZN5codal5Timer13getTimerEventEv
08001fc0 g     F .boot_text	00000018 debug_print
0800071c  w    F .base_text	00000002 usb_lp_can_rx0_isr
08007800 g       .text	00000000 _text
0800127c g       .boot_text	00000000 swap_context
08001964 g     F .boot_text	00000010 os_signal_event
0800b414 g       .fini_array	00000000 __fini_array_start
0800071c  w    F .base_text	00000002 i2c2_er_isr
08001d20 g     F .boot_text	00000002 os_cbkSleep
0800a6d6 g     F .text	0000000c _ZN5codal13ManagedStringC1Ev
08001d78 g     F .boot_text	00000016 memset
2000296c g     O .bss	00000004 _ZN5codal12system_timerE
08007888 g     F .text	00000014 main
08009ca8 g     F .text	00000020 _ZN5codal12create_fiberEPFvPvES0_S2_
20002850 g     O .bss	000000f0 _ZN5codal14CodalComponent10componentsE
08009bfc g     F .text	0000000c _ZN5codal3I2CC1ERNS_3PinES2_
0800071c  w    F .base_text	00000002 i2c2_ev_isr
08001974 g     F .boot_text	00000010 os_event_set_signaling_tid
08007950 g     F .text	00000074 _Z10Blink_mainRN5codal13STM32BluePillE
0800071c  w    F .base_text	00000002 uart5_isr
20002964 g     O .bss	00000008 heap
08002260 g     F .boot_text	00000034 platform_set_alarm
0800abee g     F .text	00000018 _ZN5codal3_cm3SPI7setModeEii
0800071e  w    F .base_text	00000002 sys_tick_handler
0800aedc  w    O .text	00000014 _ZTVN5codal10EventModelE
08001cf8 g     F .boot_text	00000028 os_on_assert
0800878c g     F .text	00000050 _ZN5codal10MessageBusD1Ev
0800b414 g       .init_array	00000000 __init_array_end
0800071c  w    F .base_text	00000002 fsmc_isr
0800071c  w    F .base_text	00000002 dma1_channel1_isr
0800071c  w    F .base_text	00000002 exti4_isr
08008b28 g     F .text	00000034 _ZN5codal3_cm5TimerC2Ev
0800af38 g     O .text	00000054 _ZTVN5codal3_cm3PinE
20000808 g     O .boot_data	00000004 codal_heap_start
0800abdc g     F .text	0000000e _ZN5codal3_cm3SPI5writeEi
080089f8  w    F .text	00000014 _ZN5codal3_cm6SerialD2Ev
08008448 g     F .text	00000034 _ZN5codal5TimerC2Ev
08009cc8 g     F .text	00000014 _ZN5codal20fiber_wait_for_eventEtt
08001108 g     F .boot_text	00000010 target_wait_for_event
08009dbe g     F .text	00000028 _ZN5codal8ListenerC2EttPFvNS_5EventEEt
080083c0 g     F .text	00000060 _ZN5codal6SerialC2ERNS_3PinES2_hht
080013a0 g     F .boot_text	00000070 rcc_wait_for_osc_ready
08001e8c g     F .boot_text	00000020 debug_force_flush
0800a892 g     F .text	00000018 _ZN5codal3_cm3Pin17setAnalogPeriodUsEi
08001eac g     F .boot_text	00000088 _Z11debug_printj
0800abc0 g     F .text	00000004 _ZN5codal3_cm3I2C12setFrequencyEm
08008718 g     F .text	00000074 _ZN5codal10MessageBusC1Ev
0800a370 g     F .text	00000076 _ZN5codal10MessageBus6removeEPNS_8ListenerE
0800185c g     F .boot_text	00000018 exti_enable_request
08001810 g     F .boot_text	0000004c exti_set_trigger
0800071c  w    F .base_text	00000002 mem_manage_handler
08008c94 g     F .text	0000005c restart_callback
0800a830 g     F .text	0000000e _ZN5codal3_cm3Pin7isInputEv
0800a84c g     F .text	0000000c _ZN5codal3_cm3Pin9isDigitalEv
20000814 g     O .boot_data	00000004 rcc_apb2_frequency
0800a5ae g     F .text	00000014 _ZN5codal5EventC1Ev
080016a8 g     F .boot_text	00000020 rtc_set_alarm_time
0800acd4 g     F .text	00000006 _ZN5codal3I2C4stopEv
0800126e g     F .boot_text	00000002 _fini
0800a62c g     F .text	0000002e _ZN5codal13ManagedString10initStringEPKci
08001118 g     F .boot_text	0000005c target_wait
0800071c  w    F .base_text	00000002 can2_tx_isr
08009a6c g     F .text	0000001c _ZN5codal3_cm3I2CC1ERNS_3PinES3_
0800825c g     F .text	00000090 _ZN5codal6invokeEPFvPvES0_
0800071c  w    F .base_text	00000002 exti9_5_isr
0800056c g     F .base_text	0000009c test_copy_vector
08002100 g     F .boot_text	00000014 led_off
0800a802  w    F .text	00000006 _ZN5codal3Pin15setServoPulseUsEm
0800071c  w    F .base_text	00000002 dma2_channel3_isr
0800a72a g     F .text	00000028 _ZN5codal10RefCounted4incrEv
080014d0 g     F .boot_text	00000010 rcc_enable_rtc_clock
0800a2da g     F .text	00000096 _Z14async_callbackPv
08009c0a  w    F .text	00000002 _ZN5codal14CodalComponent12idleCallbackEv
08001c28 g     F .boot_text	00000098 os_task_signal_event
0800b400 g       .preinit_array	00000000 __preinit_array_end
0800193e g     F .boot_text	00000018 nvic_enable_irq
08002114 g     F .boot_text	00000014 led_wait
08001274 g     F .boot_text	00000008 target_enable_debug
08008ef8 g     F .text	00000b58 _ZN5codal15STM32BluePillIOC1Ev
0800071c  w    F .base_text	00000002 dma1_channel7_isr
0800222c g     F .boot_text	00000034 platform_start_timer
08009dbe g     F .text	00000028 _ZN5codal8ListenerC1EttPFvNS_5EventEEt
0800071c  w    F .base_text	00000002 tim1_up_isr
20001800 g       .data	00000000 _data
080016c8 g     F .boot_text	00000020 rtc_set_prescale_val
08008ae0 g     F .text	00000048 _ZN5codal3_cm5Timer11syncRequestEv
0800a818 g     F .text	00000014 _ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE
20002978 g     O .bss	00000004 _ZN5codal3_cm5Timer8instanceE
08009a6c g     F .text	0000001c _ZN5codal3_cm3I2CC2ERNS_3PinES3_
080015d0 g     F .boot_text	00000090 rcc_clock_setup_in_hse_8mhz_out_72mhz
0800a888 g     F .text	00000006 _ZN5codal3_cm3Pin10disconnectEv
0800a790 g     F .text	00000006 _ZN5codal10RefCounted4initEv
08008a78 g     F .text	00000030 _ZN5codal3_cm13tick_callbackEv
0800a6c6 g     F .text	00000010 _ZN5codal13ManagedStringC2ERKS0_
0800a6d6 g     F .text	0000000c _ZN5codal13ManagedStringC2Ev
0800a7e0 g     F .text	00000022 _ZN5codal22MemberFunctionCallbackeqERKS0_
080016e8 g     F .boot_text	00000014 rtc_get_counter_val
0800a808  w    F .text	00000006 _ZN5codal3Pin17setAnalogPeriodUsEm
0800a8aa g     F .text	00000010 _ZN5codal3_cm3Pin15setAnalogPeriodEi
0800071c  w    F .base_text	00000002 can2_sce_isr
0800071c  w    F .base_text	00000002 tim4_isr
0800b3d4 g     O .text	0000002c _ZTVN5codal3I2CE
0800a3e6 g     F .text	00000024 _ZN5codal10MessageBus12dequeueEventEv
0800a40a g     F .text	0000004c _ZN5codal10MessageBus21deleteMarkedListenersEv
20000b50 g       .boot_bss	00000000 _boot_ebss
08008954 g     F .text	0000002c _ZN5codal3_cm3PinC2EhmmtNS_13PinCapabilityE
20001808 g       .data	00000000 _edata
08009cfa g     F .text	00000018 _ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_
080084dc g     F .text	000000e8 _ZN5codal10MessageBus3addEPNS_8ListenerE
0800af8c g     O .text	00000038 _ZTVN5codal3_cm6SerialE
0800071c  w    F .base_text	00000002 dma1_channel2_isr
0800a6c6 g     F .text	00000010 _ZN5codal13ManagedStringC1ERKS0_
0800071c  w    F .base_text	00000002 i2c1_er_isr
0800a5e0 g     F .text	0000001c _ZN5codal5EventC2EttmNS_15EventLaunchModeE
08007cf0 g     F .text	00000058 _Z15getFiberContextv
0800123c g     F .boot_text	00000004 target_enable_irq
0800a0ea g     F .text	0000000a _ZN5codal5Timer17disableInterruptsEv
0800071c  w    F .base_text	00000002 can_sce_isr
0800abea g     F .text	00000004 _ZN5codal3_cm3SPI8transferEPKhmPhm
0800071e  w    F .base_text	00000002 nmi_handler
0800a50a  w    F .text	0000003e _ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt
0800175c g     F .boot_text	00000040 rtc_interrupt_disable
08002418 g     O .boot_preinit_array	00000004 __boot_preinit_array_end
08001e3c g     F .boot_text	00000050 _Z20debug_flush_internalb
080022ac g     F .boot_text	00000008 _Znwj
0800aef0 g     O .text	0000003c _ZTVN5codal10MessageBusE
20000800 g       .boot_data	00000000 _boot_data
08009d12 g     F .text	0000000c _ZN5codal9idle_taskEv
080004d4 g     F .base_text	00000098 test_copy_bootloader
0800a5a6 g     F .text	00000008 _ZThn8_N5codal10MessageBusD0Ev
0800071c  w    F .base_text	00000002 tim8_cc_isr
08009a88 g     F .text	0000005c _ZN5codal3_cm3SPI4initEv
08008e50 g     F .text	000000a8 _ZN5codal13STM32BluePillC1Ev
08001410 g     F .boot_text	00000070 rcc_osc_on
200047bc g       .bss	00000000 _boot_stack
0800a294 g     F .text	00000010 _ZN5codal10MessageBus9elementAtEi
0800a58c g     F .text	00000008 _ZThn8_N5codal10MessageBusD1Ev
08007ffc g     F .text	000001b8 _ZN5codal8scheduleEv
08002418 g     O .boot_init_array	00000004 __boot_init_array_start
0800a964 g     F .text	00000028 _ZN5codal3_cm6Serial12circularCopyEPhhS2_tt
08008980 g     F .text	00000078 _ZN5codal3_cm3Pin13setServoValueEiii
20000b48 g     O .boot_bss	00000004 hal_bss_test
0800071c  w    F .base_text	00000002 tamper_isr
0800b400 g       .init_array	00000000 __init_array_start
08001914 g     F .boot_text	00000006 gpio_clear
08007af0 g     F .text	000000cc _ZN5codal14CodalComponent12addComponentEv
0800071c  w    F .base_text	00000002 eth_wkup_isr
080020b8 g     F .boot_text	00000014 enable_debug
0800a4cc g     F .text	0000003e _ZN5codal10MessageBus4idleENS_5EventE
0800a5c2 g     F .text	0000001e _ZN5codal5EventC2EttNS_15EventLaunchModeE
080084b8  w    F .text	00000014 _ZN5codal10EventModel4sendENS_5EventE
08001aa8 g     F .boot_text	00000074 os_task_init
0800a65a g     F .text	00000018 _ZN5codal13ManagedStringC1EPNS_10StringDataE
0800a456 g     F .text	0000005e _ZN5codal10MessageBus10queueEventERNS_5EventE
08001d48 g     F .boot_text	00000010 strlen
08002050 g     F .boot_text	0000001c debug_printhex_unsigned
0800124e g     F .boot_text	00000004 tcb_configure_lr
2000081c g       .boot_data	00000000 _boot_edata
20005000 g       .bss	00000000 _stack
0800a914 g     F .text	0000000a _ZN5codal3_cm6Serial6lockRxEv
080087f8 g     F .text	0000000c _ZN5codal13ManagedString9initEmptyEv
200047bc g       .boot_buf	00000000 _eboot_buf
080087dc g     F .text	0000001c _ZN5codal5Event4fireEv
08001910 g     F .boot_text	00000004 gpio_set
0800a86c g     F .text	0000001c _ZN5codal3_cm3Pin5setupEhh
08009dfe g     F .text	00000062 _ZN5codal8Listener5queueENS_5EventE
0800071c  w    F .base_text	00000002 bus_fault_handler
0800071c  w    F .base_text	00000002 wwdg_isr
0800071c  w    F .base_text	00000002 dma1_channel3_isr
0800a0f4 g     F .text	0000000a _ZN5codal5Timer16enableInterruptsEv
0800883c g     F .text	00000068 _ZN5codal4itoaEiPc
080016fc g     F .boot_text	00000020 rtc_set_counter_val
0800a292 g     F .text	00000002 _ZN5codal5TimerD1Ev
0800a928 g     F .text	0000003c _ZN5codal3_cm6Serial12initialiseRxEv
0800a672 g     F .text	00000024 _ZN5codal13ManagedStringC2Ei
080019c0 g     F .boot_text	00000038 os_msgQ_init
0800b400 g       .preinit_array	00000000 __preinit_array_start
0800071c  w    F .base_text	00000002 spi3_isr
08009ae4 g     F .text	0000009c _ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_
08001270 g     F .boot_text	00000004 __aeabi_atexit
08000150 g     O .base_text	00000010 base_vector_table
080022bc g     F .boot_text	00000008 millis
08008a28 g     F .text	00000050 _ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh
080088c4 g     F .text	00000008 _ZN5codal3_cm3Pin9isTouchedEv
08001224 g     F .boot_text	0000000c target_set_tick_callback
0800071c  w    F .base_text	00000002 tim2_isr
08001fd8 g     F .boot_text	00000008 debug_print_unsigned
0800837c  w    F .text	00000044 free
08001660 g     F .boot_text	00000024 rtc_enter_config_mode
0800071c  w    F .base_text	00000002 exti0_isr
0800acce g     F .text	00000006 _ZN5codal3I2C5startEv
08009eec g     F .text	0000002a _ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE



Disassembly of section .base_text:

08000000 <vector_table>:
 8000000:	00 50 00 20 29 08 00 08 1f 07 00 08 1d 07 00 08     .P. )...........
 8000010:	1d 07 00 08 1d 07 00 08 1d 07 00 08 00 00 00 00     ................
	...
 800002c:	1f 07 00 08 1f 07 00 08 00 00 00 00 1f 07 00 08     ................
 800003c:	1f 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 800004c:	21 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     !...............
 800005c:	1d 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 800006c:	1d 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 800007c:	1d 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 800008c:	1d 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 800009c:	1d 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 80000ac:	1d 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 80000bc:	1d 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 80000cc:	1d 07 00 08 1d 07 00 08 1d 07 00 08 7d 07 00 08     ............}...
 80000dc:	1d 07 00 08 1d 07 00 08 51 07 00 08 1d 07 00 08     ........Q.......
 80000ec:	1d 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 80000fc:	1d 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 800010c:	1d 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 800011c:	1d 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 800012c:	1d 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 800013c:	1d 07 00 08 1d 07 00 08 1d 07 00 08 1d 07 00 08     ................
 800014c:	1d 07 00 08                                         ....

08000150 <base_vector_table>:
 8000150:	69 19 05 22 01 00 01 00 61 01 00 08 01 78 00 08     i.."....a....x..

08000160 <baseloader_start>:
static uint16_t* src = NULL;
static size_t half_word_count = 0;
static bool verified = true;
static bool should_disable_interrupts = true;

void baseloader_start(void) {
 8000160:	b508      	push	{r3, lr}
    static uint16_t* erase_start;
    static uint16_t* erase_end;
    static const uint16_t* flash_end;

	//  Init manually in case BSS isn't initialised.
    verified = true;
 8000162:	4b8c      	ldr	r3, [pc, #560]	; (8000394 <baseloader_start+0x234>)
 8000164:	2201      	movs	r2, #1
 8000166:	701a      	strb	r2, [r3, #0]
    erase_start = NULL;
 8000168:	2300      	movs	r3, #0
 800016a:	4a8b      	ldr	r2, [pc, #556]	; (8000398 <baseloader_start+0x238>)
 800016c:	6013      	str	r3, [r2, #0]
    erase_end = NULL;
 800016e:	4a8b      	ldr	r2, [pc, #556]	; (800039c <baseloader_start+0x23c>)
 8000170:	6013      	str	r3, [r2, #0]
    flash_end = base_get_flash_end();  /* Remember the bounds of erased data in the current page */
 8000172:	4b8b      	ldr	r3, [pc, #556]	; (80003a0 <baseloader_start+0x240>)
 8000174:	4a8b      	ldr	r2, [pc, #556]	; (80003a4 <baseloader_start+0x244>)
 8000176:	601a      	str	r2, [r3, #0]

	//  TODO: Validate dest, src, half_word_count before flashing.

	debug_flash(); ////
 8000178:	488b      	ldr	r0, [pc, #556]	; (80003a8 <baseloader_start+0x248>)
 800017a:	f001 ff21 	bl	8001fc0 <debug_print>
 800017e:	4b8b      	ldr	r3, [pc, #556]	; (80003ac <baseloader_start+0x24c>)
 8000180:	6818      	ldr	r0, [r3, #0]
 8000182:	f001 ff65 	bl	8002050 <debug_printhex_unsigned>
 8000186:	488a      	ldr	r0, [pc, #552]	; (80003b0 <baseloader_start+0x250>)
 8000188:	f001 ff1a 	bl	8001fc0 <debug_print>
 800018c:	4b89      	ldr	r3, [pc, #548]	; (80003b4 <baseloader_start+0x254>)
 800018e:	6818      	ldr	r0, [r3, #0]
 8000190:	f001 ff5e 	bl	8002050 <debug_printhex_unsigned>
 8000194:	4888      	ldr	r0, [pc, #544]	; (80003b8 <baseloader_start+0x258>)
 8000196:	f001 ff13 	bl	8001fc0 <debug_print>
 800019a:	4b88      	ldr	r3, [pc, #544]	; (80003bc <baseloader_start+0x25c>)
 800019c:	6818      	ldr	r0, [r3, #0]
 800019e:	f001 ff57 	bl	8002050 <debug_printhex_unsigned>
 80001a2:	4b87      	ldr	r3, [pc, #540]	; (80003c0 <baseloader_start+0x260>)
 80001a4:	781b      	ldrb	r3, [r3, #0]
 80001a6:	b1a3      	cbz	r3, 80001d2 <baseloader_start+0x72>
 80001a8:	4886      	ldr	r0, [pc, #536]	; (80003c4 <baseloader_start+0x264>)
 80001aa:	f001 fedd 	bl	8001f68 <debug_println>

	base_flash_unlock();  //  TODO: Check MakeCode flashing.
 80001ae:	4b86      	ldr	r3, [pc, #536]	; (80003c8 <baseloader_start+0x268>)
 80001b0:	4a86      	ldr	r2, [pc, #536]	; (80003cc <baseloader_start+0x26c>)
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80001b8:	601a      	str	r2, [r3, #0]

	//  Disable interrupts because the vector table may be overwritten during flashing.
	if (should_disable_interrupts) {
 80001ba:	4b81      	ldr	r3, [pc, #516]	; (80003c0 <baseloader_start+0x260>)
 80001bc:	781b      	ldrb	r3, [r3, #0]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	f000 8135 	beq.w	800042e <baseloader_start+0x2ce>
		disable_interrupts(); // Only for baseloader.
 80001c4:	b672      	cpsid	i
 80001c6:	2300      	movs	r3, #0
 80001c8:	4a81      	ldr	r2, [pc, #516]	; (80003d0 <baseloader_start+0x270>)
 80001ca:	6013      	str	r3, [r2, #0]
 80001cc:	4a81      	ldr	r2, [pc, #516]	; (80003d4 <baseloader_start+0x274>)
 80001ce:	6013      	str	r3, [r2, #0]
 80001d0:	e12d      	b.n	800042e <baseloader_start+0x2ce>
	debug_flash(); ////
 80001d2:	4881      	ldr	r0, [pc, #516]	; (80003d8 <baseloader_start+0x278>)
 80001d4:	e7e9      	b.n	80001aa <baseloader_start+0x4a>

    while (half_word_count > 0) {
        /* Avoid writing past the end of flash */
        if (dest >= flash_end) {
            //  debug_println("dest >= flash_end"); debug_flush();
            verified = false;
 80001d6:	4b6f      	ldr	r3, [pc, #444]	; (8000394 <baseloader_start+0x234>)
 80001d8:	2200      	movs	r2, #0
 80001da:	701a      	strb	r2, [r3, #0]
        dest++;
        src++;
        half_word_count--;
    }

	base_flash_lock();  //  TODO: Check MakeCode flashing.
 80001dc:	4a7f      	ldr	r2, [pc, #508]	; (80003dc <baseloader_start+0x27c>)
 80001de:	6813      	ldr	r3, [r2, #0]
 80001e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e4:	6013      	str	r3, [r2, #0]

	//  Vector table may be overwritten. Restart to use the new vector table.
    //  TODO: if (should_disable_interrupts) { scb_reset_system(); }
	//  Should not return.
}
 80001e6:	bd08      	pop	{r3, pc}
            erase_start = base_get_flash_page_address(dest);
 80001e8:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 80001ec:	f020 0003 	bic.w	r0, r0, #3
 80001f0:	4b69      	ldr	r3, [pc, #420]	; (8000398 <baseloader_start+0x238>)
 80001f2:	6018      	str	r0, [r3, #0]
            erase_end = erase_start + (FLASH_PAGE_SIZE)/sizeof(uint16_t);
 80001f4:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80001f8:	4b68      	ldr	r3, [pc, #416]	; (800039c <baseloader_start+0x23c>)
 80001fa:	601a      	str	r2, [r3, #0]
            base_flash_erase_page((uint32_t)erase_start);
 80001fc:	4b78      	ldr	r3, [pc, #480]	; (80003e0 <baseloader_start+0x280>)
 80001fe:	6819      	ldr	r1, [r3, #0]
 8000200:	f001 0235 	and.w	r2, r1, #53	; 0x35
 8000204:	4b77      	ldr	r3, [pc, #476]	; (80003e4 <baseloader_start+0x284>)
 8000206:	881b      	ldrh	r3, [r3, #0]
 8000208:	b29b      	uxth	r3, r3
 800020a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800020e:	d904      	bls.n	800021a <baseloader_start+0xba>
 8000210:	4b75      	ldr	r3, [pc, #468]	; (80003e8 <baseloader_start+0x288>)
 8000212:	681a      	ldr	r2, [r3, #0]
 8000214:	430a      	orrs	r2, r1
 8000216:	f002 0235 	and.w	r2, r2, #53	; 0x35
 800021a:	f012 0f01 	tst.w	r2, #1
 800021e:	d00f      	beq.n	8000240 <baseloader_start+0xe0>
 8000220:	4b6f      	ldr	r3, [pc, #444]	; (80003e0 <baseloader_start+0x280>)
 8000222:	6819      	ldr	r1, [r3, #0]
 8000224:	f001 0235 	and.w	r2, r1, #53	; 0x35
 8000228:	4b6e      	ldr	r3, [pc, #440]	; (80003e4 <baseloader_start+0x284>)
 800022a:	881b      	ldrh	r3, [r3, #0]
 800022c:	b29b      	uxth	r3, r3
 800022e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000232:	d9f2      	bls.n	800021a <baseloader_start+0xba>
 8000234:	4b6c      	ldr	r3, [pc, #432]	; (80003e8 <baseloader_start+0x288>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	430a      	orrs	r2, r1
 800023a:	f002 0235 	and.w	r2, r2, #53	; 0x35
 800023e:	e7ec      	b.n	800021a <baseloader_start+0xba>
 8000240:	4b68      	ldr	r3, [pc, #416]	; (80003e4 <baseloader_start+0x284>)
 8000242:	881b      	ldrh	r3, [r3, #0]
 8000244:	b29b      	uxth	r3, r3
 8000246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800024a:	d910      	bls.n	800026e <baseloader_start+0x10e>
 800024c:	4b67      	ldr	r3, [pc, #412]	; (80003ec <baseloader_start+0x28c>)
 800024e:	4298      	cmp	r0, r3
 8000250:	d90d      	bls.n	800026e <baseloader_start+0x10e>
 8000252:	4b67      	ldr	r3, [pc, #412]	; (80003f0 <baseloader_start+0x290>)
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	f042 0202 	orr.w	r2, r2, #2
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	4a4e      	ldr	r2, [pc, #312]	; (8000398 <baseloader_start+0x238>)
 800025e:	6811      	ldr	r1, [r2, #0]
 8000260:	4a64      	ldr	r2, [pc, #400]	; (80003f4 <baseloader_start+0x294>)
 8000262:	6011      	str	r1, [r2, #0]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	e00c      	b.n	8000288 <baseloader_start+0x128>
 800026e:	4b5b      	ldr	r3, [pc, #364]	; (80003dc <baseloader_start+0x27c>)
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	f042 0202 	orr.w	r2, r2, #2
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	4a47      	ldr	r2, [pc, #284]	; (8000398 <baseloader_start+0x238>)
 800027a:	6811      	ldr	r1, [r2, #0]
 800027c:	4a5e      	ldr	r2, [pc, #376]	; (80003f8 <baseloader_start+0x298>)
 800027e:	6011      	str	r1, [r2, #0]
 8000280:	681a      	ldr	r2, [r3, #0]
 8000282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	4b55      	ldr	r3, [pc, #340]	; (80003e0 <baseloader_start+0x280>)
 800028a:	6819      	ldr	r1, [r3, #0]
 800028c:	f001 0235 	and.w	r2, r1, #53	; 0x35
 8000290:	4b54      	ldr	r3, [pc, #336]	; (80003e4 <baseloader_start+0x284>)
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	b29b      	uxth	r3, r3
 8000296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800029a:	d904      	bls.n	80002a6 <baseloader_start+0x146>
 800029c:	4b52      	ldr	r3, [pc, #328]	; (80003e8 <baseloader_start+0x288>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	430a      	orrs	r2, r1
 80002a2:	f002 0235 	and.w	r2, r2, #53	; 0x35
 80002a6:	f012 0f01 	tst.w	r2, #1
 80002aa:	d00f      	beq.n	80002cc <baseloader_start+0x16c>
 80002ac:	4b4c      	ldr	r3, [pc, #304]	; (80003e0 <baseloader_start+0x280>)
 80002ae:	6819      	ldr	r1, [r3, #0]
 80002b0:	f001 0235 	and.w	r2, r1, #53	; 0x35
 80002b4:	4b4b      	ldr	r3, [pc, #300]	; (80003e4 <baseloader_start+0x284>)
 80002b6:	881b      	ldrh	r3, [r3, #0]
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002be:	d9f2      	bls.n	80002a6 <baseloader_start+0x146>
 80002c0:	4b49      	ldr	r3, [pc, #292]	; (80003e8 <baseloader_start+0x288>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	430a      	orrs	r2, r1
 80002c6:	f002 0235 	and.w	r2, r2, #53	; 0x35
 80002ca:	e7ec      	b.n	80002a6 <baseloader_start+0x146>
 80002cc:	4b45      	ldr	r3, [pc, #276]	; (80003e4 <baseloader_start+0x284>)
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	b29b      	uxth	r3, r3
 80002d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002d6:	d90a      	bls.n	80002ee <baseloader_start+0x18e>
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <baseloader_start+0x238>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b43      	ldr	r3, [pc, #268]	; (80003ec <baseloader_start+0x28c>)
 80002de:	429a      	cmp	r2, r3
 80002e0:	d905      	bls.n	80002ee <baseloader_start+0x18e>
 80002e2:	4a43      	ldr	r2, [pc, #268]	; (80003f0 <baseloader_start+0x290>)
 80002e4:	6813      	ldr	r3, [r2, #0]
 80002e6:	f023 0302 	bic.w	r3, r3, #2
 80002ea:	6013      	str	r3, [r2, #0]
 80002ec:	e0b5      	b.n	800045a <baseloader_start+0x2fa>
 80002ee:	4a3b      	ldr	r2, [pc, #236]	; (80003dc <baseloader_start+0x27c>)
 80002f0:	6813      	ldr	r3, [r2, #0]
 80002f2:	f023 0302 	bic.w	r3, r3, #2
 80002f6:	6013      	str	r3, [r2, #0]
 80002f8:	e0af      	b.n	800045a <baseloader_start+0x2fa>
        base_flash_program_half_word((uint32_t)dest, *src);
 80002fa:	4b3a      	ldr	r3, [pc, #232]	; (80003e4 <baseloader_start+0x284>)
 80002fc:	881b      	ldrh	r3, [r3, #0]
 80002fe:	b29b      	uxth	r3, r3
 8000300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000304:	d90a      	bls.n	800031c <baseloader_start+0x1bc>
 8000306:	4b29      	ldr	r3, [pc, #164]	; (80003ac <baseloader_start+0x24c>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b38      	ldr	r3, [pc, #224]	; (80003ec <baseloader_start+0x28c>)
 800030c:	429a      	cmp	r2, r3
 800030e:	d905      	bls.n	800031c <baseloader_start+0x1bc>
 8000310:	4a37      	ldr	r2, [pc, #220]	; (80003f0 <baseloader_start+0x290>)
 8000312:	6813      	ldr	r3, [r2, #0]
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6013      	str	r3, [r2, #0]
 800031a:	e004      	b.n	8000326 <baseloader_start+0x1c6>
 800031c:	4a2f      	ldr	r2, [pc, #188]	; (80003dc <baseloader_start+0x27c>)
 800031e:	6813      	ldr	r3, [r2, #0]
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6013      	str	r3, [r2, #0]
 8000326:	4b21      	ldr	r3, [pc, #132]	; (80003ac <baseloader_start+0x24c>)
 8000328:	6818      	ldr	r0, [r3, #0]
 800032a:	4b22      	ldr	r3, [pc, #136]	; (80003b4 <baseloader_start+0x254>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	8003      	strh	r3, [r0, #0]
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <baseloader_start+0x280>)
 8000334:	6819      	ldr	r1, [r3, #0]
 8000336:	f001 0235 	and.w	r2, r1, #53	; 0x35
 800033a:	4b2a      	ldr	r3, [pc, #168]	; (80003e4 <baseloader_start+0x284>)
 800033c:	881b      	ldrh	r3, [r3, #0]
 800033e:	b29b      	uxth	r3, r3
 8000340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000344:	d904      	bls.n	8000350 <baseloader_start+0x1f0>
 8000346:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <baseloader_start+0x288>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	430a      	orrs	r2, r1
 800034c:	f002 0235 	and.w	r2, r2, #53	; 0x35
 8000350:	f012 0f01 	tst.w	r2, #1
 8000354:	d00f      	beq.n	8000376 <baseloader_start+0x216>
 8000356:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <baseloader_start+0x280>)
 8000358:	6819      	ldr	r1, [r3, #0]
 800035a:	f001 0235 	and.w	r2, r1, #53	; 0x35
 800035e:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <baseloader_start+0x284>)
 8000360:	881b      	ldrh	r3, [r3, #0]
 8000362:	b29b      	uxth	r3, r3
 8000364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000368:	d9f2      	bls.n	8000350 <baseloader_start+0x1f0>
 800036a:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <baseloader_start+0x288>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	430a      	orrs	r2, r1
 8000370:	f002 0235 	and.w	r2, r2, #53	; 0x35
 8000374:	e7ec      	b.n	8000350 <baseloader_start+0x1f0>
 8000376:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <baseloader_start+0x284>)
 8000378:	881b      	ldrh	r3, [r3, #0]
 800037a:	b29b      	uxth	r3, r3
 800037c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000380:	d93c      	bls.n	80003fc <baseloader_start+0x29c>
 8000382:	4b1a      	ldr	r3, [pc, #104]	; (80003ec <baseloader_start+0x28c>)
 8000384:	4298      	cmp	r0, r3
 8000386:	d939      	bls.n	80003fc <baseloader_start+0x29c>
 8000388:	4a19      	ldr	r2, [pc, #100]	; (80003f0 <baseloader_start+0x290>)
 800038a:	6813      	ldr	r3, [r2, #0]
 800038c:	f023 0301 	bic.w	r3, r3, #1
 8000390:	6013      	str	r3, [r2, #0]
 8000392:	e038      	b.n	8000406 <baseloader_start+0x2a6>
 8000394:	20000801 	.word	0x20000801
 8000398:	20000824 	.word	0x20000824
 800039c:	20000820 	.word	0x20000820
 80003a0:	20000828 	.word	0x20000828
 80003a4:	08010000 	.word	0x08010000
 80003a8:	080008e4 	.word	0x080008e4
 80003ac:	2000081c 	.word	0x2000081c
 80003b0:	080008f4 	.word	0x080008f4
 80003b4:	20000830 	.word	0x20000830
 80003b8:	080008fc 	.word	0x080008fc
 80003bc:	2000082c 	.word	0x2000082c
 80003c0:	20000800 	.word	0x20000800
 80003c4:	080008b8 	.word	0x080008b8
 80003c8:	40022004 	.word	0x40022004
 80003cc:	45670123 	.word	0x45670123
 80003d0:	e000e010 	.word	0xe000e010
 80003d4:	40021008 	.word	0x40021008
 80003d8:	080008d0 	.word	0x080008d0
 80003dc:	40022010 	.word	0x40022010
 80003e0:	4002200c 	.word	0x4002200c
 80003e4:	1ffff7e0 	.word	0x1ffff7e0
 80003e8:	4002204c 	.word	0x4002204c
 80003ec:	0807ffff 	.word	0x0807ffff
 80003f0:	40022050 	.word	0x40022050
 80003f4:	40022054 	.word	0x40022054
 80003f8:	40022014 	.word	0x40022014
 80003fc:	4a2a      	ldr	r2, [pc, #168]	; (80004a8 <baseloader_start+0x348>)
 80003fe:	6813      	ldr	r3, [r2, #0]
 8000400:	f023 0301 	bic.w	r3, r3, #1
 8000404:	6013      	str	r3, [r2, #0]
        erase_start = dest + 1;
 8000406:	4b29      	ldr	r3, [pc, #164]	; (80004ac <baseloader_start+0x34c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	1c9a      	adds	r2, r3, #2
 800040c:	4928      	ldr	r1, [pc, #160]	; (80004b0 <baseloader_start+0x350>)
 800040e:	600a      	str	r2, [r1, #0]
        if (*dest != *src) {
 8000410:	8818      	ldrh	r0, [r3, #0]
 8000412:	4b28      	ldr	r3, [pc, #160]	; (80004b4 <baseloader_start+0x354>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	8819      	ldrh	r1, [r3, #0]
 8000418:	4288      	cmp	r0, r1
 800041a:	d141      	bne.n	80004a0 <baseloader_start+0x340>
        dest++;
 800041c:	4923      	ldr	r1, [pc, #140]	; (80004ac <baseloader_start+0x34c>)
 800041e:	600a      	str	r2, [r1, #0]
        src++;
 8000420:	3302      	adds	r3, #2
 8000422:	4a24      	ldr	r2, [pc, #144]	; (80004b4 <baseloader_start+0x354>)
 8000424:	6013      	str	r3, [r2, #0]
        half_word_count--;
 8000426:	4a24      	ldr	r2, [pc, #144]	; (80004b8 <baseloader_start+0x358>)
 8000428:	6813      	ldr	r3, [r2, #0]
 800042a:	3b01      	subs	r3, #1
 800042c:	6013      	str	r3, [r2, #0]
    while (half_word_count > 0) {
 800042e:	4b22      	ldr	r3, [pc, #136]	; (80004b8 <baseloader_start+0x358>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	f43f aed2 	beq.w	80001dc <baseloader_start+0x7c>
        if (dest >= flash_end) {
 8000438:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <baseloader_start+0x34c>)
 800043a:	6818      	ldr	r0, [r3, #0]
 800043c:	4a1f      	ldr	r2, [pc, #124]	; (80004bc <baseloader_start+0x35c>)
 800043e:	6812      	ldr	r2, [r2, #0]
 8000440:	4290      	cmp	r0, r2
 8000442:	f4bf aec8 	bcs.w	80001d6 <baseloader_start+0x76>
        if (dest >= erase_end || dest < erase_start) {
 8000446:	4a1e      	ldr	r2, [pc, #120]	; (80004c0 <baseloader_start+0x360>)
 8000448:	6812      	ldr	r2, [r2, #0]
 800044a:	4290      	cmp	r0, r2
 800044c:	f4bf aecc 	bcs.w	80001e8 <baseloader_start+0x88>
 8000450:	4a17      	ldr	r2, [pc, #92]	; (80004b0 <baseloader_start+0x350>)
 8000452:	6812      	ldr	r2, [r2, #0]
 8000454:	4290      	cmp	r0, r2
 8000456:	f4ff aec7 	bcc.w	80001e8 <baseloader_start+0x88>
        base_flash_program_half_word((uint32_t)dest, *src);
 800045a:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <baseloader_start+0x364>)
 800045c:	6819      	ldr	r1, [r3, #0]
 800045e:	f001 0235 	and.w	r2, r1, #53	; 0x35
 8000462:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <baseloader_start+0x368>)
 8000464:	881b      	ldrh	r3, [r3, #0]
 8000466:	b29b      	uxth	r3, r3
 8000468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800046c:	d904      	bls.n	8000478 <baseloader_start+0x318>
 800046e:	4b17      	ldr	r3, [pc, #92]	; (80004cc <baseloader_start+0x36c>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	430a      	orrs	r2, r1
 8000474:	f002 0235 	and.w	r2, r2, #53	; 0x35
 8000478:	f012 0f01 	tst.w	r2, #1
 800047c:	f43f af3d 	beq.w	80002fa <baseloader_start+0x19a>
 8000480:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <baseloader_start+0x364>)
 8000482:	6819      	ldr	r1, [r3, #0]
 8000484:	f001 0235 	and.w	r2, r1, #53	; 0x35
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <baseloader_start+0x368>)
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	b29b      	uxth	r3, r3
 800048e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000492:	d9f1      	bls.n	8000478 <baseloader_start+0x318>
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <baseloader_start+0x36c>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	430a      	orrs	r2, r1
 800049a:	f002 0235 	and.w	r2, r2, #53	; 0x35
 800049e:	e7eb      	b.n	8000478 <baseloader_start+0x318>
            verified = false;
 80004a0:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <baseloader_start+0x370>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
            break;
 80004a6:	e699      	b.n	80001dc <baseloader_start+0x7c>
 80004a8:	40022010 	.word	0x40022010
 80004ac:	2000081c 	.word	0x2000081c
 80004b0:	20000824 	.word	0x20000824
 80004b4:	20000830 	.word	0x20000830
 80004b8:	2000082c 	.word	0x2000082c
 80004bc:	20000828 	.word	0x20000828
 80004c0:	20000820 	.word	0x20000820
 80004c4:	4002200c 	.word	0x4002200c
 80004c8:	1ffff7e0 	.word	0x1ffff7e0
 80004cc:	4002204c 	.word	0x4002204c
 80004d0:	20000801 	.word	0x20000801

080004d4 <test_copy_bootloader>:

static uint32_t* test_dest = NULL;
static uint32_t* test_src = NULL;
static size_t test_half_word_count = 0;

void test_copy_bootloader(void) {
 80004d4:	b538      	push	{r3, r4, r5, lr}
	//  Copy bootloader to application space.
	uint32_t bootloader_size = (uint32_t) application_start - ROM_START;
 80004d6:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <test_copy_bootloader+0x70>)
 80004d8:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
	test_src =  (uint32_t *) (ROM_START);
 80004dc:	4c1a      	ldr	r4, [pc, #104]	; (8000548 <test_copy_bootloader+0x74>)
 80004de:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80004e2:	6021      	str	r1, [r4, #0]
	test_dest = FLASH_ADDRESS(application_start);
 80004e4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80004e8:	f023 0303 	bic.w	r3, r3, #3
 80004ec:	4d17      	ldr	r5, [pc, #92]	; (800054c <test_copy_bootloader+0x78>)
 80004ee:	602b      	str	r3, [r5, #0]
	test_half_word_count = bootloader_size / 2;
 80004f0:	0852      	lsrs	r2, r2, #1
	src = test_src; dest = test_dest; half_word_count = test_half_word_count; debug_dump(); ////
 80004f2:	4817      	ldr	r0, [pc, #92]	; (8000550 <test_copy_bootloader+0x7c>)
 80004f4:	6001      	str	r1, [r0, #0]
 80004f6:	4917      	ldr	r1, [pc, #92]	; (8000554 <test_copy_bootloader+0x80>)
 80004f8:	600b      	str	r3, [r1, #0]
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <test_copy_bootloader+0x84>)
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	4817      	ldr	r0, [pc, #92]	; (800055c <test_copy_bootloader+0x88>)
 8000500:	f001 fd5e 	bl	8001fc0 <debug_print>
 8000504:	6820      	ldr	r0, [r4, #0]
 8000506:	f001 fda3 	bl	8002050 <debug_printhex_unsigned>
 800050a:	4c15      	ldr	r4, [pc, #84]	; (8000560 <test_copy_bootloader+0x8c>)
 800050c:	4620      	mov	r0, r4
 800050e:	f001 fd2b 	bl	8001f68 <debug_println>
 8000512:	4814      	ldr	r0, [pc, #80]	; (8000564 <test_copy_bootloader+0x90>)
 8000514:	f001 fd54 	bl	8001fc0 <debug_print>
 8000518:	6828      	ldr	r0, [r5, #0]
 800051a:	f001 fd99 	bl	8002050 <debug_printhex_unsigned>
 800051e:	4620      	mov	r0, r4
 8000520:	f001 fd22 	bl	8001f68 <debug_println>
 8000524:	f001 fcb2 	bl	8001e8c <debug_force_flush>
 8000528:	480f      	ldr	r0, [pc, #60]	; (8000568 <test_copy_bootloader+0x94>)
 800052a:	f001 fd49 	bl	8001fc0 <debug_print>
 800052e:	682b      	ldr	r3, [r5, #0]
 8000530:	6818      	ldr	r0, [r3, #0]
 8000532:	f001 fd8d 	bl	8002050 <debug_printhex_unsigned>
 8000536:	4620      	mov	r0, r4
 8000538:	f001 fd16 	bl	8001f68 <debug_println>
 800053c:	f001 fca6 	bl	8001e8c <debug_force_flush>
}
 8000540:	bd38      	pop	{r3, r4, r5, pc}
 8000542:	bf00      	nop
 8000544:	08007801 	.word	0x08007801
 8000548:	20000838 	.word	0x20000838
 800054c:	20000834 	.word	0x20000834
 8000550:	20000830 	.word	0x20000830
 8000554:	2000081c 	.word	0x2000081c
 8000558:	2000082c 	.word	0x2000082c
 800055c:	08000904 	.word	0x08000904
 8000560:	08000990 	.word	0x08000990
 8000564:	0800090c 	.word	0x0800090c
 8000568:	08000914 	.word	0x08000914

0800056c <test_copy_vector>:

void test_copy_vector(void) {
 800056c:	b538      	push	{r3, r4, r5, lr}
	//  Copy vector to end of bootloader.
	uint32_t bootloader_size = (uint32_t) application_start - ROM_START;
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <test_copy_vector+0x74>)
 8000570:	f103 4178 	add.w	r1, r3, #4160749568	; 0xf8000000
	test_src =  (uint32_t *) (ROM_START);
 8000574:	4c1b      	ldr	r4, [pc, #108]	; (80005e4 <test_copy_vector+0x78>)
 8000576:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800057a:	6022      	str	r2, [r4, #0]
	test_dest = FLASH_ADDRESS(application_start + bootloader_size);
 800057c:	440b      	add	r3, r1
 800057e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000582:	f023 0303 	bic.w	r3, r3, #3
 8000586:	4d18      	ldr	r5, [pc, #96]	; (80005e8 <test_copy_vector+0x7c>)
 8000588:	602b      	str	r3, [r5, #0]
	test_half_word_count = FLASH_PAGE_HALF_WORD_COUNT;
	src = test_src; dest = test_dest; half_word_count = test_half_word_count; debug_dump(); ////
 800058a:	4918      	ldr	r1, [pc, #96]	; (80005ec <test_copy_vector+0x80>)
 800058c:	600a      	str	r2, [r1, #0]
 800058e:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <test_copy_vector+0x84>)
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <test_copy_vector+0x88>)
 8000594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	4817      	ldr	r0, [pc, #92]	; (80005f8 <test_copy_vector+0x8c>)
 800059c:	f001 fd10 	bl	8001fc0 <debug_print>
 80005a0:	6820      	ldr	r0, [r4, #0]
 80005a2:	f001 fd55 	bl	8002050 <debug_printhex_unsigned>
 80005a6:	4c15      	ldr	r4, [pc, #84]	; (80005fc <test_copy_vector+0x90>)
 80005a8:	4620      	mov	r0, r4
 80005aa:	f001 fcdd 	bl	8001f68 <debug_println>
 80005ae:	4814      	ldr	r0, [pc, #80]	; (8000600 <test_copy_vector+0x94>)
 80005b0:	f001 fd06 	bl	8001fc0 <debug_print>
 80005b4:	6828      	ldr	r0, [r5, #0]
 80005b6:	f001 fd4b 	bl	8002050 <debug_printhex_unsigned>
 80005ba:	4620      	mov	r0, r4
 80005bc:	f001 fcd4 	bl	8001f68 <debug_println>
 80005c0:	f001 fc64 	bl	8001e8c <debug_force_flush>
 80005c4:	480f      	ldr	r0, [pc, #60]	; (8000604 <test_copy_vector+0x98>)
 80005c6:	f001 fcfb 	bl	8001fc0 <debug_print>
 80005ca:	682b      	ldr	r3, [r5, #0]
 80005cc:	6818      	ldr	r0, [r3, #0]
 80005ce:	f001 fd3f 	bl	8002050 <debug_printhex_unsigned>
 80005d2:	4620      	mov	r0, r4
 80005d4:	f001 fcc8 	bl	8001f68 <debug_println>
 80005d8:	f001 fc58 	bl	8001e8c <debug_force_flush>
}
 80005dc:	bd38      	pop	{r3, r4, r5, pc}
 80005de:	bf00      	nop
 80005e0:	08007801 	.word	0x08007801
 80005e4:	20000838 	.word	0x20000838
 80005e8:	20000834 	.word	0x20000834
 80005ec:	20000830 	.word	0x20000830
 80005f0:	2000081c 	.word	0x2000081c
 80005f4:	2000082c 	.word	0x2000082c
 80005f8:	08000904 	.word	0x08000904
 80005fc:	08000990 	.word	0x08000990
 8000600:	0800090c 	.word	0x0800090c
 8000604:	08000914 	.word	0x08000914

08000608 <test_copy_end>:

void test_copy_end(void) {
 8000608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	dest = NULL; src = NULL; half_word_count = 0; debug_dump2(); ////
 800060c:	2300      	movs	r3, #0
 800060e:	4a32      	ldr	r2, [pc, #200]	; (80006d8 <test_copy_end+0xd0>)
 8000610:	6013      	str	r3, [r2, #0]
 8000612:	4a32      	ldr	r2, [pc, #200]	; (80006dc <test_copy_end+0xd4>)
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	4a32      	ldr	r2, [pc, #200]	; (80006e0 <test_copy_end+0xd8>)
 8000618:	6013      	str	r3, [r2, #0]
 800061a:	4832      	ldr	r0, [pc, #200]	; (80006e4 <test_copy_end+0xdc>)
 800061c:	f001 fcd0 	bl	8001fc0 <debug_print>
 8000620:	4c31      	ldr	r4, [pc, #196]	; (80006e8 <test_copy_end+0xe0>)
 8000622:	6823      	ldr	r3, [r4, #0]
 8000624:	6818      	ldr	r0, [r3, #0]
 8000626:	f001 fd13 	bl	8002050 <debug_printhex_unsigned>
 800062a:	4830      	ldr	r0, [pc, #192]	; (80006ec <test_copy_end+0xe4>)
 800062c:	f001 fcc8 	bl	8001fc0 <debug_print>
 8000630:	4b2f      	ldr	r3, [pc, #188]	; (80006f0 <test_copy_end+0xe8>)
 8000632:	7818      	ldrb	r0, [r3, #0]
 8000634:	f001 fcd4 	bl	8001fe0 <debug_printhex>
 8000638:	6823      	ldr	r3, [r4, #0]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b2d      	ldr	r3, [pc, #180]	; (80006f4 <test_copy_end+0xec>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	d046      	beq.n	80006d4 <test_copy_end+0xcc>
 8000646:	482c      	ldr	r0, [pc, #176]	; (80006f8 <test_copy_end+0xf0>)
 8000648:	f001 fcba 	bl	8001fc0 <debug_print>
 800064c:	482b      	ldr	r0, [pc, #172]	; (80006fc <test_copy_end+0xf4>)
 800064e:	f001 fc8b 	bl	8001f68 <debug_println>
 8000652:	f001 fc1b 	bl	8001e8c <debug_force_flush>

	uint32_t bootloader_size = (uint32_t) application_start - ROM_START;  //  TODO: Compute based on new bootloader size.
 8000656:	4c2a      	ldr	r4, [pc, #168]	; (8000700 <test_copy_end+0xf8>)
 8000658:	f104 4978 	add.w	r9, r4, #4160749568	; 0xf8000000

	base_vector_table_t *begin_base_vector = BASE_VECTOR_TABLE(application_start);
 800065c:	f424 737f 	bic.w	r3, r4, #1020	; 0x3fc
 8000660:	f023 0303 	bic.w	r3, r3, #3
 8000664:	4e27      	ldr	r6, [pc, #156]	; (8000704 <test_copy_end+0xfc>)
 8000666:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800066a:	ea43 0506 	orr.w	r5, r3, r6
	debug_print("begin_base_vector "); debug_printhex_unsigned(begin_base_vector); debug_println("");
 800066e:	4826      	ldr	r0, [pc, #152]	; (8000708 <test_copy_end+0x100>)
 8000670:	f001 fca6 	bl	8001fc0 <debug_print>
 8000674:	4628      	mov	r0, r5
 8000676:	f001 fceb 	bl	8002050 <debug_printhex_unsigned>
 800067a:	4f24      	ldr	r7, [pc, #144]	; (800070c <test_copy_end+0x104>)
 800067c:	4638      	mov	r0, r7
 800067e:	f001 fc73 	bl	8001f68 <debug_println>
	debug_print("magic "); debug_printhex_unsigned(begin_base_vector->magic_number); debug_println("");
 8000682:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8000718 <test_copy_end+0x110>
 8000686:	4640      	mov	r0, r8
 8000688:	f001 fc9a 	bl	8001fc0 <debug_print>
 800068c:	6828      	ldr	r0, [r5, #0]
 800068e:	f001 fcdf 	bl	8002050 <debug_printhex_unsigned>
 8000692:	4638      	mov	r0, r7
 8000694:	f001 fc68 	bl	8001f68 <debug_println>
	debug_force_flush();
 8000698:	f001 fbf8 	bl	8001e8c <debug_force_flush>

	base_vector_table_t *end_base_vector = BASE_VECTOR_TABLE(application_start + bootloader_size);
 800069c:	444c      	add	r4, r9
 800069e:	f424 747f 	bic.w	r4, r4, #1020	; 0x3fc
 80006a2:	f024 0403 	bic.w	r4, r4, #3
 80006a6:	4334      	orrs	r4, r6
	debug_print("end_base_vector "); debug_printhex_unsigned(end_base_vector); debug_println("");
 80006a8:	4819      	ldr	r0, [pc, #100]	; (8000710 <test_copy_end+0x108>)
 80006aa:	f001 fc89 	bl	8001fc0 <debug_print>
 80006ae:	4620      	mov	r0, r4
 80006b0:	f001 fcce 	bl	8002050 <debug_printhex_unsigned>
 80006b4:	4638      	mov	r0, r7
 80006b6:	f001 fc57 	bl	8001f68 <debug_println>
	debug_print("magic "); debug_printhex_unsigned(end_base_vector->magic_number); debug_println("");
 80006ba:	4640      	mov	r0, r8
 80006bc:	f001 fc80 	bl	8001fc0 <debug_print>
 80006c0:	6820      	ldr	r0, [r4, #0]
 80006c2:	f001 fcc5 	bl	8002050 <debug_printhex_unsigned>
 80006c6:	4638      	mov	r0, r7
 80006c8:	f001 fc4e 	bl	8001f68 <debug_println>
	debug_force_flush();
 80006cc:	f001 fbde 	bl	8001e8c <debug_force_flush>
}
 80006d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	dest = NULL; src = NULL; half_word_count = 0; debug_dump2(); ////
 80006d4:	480f      	ldr	r0, [pc, #60]	; (8000714 <test_copy_end+0x10c>)
 80006d6:	e7b7      	b.n	8000648 <test_copy_end+0x40>
 80006d8:	2000081c 	.word	0x2000081c
 80006dc:	20000830 	.word	0x20000830
 80006e0:	2000082c 	.word	0x2000082c
 80006e4:	0800092c 	.word	0x0800092c
 80006e8:	20000834 	.word	0x20000834
 80006ec:	08000934 	.word	0x08000934
 80006f0:	20000801 	.word	0x20000801
 80006f4:	20000838 	.word	0x20000838
 80006f8:	08000924 	.word	0x08000924
 80006fc:	08000938 	.word	0x08000938
 8000700:	08007801 	.word	0x08007801
 8000704:	08000150 	.word	0x08000150
 8000708:	0800093c 	.word	0x0800093c
 800070c:	08000990 	.word	0x08000990
 8000710:	08000958 	.word	0x08000958
 8000714:	0800091c 	.word	0x0800091c
 8000718:	08000950 	.word	0x08000950

0800071c <blocking_handler>:
	}

}

void blocking_handler(void)
{
 800071c:	e7fe      	b.n	800071c <blocking_handler>

0800071e <null_handler>:
}

void null_handler(void)
{
	/* Do nothing. */
}
 800071e:	4770      	bx	lr

08000720 <rtc_isr>:
volatile uint32_t platform_get_alarm(void) {
	//  Get alarm time.
	return rtc_get_alarm_val();
}

void rtc_isr(void) {
 8000720:	b508      	push	{r3, lr}
	//  Interrupt Service Routine for RTC Tick, Alarm, Overflow.  Don't call any I/O functions here.
	if (rtc_check_flag(RTC_SEC)) {
 8000722:	2000      	movs	r0, #0
 8000724:	f001 f854 	bl	80017d0 <rtc_check_flag>
 8000728:	b900      	cbnz	r0, 800072c <rtc_isr+0xc>
		//  Call the alarm function.
		if (alarmFunc != NULL) { alarmFunc(); }
		return;
	}
#endif  //  NOTUSED
}
 800072a:	bd08      	pop	{r3, pc}
		rtc_clear_flag(RTC_SEC);
 800072c:	2000      	movs	r0, #0
 800072e:	f001 f835 	bl	800179c <rtc_clear_flag>
		tickCount++;
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <rtc_isr+0x28>)
 8000734:	6813      	ldr	r3, [r2, #0]
 8000736:	3301      	adds	r3, #1
 8000738:	6013      	str	r3, [r2, #0]
		if (tickFunc != NULL) { tickFunc(); }
 800073a:	4b04      	ldr	r3, [pc, #16]	; (800074c <rtc_isr+0x2c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f3      	beq.n	800072a <rtc_isr+0xa>
 8000742:	4798      	blx	r3
 8000744:	e7f1      	b.n	800072a <rtc_isr+0xa>
 8000746:	bf00      	nop
 8000748:	20000b40 	.word	0x20000b40
 800074c:	20000b38 	.word	0x20000b38

08000750 <rtc_alarm_isr>:

void rtc_alarm_isr(void) {
 8000750:	b508      	push	{r3, lr}
	//  Interrupt Service Routine for RTC Alarm Wakeup.  Don't call any I/O functions here.
	//  The RTC alarm appears as EXTI 17 which must be reset independently of the RTC alarm flag.
	exti_reset_request(EXTI17);
 8000752:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000756:	f001 f88d 	bl	8001874 <exti_reset_request>
	rtc_clear_flag(RTC_ALR);
 800075a:	2001      	movs	r0, #1
 800075c:	f001 f81e 	bl	800179c <rtc_clear_flag>
	alarmCount++;
 8000760:	4a04      	ldr	r2, [pc, #16]	; (8000774 <rtc_alarm_isr+0x24>)
 8000762:	6813      	ldr	r3, [r2, #0]
 8000764:	3301      	adds	r3, #1
 8000766:	6013      	str	r3, [r2, #0]
	//  Call the alarm function.
	if (alarmFunc != NULL) { alarmFunc(); }
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <rtc_alarm_isr+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	b103      	cbz	r3, 8000770 <rtc_alarm_isr+0x20>
 800076e:	4798      	blx	r3
}
 8000770:	bd08      	pop	{r3, pc}
 8000772:	bf00      	nop
 8000774:	20000b34 	.word	0x20000b34
 8000778:	20000b3c 	.word	0x20000b3c

0800077c <usart2_isr>:
	usart_set_stopbits(USART2, USART_STOPBITS_1);
	usart_set_flow_control(USART2, USART_FLOWCONTROL_NONE);
	usart_set_mode(USART2, USART_MODE_TX_RX);
}

void usart2_isr(void) {
 800077c:	b508      	push	{r3, lr}
    //  Interrupt service routine for USART2. We enqueue each byte received.
	//  Check if we were called because of received data (RXNE). */
	if (((USART_CR1(USART2) & USART_CR1_RXNEIE) != 0) &&
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <usart2_isr+0x4c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f013 0f20 	tst.w	r3, #32
 8000786:	d004      	beq.n	8000792 <usart2_isr+0x16>
	    ((USART_SR(USART2) & USART_SR_RXNE) != 0)) {
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <usart2_isr+0x50>)
 800078a:	681b      	ldr	r3, [r3, #0]
	if (((USART_CR1(USART2) & USART_CR1_RXNEIE) != 0) &&
 800078c:	f013 0f20 	tst.w	r3, #32
 8000790:	d100      	bne.n	8000794 <usart2_isr+0x18>
		//  Read the next received byte and add to response queue.
		uint8_t ch = usart_recv(USART2);
        responseQueue.push(ch);
	}
}
 8000792:	bd08      	pop	{r3, pc}
		uint8_t ch = usart_recv(USART2);
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <usart2_isr+0x50>)
 8000796:	f001 f8c0 	bl	800191a <usart_recv>
 800079a:	b2c0      	uxtb	r0, r0
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <usart2_isr+0x54>)
 800079e:	681a      	ldr	r2, [r3, #0]
        write_index_(0), read_index_(0)
    {}

    static size_t next_index(size_t arg, size_t max_size)
    {
        size_t ret = arg + 1;
 80007a0:	1c53      	adds	r3, r2, #1
        while (BOOST_UNLIKELY(ret >= max_size))
 80007a2:	2b25      	cmp	r3, #37	; 0x25
 80007a4:	d80e      	bhi.n	80007c4 <usart2_isr+0x48>
 80007a6:	490a      	ldr	r1, [pc, #40]	; (80007d0 <usart2_isr+0x54>)
 80007a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007aa:	f3bf 8f5b 	dmb	ish
    bool push(T const & t, T * buffer, size_t max_size)
    {
        const size_t write_index = write_index_.load(memory_order_relaxed);  // only written from push thread
        const size_t next = next_index(write_index, max_size);

        if (next == read_index_.load(memory_order_acquire))
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d0ef      	beq.n	8000792 <usart2_isr+0x16>
            return false; /* ringbuffer is full */

        new (buffer + write_index) T(t); // copy-construct
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <usart2_isr+0x58>)
 80007b4:	42d1      	cmn	r1, r2
 80007b6:	d000      	beq.n	80007ba <usart2_isr+0x3e>
 80007b8:	5488      	strb	r0, [r1, r2]
	__atomic_store_n(&_M_i, __i, __m);
 80007ba:	f3bf 8f5b 	dmb	ish
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <usart2_isr+0x54>)
 80007c0:	6013      	str	r3, [r2, #0]
}
 80007c2:	e7e6      	b.n	8000792 <usart2_isr+0x16>
            ret -= max_size;
 80007c4:	3b26      	subs	r3, #38	; 0x26
 80007c6:	e7ec      	b.n	80007a2 <usart2_isr+0x26>
 80007c8:	4000440c 	.word	0x4000440c
 80007cc:	40004400 	.word	0x40004400
 80007d0:	20002994 	.word	0x20002994
 80007d4:	200029d8 	.word	0x200029d8

080007d8 <pre_main>:
extern void application_start(void);

uint32_t hal_bss_test;                   //  Test whether BSS Section is loaded correctly.
uint32_t hal_data_test = 0x87654321;     //  Test whether Data Section is loaded correctly.

static void pre_main() {
 80007d8:	b508      	push	{r3, lr}
	//  Init the STM32 platform and start the timer.  Note: Constructors are not called yet.
    //  Note: Must disable debug when testing Deep Sleep.  Else device will not run without ST Link.
    target_enable_debug();       //  Uncomment to allow display of debug messages in development devices. NOTE: This will hang if no Arm Semihosting debugger is attached.
 80007da:	f000 fd4b 	bl	8001274 <target_enable_debug>
    //  target_disable_debug();  //  Uncomment to disable display of debug messages.  For use in production devices.
    target_init();               //  Init the STM32 platform.
 80007de:	f000 fc7b 	bl	80010d8 <target_init>

	//  Test whether Bootloader BSS and Data Sections are loaded correctly.
    if (hal_bss_test != 0x0 || hal_data_test != 0x87654321) {
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <pre_main+0x3c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	b923      	cbnz	r3, 80007f2 <pre_main+0x1a>
 80007e8:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <pre_main+0x40>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <pre_main+0x44>)
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d00e      	beq.n	8000810 <pre_main+0x38>
        debug_print("*** hal bss/data failed, bss_test = "); debug_printhex_unsigned(hal_bss_test);
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <pre_main+0x48>)
 80007f4:	f001 fbe4 	bl	8001fc0 <debug_print>
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <pre_main+0x3c>)
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	f001 fc28 	bl	8002050 <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(hal_data_test);
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <pre_main+0x4c>)
 8000802:	f001 fbdd 	bl	8001fc0 <debug_print>
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <pre_main+0x40>)
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	f001 fc21 	bl	8002050 <debug_printhex_unsigned>
 800080e:	e7fe      	b.n	800080e <pre_main+0x36>
    }
#ifdef UNIT_TEST
    //  Run the unit tests if any.  Don't run unit test in bootloader, because we will run out of space in bootrom.
    run_unit_test();	
#endif  //  UNIT_TEST
}
 8000810:	bd08      	pop	{r3, pc}
 8000812:	bf00      	nop
 8000814:	20000b48 	.word	0x20000b48
 8000818:	20000804 	.word	0x20000804
 800081c:	87654321 	.word	0x87654321
 8000820:	0800096c 	.word	0x0800096c
 8000824:	08000994 	.word	0x08000994

08000828 <reset_handler>:

void reset_handler(void) {
 8000828:	b510      	push	{r4, lr}
	//  We also call the constructors.  The vector table points to this function.
	volatile unsigned *src, *boot_dest;
	funcp_t *fp;

	//  Copy Bootloader data section from ROM to RAM.
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <reset_handler+0x6c>)
 800082c:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <reset_handler+0x70>)
 800082e:	e003      	b.n	8000838 <reset_handler+0x10>
		boot_dest < &_boot_edata;  //  Bootloader
		src++, boot_dest++) {
		*boot_dest = *src;
 8000830:	f852 1b04 	ldr.w	r1, [r2], #4
 8000834:	f843 1b04 	str.w	r1, [r3], #4
	for (src = &_boot_data_loadaddr, boot_dest = &_boot_data;
 8000838:	4918      	ldr	r1, [pc, #96]	; (800089c <reset_handler+0x74>)
 800083a:	428b      	cmp	r3, r1
 800083c:	d3f8      	bcc.n	8000830 <reset_handler+0x8>
 800083e:	e002      	b.n	8000846 <reset_handler+0x1e>
	}

	//  Init variables in Bootloader BSS section to null.
	while (boot_dest < &_boot_ebss) { *boot_dest++ = 0; }
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	3304      	adds	r3, #4
 8000846:	4a16      	ldr	r2, [pc, #88]	; (80008a0 <reset_handler+0x78>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d3f9      	bcc.n	8000840 <reset_handler+0x18>

	/* Ensure 8-byte alignment of stack pointer on interrupts */
	/* Enabled by default on most Cortex-M parts, but not M3 r1 */
	SCB_CCR |= SCB_CCR_STKALIGN;
 800084c:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <reset_handler+0x7c>)
 800084e:	6813      	ldr	r3, [r2, #0]
 8000850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000854:	6013      	str	r3, [r2, #0]

	//  Perform our platform initialisation.  pre_main() will not return if bootloader decides to run in Bootloader Mode.
	pre_main();
 8000856:	f7ff ffbf 	bl	80007d8 <pre_main>
	//  Application constructors will be called by application_start().
	//  TODO: Fix these bootloader constructors:
	// .init_array    0x0000000008009778        0x4 .pioenvs/bluepill_f103c8/src/uart.o
 	// .init_array    0x000000000800977c        0x4 .pioenvs/bluepill_f103c8/lib33e/libuartint.a(uartint.o)
 	// .init_array    0x0000000008009780        0x4 .pioenvs/bluepill_f103c8/lib3e7/libcodal-core.a(ManagedString.o)
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 800085a:	4c13      	ldr	r4, [pc, #76]	; (80008a8 <reset_handler+0x80>)
 800085c:	e002      	b.n	8000864 <reset_handler+0x3c>
		(*fp)();
 800085e:	f854 3b04 	ldr.w	r3, [r4], #4
 8000862:	4798      	blx	r3
	for (fp = &__boot_preinit_array_start; fp < &__boot_preinit_array_end; fp++) {
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <reset_handler+0x84>)
 8000866:	429c      	cmp	r4, r3
 8000868:	d3f9      	bcc.n	800085e <reset_handler+0x36>
	}
	for (fp = &__boot_init_array_start; fp < &__boot_init_array_end; fp++) {
 800086a:	4c11      	ldr	r4, [pc, #68]	; (80008b0 <reset_handler+0x88>)
 800086c:	e002      	b.n	8000874 <reset_handler+0x4c>
		(*fp)();
 800086e:	f854 3b04 	ldr.w	r3, [r4], #4
 8000872:	4798      	blx	r3
	for (fp = &__boot_init_array_start; fp < &__boot_init_array_end; fp++) {
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <reset_handler+0x8c>)
 8000876:	429c      	cmp	r4, r3
 8000878:	d3f9      	bcc.n	800086e <reset_handler+0x46>
	}

    //  Start the baseloader.  This function will not return if the baseloader restarts Blue Pill after flashing.
	test_copy_bootloader(); ////
 800087a:	f7ff fe2b 	bl	80004d4 <test_copy_bootloader>
	baseloader_start();
 800087e:	f7ff fc6f 	bl	8000160 <baseloader_start>
	test_copy_end();
 8000882:	f7ff fec1 	bl	8000608 <test_copy_end>

	test_copy_vector(); ////
 8000886:	f7ff fe71 	bl	800056c <test_copy_vector>
	baseloader_start();
 800088a:	f7ff fc69 	bl	8000160 <baseloader_start>
	test_copy_end();
 800088e:	f7ff febb 	bl	8000608 <test_copy_end>
 8000892:	e7fe      	b.n	8000892 <reset_handler+0x6a>
 8000894:	20000800 	.word	0x20000800
 8000898:	08002418 	.word	0x08002418
 800089c:	2000081c 	.word	0x2000081c
 80008a0:	20000b50 	.word	0x20000b50
 80008a4:	e000ed14 	.word	0xe000ed14
 80008a8:	08002418 	.word	0x08002418
 80008ac:	08002418 	.word	0x08002418
 80008b0:	08002418 	.word	0x08002418
 80008b4:	08002418 	.word	0x08002418
 80008b8:	53494420 	.word	0x53494420
 80008bc:	454c4241 	.word	0x454c4241
 80008c0:	544e4920 	.word	0x544e4920
 80008c4:	55525245 	.word	0x55525245
 80008c8:	20535450 	.word	0x20535450
 80008cc:	00000000 	.word	0x00000000
 80008d0:	616e6520 	.word	0x616e6520
 80008d4:	20656c62 	.word	0x20656c62
 80008d8:	65746e69 	.word	0x65746e69
 80008dc:	70757272 	.word	0x70757272
 80008e0:	00207374 	.word	0x00207374
 80008e4:	67726174 	.word	0x67726174
 80008e8:	665f7465 	.word	0x665f7465
 80008ec:	6873616c 	.word	0x6873616c
 80008f0:	00000020 	.word	0x00000020
 80008f4:	7273202c 	.word	0x7273202c
 80008f8:	00002063 	.word	0x00002063
 80008fc:	6c68202c 	.word	0x6c68202c
 8000900:	00206e65 	.word	0x00206e65
 8000904:	20637273 	.word	0x20637273
 8000908:	00000020 	.word	0x00000020
 800090c:	74736564 	.word	0x74736564
 8000910:	00000020 	.word	0x00000020
 8000914:	6f666562 	.word	0x6f666562
 8000918:	00206572 	.word	0x00206572
 800091c:	204b4f20 	.word	0x204b4f20
 8000920:	00000000 	.word	0x00000000
 8000924:	49414620 	.word	0x49414620
 8000928:	0000204c 	.word	0x0000204c
 800092c:	65746661 	.word	0x65746661
 8000930:	00002072 	.word	0x00002072
 8000934:	00202f20 	.word	0x00202f20
 8000938:	00000a0d 	.word	0x00000a0d
 800093c:	69676562 	.word	0x69676562
 8000940:	61625f6e 	.word	0x61625f6e
 8000944:	765f6573 	.word	0x765f6573
 8000948:	6f746365 	.word	0x6f746365
 800094c:	00002072 	.word	0x00002072
 8000950:	6967616d 	.word	0x6967616d
 8000954:	00002063 	.word	0x00002063
 8000958:	5f646e65 	.word	0x5f646e65
 800095c:	65736162 	.word	0x65736162
 8000960:	6365765f 	.word	0x6365765f
 8000964:	20726f74 	.word	0x20726f74
 8000968:	00000000 	.word	0x00000000
 800096c:	202a2a2a 	.word	0x202a2a2a
 8000970:	206c6168 	.word	0x206c6168
 8000974:	2f737362 	.word	0x2f737362
 8000978:	61746164 	.word	0x61746164
 800097c:	69616620 	.word	0x69616620
 8000980:	2c64656c 	.word	0x2c64656c
 8000984:	73736220 	.word	0x73736220
 8000988:	7365745f 	.word	0x7365745f
 800098c:	203d2074 	.word	0x203d2074
 8000990:	00000000 	.word	0x00000000
 8000994:	6164202c 	.word	0x6164202c
 8000998:	745f6174 	.word	0x745f6174
 800099c:	20747365 	.word	0x20747365
 80009a0:	0000203d 	.word	0x0000203d

Disassembly of section .boot_text:

08001000 <_ZL11timer_alarmv>:
    if (tick_callback) { tick_callback(); }
    //  Call cocoOS at every tick.
    os_tick();
}

static void timer_alarm() {
 8001000:	b508      	push	{r3, lr}
        debug_print(";");
        poll_bootloader();
    }
#endif  //  NOTUSED
    //  If Codal Timer exists, update the timer.
    if (alarm_callback) { alarm_callback(); }
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <_ZL11timer_alarmv+0x1c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	b10b      	cbz	r3, 800100c <_ZL11timer_alarmv+0xc>
 8001008:	4798      	blx	r3
    else { if (millis() < 200) { debug_print("a? "); } }
}
 800100a:	bd08      	pop	{r3, pc}
    else { if (millis() < 200) { debug_print("a? "); } }
 800100c:	f001 f956 	bl	80022bc <millis>
 8001010:	28c7      	cmp	r0, #199	; 0xc7
 8001012:	d8fa      	bhi.n	800100a <_ZL11timer_alarmv+0xa>
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <_ZL11timer_alarmv+0x20>)
 8001016:	f000 ffd3 	bl	8001fc0 <debug_print>
}
 800101a:	e7f6      	b.n	800100a <_ZL11timer_alarmv+0xa>
 800101c:	20000844 	.word	0x20000844
 8001020:	080022f0 	.word	0x080022f0

08001024 <_ZL15poll_bootloaderv>:
    if (!bootloader_callback) { return; }
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <_ZL15poll_bootloaderv+0x5c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	b343      	cbz	r3, 800107c <_ZL15poll_bootloaderv+0x58>
static void poll_bootloader() {
 800102a:	b510      	push	{r4, lr}
    poll_status = bootloader_callback();
 800102c:	4798      	blx	r3
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <_ZL15poll_bootloaderv+0x60>)
 8001030:	6018      	str	r0, [r3, #0]
    prev_poll_status = poll_status;
 8001032:	6819      	ldr	r1, [r3, #0]
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_ZL15poll_bootloaderv+0x64>)
 8001036:	6011      	str	r1, [r2, #0]
    if (poll_status > 0) { debug_print("u{ "); }
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	dc12      	bgt.n	8001064 <_ZL15poll_bootloaderv+0x40>
    while (poll_status > 0) {  //  If we receive any USB requests,,,
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <_ZL15poll_bootloaderv+0x60>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	dd12      	ble.n	800106c <_ZL15poll_bootloaderv+0x48>
        poll_status = 0;       //  Continue polling a few times for subsequent USB requests.
 8001046:	2400      	movs	r4, #0
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <_ZL15poll_bootloaderv+0x60>)
 800104a:	601c      	str	r4, [r3, #0]
        for (uint16_t i = 0; i < MAX_BURST_POLL; i++) {
 800104c:	2c09      	cmp	r4, #9
 800104e:	d8f6      	bhi.n	800103e <_ZL15poll_bootloaderv+0x1a>
            poll_status = poll_status | bootloader_callback();
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <_ZL15poll_bootloaderv+0x5c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4798      	blx	r3
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <_ZL15poll_bootloaderv+0x60>)
 8001058:	6813      	ldr	r3, [r2, #0]
 800105a:	4318      	orrs	r0, r3
 800105c:	6010      	str	r0, [r2, #0]
        for (uint16_t i = 0; i < MAX_BURST_POLL; i++) {
 800105e:	3401      	adds	r4, #1
 8001060:	b2a4      	uxth	r4, r4
 8001062:	e7f3      	b.n	800104c <_ZL15poll_bootloaderv+0x28>
    if (poll_status > 0) { debug_print("u{ "); }
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <_ZL15poll_bootloaderv+0x68>)
 8001066:	f000 ffab 	bl	8001fc0 <debug_print>
 800106a:	e7e8      	b.n	800103e <_ZL15poll_bootloaderv+0x1a>
    if (prev_poll_status > 0) { debug_print("} "); }
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <_ZL15poll_bootloaderv+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	dd02      	ble.n	800107a <_ZL15poll_bootloaderv+0x56>
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <_ZL15poll_bootloaderv+0x6c>)
 8001076:	f000 ffa3 	bl	8001fc0 <debug_print>
}
 800107a:	bd10      	pop	{r4, pc}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000084c 	.word	0x2000084c
 8001084:	2000083c 	.word	0x2000083c
 8001088:	20000848 	.word	0x20000848
 800108c:	080022f4 	.word	0x080022f4
 8001090:	080022f8 	.word	0x080022f8

08001094 <_ZL10timer_tickv>:
static void timer_tick() {
 8001094:	b508      	push	{r3, lr}
    poll_bootloader();
 8001096:	f7ff ffc5 	bl	8001024 <_ZL15poll_bootloaderv>
    if (tick_callback) { tick_callback(); }
 800109a:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <_ZL10timer_tickv+0x14>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	b103      	cbz	r3, 80010a2 <_ZL10timer_tickv+0xe>
 80010a0:	4798      	blx	r3
    os_tick();
 80010a2:	f000 fe3e 	bl	8001d22 <os_tick>
}
 80010a6:	bd08      	pop	{r3, pc}
 80010a8:	20000840 	.word	0x20000840

080010ac <_ZL11os_schedulev>:
    if (os_running()) { return; }  //  Already running.
    running = 1;
    os_enable_interrupts();
}

static void os_schedule( void ) {
 80010ac:	b510      	push	{r4, lr}
    //  Call this to schedule a task.
    if (!os_running()) { return; }  //  Don't schedule if cocoOS scheduler is not started.
 80010ae:	f000 fc81 	bl	80019b4 <os_running>
 80010b2:	b900      	cbnz	r0, 80010b6 <_ZL11os_schedulev+0xa>
        os_task_run();
    }
    else {
        os_cbkSleep();
    }
}
 80010b4:	bd10      	pop	{r4, pc}
    running_tid = NO_TID;
 80010b6:	4c07      	ldr	r4, [pc, #28]	; (80010d4 <_ZL11os_schedulev+0x28>)
 80010b8:	23ff      	movs	r3, #255	; 0xff
 80010ba:	7023      	strb	r3, [r4, #0]
    running_tid = os_task_highest_prio_ready_task();   
 80010bc:	f000 fd2e 	bl	8001b1c <os_task_highest_prio_ready_task>
 80010c0:	7020      	strb	r0, [r4, #0]
    if ( running_tid != NO_TID ) {
 80010c2:	28ff      	cmp	r0, #255	; 0xff
 80010c4:	d002      	beq.n	80010cc <_ZL11os_schedulev+0x20>
        os_task_run();
 80010c6:	f000 fdfb 	bl	8001cc0 <os_task_run>
 80010ca:	e7f3      	b.n	80010b4 <_ZL11os_schedulev+0x8>
        os_cbkSleep();
 80010cc:	f000 fe28 	bl	8001d20 <os_cbkSleep>
 80010d0:	e7f0      	b.n	80010b4 <_ZL11os_schedulev+0x8>
 80010d2:	bf00      	nop
 80010d4:	20000b4c 	.word	0x20000b4c

080010d8 <target_init>:
void target_init(void) {
 80010d8:	b508      	push	{r3, lr}
    if (initialised) { return; }  //  Already initialised, skip.
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <target_init+0x24>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b103      	cbz	r3, 80010e2 <target_init+0xa>
}
 80010e0:	bd08      	pop	{r3, pc}
    initialised = true;
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <target_init+0x24>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
    platform_setup();  //  STM32 platform setup.
 80010e8:	f000 ffc0 	bl	800206c <platform_setup>
    os_init();         //  Init cocoOS before creating any multitasking objects.
 80010ec:	f000 fc4a 	bl	8001984 <os_init>
    platform_start_timer(timer_tick, timer_alarm);
 80010f0:	4903      	ldr	r1, [pc, #12]	; (8001100 <target_init+0x28>)
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <target_init+0x2c>)
 80010f4:	f001 f89a 	bl	800222c <platform_start_timer>
 80010f8:	e7f2      	b.n	80010e0 <target_init+0x8>
 80010fa:	bf00      	nop
 80010fc:	20000854 	.word	0x20000854
 8001100:	08001001 	.word	0x08001001
 8001104:	08001095 	.word	0x08001095

08001108 <target_wait_for_event>:
    if (!initialised) { return; }  //  If not initialised, quit.
 8001108:	4b02      	ldr	r3, [pc, #8]	; (8001114 <target_wait_for_event+0xc>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b103      	cbz	r3, 8001110 <target_wait_for_event+0x8>
    __asm("wfe");  //  Allow CPU to go to sleep.
 800110e:	bf20      	wfe
}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000854 	.word	0x20000854

08001118 <target_wait>:
    if (milliseconds <= 0) { return; }
 8001118:	b310      	cbz	r0, 8001160 <target_wait+0x48>
void target_wait(uint32_t milliseconds) {
 800111a:	b510      	push	{r4, lr}
 800111c:	4604      	mov	r4, r0
    if (!initialised) { return; }  //  If not initialised, quit.
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <target_wait+0x4c>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b903      	cbnz	r3, 8001126 <target_wait+0xe>
}
 8001124:	bd10      	pop	{r4, pc}
    debug_print("wt <"); debug_print_unsigned(milliseconds / 1000);
 8001126:	4810      	ldr	r0, [pc, #64]	; (8001168 <target_wait+0x50>)
 8001128:	f000 ff4a 	bl	8001fc0 <debug_print>
 800112c:	480f      	ldr	r0, [pc, #60]	; (800116c <target_wait+0x54>)
 800112e:	fba0 3004 	umull	r3, r0, r0, r4
 8001132:	0980      	lsrs	r0, r0, #6
 8001134:	f000 ff50 	bl	8001fd8 <debug_print_unsigned>
    uint32_t end = millis() + milliseconds;
 8001138:	f001 f8c0 	bl	80022bc <millis>
 800113c:	4404      	add	r4, r0
 800113e:	e000      	b.n	8001142 <target_wait+0x2a>
        __asm("wfe");  //  Allow CPU to go to sleep.
 8001140:	bf20      	wfe
        if (millis() >= end) { break; }
 8001142:	f001 f8bb 	bl	80022bc <millis>
 8001146:	42a0      	cmp	r0, r4
 8001148:	d206      	bcs.n	8001158 <target_wait+0x40>
        if (os_running()) { os_schedule(); }  //  Schedule a cocoOS task to run.
 800114a:	f000 fc33 	bl	80019b4 <os_running>
 800114e:	2800      	cmp	r0, #0
 8001150:	d0f6      	beq.n	8001140 <target_wait+0x28>
 8001152:	f7ff ffab 	bl	80010ac <_ZL11os_schedulev>
 8001156:	e7f3      	b.n	8001140 <target_wait+0x28>
    debug_print("> ");
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <target_wait+0x58>)
 800115a:	f000 ff31 	bl	8001fc0 <debug_print>
 800115e:	e7e1      	b.n	8001124 <target_wait+0xc>
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000854 	.word	0x20000854
 8001168:	08002310 	.word	0x08002310
 800116c:	10624dd3 	.word	0x10624dd3
 8001170:	08002318 	.word	0x08002318

08001174 <target_wait_us>:
void target_wait_us(unsigned long microseconds) {
 8001174:	b508      	push	{r3, lr}
    return target_wait(microseconds / 1000);
 8001176:	4b03      	ldr	r3, [pc, #12]	; (8001184 <target_wait_us+0x10>)
 8001178:	fba3 3000 	umull	r3, r0, r3, r0
 800117c:	0980      	lsrs	r0, r0, #6
 800117e:	f7ff ffcb 	bl	8001118 <target_wait>
}
 8001182:	bd08      	pop	{r3, pc}
 8001184:	10624dd3 	.word	0x10624dd3

08001188 <target_panic>:
void target_panic(int statusCode) {
 8001188:	b508      	push	{r3, lr}
 800118a:	4604      	mov	r4, r0
    target_disable_irq();
 800118c:	f000 f858 	bl	8001240 <target_disable_irq>
	debug_print("*****target_panic ");
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <target_panic+0x1c>)
 8001192:	f000 ff15 	bl	8001fc0 <debug_print>
	debug_println((int) statusCode);
 8001196:	4620      	mov	r0, r4
 8001198:	f000 fef4 	bl	8001f84 <_Z13debug_printlni>
	debug_flush();
 800119c:	f000 ff0b 	bl	8001fb6 <debug_flush>
        __asm("wfe");  //  Allow CPU to go to sleep.
 80011a0:	bf20      	wfe
 80011a2:	e7fd      	b.n	80011a0 <target_panic+0x18>
 80011a4:	080022fc 	.word	0x080022fc

080011a8 <fiber_initial_stack_base>:
}
 80011a8:	4800      	ldr	r0, [pc, #0]	; (80011ac <fiber_initial_stack_base+0x4>)
 80011aa:	4770      	bx	lr
 80011ac:	20005000 	.word	0x20005000

080011b0 <test_codal>:
void test_codal() {
 80011b0:	b538      	push	{r3, r4, r5, lr}
	PROCESSOR_WORD_TYPE start = (PROCESSOR_WORD_TYPE)(codal_heap_start); 
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <test_codal+0x58>)
 80011b4:	681d      	ldr	r5, [r3, #0]
	PROCESSOR_WORD_TYPE size = end - start;
 80011b6:	f1c5 5400 	rsb	r4, r5, #536870912	; 0x20000000
 80011ba:	f504 4490 	add.w	r4, r4, #18432	; 0x4800
	debug_print("heap start: "); debug_printhex_unsigned((size_t) start);
 80011be:	4813      	ldr	r0, [pc, #76]	; (800120c <test_codal+0x5c>)
 80011c0:	f000 fefe 	bl	8001fc0 <debug_print>
 80011c4:	4628      	mov	r0, r5
 80011c6:	f000 ff43 	bl	8002050 <debug_printhex_unsigned>
	debug_print(", end: ");      debug_printhex_unsigned((size_t) end);
 80011ca:	4811      	ldr	r0, [pc, #68]	; (8001210 <test_codal+0x60>)
 80011cc:	f000 fef8 	bl	8001fc0 <debug_print>
 80011d0:	4810      	ldr	r0, [pc, #64]	; (8001214 <test_codal+0x64>)
 80011d2:	f000 ff3d 	bl	8002050 <debug_printhex_unsigned>
	debug_print(", size: ");     debug_print((size_t) (size >> 10));
 80011d6:	4810      	ldr	r0, [pc, #64]	; (8001218 <test_codal+0x68>)
 80011d8:	f000 fef2 	bl	8001fc0 <debug_print>
 80011dc:	0aa0      	lsrs	r0, r4, #10
 80011de:	f000 fe65 	bl	8001eac <_Z11debug_printj>
	debug_print(" KB, stack used: "); debug_print((size_t) 
 80011e2:	480e      	ldr	r0, [pc, #56]	; (800121c <test_codal+0x6c>)
 80011e4:	f000 feec 	bl	8001fc0 <debug_print>
        ((PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - get_current_sp()) >> 10);
 80011e8:	f000 f839 	bl	800125e <get_current_sp>
 80011ec:	f1c0 5000 	rsb	r0, r0, #536870912	; 0x20000000
 80011f0:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
	debug_print(" KB, stack used: "); debug_print((size_t) 
 80011f4:	0a80      	lsrs	r0, r0, #10
 80011f6:	f000 fe59 	bl	8001eac <_Z11debug_printj>
    debug_println(" KB"); debug_flush();
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <test_codal+0x70>)
 80011fc:	f000 feb4 	bl	8001f68 <debug_println>
 8001200:	f000 fed9 	bl	8001fb6 <debug_flush>
}
 8001204:	bd38      	pop	{r3, r4, r5, pc}
 8001206:	bf00      	nop
 8001208:	20000808 	.word	0x20000808
 800120c:	0800231c 	.word	0x0800231c
 8001210:	0800232c 	.word	0x0800232c
 8001214:	20004800 	.word	0x20004800
 8001218:	08002334 	.word	0x08002334
 800121c:	08002340 	.word	0x08002340
 8001220:	08002354 	.word	0x08002354

08001224 <target_set_tick_callback>:
    tick_callback = tick_callback0;
 8001224:	4b01      	ldr	r3, [pc, #4]	; (800122c <target_set_tick_callback+0x8>)
 8001226:	6018      	str	r0, [r3, #0]
}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000840 	.word	0x20000840

08001230 <target_set_alarm_callback>:
    alarm_callback = alarm_callback0;
 8001230:	4b01      	ldr	r3, [pc, #4]	; (8001238 <target_set_alarm_callback+0x8>)
 8001232:	6018      	str	r0, [r3, #0]
}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000844 	.word	0x20000844

0800123c <target_enable_irq>:
 *
 * Disable the interrupt mask and enable interrupts globally
 */
static inline void cm_enable_interrupts(void)
{
	__asm__("CPSIE I\n");
 800123c:	b662      	cpsie	i
}
 800123e:	4770      	bx	lr

08001240 <target_disable_irq>:
 *
 * Mask all interrupts globally
 */
static inline void cm_disable_interrupts(void)
{
	__asm__("CPSID I\n");
 8001240:	b672      	cpsid	i
}
 8001242:	4770      	bx	lr

08001244 <tcb_allocate>:
void *tcb_allocate() {
 8001244:	b508      	push	{r3, lr}
    return (void *)malloc(sizeof(PROCESSOR_TCB));
 8001246:	2040      	movs	r0, #64	; 0x40
 8001248:	f007 f86e 	bl	8008328 <device_malloc>
}
 800124c:	bd08      	pop	{r3, pc}

0800124e <tcb_configure_lr>:
    tcbPointer->LR = function;
 800124e:	6381      	str	r1, [r0, #56]	; 0x38
}
 8001250:	4770      	bx	lr

08001252 <tcb_configure_sp>:
    tcbPointer->SP = sp;
 8001252:	6341      	str	r1, [r0, #52]	; 0x34
}
 8001254:	4770      	bx	lr

08001256 <tcb_configure_stack_base>:
    tcbPointer->stack_base = stack_base;
 8001256:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8001258:	4770      	bx	lr

0800125a <tcb_get_stack_base>:
}
 800125a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800125c:	4770      	bx	lr

0800125e <get_current_sp>:
}
 800125e:	4668      	mov	r0, sp
 8001260:	4770      	bx	lr

08001262 <tcb_get_sp>:
}
 8001262:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001264:	4770      	bx	lr

08001266 <tcb_configure_args>:
    tcbPointer->R0 = (uint32_t)ep;
 8001266:	6001      	str	r1, [r0, #0]
    tcbPointer->R1 = (uint32_t)cp;
 8001268:	6042      	str	r2, [r0, #4]
    tcbPointer->R2 = (uint32_t)pm;
 800126a:	6083      	str	r3, [r0, #8]
}
 800126c:	4770      	bx	lr

0800126e <_fini>:
    void _fini(void) { }
 800126e:	4770      	bx	lr

08001270 <__aeabi_atexit>:
    }
 8001270:	2000      	movs	r0, #0
 8001272:	4770      	bx	lr

08001274 <target_enable_debug>:
void target_enable_debug(void) {
 8001274:	b508      	push	{r3, lr}
    enable_debug();   
 8001276:	f000 ff1f 	bl	80020b8 <enable_debug>
}
 800127a:	bd08      	pop	{r3, pc}

0800127c <swap_context>:

    @ Write our core registers into the TCB
    @ First, store the general registers

    @ Skip this is we're given a NULL parameter for the TCB
    CMP     R0, #0
 800127c:	2800      	cmp	r0, #0
    BEQ     store_context_complete
 800127e:	d015      	beq.n	80012ac <store_context_complete>

    STR     R0, [R0,#0]
 8001280:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8001282:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8001284:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8001286:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8001288:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 800128a:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 800128c:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 800128e:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8001290:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8001292:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8001294:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8001296:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8001298:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 800129a:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 800129c:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 800129e:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 80012a0:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 80012a2:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 80012a4:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 80012a6:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 80012a8:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 80012aa:	6384      	str	r4, [r0, #56]	; 0x38

080012ac <store_context_complete>:
store_context_complete:
    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stack is usually very small at the point
    @ of scheduling, but we need a lot of capacity for interrupt handling and other functions.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R1, #0
 80012ac:	2900      	cmp	r1, #0
    BEQ     store_stack_complete
 80012ae:	d006      	beq.n	80012be <store_stack_complete>

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 80012b0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

080012b2 <store_stack>:
store_stack:
    SUBS    R4, #4
 80012b2:	3c04      	subs	r4, #4
    SUBS    R1, #4
 80012b4:	3904      	subs	r1, #4

    LDR     R5, [R4]
 80012b6:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 80012b8:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 80012ba:	42b4      	cmp	r4, r6
    BNE     store_stack
 80012bc:	d1f9      	bne.n	80012b2 <store_stack>

080012be <store_stack_complete>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R2, #56]
 80012be:	6b94      	ldr	r4, [r2, #56]	; 0x38
    MOV     LR, R4
 80012c0:	46a6      	mov	lr, r4
    LDR     R6, [R2, #52]
 80012c2:	6b56      	ldr	r6, [r2, #52]	; 0x34
    MOV     SP, R6
 80012c4:	46b5      	mov	sp, r6

    @ Copy the stack in.
    @ n.b. we do this after setting the SP to make comparisons easier.

    @ Skip this is we're given a NULL parameter for the stack.
    CMP     R3, #0
 80012c6:	2b00      	cmp	r3, #0
    BEQ     restore_stack_complete
 80012c8:	d006      	beq.n	80012d8 <restore_stack_complete>

    LDR     R4, [R2,#60]         @ Load R4 with the fiber's defined stack_base.
 80012ca:	6bd4      	ldr	r4, [r2, #60]	; 0x3c

080012cc <restore_stack>:

restore_stack:
    SUBS    R4, #4
 80012cc:	3c04      	subs	r4, #4
    SUBS    R3, #4
 80012ce:	3b04      	subs	r3, #4

    LDR     R5, [R3]
 80012d0:	681d      	ldr	r5, [r3, #0]
    STR     R5, [R4]
 80012d2:	6025      	str	r5, [r4, #0]

    CMP     R4, R6
 80012d4:	42b4      	cmp	r4, r6
    BNE     restore_stack
 80012d6:	d1f9      	bne.n	80012cc <restore_stack>

080012d8 <restore_stack_complete>:

restore_stack_complete:
    LDR     R4, [R2, #48]
 80012d8:	6b14      	ldr	r4, [r2, #48]	; 0x30
    MOV     R12, R4
 80012da:	46a4      	mov	ip, r4
    LDR     R4, [R2, #44]
 80012dc:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
    MOV     R11, R4
 80012de:	46a3      	mov	fp, r4
    LDR     R4, [R2, #40]
 80012e0:	6a94      	ldr	r4, [r2, #40]	; 0x28
    MOV     R10, R4
 80012e2:	46a2      	mov	sl, r4
    LDR     R4, [R2, #36]
 80012e4:	6a54      	ldr	r4, [r2, #36]	; 0x24
    MOV     R9, R4
 80012e6:	46a1      	mov	r9, r4
    LDR     R4, [R2, #32]
 80012e8:	6a14      	ldr	r4, [r2, #32]
    MOV     R8, R4
 80012ea:	46a0      	mov	r8, r4

    LDR     R7, [R2, #28]
 80012ec:	69d7      	ldr	r7, [r2, #28]
    LDR     R6, [R2, #24]
 80012ee:	6996      	ldr	r6, [r2, #24]
    LDR     R5, [R2, #20]
 80012f0:	6955      	ldr	r5, [r2, #20]
    LDR     R4, [R2, #16]
 80012f2:	6914      	ldr	r4, [r2, #16]
    LDR     R3, [R2, #12]
 80012f4:	68d3      	ldr	r3, [r2, #12]
    LDR     R1, [R2, #4]
 80012f6:	6851      	ldr	r1, [r2, #4]
    LDR     R0, [R2, #0]
 80012f8:	6810      	ldr	r0, [r2, #0]
    LDR     R2, [R2, #8]
 80012fa:	6892      	ldr	r2, [r2, #8]

    @ Return to caller (scheduler).
    BX      LR
 80012fc:	4770      	bx	lr

080012fe <save_context>:
save_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 80012fe:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8001300:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8001302:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8001304:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 8001306:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 8001308:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 800130a:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 800130c:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 800130e:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8001310:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8001312:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8001314:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 8001316:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 8001318:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 800131a:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 800131c:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 800131e:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8001320:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R6, SP
 8001322:	466e      	mov	r6, sp
    STR     R6, [R0,#52]
 8001324:	6346      	str	r6, [r0, #52]	; 0x34
    MOV     R4, LR
 8001326:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 8001328:	6384      	str	r4, [r0, #56]	; 0x38

    @ Finally, Copy the stack. We do this to reduce RAM footprint, as stackis usually very small at the point
    @ of sceduling, but we need a lot of capacity for interrupt handling and other functions.

    LDR     R4, [R0,#60]         @ Load R4 with the fiber's defined stack_base.
 800132a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c

0800132c <store_stack1>:

store_stack1:
    SUBS    R4, #4
 800132c:	3c04      	subs	r4, #4
    SUBS    R1, #4
 800132e:	3904      	subs	r1, #4

    LDR     R5, [R4]
 8001330:	6825      	ldr	r5, [r4, #0]
    STR     R5, [R1]
 8001332:	600d      	str	r5, [r1, #0]

    CMP     R4, R6
 8001334:	42b4      	cmp	r4, r6
    BNE     store_stack1
 8001336:	d1f9      	bne.n	800132c <store_stack1>

    @ Restore scratch registers.

    LDR     R7, [R0, #28]
 8001338:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 800133a:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 800133c:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 800133e:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 8001340:	4770      	bx	lr

08001342 <save_register_context>:
save_register_context:

    @ Write our core registers into the TCB
    @ First, store the general registers

    STR     R0, [R0,#0]
 8001342:	6000      	str	r0, [r0, #0]
    STR     R1, [R0,#4]
 8001344:	6041      	str	r1, [r0, #4]
    STR     R2, [R0,#8]
 8001346:	6082      	str	r2, [r0, #8]
    STR     R3, [R0,#12]
 8001348:	60c3      	str	r3, [r0, #12]
    STR     R4, [R0,#16]
 800134a:	6104      	str	r4, [r0, #16]
    STR     R5, [R0,#20]
 800134c:	6145      	str	r5, [r0, #20]
    STR     R6, [R0,#24]
 800134e:	6186      	str	r6, [r0, #24]
    STR     R7, [R0,#28]
 8001350:	61c7      	str	r7, [r0, #28]

    @ Now the high general purpose registers
    MOV     R4, R8
 8001352:	4644      	mov	r4, r8
    STR     R4, [R0,#32]
 8001354:	6204      	str	r4, [r0, #32]
    MOV     R4, R9
 8001356:	464c      	mov	r4, r9
    STR     R4, [R0,#36]
 8001358:	6244      	str	r4, [r0, #36]	; 0x24
    MOV     R4, R10
 800135a:	4654      	mov	r4, sl
    STR     R4, [R0,#40]
 800135c:	6284      	str	r4, [r0, #40]	; 0x28
    MOV     R4, R11
 800135e:	465c      	mov	r4, fp
    STR     R4, [R0,#44]
 8001360:	62c4      	str	r4, [r0, #44]	; 0x2c
    MOV     R4, R12
 8001362:	4664      	mov	r4, ip
    STR     R4, [R0,#48]
 8001364:	6304      	str	r4, [r0, #48]	; 0x30

    @ Now the Stack Pointer and Link Register.
    @ As this context is only intended for use with a fiber scheduler,
    @ we don't need the PC.
    MOV     R4, SP
 8001366:	466c      	mov	r4, sp
    STR     R4, [R0,#52]
 8001368:	6344      	str	r4, [r0, #52]	; 0x34
    MOV     R4, LR
 800136a:	4674      	mov	r4, lr
    STR     R4, [R0,#56]
 800136c:	6384      	str	r4, [r0, #56]	; 0x38

    @ Restore scratch registers.
    LDR     R4, [R0, #16]
 800136e:	6904      	ldr	r4, [r0, #16]

    @ Return to caller (scheduler).
    BX      LR
 8001370:	4770      	bx	lr

08001372 <restore_register_context>:

    @
    @ Now page in the new context.
    @ Update all registers except the PC. We can also safely ignore the STATUS register, as we're just a fiber scheduler.
    @
    LDR     R4, [R0, #56]
 8001372:	6b84      	ldr	r4, [r0, #56]	; 0x38
    MOV     LR, R4
 8001374:	46a6      	mov	lr, r4
    LDR     R4, [R0, #52]
 8001376:	6b44      	ldr	r4, [r0, #52]	; 0x34
    MOV     SP, R4
 8001378:	46a5      	mov	sp, r4

    @ High registers...
    LDR     R4, [R0, #48]
 800137a:	6b04      	ldr	r4, [r0, #48]	; 0x30
    MOV     R12, R4
 800137c:	46a4      	mov	ip, r4
    LDR     R4, [R0, #44]
 800137e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    MOV     R11, R4
 8001380:	46a3      	mov	fp, r4
    LDR     R4, [R0, #40]
 8001382:	6a84      	ldr	r4, [r0, #40]	; 0x28
    MOV     R10, R4
 8001384:	46a2      	mov	sl, r4
    LDR     R4, [R0, #36]
 8001386:	6a44      	ldr	r4, [r0, #36]	; 0x24
    MOV     R9, R4
 8001388:	46a1      	mov	r9, r4
    LDR     R4, [R0, #32]
 800138a:	6a04      	ldr	r4, [r0, #32]
    MOV     R8, R4
 800138c:	46a0      	mov	r8, r4

    @ Low registers...
    LDR     R7, [R0, #28]
 800138e:	69c7      	ldr	r7, [r0, #28]
    LDR     R6, [R0, #24]
 8001390:	6986      	ldr	r6, [r0, #24]
    LDR     R5, [R0, #20]
 8001392:	6945      	ldr	r5, [r0, #20]
    LDR     R4, [R0, #16]
 8001394:	6904      	ldr	r4, [r0, #16]
    LDR     R3, [R0, #12]
 8001396:	68c3      	ldr	r3, [r0, #12]
    LDR     R2, [R0, #8]
 8001398:	6882      	ldr	r2, [r0, #8]
    LDR     R0, [R0, #0]
 800139a:	6800      	ldr	r0, [r0, #0]
    LDR     R1, [R0, #4]
 800139c:	6841      	ldr	r1, [r0, #4]

    @ Return to caller (normally the scheduler).
    BX      LR
 800139e:	4770      	bx	lr

080013a0 <rcc_wait_for_osc_ready>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_wait_for_osc_ready(enum rcc_osc osc)
{
	switch (osc) {
 80013a0:	2806      	cmp	r0, #6
 80013a2:	d82e      	bhi.n	8001402 <rcc_wait_for_osc_ready+0x62>
 80013a4:	e8df f000 	tbb	[pc, r0]
 80013a8:	16100a04 	.word	0x16100a04
 80013ac:	221c      	.short	0x221c
 80013ae:	28          	.byte	0x28
 80013af:	00          	.byte	0x00
	case PLL:
		while ((RCC_CR & RCC_CR_PLLRDY) == 0);
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <rcc_wait_for_osc_ready+0x64>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013b8:	d0fa      	beq.n	80013b0 <rcc_wait_for_osc_ready+0x10>
 80013ba:	4770      	bx	lr
		break;
	case PLL2:
		while ((RCC_CR & RCC_CR_PLL2RDY) == 0);
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <rcc_wait_for_osc_ready+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80013c4:	d0fa      	beq.n	80013bc <rcc_wait_for_osc_ready+0x1c>
 80013c6:	4770      	bx	lr
		break;
	case PLL3:
		while ((RCC_CR & RCC_CR_PLL3RDY) == 0);
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <rcc_wait_for_osc_ready+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80013d0:	d0fa      	beq.n	80013c8 <rcc_wait_for_osc_ready+0x28>
 80013d2:	4770      	bx	lr
		break;
	case HSE:
		while ((RCC_CR & RCC_CR_HSERDY) == 0);
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <rcc_wait_for_osc_ready+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80013dc:	d0fa      	beq.n	80013d4 <rcc_wait_for_osc_ready+0x34>
 80013de:	4770      	bx	lr
		break;
	case HSI:
		while ((RCC_CR & RCC_CR_HSIRDY) == 0);
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <rcc_wait_for_osc_ready+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f013 0f02 	tst.w	r3, #2
 80013e8:	d0fa      	beq.n	80013e0 <rcc_wait_for_osc_ready+0x40>
 80013ea:	4770      	bx	lr
		break;
	case LSE:
		while ((RCC_BDCR & RCC_BDCR_LSERDY) == 0);
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <rcc_wait_for_osc_ready+0x68>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f013 0f02 	tst.w	r3, #2
 80013f4:	d0fa      	beq.n	80013ec <rcc_wait_for_osc_ready+0x4c>
 80013f6:	4770      	bx	lr
		break;
	case LSI:
		while ((RCC_CSR & RCC_CSR_LSIRDY) == 0);
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <rcc_wait_for_osc_ready+0x6c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f013 0f02 	tst.w	r3, #2
 8001400:	d0fa      	beq.n	80013f8 <rcc_wait_for_osc_ready+0x58>
		break;
	}
}
 8001402:	4770      	bx	lr
 8001404:	40021000 	.word	0x40021000
 8001408:	40021020 	.word	0x40021020
 800140c:	40021024 	.word	0x40021024

08001410 <rcc_osc_on>:
@param[in] osc enum ::osc_t. Oscillator ID
*/

void rcc_osc_on(enum rcc_osc osc)
{
	switch (osc) {
 8001410:	2806      	cmp	r0, #6
 8001412:	d82e      	bhi.n	8001472 <rcc_osc_on+0x62>
 8001414:	e8df f000 	tbb	[pc, r0]
 8001418:	16100a04 	.word	0x16100a04
 800141c:	221c      	.short	0x221c
 800141e:	28          	.byte	0x28
 800141f:	00          	.byte	0x00
	case PLL:
		RCC_CR |= RCC_CR_PLLON;
 8001420:	4a14      	ldr	r2, [pc, #80]	; (8001474 <rcc_osc_on+0x64>)
 8001422:	6813      	ldr	r3, [r2, #0]
 8001424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001428:	6013      	str	r3, [r2, #0]
		break;
 800142a:	4770      	bx	lr
	case PLL2:
		RCC_CR |= RCC_CR_PLL2ON;
 800142c:	4a11      	ldr	r2, [pc, #68]	; (8001474 <rcc_osc_on+0x64>)
 800142e:	6813      	ldr	r3, [r2, #0]
 8001430:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001434:	6013      	str	r3, [r2, #0]
		break;
 8001436:	4770      	bx	lr
	case PLL3:
		RCC_CR |= RCC_CR_PLL3ON;
 8001438:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <rcc_osc_on+0x64>)
 800143a:	6813      	ldr	r3, [r2, #0]
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6013      	str	r3, [r2, #0]
		break;
 8001442:	4770      	bx	lr
	case HSE:
		RCC_CR |= RCC_CR_HSEON;
 8001444:	4a0b      	ldr	r2, [pc, #44]	; (8001474 <rcc_osc_on+0x64>)
 8001446:	6813      	ldr	r3, [r2, #0]
 8001448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800144c:	6013      	str	r3, [r2, #0]
		break;
 800144e:	4770      	bx	lr
	case HSI:
		RCC_CR |= RCC_CR_HSION;
 8001450:	4a08      	ldr	r2, [pc, #32]	; (8001474 <rcc_osc_on+0x64>)
 8001452:	6813      	ldr	r3, [r2, #0]
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6013      	str	r3, [r2, #0]
		break;
 800145a:	4770      	bx	lr
	case LSE:
		RCC_BDCR |= RCC_BDCR_LSEON;
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <rcc_osc_on+0x68>)
 800145e:	6813      	ldr	r3, [r2, #0]
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6013      	str	r3, [r2, #0]
		break;
 8001466:	4770      	bx	lr
	case LSI:
		RCC_CSR |= RCC_CSR_LSION;
 8001468:	4a04      	ldr	r2, [pc, #16]	; (800147c <rcc_osc_on+0x6c>)
 800146a:	6813      	ldr	r3, [r2, #0]
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8001472:	4770      	bx	lr
 8001474:	40021000 	.word	0x40021000
 8001478:	40021020 	.word	0x40021020
 800147c:	40021024 	.word	0x40021024

08001480 <rcc_set_sysclk_source>:
@param[in] clk Unsigned int32. System Clock Selection @ref rcc_cfgr_scs
*/

void rcc_set_sysclk_source(uint32_t clk)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_SW) |
 8001480:	4a03      	ldr	r2, [pc, #12]	; (8001490 <rcc_set_sysclk_source+0x10>)
 8001482:	6813      	ldr	r3, [r2, #0]
 8001484:	f023 0303 	bic.w	r3, r3, #3
 8001488:	4318      	orrs	r0, r3
 800148a:	6010      	str	r0, [r2, #0]
			(clk << RCC_CFGR_SW_SHIFT);
}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40021004 	.word	0x40021004

08001494 <rcc_set_pll_multiplication_factor>:
@param[in] mul Unsigned int32. PLL multiplication factor @ref rcc_cfgr_pmf
*/

void rcc_set_pll_multiplication_factor(uint32_t mul)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLMUL) |
 8001494:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <rcc_set_pll_multiplication_factor+0x10>)
 8001496:	6813      	ldr	r3, [r2, #0]
 8001498:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800149c:	ea43 4080 	orr.w	r0, r3, r0, lsl #18
 80014a0:	6010      	str	r0, [r2, #0]
			(mul << RCC_CFGR_PLLMUL_SHIFT);
}
 80014a2:	4770      	bx	lr
 80014a4:	40021004 	.word	0x40021004

080014a8 <rcc_set_pll_source>:
@param[in] pllsrc Unsigned int32. PLL clock source @ref rcc_cfgr_pcs
*/

void rcc_set_pll_source(uint32_t pllsrc)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLSRC) |
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <rcc_set_pll_source+0x10>)
 80014aa:	6813      	ldr	r3, [r2, #0]
 80014ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80014b4:	6010      	str	r0, [r2, #0]
			(pllsrc << 16);
}
 80014b6:	4770      	bx	lr
 80014b8:	40021004 	.word	0x40021004

080014bc <rcc_set_pllxtpre>:
@param[in] pllxtpre Unsigned int32. HSE division factor @ref rcc_cfgr_hsepre
*/

void rcc_set_pllxtpre(uint32_t pllxtpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PLLXTPRE) |
 80014bc:	4a03      	ldr	r2, [pc, #12]	; (80014cc <rcc_set_pllxtpre+0x10>)
 80014be:	6813      	ldr	r3, [r2, #0]
 80014c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80014c4:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
 80014c8:	6010      	str	r0, [r2, #0]
			(pllxtpre << 17);
}
 80014ca:	4770      	bx	lr
 80014cc:	40021004 	.word	0x40021004

080014d0 <rcc_enable_rtc_clock>:

*/

void rcc_enable_rtc_clock(void)
{
	RCC_BDCR |= RCC_BDCR_RTCEN;
 80014d0:	4a02      	ldr	r2, [pc, #8]	; (80014dc <rcc_enable_rtc_clock+0xc>)
 80014d2:	6813      	ldr	r3, [r2, #0]
 80014d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d8:	6013      	str	r3, [r2, #0]
}
 80014da:	4770      	bx	lr
 80014dc:	40021020 	.word	0x40021020

080014e0 <rcc_set_rtc_clock_source>:

void rcc_set_rtc_clock_source(enum rcc_osc clock_source)
{
	uint32_t reg32;

	switch (clock_source) {
 80014e0:	2806      	cmp	r0, #6
 80014e2:	d846      	bhi.n	8001572 <rcc_set_rtc_clock_source+0x92>
 80014e4:	e8df f000 	tbb	[pc, r0]
 80014e8:	2c404040 	.word	0x2c404040
 80014ec:	0440      	.short	0x0440
 80014ee:	18          	.byte	0x18
 80014ef:	00          	.byte	0x00
	case LSE:
		/* Turn the LSE on and wait while it stabilises. */
		RCC_BDCR |= RCC_BDCR_LSEON;
 80014f0:	4a20      	ldr	r2, [pc, #128]	; (8001574 <rcc_set_rtc_clock_source+0x94>)
 80014f2:	6813      	ldr	r3, [r2, #0]
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6013      	str	r3, [r2, #0]
		while ((reg32 = (RCC_BDCR & RCC_BDCR_LSERDY)) == 0);
 80014fa:	4b1e      	ldr	r3, [pc, #120]	; (8001574 <rcc_set_rtc_clock_source+0x94>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f013 0f02 	tst.w	r3, #2
 8001502:	d0fa      	beq.n	80014fa <rcc_set_rtc_clock_source+0x1a>

		/* Choose LSE as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <rcc_set_rtc_clock_source+0x94>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800150c:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 8);
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001514:	601a      	str	r2, [r3, #0]
		break;
 8001516:	4770      	bx	lr
	case LSI:
		/* Turn the LSI on and wait while it stabilises. */
		RCC_CSR |= RCC_CSR_LSION;
 8001518:	4a17      	ldr	r2, [pc, #92]	; (8001578 <rcc_set_rtc_clock_source+0x98>)
 800151a:	6813      	ldr	r3, [r2, #0]
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6013      	str	r3, [r2, #0]
		while ((reg32 = (RCC_CSR & RCC_CSR_LSIRDY)) == 0);
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <rcc_set_rtc_clock_source+0x98>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f013 0f02 	tst.w	r3, #2
 800152a:	d0fa      	beq.n	8001522 <rcc_set_rtc_clock_source+0x42>

		/* Choose LSI as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <rcc_set_rtc_clock_source+0x94>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001534:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9);
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800153c:	601a      	str	r2, [r3, #0]
		break;
 800153e:	4770      	bx	lr
	case HSE:
		/* Turn the HSE on and wait while it stabilises. */
		RCC_CR |= RCC_CR_HSEON;
 8001540:	4a0e      	ldr	r2, [pc, #56]	; (800157c <rcc_set_rtc_clock_source+0x9c>)
 8001542:	6813      	ldr	r3, [r2, #0]
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
		while ((reg32 = (RCC_CR & RCC_CR_HSERDY)) == 0);
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <rcc_set_rtc_clock_source+0x9c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001552:	d0fa      	beq.n	800154a <rcc_set_rtc_clock_source+0x6a>

		/* Choose HSE as the RTC clock source. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8001554:	4b07      	ldr	r3, [pc, #28]	; (8001574 <rcc_set_rtc_clock_source+0x94>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800155c:	601a      	str	r2, [r3, #0]
		RCC_BDCR |= (1 << 9) | (1 << 8);
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001564:	601a      	str	r2, [r3, #0]
		break;
 8001566:	4770      	bx	lr
	case PLL2:
	case PLL3:
	case HSI:
		/* Unusable clock source, here to prevent warnings. */
		/* Turn off clock sources to RTC. */
		RCC_BDCR &= ~((1 << 8) | (1 << 9));
 8001568:	4a02      	ldr	r2, [pc, #8]	; (8001574 <rcc_set_rtc_clock_source+0x94>)
 800156a:	6813      	ldr	r3, [r2, #0]
 800156c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001570:	6013      	str	r3, [r2, #0]
		break;
	}
}
 8001572:	4770      	bx	lr
 8001574:	40021020 	.word	0x40021020
 8001578:	40021024 	.word	0x40021024
 800157c:	40021000 	.word	0x40021000

08001580 <rcc_set_adcpre>:
@param[in] adcpre uint32_t. Prescale divider taken from @ref rcc_cfgr_adcpre
*/

void rcc_set_adcpre(uint32_t adcpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_ADCPRE) |
 8001580:	4a03      	ldr	r2, [pc, #12]	; (8001590 <rcc_set_adcpre+0x10>)
 8001582:	6813      	ldr	r3, [r2, #0]
 8001584:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001588:	ea43 3080 	orr.w	r0, r3, r0, lsl #14
 800158c:	6010      	str	r0, [r2, #0]
			(adcpre << RCC_CFGR_ADCPRE_SHIFT);
}
 800158e:	4770      	bx	lr
 8001590:	40021004 	.word	0x40021004

08001594 <rcc_set_ppre2>:
@param[in] ppre2 Unsigned int32. APB2 prescale factor @ref rcc_cfgr_apb2pre
*/

void rcc_set_ppre2(uint32_t ppre2)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE2) |
 8001594:	4a03      	ldr	r2, [pc, #12]	; (80015a4 <rcc_set_ppre2+0x10>)
 8001596:	6813      	ldr	r3, [r2, #0]
 8001598:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800159c:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
 80015a0:	6010      	str	r0, [r2, #0]
			(ppre2 << RCC_CFGR_PPRE2_SHIFT);
}
 80015a2:	4770      	bx	lr
 80015a4:	40021004 	.word	0x40021004

080015a8 <rcc_set_ppre1>:
@param[in] ppre1 Unsigned int32. APB1 prescale factor @ref rcc_cfgr_apb1pre
*/

void rcc_set_ppre1(uint32_t ppre1)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_PPRE1) |
 80015a8:	4a03      	ldr	r2, [pc, #12]	; (80015b8 <rcc_set_ppre1+0x10>)
 80015aa:	6813      	ldr	r3, [r2, #0]
 80015ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015b0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80015b4:	6010      	str	r0, [r2, #0]
			(ppre1 << RCC_CFGR_PPRE1_SHIFT);

}
 80015b6:	4770      	bx	lr
 80015b8:	40021004 	.word	0x40021004

080015bc <rcc_set_hpre>:
@param[in] hpre Unsigned int32. AHB prescale factor @ref rcc_cfgr_ahbpre
*/

void rcc_set_hpre(uint32_t hpre)
{
	RCC_CFGR = (RCC_CFGR & ~RCC_CFGR_HPRE) |
 80015bc:	4a03      	ldr	r2, [pc, #12]	; (80015cc <rcc_set_hpre+0x10>)
 80015be:	6813      	ldr	r3, [r2, #0]
 80015c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015c4:	ea43 1000 	orr.w	r0, r3, r0, lsl #4
 80015c8:	6010      	str	r0, [r2, #0]
			(hpre << RCC_CFGR_HPRE_SHIFT);

}
 80015ca:	4770      	bx	lr
 80015cc:	40021004 	.word	0x40021004

080015d0 <rcc_clock_setup_in_hse_8mhz_out_72mhz>:
/** @brief RCC Set System Clock PLL at 72MHz from HSE at 8MHz

*/

void rcc_clock_setup_in_hse_8mhz_out_72mhz(void)
{
 80015d0:	b508      	push	{r3, lr}
	/* Enable internal high-speed oscillator. */
	rcc_osc_on(HSI);
 80015d2:	2004      	movs	r0, #4
 80015d4:	f7ff ff1c 	bl	8001410 <rcc_osc_on>
	rcc_wait_for_osc_ready(HSI);
 80015d8:	2004      	movs	r0, #4
 80015da:	f7ff fee1 	bl	80013a0 <rcc_wait_for_osc_ready>

	/* Select HSI as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSICLK);
 80015de:	2000      	movs	r0, #0
 80015e0:	f7ff ff4e 	bl	8001480 <rcc_set_sysclk_source>

	/* Enable external high-speed oscillator 8MHz. */
	rcc_osc_on(HSE);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f7ff ff13 	bl	8001410 <rcc_osc_on>
	rcc_wait_for_osc_ready(HSE);
 80015ea:	2003      	movs	r0, #3
 80015ec:	f7ff fed8 	bl	80013a0 <rcc_wait_for_osc_ready>
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_HSECLK);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff ff45 	bl	8001480 <rcc_set_sysclk_source>

	/*
	 * Set prescalers for AHB, ADC, ABP1, ABP2.
	 * Do this before touching the PLL (TODO: why?).
	 */
	rcc_set_hpre(RCC_CFGR_HPRE_SYSCLK_NODIV);    /* Set. 72MHz Max. 72MHz */
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7ff ffe0 	bl	80015bc <rcc_set_hpre>
	rcc_set_adcpre(RCC_CFGR_ADCPRE_PCLK2_DIV8);  /* Set.  9MHz Max. 14MHz */
 80015fc:	2003      	movs	r0, #3
 80015fe:	f7ff ffbf 	bl	8001580 <rcc_set_adcpre>
	rcc_set_ppre1(RCC_CFGR_PPRE1_HCLK_DIV2);     /* Set. 36MHz Max. 36MHz */
 8001602:	2004      	movs	r0, #4
 8001604:	f7ff ffd0 	bl	80015a8 <rcc_set_ppre1>
	rcc_set_ppre2(RCC_CFGR_PPRE2_HCLK_NODIV);    /* Set. 72MHz Max. 72MHz */
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff ffc3 	bl	8001594 <rcc_set_ppre2>
	 * Sysclk runs with 72MHz -> 2 waitstates.
	 * 0WS from 0-24MHz
	 * 1WS from 24-48MHz
	 * 2WS from 48-72MHz
	 */
	flash_set_ws(FLASH_ACR_LATENCY_2WS);
 800160e:	2002      	movs	r0, #2
 8001610:	f000 f936 	bl	8001880 <flash_set_ws>

	/*
	 * Set the PLL multiplication factor to 9.
	 * 8MHz (external) * 9 (multiplier) = 72MHz
	 */
	rcc_set_pll_multiplication_factor(RCC_CFGR_PLLMUL_PLL_CLK_MUL9);
 8001614:	2007      	movs	r0, #7
 8001616:	f7ff ff3d 	bl	8001494 <rcc_set_pll_multiplication_factor>

	/* Select HSE as PLL source. */
	rcc_set_pll_source(RCC_CFGR_PLLSRC_HSE_CLK);
 800161a:	2001      	movs	r0, #1
 800161c:	f7ff ff44 	bl	80014a8 <rcc_set_pll_source>

	/*
	 * External frequency undivided before entering PLL
	 * (only valid/needed for HSE).
	 */
	rcc_set_pllxtpre(RCC_CFGR_PLLXTPRE_HSE_CLK);
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff ff4b 	bl	80014bc <rcc_set_pllxtpre>

	/* Enable PLL oscillator and wait for it to stabilize. */
	rcc_osc_on(PLL);
 8001626:	2000      	movs	r0, #0
 8001628:	f7ff fef2 	bl	8001410 <rcc_osc_on>
	rcc_wait_for_osc_ready(PLL);
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff feb7 	bl	80013a0 <rcc_wait_for_osc_ready>

	/* Select PLL as SYSCLK source. */
	rcc_set_sysclk_source(RCC_CFGR_SW_SYSCLKSEL_PLLCLK);
 8001632:	2002      	movs	r0, #2
 8001634:	f7ff ff24 	bl	8001480 <rcc_set_sysclk_source>

	/* Set the peripheral clock frequencies used */
	rcc_ahb_frequency = 72000000;
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x7c>)
 800163a:	4a05      	ldr	r2, [pc, #20]	; (8001650 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x80>)
 800163c:	6013      	str	r3, [r2, #0]
	rcc_apb1_frequency = 36000000;
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x84>)
 8001640:	4905      	ldr	r1, [pc, #20]	; (8001658 <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x88>)
 8001642:	6011      	str	r1, [r2, #0]
	rcc_apb2_frequency = 72000000;
 8001644:	4a05      	ldr	r2, [pc, #20]	; (800165c <rcc_clock_setup_in_hse_8mhz_out_72mhz+0x8c>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bd08      	pop	{r3, pc}
 800164a:	bf00      	nop
 800164c:	044aa200 	.word	0x044aa200
 8001650:	2000080c 	.word	0x2000080c
 8001654:	20000810 	.word	0x20000810
 8001658:	02255100 	.word	0x02255100
 800165c:	20000814 	.word	0x20000814

08001660 <rtc_enter_config_mode>:
Prime the RTC for configuration changes by giving access to the prescaler,
and counter and alarm registers.
*/

void rtc_enter_config_mode(void)
{
 8001660:	b082      	sub	sp, #8
	volatile uint32_t reg32;  ////  Added volatile.

	/* Wait until the RTOFF bit is 1 (no RTC register writes ongoing). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <rtc_enter_config_mode+0x20>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	9301      	str	r3, [sp, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f8      	beq.n	8001662 <rtc_enter_config_mode+0x2>

	/* Enter configuration mode. */
	RTC_CRL |= RTC_CRL_CNF;
 8001670:	4a03      	ldr	r2, [pc, #12]	; (8001680 <rtc_enter_config_mode+0x20>)
 8001672:	6813      	ldr	r3, [r2, #0]
 8001674:	f043 0310 	orr.w	r3, r3, #16
 8001678:	6013      	str	r3, [r2, #0]
}
 800167a:	b002      	add	sp, #8
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40002804 	.word	0x40002804

08001684 <rtc_exit_config_mode>:

Revert the RTC to operational state.
*/

void rtc_exit_config_mode(void)
{
 8001684:	b082      	sub	sp, #8
	volatile uint32_t reg32;  ////  Added volatile.

	/* Exit configuration mode. */
	RTC_CRL &= ~RTC_CRL_CNF;
 8001686:	4a07      	ldr	r2, [pc, #28]	; (80016a4 <rtc_exit_config_mode+0x20>)
 8001688:	6813      	ldr	r3, [r2, #0]
 800168a:	f023 0310 	bic.w	r3, r3, #16
 800168e:	6013      	str	r3, [r2, #0]

	/* Wait until the RTOFF bit is 1 (our RTC register write finished). */
	while ((reg32 = (RTC_CRL & RTC_CRL_RTOFF)) == 0);
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <rtc_exit_config_mode+0x20>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0320 	and.w	r3, r3, #32
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f8      	beq.n	8001690 <rtc_exit_config_mode+0xc>
}
 800169e:	b002      	add	sp, #8
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40002804 	.word	0x40002804

080016a8 <rtc_set_alarm_time>:

@param[in] alarm_time uint32_t. time at which the alarm event is triggered.
*/

void rtc_set_alarm_time(uint32_t alarm_time)
{
 80016a8:	b510      	push	{r4, lr}
 80016aa:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 80016ac:	f7ff ffd8 	bl	8001660 <rtc_enter_config_mode>
	RTC_ALRL = (alarm_time & 0x0000ffff);
 80016b0:	b2a2      	uxth	r2, r4
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <rtc_set_alarm_time+0x1c>)
 80016b4:	601a      	str	r2, [r3, #0]
	RTC_ALRH = (alarm_time & 0xffff0000) >> 16;
 80016b6:	0c24      	lsrs	r4, r4, #16
 80016b8:	3b04      	subs	r3, #4
 80016ba:	601c      	str	r4, [r3, #0]
	rtc_exit_config_mode();
 80016bc:	f7ff ffe2 	bl	8001684 <rtc_exit_config_mode>
}
 80016c0:	bd10      	pop	{r4, pc}
 80016c2:	bf00      	nop
 80016c4:	40002824 	.word	0x40002824

080016c8 <rtc_set_prescale_val>:

@param[in] prescale_val uint32_t. 20 bit prescale divider.
*/

void rtc_set_prescale_val(uint32_t prescale_val)
{
 80016c8:	b510      	push	{r4, lr}
 80016ca:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 80016cc:	f7ff ffc8 	bl	8001660 <rtc_enter_config_mode>
	RTC_PRLL = prescale_val & 0x0000ffff;         /* PRL[15:0] */
 80016d0:	b2a2      	uxth	r2, r4
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <rtc_set_prescale_val+0x1c>)
 80016d4:	601a      	str	r2, [r3, #0]
	RTC_PRLH = (prescale_val & 0x000f0000) >> 16; /* PRL[19:16] */
 80016d6:	f3c4 4403 	ubfx	r4, r4, #16, #4
 80016da:	3b04      	subs	r3, #4
 80016dc:	601c      	str	r4, [r3, #0]
	rtc_exit_config_mode();
 80016de:	f7ff ffd1 	bl	8001684 <rtc_exit_config_mode>
}
 80016e2:	bd10      	pop	{r4, pc}
 80016e4:	4000280c 	.word	0x4000280c

080016e8 <rtc_get_counter_val>:
@returns uint32_t: the 32 bit counter value.
*/

uint32_t rtc_get_counter_val(void)
{
	return (RTC_CNTH << 16) | RTC_CNTL;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <rtc_get_counter_val+0x10>)
 80016ea:	6818      	ldr	r0, [r3, #0]
 80016ec:	3304      	adds	r3, #4
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40002818 	.word	0x40002818

080016fc <rtc_set_counter_val>:

@param[in] uint32_t counter_val: 32 bit time setting for the counter.
*/

void rtc_set_counter_val(uint32_t counter_val)
{
 80016fc:	b510      	push	{r4, lr}
 80016fe:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 8001700:	f7ff ffae 	bl	8001660 <rtc_enter_config_mode>
	RTC_CNTH = (counter_val & 0xffff0000) >> 16; /* CNT[31:16] */
 8001704:	0c22      	lsrs	r2, r4, #16
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <rtc_set_counter_val+0x1c>)
 8001708:	601a      	str	r2, [r3, #0]
	RTC_CNTL = counter_val & 0x0000ffff;         /* CNT[15:0] */
 800170a:	b2a4      	uxth	r4, r4
 800170c:	3304      	adds	r3, #4
 800170e:	601c      	str	r4, [r3, #0]
	rtc_exit_config_mode();
 8001710:	f7ff ffb8 	bl	8001684 <rtc_exit_config_mode>
}
 8001714:	bd10      	pop	{r4, pc}
 8001716:	bf00      	nop
 8001718:	40002818 	.word	0x40002818

0800171c <rtc_interrupt_enable>:

@param[in] flag_val ::rtcflag_t: The flag to enable.
*/

void rtc_interrupt_enable(rtcflag_t flag_val)
{
 800171c:	b510      	push	{r4, lr}
 800171e:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 8001720:	f7ff ff9e 	bl	8001660 <rtc_enter_config_mode>

	/* Set the correct interrupt enable. */
	switch (flag_val) {
 8001724:	2c01      	cmp	r4, #1
 8001726:	d00b      	beq.n	8001740 <rtc_interrupt_enable+0x24>
 8001728:	b124      	cbz	r4, 8001734 <rtc_interrupt_enable+0x18>
 800172a:	2c02      	cmp	r4, #2
 800172c:	d00e      	beq.n	800174c <rtc_interrupt_enable+0x30>
	case RTC_OW:
		RTC_CRH |= RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
 800172e:	f7ff ffa9 	bl	8001684 <rtc_exit_config_mode>
}
 8001732:	bd10      	pop	{r4, pc}
		RTC_CRH |= RTC_CRH_SECIE;
 8001734:	4a08      	ldr	r2, [pc, #32]	; (8001758 <rtc_interrupt_enable+0x3c>)
 8001736:	6813      	ldr	r3, [r2, #0]
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6013      	str	r3, [r2, #0]
		break;
 800173e:	e7f6      	b.n	800172e <rtc_interrupt_enable+0x12>
		RTC_CRH |= RTC_CRH_ALRIE;
 8001740:	4a05      	ldr	r2, [pc, #20]	; (8001758 <rtc_interrupt_enable+0x3c>)
 8001742:	6813      	ldr	r3, [r2, #0]
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6013      	str	r3, [r2, #0]
		break;
 800174a:	e7f0      	b.n	800172e <rtc_interrupt_enable+0x12>
		RTC_CRH |= RTC_CRH_OWIE;
 800174c:	4a02      	ldr	r2, [pc, #8]	; (8001758 <rtc_interrupt_enable+0x3c>)
 800174e:	6813      	ldr	r3, [r2, #0]
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6013      	str	r3, [r2, #0]
		break;
 8001756:	e7ea      	b.n	800172e <rtc_interrupt_enable+0x12>
 8001758:	40002800 	.word	0x40002800

0800175c <rtc_interrupt_disable>:

@param[in] flag_val ::rtcflag_t: The flag to disable.
*/

void rtc_interrupt_disable(rtcflag_t flag_val)
{
 800175c:	b510      	push	{r4, lr}
 800175e:	4604      	mov	r4, r0
	rtc_enter_config_mode();
 8001760:	f7ff ff7e 	bl	8001660 <rtc_enter_config_mode>

	/* Disable the correct interrupt enable. */
	switch (flag_val) {
 8001764:	2c01      	cmp	r4, #1
 8001766:	d00b      	beq.n	8001780 <rtc_interrupt_disable+0x24>
 8001768:	b124      	cbz	r4, 8001774 <rtc_interrupt_disable+0x18>
 800176a:	2c02      	cmp	r4, #2
 800176c:	d00e      	beq.n	800178c <rtc_interrupt_disable+0x30>
	case RTC_OW:
		RTC_CRH &= ~RTC_CRH_OWIE;
		break;
	}

	rtc_exit_config_mode();
 800176e:	f7ff ff89 	bl	8001684 <rtc_exit_config_mode>
}
 8001772:	bd10      	pop	{r4, pc}
		RTC_CRH &= ~RTC_CRH_SECIE;
 8001774:	4a08      	ldr	r2, [pc, #32]	; (8001798 <rtc_interrupt_disable+0x3c>)
 8001776:	6813      	ldr	r3, [r2, #0]
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	6013      	str	r3, [r2, #0]
		break;
 800177e:	e7f6      	b.n	800176e <rtc_interrupt_disable+0x12>
		RTC_CRH &= ~RTC_CRH_ALRIE;
 8001780:	4a05      	ldr	r2, [pc, #20]	; (8001798 <rtc_interrupt_disable+0x3c>)
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	f023 0302 	bic.w	r3, r3, #2
 8001788:	6013      	str	r3, [r2, #0]
		break;
 800178a:	e7f0      	b.n	800176e <rtc_interrupt_disable+0x12>
		RTC_CRH &= ~RTC_CRH_OWIE;
 800178c:	4a02      	ldr	r2, [pc, #8]	; (8001798 <rtc_interrupt_disable+0x3c>)
 800178e:	6813      	ldr	r3, [r2, #0]
 8001790:	f023 0304 	bic.w	r3, r3, #4
 8001794:	6013      	str	r3, [r2, #0]
		break;
 8001796:	e7ea      	b.n	800176e <rtc_interrupt_disable+0x12>
 8001798:	40002800 	.word	0x40002800

0800179c <rtc_clear_flag>:
void rtc_clear_flag(rtcflag_t flag_val)
{
	/* Configuration mode not needed. */

	/* Clear the correct flag. */
	switch (flag_val) {
 800179c:	2801      	cmp	r0, #1
 800179e:	d009      	beq.n	80017b4 <rtc_clear_flag+0x18>
 80017a0:	b110      	cbz	r0, 80017a8 <rtc_clear_flag+0xc>
 80017a2:	2802      	cmp	r0, #2
 80017a4:	d00c      	beq.n	80017c0 <rtc_clear_flag+0x24>
 80017a6:	4770      	bx	lr
	case RTC_SEC:
		RTC_CRL &= ~RTC_CRL_SECF;
 80017a8:	4a08      	ldr	r2, [pc, #32]	; (80017cc <rtc_clear_flag+0x30>)
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6013      	str	r3, [r2, #0]
		break;
 80017b2:	4770      	bx	lr
	case RTC_ALR:
		RTC_CRL &= ~RTC_CRL_ALRF;
 80017b4:	4a05      	ldr	r2, [pc, #20]	; (80017cc <rtc_clear_flag+0x30>)
 80017b6:	6813      	ldr	r3, [r2, #0]
 80017b8:	f023 0302 	bic.w	r3, r3, #2
 80017bc:	6013      	str	r3, [r2, #0]
		break;
 80017be:	4770      	bx	lr
	case RTC_OW:
		RTC_CRL &= ~RTC_CRL_OWF;
 80017c0:	4a02      	ldr	r2, [pc, #8]	; (80017cc <rtc_clear_flag+0x30>)
 80017c2:	6813      	ldr	r3, [r2, #0]
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	6013      	str	r3, [r2, #0]
		break;
	}
}
 80017ca:	4770      	bx	lr
 80017cc:	40002804 	.word	0x40002804

080017d0 <rtc_check_flag>:
uint32_t rtc_check_flag(rtcflag_t flag_val)
{
	uint32_t reg32;

	/* Read correct flag. */
	switch (flag_val) {
 80017d0:	2801      	cmp	r0, #1
 80017d2:	d009      	beq.n	80017e8 <rtc_check_flag+0x18>
 80017d4:	b118      	cbz	r0, 80017de <rtc_check_flag+0xe>
 80017d6:	2802      	cmp	r0, #2
 80017d8:	d00b      	beq.n	80017f2 <rtc_check_flag+0x22>
		break;
	case RTC_OW:
		reg32 = RTC_CRL & RTC_CRL_OWF;
		break;
	default:
		reg32 = 0;
 80017da:	2000      	movs	r0, #0
		break;
	}

	return reg32;
}
 80017dc:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_SECF;
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <rtc_check_flag+0x2c>)
 80017e0:	6818      	ldr	r0, [r3, #0]
 80017e2:	f000 0001 	and.w	r0, r0, #1
		break;
 80017e6:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_ALRF;
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <rtc_check_flag+0x2c>)
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	f000 0002 	and.w	r0, r0, #2
		break;
 80017f0:	4770      	bx	lr
		reg32 = RTC_CRL & RTC_CRL_OWF;
 80017f2:	4b02      	ldr	r3, [pc, #8]	; (80017fc <rtc_check_flag+0x2c>)
 80017f4:	6818      	ldr	r0, [r3, #0]
 80017f6:	f000 0004 	and.w	r0, r0, #4
		break;
 80017fa:	4770      	bx	lr
 80017fc:	40002804 	.word	0x40002804

08001800 <pwr_disable_backup_domain_write_protect>:
protected after a reset.
*/

void pwr_disable_backup_domain_write_protect(void)
{
	PWR_CR |= PWR_CR_DBP;
 8001800:	4a02      	ldr	r2, [pc, #8]	; (800180c <pwr_disable_backup_domain_write_protect+0xc>)
 8001802:	6813      	ldr	r3, [r2, #0]
 8001804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001808:	6013      	str	r3, [r2, #0]
}
 800180a:	4770      	bx	lr
 800180c:	40007000 	.word	0x40007000

08001810 <exti_set_trigger>:
#       include <libopencm3/stm32/syscfg.h>
#endif

void exti_set_trigger(uint32_t extis, enum exti_trigger_type trig)
{
	switch (trig) {
 8001810:	2901      	cmp	r1, #1
 8001812:	d00d      	beq.n	8001830 <exti_set_trigger+0x20>
 8001814:	b111      	cbz	r1, 800181c <exti_set_trigger+0xc>
 8001816:	2902      	cmp	r1, #2
 8001818:	d014      	beq.n	8001844 <exti_set_trigger+0x34>
 800181a:	4770      	bx	lr
	case EXTI_TRIGGER_RISING:
		EXTI_RTSR |= extis;
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <exti_set_trigger+0x48>)
 800181e:	6813      	ldr	r3, [r2, #0]
 8001820:	4303      	orrs	r3, r0
 8001822:	6013      	str	r3, [r2, #0]
		EXTI_FTSR &= ~extis;
 8001824:	3204      	adds	r2, #4
 8001826:	6813      	ldr	r3, [r2, #0]
 8001828:	ea23 0000 	bic.w	r0, r3, r0
 800182c:	6010      	str	r0, [r2, #0]
		break;
 800182e:	4770      	bx	lr
	case EXTI_TRIGGER_FALLING:
		EXTI_RTSR &= ~extis;
 8001830:	4a09      	ldr	r2, [pc, #36]	; (8001858 <exti_set_trigger+0x48>)
 8001832:	6813      	ldr	r3, [r2, #0]
 8001834:	ea23 0300 	bic.w	r3, r3, r0
 8001838:	6013      	str	r3, [r2, #0]
		EXTI_FTSR |= extis;
 800183a:	3204      	adds	r2, #4
 800183c:	6813      	ldr	r3, [r2, #0]
 800183e:	4318      	orrs	r0, r3
 8001840:	6010      	str	r0, [r2, #0]
		break;
 8001842:	4770      	bx	lr
	case EXTI_TRIGGER_BOTH:
		EXTI_RTSR |= extis;
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <exti_set_trigger+0x48>)
 8001846:	6813      	ldr	r3, [r2, #0]
 8001848:	4303      	orrs	r3, r0
 800184a:	6013      	str	r3, [r2, #0]
		EXTI_FTSR |= extis;
 800184c:	3204      	adds	r2, #4
 800184e:	6813      	ldr	r3, [r2, #0]
 8001850:	4318      	orrs	r0, r3
 8001852:	6010      	str	r0, [r2, #0]
		break;
	}
}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40010408 	.word	0x40010408

0800185c <exti_enable_request>:

void exti_enable_request(uint32_t extis)
{
	/* Enable interrupts. */
	EXTI_IMR |= extis;
 800185c:	4a04      	ldr	r2, [pc, #16]	; (8001870 <exti_enable_request+0x14>)
 800185e:	6813      	ldr	r3, [r2, #0]
 8001860:	4303      	orrs	r3, r0
 8001862:	6013      	str	r3, [r2, #0]

	/* Enable events. */
	EXTI_EMR |= extis;
 8001864:	3204      	adds	r2, #4
 8001866:	6813      	ldr	r3, [r2, #0]
 8001868:	4318      	orrs	r0, r3
 800186a:	6010      	str	r0, [r2, #0]
}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40010400 	.word	0x40010400

08001874 <exti_reset_request>:
 * Reset the interrupt request by writing a 1 to the corresponding
 * pending bit register.
 */
void exti_reset_request(uint32_t extis)
{
	EXTI_PR = extis;
 8001874:	4b01      	ldr	r3, [pc, #4]	; (800187c <exti_reset_request+0x8>)
 8001876:	6018      	str	r0, [r3, #0]
}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40010414 	.word	0x40010414

08001880 <flash_set_ws>:
@param[in] uint32_t ws: values from @ref flash_latency.
*/

void flash_set_ws(uint32_t ws)
{
	FLASH_ACR = (FLASH_ACR & ~FLASH_ACR_LATENCY) | ws;
 8001880:	4a03      	ldr	r2, [pc, #12]	; (8001890 <flash_set_ws+0x10>)
 8001882:	6813      	ldr	r3, [r2, #0]
 8001884:	f023 0307 	bic.w	r3, r3, #7
 8001888:	4318      	orrs	r0, r3
 800188a:	6010      	str	r0, [r2, #0]
}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40022000 	.word	0x40022000

08001894 <scb_reset_system>:
}
#endif

void scb_reset_system(void)
{
	SCB_AIRCR = SCB_AIRCR_VECTKEY | SCB_AIRCR_SYSRESETREQ;
 8001894:	4b01      	ldr	r3, [pc, #4]	; (800189c <scb_reset_system+0x8>)
 8001896:	4a02      	ldr	r2, [pc, #8]	; (80018a0 <scb_reset_system+0xc>)
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e7fe      	b.n	800189a <scb_reset_system+0x6>
 800189c:	e000ed0c 	.word	0xe000ed0c
 80018a0:	05fa0004 	.word	0x05fa0004

080018a4 <gpio_set_mode>:
	     If multiple pins are to be set, use logical OR '|' to separate
	     them.
*/

void gpio_set_mode(uint32_t gpioport, uint8_t mode, uint8_t cnf, uint16_t gpios)
{
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}

	/*
	 * We want to set the config only for the pins mentioned in gpios,
	 * but keeping the others, so read out the actual config first.
	 */
	crl = GPIO_CRL(gpioport);
 80018a6:	6807      	ldr	r7, [r0, #0]
	crh = GPIO_CRH(gpioport);
 80018a8:	6846      	ldr	r6, [r0, #4]

	/* Iterate over all bits, use i as the bitnumber. */
	for (i = 0; i < 16; i++) {
 80018aa:	2400      	movs	r4, #0
 80018ac:	e009      	b.n	80018c2 <gpio_set_mode+0x1e>
		if (!((1 << i) & gpios)) {
			continue;
		}

		/* Calculate bit offset. */
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 80018ae:	f504 557f 	add.w	r5, r4, #16320	; 0x3fc0
 80018b2:	3538      	adds	r5, #56	; 0x38
 80018b4:	00ad      	lsls	r5, r5, #2
 80018b6:	b2ad      	uxth	r5, r5
 80018b8:	e00e      	b.n	80018d8 <gpio_set_mode+0x34>

		/* Use tmp32 to either modify crl or crh. */
		tmp32 = (i < 8) ? crl : crh;
 80018ba:	46b6      	mov	lr, r6
 80018bc:	e00f      	b.n	80018de <gpio_set_mode+0x3a>
	for (i = 0; i < 16; i++) {
 80018be:	3401      	adds	r4, #1
 80018c0:	b2a4      	uxth	r4, r4
 80018c2:	2c0f      	cmp	r4, #15
 80018c4:	d821      	bhi.n	800190a <gpio_set_mode+0x66>
		if (!((1 << i) & gpios)) {
 80018c6:	fa43 f504 	asr.w	r5, r3, r4
 80018ca:	f015 0f01 	tst.w	r5, #1
 80018ce:	d0f6      	beq.n	80018be <gpio_set_mode+0x1a>
		offset = (i < 8) ? (i * 4) : ((i - 8) * 4);
 80018d0:	2c07      	cmp	r4, #7
 80018d2:	d8ec      	bhi.n	80018ae <gpio_set_mode+0xa>
 80018d4:	00a5      	lsls	r5, r4, #2
 80018d6:	b2ad      	uxth	r5, r5
		tmp32 = (i < 8) ? crl : crh;
 80018d8:	2c07      	cmp	r4, #7
 80018da:	d8ee      	bhi.n	80018ba <gpio_set_mode+0x16>
 80018dc:	46be      	mov	lr, r7

		/* Modify bits are needed. */
		tmp32 &= ~(0xf << offset);	/* Clear the bits first. */
 80018de:	f04f 0c0f 	mov.w	ip, #15
 80018e2:	fa0c fc05 	lsl.w	ip, ip, r5
 80018e6:	ea2e 0e0c 	bic.w	lr, lr, ip
		tmp32 |= (mode << offset) | (cnf << (offset + 2));
 80018ea:	fa01 fc05 	lsl.w	ip, r1, r5
 80018ee:	3502      	adds	r5, #2
 80018f0:	fa02 f505 	lsl.w	r5, r2, r5
 80018f4:	ea4c 0505 	orr.w	r5, ip, r5
 80018f8:	ea45 050e 	orr.w	r5, r5, lr

		/* Write tmp32 into crl or crh, leave the other unchanged. */
		crl = (i < 8) ? tmp32 : crl;
 80018fc:	2c07      	cmp	r4, #7
 80018fe:	d800      	bhi.n	8001902 <gpio_set_mode+0x5e>
 8001900:	462f      	mov	r7, r5
		crh = (i >= 8) ? tmp32 : crh;
 8001902:	2c07      	cmp	r4, #7
 8001904:	d9db      	bls.n	80018be <gpio_set_mode+0x1a>
 8001906:	462e      	mov	r6, r5
 8001908:	e7d9      	b.n	80018be <gpio_set_mode+0x1a>
	}

	GPIO_CRL(gpioport) = crl;
 800190a:	6007      	str	r7, [r0, #0]
	GPIO_CRH(gpioport) = crh;
 800190c:	6046      	str	r6, [r0, #4]
}
 800190e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001910 <gpio_set>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void gpio_set(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = gpios;
 8001910:	6101      	str	r1, [r0, #16]
}
 8001912:	4770      	bx	lr

08001914 <gpio_clear>:
	     If multiple pins are to be changed, use logical OR '|' to separate
	     them.
*/
void  gpio_clear(uint32_t gpioport, uint16_t gpios)
{
	GPIO_BSRR(gpioport) = (gpios << 16);
 8001914:	0409      	lsls	r1, r1, #16
 8001916:	6101      	str	r1, [r0, #16]
}
 8001918:	4770      	bx	lr

0800191a <usart_recv>:
*/

uint16_t usart_recv(uint32_t usart)
{
	/* Receive data. */
	return USART_DR(usart) & USART_DR_MASK;
 800191a:	6840      	ldr	r0, [r0, #4]
}
 800191c:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001920:	4770      	bx	lr

08001922 <rcc_periph_clock_enable>:
 * For available constants, see #rcc_periph_clken (RCC_UART1 for example)
 */

void rcc_periph_clock_enable(enum rcc_periph_clken clken)
{
	_RCC_REG(clken) |= _RCC_BIT(clken);
 8001922:	0943      	lsrs	r3, r0, #5
 8001924:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001928:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	f000 001f 	and.w	r0, r0, #31
 8001932:	2101      	movs	r1, #1
 8001934:	fa01 f000 	lsl.w	r0, r1, r0
 8001938:	4310      	orrs	r0, r2
 800193a:	6018      	str	r0, [r3, #0]
}
 800193c:	4770      	bx	lr

0800193e <nvic_enable_irq>:
 * @param[in] irqn Unsigned int8. Interrupt number @ref nvic_stm32f1_userint
 */

void nvic_enable_irq(uint8_t irqn)
{
	NVIC_ISER(irqn / 32) = (1 << (irqn % 32));
 800193e:	f000 021f 	and.w	r2, r0, #31
 8001942:	0940      	lsrs	r0, r0, #5
 8001944:	0080      	lsls	r0, r0, #2
 8001946:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800194a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800194e:	2301      	movs	r3, #1
 8001950:	4093      	lsls	r3, r2
 8001952:	6003      	str	r3, [r0, #0]
}
 8001954:	4770      	bx	lr
	...

08001958 <os_event_init>:
static Evt_t lastSignaledEvent = NO_EVENT;
#endif

void os_event_init(void) {
#if( N_TOTAL_EVENTS > 0 )
    nEvents = 0;
 8001958:	4b01      	ldr	r3, [pc, #4]	; (8001960 <os_event_init+0x8>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
#endif
}
 800195e:	4770      	bx	lr
 8001960:	20000916 	.word	0x20000916

08001964 <os_signal_event>:
    }
#endif
}


void os_signal_event( Evt_t ev ) {
 8001964:	b508      	push	{r3, lr}
	lastSignaledEvent = ev;
 8001966:	4b02      	ldr	r3, [pc, #8]	; (8001970 <os_signal_event+0xc>)
 8001968:	7018      	strb	r0, [r3, #0]
    os_task_signal_event( ev );
 800196a:	f000 f95d 	bl	8001c28 <os_task_signal_event>
}
 800196e:	bd08      	pop	{r3, pc}
 8001970:	20000818 	.word	0x20000818

08001974 <os_event_set_signaling_tid>:


void os_event_set_signaling_tid( Evt_t ev, uint8_t tid ) {
#if( N_TOTAL_EVENTS > 0 )
	eventList[ ev ].signaledByTid = tid;
 8001974:	4b02      	ldr	r3, [pc, #8]	; (8001980 <os_event_set_signaling_tid+0xc>)
 8001976:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800197a:	7041      	strb	r1, [r0, #1]
#endif
}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000858 	.word	0x20000858

08001984 <os_init>:
*   }
*   @endcode
*       
*		 */
/*********************************************************************************/
void os_init( void ) {
 8001984:	b508      	push	{r3, lr}
	running_tid = NO_TID;
 8001986:	23ff      	movs	r3, #255	; 0xff
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <os_init+0x24>)
 800198a:	7013      	strb	r3, [r2, #0]
    last_running_task = NO_TID;
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <os_init+0x28>)
 800198e:	7013      	strb	r3, [r2, #0]
    running = 0;
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <os_init+0x2c>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
    os_sem_init();
 8001996:	f000 f869 	bl	8001a6c <os_sem_init>
    os_event_init();
 800199a:	f7ff ffdd 	bl	8001958 <os_event_init>
    os_msgQ_init();
 800199e:	f000 f80f 	bl	80019c0 <os_msgQ_init>
    os_task_init();
 80019a2:	f000 f881 	bl	8001aa8 <os_task_init>
}
 80019a6:	bd08      	pop	{r3, pc}
 80019a8:	20000b4c 	.word	0x20000b4c
 80019ac:	20000b4e 	.word	0x20000b4e
 80019b0:	20000b4d 	.word	0x20000b4d

080019b4 <os_running>:
}


uint8_t os_running( void ) {
    return running;
}
 80019b4:	4b01      	ldr	r3, [pc, #4]	; (80019bc <os_running+0x8>)
 80019b6:	7818      	ldrb	r0, [r3, #0]
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	20000b4d 	.word	0x20000b4d

080019c0 <os_msgQ_init>:

void os_msgQ_init() {
    
#if( N_QUEUES > 0 )
    uint8_t i;
    nQueues = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	4a0b      	ldr	r2, [pc, #44]	; (80019f0 <os_msgQ_init+0x30>)
 80019c4:	7013      	strb	r3, [r2, #0]
    for ( i = 0; i < N_QUEUES; ++i  ) {
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d811      	bhi.n	80019ee <os_msgQ_init+0x2e>
void os_msgQ_init() {
 80019ca:	b410      	push	{r4}
        msgQList[ i ].q.list = 0;
 80019cc:	4c09      	ldr	r4, [pc, #36]	; (80019f4 <os_msgQ_init+0x34>)
 80019ce:	0118      	lsls	r0, r3, #4
 80019d0:	1821      	adds	r1, r4, r0
 80019d2:	2200      	movs	r2, #0
 80019d4:	5022      	str	r2, [r4, r0]
        msgQList[ i ].q.head = 0;
 80019d6:	718a      	strb	r2, [r1, #6]
        msgQList[ i ].q.tail = 0;
 80019d8:	71ca      	strb	r2, [r1, #7]
        msgQList[ i ].q.size = 0;
 80019da:	720a      	strb	r2, [r1, #8]
        msgQList[ i ].q.messageSize = 0;
 80019dc:	808a      	strh	r2, [r1, #4]
        msgQList[ i ].taskId = 0;
 80019de:	730a      	strb	r2, [r1, #12]
        msgQList[ i ].change = 0;
 80019e0:	734a      	strb	r2, [r1, #13]
    for ( i = 0; i < N_QUEUES; ++i  ) {
 80019e2:	3301      	adds	r3, #1
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d9f0      	bls.n	80019cc <os_msgQ_init+0xc>
    }
#endif
}
 80019ea:	bc10      	pop	{r4}
 80019ec:	4770      	bx	lr
 80019ee:	4770      	bx	lr
 80019f0:	20000917 	.word	0x20000917
 80019f4:	20000868 	.word	0x20000868

080019f8 <os_msgQ_tick>:
#else
    return 0;
#endif
}

void os_msgQ_tick( MsgQ_t queue ) {
 80019f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019fc:	4604      	mov	r4, r0
#if( N_QUEUES > 0 )
    uint8_t nextMessage;
    Msg_t *pMsg;
    OSQueue_t *q = &msgQList[ queue ].q;
    nextMessage = (q->tail+1) % q->size;
 80019fe:	4a1a      	ldr	r2, [pc, #104]	; (8001a68 <os_msgQ_tick+0x70>)
 8001a00:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8001a04:	79d3      	ldrb	r3, [r2, #7]
 8001a06:	1c59      	adds	r1, r3, #1
 8001a08:	7a10      	ldrb	r0, [r2, #8]
 8001a0a:	fb91 f3f0 	sdiv	r3, r1, r0
 8001a0e:	fb00 1313 	mls	r3, r0, r3, r1
 8001a12:	b2db      	uxtb	r3, r3

    uint8_t head = q->head;
 8001a14:	7995      	ldrb	r5, [r2, #6]
    uint16_t msgSz = q->messageSize;
 8001a16:	8896      	ldrh	r6, [r2, #4]

    while ( nextMessage != head ) {
 8001a18:	e009      	b.n	8001a2e <os_msgQ_tick+0x36>
            --(pMsg->delay);
            if ( pMsg->delay == 0 ) {
                event_ISR_signal( msgQList[ queue ].change );
            }
        }
        nextMessage = (nextMessage + 1) % q->size;
 8001a1a:	1c7a      	adds	r2, r7, #1
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <os_msgQ_tick+0x70>)
 8001a1e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8001a22:	7a19      	ldrb	r1, [r3, #8]
 8001a24:	fb92 f3f1 	sdiv	r3, r2, r1
 8001a28:	fb01 2313 	mls	r3, r1, r3, r2
 8001a2c:	b2db      	uxtb	r3, r3
    while ( nextMessage != head ) {
 8001a2e:	42ab      	cmp	r3, r5
 8001a30:	d018      	beq.n	8001a64 <os_msgQ_tick+0x6c>
        pMsg = (Msg_t*)( (Mem_t)q->list + nextMessage * msgSz );
 8001a32:	0122      	lsls	r2, r4, #4
 8001a34:	490c      	ldr	r1, [pc, #48]	; (8001a68 <os_msgQ_tick+0x70>)
 8001a36:	588a      	ldr	r2, [r1, r2]
 8001a38:	461f      	mov	r7, r3
 8001a3a:	fb03 2306 	mla	r3, r3, r6, r2
        if ( pMsg->delay > 0 ) {
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	2a00      	cmp	r2, #0
 8001a42:	d0ea      	beq.n	8001a1a <os_msgQ_tick+0x22>
            --(pMsg->delay);
 8001a44:	3a01      	subs	r2, #1
 8001a46:	605a      	str	r2, [r3, #4]
            if ( pMsg->delay == 0 ) {
 8001a48:	2a00      	cmp	r2, #0
 8001a4a:	d1e6      	bne.n	8001a1a <os_msgQ_tick+0x22>
                event_ISR_signal( msgQList[ queue ].change );
 8001a4c:	eb01 1804 	add.w	r8, r1, r4, lsl #4
 8001a50:	f898 000d 	ldrb.w	r0, [r8, #13]
 8001a54:	f7ff ff86 	bl	8001964 <os_signal_event>
 8001a58:	21fe      	movs	r1, #254	; 0xfe
 8001a5a:	f898 000d 	ldrb.w	r0, [r8, #13]
 8001a5e:	f7ff ff89 	bl	8001974 <os_event_set_signaling_tid>
 8001a62:	e7da      	b.n	8001a1a <os_msgQ_tick+0x22>

    }
#endif    
}
 8001a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a68:	20000868 	.word	0x20000868

08001a6c <os_sem_init>:
static Sem_t nSemaphores;
#endif							   

void os_sem_init(void) {
#if ( N_TOTAL_SEMAPHORES > 0 )
    nSemaphores = 0;
 8001a6c:	4b01      	ldr	r3, [pc, #4]	; (8001a74 <os_sem_init+0x8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
#endif
}
 8001a72:	4770      	bx	lr
 8001a74:	20000918 	.word	0x20000918

08001a78 <os_task_wait_queue_empty>:
    result = 1;
    event = EVENT_QUEUE_SIZE;

    do {
        --event;
        if ( task_list[ tid ].eventQueue.eventList[ event ] != 0 ) {
 8001a78:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001a7c:	0082      	lsls	r2, r0, #2
 8001a7e:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <os_task_wait_queue_empty+0x18>)
 8001a80:	4413      	add	r3, r2
 8001a82:	7d5b      	ldrb	r3, [r3, #21]
 8001a84:	b10b      	cbz	r3, 8001a8a <os_task_wait_queue_empty+0x12>
            result = 0;
 8001a86:	2000      	movs	r0, #0
        }
    } while ( event != 0 );
        

    return result;
}
 8001a88:	4770      	bx	lr
        if ( task_list[ tid ].eventQueue.eventList[ event ] != 0 ) {
 8001a8a:	2001      	movs	r0, #1
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000888 	.word	0x20000888

08001a94 <task_ready_set>:
    task_list[ tid ].semaphore = sem;
}


static void task_ready_set( uint8_t tid ) {
    task_list[ tid ].state = READY;
 8001a94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001a98:	0082      	lsls	r2, r0, #2
 8001a9a:	4b02      	ldr	r3, [pc, #8]	; (8001aa4 <task_ready_set+0x10>)
 8001a9c:	4413      	add	r3, r2
 8001a9e:	2205      	movs	r2, #5
 8001aa0:	711a      	strb	r2, [r3, #4]
}
 8001aa2:	4770      	bx	lr
 8001aa4:	20000888 	.word	0x20000888

08001aa8 <os_task_init>:
    nTasks = 0;
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <os_task_init+0x6c>)
 8001aac:	7019      	strb	r1, [r3, #0]
    for ( i = 0; i < N_TASKS; ++i ) {
 8001aae:	2904      	cmp	r1, #4
 8001ab0:	d82f      	bhi.n	8001b12 <os_task_init+0x6a>
void os_task_init( void ) {
 8001ab2:	b470      	push	{r4, r5, r6}
        task = &task_list[i];
 8001ab4:	4608      	mov	r0, r1
        task->clockId = 0xff;
 8001ab6:	4e18      	ldr	r6, [pc, #96]	; (8001b18 <os_task_init+0x70>)
 8001ab8:	00cb      	lsls	r3, r1, #3
 8001aba:	1a5b      	subs	r3, r3, r1
 8001abc:	009d      	lsls	r5, r3, #2
 8001abe:	1972      	adds	r2, r6, r5
 8001ac0:	24ff      	movs	r4, #255	; 0xff
 8001ac2:	7514      	strb	r4, [r2, #20]
        task->internal_state = 0xff;
 8001ac4:	80d4      	strh	r4, [r2, #6]
        task->msgQ = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	73d3      	strb	r3, [r2, #15]
        task->waitQ = 0;
 8001aca:	7413      	strb	r3, [r2, #16]
        task->msgChangeEvent = 0;
 8001acc:	7453      	strb	r3, [r2, #17]
        task->msgResult = 0;
 8001ace:	7493      	strb	r3, [r2, #18]
        task->prio = 0;
 8001ad0:	7353      	strb	r3, [r2, #13]
        task->savedState = SUSPENDED;
 8001ad2:	7153      	strb	r3, [r2, #5]
        task->semaphore = NO_SEM;
 8001ad4:	7394      	strb	r4, [r2, #14]
        task->state = SUSPENDED;
 8001ad6:	7113      	strb	r3, [r2, #4]
        task->taskproc = 0;
 8001ad8:	5173      	str	r3, [r6, r5]
        task->tid = NO_TID;
 8001ada:	7314      	strb	r4, [r2, #12]
        task->time = 0;
 8001adc:	6093      	str	r3, [r2, #8]
        task->waitSingleEvent = 0;
 8001ade:	74d3      	strb	r3, [r2, #19]
        for ( j = 0; j < sizeof( task->eventQueue.eventList); j++ ) {
 8001ae0:	b163      	cbz	r3, 8001afc <os_task_init+0x54>
        task->data = 0;
 8001ae2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001ae6:	0082      	lsls	r2, r0, #2
 8001ae8:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <os_task_init+0x70>)
 8001aea:	4413      	add	r3, r2
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
    for ( i = 0; i < N_TASKS; ++i ) {
 8001af0:	3101      	adds	r1, #1
 8001af2:	b2c9      	uxtb	r1, r1
 8001af4:	2904      	cmp	r1, #4
 8001af6:	d9dd      	bls.n	8001ab4 <os_task_init+0xc>
}
 8001af8:	bc70      	pop	{r4, r5, r6}
 8001afa:	4770      	bx	lr
            task->eventQueue.eventList[j] = 0xff;
 8001afc:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8001b00:	0094      	lsls	r4, r2, #2
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <os_task_init+0x70>)
 8001b04:	4422      	add	r2, r4
 8001b06:	441a      	add	r2, r3
 8001b08:	24ff      	movs	r4, #255	; 0xff
 8001b0a:	7554      	strb	r4, [r2, #21]
        for ( j = 0; j < sizeof( task->eventQueue.eventList); j++ ) {
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	e7e6      	b.n	8001ae0 <os_task_init+0x38>
 8001b12:	4770      	bx	lr
 8001b14:	20000919 	.word	0x20000919
 8001b18:	20000888 	.word	0x20000888

08001b1c <os_task_highest_prio_ready_task>:
uint8_t os_task_highest_prio_ready_task( void ) {
 8001b1c:	b470      	push	{r4, r5, r6}
    uint8_t highest_prio = 255;
 8001b1e:	26ff      	movs	r6, #255	; 0xff
    uint8_t highest_prio_task = NO_TID;
 8001b20:	4630      	mov	r0, r6
    for ( index = 0; index != nTasks; ++index ) {
 8001b22:	2300      	movs	r3, #0
 8001b24:	e001      	b.n	8001b2a <os_task_highest_prio_ready_task+0xe>
 8001b26:	3301      	adds	r3, #1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <os_task_highest_prio_ready_task+0x3c>)
 8001b2c:	7812      	ldrb	r2, [r2, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d010      	beq.n	8001b54 <os_task_highest_prio_ready_task+0x38>
        prio = task->prio;
 8001b32:	490a      	ldr	r1, [pc, #40]	; (8001b5c <os_task_highest_prio_ready_task+0x40>)
 8001b34:	00da      	lsls	r2, r3, #3
 8001b36:	1ad5      	subs	r5, r2, r3
 8001b38:	00ac      	lsls	r4, r5, #2
 8001b3a:	440c      	add	r4, r1
 8001b3c:	7b65      	ldrb	r5, [r4, #13]
        state = task->state;
 8001b3e:	1ad2      	subs	r2, r2, r3
 8001b40:	0094      	lsls	r4, r2, #2
 8001b42:	4421      	add	r1, r4
 8001b44:	790a      	ldrb	r2, [r1, #4]
        if ( READY == state ) {
 8001b46:	2a05      	cmp	r2, #5
 8001b48:	d1ed      	bne.n	8001b26 <os_task_highest_prio_ready_task+0xa>
            if ( prio < highest_prio ) {
 8001b4a:	42ae      	cmp	r6, r5
 8001b4c:	d9eb      	bls.n	8001b26 <os_task_highest_prio_ready_task+0xa>
                highest_prio_task = index;
 8001b4e:	b2d8      	uxtb	r0, r3
                highest_prio = prio;
 8001b50:	462e      	mov	r6, r5
 8001b52:	e7e8      	b.n	8001b26 <os_task_highest_prio_ready_task+0xa>
}
 8001b54:	bc70      	pop	{r4, r5, r6}
 8001b56:	4770      	bx	lr
 8001b58:	20000919 	.word	0x20000919
 8001b5c:	20000888 	.word	0x20000888

08001b60 <os_task_clear_wait_queue>:
void os_task_clear_wait_queue( uint8_t tid ) {
 8001b60:	b410      	push	{r4}
    task->waitSingleEvent = 0;
 8001b62:	4a05      	ldr	r2, [pc, #20]	; (8001b78 <os_task_clear_wait_queue+0x18>)
 8001b64:	00c3      	lsls	r3, r0, #3
 8001b66:	1a1c      	subs	r4, r3, r0
 8001b68:	00a1      	lsls	r1, r4, #2
 8001b6a:	4411      	add	r1, r2
 8001b6c:	2400      	movs	r4, #0
 8001b6e:	74cc      	strb	r4, [r1, #19]
        task->eventQueue.eventList[ event ] = 0;
 8001b70:	754c      	strb	r4, [r1, #21]
}
 8001b72:	bc10      	pop	{r4}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000888 	.word	0x20000888

08001b7c <os_task_tick>:
void os_task_tick( uint8_t id, uint32_t tickSize ) {
 8001b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b7e:	4606      	mov	r6, r0
 8001b80:	460f      	mov	r7, r1
    for ( index = 0; index != nTasks; ++index ) {
 8001b82:	2400      	movs	r4, #0
 8001b84:	e012      	b.n	8001bac <os_task_tick+0x30>
        if ( task_list[ index ].clockId == id ) {
 8001b86:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8001b8a:	0091      	lsls	r1, r2, #2
 8001b8c:	4a24      	ldr	r2, [pc, #144]	; (8001c20 <os_task_tick+0xa4>)
 8001b8e:	440a      	add	r2, r1
 8001b90:	7d12      	ldrb	r2, [r2, #20]
 8001b92:	42b2      	cmp	r2, r6
 8001b94:	d024      	beq.n	8001be0 <os_task_tick+0x64>
        if ( id == 0 ) {
 8001b96:	b93e      	cbnz	r6, 8001ba8 <os_task_tick+0x2c>
            if ( task_list[ index ].msgQ != NO_QUEUE ) {
 8001b98:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8001b9c:	00aa      	lsls	r2, r5, #2
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <os_task_tick+0xa4>)
 8001ba0:	4413      	add	r3, r2
 8001ba2:	7bd8      	ldrb	r0, [r3, #15]
 8001ba4:	28ff      	cmp	r0, #255	; 0xff
 8001ba6:	d136      	bne.n	8001c16 <os_task_tick+0x9a>
    for ( index = 0; index != nTasks; ++index ) {
 8001ba8:	3401      	adds	r4, #1
 8001baa:	b2e4      	uxtb	r4, r4
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <os_task_tick+0xa8>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	42a3      	cmp	r3, r4
 8001bb2:	d033      	beq.n	8001c1c <os_task_tick+0xa0>
		state = task_list[ index ].state;
 8001bb4:	4625      	mov	r5, r4
 8001bb6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8001bba:	009a      	lsls	r2, r3, #2
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <os_task_tick+0xa4>)
 8001bbe:	4413      	add	r3, r2
 8001bc0:	791b      	ldrb	r3, [r3, #4]
    if (( state == WAITING_TIME ) || ( state == WAITING_EVENT_TIMEOUT )){
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d0df      	beq.n	8001b86 <os_task_tick+0xa>
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d0dd      	beq.n	8001b86 <os_task_tick+0xa>
		else if ( state ==  WAITING_SEM ) {
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d1e3      	bne.n	8001b96 <os_task_tick+0x1a>
			task_list[ index ].time++;
 8001bce:	00e2      	lsls	r2, r4, #3
 8001bd0:	1b12      	subs	r2, r2, r4
 8001bd2:	0091      	lsls	r1, r2, #2
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <os_task_tick+0xa4>)
 8001bd6:	440b      	add	r3, r1
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	3201      	adds	r2, #1
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	e7da      	b.n	8001b96 <os_task_tick+0x1a>
          if ( task_list[ index ].time <= tickSize ) {
 8001be0:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <os_task_tick+0xa4>)
 8001be2:	440a      	add	r2, r1
 8001be4:	6892      	ldr	r2, [r2, #8]
 8001be6:	42ba      	cmp	r2, r7
 8001be8:	d80d      	bhi.n	8001c06 <os_task_tick+0x8a>
            task_list[ index ].time = 0;
 8001bea:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <os_task_tick+0xa4>)
 8001bec:	440a      	add	r2, r1
 8001bee:	2100      	movs	r1, #0
 8001bf0:	6091      	str	r1, [r2, #8]
            if ( state == WAITING_EVENT_TIMEOUT ) {
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d003      	beq.n	8001bfe <os_task_tick+0x82>
            task_ready_set( index );
 8001bf6:	4620      	mov	r0, r4
 8001bf8:	f7ff ff4c 	bl	8001a94 <task_ready_set>
 8001bfc:	e7cb      	b.n	8001b96 <os_task_tick+0x1a>
              os_task_clear_wait_queue( index );
 8001bfe:	4620      	mov	r0, r4
 8001c00:	f7ff ffae 	bl	8001b60 <os_task_clear_wait_queue>
 8001c04:	e7f7      	b.n	8001bf6 <os_task_tick+0x7a>
            task_list[ index ].time -= tickSize;
 8001c06:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8001c0a:	0099      	lsls	r1, r3, #2
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <os_task_tick+0xa4>)
 8001c0e:	440b      	add	r3, r1
 8001c10:	1bd2      	subs	r2, r2, r7
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	e7bf      	b.n	8001b96 <os_task_tick+0x1a>
                os_msgQ_tick( task_list[ index ].msgQ );
 8001c16:	f7ff feef 	bl	80019f8 <os_msgQ_tick>
 8001c1a:	e7c5      	b.n	8001ba8 <os_task_tick+0x2c>
}
 8001c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000888 	.word	0x20000888
 8001c24:	20000919 	.word	0x20000919

08001c28 <os_task_signal_event>:
void os_task_signal_event( Evt_t eventId ) {
 8001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eventListIndex = eventId / 8;
 8001c2a:	08c6      	lsrs	r6, r0, #3
    shift = eventId & 0x07;
 8001c2c:	f000 0507 	and.w	r5, r0, #7
    for ( index = 0; index != nTasks; index++ ) {
 8001c30:	2400      	movs	r4, #0
 8001c32:	e009      	b.n	8001c48 <os_task_signal_event+0x20>
		    taskWaitStateOK = 1;
 8001c34:	2001      	movs	r0, #1
 8001c36:	e017      	b.n	8001c68 <os_task_signal_event+0x40>
                os_task_clear_wait_queue( index );
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f7ff ff91 	bl	8001b60 <os_task_clear_wait_queue>
                task_ready_set( index );
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff ff28 	bl	8001a94 <task_ready_set>
    for ( index = 0; index != nTasks; index++ ) {
 8001c44:	3401      	adds	r4, #1
 8001c46:	b2e4      	uxtb	r4, r4
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <os_task_signal_event+0x90>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	42a3      	cmp	r3, r4
 8001c4e:	d032      	beq.n	8001cb6 <os_task_signal_event+0x8e>
		state = task_list[ index ].state;
 8001c50:	4622      	mov	r2, r4
 8001c52:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8001c56:	0099      	lsls	r1, r3, #2
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <os_task_signal_event+0x94>)
 8001c5a:	440b      	add	r3, r1
 8001c5c:	791b      	ldrb	r3, [r3, #4]
		if (( state == WAITING_EVENT ) || ( state == WAITING_EVENT_TIMEOUT )) {
 8001c5e:	3b03      	subs	r3, #3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d9e6      	bls.n	8001c34 <os_task_signal_event+0xc>
		taskWaitStateOK = 0;
 8001c66:	2000      	movs	r0, #0
        taskWaitingForEvent = task_list[ index ].eventQueue.eventList[eventListIndex] & (1<<shift);
 8001c68:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8001c6c:	0099      	lsls	r1, r3, #2
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <os_task_signal_event+0x94>)
 8001c70:	440b      	add	r3, r1
 8001c72:	4433      	add	r3, r6
 8001c74:	f993 1015 	ldrsb.w	r1, [r3, #21]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	40ab      	lsls	r3, r5
 8001c7c:	b25b      	sxtb	r3, r3
        if ( taskWaitingForEvent  &&  taskWaitStateOK ) {
 8001c7e:	4219      	tst	r1, r3
 8001c80:	d0e0      	beq.n	8001c44 <os_task_signal_event+0x1c>
 8001c82:	2800      	cmp	r0, #0
 8001c84:	d0de      	beq.n	8001c44 <os_task_signal_event+0x1c>
            task_list[ index ].eventQueue.eventList[eventListIndex] &= ~(1<<shift);
 8001c86:	f8df c034 	ldr.w	ip, [pc, #52]	; 8001cbc <os_task_signal_event+0x94>
 8001c8a:	00d7      	lsls	r7, r2, #3
 8001c8c:	eba7 0e02 	sub.w	lr, r7, r2
 8001c90:	ea4f 008e 	mov.w	r0, lr, lsl #2
 8001c94:	4686      	mov	lr, r0
 8001c96:	4460      	add	r0, ip
 8001c98:	4430      	add	r0, r6
 8001c9a:	ea21 0303 	bic.w	r3, r1, r3
 8001c9e:	7543      	strb	r3, [r0, #21]
            if ( task_list[ index ].waitSingleEvent || os_task_wait_queue_empty( index ) ) {
 8001ca0:	44f4      	add	ip, lr
 8001ca2:	f89c 3013 	ldrb.w	r3, [ip, #19]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1c6      	bne.n	8001c38 <os_task_signal_event+0x10>
 8001caa:	4620      	mov	r0, r4
 8001cac:	f7ff fee4 	bl	8001a78 <os_task_wait_queue_empty>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d0c7      	beq.n	8001c44 <os_task_signal_event+0x1c>
 8001cb4:	e7c0      	b.n	8001c38 <os_task_signal_event+0x10>
}
 8001cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cb8:	20000919 	.word	0x20000919
 8001cbc:	20000888 	.word	0x20000888

08001cc0 <os_task_run>:
void os_task_run( void ) {
 8001cc0:	b508      	push	{r3, lr}
    os_assert( running_tid < nTasks );
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <os_task_run+0x2c>)
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <os_task_run+0x30>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d208      	bcs.n	8001ce0 <os_task_run+0x20>
    task_list[ running_tid ].taskproc();
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <os_task_run+0x2c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001cd6:	009a      	lsls	r2, r3, #2
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <os_task_run+0x34>)
 8001cda:	589b      	ldr	r3, [r3, r2]
 8001cdc:	4798      	blx	r3
}
 8001cde:	bd08      	pop	{r3, pc}
    os_assert( running_tid < nTasks );
 8001ce0:	f44f 701c 	mov.w	r0, #624	; 0x270
 8001ce4:	f000 f808 	bl	8001cf8 <os_on_assert>
 8001ce8:	e7f1      	b.n	8001cce <os_task_run+0xe>
 8001cea:	bf00      	nop
 8001cec:	20000b4c 	.word	0x20000b4c
 8001cf0:	20000919 	.word	0x20000919
 8001cf4:	20000888 	.word	0x20000888

08001cf8 <os_on_assert>:


#include "cocoos.h"
#include <logger.h> ////

void os_on_assert( uint16_t line ) {
 8001cf8:	b508      	push	{r3, lr}
 8001cfa:	4604      	mov	r4, r0
    debug_print("*** cocoos assert failed "); debug_print_unsigned(line); debug_flush();
 8001cfc:	4806      	ldr	r0, [pc, #24]	; (8001d18 <os_on_assert+0x20>)
 8001cfe:	f000 f95f 	bl	8001fc0 <debug_print>
 8001d02:	4620      	mov	r0, r4
 8001d04:	f000 f968 	bl	8001fd8 <debug_print_unsigned>
 8001d08:	f000 f955 	bl	8001fb6 <debug_flush>
    static volatile uint16_t l;
    os_disable_interrupts();
    l = line;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <os_on_assert+0x24>)
 8001d0e:	801c      	strh	r4, [r3, #0]
    l = l;
 8001d10:	881a      	ldrh	r2, [r3, #0]
 8001d12:	b292      	uxth	r2, r2
 8001d14:	801a      	strh	r2, [r3, #0]
 8001d16:	e7fe      	b.n	8001d16 <os_on_assert+0x1e>
 8001d18:	08002358 	.word	0x08002358
 8001d1c:	20000914 	.word	0x20000914

08001d20 <os_cbkSleep>:
*       
*/
/*********************************************************************************/
void os_cbkSleep( void ) {
    /* Enter low power mode here */
}
 8001d20:	4770      	bx	lr

08001d22 <os_tick>:
void os_tick( void ) {
 8001d22:	b508      	push	{r3, lr}
    os_task_tick( 0, 1 );
 8001d24:	2101      	movs	r1, #1
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff ff28 	bl	8001b7c <os_task_tick>
}
 8001d2c:	bd08      	pop	{r3, pc}

08001d2e <memcpy>:
void *
__inhibit_loop_to_libcall
memcpy (void *__restrict dst0,
	const void *__restrict src0,
	size_t len0)
{
 8001d2e:	b410      	push	{r4}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  char *dst = (char *) dst0;
 8001d30:	4603      	mov	r3, r0
  char *src = (char *) src0;

  void *save = dst0;

  while (len0--)
 8001d32:	e004      	b.n	8001d3e <memcpy+0x10>
    {
      *dst++ = *src++;
 8001d34:	780a      	ldrb	r2, [r1, #0]
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	3101      	adds	r1, #1
 8001d3a:	3301      	adds	r3, #1
  while (len0--)
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	1e54      	subs	r4, r2, #1
 8001d40:	2a00      	cmp	r2, #0
 8001d42:	d1f7      	bne.n	8001d34 <memcpy+0x6>
  while (len0--)
    *dst++ = *src++;

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8001d44:	bc10      	pop	{r4}
 8001d46:	4770      	bx	lr

08001d48 <strlen>:
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 8001d48:	4603      	mov	r3, r0
 8001d4a:	e000      	b.n	8001d4e <strlen+0x6>
    str++;
 8001d4c:	3301      	adds	r3, #1
  while (*str)
 8001d4e:	781a      	ldrb	r2, [r3, #0]
 8001d50:	2a00      	cmp	r2, #0
 8001d52:	d1fb      	bne.n	8001d4c <strlen+0x4>
  return str - start;
}
 8001d54:	1a18      	subs	r0, r3, r0
 8001d56:	4770      	bx	lr

08001d58 <memcmp>:

int
memcmp (const void *m1,
	const void *m2,
	size_t n)
{
 8001d58:	b410      	push	{r4}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  unsigned char *s1 = (unsigned char *) m1;
  unsigned char *s2 = (unsigned char *) m2;

  while (n--)
 8001d5a:	1e54      	subs	r4, r2, #1
 8001d5c:	b14a      	cbz	r2, 8001d72 <memcmp+0x1a>
    {
      if (*s1 != *s2)
 8001d5e:	7803      	ldrb	r3, [r0, #0]
 8001d60:	780a      	ldrb	r2, [r1, #0]
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d103      	bne.n	8001d6e <memcmp+0x16>
	{
	  return *s1 - *s2;
	}
      s1++;
 8001d66:	3001      	adds	r0, #1
      s2++;
 8001d68:	3101      	adds	r1, #1
  while (n--)
 8001d6a:	4622      	mov	r2, r4
 8001d6c:	e7f5      	b.n	8001d5a <memcmp+0x2>
	  return *s1 - *s2;
 8001d6e:	1a98      	subs	r0, r3, r2
 8001d70:	e000      	b.n	8001d74 <memcmp+0x1c>
    }
  return 0;
 8001d72:	2000      	movs	r0, #0
      s2++;
    }

  return 0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 8001d74:	bc10      	pop	{r4}
 8001d76:	4770      	bx	lr

08001d78 <memset>:
void *
__inhibit_loop_to_libcall
memset (void *m,
	int c,
	size_t n)
{
 8001d78:	b410      	push	{r4}
  char *s = (char *) m;
 8001d7a:	4603      	mov	r3, r0
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 8001d7c:	e002      	b.n	8001d84 <memset+0xc>
    *s++ = (char) c;
 8001d7e:	7019      	strb	r1, [r3, #0]
 8001d80:	3301      	adds	r3, #1
  while (n--)
 8001d82:	4622      	mov	r2, r4
 8001d84:	1e54      	subs	r4, r2, #1
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	d1f9      	bne.n	8001d7e <memset+0x6>

  return m;
}
 8001d8a:	bc10      	pop	{r4}
 8001d8c:	4770      	bx	lr
	...

08001d90 <_ZL10__semihostiPv>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/connect.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!logEnabled) return -1;
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <_ZL10__semihostiPv+0x20>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b143      	cbz	r3, 8001da8 <_ZL10__semihostiPv+0x18>
static int __semihost(int command, void* message) {
 8001d96:	b410      	push	{r4}
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460c      	mov	r4, r1
	:  //  Input operand list:
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4621      	mov	r1, r4
 8001da0:	beab      	bkpt	0x00ab
	return 0;  //  TODO
 8001da2:	2000      	movs	r0, #0
}
 8001da4:	bc10      	pop	{r4}
 8001da6:	4770      	bx	lr
    if (!logEnabled) return -1;
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000b32 	.word	0x20000b32

08001db4 <_ZL16write_all_outputPKhtb>:
#define MAX_OUTPUT_LENGTH 60  //  Output at most 60 bytes at a time.

static uint16_t write_all_output(
    const uint8_t *buf,
	uint16_t len,
    bool forced) {
 8001db4:	b570      	push	{r4, r5, r6, lr}
 8001db6:	4606      	mov	r6, r0
    //  Write the buffer to all outputs: Arm Semihosting, USB Serial, HF2, ...
    //  We must flush as quickly as possible and USB Serial can only handle 64 bytes, so we just flush the next 60 bytes.
    //  Return the number of bytes flushed.
    ////if (!forced && target_in_isr()) { return 0; }      //  Can't write when called by interrupt routine, unless it's forced.
    //  if (target_in_isr()) { return 0; }      //  Can't write when called by interrupt routine
    uint16_t outlen = (len > MAX_OUTPUT_LENGTH) ? MAX_OUTPUT_LENGTH : len;
 8001db8:	293c      	cmp	r1, #60	; 0x3c
 8001dba:	bf28      	it	cs
 8001dbc:	213c      	movcs	r1, #60	; 0x3c
 8001dbe:	460d      	mov	r5, r1
#define ENABLE_SEMIHOSTING 
#endif  //  PLATFORMIO

#ifdef ENABLE_SEMIHOSTING
    #warning Semihosting ENABLED
    semihost_write(SEMIHOST_HANDLE, (const unsigned char *) buf, outlen);
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	4601      	mov	r1, r0
 8001dc4:	2002      	movs	r0, #2
 8001dc6:	f000 f8e7 	bl	8001f98 <_ZL14semihost_writemPKhj>
#else
    #warning Semihosting DISABLED
#endif  //  ENABLE_SEMIHOSTING
    for (int i = 0; i < MAX_OUTPUT_FUNCS; i++) {
 8001dca:	2400      	movs	r4, #0
 8001dcc:	e000      	b.n	8001dd0 <_ZL16write_all_outputPKhtb+0x1c>
 8001dce:	3401      	adds	r4, #1
 8001dd0:	2c03      	cmp	r4, #3
 8001dd2:	dc08      	bgt.n	8001de6 <_ZL16write_all_outputPKhtb+0x32>
        if (output_funcs[i]) {
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <_ZL16write_all_outputPKhtb+0x38>)
 8001dd6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f7      	beq.n	8001dce <_ZL16write_all_outputPKhtb+0x1a>
            logger_output_func *func = output_funcs[i];
            func(buf, outlen);
 8001dde:	4629      	mov	r1, r5
 8001de0:	4630      	mov	r0, r6
 8001de2:	4798      	blx	r3
 8001de4:	e7f3      	b.n	8001dce <_ZL16write_all_outputPKhtb+0x1a>
        }
    }
    return outlen;
}
 8001de6:	4628      	mov	r0, r5
 8001de8:	bd70      	pop	{r4, r5, r6, pc}
 8001dea:	bf00      	nop
 8001dec:	20000b20 	.word	0x20000b20

08001df0 <_ZL12debug_appendPKcj>:
    }
}

static void debug_append(const char *buffer, unsigned int length) {
    //  Append "length" number of bytes from "buffer" to the debug buffer.
    if (length >= DEBUG_BUFFER_SIZE) { return; }  //  Don't allow logging of very long messages.
 8001df0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001df4:	d217      	bcs.n	8001e26 <_ZL12debug_appendPKcj+0x36>
static void debug_append(const char *buffer, unsigned int length) {
 8001df6:	b538      	push	{r3, r4, r5, lr}
    if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) {
 8001df8:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <_ZL12debug_appendPKcj+0x38>)
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	440b      	add	r3, r1
 8001dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e02:	d302      	bcc.n	8001e0a <_ZL12debug_appendPKcj+0x1a>
        //  Erase the entire buffer.  Latest log is more important than old log.
        debugBufferLength = 0;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <_ZL12debug_appendPKcj+0x38>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	801a      	strh	r2, [r3, #0]
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	4601      	mov	r1, r0

        //  Still can't fit after flushing.  Quit.
        //  if (debugBufferLength + length >= DEBUG_BUFFER_SIZE) { return; }
    }
    //  Else append to the buffer.
    memcpy(&debugBuffer[debugBufferLength], buffer, length);
 8001e0e:	4d06      	ldr	r5, [pc, #24]	; (8001e28 <_ZL12debug_appendPKcj+0x38>)
 8001e10:	882b      	ldrh	r3, [r5, #0]
 8001e12:	4622      	mov	r2, r4
 8001e14:	4805      	ldr	r0, [pc, #20]	; (8001e2c <_ZL12debug_appendPKcj+0x3c>)
 8001e16:	4418      	add	r0, r3
 8001e18:	f7ff ff89 	bl	8001d2e <memcpy>
    debugBufferLength += length;
 8001e1c:	8829      	ldrh	r1, [r5, #0]
 8001e1e:	4421      	add	r1, r4
 8001e20:	b289      	uxth	r1, r1
 8001e22:	8029      	strh	r1, [r5, #0]
}
 8001e24:	bd38      	pop	{r3, r4, r5, pc}
 8001e26:	4770      	bx	lr
 8001e28:	20000b30 	.word	0x20000b30
 8001e2c:	2000091c 	.word	0x2000091c

08001e30 <enable_log>:
void enable_log(void) { logEnabled = true; }
 8001e30:	4b01      	ldr	r3, [pc, #4]	; (8001e38 <enable_log+0x8>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
 8001e36:	4770      	bx	lr
 8001e38:	20000b32 	.word	0x20000b32

08001e3c <_Z20debug_flush_internalb>:
void debug_flush_internal(bool forced) {
 8001e3c:	b538      	push	{r3, r4, r5, lr}
    if (debugBufferLength == 0) { return; }  //  Debug buffer is empty, nothing to write.
 8001e3e:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <_Z20debug_flush_internalb+0x48>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	b903      	cbnz	r3, 8001e48 <_Z20debug_flush_internalb+0xc>
}
 8001e46:	bd38      	pop	{r3, r4, r5, pc}
 8001e48:	4602      	mov	r2, r0
	uint16_t outlen = write_all_output((const uint8_t *) debugBuffer, debugBufferLength, forced);
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <_Z20debug_flush_internalb+0x48>)
 8001e4c:	8819      	ldrh	r1, [r3, #0]
 8001e4e:	480e      	ldr	r0, [pc, #56]	; (8001e88 <_Z20debug_flush_internalb+0x4c>)
 8001e50:	f7ff ffb0 	bl	8001db4 <_ZL16write_all_outputPKhtb>
    if (outlen == 0) {
 8001e54:	4604      	mov	r4, r0
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d0f5      	beq.n	8001e46 <_Z20debug_flush_internalb+0xa>
    } else if (outlen >= debugBufferLength) {
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <_Z20debug_flush_internalb+0x48>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	4283      	cmp	r3, r0
 8001e62:	d803      	bhi.n	8001e6c <_Z20debug_flush_internalb+0x30>
        debugBufferLength = 0;
 8001e64:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <_Z20debug_flush_internalb+0x48>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	801a      	strh	r2, [r3, #0]
        return;
 8001e6a:	e7ec      	b.n	8001e46 <_Z20debug_flush_internalb+0xa>
    memcpy(debugBuffer, &debugBuffer[outlen], debugBufferLength - outlen);
 8001e6c:	4806      	ldr	r0, [pc, #24]	; (8001e88 <_Z20debug_flush_internalb+0x4c>)
 8001e6e:	4d05      	ldr	r5, [pc, #20]	; (8001e84 <_Z20debug_flush_internalb+0x48>)
 8001e70:	882a      	ldrh	r2, [r5, #0]
 8001e72:	1b12      	subs	r2, r2, r4
 8001e74:	1901      	adds	r1, r0, r4
 8001e76:	f7ff ff5a 	bl	8001d2e <memcpy>
    debugBufferLength -= outlen;
 8001e7a:	882b      	ldrh	r3, [r5, #0]
 8001e7c:	1b1c      	subs	r4, r3, r4
 8001e7e:	b2a4      	uxth	r4, r4
 8001e80:	802c      	strh	r4, [r5, #0]
 8001e82:	e7e0      	b.n	8001e46 <_Z20debug_flush_internalb+0xa>
 8001e84:	20000b30 	.word	0x20000b30
 8001e88:	2000091c 	.word	0x2000091c

08001e8c <debug_force_flush>:
void debug_force_flush(void) {
 8001e8c:	b510      	push	{r4, lr}
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 8001e8e:	2400      	movs	r4, #0
 8001e90:	2c63      	cmp	r4, #99	; 0x63
 8001e92:	dc08      	bgt.n	8001ea6 <debug_force_flush+0x1a>
        if (debugBufferLength == 0) { return; }  //  No more chunks.
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <debug_force_flush+0x1c>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	b123      	cbz	r3, 8001ea6 <debug_force_flush+0x1a>
        debug_flush_internal(true);
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f7ff ffcd 	bl	8001e3c <_Z20debug_flush_internalb>
    for (int i = 0; i < 100; i++) {  //  Assume 100 or fewer chunks.
 8001ea2:	3401      	adds	r4, #1
 8001ea4:	e7f4      	b.n	8001e90 <debug_force_flush+0x4>
}
 8001ea6:	bd10      	pop	{r4, pc}
 8001ea8:	20000b30 	.word	0x20000b30

08001eac <_Z11debug_printj>:

void debug_print(size_t l) {
 8001eac:	b510      	push	{r4, lr}
 8001eae:	b084      	sub	sp, #16
    #define MAX_INT_LENGTH 10
    char buffer[MAX_INT_LENGTH + 1];
    int size = MAX_INT_LENGTH + 1;
    bool prefixByZero = false;
    int length = 0;
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8001eb0:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <_Z11debug_printj+0x7c>)
    int length = 0;
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	e012      	b.n	8001edc <_Z11debug_printj+0x30>
        char digit = '0' + (char)(l / divisor);
        if (digit > '9') {
            debug_print("(Overflow)");
 8001eb6:	481d      	ldr	r0, [pc, #116]	; (8001f2c <_Z11debug_printj+0x80>)
 8001eb8:	f000 f882 	bl	8001fc0 <debug_print>
 8001ebc:	e032      	b.n	8001f24 <_Z11debug_printj+0x78>
            return;
        }
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
 8001ebe:	290a      	cmp	r1, #10
 8001ec0:	dc04      	bgt.n	8001ecc <_Z11debug_printj+0x20>
                buffer[length++] = digit;
 8001ec2:	ac04      	add	r4, sp, #16
 8001ec4:	440c      	add	r4, r1
 8001ec6:	f804 2c0c 	strb.w	r2, [r4, #-12]
 8001eca:	3101      	adds	r1, #1
            }
        }
        l = l % divisor;
 8001ecc:	fbb0 f2f3 	udiv	r2, r0, r3
 8001ed0:	fb03 0012 	mls	r0, r3, r2, r0
    for(size_t divisor = 1000000000ul; divisor >= 1; divisor = divisor / 10) {
 8001ed4:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <_Z11debug_printj+0x84>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	08db      	lsrs	r3, r3, #3
 8001edc:	b153      	cbz	r3, 8001ef4 <_Z11debug_printj+0x48>
        char digit = '0' + (char)(l / divisor);
 8001ede:	fbb0 f2f3 	udiv	r2, r0, r3
 8001ee2:	3230      	adds	r2, #48	; 0x30
 8001ee4:	b2d2      	uxtb	r2, r2
        if (digit > '9') {
 8001ee6:	2a39      	cmp	r2, #57	; 0x39
 8001ee8:	d8e5      	bhi.n	8001eb6 <_Z11debug_printj+0xa>
        if (digit > '0' || length > 0 || prefixByZero) {
 8001eea:	2a30      	cmp	r2, #48	; 0x30
 8001eec:	d8e7      	bhi.n	8001ebe <_Z11debug_printj+0x12>
 8001eee:	2900      	cmp	r1, #0
 8001ef0:	dce5      	bgt.n	8001ebe <_Z11debug_printj+0x12>
 8001ef2:	e7eb      	b.n	8001ecc <_Z11debug_printj+0x20>
    }
    if (length == 0) { buffer[length++] = '0'; };
 8001ef4:	b929      	cbnz	r1, 8001f02 <_Z11debug_printj+0x56>
 8001ef6:	ab04      	add	r3, sp, #16
 8001ef8:	440b      	add	r3, r1
 8001efa:	2230      	movs	r2, #48	; 0x30
 8001efc:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001f00:	3101      	adds	r1, #1
    if (length < size) buffer[length] = 0;
 8001f02:	290a      	cmp	r1, #10
 8001f04:	dc04      	bgt.n	8001f10 <_Z11debug_printj+0x64>
 8001f06:	ab04      	add	r3, sp, #16
 8001f08:	4419      	add	r1, r3
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f801 3c0c 	strb.w	r3, [r1, #-12]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8001f10:	2300      	movs	r3, #0
 8001f12:	f88d 300e 	strb.w	r3, [sp, #14]

    debug_append(buffer, strlen(buffer));
 8001f16:	a801      	add	r0, sp, #4
 8001f18:	f7ff ff16 	bl	8001d48 <strlen>
 8001f1c:	4601      	mov	r1, r0
 8001f1e:	a801      	add	r0, sp, #4
 8001f20:	f7ff ff66 	bl	8001df0 <_ZL12debug_appendPKcj>
}
 8001f24:	b004      	add	sp, #16
 8001f26:	bd10      	pop	{r4, pc}
 8001f28:	3b9aca00 	.word	0x3b9aca00
 8001f2c:	0800237c 	.word	0x0800237c
 8001f30:	cccccccd 	.word	0xcccccccd

08001f34 <_Z11debug_printi>:

void debug_print(int i) {
 8001f34:	b510      	push	{r4, lr}
    if (i == 0) { debug_append("0", 1); } 
 8001f36:	b128      	cbz	r0, 8001f44 <_Z11debug_printi+0x10>
 8001f38:	4604      	mov	r4, r0
    else if (i >= 0) { debug_print((size_t) i); }
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	db07      	blt.n	8001f4e <_Z11debug_printi+0x1a>
 8001f3e:	f7ff ffb5 	bl	8001eac <_Z11debug_printj>
    else {  // i < 0.
        debug_append("-", 1);
        debug_print((size_t) -i);
    }
}
 8001f42:	bd10      	pop	{r4, pc}
    if (i == 0) { debug_append("0", 1); } 
 8001f44:	2101      	movs	r1, #1
 8001f46:	4806      	ldr	r0, [pc, #24]	; (8001f60 <_Z11debug_printi+0x2c>)
 8001f48:	f7ff ff52 	bl	8001df0 <_ZL12debug_appendPKcj>
 8001f4c:	e7f9      	b.n	8001f42 <_Z11debug_printi+0xe>
        debug_append("-", 1);
 8001f4e:	2101      	movs	r1, #1
 8001f50:	4804      	ldr	r0, [pc, #16]	; (8001f64 <_Z11debug_printi+0x30>)
 8001f52:	f7ff ff4d 	bl	8001df0 <_ZL12debug_appendPKcj>
        debug_print((size_t) -i);
 8001f56:	4260      	negs	r0, r4
 8001f58:	f7ff ffa8 	bl	8001eac <_Z11debug_printj>
}
 8001f5c:	e7f1      	b.n	8001f42 <_Z11debug_printi+0xe>
 8001f5e:	bf00      	nop
 8001f60:	08002374 	.word	0x08002374
 8001f64:	08002378 	.word	0x08002378

08001f68 <debug_println>:
void debug_print(const char *s) {
    if (s[0] == 0) return;
	debug_append(s, strlen(s));
}

void debug_println(const char *s) {
 8001f68:	b508      	push	{r3, lr}
    if (s[0] != 0) { debug_print(s); }
 8001f6a:	7803      	ldrb	r3, [r0, #0]
 8001f6c:	b923      	cbnz	r3, 8001f78 <debug_println+0x10>
    debug_append("\r\n", 2);
 8001f6e:	2102      	movs	r1, #2
 8001f70:	4803      	ldr	r0, [pc, #12]	; (8001f80 <debug_println+0x18>)
 8001f72:	f7ff ff3d 	bl	8001df0 <_ZL12debug_appendPKcj>
}
 8001f76:	bd08      	pop	{r3, pc}
    if (s[0] != 0) { debug_print(s); }
 8001f78:	f000 f822 	bl	8001fc0 <debug_print>
 8001f7c:	e7f7      	b.n	8001f6e <debug_println+0x6>
 8001f7e:	bf00      	nop
 8001f80:	08002388 	.word	0x08002388

08001f84 <_Z13debug_printlni>:

void debug_print(char ch) {
	debug_append(&ch, 1);
}

void debug_println(int i) {
 8001f84:	b508      	push	{r3, lr}
    debug_print(i);
 8001f86:	f7ff ffd5 	bl	8001f34 <_Z11debug_printi>
    debug_append("\r\n", 2);
 8001f8a:	2102      	movs	r1, #2
 8001f8c:	4801      	ldr	r0, [pc, #4]	; (8001f94 <_Z13debug_printlni+0x10>)
 8001f8e:	f7ff ff2f 	bl	8001df0 <_ZL12debug_appendPKcj>
}
 8001f92:	bd08      	pop	{r3, pc}
 8001f94:	08002388 	.word	0x08002388

08001f98 <_ZL14semihost_writemPKhj>:
    if (length == 0) { return 0; }
 8001f98:	b90a      	cbnz	r2, 8001f9e <_ZL14semihost_writemPKhj+0x6>
 8001f9a:	2000      	movs	r0, #0
}
 8001f9c:	4770      	bx	lr
static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
 8001f9e:	b500      	push	{lr}
 8001fa0:	b085      	sub	sp, #20
    args[0] = (uint32_t)fh;
 8001fa2:	9001      	str	r0, [sp, #4]
    args[1] = (uint32_t)buffer;
 8001fa4:	9102      	str	r1, [sp, #8]
    args[2] = (uint32_t)length;
 8001fa6:	9203      	str	r2, [sp, #12]
    return __semihost(SYS_WRITE, args);
 8001fa8:	a901      	add	r1, sp, #4
 8001faa:	2005      	movs	r0, #5
 8001fac:	f7ff fef0 	bl	8001d90 <_ZL10__semihostiPv>
}
 8001fb0:	b005      	add	sp, #20
 8001fb2:	f85d fb04 	ldr.w	pc, [sp], #4

08001fb6 <debug_flush>:
void debug_flush(void) {
 8001fb6:	b508      	push	{r3, lr}
    return debug_flush_internal(false);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f7ff ff3f 	bl	8001e3c <_Z20debug_flush_internalb>
}
 8001fbe:	bd08      	pop	{r3, pc}

08001fc0 <debug_print>:
    if (s[0] == 0) return;
 8001fc0:	7803      	ldrb	r3, [r0, #0]
 8001fc2:	b903      	cbnz	r3, 8001fc6 <debug_print+0x6>
 8001fc4:	4770      	bx	lr
void debug_print(const char *s) {
 8001fc6:	b510      	push	{r4, lr}
 8001fc8:	4604      	mov	r4, r0
	debug_append(s, strlen(s));
 8001fca:	f7ff febd 	bl	8001d48 <strlen>
 8001fce:	4601      	mov	r1, r0
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff ff0d 	bl	8001df0 <_ZL12debug_appendPKcj>
}
 8001fd6:	bd10      	pop	{r4, pc}

08001fd8 <debug_print_unsigned>:
    debug_print(f);
    debug_append("\r\n", 2);
}

void debug_print_int(int i) { debug_print(i); }
void debug_print_unsigned(size_t l) { debug_print(l); }
 8001fd8:	b508      	push	{r3, lr}
 8001fda:	f7ff ff67 	bl	8001eac <_Z11debug_printj>
 8001fde:	bd08      	pop	{r3, pc}

08001fe0 <debug_printhex>:
void debug_print_char(char ch) { debug_print(ch); }
void debug_print_float(float f) { debug_print(f); }

void debug_printhex(uint8_t v) {
 8001fe0:	b510      	push	{r4, lr}
 8001fe2:	b082      	sub	sp, #8
    #define MAX_BYTE_LENGTH 2
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 8001fe4:	2310      	movs	r3, #16
    int length = 0;
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	e005      	b.n	8001ff6 <debug_printhex+0x16>
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
                buffer[length++] = digit;
            }
        }
        v = v % divisor;
 8001fea:	fbb0 f1f3 	udiv	r1, r0, r3
 8001fee:	fb03 0011 	mls	r0, r3, r1, r0
 8001ff2:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	b18b      	cbz	r3, 800201c <debug_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
 8001ff8:	fbb0 f1f3 	udiv	r1, r0, r3
 8001ffc:	b249      	sxtb	r1, r1
 8001ffe:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8002002:	b2e4      	uxtb	r4, r4
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
 8002004:	2c39      	cmp	r4, #57	; 0x39
 8002006:	d901      	bls.n	800200c <debug_printhex+0x2c>
 8002008:	3157      	adds	r1, #87	; 0x57
 800200a:	b2cc      	uxtb	r4, r1
            if (length < size) {
 800200c:	2a02      	cmp	r2, #2
 800200e:	dcec      	bgt.n	8001fea <debug_printhex+0xa>
                buffer[length++] = digit;
 8002010:	a902      	add	r1, sp, #8
 8002012:	4411      	add	r1, r2
 8002014:	f801 4c04 	strb.w	r4, [r1, #-4]
 8002018:	3201      	adds	r2, #1
 800201a:	e7e6      	b.n	8001fea <debug_printhex+0xa>
    }
    if (length == 0) { buffer[length++] = '0'; };
 800201c:	b92a      	cbnz	r2, 800202a <debug_printhex+0x4a>
 800201e:	ab02      	add	r3, sp, #8
 8002020:	4413      	add	r3, r2
 8002022:	2130      	movs	r1, #48	; 0x30
 8002024:	f803 1c04 	strb.w	r1, [r3, #-4]
 8002028:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
 800202a:	2a02      	cmp	r2, #2
 800202c:	dc04      	bgt.n	8002038 <debug_printhex+0x58>
 800202e:	ab02      	add	r3, sp, #8
 8002030:	441a      	add	r2, r3
 8002032:	2300      	movs	r3, #0
 8002034:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
 8002038:	2300      	movs	r3, #0
 800203a:	f88d 3006 	strb.w	r3, [sp, #6]

    debug_append(buffer, strlen(buffer));
 800203e:	a801      	add	r0, sp, #4
 8002040:	f7ff fe82 	bl	8001d48 <strlen>
 8002044:	4601      	mov	r1, r0
 8002046:	a801      	add	r0, sp, #4
 8002048:	f7ff fed2 	bl	8001df0 <_ZL12debug_appendPKcj>
}
 800204c:	b002      	add	sp, #8
 800204e:	bd10      	pop	{r4, pc}

08002050 <debug_printhex_unsigned>:

void debug_printhex_unsigned(size_t l) {
 8002050:	b538      	push	{r3, r4, r5, lr}
 8002052:	4605      	mov	r5, r0
    //  Write an unsigned int in hexadecimal to the buffered debug log.
    for (int i = sizeof(l) - 1; i >= 0; i--) {
 8002054:	2403      	movs	r4, #3
 8002056:	2c00      	cmp	r4, #0
 8002058:	db07      	blt.n	800206a <debug_printhex_unsigned+0x1a>
        uint8_t b = 0xff & (l >> (8 * i));
 800205a:	00e0      	lsls	r0, r4, #3
 800205c:	fa25 f000 	lsr.w	r0, r5, r0
        debug_printhex(b);
 8002060:	b2c0      	uxtb	r0, r0
 8002062:	f7ff ffbd 	bl	8001fe0 <debug_printhex>
    for (int i = sizeof(l) - 1; i >= 0; i--) {
 8002066:	3c01      	subs	r4, #1
 8002068:	e7f5      	b.n	8002056 <debug_printhex_unsigned+0x6>
    }
}
 800206a:	bd38      	pop	{r3, r4, r5, pc}

0800206c <platform_setup>:
extern "C" void target_panic(int statusCode); ////

//  Debugging is off by default.  Developer must switch it on with enable_debug().
static bool debugEnabled = false;

void platform_setup(void) {
 800206c:	b508      	push	{r3, lr}
    //  Initialise the STM32 platform. At startup, the onboard LED will blink on-off-on-off-on and stays on.
	//  If LED blinks on-off-on-off and stays off, then debug mode is enabled and no debugger is connected.
	rcc_clock_setup_in_hse_8mhz_out_72mhz();
 800206e:	f7ff faaf 	bl	80015d0 <rcc_clock_setup_in_hse_8mhz_out_72mhz>
	led_setup();
 8002072:	f000 f82b 	bl	80020cc <led_setup>
	if (debugEnabled) {
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <platform_setup+0x44>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b913      	cbnz	r3, 8002082 <platform_setup+0x16>
  		debug_println("----platform_setup");
		led_on();
	}

	////TODO
	test_codal();
 800207c:	f7ff f898 	bl	80011b0 <test_codal>
}
 8002080:	bd08      	pop	{r3, pc}
		led_on(); led_wait();
 8002082:	f000 f833 	bl	80020ec <led_on>
 8002086:	f000 f845 	bl	8002114 <led_wait>
		led_off(); led_wait();
 800208a:	f000 f839 	bl	8002100 <led_off>
 800208e:	f000 f841 	bl	8002114 <led_wait>
		led_on(); led_wait();
 8002092:	f000 f82b 	bl	80020ec <led_on>
 8002096:	f000 f83d 	bl	8002114 <led_wait>
		led_off(); led_wait();
 800209a:	f000 f831 	bl	8002100 <led_off>
 800209e:	f000 f839 	bl	8002114 <led_wait>
  		debug_println("----platform_setup");
 80020a2:	4804      	ldr	r0, [pc, #16]	; (80020b4 <platform_setup+0x48>)
 80020a4:	f7ff ff60 	bl	8001f68 <debug_println>
		led_on();
 80020a8:	f000 f820 	bl	80020ec <led_on>
 80020ac:	e7e6      	b.n	800207c <platform_setup+0x10>
 80020ae:	bf00      	nop
 80020b0:	20000b44 	.word	0x20000b44
 80020b4:	0800238c 	.word	0x0800238c

080020b8 <enable_debug>:

void enable_debug(void) {
 80020b8:	b508      	push	{r3, lr}
	//  Enable ARM Semihosting for displaying debug messages.
	debugEnabled = true;
 80020ba:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <enable_debug+0x10>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
	enable_log();
 80020c0:	f7ff feb6 	bl	8001e30 <enable_log>
}
 80020c4:	bd08      	pop	{r3, pc}
 80020c6:	bf00      	nop
 80020c8:	20000b44 	.word	0x20000b44

080020cc <led_setup>:
//  Blink code from https://github.com/Apress/Beg-STM32-Devel-FreeRTOS-libopencm3-GCC
#include <libopencm3/stm32/rcc.h>
#include <libopencm3/stm32/gpio.h>
#include "bluepill.h"

void led_setup(void) {
 80020cc:	b508      	push	{r3, lr}
	//  Set up Blue Pill LED GPIO.
	//  Enable GPIOC clock.
	rcc_periph_clock_enable(RCC_GPIOC);
 80020ce:	f44f 7041 	mov.w	r0, #772	; 0x304
 80020d2:	f7ff fc26 	bl	8001922 <rcc_periph_clock_enable>
	//  Set GPIO13 (in GPIO port C) to 'output push-pull'.
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 80020d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020da:	2200      	movs	r2, #0
 80020dc:	2102      	movs	r1, #2
 80020de:	4802      	ldr	r0, [pc, #8]	; (80020e8 <led_setup+0x1c>)
 80020e0:	f7ff fbe0 	bl	80018a4 <gpio_set_mode>
}
 80020e4:	bd08      	pop	{r3, pc}
 80020e6:	bf00      	nop
 80020e8:	40011000 	.word	0x40011000

080020ec <led_on>:

void led_on(void) {
 80020ec:	b508      	push	{r3, lr}
	//  Switch Blue Pill LED on.
	gpio_clear(GPIOC, GPIO13);
 80020ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020f2:	4802      	ldr	r0, [pc, #8]	; (80020fc <led_on+0x10>)
 80020f4:	f7ff fc0e 	bl	8001914 <gpio_clear>
}
 80020f8:	bd08      	pop	{r3, pc}
 80020fa:	bf00      	nop
 80020fc:	40011000 	.word	0x40011000

08002100 <led_off>:

void led_off(void) {
 8002100:	b508      	push	{r3, lr}
	//  Switch Blue Pill LED off.
	gpio_set(GPIOC, GPIO13);
 8002102:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002106:	4802      	ldr	r0, [pc, #8]	; (8002110 <led_off+0x10>)
 8002108:	f7ff fc02 	bl	8001910 <gpio_set>
}
 800210c:	bd08      	pop	{r3, pc}
 800210e:	bf00      	nop
 8002110:	40011000 	.word	0x40011000

08002114 <led_wait>:
	//  Toggle Blue Pill LED.
	gpio_toggle(GPIOC, GPIO13);
}

void led_wait(void) {
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
 8002114:	2300      	movs	r3, #0
 8002116:	4a03      	ldr	r2, [pc, #12]	; (8002124 <led_wait+0x10>)
 8002118:	4293      	cmp	r3, r2
 800211a:	dc02      	bgt.n	8002122 <led_wait+0xe>
		__asm__("nop");
 800211c:	bf00      	nop
	for (int i = 0; i < 1500000; i++)	/* Wait a bit. */
 800211e:	3301      	adds	r3, #1
 8002120:	e7f9      	b.n	8002116 <led_wait+0x2>
}
 8002122:	4770      	bx	lr
 8002124:	0016e35f 	.word	0x0016e35f

08002128 <_ZL25custom_rtc_awake_from_off7rcc_osc>:
select the clock source, clear the RTC registers and enable the RTC.
@param[in] clock_source ::rcc_osc. RTC clock source. Only the values HSE, LSE
    and LSI are permitted.
*/
static void custom_rtc_awake_from_off(enum rcc_osc clock_source)
{
 8002128:	b538      	push	{r3, r4, r5, lr}
 800212a:	4604      	mov	r4, r0
	uint32_t reg32;

	/* Enable power and backup interface clocks. */
	rcc_periph_clock_enable(RCC_PWR);
 800212c:	f44f 7067 	mov.w	r0, #924	; 0x39c
 8002130:	f7ff fbf7 	bl	8001922 <rcc_periph_clock_enable>
	rcc_periph_clock_enable(RCC_BKP);
 8002134:	f240 309b 	movw	r0, #923	; 0x39b
 8002138:	f7ff fbf3 	bl	8001922 <rcc_periph_clock_enable>

	/* Enable access to the backup registers and the RTC. */
	pwr_disable_backup_domain_write_protect();
 800213c:	f7ff fb60 	bl	8001800 <pwr_disable_backup_domain_write_protect>

	/* Set the clock source */
	rcc_set_rtc_clock_source(clock_source);
 8002140:	4620      	mov	r0, r4
 8002142:	f7ff f9cd 	bl	80014e0 <rcc_set_rtc_clock_source>

	/* Clear the RTC Control Register */
	RTC_CRH = 0;
 8002146:	2400      	movs	r4, #0
 8002148:	4b10      	ldr	r3, [pc, #64]	; (800218c <_ZL25custom_rtc_awake_from_off7rcc_osc+0x64>)
 800214a:	601c      	str	r4, [r3, #0]
	RTC_CRL = 0;
 800214c:	4d10      	ldr	r5, [pc, #64]	; (8002190 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x68>)
 800214e:	602c      	str	r4, [r5, #0]

	/* Enable the RTC. */
	rcc_enable_rtc_clock();
 8002150:	f7ff f9be 	bl	80014d0 <rcc_enable_rtc_clock>

	/* Clear the Registers */
	rtc_enter_config_mode();
 8002154:	f7ff fa84 	bl	8001660 <rtc_enter_config_mode>
	RTC_PRLH = 0;
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x6c>)
 800215a:	601c      	str	r4, [r3, #0]
	RTC_PRLL = 0;
 800215c:	3304      	adds	r3, #4
 800215e:	601c      	str	r4, [r3, #0]
	RTC_CNTH = 0;
 8002160:	330c      	adds	r3, #12
 8002162:	601c      	str	r4, [r3, #0]
	RTC_CNTL = 0;
 8002164:	3304      	adds	r3, #4
 8002166:	601c      	str	r4, [r3, #0]
	RTC_ALRH = 0xFFFF;
 8002168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800216c:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x70>)
 800216e:	6013      	str	r3, [r2, #0]
	RTC_ALRL = 0xFFFF;
 8002170:	3204      	adds	r2, #4
 8002172:	6013      	str	r3, [r2, #0]
	rtc_exit_config_mode();
 8002174:	f7ff fa86 	bl	8001684 <rtc_exit_config_mode>

	/* Wait for the RSF bit in RTC_CRL to be set by hardware. */
	RTC_CRL &= ~RTC_CRL_RSF;
 8002178:	682b      	ldr	r3, [r5, #0]
 800217a:	f023 0308 	bic.w	r3, r3, #8
 800217e:	602b      	str	r3, [r5, #0]
	while ((reg32 = (RTC_CRL & RTC_CRL_RSF)) == 0);
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x68>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f013 0f08 	tst.w	r3, #8
 8002188:	d0fa      	beq.n	8002180 <_ZL25custom_rtc_awake_from_off7rcc_osc+0x58>
}
 800218a:	bd38      	pop	{r3, r4, r5, pc}
 800218c:	40002800 	.word	0x40002800
 8002190:	40002804 	.word	0x40002804
 8002194:	40002808 	.word	0x40002808
 8002198:	40002820 	.word	0x40002820

0800219c <_ZL9rtc_setupv>:
static void rtc_setup(void) {
 800219c:	b508      	push	{r3, lr}
	rcc_enable_rtc_clock();
 800219e:	f7ff f997 	bl	80014d0 <rcc_enable_rtc_clock>
	rtc_interrupt_disable(RTC_SEC);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f7ff fada 	bl	800175c <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_ALR);
 80021a8:	2001      	movs	r0, #1
 80021aa:	f7ff fad7 	bl	800175c <rtc_interrupt_disable>
	rtc_interrupt_disable(RTC_OW);
 80021ae:	2002      	movs	r0, #2
 80021b0:	f7ff fad4 	bl	800175c <rtc_interrupt_disable>
	debug_println("rtc awake..."); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 80021b4:	481b      	ldr	r0, [pc, #108]	; (8002224 <_ZL9rtc_setupv+0x88>)
 80021b6:	f7ff fed7 	bl	8001f68 <debug_println>
 80021ba:	f7ff fefc 	bl	8001fb6 <debug_flush>
	custom_rtc_awake_from_off(clock_source);  //  This will enable RTC.
 80021be:	2005      	movs	r0, #5
 80021c0:	f7ff ffb2 	bl	8002128 <_ZL25custom_rtc_awake_from_off7rcc_osc>
	rtc_set_prescale_val(prescale);
 80021c4:	2020      	movs	r0, #32
 80021c6:	f7ff fa7f 	bl	80016c8 <rtc_set_prescale_val>
	debug_println("rtc awake ok"); debug_flush(); //  rtc_awake_from_off() fails on qemu.
 80021ca:	4817      	ldr	r0, [pc, #92]	; (8002228 <_ZL9rtc_setupv+0x8c>)
 80021cc:	f7ff fecc 	bl	8001f68 <debug_println>
 80021d0:	f7ff fef1 	bl	8001fb6 <debug_flush>
	rtc_set_counter_val(0);              //  Start counting millisecond ticks from 0.
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7ff fa91 	bl	80016fc <rtc_set_counter_val>
	rtc_set_alarm_time((uint32_t) -1);   //  Reset alarm to -1 or 0xffffffff so we don't trigger now.
 80021da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021de:	f7ff fa63 	bl	80016a8 <rtc_set_alarm_time>
	exti_set_trigger(EXTI17, EXTI_TRIGGER_RISING);  //  Enable alarm wakeup via the interrupt.
 80021e2:	2100      	movs	r1, #0
 80021e4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80021e8:	f7ff fb12 	bl	8001810 <exti_set_trigger>
	exti_enable_request(EXTI17);
 80021ec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80021f0:	f7ff fb34 	bl	800185c <exti_enable_request>
	nvic_enable_irq(NVIC_RTC_IRQ);        //  Enable RTC tick interrupt processing.
 80021f4:	2003      	movs	r0, #3
 80021f6:	f7ff fba2 	bl	800193e <nvic_enable_irq>
	nvic_enable_irq(NVIC_RTC_ALARM_IRQ);  //  Enable RTC alarm wakeup interrupt processing.
 80021fa:	2029      	movs	r0, #41	; 0x29
 80021fc:	f7ff fb9f 	bl	800193e <nvic_enable_irq>
 8002200:	b672      	cpsid	i
	rtc_clear_flag(RTC_SEC);
 8002202:	2000      	movs	r0, #0
 8002204:	f7ff faca 	bl	800179c <rtc_clear_flag>
	rtc_clear_flag(RTC_ALR);
 8002208:	2001      	movs	r0, #1
 800220a:	f7ff fac7 	bl	800179c <rtc_clear_flag>
	rtc_clear_flag(RTC_OW);
 800220e:	2002      	movs	r0, #2
 8002210:	f7ff fac4 	bl	800179c <rtc_clear_flag>
	rtc_interrupt_enable(RTC_SEC);  //  Allow RTC to generate tick interrupts.
 8002214:	2000      	movs	r0, #0
 8002216:	f7ff fa81 	bl	800171c <rtc_interrupt_enable>
	rtc_interrupt_enable(RTC_ALR);  //  Allow RTC to generate alarm interrupts.
 800221a:	2001      	movs	r0, #1
 800221c:	f7ff fa7e 	bl	800171c <rtc_interrupt_enable>
	__asm__("CPSIE I\n");
 8002220:	b662      	cpsie	i
}
 8002222:	bd08      	pop	{r3, pc}
 8002224:	080023a0 	.word	0x080023a0
 8002228:	080023b0 	.word	0x080023b0

0800222c <platform_start_timer>:
void platform_start_timer(void (*tickFunc0)(void), void (*alarmFunc0)(void)) {
 800222c:	b508      	push	{r3, lr}
  	tickFunc = tickFunc0;    //  Allow tickFunc to be modified at every call to platform_start_timer().
 800222e:	4b08      	ldr	r3, [pc, #32]	; (8002250 <platform_start_timer+0x24>)
 8002230:	6018      	str	r0, [r3, #0]
  	alarmFunc = alarmFunc0;  //  Allow alarmFunc to be modified at every call to platform_start_timer().
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <platform_start_timer+0x28>)
 8002234:	6019      	str	r1, [r3, #0]
	if (timerStarted) { return; }
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <platform_start_timer+0x2c>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	b103      	cbz	r3, 800223e <platform_start_timer+0x12>
}
 800223c:	bd08      	pop	{r3, pc}
	timerStarted = true;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <platform_start_timer+0x2c>)
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
	debug_println("platform_start_timer"); ////
 8002244:	4805      	ldr	r0, [pc, #20]	; (800225c <platform_start_timer+0x30>)
 8002246:	f7ff fe8f 	bl	8001f68 <debug_println>
	rtc_setup();
 800224a:	f7ff ffa7 	bl	800219c <_ZL9rtc_setupv>
 800224e:	e7f5      	b.n	800223c <platform_start_timer+0x10>
 8002250:	20000b38 	.word	0x20000b38
 8002254:	20000b3c 	.word	0x20000b3c
 8002258:	20000b45 	.word	0x20000b45
 800225c:	080023c8 	.word	0x080023c8

08002260 <platform_set_alarm>:
void platform_set_alarm(uint32_t millisec) {
 8002260:	b510      	push	{r4, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	4604      	mov	r4, r0
	if (!alarmFunc) { debug_print("alm? "); } ////
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <platform_set_alarm+0x2c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b153      	cbz	r3, 8002282 <platform_set_alarm+0x22>
	volatile uint32_t now = rtc_get_counter_val();
 800226c:	f7ff fa3c 	bl	80016e8 <rtc_get_counter_val>
 8002270:	9001      	str	r0, [sp, #4]
	pwr_disable_backup_domain_write_protect();
 8002272:	f7ff fac5 	bl	8001800 <pwr_disable_backup_domain_write_protect>
	rtc_set_alarm_time(now + millisec);
 8002276:	9801      	ldr	r0, [sp, #4]
 8002278:	4420      	add	r0, r4
 800227a:	f7ff fa15 	bl	80016a8 <rtc_set_alarm_time>
}
 800227e:	b002      	add	sp, #8
 8002280:	bd10      	pop	{r4, pc}
	if (!alarmFunc) { debug_print("alm? "); } ////
 8002282:	4803      	ldr	r0, [pc, #12]	; (8002290 <platform_set_alarm+0x30>)
 8002284:	f7ff fe9c 	bl	8001fc0 <debug_print>
 8002288:	e7f0      	b.n	800226c <platform_set_alarm+0xc>
 800228a:	bf00      	nop
 800228c:	20000b3c 	.word	0x20000b3c
 8002290:	080023c0 	.word	0x080023c0

08002294 <platform_alarm_count>:
	return alarmCount;  //  For testing whether alarm ISR was called.
 8002294:	4b01      	ldr	r3, [pc, #4]	; (800229c <platform_alarm_count+0x8>)
 8002296:	6818      	ldr	r0, [r3, #0]
}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20000b34 	.word	0x20000b34

080022a0 <__cxa_pure_virtual>:
}

//  These functions must be located here or the compiler will pull in the standard C library versions.
//  From https://github.com/lancaster-university/codal-arduino-uno/blob/master/source/codal_target_hal.cpp

extern "C" void __cxa_pure_virtual() {
 80022a0:	b508      	push	{r3, lr}
	//  Disable exceptions for abstract classes. See https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/abstract_classes.html
    target_panic(1000);
 80022a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022a6:	f7fe ff6f 	bl	8001188 <target_panic>
}
 80022aa:	bd08      	pop	{r3, pc}

080022ac <_Znwj>:

// define new and delete.
extern "C" void *operator new(size_t objsize) {
 80022ac:	b508      	push	{r3, lr}
    return malloc(objsize);
 80022ae:	f006 f83b 	bl	8008328 <device_malloc>
}
 80022b2:	bd08      	pop	{r3, pc}

080022b4 <_ZdlPv>:

extern "C" void operator delete(void* obj) {
 80022b4:	b508      	push	{r3, lr}
    free(obj);
 80022b6:	f006 f861 	bl	800837c <device_free>
}
 80022ba:	bd08      	pop	{r3, pc}

080022bc <millis>:
volatile uint32_t millis(void) {
 80022bc:	b508      	push	{r3, lr}
	return rtc_get_counter_val();  //  More accurate, uses hardware counters.
 80022be:	f7ff fa13 	bl	80016e8 <rtc_get_counter_val>
}
 80022c2:	bd08      	pop	{r3, pc}

080022c4 <boot_target_set_restart_callback>:
    return &st_usbfs_v1_usb_driver;
}

static restart_callback_type *restart_callback_func = NULL;

void boot_target_set_restart_callback(restart_callback_type *func) {
 80022c4:	b510      	push	{r4, lr}
 80022c6:	4604      	mov	r4, r0
    //  Call this function when we need to restart.  Used in Application Mode only.
    debug_print("set restart callback "); debug_printhex_unsigned((size_t) func); debug_println("");
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <boot_target_set_restart_callback+0x18>)
 80022ca:	f7ff fe79 	bl	8001fc0 <debug_print>
 80022ce:	4620      	mov	r0, r4
 80022d0:	f7ff febe 	bl	8002050 <debug_printhex_unsigned>
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <boot_target_set_restart_callback+0x1c>)
 80022d6:	f7ff fe47 	bl	8001f68 <debug_println>
    restart_callback_func = func;
}
 80022da:	bd10      	pop	{r4, pc}
 80022dc:	080023e0 	.word	0x080023e0
 80022e0:	0800233c 	.word	0x0800233c

080022e4 <bootloader_set_restart_callback>:
volatile int bootloader_status(void) {
    //  Return non-zero if we are receiving USB requests now.
    return get_usb_status();
}

int bootloader_set_restart_callback(restart_callback_type *func) {
 80022e4:	b508      	push	{r3, lr}
    //  Call this function when we need to restart.
    boot_target_set_restart_callback(func);
 80022e6:	f7ff ffed 	bl	80022c4 <boot_target_set_restart_callback>
    return 0;
}
 80022ea:	2000      	movs	r0, #0
 80022ec:	bd08      	pop	{r3, pc}
 80022ee:	0000      	movs	r0, r0
 80022f0:	00203f61 	.word	0x00203f61
 80022f4:	00207b75 	.word	0x00207b75
 80022f8:	0000207d 	.word	0x0000207d
 80022fc:	2a2a2a2a 	.word	0x2a2a2a2a
 8002300:	7261742a 	.word	0x7261742a
 8002304:	5f746567 	.word	0x5f746567
 8002308:	696e6170 	.word	0x696e6170
 800230c:	00002063 	.word	0x00002063
 8002310:	3c207477 	.word	0x3c207477
 8002314:	00000000 	.word	0x00000000
 8002318:	0000203e 	.word	0x0000203e
 800231c:	70616568 	.word	0x70616568
 8002320:	61747320 	.word	0x61747320
 8002324:	203a7472 	.word	0x203a7472
 8002328:	00000000 	.word	0x00000000
 800232c:	6e65202c 	.word	0x6e65202c
 8002330:	00203a64 	.word	0x00203a64
 8002334:	6973202c 	.word	0x6973202c
 8002338:	203a657a 	.word	0x203a657a
 800233c:	00000000 	.word	0x00000000
 8002340:	2c424b20 	.word	0x2c424b20
 8002344:	61747320 	.word	0x61747320
 8002348:	75206b63 	.word	0x75206b63
 800234c:	3a646573 	.word	0x3a646573
 8002350:	00000020 	.word	0x00000020
 8002354:	00424b20 	.word	0x00424b20
 8002358:	202a2a2a 	.word	0x202a2a2a
 800235c:	6f636f63 	.word	0x6f636f63
 8002360:	6120736f 	.word	0x6120736f
 8002364:	72657373 	.word	0x72657373
 8002368:	61662074 	.word	0x61662074
 800236c:	64656c69 	.word	0x64656c69
 8002370:	00000020 	.word	0x00000020
 8002374:	00000030 	.word	0x00000030
 8002378:	0000002d 	.word	0x0000002d
 800237c:	65764f28 	.word	0x65764f28
 8002380:	6f6c6672 	.word	0x6f6c6672
 8002384:	00002977 	.word	0x00002977
 8002388:	00000a0d 	.word	0x00000a0d
 800238c:	2d2d2d2d 	.word	0x2d2d2d2d
 8002390:	74616c70 	.word	0x74616c70
 8002394:	6d726f66 	.word	0x6d726f66
 8002398:	7465735f 	.word	0x7465735f
 800239c:	00007075 	.word	0x00007075
 80023a0:	20637472 	.word	0x20637472
 80023a4:	6b617761 	.word	0x6b617761
 80023a8:	2e2e2e65 	.word	0x2e2e2e65
 80023ac:	00000000 	.word	0x00000000
 80023b0:	20637472 	.word	0x20637472
 80023b4:	6b617761 	.word	0x6b617761
 80023b8:	6b6f2065 	.word	0x6b6f2065
 80023bc:	00000000 	.word	0x00000000
 80023c0:	3f6d6c61 	.word	0x3f6d6c61
 80023c4:	00000020 	.word	0x00000020
 80023c8:	74616c70 	.word	0x74616c70
 80023cc:	6d726f66 	.word	0x6d726f66
 80023d0:	6174735f 	.word	0x6174735f
 80023d4:	745f7472 	.word	0x745f7472
 80023d8:	72656d69 	.word	0x72656d69
 80023dc:	00000000 	.word	0x00000000
 80023e0:	20746573 	.word	0x20746573
 80023e4:	74736572 	.word	0x74736572
 80023e8:	20747261 	.word	0x20747261
 80023ec:	6c6c6163 	.word	0x6c6c6163
 80023f0:	6b636162 	.word	0x6b636162
 80023f4:	00000020 	.word	0x00000020
 80023f8:	20707061 	.word	0x20707061
 80023fc:	73697865 	.word	0x73697865
 8002400:	00007374 	.word	0x00007374
 8002404:	20707061 	.word	0x20707061
 8002408:	7373696d 	.word	0x7373696d
 800240c:	20676e69 	.word	0x20676e69
 8002410:	00000000 	.word	0x00000000
 8002414:	00203d20 	.word	0x00203d20

Disassembly of section .text:

08007800 <application_start>:
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
        for(;;) {}
    }
}

extern "C" void application_start(void) {
 8007800:	b510      	push	{r4, lr}
	//  application_start() is always located at a fixed address (_text) so we can change the application easily.
	funcp_t *fp;

	//  Copy Application data section from ROM to RAM.
	volatile uint32_t *src = &_data_loadaddr;
	volatile uint32_t *dest = &_data;
 8007802:	4b17      	ldr	r3, [pc, #92]	; (8007860 <application_start+0x60>)
	volatile uint32_t *src = &_data_loadaddr;
 8007804:	4917      	ldr	r1, [pc, #92]	; (8007864 <application_start+0x64>)
	while (dest < &_edata) {
 8007806:	4a18      	ldr	r2, [pc, #96]	; (8007868 <application_start+0x68>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d204      	bcs.n	8007816 <application_start+0x16>
		*dest = *src;
 800780c:	f851 2b04 	ldr.w	r2, [r1], #4
 8007810:	f843 2b04 	str.w	r2, [r3], #4
	while (dest < &_edata) {
 8007814:	e7f7      	b.n	8007806 <application_start+0x6>
		src = src + 1;
		dest = dest + 1;
	}

	//  Init variables in Application BSS section to null.
	while (dest < &_ebss) { *dest++ = 0; }
 8007816:	4a15      	ldr	r2, [pc, #84]	; (800786c <application_start+0x6c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d203      	bcs.n	8007824 <application_start+0x24>
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	3304      	adds	r3, #4
 8007822:	e7f8      	b.n	8007816 <application_start+0x16>

	//  Call any init functions here.
	pre_main();
 8007824:	f001 f9ca 	bl	8008bbc <_ZL8pre_mainv>
	
	//  Call C++ constructors for Application.
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8007828:	4c11      	ldr	r4, [pc, #68]	; (8007870 <application_start+0x70>)
 800782a:	4b12      	ldr	r3, [pc, #72]	; (8007874 <application_start+0x74>)
 800782c:	429c      	cmp	r4, r3
 800782e:	d203      	bcs.n	8007838 <application_start+0x38>
		(*fp)();
 8007830:	f854 3b04 	ldr.w	r3, [r4], #4
 8007834:	4798      	blx	r3
	for (fp = &__preinit_array_start; fp < &__preinit_array_end; fp++) {
 8007836:	e7f8      	b.n	800782a <application_start+0x2a>
	}
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8007838:	4c0f      	ldr	r4, [pc, #60]	; (8007878 <application_start+0x78>)
 800783a:	4b10      	ldr	r3, [pc, #64]	; (800787c <application_start+0x7c>)
 800783c:	429c      	cmp	r4, r3
 800783e:	d203      	bcs.n	8007848 <application_start+0x48>
		(*fp)();
 8007840:	f854 3b04 	ldr.w	r3, [r4], #4
 8007844:	4798      	blx	r3
	for (fp = &__init_array_start; fp < &__init_array_end; fp++) {
 8007846:	e7f8      	b.n	800783a <application_start+0x3a>
	}

	//  Call the application's entry point.
	main();
 8007848:	f000 f81e 	bl	8007888 <main>

	//  Call C++ destructors.  Not used because we never return from main().
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 800784c:	4c0c      	ldr	r4, [pc, #48]	; (8007880 <application_start+0x80>)
 800784e:	4b0d      	ldr	r3, [pc, #52]	; (8007884 <application_start+0x84>)
 8007850:	429c      	cmp	r4, r3
 8007852:	d203      	bcs.n	800785c <application_start+0x5c>
		(*fp)();
 8007854:	f854 3b04 	ldr.w	r3, [r4], #4
 8007858:	4798      	blx	r3
	for (fp = &__fini_array_start; fp < &__fini_array_end; fp++) {
 800785a:	e7f8      	b.n	800784e <application_start+0x4e>
	}
}
 800785c:	bd10      	pop	{r4, pc}
 800785e:	bf00      	nop
 8007860:	20001800 	.word	0x20001800
 8007864:	0800b414 	.word	0x0800b414
 8007868:	20001808 	.word	0x20001808
 800786c:	20002a18 	.word	0x20002a18
 8007870:	0800b400 	.word	0x0800b400
 8007874:	0800b400 	.word	0x0800b400
 8007878:	0800b400 	.word	0x0800b400
 800787c:	0800b414 	.word	0x0800b414
 8007880:	0800b414 	.word	0x0800b414
 8007884:	0800b414 	.word	0x0800b414

08007888 <main>:
static void debug_dump(codal::STM32BluePill& bluepill, const char *msg);

//  Blue Pill constructor will generate debug messages, make sure that the target has been initialised.
STM32BluePill bluepill;

int main() {
 8007888:	b508      	push	{r3, lr}
    bluepill.init();
 800788a:	4c03      	ldr	r4, [pc, #12]	; (8007898 <main+0x10>)
 800788c:	4620      	mov	r0, r4
 800788e:	f001 fa9f 	bl	8008dd0 <_ZN5codal13STM32BluePill4initEv>
    Blink_main(bluepill);
 8007892:	4620      	mov	r0, r4
 8007894:	f000 f85c 	bl	8007950 <_Z10Blink_mainRN5codal13STM32BluePillE>
 8007898:	20001808 	.word	0x20001808

0800789c <_ZN5codal14CodalComponent4initEv>:

        /**
          * Implement this function to receive a function call after the devices'
          * device model has been instantiated.
          */
        virtual int init() { return DEVICE_NOT_SUPPORTED; }
 800789c:	4800      	ldr	r0, [pc, #0]	; (80078a0 <_ZN5codal14CodalComponent4initEv+0x4>)
 800789e:	4770      	bx	lr
 80078a0:	fffffc16 	.word	0xfffffc16

080078a4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>:

        //  At t = 30 seconds, device should wakeup by alarm and restart as though t = 0.
    }
}

static void debug_dump(codal::STM32BluePill& bluepill, const char *msg) {
 80078a4:	b508      	push	{r3, lr}
    debug_print(msg);
 80078a6:	4608      	mov	r0, r1
 80078a8:	f7fa fb8a 	bl	8001fc0 <debug_print>
    debug_print(" t "); debug_print((size_t) (millis() / 1000)); 
 80078ac:	480a      	ldr	r0, [pc, #40]	; (80078d8 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc+0x34>)
 80078ae:	f7fa fb87 	bl	8001fc0 <debug_print>
 80078b2:	f7fa fd03 	bl	80022bc <millis>
 80078b6:	4b09      	ldr	r3, [pc, #36]	; (80078dc <_ZL10debug_dumpRN5codal13STM32BluePillEPKc+0x38>)
 80078b8:	fba3 3000 	umull	r3, r0, r3, r0
 80078bc:	0980      	lsrs	r0, r0, #6
 80078be:	f7fa faf5 	bl	8001eac <_Z11debug_printj>
    // debug_print(", ms "); debug_print((size_t) bluepill.timer.getTime()); 
    // debug_print(", us "); debug_print((size_t) bluepill.timer.getTimeUs()); 
    debug_print(", alm "); debug_print((size_t) platform_alarm_count()); 
 80078c2:	4807      	ldr	r0, [pc, #28]	; (80078e0 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc+0x3c>)
 80078c4:	f7fa fb7c 	bl	8001fc0 <debug_print>
 80078c8:	f7fa fce4 	bl	8002294 <platform_alarm_count>
 80078cc:	f7fa faee 	bl	8001eac <_Z11debug_printj>
    // debug_print(", tick "); debug_print((size_t) platform_tick_count()); 
    debug_println(""); 
 80078d0:	4804      	ldr	r0, [pc, #16]	; (80078e4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc+0x40>)
 80078d2:	f7fa fb49 	bl	8001f68 <debug_println>
    ////debug_flush(); ////
}
 80078d6:	bd08      	pop	{r3, pc}
 80078d8:	0800ae80 	.word	0x0800ae80
 80078dc:	10624dd3 	.word	0x10624dd3
 80078e0:	0800ae84 	.word	0x0800ae84
 80078e4:	0800b028 	.word	0x0800b028

080078e8 <_Z41__static_initialization_and_destruction_0ii>:
 80078e8:	2801      	cmp	r0, #1
 80078ea:	d000      	beq.n	80078ee <_Z41__static_initialization_and_destruction_0ii+0x6>
 80078ec:	4770      	bx	lr
 80078ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078f2:	4299      	cmp	r1, r3
 80078f4:	d1fa      	bne.n	80078ec <_Z41__static_initialization_and_destruction_0ii+0x4>
 80078f6:	b510      	push	{r4, lr}
STM32BluePill bluepill;
 80078f8:	4c04      	ldr	r4, [pc, #16]	; (800790c <_Z41__static_initialization_and_destruction_0ii+0x24>)
 80078fa:	4620      	mov	r0, r4
 80078fc:	f001 faa8 	bl	8008e50 <_ZN5codal13STM32BluePillC1Ev>
 8007900:	4a03      	ldr	r2, [pc, #12]	; (8007910 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8007902:	4904      	ldr	r1, [pc, #16]	; (8007914 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8007904:	4620      	mov	r0, r4
 8007906:	f7f9 fcb3 	bl	8001270 <__aeabi_atexit>
}
 800790a:	bd10      	pop	{r4, pc}
 800790c:	20001808 	.word	0x20001808
 8007910:	20000850 	.word	0x20000850
 8007914:	080079c5 	.word	0x080079c5

08007918 <_ZN5codal14CodalComponentD1Ev>:

        /**
          * If you have added your component to the idle or system tick component arrays,
          * you must remember to remove your component from them if your component is destructed.
          */
        virtual ~CodalComponent()
 8007918:	b510      	push	{r4, lr}
 800791a:	4604      	mov	r4, r0
        {
 800791c:	4b03      	ldr	r3, [pc, #12]	; (800792c <_ZN5codal14CodalComponentD1Ev+0x14>)
 800791e:	6003      	str	r3, [r0, #0]
            status = 0;
 8007920:	2300      	movs	r3, #0
 8007922:	80c3      	strh	r3, [r0, #6]
            removeComponent();
 8007924:	f000 f94a 	bl	8007bbc <_ZN5codal14CodalComponent15removeComponentEv>
        }
 8007928:	4620      	mov	r0, r4
 800792a:	bd10      	pop	{r4, pc}
 800792c:	0800ae44 	.word	0x0800ae44

08007930 <_ZN5codal14CodalComponentD0Ev>:
        virtual ~CodalComponent()
 8007930:	b510      	push	{r4, lr}
 8007932:	4604      	mov	r4, r0
        {
 8007934:	4b05      	ldr	r3, [pc, #20]	; (800794c <_ZN5codal14CodalComponentD0Ev+0x1c>)
 8007936:	6003      	str	r3, [r0, #0]
            status = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	80c3      	strh	r3, [r0, #6]
            removeComponent();
 800793c:	f000 f93e 	bl	8007bbc <_ZN5codal14CodalComponent15removeComponentEv>
        }
 8007940:	4620      	mov	r0, r4
 8007942:	f7fa fcb7 	bl	80022b4 <_ZdlPv>
 8007946:	4620      	mov	r0, r4
 8007948:	bd10      	pop	{r4, pc}
 800794a:	bf00      	nop
 800794c:	0800ae44 	.word	0x0800ae44

08007950 <_Z10Blink_mainRN5codal13STM32BluePillE>:
void Blink_main(codal::STM32BluePill& bluepill) {
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	4605      	mov	r5, r0
    debug_dump(bluepill, "set led");
 8007954:	4915      	ldr	r1, [pc, #84]	; (80079ac <_Z10Blink_mainRN5codal13STM32BluePillE+0x5c>)
 8007956:	f7ff ffa5 	bl	80078a4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
	bluepill.io.led.setDigitalValue(0);
 800795a:	f505 6679 	add.w	r6, r5, #3984	; 0xf90
 800795e:	2100      	movs	r1, #0
 8007960:	4630      	mov	r0, r6
 8007962:	f000 ffc3 	bl	80088ec <_ZN5codal3_cm3Pin15setDigitalValueEi>
    debug_dump(bluepill, "target wait");
 8007966:	4912      	ldr	r1, [pc, #72]	; (80079b0 <_Z10Blink_mainRN5codal13STM32BluePillE+0x60>)
 8007968:	4628      	mov	r0, r5
 800796a:	f7ff ff9b 	bl	80078a4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
    target_wait_us(1000000);  //  Test the RTC.
 800796e:	4811      	ldr	r0, [pc, #68]	; (80079b4 <_Z10Blink_mainRN5codal13STM32BluePillE+0x64>)
 8007970:	f7f9 fc00 	bl	8001174 <target_wait_us>
    debug_dump(bluepill, "sleep");
 8007974:	4910      	ldr	r1, [pc, #64]	; (80079b8 <_Z10Blink_mainRN5codal13STM32BluePillE+0x68>)
 8007976:	4628      	mov	r0, r5
 8007978:	f7ff ff94 	bl	80078a4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
     * @return STM32BLUEPILL_OK on success, STM32BLUEPILL_INVALID_PARAMETER milliseconds is less than zero.
     *
     */
    inline void STM32BluePill::sleep(uint32_t milliseconds)
    {
        fiber_sleep(milliseconds);
 800797c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007980:	f000 fc18 	bl	80081b4 <_ZN5codal11fiber_sleepEm>
    debug_dump(bluepill, "loop");
 8007984:	490d      	ldr	r1, [pc, #52]	; (80079bc <_Z10Blink_mainRN5codal13STM32BluePillE+0x6c>)
 8007986:	4628      	mov	r0, r5
 8007988:	f7ff ff8c 	bl	80078a4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
	int state = 1;
 800798c:	2401      	movs	r4, #1
		bluepill.io.led.setDigitalValue(state);
 800798e:	4621      	mov	r1, r4
 8007990:	4630      	mov	r0, r6
 8007992:	f000 ffab 	bl	80088ec <_ZN5codal3_cm3Pin15setDigitalValueEi>
        debug_dump(bluepill, "slp");
 8007996:	490a      	ldr	r1, [pc, #40]	; (80079c0 <_Z10Blink_mainRN5codal13STM32BluePillE+0x70>)
 8007998:	4628      	mov	r0, r5
 800799a:	f7ff ff83 	bl	80078a4 <_ZL10debug_dumpRN5codal13STM32BluePillEPKc>
 800799e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079a2:	f000 fc07 	bl	80081b4 <_ZN5codal11fiber_sleepEm>
        state = !state;
 80079a6:	f084 0401 	eor.w	r4, r4, #1
 80079aa:	e7f0      	b.n	800798e <_Z10Blink_mainRN5codal13STM32BluePillE+0x3e>
 80079ac:	0800ae58 	.word	0x0800ae58
 80079b0:	0800ae60 	.word	0x0800ae60
 80079b4:	000f4240 	.word	0x000f4240
 80079b8:	0800ae6c 	.word	0x0800ae6c
 80079bc:	0800ae74 	.word	0x0800ae74
 80079c0:	0800ae7c 	.word	0x0800ae7c

080079c4 <_ZN5codal13STM32BluePillD1Ev>:
    class STM32BluePill : public CodalComponent
 80079c4:	b510      	push	{r4, lr}
 80079c6:	4604      	mov	r4, r0
 80079c8:	4b0d      	ldr	r3, [pc, #52]	; (8007a00 <_ZN5codal13STM32BluePillD1Ev+0x3c>)
 80079ca:	6003      	str	r3, [r0, #0]
        /**
          * Class definition for DeviceSerial.
          *
          * Represents an instance of RawSerial which accepts codal device specific data types.
          */
        class Serial : public codal::Serial
 80079cc:	f241 0010 	movw	r0, #4112	; 0x1010
 80079d0:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <_ZN5codal13STM32BluePillD1Ev+0x40>)
 80079d2:	5023      	str	r3, [r4, r0]
 80079d4:	4420      	add	r0, r4
 80079d6:	f000 fd23 	bl	8008420 <_ZN5codal6SerialD1Ev>
 80079da:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80079de:	f000 fed5 	bl	800878c <_ZN5codal10MessageBusD1Ev>

namespace codal
{
    namespace _cm
    {
        class Timer : public codal::Timer
 80079e2:	4620      	mov	r0, r4
 80079e4:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <_ZN5codal13STM32BluePillD1Ev+0x44>)
 80079e6:	f840 3f08 	str.w	r3, [r0, #8]!
 80079ea:	f002 fc52 	bl	800a292 <_ZN5codal5TimerD1Ev>
        {
 80079ee:	4b07      	ldr	r3, [pc, #28]	; (8007a0c <_ZN5codal13STM32BluePillD1Ev+0x48>)
 80079f0:	6023      	str	r3, [r4, #0]
            status = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	80e3      	strh	r3, [r4, #6]
            removeComponent();
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 f8e0 	bl	8007bbc <_ZN5codal14CodalComponent15removeComponentEv>
 80079fc:	4620      	mov	r0, r4
 80079fe:	bd10      	pop	{r4, pc}
 8007a00:	0800b1b8 	.word	0x0800b1b8
 8007a04:	0800af94 	.word	0x0800af94
 8007a08:	0800aff4 	.word	0x0800aff4
 8007a0c:	0800ae44 	.word	0x0800ae44

08007a10 <_ZN5codal13STM32BluePillD0Ev>:
 8007a10:	b510      	push	{r4, lr}
 8007a12:	4604      	mov	r4, r0
 8007a14:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <_ZN5codal13STM32BluePillD0Ev+0x44>)
 8007a16:	6003      	str	r3, [r0, #0]
 8007a18:	f241 0010 	movw	r0, #4112	; 0x1010
 8007a1c:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <_ZN5codal13STM32BluePillD0Ev+0x48>)
 8007a1e:	5023      	str	r3, [r4, r0]
 8007a20:	4420      	add	r0, r4
 8007a22:	f000 fcfd 	bl	8008420 <_ZN5codal6SerialD1Ev>
 8007a26:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8007a2a:	f000 feaf 	bl	800878c <_ZN5codal10MessageBusD1Ev>
 8007a2e:	4620      	mov	r0, r4
 8007a30:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <_ZN5codal13STM32BluePillD0Ev+0x4c>)
 8007a32:	f840 3f08 	str.w	r3, [r0, #8]!
 8007a36:	f002 fc2c 	bl	800a292 <_ZN5codal5TimerD1Ev>
        {
 8007a3a:	4b09      	ldr	r3, [pc, #36]	; (8007a60 <_ZN5codal13STM32BluePillD0Ev+0x50>)
 8007a3c:	6023      	str	r3, [r4, #0]
            status = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	80e3      	strh	r3, [r4, #6]
            removeComponent();
 8007a42:	4620      	mov	r0, r4
 8007a44:	f000 f8ba 	bl	8007bbc <_ZN5codal14CodalComponent15removeComponentEv>
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f7fa fc33 	bl	80022b4 <_ZdlPv>
 8007a4e:	4620      	mov	r0, r4
 8007a50:	bd10      	pop	{r4, pc}
 8007a52:	bf00      	nop
 8007a54:	0800b1b8 	.word	0x0800b1b8
 8007a58:	0800af94 	.word	0x0800af94
 8007a5c:	0800aff4 	.word	0x0800aff4
 8007a60:	0800ae44 	.word	0x0800ae44

08007a64 <_Z41__static_initialization_and_destruction_0ii>:
  //  Log the character in hex e.g. '\r' becomes "[0x0d]"
  debug_print("[0x");
  debug_write((uint8_t) nibbleToHex[ch / 16]);
  debug_write((uint8_t) nibbleToHex[ch % 16]);
  debug_print("]");
}
 8007a64:	2801      	cmp	r0, #1
 8007a66:	d000      	beq.n	8007a6a <_Z41__static_initialization_and_destruction_0ii+0x6>
 8007a68:	4770      	bx	lr
 8007a6a:	b508      	push	{r3, lr}
 8007a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a70:	4299      	cmp	r1, r3
 8007a72:	d000      	beq.n	8007a76 <_Z41__static_initialization_and_destruction_0ii+0x12>
 8007a74:	bd08      	pop	{r3, pc}
UARTInterface serialPort(UART_RX_PORT, UART_TX_PORT);  //  UART port for send/receive.
 8007a76:	2204      	movs	r2, #4
 8007a78:	2105      	movs	r1, #5
 8007a7a:	4802      	ldr	r0, [pc, #8]	; (8007a84 <_Z41__static_initialization_and_destruction_0ii+0x20>)
 8007a7c:	f003 f898 	bl	800abb0 <_ZN13UARTInterfaceC1Ejj>
}
 8007a80:	e7f8      	b.n	8007a74 <_Z41__static_initialization_and_destruction_0ii+0x10>
 8007a82:	bf00      	nop
 8007a84:	2000284c 	.word	0x2000284c

08007a88 <_Z18component_callbackN5codal5EventE>:

/**
  * The periodic callback for all components.
  */
void component_callback(Event evt)
{
 8007a88:	b530      	push	{r4, r5, lr}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	ab02      	add	r3, sp, #8
 8007a8e:	e903 0003 	stmdb	r3, {r0, r1}
    uint8_t i = 0;

    if(evt.value == DEVICE_COMPONENT_EVT_SYSTEM_TICK)
 8007a92:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8007a96:	2d01      	cmp	r5, #1
 8007a98:	d004      	beq.n	8007aa4 <_Z18component_callbackN5codal5EventE+0x1c>
    uint8_t i = 0;
 8007a9a:	2400      	movs	r4, #0

            i++;
        }
    }

    if(evt.value == DEVICE_SCHEDULER_EVT_IDLE)
 8007a9c:	2d02      	cmp	r5, #2
 8007a9e:	d016      	beq.n	8007ace <_Z18component_callbackN5codal5EventE+0x46>
                CodalComponent::components[i]->idleCallback();

            i++;
        }
    }
}
 8007aa0:	b003      	add	sp, #12
 8007aa2:	bd30      	pop	{r4, r5, pc}
    uint8_t i = 0;
 8007aa4:	2400      	movs	r4, #0
 8007aa6:	e001      	b.n	8007aac <_Z18component_callbackN5codal5EventE+0x24>
            i++;
 8007aa8:	3401      	adds	r4, #1
 8007aaa:	b2e4      	uxtb	r4, r4
        while(i < DEVICE_COMPONENT_COUNT)
 8007aac:	2c3b      	cmp	r4, #59	; 0x3b
 8007aae:	d8f5      	bhi.n	8007a9c <_Z18component_callbackN5codal5EventE+0x14>
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_SYSTEM_TICK)
 8007ab0:	4b0e      	ldr	r3, [pc, #56]	; (8007aec <_Z18component_callbackN5codal5EventE+0x64>)
 8007ab2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d0f6      	beq.n	8007aa8 <_Z18component_callbackN5codal5EventE+0x20>
 8007aba:	88c3      	ldrh	r3, [r0, #6]
 8007abc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007ac0:	d0f2      	beq.n	8007aa8 <_Z18component_callbackN5codal5EventE+0x20>
                CodalComponent::components[i]->periodicCallback();
 8007ac2:	6803      	ldr	r3, [r0, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	4798      	blx	r3
 8007ac8:	e7ee      	b.n	8007aa8 <_Z18component_callbackN5codal5EventE+0x20>
            i++;
 8007aca:	3401      	adds	r4, #1
 8007acc:	b2e4      	uxtb	r4, r4
        while(i < DEVICE_COMPONENT_COUNT)
 8007ace:	2c3b      	cmp	r4, #59	; 0x3b
 8007ad0:	d8e6      	bhi.n	8007aa0 <_Z18component_callbackN5codal5EventE+0x18>
            if(CodalComponent::components[i] && CodalComponent::components[i]->status & DEVICE_COMPONENT_STATUS_IDLE_TICK)
 8007ad2:	4b06      	ldr	r3, [pc, #24]	; (8007aec <_Z18component_callbackN5codal5EventE+0x64>)
 8007ad4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d0f6      	beq.n	8007aca <_Z18component_callbackN5codal5EventE+0x42>
 8007adc:	88c3      	ldrh	r3, [r0, #6]
 8007ade:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8007ae2:	d0f2      	beq.n	8007aca <_Z18component_callbackN5codal5EventE+0x42>
                CodalComponent::components[i]->idleCallback();
 8007ae4:	6803      	ldr	r3, [r0, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	4798      	blx	r3
 8007aea:	e7ee      	b.n	8007aca <_Z18component_callbackN5codal5EventE+0x42>
 8007aec:	20002850 	.word	0x20002850

08007af0 <_ZN5codal14CodalComponent12addComponentEv>:
/**
  * Adds the current CodalComponent instance to our array of components.
  */
void CodalComponent::addComponent()
{
    uint8_t i = 0;
 8007af0:	2300      	movs	r3, #0

    // iterate through our list until an empty space is found.
    while(i < DEVICE_COMPONENT_COUNT)
 8007af2:	2b3b      	cmp	r3, #59	; 0x3b
 8007af4:	d80a      	bhi.n	8007b0c <_ZN5codal14CodalComponent12addComponentEv+0x1c>
    {
        if(components[i] == NULL)
 8007af6:	4619      	mov	r1, r3
 8007af8:	4a2c      	ldr	r2, [pc, #176]	; (8007bac <_ZN5codal14CodalComponent12addComponentEv+0xbc>)
 8007afa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007afe:	b112      	cbz	r2, 8007b06 <_ZN5codal14CodalComponent12addComponentEv+0x16>
        {
            components[i] = this;
            break;
        }

        i++;
 8007b00:	3301      	adds	r3, #1
 8007b02:	b2db      	uxtb	r3, r3
    while(i < DEVICE_COMPONENT_COUNT)
 8007b04:	e7f5      	b.n	8007af2 <_ZN5codal14CodalComponent12addComponentEv+0x2>
            components[i] = this;
 8007b06:	4b29      	ldr	r3, [pc, #164]	; (8007bac <_ZN5codal14CodalComponent12addComponentEv+0xbc>)
 8007b08:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
    }

    if(!(configuration & DEVICE_COMPONENT_LISTENERS_CONFIGURED) && EventModel::defaultEventBus)
 8007b0c:	4b28      	ldr	r3, [pc, #160]	; (8007bb0 <_ZN5codal14CodalComponent12addComponentEv+0xc0>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	f013 0f01 	tst.w	r3, #1
 8007b14:	d148      	bne.n	8007ba8 <_ZN5codal14CodalComponent12addComponentEv+0xb8>
 8007b16:	4b27      	ldr	r3, [pc, #156]	; (8007bb4 <_ZN5codal14CodalComponent12addComponentEv+0xc4>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d044      	beq.n	8007ba8 <_ZN5codal14CodalComponent12addComponentEv+0xb8>
{
 8007b1e:	b530      	push	{r4, r5, lr}
 8007b20:	b083      	sub	sp, #12
    {
        int ret = system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK);
 8007b22:	2201      	movs	r2, #1
 8007b24:	2110      	movs	r1, #16
 8007b26:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8007b2a:	f000 fcb3 	bl	8008494 <_ZN5codal27system_timer_event_every_usEmtt>

        if(ret == DEVICE_OK)
 8007b2e:	b108      	cbz	r0, 8007b34 <_ZN5codal14CodalComponent12addComponentEv+0x44>
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);

            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
        }
    }
}
 8007b30:	b003      	add	sp, #12
 8007b32:	bd30      	pop	{r4, r5, pc}
            EventModel::defaultEventBus->listen(DEVICE_ID_COMPONENT, DEVICE_COMPONENT_EVT_SYSTEM_TICK, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007b34:	4b1f      	ldr	r3, [pc, #124]	; (8007bb4 <_ZN5codal14CodalComponent12addComponentEv+0xc4>)
 8007b36:	681d      	ldr	r5, [r3, #0]
                return DEVICE_INVALID_PARAMETER;

            if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
                return DEVICE_INVALID_PARAMETER;

            Listener *newListener = new Listener(id, value, handler, flags);
 8007b38:	2020      	movs	r0, #32
 8007b3a:	f7fa fbb7 	bl	80022ac <_Znwj>
 8007b3e:	4604      	mov	r4, r0
 8007b40:	23c0      	movs	r3, #192	; 0xc0
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	4b1c      	ldr	r3, [pc, #112]	; (8007bb8 <_ZN5codal14CodalComponent12addComponentEv+0xc8>)
 8007b46:	2201      	movs	r2, #1
 8007b48:	2110      	movs	r1, #16
 8007b4a:	f002 f938 	bl	8009dbe <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>

            if(add(newListener) == DEVICE_OK)
 8007b4e:	682b      	ldr	r3, [r5, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	4621      	mov	r1, r4
 8007b54:	4628      	mov	r0, r5
 8007b56:	4798      	blx	r3
 8007b58:	b130      	cbz	r0, 8007b68 <_ZN5codal14CodalComponent12addComponentEv+0x78>
                return DEVICE_OK;

            delete newListener;
 8007b5a:	b12c      	cbz	r4, 8007b68 <_ZN5codal14CodalComponent12addComponentEv+0x78>
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f002 f942 	bl	8009de6 <_ZN5codal8ListenerD1Ev>
 8007b62:	4620      	mov	r0, r4
 8007b64:	f7fa fba6 	bl	80022b4 <_ZdlPv>
            EventModel::defaultEventBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, component_callback, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007b68:	4b12      	ldr	r3, [pc, #72]	; (8007bb4 <_ZN5codal14CodalComponent12addComponentEv+0xc4>)
 8007b6a:	681d      	ldr	r5, [r3, #0]
            Listener *newListener = new Listener(id, value, handler, flags);
 8007b6c:	2020      	movs	r0, #32
 8007b6e:	f7fa fb9d 	bl	80022ac <_Znwj>
 8007b72:	4604      	mov	r4, r0
 8007b74:	23c0      	movs	r3, #192	; 0xc0
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <_ZN5codal14CodalComponent12addComponentEv+0xc8>)
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	210f      	movs	r1, #15
 8007b7e:	f002 f91e 	bl	8009dbe <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8007b82:	682b      	ldr	r3, [r5, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	4621      	mov	r1, r4
 8007b88:	4628      	mov	r0, r5
 8007b8a:	4798      	blx	r3
 8007b8c:	b130      	cbz	r0, 8007b9c <_ZN5codal14CodalComponent12addComponentEv+0xac>
            delete newListener;
 8007b8e:	b12c      	cbz	r4, 8007b9c <_ZN5codal14CodalComponent12addComponentEv+0xac>
 8007b90:	4620      	mov	r0, r4
 8007b92:	f002 f928 	bl	8009de6 <_ZN5codal8ListenerD1Ev>
 8007b96:	4620      	mov	r0, r4
 8007b98:	f7fa fb8c 	bl	80022b4 <_ZdlPv>
            CodalComponent::configuration |= DEVICE_COMPONENT_LISTENERS_CONFIGURED;
 8007b9c:	4a04      	ldr	r2, [pc, #16]	; (8007bb0 <_ZN5codal14CodalComponent12addComponentEv+0xc0>)
 8007b9e:	7813      	ldrb	r3, [r2, #0]
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	7013      	strb	r3, [r2, #0]
}
 8007ba6:	e7c3      	b.n	8007b30 <_ZN5codal14CodalComponent12addComponentEv+0x40>
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	20002850 	.word	0x20002850
 8007bb0:	20002a10 	.word	0x20002a10
 8007bb4:	20002970 	.word	0x20002970
 8007bb8:	08007a89 	.word	0x08007a89

08007bbc <_ZN5codal14CodalComponent15removeComponentEv>:
/**
  * Removes the current CodalComponent instance from our array of components.
  */
void CodalComponent::removeComponent()
{
    uint8_t i = 0;
 8007bbc:	2300      	movs	r3, #0

    while(i < DEVICE_COMPONENT_COUNT)
 8007bbe:	2b3b      	cmp	r3, #59	; 0x3b
 8007bc0:	d80d      	bhi.n	8007bde <_ZN5codal14CodalComponent15removeComponentEv+0x22>
    {
        if(components[i] == this)
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	4a06      	ldr	r2, [pc, #24]	; (8007be0 <_ZN5codal14CodalComponent15removeComponentEv+0x24>)
 8007bc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007bca:	4282      	cmp	r2, r0
 8007bcc:	d002      	beq.n	8007bd4 <_ZN5codal14CodalComponent15removeComponentEv+0x18>
        {
            components[i] = NULL;
            return;
        }

        i++;
 8007bce:	3301      	adds	r3, #1
 8007bd0:	b2db      	uxtb	r3, r3
    while(i < DEVICE_COMPONENT_COUNT)
 8007bd2:	e7f4      	b.n	8007bbe <_ZN5codal14CodalComponent15removeComponentEv+0x2>
            components[i] = NULL;
 8007bd4:	4b02      	ldr	r3, [pc, #8]	; (8007be0 <_ZN5codal14CodalComponent15removeComponentEv+0x24>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
            return;
 8007bdc:	4770      	bx	lr
    }
}
 8007bde:	4770      	bx	lr
 8007be0:	20002850 	.word	0x20002850

08007be4 <codal_dmesg_flush>:
{
    dmesg_flush_fn = fn;
}

void codal_dmesg_flush()
{
 8007be4:	b508      	push	{r3, lr}
    if (dmesg_flush_fn)
 8007be6:	4b02      	ldr	r3, [pc, #8]	; (8007bf0 <codal_dmesg_flush+0xc>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	b103      	cbz	r3, 8007bee <codal_dmesg_flush+0xa>
        dmesg_flush_fn();
 8007bec:	4798      	blx	r3
}
 8007bee:	bd08      	pop	{r3, pc}
 8007bf0:	20002940 	.word	0x20002940

08007bf4 <_ZN5codal14scheduler_tickENS_5EventE>:
  * The timer callback, called from interrupt context once every SYSTEM_TICK_PERIOD_MS milliseconds.
  * This function checks to determine if any fibers blocked on the sleep queue need to be woken up
  * and made runnable.
  */
void codal::scheduler_tick(Event evt)
{
 8007bf4:	b530      	push	{r4, r5, lr}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	ab02      	add	r3, sp, #8
 8007bfa:	e903 0003 	stmdb	r3, {r0, r1}
    Fiber *f = sleepQueue;
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <_ZN5codal14scheduler_tickENS_5EventE+0x34>)
 8007c00:	681c      	ldr	r4, [r3, #0]
 8007c02:	e000      	b.n	8007c06 <_ZN5codal14scheduler_tickENS_5EventE+0x12>
{
 8007c04:	462c      	mov	r4, r5
#if !CONFIG_ENABLED(LIGHTWEIGHT_EVENTS)
    evt.timestamp /= 1000;
#endif

    // Check the sleep queue, and wake up any fibers as necessary.
    while (f != NULL)
 8007c06:	b164      	cbz	r4, 8007c22 <_ZN5codal14scheduler_tickENS_5EventE+0x2e>
    {
        t = f->next;
 8007c08:	69a5      	ldr	r5, [r4, #24]

        if (evt.timestamp >= f->context)
 8007c0a:	68e3      	ldr	r3, [r4, #12]
 8007c0c:	9a01      	ldr	r2, [sp, #4]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d3f8      	bcc.n	8007c04 <_ZN5codal14scheduler_tickENS_5EventE+0x10>
        {
            // Wakey wakey!
            dequeue_fiber(f);
 8007c12:	4620      	mov	r0, r4
 8007c14:	f002 f81f 	bl	8009c56 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
            queue_fiber(f,&runQueue);
 8007c18:	4904      	ldr	r1, [pc, #16]	; (8007c2c <_ZN5codal14scheduler_tickENS_5EventE+0x38>)
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f002 f804 	bl	8009c28 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
 8007c20:	e7f0      	b.n	8007c04 <_ZN5codal14scheduler_tickENS_5EventE+0x10>
        }

        f = t;
    }
}
 8007c22:	b003      	add	sp, #12
 8007c24:	bd30      	pop	{r4, r5, pc}
 8007c26:	bf00      	nop
 8007c28:	2000294c 	.word	0x2000294c
 8007c2c:	20002954 	.word	0x20002954

08007c30 <_ZN5codal15scheduler_eventENS_5EventE>:
  * and made runnable due to the event.
  *
  * @param evt the event that has just been raised on an instance of DeviceMessageBus.
  */
void codal::scheduler_event(Event evt)
{
 8007c30:	b570      	push	{r4, r5, r6, lr}
 8007c32:	b08c      	sub	sp, #48	; 0x30
 8007c34:	ab02      	add	r3, sp, #8
 8007c36:	e883 0003 	stmia.w	r3, {r0, r1}
    Fiber *f = waitQueue;
 8007c3a:	4b29      	ldr	r3, [pc, #164]	; (8007ce0 <_ZN5codal15scheduler_eventENS_5EventE+0xb0>)
 8007c3c:	681c      	ldr	r4, [r3, #0]
    int notifyOneComplete = 0;

    // This should never happen.
    // It is however, safe to simply ignore any events provided, as if no messageBus if recorded,
    // no fibers are permitted to block on events.
    if (messageBus == NULL)
 8007c3e:	4b29      	ldr	r3, [pc, #164]	; (8007ce4 <_ZN5codal15scheduler_eventENS_5EventE+0xb4>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d04a      	beq.n	8007cdc <_ZN5codal15scheduler_eventENS_5EventE+0xac>
    int notifyOneComplete = 0;
 8007c46:	2600      	movs	r6, #0
 8007c48:	e01a      	b.n	8007c80 <_ZN5codal15scheduler_eventENS_5EventE+0x50>
        // extract the event data this fiber is blocked on.
        uint16_t id = f->context & 0xFFFF;
        uint16_t value = (f->context & 0xFFFF0000) >> 16;

        // Special case for the NOTIFY_ONE channel...
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 8007c4a:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8007c4e:	4282      	cmp	r2, r0
 8007c50:	d121      	bne.n	8007c96 <_ZN5codal15scheduler_eventENS_5EventE+0x66>
 8007c52:	b11b      	cbz	r3, 8007c5c <_ZN5codal15scheduler_eventENS_5EventE+0x2c>
 8007c54:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8007c58:	4298      	cmp	r0, r3
 8007c5a:	d11c      	bne.n	8007c96 <_ZN5codal15scheduler_eventENS_5EventE+0x66>
        {
            if (!notifyOneComplete)
 8007c5c:	b97e      	cbnz	r6, 8007c7e <_ZN5codal15scheduler_eventENS_5EventE+0x4e>
            {
                // Wakey wakey!
                dequeue_fiber(f);
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f001 fff9 	bl	8009c56 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
                queue_fiber(f,&runQueue);
 8007c64:	4920      	ldr	r1, [pc, #128]	; (8007ce8 <_ZN5codal15scheduler_eventENS_5EventE+0xb8>)
 8007c66:	4620      	mov	r0, r4
 8007c68:	f001 ffde 	bl	8009c28 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
                notifyOneComplete = 1;
 8007c6c:	2601      	movs	r6, #1
 8007c6e:	e006      	b.n	8007c7e <_ZN5codal15scheduler_eventENS_5EventE+0x4e>

        // Normal case.
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
        {
            // Wakey wakey!
            dequeue_fiber(f);
 8007c70:	4620      	mov	r0, r4
 8007c72:	f001 fff0 	bl	8009c56 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
            queue_fiber(f,&runQueue);
 8007c76:	491c      	ldr	r1, [pc, #112]	; (8007ce8 <_ZN5codal15scheduler_eventENS_5EventE+0xb8>)
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f001 ffd5 	bl	8009c28 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
                notifyOneComplete = 1;
 8007c7e:	462c      	mov	r4, r5
    while (f != NULL)
 8007c80:	b19c      	cbz	r4, 8007caa <_ZN5codal15scheduler_eventENS_5EventE+0x7a>
        t = f->next;
 8007c82:	69a5      	ldr	r5, [r4, #24]
        uint16_t id = f->context & 0xFFFF;
 8007c84:	68e3      	ldr	r3, [r4, #12]
 8007c86:	b29a      	uxth	r2, r3
        uint16_t value = (f->context & 0xFFFF0000) >> 16;
 8007c88:	0c1b      	lsrs	r3, r3, #16
        if ((evt.source == DEVICE_ID_NOTIFY_ONE && id == DEVICE_ID_NOTIFY) && (value == DEVICE_EVT_ANY || value == evt.value))
 8007c8a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8007c8e:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8007c92:	4281      	cmp	r1, r0
 8007c94:	d0d9      	beq.n	8007c4a <_ZN5codal15scheduler_eventENS_5EventE+0x1a>
        else if ((id == DEVICE_ID_ANY || id == evt.source) && (value == DEVICE_EVT_ANY || value == evt.value))
 8007c96:	b10a      	cbz	r2, 8007c9c <_ZN5codal15scheduler_eventENS_5EventE+0x6c>
 8007c98:	4291      	cmp	r1, r2
 8007c9a:	d1f0      	bne.n	8007c7e <_ZN5codal15scheduler_eventENS_5EventE+0x4e>
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d0e7      	beq.n	8007c70 <_ZN5codal15scheduler_eventENS_5EventE+0x40>
 8007ca0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d1ea      	bne.n	8007c7e <_ZN5codal15scheduler_eventENS_5EventE+0x4e>
 8007ca8:	e7e2      	b.n	8007c70 <_ZN5codal15scheduler_eventENS_5EventE+0x40>

        f = t;
    }

    // Unregister this event, as we've woken up all the fibers with this match.
    if (evt.source != DEVICE_ID_NOTIFY && evt.source != DEVICE_ID_NOTIFY_ONE)
 8007caa:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8007cae:	f2a1 33fe 	subw	r3, r1, #1022	; 0x3fe
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d911      	bls.n	8007cdc <_ZN5codal15scheduler_eventENS_5EventE+0xac>
        messageBus->ignore(evt.source, evt.value, scheduler_event);
 8007cb8:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <_ZN5codal15scheduler_eventENS_5EventE+0xb4>)
 8007cba:	681c      	ldr	r4, [r3, #0]
 8007cbc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
        int ignore(int id, int value, void (*handler)(Event))
        {
            if (handler == NULL)
                return DEVICE_INVALID_PARAMETER;

            Listener listener(id, value, handler);
 8007cc0:	2310      	movs	r3, #16
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <_ZN5codal15scheduler_eventENS_5EventE+0xbc>)
 8007cc6:	a804      	add	r0, sp, #16
 8007cc8:	f002 f879 	bl	8009dbe <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            remove(&listener);
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	a904      	add	r1, sp, #16
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	4798      	blx	r3
            Listener listener(id, value, handler);
 8007cd6:	a804      	add	r0, sp, #16
 8007cd8:	f002 f885 	bl	8009de6 <_ZN5codal8ListenerD1Ev>
}
 8007cdc:	b00c      	add	sp, #48	; 0x30
 8007cde:	bd70      	pop	{r4, r5, r6, pc}
 8007ce0:	20002960 	.word	0x20002960
 8007ce4:	20002948 	.word	0x20002948
 8007ce8:	20002954 	.word	0x20002954
 8007cec:	08007c31 	.word	0x08007c31

08007cf0 <_Z15getFiberContextv>:
{
 8007cf0:	b538      	push	{r3, r4, r5, lr}
    target_disable_irq();
 8007cf2:	f7f9 faa5 	bl	8001240 <target_disable_irq>
    if (fiberPool != NULL)
 8007cf6:	4b13      	ldr	r3, [pc, #76]	; (8007d44 <_Z15getFiberContextv+0x54>)
 8007cf8:	681c      	ldr	r4, [r3, #0]
 8007cfa:	b184      	cbz	r4, 8007d1e <_Z15getFiberContextv+0x2e>
        dequeue_fiber(f);
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f001 ffaa 	bl	8009c56 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
    target_enable_irq();
 8007d02:	f7f9 fa9b 	bl	800123c <target_enable_irq>
    f->flags = 0;
 8007d06:	2300      	movs	r3, #0
 8007d08:	6123      	str	r3, [r4, #16]
    f->user_data = 0;
 8007d0a:	6223      	str	r3, [r4, #32]
    tcb_configure_stack_base(f->tcb, fiber_initial_stack_base());
 8007d0c:	6825      	ldr	r5, [r4, #0]
 8007d0e:	f7f9 fa4b 	bl	80011a8 <fiber_initial_stack_base>
 8007d12:	4601      	mov	r1, r0
 8007d14:	4628      	mov	r0, r5
 8007d16:	f7f9 fa9e 	bl	8001256 <tcb_configure_stack_base>
}
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	bd38      	pop	{r3, r4, r5, pc}
        f = new Fiber();
 8007d1e:	2024      	movs	r0, #36	; 0x24
 8007d20:	f7fa fac4 	bl	80022ac <_Znwj>
 8007d24:	4604      	mov	r4, r0
 8007d26:	2224      	movs	r2, #36	; 0x24
 8007d28:	2100      	movs	r1, #0
 8007d2a:	f7fa f825 	bl	8001d78 <memset>
        if (f == NULL) {
 8007d2e:	b134      	cbz	r4, 8007d3e <_Z15getFiberContextv+0x4e>
        f->tcb = tcb_allocate();
 8007d30:	f7f9 fa88 	bl	8001244 <tcb_allocate>
 8007d34:	6020      	str	r0, [r4, #0]
        f->stack_bottom = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	6063      	str	r3, [r4, #4]
        f->stack_top = 0;
 8007d3a:	60a3      	str	r3, [r4, #8]
 8007d3c:	e7e1      	b.n	8007d02 <_Z15getFiberContextv+0x12>
            target_enable_irq();
 8007d3e:	f7f9 fa7d 	bl	800123c <target_enable_irq>
            return NULL;
 8007d42:	e7ea      	b.n	8007d1a <_Z15getFiberContextv+0x2a>
 8007d44:	20002958 	.word	0x20002958

08007d48 <_ZL10handle_fobv>:

static Fiber* handle_fob()
{
 8007d48:	b510      	push	{r4, lr}
    Fiber *f = currentFiber;
 8007d4a:	4b0a      	ldr	r3, [pc, #40]	; (8007d74 <_ZL10handle_fobv+0x2c>)
 8007d4c:	681c      	ldr	r4, [r3, #0]

    // This is a blocking call, so if we're in a fork on block context,
    // it's time to spawn a new fiber...
    if (f->flags & DEVICE_FIBER_FLAG_FOB)
 8007d4e:	6923      	ldr	r3, [r4, #16]
 8007d50:	f013 0f01 	tst.w	r3, #1
 8007d54:	d101      	bne.n	8007d5a <_ZL10handle_fobv+0x12>
#endif
            f = forkedFiber;
        }
    }
    return f;
}
 8007d56:	4620      	mov	r0, r4
 8007d58:	bd10      	pop	{r4, pc}
        forkedFiber = getFiberContext();
 8007d5a:	f7ff ffc9 	bl	8007cf0 <_Z15getFiberContextv>
 8007d5e:	4b06      	ldr	r3, [pc, #24]	; (8007d78 <_ZL10handle_fobv+0x30>)
 8007d60:	6018      	str	r0, [r3, #0]
        if (forkedFiber != NULL) {
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d0f7      	beq.n	8007d56 <_ZL10handle_fobv+0xe>
            forkedFiber->user_data = f->user_data;
 8007d66:	6a23      	ldr	r3, [r4, #32]
 8007d68:	6203      	str	r3, [r0, #32]
            f->user_data = NULL;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	6223      	str	r3, [r4, #32]
            f = forkedFiber;
 8007d6e:	4604      	mov	r4, r0
    return f;
 8007d70:	e7f1      	b.n	8007d56 <_ZL10handle_fobv+0xe>
 8007d72:	bf00      	nop
 8007d74:	20002944 	.word	0x20002944
 8007d78:	20002950 	.word	0x20002950

08007d7c <_ZN5codal23fiber_scheduler_runningEv>:
    if (fiber_flags & DEVICE_SCHEDULER_RUNNING)
 8007d7c:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <_ZN5codal23fiber_scheduler_runningEv+0x14>)
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	f013 0f01 	tst.w	r3, #1
 8007d84:	d101      	bne.n	8007d8a <_ZN5codal23fiber_scheduler_runningEv+0xe>
    return 0;
 8007d86:	2000      	movs	r0, #0
}
 8007d88:	4770      	bx	lr
        return 1;
 8007d8a:	2001      	movs	r0, #1
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	20002a11 	.word	0x20002a11

08007d94 <_ZN5codal14scheduler_initERNS_10EventModelE>:
{
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	4604      	mov	r4, r0
    if (fiber_scheduler_running())
 8007d9a:	f7ff ffef 	bl	8007d7c <_ZN5codal23fiber_scheduler_runningEv>
 8007d9e:	b108      	cbz	r0, 8007da4 <_ZN5codal14scheduler_initERNS_10EventModelE+0x10>
}
 8007da0:	b002      	add	sp, #8
 8007da2:	bd70      	pop	{r4, r5, r6, pc}
    messageBus = &_messageBus;
 8007da4:	4d3a      	ldr	r5, [pc, #232]	; (8007e90 <_ZN5codal14scheduler_initERNS_10EventModelE+0xfc>)
 8007da6:	602c      	str	r4, [r5, #0]
    currentFiber = getFiberContext();
 8007da8:	f7ff ffa2 	bl	8007cf0 <_Z15getFiberContextv>
 8007dac:	4b39      	ldr	r3, [pc, #228]	; (8007e94 <_ZN5codal14scheduler_initERNS_10EventModelE+0x100>)
 8007dae:	6018      	str	r0, [r3, #0]
    queue_fiber(currentFiber, &runQueue);
 8007db0:	4939      	ldr	r1, [pc, #228]	; (8007e98 <_ZN5codal14scheduler_initERNS_10EventModelE+0x104>)
 8007db2:	f001 ff39 	bl	8009c28 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    idleFiber = getFiberContext();
 8007db6:	f7ff ff9b 	bl	8007cf0 <_Z15getFiberContextv>
 8007dba:	4c38      	ldr	r4, [pc, #224]	; (8007e9c <_ZN5codal14scheduler_initERNS_10EventModelE+0x108>)
 8007dbc:	6020      	str	r0, [r4, #0]
    tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 8007dbe:	6806      	ldr	r6, [r0, #0]
 8007dc0:	f7f9 f9f2 	bl	80011a8 <fiber_initial_stack_base>
 8007dc4:	1f01      	subs	r1, r0, #4
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f7f9 fa43 	bl	8001252 <tcb_configure_sp>
    tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 8007dcc:	6823      	ldr	r3, [r4, #0]
 8007dce:	4934      	ldr	r1, [pc, #208]	; (8007ea0 <_ZN5codal14scheduler_initERNS_10EventModelE+0x10c>)
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	f7f9 fa3c 	bl	800124e <tcb_configure_lr>
    if (messageBus)
 8007dd6:	682c      	ldr	r4, [r5, #0]
 8007dd8:	2c00      	cmp	r4, #0
 8007dda:	d053      	beq.n	8007e84 <_ZN5codal14scheduler_initERNS_10EventModelE+0xf0>
            Listener *newListener = new Listener(id, value, handler, flags);
 8007ddc:	2020      	movs	r0, #32
 8007dde:	f7fa fa65 	bl	80022ac <_Znwj>
 8007de2:	4605      	mov	r5, r0
 8007de4:	23c0      	movs	r3, #192	; 0xc0
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	4b2e      	ldr	r3, [pc, #184]	; (8007ea4 <_ZN5codal14scheduler_initERNS_10EventModelE+0x110>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007df0:	f001 ffe5 	bl	8009dbe <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	4798      	blx	r3
 8007dfe:	b130      	cbz	r0, 8007e0e <_ZN5codal14scheduler_initERNS_10EventModelE+0x7a>
            delete newListener;
 8007e00:	b12d      	cbz	r5, 8007e0e <_ZN5codal14scheduler_initERNS_10EventModelE+0x7a>
 8007e02:	4628      	mov	r0, r5
 8007e04:	f001 ffef 	bl	8009de6 <_ZN5codal8ListenerD1Ev>
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f7fa fa53 	bl	80022b4 <_ZdlPv>
        messageBus->listen(DEVICE_ID_NOTIFY_ONE, DEVICE_EVT_ANY, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007e0e:	4b20      	ldr	r3, [pc, #128]	; (8007e90 <_ZN5codal14scheduler_initERNS_10EventModelE+0xfc>)
 8007e10:	681d      	ldr	r5, [r3, #0]
            Listener *newListener = new Listener(id, value, handler, flags);
 8007e12:	2020      	movs	r0, #32
 8007e14:	f7fa fa4a 	bl	80022ac <_Znwj>
 8007e18:	4604      	mov	r4, r0
 8007e1a:	23c0      	movs	r3, #192	; 0xc0
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	4b21      	ldr	r3, [pc, #132]	; (8007ea4 <_ZN5codal14scheduler_initERNS_10EventModelE+0x110>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8007e26:	f001 ffca 	bl	8009dbe <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8007e2a:	682b      	ldr	r3, [r5, #0]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4628      	mov	r0, r5
 8007e32:	4798      	blx	r3
 8007e34:	b130      	cbz	r0, 8007e44 <_ZN5codal14scheduler_initERNS_10EventModelE+0xb0>
            delete newListener;
 8007e36:	b12c      	cbz	r4, 8007e44 <_ZN5codal14scheduler_initERNS_10EventModelE+0xb0>
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f001 ffd4 	bl	8009de6 <_ZN5codal8ListenerD1Ev>
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f7fa fa38 	bl	80022b4 <_ZdlPv>
        system_timer_event_every_us(SCHEDULER_TICK_PERIOD_US, DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK);
 8007e44:	2201      	movs	r2, #1
 8007e46:	210f      	movs	r1, #15
 8007e48:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8007e4c:	f000 fb22 	bl	8008494 <_ZN5codal27system_timer_event_every_usEmtt>
        messageBus->listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_TICK, scheduler_tick, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007e50:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <_ZN5codal14scheduler_initERNS_10EventModelE+0xfc>)
 8007e52:	681d      	ldr	r5, [r3, #0]
            Listener *newListener = new Listener(id, value, handler, flags);
 8007e54:	2020      	movs	r0, #32
 8007e56:	f7fa fa29 	bl	80022ac <_Znwj>
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	23c0      	movs	r3, #192	; 0xc0
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	4b11      	ldr	r3, [pc, #68]	; (8007ea8 <_ZN5codal14scheduler_initERNS_10EventModelE+0x114>)
 8007e62:	2201      	movs	r2, #1
 8007e64:	210f      	movs	r1, #15
 8007e66:	f001 ffaa 	bl	8009dbe <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8007e6a:	682b      	ldr	r3, [r5, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	4621      	mov	r1, r4
 8007e70:	4628      	mov	r0, r5
 8007e72:	4798      	blx	r3
 8007e74:	b130      	cbz	r0, 8007e84 <_ZN5codal14scheduler_initERNS_10EventModelE+0xf0>
            delete newListener;
 8007e76:	b12c      	cbz	r4, 8007e84 <_ZN5codal14scheduler_initERNS_10EventModelE+0xf0>
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f001 ffb4 	bl	8009de6 <_ZN5codal8ListenerD1Ev>
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f7fa fa18 	bl	80022b4 <_ZdlPv>
    fiber_flags |= DEVICE_SCHEDULER_RUNNING;
 8007e84:	4a09      	ldr	r2, [pc, #36]	; (8007eac <_ZN5codal14scheduler_initERNS_10EventModelE+0x118>)
 8007e86:	7813      	ldrb	r3, [r2, #0]
 8007e88:	f043 0301 	orr.w	r3, r3, #1
 8007e8c:	7013      	strb	r3, [r2, #0]
 8007e8e:	e787      	b.n	8007da0 <_ZN5codal14scheduler_initERNS_10EventModelE+0xc>
 8007e90:	20002948 	.word	0x20002948
 8007e94:	20002944 	.word	0x20002944
 8007e98:	20002954 	.word	0x20002954
 8007e9c:	2000295c 	.word	0x2000295c
 8007ea0:	08009d13 	.word	0x08009d13
 8007ea4:	08007c31 	.word	0x08007c31
 8007ea8:	08007bf5 	.word	0x08007bf5
 8007eac:	20002a11 	.word	0x20002a11

08007eb0 <_ZN5codal19fiber_wake_on_eventEtt>:
  * schedule();
  * @endcode
  */
int codal::fiber_wake_on_event(uint16_t id, uint16_t value)
{
    if (messageBus == NULL || !fiber_scheduler_running())
 8007eb0:	4b1f      	ldr	r3, [pc, #124]	; (8007f30 <_ZN5codal19fiber_wake_on_eventEtt+0x80>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d034      	beq.n	8007f22 <_ZN5codal19fiber_wake_on_eventEtt+0x72>
{
 8007eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	460e      	mov	r6, r1
 8007ebe:	4604      	mov	r4, r0
    if (messageBus == NULL || !fiber_scheduler_running())
 8007ec0:	f7ff ff5c 	bl	8007d7c <_ZN5codal23fiber_scheduler_runningEv>
 8007ec4:	b378      	cbz	r0, 8007f26 <_ZN5codal19fiber_wake_on_eventEtt+0x76>
        return DEVICE_NOT_SUPPORTED;

    Fiber *f = handle_fob();
 8007ec6:	f7ff ff3f 	bl	8007d48 <_ZL10handle_fobv>
 8007eca:	4605      	mov	r5, r0

    // Encode the event data in the context field. It's handy having a 32 bit core. :-)
    f->context = (uint32_t)value << 16 | id;
 8007ecc:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8007ed0:	60c3      	str	r3, [r0, #12]

    // Remove ourselves from the run queue
    dequeue_fiber(f);
 8007ed2:	f001 fec0 	bl	8009c56 <_ZN5codal13dequeue_fiberEPNS_5FiberE>

    // Add ourselves to the sleep queue. We maintain strict ordering here to reduce lookup times.
    queue_fiber(f, &waitQueue);
 8007ed6:	4917      	ldr	r1, [pc, #92]	; (8007f34 <_ZN5codal19fiber_wake_on_eventEtt+0x84>)
 8007ed8:	4628      	mov	r0, r5
 8007eda:	f001 fea5 	bl	8009c28 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    // Register to receive this event, so we can wake up the fiber when it happens.
    // Special case for the notify channel, as we always stay registered for that.
    if (id != DEVICE_ID_NOTIFY && id != DEVICE_ID_NOTIFY_ONE)
 8007ede:	f2a4 33fe 	subw	r3, r4, #1022	; 0x3fe
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d920      	bls.n	8007f2a <_ZN5codal19fiber_wake_on_eventEtt+0x7a>
        messageBus->listen(id, value, scheduler_event, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8007ee8:	4b11      	ldr	r3, [pc, #68]	; (8007f30 <_ZN5codal19fiber_wake_on_eventEtt+0x80>)
 8007eea:	681f      	ldr	r7, [r3, #0]
            Listener *newListener = new Listener(id, value, handler, flags);
 8007eec:	2020      	movs	r0, #32
 8007eee:	f7fa f9dd 	bl	80022ac <_Znwj>
 8007ef2:	4605      	mov	r5, r0
 8007ef4:	23c0      	movs	r3, #192	; 0xc0
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	4b0f      	ldr	r3, [pc, #60]	; (8007f38 <_ZN5codal19fiber_wake_on_eventEtt+0x88>)
 8007efa:	4632      	mov	r2, r6
 8007efc:	4621      	mov	r1, r4
 8007efe:	f001 ff5e 	bl	8009dbe <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	4629      	mov	r1, r5
 8007f08:	4638      	mov	r0, r7
 8007f0a:	4798      	blx	r3
 8007f0c:	b130      	cbz	r0, 8007f1c <_ZN5codal19fiber_wake_on_eventEtt+0x6c>
            delete newListener;
 8007f0e:	b12d      	cbz	r5, 8007f1c <_ZN5codal19fiber_wake_on_eventEtt+0x6c>
 8007f10:	4628      	mov	r0, r5
 8007f12:	f001 ff68 	bl	8009de6 <_ZN5codal8ListenerD1Ev>
 8007f16:	4628      	mov	r0, r5
 8007f18:	f7fa f9cc 	bl	80022b4 <_ZdlPv>

    return DEVICE_OK;
 8007f1c:	2000      	movs	r0, #0
}
 8007f1e:	b003      	add	sp, #12
 8007f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return DEVICE_NOT_SUPPORTED;
 8007f22:	4806      	ldr	r0, [pc, #24]	; (8007f3c <_ZN5codal19fiber_wake_on_eventEtt+0x8c>)
}
 8007f24:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 8007f26:	4805      	ldr	r0, [pc, #20]	; (8007f3c <_ZN5codal19fiber_wake_on_eventEtt+0x8c>)
 8007f28:	e7f9      	b.n	8007f1e <_ZN5codal19fiber_wake_on_eventEtt+0x6e>
    return DEVICE_OK;
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	e7f7      	b.n	8007f1e <_ZN5codal19fiber_wake_on_eventEtt+0x6e>
 8007f2e:	bf00      	nop
 8007f30:	20002948 	.word	0x20002948
 8007f34:	20002960 	.word	0x20002960
 8007f38:	08007c31 	.word	0x08007c31
 8007f3c:	fffffc16 	.word	0xfffffc16

08007f40 <_Z14__create_fibermmmi>:
    release_fiber(pm);
}


Fiber *__create_fiber(uint32_t ep, uint32_t cp, uint32_t pm, int parameterised)
{
 8007f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // Validate our parameters.
    if (ep == 0 || cp == 0)
 8007f44:	b328      	cbz	r0, 8007f92 <_Z14__create_fibermmmi+0x52>
 8007f46:	4606      	mov	r6, r0
 8007f48:	b329      	cbz	r1, 8007f96 <_Z14__create_fibermmmi+0x56>
 8007f4a:	4698      	mov	r8, r3
 8007f4c:	4617      	mov	r7, r2
 8007f4e:	460d      	mov	r5, r1
        return NULL;

    // Allocate a TCB from the new fiber. This will come from the fiber pool if availiable,
    // else a new one will be allocated on the heap.
    Fiber *newFiber = getFiberContext();
 8007f50:	f7ff fece 	bl	8007cf0 <_Z15getFiberContextv>

    // If we're out of memory, there's nothing we can do.
    if (newFiber == NULL)
 8007f54:	4604      	mov	r4, r0
 8007f56:	b1b8      	cbz	r0, 8007f88 <_Z14__create_fibermmmi+0x48>
        return NULL;

    tcb_configure_args(newFiber->tcb, ep, cp, pm);
 8007f58:	463b      	mov	r3, r7
 8007f5a:	462a      	mov	r2, r5
 8007f5c:	4631      	mov	r1, r6
 8007f5e:	6800      	ldr	r0, [r0, #0]
 8007f60:	f7f9 f981 	bl	8001266 <tcb_configure_args>
    tcb_configure_sp(newFiber->tcb, INITIAL_STACK_DEPTH);
 8007f64:	6825      	ldr	r5, [r4, #0]
 8007f66:	f7f9 f91f 	bl	80011a8 <fiber_initial_stack_base>
 8007f6a:	1f01      	subs	r1, r0, #4
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	f7f9 f970 	bl	8001252 <tcb_configure_sp>
    tcb_configure_lr(newFiber->tcb, parameterised ? (PROCESSOR_WORD_TYPE) &launch_new_fiber_param : (PROCESSOR_WORD_TYPE) &launch_new_fiber);
 8007f72:	6820      	ldr	r0, [r4, #0]
 8007f74:	f1b8 0f00 	cmp.w	r8, #0
 8007f78:	d009      	beq.n	8007f8e <_Z14__create_fibermmmi+0x4e>
 8007f7a:	4908      	ldr	r1, [pc, #32]	; (8007f9c <_Z14__create_fibermmmi+0x5c>)
 8007f7c:	f7f9 f967 	bl	800124e <tcb_configure_lr>

    // Add new fiber to the run queue.
    queue_fiber(newFiber, &runQueue);
 8007f80:	4907      	ldr	r1, [pc, #28]	; (8007fa0 <_Z14__create_fibermmmi+0x60>)
 8007f82:	4620      	mov	r0, r4
 8007f84:	f001 fe50 	bl	8009c28 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>

    return newFiber;
}
 8007f88:	4620      	mov	r0, r4
 8007f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tcb_configure_lr(newFiber->tcb, parameterised ? (PROCESSOR_WORD_TYPE) &launch_new_fiber_param : (PROCESSOR_WORD_TYPE) &launch_new_fiber);
 8007f8e:	4905      	ldr	r1, [pc, #20]	; (8007fa4 <_Z14__create_fibermmmi+0x64>)
 8007f90:	e7f4      	b.n	8007f7c <_Z14__create_fibermmmi+0x3c>
        return NULL;
 8007f92:	2400      	movs	r4, #0
 8007f94:	e7f8      	b.n	8007f88 <_Z14__create_fibermmmi+0x48>
 8007f96:	2400      	movs	r4, #0
 8007f98:	e7f6      	b.n	8007f88 <_Z14__create_fibermmmi+0x48>
 8007f9a:	bf00      	nop
 8007f9c:	08009cfb 	.word	0x08009cfb
 8007fa0:	20002954 	.word	0x20002954
 8007fa4:	08009cdd 	.word	0x08009cdd

08007fa8 <_ZN5codal24scheduler_runqueue_emptyEv>:
  *
  * @return The number of fibers currently on the run queue
  */
int codal::scheduler_runqueue_empty()
{
    return (runQueue == NULL);
 8007fa8:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <_ZN5codal24scheduler_runqueue_emptyEv+0xc>)
 8007faa:	6818      	ldr	r0, [r3, #0]
}
 8007fac:	fab0 f080 	clz	r0, r0
 8007fb0:	0940      	lsrs	r0, r0, #5
 8007fb2:	4770      	bx	lr
 8007fb4:	20002954 	.word	0x20002954

08007fb8 <_ZN5codal4idleEv>:
/**
  * Set of tasks to perform when idle.
  * Service any background tasks that are required, and attempt a power efficient sleep.
  */
void codal::idle()
{
 8007fb8:	b500      	push	{lr}
 8007fba:	b083      	sub	sp, #12
    // Prevent an idle loop of death:
    // We will return to idle after processing any idle events that add anything
    // to our run queue, we use the DEVICE_SCHEDULER_IDLE flag to determine this
    // scenario.
    if(!(fiber_flags & DEVICE_SCHEDULER_IDLE))
 8007fbc:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <_ZN5codal4idleEv+0x40>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	f013 0f02 	tst.w	r3, #2
 8007fc4:	d005      	beq.n	8007fd2 <_ZN5codal4idleEv+0x1a>
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
    }

    // If the above did create any useful work, enter power efficient sleep.
    if(scheduler_runqueue_empty())
 8007fc6:	f7ff ffef 	bl	8007fa8 <_ZN5codal24scheduler_runqueue_emptyEv>
 8007fca:	b968      	cbnz	r0, 8007fe8 <_ZN5codal4idleEv+0x30>
        // because we enforce MESSAGE_BUS_LISTENER_IMMEDIATE for listeners placed
        // on the scheduler.
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
        target_wait_for_event();
    }
}
 8007fcc:	b003      	add	sp, #12
 8007fce:	f85d fb04 	ldr.w	pc, [sp], #4
        fiber_flags |= DEVICE_SCHEDULER_IDLE;
 8007fd2:	f043 0302 	orr.w	r3, r3, #2
 8007fd6:	4a08      	ldr	r2, [pc, #32]	; (8007ff8 <_ZN5codal4idleEv+0x40>)
 8007fd8:	7013      	strb	r3, [r2, #0]
        Event(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE);
 8007fda:	2301      	movs	r3, #1
 8007fdc:	2202      	movs	r2, #2
 8007fde:	210f      	movs	r1, #15
 8007fe0:	4668      	mov	r0, sp
 8007fe2:	f002 faee 	bl	800a5c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
 8007fe6:	e7ee      	b.n	8007fc6 <_ZN5codal4idleEv+0xe>
        fiber_flags &= ~DEVICE_SCHEDULER_IDLE;
 8007fe8:	4a03      	ldr	r2, [pc, #12]	; (8007ff8 <_ZN5codal4idleEv+0x40>)
 8007fea:	7813      	ldrb	r3, [r2, #0]
 8007fec:	f023 0302 	bic.w	r3, r3, #2
 8007ff0:	7013      	strb	r3, [r2, #0]
        target_wait_for_event();
 8007ff2:	f7f9 f889 	bl	8001108 <target_wait_for_event>
}
 8007ff6:	e7e9      	b.n	8007fcc <_ZN5codal4idleEv+0x14>
 8007ff8:	20002a11 	.word	0x20002a11

08007ffc <_ZN5codal8scheduleEv>:
{
 8007ffc:	b570      	push	{r4, r5, r6, lr}
    if (!fiber_scheduler_running())
 8007ffe:	f7ff febd 	bl	8007d7c <_ZN5codal23fiber_scheduler_runningEv>
 8008002:	2800      	cmp	r0, #0
 8008004:	f000 80c6 	beq.w	8008194 <_ZN5codal8scheduleEv+0x198>
    Fiber *oldFiber = currentFiber;
 8008008:	4b64      	ldr	r3, [pc, #400]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 800800a:	681c      	ldr	r4, [r3, #0]
    if (currentFiber->flags & DEVICE_FIBER_FLAG_FOB)
 800800c:	6923      	ldr	r3, [r4, #16]
 800800e:	f013 0f01 	tst.w	r3, #1
 8008012:	d14d      	bne.n	80080b0 <_ZN5codal8scheduleEv+0xb4>
    if (runQueue == NULL)
 8008014:	4a62      	ldr	r2, [pc, #392]	; (80081a0 <_ZN5codal8scheduleEv+0x1a4>)
 8008016:	6812      	ldr	r2, [r2, #0]
 8008018:	2a00      	cmp	r2, #0
 800801a:	f000 808a 	beq.w	8008132 <_ZN5codal8scheduleEv+0x136>
    else if (currentFiber->queue == &runQueue)
 800801e:	6960      	ldr	r0, [r4, #20]
 8008020:	495f      	ldr	r1, [pc, #380]	; (80081a0 <_ZN5codal8scheduleEv+0x1a4>)
 8008022:	4288      	cmp	r0, r1
 8008024:	f000 808a 	beq.w	800813c <_ZN5codal8scheduleEv+0x140>
        currentFiber = runQueue;
 8008028:	495c      	ldr	r1, [pc, #368]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 800802a:	600a      	str	r2, [r1, #0]
    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 800802c:	4a5b      	ldr	r2, [pc, #364]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 800802e:	6811      	ldr	r1, [r2, #0]
 8008030:	4a5c      	ldr	r2, [pc, #368]	; (80081a4 <_ZN5codal8scheduleEv+0x1a8>)
 8008032:	6812      	ldr	r2, [r2, #0]
 8008034:	4291      	cmp	r1, r2
 8008036:	f000 8088 	beq.w	800814a <_ZN5codal8scheduleEv+0x14e>
    if (currentFiber != oldFiber)
 800803a:	4b58      	ldr	r3, [pc, #352]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	42a3      	cmp	r3, r4
 8008040:	f000 80a8 	beq.w	8008194 <_ZN5codal8scheduleEv+0x198>
        if (currentFiber == idleFiber)
 8008044:	4a57      	ldr	r2, [pc, #348]	; (80081a4 <_ZN5codal8scheduleEv+0x1a8>)
 8008046:	6812      	ldr	r2, [r2, #0]
 8008048:	4293      	cmp	r3, r2
 800804a:	f000 808d 	beq.w	8008168 <_ZN5codal8scheduleEv+0x16c>
        if (oldFiber == idleFiber || oldFiber->queue == &fiberPool)
 800804e:	4b55      	ldr	r3, [pc, #340]	; (80081a4 <_ZN5codal8scheduleEv+0x1a8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	42a3      	cmp	r3, r4
 8008054:	f000 8096 	beq.w	8008184 <_ZN5codal8scheduleEv+0x188>
 8008058:	6962      	ldr	r2, [r4, #20]
 800805a:	4b53      	ldr	r3, [pc, #332]	; (80081a8 <_ZN5codal8scheduleEv+0x1ac>)
 800805c:	429a      	cmp	r2, r3
 800805e:	f000 8091 	beq.w	8008184 <_ZN5codal8scheduleEv+0x188>
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 8008062:	6820      	ldr	r0, [r4, #0]
 8008064:	f7f9 f8f9 	bl	800125a <tcb_get_stack_base>
 8008068:	4605      	mov	r5, r0
 800806a:	f7f9 f8f8 	bl	800125e <get_current_sp>
 800806e:	1a2d      	subs	r5, r5, r0
    bufferSize = f->stack_top - f->stack_bottom;
 8008070:	68a2      	ldr	r2, [r4, #8]
 8008072:	6860      	ldr	r0, [r4, #4]
 8008074:	1a12      	subs	r2, r2, r0
    if (bufferSize < stackDepth)
 8008076:	4295      	cmp	r5, r2
 8008078:	d911      	bls.n	800809e <_ZN5codal8scheduleEv+0xa2>
        Fiber *prevCurrFiber = currentFiber;
 800807a:	4a48      	ldr	r2, [pc, #288]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 800807c:	6816      	ldr	r6, [r2, #0]
        currentFiber = f;
 800807e:	6014      	str	r4, [r2, #0]
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 8008080:	f105 0320 	add.w	r3, r5, #32
 8008084:	f023 051f 	bic.w	r5, r3, #31
        if (f->stack_bottom != 0)
 8008088:	2800      	cmp	r0, #0
 800808a:	f040 8084 	bne.w	8008196 <_ZN5codal8scheduleEv+0x19a>
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 800808e:	4628      	mov	r0, r5
 8008090:	f000 f94a 	bl	8008328 <device_malloc>
 8008094:	6060      	str	r0, [r4, #4]
        f->stack_top = f->stack_bottom + bufferSize;
 8008096:	4405      	add	r5, r0
 8008098:	60a5      	str	r5, [r4, #8]
        currentFiber = prevCurrFiber;
 800809a:	4b40      	ldr	r3, [pc, #256]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 800809c:	601e      	str	r6, [r3, #0]
            swap_context(oldFiber->tcb, oldFiber->stack_top, currentFiber->tcb, currentFiber->stack_top);
 800809e:	4b3f      	ldr	r3, [pc, #252]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	6893      	ldr	r3, [r2, #8]
 80080a4:	6812      	ldr	r2, [r2, #0]
 80080a6:	68a1      	ldr	r1, [r4, #8]
 80080a8:	6820      	ldr	r0, [r4, #0]
 80080aa:	f7f9 f8e7 	bl	800127c <swap_context>
 80080ae:	e071      	b.n	8008194 <_ZN5codal8scheduleEv+0x198>
        currentFiber->flags |= DEVICE_FIBER_FLAG_PARENT;
 80080b0:	f043 0302 	orr.w	r3, r3, #2
 80080b4:	6123      	str	r3, [r4, #16]
        forkedFiber->flags |= DEVICE_FIBER_FLAG_CHILD;
 80080b6:	4d3d      	ldr	r5, [pc, #244]	; (80081ac <_ZN5codal8scheduleEv+0x1b0>)
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	691a      	ldr	r2, [r3, #16]
 80080bc:	f042 0204 	orr.w	r2, r2, #4
 80080c0:	611a      	str	r2, [r3, #16]
        tcb_configure_stack_base(forkedFiber->tcb, tcb_get_sp(currentFiber->tcb));
 80080c2:	681e      	ldr	r6, [r3, #0]
 80080c4:	6820      	ldr	r0, [r4, #0]
 80080c6:	f7f9 f8cc 	bl	8001262 <tcb_get_sp>
 80080ca:	4601      	mov	r1, r0
 80080cc:	4630      	mov	r0, r6
 80080ce:	f7f9 f8c2 	bl	8001256 <tcb_configure_stack_base>
        verify_stack_size(forkedFiber);
 80080d2:	682d      	ldr	r5, [r5, #0]
    stackDepth = tcb_get_stack_base(f->tcb) - (PROCESSOR_WORD_TYPE)get_current_sp();
 80080d4:	6828      	ldr	r0, [r5, #0]
 80080d6:	f7f9 f8c0 	bl	800125a <tcb_get_stack_base>
 80080da:	4604      	mov	r4, r0
 80080dc:	f7f9 f8bf 	bl	800125e <get_current_sp>
 80080e0:	1a24      	subs	r4, r4, r0
    bufferSize = f->stack_top - f->stack_bottom;
 80080e2:	68aa      	ldr	r2, [r5, #8]
 80080e4:	6868      	ldr	r0, [r5, #4]
 80080e6:	1a12      	subs	r2, r2, r0
    if (bufferSize < stackDepth)
 80080e8:	4294      	cmp	r4, r2
 80080ea:	d90f      	bls.n	800810c <_ZN5codal8scheduleEv+0x110>
        Fiber *prevCurrFiber = currentFiber;
 80080ec:	4a2b      	ldr	r2, [pc, #172]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 80080ee:	6816      	ldr	r6, [r2, #0]
        currentFiber = f;
 80080f0:	6015      	str	r5, [r2, #0]
        bufferSize = (stackDepth + 32) & 0xffffffe0;
 80080f2:	f104 0320 	add.w	r3, r4, #32
 80080f6:	f023 041f 	bic.w	r4, r3, #31
        if (f->stack_bottom != 0)
 80080fa:	b9b8      	cbnz	r0, 800812c <_ZN5codal8scheduleEv+0x130>
        f->stack_bottom = (PROCESSOR_WORD_TYPE)malloc(bufferSize);
 80080fc:	4620      	mov	r0, r4
 80080fe:	f000 f913 	bl	8008328 <device_malloc>
 8008102:	6068      	str	r0, [r5, #4]
        f->stack_top = f->stack_bottom + bufferSize;
 8008104:	4404      	add	r4, r0
 8008106:	60ac      	str	r4, [r5, #8]
        currentFiber = prevCurrFiber;
 8008108:	4b24      	ldr	r3, [pc, #144]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 800810a:	601e      	str	r6, [r3, #0]
        save_context(forkedFiber->tcb, forkedFiber->stack_top);
 800810c:	4b27      	ldr	r3, [pc, #156]	; (80081ac <_ZN5codal8scheduleEv+0x1b0>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	6899      	ldr	r1, [r3, #8]
 8008112:	6818      	ldr	r0, [r3, #0]
 8008114:	f7f9 f8f3 	bl	80012fe <save_context>
        if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 8008118:	4b20      	ldr	r3, [pc, #128]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	691a      	ldr	r2, [r3, #16]
 800811e:	f012 0f02 	tst.w	r2, #2
 8008122:	d037      	beq.n	8008194 <_ZN5codal8scheduleEv+0x198>
            restore_register_context(currentFiber->tcb);
 8008124:	6818      	ldr	r0, [r3, #0]
 8008126:	f7f9 f924 	bl	8001372 <restore_register_context>
 800812a:	e033      	b.n	8008194 <_ZN5codal8scheduleEv+0x198>
            free((void *)f->stack_bottom);
 800812c:	f000 f926 	bl	800837c <device_free>
 8008130:	e7e4      	b.n	80080fc <_ZN5codal8scheduleEv+0x100>
        currentFiber = idleFiber;
 8008132:	4a1c      	ldr	r2, [pc, #112]	; (80081a4 <_ZN5codal8scheduleEv+0x1a8>)
 8008134:	6811      	ldr	r1, [r2, #0]
 8008136:	4a19      	ldr	r2, [pc, #100]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 8008138:	6011      	str	r1, [r2, #0]
 800813a:	e777      	b.n	800802c <_ZN5codal8scheduleEv+0x30>
        currentFiber = currentFiber->next == NULL ? runQueue : currentFiber->next;
 800813c:	69a1      	ldr	r1, [r4, #24]
 800813e:	b111      	cbz	r1, 8008146 <_ZN5codal8scheduleEv+0x14a>
 8008140:	4a16      	ldr	r2, [pc, #88]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 8008142:	6011      	str	r1, [r2, #0]
 8008144:	e772      	b.n	800802c <_ZN5codal8scheduleEv+0x30>
 8008146:	4611      	mov	r1, r2
 8008148:	e7fa      	b.n	8008140 <_ZN5codal8scheduleEv+0x144>
    if (currentFiber == idleFiber && oldFiber->flags & DEVICE_FIBER_FLAG_DO_NOT_PAGE)
 800814a:	f013 0f08 	tst.w	r3, #8
 800814e:	f43f af74 	beq.w	800803a <_ZN5codal8scheduleEv+0x3e>
        currentFiber = oldFiber;
 8008152:	4b12      	ldr	r3, [pc, #72]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 8008154:	601c      	str	r4, [r3, #0]
            idle();
 8008156:	f7ff ff2f 	bl	8007fb8 <_ZN5codal4idleEv>
        while (runQueue == NULL);
 800815a:	4b11      	ldr	r3, [pc, #68]	; (80081a0 <_ZN5codal8scheduleEv+0x1a4>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f9      	beq.n	8008156 <_ZN5codal8scheduleEv+0x15a>
        currentFiber = runQueue;
 8008162:	4a0e      	ldr	r2, [pc, #56]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	e768      	b.n	800803a <_ZN5codal8scheduleEv+0x3e>
            tcb_configure_sp(idleFiber->tcb, INITIAL_STACK_DEPTH);
 8008168:	6815      	ldr	r5, [r2, #0]
 800816a:	f7f9 f81d 	bl	80011a8 <fiber_initial_stack_base>
 800816e:	1f01      	subs	r1, r0, #4
 8008170:	4628      	mov	r0, r5
 8008172:	f7f9 f86e 	bl	8001252 <tcb_configure_sp>
            tcb_configure_lr(idleFiber->tcb, (PROCESSOR_WORD_TYPE)&idle_task);
 8008176:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <_ZN5codal8scheduleEv+0x1a8>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	490d      	ldr	r1, [pc, #52]	; (80081b0 <_ZN5codal8scheduleEv+0x1b4>)
 800817c:	6818      	ldr	r0, [r3, #0]
 800817e:	f7f9 f866 	bl	800124e <tcb_configure_lr>
 8008182:	e764      	b.n	800804e <_ZN5codal8scheduleEv+0x52>
            swap_context(NULL, 0, currentFiber->tcb, currentFiber->stack_top);
 8008184:	4b05      	ldr	r3, [pc, #20]	; (800819c <_ZN5codal8scheduleEv+0x1a0>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	6893      	ldr	r3, [r2, #8]
 800818a:	6812      	ldr	r2, [r2, #0]
 800818c:	2100      	movs	r1, #0
 800818e:	4608      	mov	r0, r1
 8008190:	f7f9 f874 	bl	800127c <swap_context>
}
 8008194:	bd70      	pop	{r4, r5, r6, pc}
            free((void *)f->stack_bottom);
 8008196:	f000 f8f1 	bl	800837c <device_free>
 800819a:	e778      	b.n	800808e <_ZN5codal8scheduleEv+0x92>
 800819c:	20002944 	.word	0x20002944
 80081a0:	20002954 	.word	0x20002954
 80081a4:	2000295c 	.word	0x2000295c
 80081a8:	20002958 	.word	0x20002958
 80081ac:	20002950 	.word	0x20002950
 80081b0:	08009d13 	.word	0x08009d13

080081b4 <_ZN5codal11fiber_sleepEm>:
{
 80081b4:	b538      	push	{r3, r4, r5, lr}
 80081b6:	4604      	mov	r4, r0
    if (!fiber_scheduler_running())
 80081b8:	f7ff fde0 	bl	8007d7c <_ZN5codal23fiber_scheduler_runningEv>
 80081bc:	b180      	cbz	r0, 80081e0 <_ZN5codal11fiber_sleepEm+0x2c>
    Fiber *f = handle_fob();
 80081be:	f7ff fdc3 	bl	8007d48 <_ZL10handle_fobv>
 80081c2:	4605      	mov	r5, r0
    f->context = system_timer_current_time() + t;
 80081c4:	f000 f95a 	bl	800847c <_ZN5codal25system_timer_current_timeEv>
 80081c8:	4420      	add	r0, r4
 80081ca:	60e8      	str	r0, [r5, #12]
    dequeue_fiber(f);
 80081cc:	4628      	mov	r0, r5
 80081ce:	f001 fd42 	bl	8009c56 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
    queue_fiber(f, &sleepQueue);
 80081d2:	4905      	ldr	r1, [pc, #20]	; (80081e8 <_ZN5codal11fiber_sleepEm+0x34>)
 80081d4:	4628      	mov	r0, r5
 80081d6:	f001 fd27 	bl	8009c28 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    schedule();
 80081da:	f7ff ff0f 	bl	8007ffc <_ZN5codal8scheduleEv>
}
 80081de:	bd38      	pop	{r3, r4, r5, pc}
        target_wait(t);
 80081e0:	4620      	mov	r0, r4
 80081e2:	f7f8 ff99 	bl	8001118 <target_wait>
        return;
 80081e6:	e7fa      	b.n	80081de <_ZN5codal11fiber_sleepEm+0x2a>
 80081e8:	2000294c 	.word	0x2000294c

080081ec <_ZN5codal13release_fiberEv>:
{
 80081ec:	b538      	push	{r3, r4, r5, lr}
    if (!fiber_scheduler_running())
 80081ee:	f7ff fdc5 	bl	8007d7c <_ZN5codal23fiber_scheduler_runningEv>
 80081f2:	b900      	cbnz	r0, 80081f6 <_ZN5codal13release_fiberEv+0xa>
}
 80081f4:	bd38      	pop	{r3, r4, r5, pc}
    dequeue_fiber(currentFiber);
 80081f6:	4d17      	ldr	r5, [pc, #92]	; (8008254 <_ZN5codal13release_fiberEv+0x68>)
 80081f8:	6828      	ldr	r0, [r5, #0]
 80081fa:	f001 fd2c 	bl	8009c56 <_ZN5codal13dequeue_fiberEPNS_5FiberE>
    queue_fiber(currentFiber, &fiberPool);
 80081fe:	4c16      	ldr	r4, [pc, #88]	; (8008258 <_ZN5codal13release_fiberEv+0x6c>)
 8008200:	4621      	mov	r1, r4
 8008202:	6828      	ldr	r0, [r5, #0]
 8008204:	f001 fd10 	bl	8009c28 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>
    for (Fiber *p = fiberPool; p; p = p->next) {
 8008208:	6824      	ldr	r4, [r4, #0]
    int numFree = 0;
 800820a:	2200      	movs	r2, #0
 800820c:	e001      	b.n	8008212 <_ZN5codal13release_fiberEv+0x26>
        numFree++;
 800820e:	3201      	adds	r2, #1
    for (Fiber *p = fiberPool; p; p = p->next) {
 8008210:	461c      	mov	r4, r3
 8008212:	b184      	cbz	r4, 8008236 <_ZN5codal13release_fiberEv+0x4a>
        if (!p->next && numFree > 3) {
 8008214:	69a3      	ldr	r3, [r4, #24]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1f9      	bne.n	800820e <_ZN5codal13release_fiberEv+0x22>
 800821a:	2a03      	cmp	r2, #3
 800821c:	ddf7      	ble.n	800820e <_ZN5codal13release_fiberEv+0x22>
            p->prev->next = NULL;
 800821e:	69e3      	ldr	r3, [r4, #28]
 8008220:	2200      	movs	r2, #0
 8008222:	619a      	str	r2, [r3, #24]
            free(p->tcb);
 8008224:	6820      	ldr	r0, [r4, #0]
 8008226:	f000 f8a9 	bl	800837c <device_free>
            free((void *)p->stack_bottom);
 800822a:	6860      	ldr	r0, [r4, #4]
 800822c:	f000 f8a6 	bl	800837c <device_free>
            free(p);
 8008230:	4620      	mov	r0, r4
 8008232:	f000 f8a3 	bl	800837c <device_free>
    currentFiber->flags = 0;
 8008236:	4b07      	ldr	r3, [pc, #28]	; (8008254 <_ZN5codal13release_fiberEv+0x68>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2200      	movs	r2, #0
 800823c:	611a      	str	r2, [r3, #16]
    tcb_configure_stack_base(currentFiber->tcb, fiber_initial_stack_base());
 800823e:	681c      	ldr	r4, [r3, #0]
 8008240:	f7f8 ffb2 	bl	80011a8 <fiber_initial_stack_base>
 8008244:	4601      	mov	r1, r0
 8008246:	4620      	mov	r0, r4
 8008248:	f7f9 f805 	bl	8001256 <tcb_configure_stack_base>
    schedule();
 800824c:	f7ff fed6 	bl	8007ffc <_ZN5codal8scheduleEv>
 8008250:	e7d0      	b.n	80081f4 <_ZN5codal13release_fiberEv+0x8>
 8008252:	bf00      	nop
 8008254:	20002944 	.word	0x20002944
 8008258:	20002958 	.word	0x20002958

0800825c <_ZN5codal6invokeEPFvPvES0_>:
    if (entry_fn == NULL)
 800825c:	2800      	cmp	r0, #0
 800825e:	d03a      	beq.n	80082d6 <_ZN5codal6invokeEPFvPvES0_+0x7a>
{
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4605      	mov	r5, r0
 8008264:	460c      	mov	r4, r1
    if (!fiber_scheduler_running())
 8008266:	f7ff fd89 	bl	8007d7c <_ZN5codal23fiber_scheduler_runningEv>
 800826a:	2800      	cmp	r0, #0
 800826c:	d036      	beq.n	80082dc <_ZN5codal6invokeEPFvPvES0_+0x80>
    if (currentFiber->flags & (DEVICE_FIBER_FLAG_FOB | DEVICE_FIBER_FLAG_PARENT | DEVICE_FIBER_FLAG_CHILD) || HAS_THREAD_USER_DATA)
 800826e:	4b1c      	ldr	r3, [pc, #112]	; (80082e0 <_ZN5codal6invokeEPFvPvES0_+0x84>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	691a      	ldr	r2, [r3, #16]
 8008274:	f012 0f07 	tst.w	r2, #7
 8008278:	d101      	bne.n	800827e <_ZN5codal6invokeEPFvPvES0_+0x22>
 800827a:	6a1a      	ldr	r2, [r3, #32]
 800827c:	b132      	cbz	r2, 800828c <_ZN5codal6invokeEPFvPvES0_+0x30>
        create_fiber(entry_fn, param);
 800827e:	4a19      	ldr	r2, [pc, #100]	; (80082e4 <_ZN5codal6invokeEPFvPvES0_+0x88>)
 8008280:	4621      	mov	r1, r4
 8008282:	4628      	mov	r0, r5
 8008284:	f001 fd10 	bl	8009ca8 <_ZN5codal12create_fiberEPFvPvES0_S2_>
        return DEVICE_OK;
 8008288:	2000      	movs	r0, #0
}
 800828a:	bd38      	pop	{r3, r4, r5, pc}
    save_register_context(currentFiber->tcb);
 800828c:	6818      	ldr	r0, [r3, #0]
 800828e:	f7f9 f858 	bl	8001342 <save_register_context>
    if (currentFiber->flags & DEVICE_FIBER_FLAG_PARENT)
 8008292:	4b13      	ldr	r3, [pc, #76]	; (80082e0 <_ZN5codal6invokeEPFvPvES0_+0x84>)
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	6913      	ldr	r3, [r2, #16]
 8008298:	f013 0f02 	tst.w	r3, #2
 800829c:	d111      	bne.n	80082c2 <_ZN5codal6invokeEPFvPvES0_+0x66>
    currentFiber->flags |= DEVICE_FIBER_FLAG_FOB;
 800829e:	f043 0301 	orr.w	r3, r3, #1
 80082a2:	6113      	str	r3, [r2, #16]
    entry_fn(param);
 80082a4:	4620      	mov	r0, r4
 80082a6:	47a8      	blx	r5
    currentFiber->user_data = NULL;
 80082a8:	4b0d      	ldr	r3, [pc, #52]	; (80082e0 <_ZN5codal6invokeEPFvPvES0_+0x84>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2200      	movs	r2, #0
 80082ae:	621a      	str	r2, [r3, #32]
    currentFiber->flags &= ~DEVICE_FIBER_FLAG_FOB;
 80082b0:	691a      	ldr	r2, [r3, #16]
 80082b2:	f022 0101 	bic.w	r1, r2, #1
 80082b6:	6119      	str	r1, [r3, #16]
    if (currentFiber->flags & DEVICE_FIBER_FLAG_CHILD)
 80082b8:	f012 0f04 	tst.w	r2, #4
 80082bc:	d106      	bne.n	80082cc <_ZN5codal6invokeEPFvPvES0_+0x70>
    return DEVICE_OK;
 80082be:	2000      	movs	r0, #0
 80082c0:	e7e3      	b.n	800828a <_ZN5codal6invokeEPFvPvES0_+0x2e>
        currentFiber->flags &= ~DEVICE_FIBER_FLAG_PARENT;
 80082c2:	f023 0303 	bic.w	r3, r3, #3
 80082c6:	6113      	str	r3, [r2, #16]
        return DEVICE_OK;
 80082c8:	2000      	movs	r0, #0
 80082ca:	e7de      	b.n	800828a <_ZN5codal6invokeEPFvPvES0_+0x2e>
        release_fiber(param);
 80082cc:	4620      	mov	r0, r4
 80082ce:	f001 fd0c 	bl	8009cea <_ZN5codal13release_fiberEPv>
    return DEVICE_OK;
 80082d2:	2000      	movs	r0, #0
 80082d4:	e7d9      	b.n	800828a <_ZN5codal6invokeEPFvPvES0_+0x2e>
        return DEVICE_INVALID_PARAMETER;
 80082d6:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 80082da:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 80082dc:	4802      	ldr	r0, [pc, #8]	; (80082e8 <_ZN5codal6invokeEPFvPvES0_+0x8c>)
 80082de:	e7d4      	b.n	800828a <_ZN5codal6invokeEPFvPvES0_+0x2e>
 80082e0:	20002944 	.word	0x20002944
 80082e4:	08009ceb 	.word	0x08009ceb
 80082e8:	fffffc16 	.word	0xfffffc16

080082ec <_Z18device_create_heapmm>:
  * code, and user code targetting the runtime. External code can choose to include this file, or
  * simply use the standard heap.
  */

int device_create_heap(PROCESSOR_WORD_TYPE start, PROCESSOR_WORD_TYPE end)
{
 80082ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ee:	4606      	mov	r6, r0
 80082f0:	460c      	mov	r4, r1
    HeapDefinition *h = &heap[heap_count];
 80082f2:	4d0b      	ldr	r5, [pc, #44]	; (8008320 <_Z18device_create_heapmm+0x34>)
 80082f4:	782f      	ldrb	r7, [r5, #0]
    if (end <= start || end - start < DEVICE_HEAP_BLOCK_SIZE*2 || end % DEVICE_HEAP_BLOCK_SIZE != 0 || start % DEVICE_HEAP_BLOCK_SIZE != 0)
        return DEVICE_INVALID_PARAMETER;
#endif

    // Disable IRQ temporarily to ensure no race conditions!
    target_disable_irq();
 80082f6:	f7f8 ffa3 	bl	8001240 <target_disable_irq>

    // Record the dimensions of this new heap
    h->heap_start = (PROCESSOR_WORD_TYPE *)start;
 80082fa:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <_Z18device_create_heapmm+0x38>)
 80082fc:	f843 6037 	str.w	r6, [r3, r7, lsl #3]
    h->heap_end = (PROCESSOR_WORD_TYPE *)end;
 8008300:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008304:	605c      	str	r4, [r3, #4]

    // Initialise the heap as being completely empty and available for use.
    *h->heap_start = DEVICE_HEAP_BLOCK_FREE | (((PROCESSOR_WORD_TYPE) h->heap_end - (PROCESSOR_WORD_TYPE) h->heap_start) / DEVICE_HEAP_BLOCK_SIZE);
 8008306:	1ba4      	subs	r4, r4, r6
 8008308:	08a4      	lsrs	r4, r4, #2
 800830a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800830e:	6034      	str	r4, [r6, #0]

    heap_count++;
 8008310:	782b      	ldrb	r3, [r5, #0]
 8008312:	3301      	adds	r3, #1
 8008314:	702b      	strb	r3, [r5, #0]

    // Enable Interrupts
    target_enable_irq();
 8008316:	f7f8 ff91 	bl	800123c <target_enable_irq>
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    device_heap_print();
#endif

    return DEVICE_OK;
}
 800831a:	2000      	movs	r0, #0
 800831c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831e:	bf00      	nop
 8008320:	20002a13 	.word	0x20002a13
 8008324:	20002964 	.word	0x20002964

08008328 <device_malloc>:
  * @param size The amount of memory, in bytes, to allocate.
  *
  * @return A pointer to the allocated memory, or NULL if insufficient memory is available.
  */
void* device_malloc (size_t size)
{
 8008328:	b510      	push	{r4, lr}
    static uint8_t initialised = 0;
    void *p;

    if (size <= 0)
 800832a:	b1d8      	cbz	r0, 8008364 <device_malloc+0x3c>
 800832c:	4604      	mov	r4, r0
        return NULL;

    if (!initialised)
 800832e:	4b0e      	ldr	r3, [pc, #56]	; (8008368 <device_malloc+0x40>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	b13b      	cbz	r3, 8008344 <device_malloc+0x1c>
#endif
        initialised = 1;
    }

#if (DEVICE_MAXIMUM_HEAPS == 1)
    p = device_malloc_in(size, heap[0]);
 8008334:	490d      	ldr	r1, [pc, #52]	; (800836c <device_malloc+0x44>)
 8008336:	4620      	mov	r0, r4
 8008338:	f001 fcf1 	bl	8009d1e <_Z16device_malloc_injR14HeapDefinition>
        if (p != NULL)
            break;
    }
#endif

    if (p != NULL)
 800833c:	4604      	mov	r4, r0
 800833e:	b168      	cbz	r0, 800835c <device_malloc+0x34>
#if CONFIG_ENABLED(DEVICE_PANIC_HEAP_FULL)
    target_panic(DEVICE_OOM);
#endif

    return NULL;
}
 8008340:	4620      	mov	r0, r4
 8008342:	bd10      	pop	{r4, pc}
        heap_count = 0;
 8008344:	4b0a      	ldr	r3, [pc, #40]	; (8008370 <device_malloc+0x48>)
 8008346:	2200      	movs	r2, #0
 8008348:	701a      	strb	r2, [r3, #0]
        device_create_heap((PROCESSOR_WORD_TYPE)(codal_heap_start), (PROCESSOR_WORD_TYPE)(DEVICE_STACK_BASE) - (PROCESSOR_WORD_TYPE)(DEVICE_STACK_SIZE));
 800834a:	490a      	ldr	r1, [pc, #40]	; (8008374 <device_malloc+0x4c>)
 800834c:	4b0a      	ldr	r3, [pc, #40]	; (8008378 <device_malloc+0x50>)
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	f7ff ffcc 	bl	80082ec <_Z18device_create_heapmm>
        initialised = 1;
 8008354:	4b04      	ldr	r3, [pc, #16]	; (8008368 <device_malloc+0x40>)
 8008356:	2201      	movs	r2, #1
 8008358:	701a      	strb	r2, [r3, #0]
 800835a:	e7eb      	b.n	8008334 <device_malloc+0xc>
    target_panic(DEVICE_OOM);
 800835c:	2014      	movs	r0, #20
 800835e:	f7f8 ff13 	bl	8001188 <target_panic>
    return NULL;
 8008362:	e7ed      	b.n	8008340 <device_malloc+0x18>
        return NULL;
 8008364:	2400      	movs	r4, #0
 8008366:	e7eb      	b.n	8008340 <device_malloc+0x18>
 8008368:	20002a12 	.word	0x20002a12
 800836c:	20002964 	.word	0x20002964
 8008370:	20002a13 	.word	0x20002a13
 8008374:	20004800 	.word	0x20004800
 8008378:	20000808 	.word	0x20000808

0800837c <device_free>:
#if (CODAL_DEBUG >= CODAL_DEBUG_HEAP)
    if (heap_count > 0)
        DMESG("device_free:   %p\n", mem);
#endif
    // Sanity check.
    if (memory == NULL)
 800837c:	b1e0      	cbz	r0, 80083b8 <device_free+0x3c>
{
 800837e:	b510      	push	{r4, lr}
 8008380:	4604      	mov	r4, r0

#if (DEVICE_MAXIMUM_HEAPS > 1)
    for (i=0; i < heap_count; i++)
#endif
    {
        if(memory > heap[i].heap_start && memory < heap[i].heap_end)
 8008382:	4b0e      	ldr	r3, [pc, #56]	; (80083bc <device_free+0x40>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4283      	cmp	r3, r0
 8008388:	d212      	bcs.n	80083b0 <device_free+0x34>
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <device_free+0x40>)
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	4283      	cmp	r3, r0
 8008390:	d90e      	bls.n	80083b0 <device_free+0x34>
        {
            // The memory block given is part of this heap, so we can simply
            // flag that this memory area is now free, and we're done.
            if (*cb == 0 || *cb & DEVICE_HEAP_BLOCK_FREE)
 8008392:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	dd06      	ble.n	80083a8 <device_free+0x2c>
                target_panic(DEVICE_HEAP_ERROR);
            *cb |= DEVICE_HEAP_BLOCK_FREE;
 800839a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800839e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083a2:	f844 3c04 	str.w	r3, [r4, #-4]
            return;
 80083a6:	e006      	b.n	80083b6 <device_free+0x3a>
                target_panic(DEVICE_HEAP_ERROR);
 80083a8:	201e      	movs	r0, #30
 80083aa:	f7f8 feed 	bl	8001188 <target_panic>
 80083ae:	e7f4      	b.n	800839a <device_free+0x1e>
        }
    }

    // If we reach here, then the memory is not part of any registered heap.
    target_panic(DEVICE_HEAP_ERROR);
 80083b0:	201e      	movs	r0, #30
 80083b2:	f7f8 fee9 	bl	8001188 <target_panic>
}
 80083b6:	bd10      	pop	{r4, pc}
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	20002964 	.word	0x20002964

080083c0 <_ZN5codal6SerialC1ERNS_3PinES2_hht>:
 *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/SerialBase.h
 *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/RawSerial.h
 *
 *       Buffers aren't allocated until the first send or receive respectively.
 */
Serial::Serial(Pin& tx, Pin& rx, uint8_t rxBufferSize, uint8_t txBufferSize, uint16_t id) : tx(tx), rx(rx)
 80083c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c4:	4604      	mov	r4, r0
 80083c6:	4688      	mov	r8, r1
 80083c8:	4617      	mov	r7, r2
 80083ca:	461e      	mov	r6, r3
        {
 80083cc:	4b12      	ldr	r3, [pc, #72]	; (8008418 <_ZN5codal6SerialC1ERNS_3PinES2_hht+0x58>)
 80083ce:	6003      	str	r3, [r0, #0]
            this->id = 0;
 80083d0:	2500      	movs	r5, #0
 80083d2:	8085      	strh	r5, [r0, #4]
            this->status = 0;
 80083d4:	80c5      	strh	r5, [r0, #6]
            addComponent();
 80083d6:	f7ff fb8b 	bl	8007af0 <_ZN5codal14CodalComponent12addComponentEv>
 80083da:	4b10      	ldr	r3, [pc, #64]	; (800841c <_ZN5codal6SerialC1ERNS_3PinES2_hht+0x5c>)
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	f8c4 8008 	str.w	r8, [r4, #8]
 80083e2:	60e7      	str	r7, [r4, #12]
 80083e4:	f104 0010 	add.w	r0, r4, #16
 80083e8:	f002 f975 	bl	800a6d6 <_ZN5codal13ManagedStringC1Ev>
{
    this->id = id;
 80083ec:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80083f0:	80a3      	strh	r3, [r4, #4]

    // + 1 so there is a usable buffer size, of the size the user requested.
    this->rxBuffSize = rxBufferSize + 1;
 80083f2:	3601      	adds	r6, #1
 80083f4:	7726      	strb	r6, [r4, #28]
    this->txBuffSize = txBufferSize + 1;
 80083f6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80083fa:	3301      	adds	r3, #1
 80083fc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    this->rxBuff = NULL;
 8008400:	61a5      	str	r5, [r4, #24]
    this->txBuff = NULL;
 8008402:	6265      	str	r5, [r4, #36]	; 0x24

    this->rxBuffHead = 0;
 8008404:	83e5      	strh	r5, [r4, #30]
    this->rxBuffTail = 0;
 8008406:	8425      	strh	r5, [r4, #32]

    this->txBuffHead = 0;
 8008408:	8565      	strh	r5, [r4, #42]	; 0x2a
    this->txBuffTail = 0;
 800840a:	85a5      	strh	r5, [r4, #44]	; 0x2c

    this->rxBuffHeadMatch = -1;
 800840c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008410:	6163      	str	r3, [r4, #20]
}
 8008412:	4620      	mov	r0, r4
 8008414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008418:	0800ae44 	.word	0x0800ae44
 800841c:	0800ae94 	.word	0x0800ae94

08008420 <_ZN5codal6SerialD1Ev>:
int Serial::txInUse()
{
    return (status & CODAL_SERIAL_TX_IN_USE);
}

Serial::~Serial()
 8008420:	b510      	push	{r4, lr}
 8008422:	4604      	mov	r4, r0
 8008424:	4b06      	ldr	r3, [pc, #24]	; (8008440 <_ZN5codal6SerialD1Ev+0x20>)
 8008426:	f840 3b10 	str.w	r3, [r0], #16
 800842a:	f002 f8f8 	bl	800a61e <_ZN5codal13ManagedStringD1Ev>
        {
 800842e:	4b05      	ldr	r3, [pc, #20]	; (8008444 <_ZN5codal6SerialD1Ev+0x24>)
 8008430:	6023      	str	r3, [r4, #0]
            status = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	80e3      	strh	r3, [r4, #6]
            removeComponent();
 8008436:	4620      	mov	r0, r4
 8008438:	f7ff fbc0 	bl	8007bbc <_ZN5codal14CodalComponent15removeComponentEv>
{

 800843c:	4620      	mov	r0, r4
 800843e:	bd10      	pop	{r4, pc}
 8008440:	0800ae94 	.word	0x0800ae94
 8008444:	0800ae44 	.word	0x0800ae44

08008448 <_ZN5codal5TimerC1Ev>:
}

/**
 * Constructor for a generic system clock interface.
 */
Timer::Timer()
 8008448:	b510      	push	{r4, lr}
 800844a:	4604      	mov	r4, r0
 800844c:	4b09      	ldr	r3, [pc, #36]	; (8008474 <_ZN5codal5TimerC1Ev+0x2c>)
 800844e:	6003      	str	r3, [r0, #0]
{
    // Register ourselves as the defualt timer - most recent timer wins.
    system_timer = this;
 8008450:	4b09      	ldr	r3, [pc, #36]	; (8008478 <_ZN5codal5TimerC1Ev+0x30>)
 8008452:	6018      	str	r0, [r3, #0]

    // Create an empty event list of the default size.
    eventListSize = CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE;
 8008454:	230a      	movs	r3, #10
 8008456:	6183      	str	r3, [r0, #24]
    timerEventList = (TimerEvent *) malloc(sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
 8008458:	2078      	movs	r0, #120	; 0x78
 800845a:	f7ff ff65 	bl	8008328 <device_malloc>
 800845e:	6120      	str	r0, [r4, #16]
      *
      * @param b the number of bytes to clear.
      */
    inline void *memclr(void *a, size_t b)
    {
        return memset(a,0,b);
 8008460:	2278      	movs	r2, #120	; 0x78
 8008462:	2100      	movs	r1, #0
 8008464:	f7f9 fc88 	bl	8001d78 <memset>
    memclr(timerEventList, sizeof(TimerEvent) * CODAL_TIMER_DEFAULT_EVENT_LIST_SIZE);
    nextTimerEvent = NULL;
 8008468:	2300      	movs	r3, #0
 800846a:	6163      	str	r3, [r4, #20]

    // Reset clock
    currentTime = 0;
 800846c:	6063      	str	r3, [r4, #4]
    currentTimeUs = 0;
 800846e:	60a3      	str	r3, [r4, #8]
}
 8008470:	4620      	mov	r0, r4
 8008472:	bd10      	pop	{r4, pc}
 8008474:	0800aecc 	.word	0x0800aecc
 8008478:	2000296c 	.word	0x2000296c

0800847c <_ZN5codal25system_timer_current_timeEv>:
  * Determines the time since the device was powered on.
  *
  * @return the current time since power on in milliseconds
  */
CODAL_TIMESTAMP codal::system_timer_current_time()
{
 800847c:	b508      	push	{r3, lr}
    if(system_timer == NULL)
 800847e:	4b04      	ldr	r3, [pc, #16]	; (8008490 <_ZN5codal25system_timer_current_timeEv+0x14>)
 8008480:	6818      	ldr	r0, [r3, #0]
 8008482:	b110      	cbz	r0, 800848a <_ZN5codal25system_timer_current_timeEv+0xe>
        return 0;

    return system_timer->getTime();
 8008484:	f001 fe56 	bl	800a134 <_ZN5codal5Timer7getTimeEv>
}
 8008488:	bd08      	pop	{r3, pc}
        return 0;
 800848a:	2000      	movs	r0, #0
 800848c:	e7fc      	b.n	8008488 <_ZN5codal25system_timer_current_timeEv+0xc>
 800848e:	bf00      	nop
 8008490:	2000296c 	.word	0x2000296c

08008494 <_ZN5codal27system_timer_event_every_usEmtt>:
  * @param the value to fire against the current system_timer id.
  *
  * @return DEVICE_OK or DEVICE_NOT_SUPPORTED if no timer has been registered.
  */
int codal::system_timer_event_every_us(CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
{
 8008494:	b510      	push	{r4, lr}
    if(system_timer == NULL)
 8008496:	4b06      	ldr	r3, [pc, #24]	; (80084b0 <_ZN5codal27system_timer_event_every_usEmtt+0x1c>)
 8008498:	681c      	ldr	r4, [r3, #0]
 800849a:	b134      	cbz	r4, 80084aa <_ZN5codal27system_timer_event_every_usEmtt+0x16>
 800849c:	4613      	mov	r3, r2
 800849e:	460a      	mov	r2, r1
 80084a0:	4601      	mov	r1, r0
        return DEVICE_NOT_SUPPORTED;

    return system_timer->eventEveryUs(period, id, value);
 80084a2:	4620      	mov	r0, r4
 80084a4:	f001 fe89 	bl	800a1ba <_ZN5codal5Timer12eventEveryUsEmtt>
}
 80084a8:	bd10      	pop	{r4, pc}
        return DEVICE_NOT_SUPPORTED;
 80084aa:	4802      	ldr	r0, [pc, #8]	; (80084b4 <_ZN5codal27system_timer_event_every_usEmtt+0x20>)
 80084ac:	e7fc      	b.n	80084a8 <_ZN5codal27system_timer_event_every_usEmtt+0x14>
 80084ae:	bf00      	nop
 80084b0:	2000296c 	.word	0x2000296c
 80084b4:	fffffc16 	.word	0xfffffc16

080084b8 <_ZN5codal10EventModel4sendENS_5EventE>:
        virtual int send(Event)
 80084b8:	b082      	sub	sp, #8
 80084ba:	ab02      	add	r3, sp, #8
 80084bc:	e903 0006 	stmdb	r3, {r1, r2}
        }
 80084c0:	4801      	ldr	r0, [pc, #4]	; (80084c8 <_ZN5codal10EventModel4sendENS_5EventE+0x10>)
 80084c2:	b002      	add	sp, #8
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	fffffc16 	.word	0xfffffc16

080084cc <_ZN5codal10EventModel3addEPNS_8ListenerE>:
        }
 80084cc:	4800      	ldr	r0, [pc, #0]	; (80084d0 <_ZN5codal10EventModel3addEPNS_8ListenerE+0x4>)
 80084ce:	4770      	bx	lr
 80084d0:	fffffc16 	.word	0xfffffc16

080084d4 <_ZN5codal10EventModel6removeEPNS_8ListenerE>:
        }
 80084d4:	4800      	ldr	r0, [pc, #0]	; (80084d8 <_ZN5codal10EventModel6removeEPNS_8ListenerE+0x4>)
 80084d6:	4770      	bx	lr
 80084d8:	fffffc16 	.word	0xfffffc16

080084dc <_ZN5codal10MessageBus3addEPNS_8ListenerE>:
{
    Listener *l, *p;
    int methodCallback;

    //handler can't be NULL!
    if (newListener == NULL)
 80084dc:	2900      	cmp	r1, #0
 80084de:	d06c      	beq.n	80085ba <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xde>
{
 80084e0:	b570      	push	{r4, r5, r6, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	460d      	mov	r5, r1
 80084e6:	4606      	mov	r6, r0
        return DEVICE_INVALID_PARAMETER;

    l = listeners;
 80084e8:	6944      	ldr	r4, [r0, #20]
 80084ea:	e005      	b.n	80084f8 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1c>

    // We always check the ID, VALUE and CB_METHOD fields.
    // If we have a callback to a method, check the cb_method class. Otherwise, the cb function point is sufficient.
    while (l != NULL)
    {
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 80084ec:	2100      	movs	r1, #0

        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 80084ee:	6822      	ldr	r2, [r4, #0]
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d00d      	beq.n	8008512 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x36>
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;

            return DEVICE_NOT_SUPPORTED;
        }

        l = l->next;
 80084f6:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 80084f8:	b314      	cbz	r4, 8008540 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x64>
        methodCallback = (newListener->flags & MESSAGE_BUS_LISTENER_METHOD) && (l->flags & MESSAGE_BUS_LISTENER_METHOD);
 80084fa:	88ab      	ldrh	r3, [r5, #4]
 80084fc:	f013 0f02 	tst.w	r3, #2
 8008500:	d0f4      	beq.n	80084ec <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x10>
 8008502:	88a3      	ldrh	r3, [r4, #4]
 8008504:	f013 0f02 	tst.w	r3, #2
 8008508:	d101      	bne.n	800850e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x32>
 800850a:	2100      	movs	r1, #0
 800850c:	e7ef      	b.n	80084ee <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x12>
 800850e:	2101      	movs	r1, #1
 8008510:	e7ed      	b.n	80084ee <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x12>
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 8008512:	b949      	cbnz	r1, 8008528 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x4c>
 8008514:	68a2      	ldr	r2, [r4, #8]
 8008516:	68ab      	ldr	r3, [r5, #8]
 8008518:	429a      	cmp	r2, r3
 800851a:	d1ec      	bne.n	80084f6 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1a>
            if(l->flags & MESSAGE_BUS_LISTENER_DELETING)
 800851c:	88a3      	ldrh	r3, [r4, #4]
 800851e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008522:	d108      	bne.n	8008536 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x5a>
            return DEVICE_NOT_SUPPORTED;
 8008524:	4826      	ldr	r0, [pc, #152]	; (80085c0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xe4>)
 8008526:	e03a      	b.n	800859e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc2>
        if (l->id == newListener->id && l->value == newListener->value && (methodCallback ? *l->cb_method == *newListener->cb_method : l->cb == newListener->cb))
 8008528:	68a9      	ldr	r1, [r5, #8]
 800852a:	68a0      	ldr	r0, [r4, #8]
 800852c:	f002 f958 	bl	800a7e0 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 8008530:	2800      	cmp	r0, #0
 8008532:	d0e0      	beq.n	80084f6 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x1a>
 8008534:	e7f2      	b.n	800851c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x40>
                l->flags &= ~MESSAGE_BUS_LISTENER_DELETING;
 8008536:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800853a:	80a3      	strh	r3, [r4, #4]
            return DEVICE_NOT_SUPPORTED;
 800853c:	4820      	ldr	r0, [pc, #128]	; (80085c0 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xe4>)
 800853e:	e02e      	b.n	800859e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc2>
    }

    // We have a valid, new event handler. Add it to the list.
    // if listeners is null - we can automatically add this listener to the list at the beginning...
    if (listeners == NULL)
 8008540:	6974      	ldr	r4, [r6, #20]
 8008542:	b114      	cbz	r4, 800854a <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x6e>
    // We maintain an ordered list of listeners.
    // The chain is held stictly in increasing order of ID (first level), then value code (second level).
    // Find the correct point in the chain for this event.
    // Adding a listener is a rare occurance, so we just walk the list...

    p = listeners;
 8008544:	4622      	mov	r2, r4
    l = listeners;
 8008546:	4623      	mov	r3, r4
 8008548:	e00b      	b.n	8008562 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x86>
        listeners = newListener;
 800854a:	6175      	str	r5, [r6, #20]
        Event(DEVICE_ID_MESSAGE_BUS_LISTENER, newListener->id);
 800854c:	2301      	movs	r3, #1
 800854e:	882a      	ldrh	r2, [r5, #0]
 8008550:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8008554:	4668      	mov	r0, sp
 8008556:	f002 f834 	bl	800a5c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
        return DEVICE_OK;
 800855a:	2000      	movs	r0, #0
 800855c:	e01f      	b.n	800859e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc2>

    while (l != NULL && l->id < newListener->id)
    {
        p = l;
 800855e:	461a      	mov	r2, r3
        l = l->next;
 8008560:	69db      	ldr	r3, [r3, #28]
    while (l != NULL && l->id < newListener->id)
 8008562:	b11b      	cbz	r3, 800856c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x90>
 8008564:	8818      	ldrh	r0, [r3, #0]
 8008566:	8829      	ldrh	r1, [r5, #0]
 8008568:	4288      	cmp	r0, r1
 800856a:	d3f8      	bcc.n	800855e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x82>
    }

    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 800856c:	b153      	cbz	r3, 8008584 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa8>
 800856e:	8818      	ldrh	r0, [r3, #0]
 8008570:	8829      	ldrh	r1, [r5, #0]
 8008572:	4288      	cmp	r0, r1
 8008574:	d106      	bne.n	8008584 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa8>
 8008576:	8858      	ldrh	r0, [r3, #2]
 8008578:	8869      	ldrh	r1, [r5, #2]
 800857a:	4288      	cmp	r0, r1
 800857c:	d202      	bcs.n	8008584 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xa8>
    {
        p = l;
 800857e:	461a      	mov	r2, r3
        l = l->next;
 8008580:	69db      	ldr	r3, [r3, #28]
    while (l != NULL && l->id == newListener->id && l->value < newListener->value)
 8008582:	e7f3      	b.n	800856c <_ZN5codal10MessageBus3addEPNS_8ListenerE+0x90>
    }

    //add at front of list
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 8008584:	4294      	cmp	r4, r2
 8008586:	d00c      	beq.n	80085a2 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xc6>
    }

    //add after p
    else
    {
        newListener->next = p->next;
 8008588:	69d3      	ldr	r3, [r2, #28]
 800858a:	61eb      	str	r3, [r5, #28]
        p->next = newListener;
 800858c:	61d5      	str	r5, [r2, #28]
    }

    Event(DEVICE_ID_MESSAGE_BUS_LISTENER, newListener->id);
 800858e:	2301      	movs	r3, #1
 8008590:	882a      	ldrh	r2, [r5, #0]
 8008592:	f240 31fd 	movw	r1, #1021	; 0x3fd
 8008596:	a802      	add	r0, sp, #8
 8008598:	f002 f813 	bl	800a5c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
    return DEVICE_OK;
 800859c:	2000      	movs	r0, #0
}
 800859e:	b004      	add	sp, #16
 80085a0:	bd70      	pop	{r4, r5, r6, pc}
    if (p == listeners && (newListener->id < p->id || (p->id == newListener->id && p->value > newListener->value)))
 80085a2:	8829      	ldrh	r1, [r5, #0]
 80085a4:	8813      	ldrh	r3, [r2, #0]
 80085a6:	4299      	cmp	r1, r3
 80085a8:	d304      	bcc.n	80085b4 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xd8>
 80085aa:	d1ed      	bne.n	8008588 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xac>
 80085ac:	8851      	ldrh	r1, [r2, #2]
 80085ae:	886b      	ldrh	r3, [r5, #2]
 80085b0:	4299      	cmp	r1, r3
 80085b2:	d9e9      	bls.n	8008588 <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xac>
        newListener->next = p;
 80085b4:	61ea      	str	r2, [r5, #28]
        listeners = newListener;
 80085b6:	6175      	str	r5, [r6, #20]
 80085b8:	e7e9      	b.n	800858e <_ZN5codal10MessageBus3addEPNS_8ListenerE+0xb2>
        return DEVICE_INVALID_PARAMETER;
 80085ba:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 80085be:	4770      	bx	lr
 80085c0:	fffffc16 	.word	0xfffffc16

080085c4 <_ZN5codal10MessageBus7processERNS_5EventEb>:
{
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	460d      	mov	r5, r1
 80085c8:	4617      	mov	r7, r2
    l = listeners;
 80085ca:	6944      	ldr	r4, [r0, #20]
    int complete = 1;
 80085cc:	2601      	movs	r6, #1
 80085ce:	e004      	b.n	80085da <_ZN5codal10MessageBus7processERNS_5EventEb+0x16>
                listenerUrgent = true;
 80085d0:	2301      	movs	r3, #1
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 80085d2:	42bb      	cmp	r3, r7
 80085d4:	d01b      	beq.n	800860e <_ZN5codal10MessageBus7processERNS_5EventEb+0x4a>
                complete = 0;
 80085d6:	2600      	movs	r6, #0
        l = l->next;
 80085d8:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 80085da:	2c00      	cmp	r4, #0
 80085dc:	d032      	beq.n	8008644 <_ZN5codal10MessageBus7processERNS_5EventEb+0x80>
        if((l->id == evt.source || l->id == DEVICE_ID_ANY) && (l->value == evt.value || l->value == DEVICE_EVT_ANY))
 80085de:	8823      	ldrh	r3, [r4, #0]
 80085e0:	882a      	ldrh	r2, [r5, #0]
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d001      	beq.n	80085ea <_ZN5codal10MessageBus7processERNS_5EventEb+0x26>
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1f6      	bne.n	80085d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
 80085ea:	8863      	ldrh	r3, [r4, #2]
 80085ec:	886a      	ldrh	r2, [r5, #2]
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d001      	beq.n	80085f6 <_ZN5codal10MessageBus7processERNS_5EventEb+0x32>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d1f0      	bne.n	80085d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
            if (fiber_scheduler_running())
 80085f6:	f7ff fbc1 	bl	8007d7c <_ZN5codal23fiber_scheduler_runningEv>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d0e8      	beq.n	80085d0 <_ZN5codal10MessageBus7processERNS_5EventEb+0xc>
                listenerUrgent = (l->flags & MESSAGE_BUS_LISTENER_IMMEDIATE) == MESSAGE_BUS_LISTENER_IMMEDIATE;
 80085fe:	88a3      	ldrh	r3, [r4, #4]
 8008600:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008604:	2bc0      	cmp	r3, #192	; 0xc0
 8008606:	bf14      	ite	ne
 8008608:	2300      	movne	r3, #0
 800860a:	2301      	moveq	r3, #1
 800860c:	e7e1      	b.n	80085d2 <_ZN5codal10MessageBus7processERNS_5EventEb+0xe>
            if(listenerUrgent == urgent && !(l->flags & MESSAGE_BUS_LISTENER_DELETING))
 800860e:	88a2      	ldrh	r2, [r4, #4]
 8008610:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8008614:	d114      	bne.n	8008640 <_ZN5codal10MessageBus7processERNS_5EventEb+0x7c>
                l->evt = evt;
 8008616:	f104 0310 	add.w	r3, r4, #16
 800861a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800861e:	e883 0003 	stmia.w	r3, {r0, r1}
                if (l->flags & MESSAGE_BUS_LISTENER_NONBLOCKING || !fiber_scheduler_running())
 8008622:	f012 0f40 	tst.w	r2, #64	; 0x40
 8008626:	d102      	bne.n	800862e <_ZN5codal10MessageBus7processERNS_5EventEb+0x6a>
 8008628:	f7ff fba8 	bl	8007d7c <_ZN5codal23fiber_scheduler_runningEv>
 800862c:	b918      	cbnz	r0, 8008636 <_ZN5codal10MessageBus7processERNS_5EventEb+0x72>
                    async_callback(l);
 800862e:	4620      	mov	r0, r4
 8008630:	f001 fe53 	bl	800a2da <_Z14async_callbackPv>
 8008634:	e7d0      	b.n	80085d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
                    invoke(async_callback, l);
 8008636:	4621      	mov	r1, r4
 8008638:	4803      	ldr	r0, [pc, #12]	; (8008648 <_ZN5codal10MessageBus7processERNS_5EventEb+0x84>)
 800863a:	f7ff fe0f 	bl	800825c <_ZN5codal6invokeEPFvPvES0_>
 800863e:	e7cb      	b.n	80085d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
                complete = 0;
 8008640:	2600      	movs	r6, #0
 8008642:	e7c9      	b.n	80085d8 <_ZN5codal10MessageBus7processERNS_5EventEb+0x14>
}
 8008644:	4630      	mov	r0, r6
 8008646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008648:	0800a2db 	.word	0x0800a2db

0800864c <_ZN5codal19allocateNotifyEventEv>:
/**
 * Allocate a NOTIFY event code dynamicaly, for generally purpose condition synchronisation.
 */
uint16_t allocateNotifyEvent()
{
    return userNotifyId++;
 800864c:	4b02      	ldr	r3, [pc, #8]	; (8008658 <_ZN5codal19allocateNotifyEventEv+0xc>)
 800864e:	8818      	ldrh	r0, [r3, #0]
 8008650:	1c42      	adds	r2, r0, #1
 8008652:	801a      	strh	r2, [r3, #0]
}
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	20001804 	.word	0x20001804

0800865c <_ZN5codal22MemberFunctionCallbackC1INS_10MessageBusEEEPT_MS3_FvNS_5EventEE>:
      * @param object The object the callback method should be invooked on.
      *
      * @param method The method to invoke.
      */
    template <typename T>
    MemberFunctionCallback::MemberFunctionCallback(T* object, void (T::*method)(Event e))
 800865c:	b410      	push	{r4}
 800865e:	b083      	sub	sp, #12
 8008660:	4604      	mov	r4, r0
 8008662:	4668      	mov	r0, sp
 8008664:	e880 000c 	stmia.w	r0, {r2, r3}
    {
        this->object = object;
 8008668:	4622      	mov	r2, r4
 800866a:	f842 1b04 	str.w	r1, [r2], #4
 800866e:	2300      	movs	r3, #0
 8008670:	6093      	str	r3, [r2, #8]
 8008672:	60d3      	str	r3, [r2, #12]
        memclr(this->method, sizeof(this->method));
        memcpy(this->method, &method, sizeof(method));
 8008674:	4603      	mov	r3, r0
 8008676:	cb03      	ldmia	r3!, {r0, r1}
 8008678:	6060      	str	r0, [r4, #4]
 800867a:	6051      	str	r1, [r2, #4]
        invoke = &MemberFunctionCallback::methodCall<T>;
 800867c:	4b02      	ldr	r3, [pc, #8]	; (8008688 <_ZN5codal22MemberFunctionCallbackC1INS_10MessageBusEEEPT_MS3_FvNS_5EventEE+0x2c>)
 800867e:	6163      	str	r3, [r4, #20]
    }
 8008680:	4620      	mov	r0, r4
 8008682:	b003      	add	sp, #12
 8008684:	bc10      	pop	{r4}
 8008686:	4770      	bx	lr
 8008688:	0800a2a5 	.word	0x0800a2a5

0800868c <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt>:
      *
      * @return DEVICE_OK on success or DEVICE_INVALID_PARAMETER if the handler or object
      *         pointers are NULL.
      */
    template <typename T>
    int EventModel::listen(uint16_t id, uint16_t value, T* object, void (T::*handler)(Event), uint16_t flags)
 800868c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008690:	b085      	sub	sp, #20
 8008692:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
    {
        if (object == NULL || handler == NULL)
 8008696:	b3ab      	cbz	r3, 8008704 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x78>
 8008698:	461f      	mov	r7, r3
 800869a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800869c:	b35b      	cbz	r3, 80086f6 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x6a>
            return DEVICE_INVALID_PARAMETER;

        if(id == DEVICE_ID_SCHEDULER && flags != MESSAGE_BUS_LISTENER_IMMEDIATE)
 800869e:	290f      	cmp	r1, #15
 80086a0:	d102      	bne.n	80086a8 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x1c>
 80086a2:	f1b8 0fc0 	cmp.w	r8, #192	; 0xc0
 80086a6:	d130      	bne.n	800870a <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x7e>
 80086a8:	4691      	mov	r9, r2
 80086aa:	460c      	mov	r4, r1
 80086ac:	4605      	mov	r5, r0
            return DEVICE_INVALID_PARAMETER;

        Listener *newListener = new Listener(id, value, object, handler, flags);
 80086ae:	2020      	movs	r0, #32
 80086b0:	f7f9 fdfc 	bl	80022ac <_Znwj>
 80086b4:	4606      	mov	r6, r0
 80086b6:	f8cd 8008 	str.w	r8, [sp, #8]
 80086ba:	ab0c      	add	r3, sp, #48	; 0x30
 80086bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80086c0:	e88d 0003 	stmia.w	sp, {r0, r1}
 80086c4:	463b      	mov	r3, r7
 80086c6:	464a      	mov	r2, r9
 80086c8:	4621      	mov	r1, r4
 80086ca:	4630      	mov	r0, r6
 80086cc:	f001 ff1d 	bl	800a50a <_ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt>

        if(add(newListener) == DEVICE_OK)
 80086d0:	682b      	ldr	r3, [r5, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	4631      	mov	r1, r6
 80086d6:	4628      	mov	r0, r5
 80086d8:	4798      	blx	r3
 80086da:	4603      	mov	r3, r0
 80086dc:	b138      	cbz	r0, 80086ee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
            return DEVICE_OK;

        delete newListener;
 80086de:	b1be      	cbz	r6, 8008710 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x84>
 80086e0:	4630      	mov	r0, r6
 80086e2:	f001 fb80 	bl	8009de6 <_ZN5codal8ListenerD1Ev>
 80086e6:	4630      	mov	r0, r6
 80086e8:	f7f9 fde4 	bl	80022b4 <_ZdlPv>
        return DEVICE_NOT_SUPPORTED;
 80086ec:	4b09      	ldr	r3, [pc, #36]	; (8008714 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x88>)
    }
 80086ee:	4618      	mov	r0, r3
 80086f0:	b005      	add	sp, #20
 80086f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (object == NULL || handler == NULL)
 80086f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086f8:	f013 0f01 	tst.w	r3, #1
 80086fc:	d1cf      	bne.n	800869e <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x12>
            return DEVICE_INVALID_PARAMETER;
 80086fe:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8008702:	e7f4      	b.n	80086ee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
 8008704:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8008708:	e7f1      	b.n	80086ee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
            return DEVICE_INVALID_PARAMETER;
 800870a:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800870e:	e7ee      	b.n	80086ee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
        return DEVICE_NOT_SUPPORTED;
 8008710:	4b00      	ldr	r3, [pc, #0]	; (8008714 <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x88>)
 8008712:	e7ec      	b.n	80086ee <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt+0x62>
 8008714:	fffffc16 	.word	0xfffffc16

08008718 <_ZN5codal10MessageBusC1Ev>:
MessageBus::MessageBus()
 8008718:	b530      	push	{r4, r5, lr}
 800871a:	b087      	sub	sp, #28
 800871c:	4604      	mov	r4, r0
    class EventModel
 800871e:	4b16      	ldr	r3, [pc, #88]	; (8008778 <_ZN5codal10MessageBusC1Ev+0x60>)
 8008720:	f840 3b08 	str.w	r3, [r0], #8
        {
 8008724:	4b15      	ldr	r3, [pc, #84]	; (800877c <_ZN5codal10MessageBusC1Ev+0x64>)
 8008726:	60a3      	str	r3, [r4, #8]
            this->id = 0;
 8008728:	2500      	movs	r5, #0
 800872a:	81a5      	strh	r5, [r4, #12]
            this->status = 0;
 800872c:	81e5      	strh	r5, [r4, #14]
            addComponent();
 800872e:	f7ff f9df 	bl	8007af0 <_ZN5codal14CodalComponent12addComponentEv>
 8008732:	4b13      	ldr	r3, [pc, #76]	; (8008780 <_ZN5codal10MessageBusC1Ev+0x68>)
 8008734:	f103 0208 	add.w	r2, r3, #8
 8008738:	6022      	str	r2, [r4, #0]
 800873a:	3328      	adds	r3, #40	; 0x28
 800873c:	60a3      	str	r3, [r4, #8]
    this->listeners = NULL;
 800873e:	6165      	str	r5, [r4, #20]
    this->evt_queue_head = NULL;
 8008740:	61a5      	str	r5, [r4, #24]
    this->evt_queue_tail = NULL;
 8008742:	61e5      	str	r5, [r4, #28]
    this->queueLength = 0;
 8008744:	8465      	strh	r5, [r4, #34]	; 0x22
    listen(DEVICE_ID_SCHEDULER, DEVICE_SCHEDULER_EVT_IDLE, this, &MessageBus::idle, MESSAGE_BUS_LISTENER_IMMEDIATE);
 8008746:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <_ZN5codal10MessageBusC1Ev+0x6c>)
 8008748:	9304      	str	r3, [sp, #16]
 800874a:	9505      	str	r5, [sp, #20]
 800874c:	23c0      	movs	r3, #192	; 0xc0
 800874e:	9302      	str	r3, [sp, #8]
 8008750:	ab06      	add	r3, sp, #24
 8008752:	e913 0003 	ldmdb	r3, {r0, r1}
 8008756:	e88d 0003 	stmia.w	sp, {r0, r1}
 800875a:	4623      	mov	r3, r4
 800875c:	2202      	movs	r2, #2
 800875e:	210f      	movs	r1, #15
 8008760:	4620      	mov	r0, r4
 8008762:	f7ff ff93 	bl	800868c <_ZN5codal10EventModel6listenINS_10MessageBusEEEittPT_MS3_FvNS_5EventEEt>
    if(EventModel::defaultEventBus == NULL)
 8008766:	4b08      	ldr	r3, [pc, #32]	; (8008788 <_ZN5codal10MessageBusC1Ev+0x70>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	b113      	cbz	r3, 8008772 <_ZN5codal10MessageBusC1Ev+0x5a>
}
 800876c:	4620      	mov	r0, r4
 800876e:	b007      	add	sp, #28
 8008770:	bd30      	pop	{r4, r5, pc}
        EventModel::defaultEventBus = this;
 8008772:	4b05      	ldr	r3, [pc, #20]	; (8008788 <_ZN5codal10MessageBusC1Ev+0x70>)
 8008774:	601c      	str	r4, [r3, #0]
 8008776:	e7f9      	b.n	800876c <_ZN5codal10MessageBusC1Ev+0x54>
 8008778:	0800aee4 	.word	0x0800aee4
 800877c:	0800ae44 	.word	0x0800ae44
 8008780:	0800aef0 	.word	0x0800aef0
 8008784:	0800a4cd 	.word	0x0800a4cd
 8008788:	20002970 	.word	0x20002970

0800878c <_ZN5codal10MessageBusD1Ev>:
}

/**
  * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
  */
MessageBus::~MessageBus()
 800878c:	b530      	push	{r4, r5, lr}
 800878e:	b085      	sub	sp, #20
 8008790:	4604      	mov	r4, r0
 8008792:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <_ZN5codal10MessageBusD1Ev+0x44>)
 8008794:	f103 0208 	add.w	r2, r3, #8
 8008798:	6002      	str	r2, [r0, #0]
 800879a:	3328      	adds	r3, #40	; 0x28
 800879c:	6083      	str	r3, [r0, #8]
{
    ignore(DEVICE_ID_SCHEDULER, DEVICE_EVT_ANY, this, &MessageBus::idle);
 800879e:	4b0d      	ldr	r3, [pc, #52]	; (80087d4 <_ZN5codal10MessageBusD1Ev+0x48>)
 80087a0:	9302      	str	r3, [sp, #8]
 80087a2:	2500      	movs	r5, #0
 80087a4:	9503      	str	r5, [sp, #12]
 80087a6:	ab04      	add	r3, sp, #16
 80087a8:	e913 0003 	ldmdb	r3, {r0, r1}
 80087ac:	e88d 0003 	stmia.w	sp, {r0, r1}
 80087b0:	4623      	mov	r3, r4
 80087b2:	462a      	mov	r2, r5
 80087b4:	210f      	movs	r1, #15
 80087b6:	4620      	mov	r0, r4
 80087b8:	f001 fec6 	bl	800a548 <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE>
        {
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <_ZN5codal10MessageBusD1Ev+0x4c>)
 80087be:	60a3      	str	r3, [r4, #8]
            status = 0;
 80087c0:	81e5      	strh	r5, [r4, #14]
            removeComponent();
 80087c2:	f104 0008 	add.w	r0, r4, #8
 80087c6:	f7ff f9f9 	bl	8007bbc <_ZN5codal14CodalComponent15removeComponentEv>
}
 80087ca:	4620      	mov	r0, r4
 80087cc:	b005      	add	sp, #20
 80087ce:	bd30      	pop	{r4, r5, pc}
 80087d0:	0800aef0 	.word	0x0800aef0
 80087d4:	0800a4cd 	.word	0x0800a4cd
 80087d8:	0800ae44 	.word	0x0800ae44

080087dc <_ZN5codal5Event4fireEv>:

/**
  * Fires this Event onto the Default EventModel, or a custom one!
  */
void Event::fire()
{
 80087dc:	b538      	push	{r3, r4, r5, lr}
    if(EventModel::defaultEventBus)
 80087de:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <_ZN5codal5Event4fireEv+0x18>)
 80087e0:	681c      	ldr	r4, [r3, #0]
 80087e2:	b12c      	cbz	r4, 80087f0 <_ZN5codal5Event4fireEv+0x14>
        EventModel::defaultEventBus->send(*this);
 80087e4:	6822      	ldr	r2, [r4, #0]
 80087e6:	6815      	ldr	r5, [r2, #0]
 80087e8:	e9d0 1200 	ldrd	r1, r2, [r0]
 80087ec:	4620      	mov	r0, r4
 80087ee:	47a8      	blx	r5
}
 80087f0:	bd38      	pop	{r3, r4, r5, pc}
 80087f2:	bf00      	nop
 80087f4:	20002970 	.word	0x20002970

080087f8 <_ZN5codal13ManagedString9initEmptyEv>:
  *
  * Configures this ManagedString to refer to the static EmptyString
  */
void ManagedString::initEmpty()
{
    ptr = EMPTY_DATA;
 80087f8:	4b01      	ldr	r3, [pc, #4]	; (8008800 <_ZN5codal13ManagedString9initEmptyEv+0x8>)
 80087fa:	6003      	str	r3, [r0, #0]
}
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	0800af2c 	.word	0x0800af2c

08008804 <_Z41__static_initialization_and_destruction_0ii>:
}

/**
  * Empty string constant literal
  */
ManagedString ManagedString::EmptyString(EMPTY_DATA);
 8008804:	2801      	cmp	r0, #1
 8008806:	d000      	beq.n	800880a <_Z41__static_initialization_and_destruction_0ii+0x6>
 8008808:	4770      	bx	lr
 800880a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800880e:	4299      	cmp	r1, r3
 8008810:	d1fa      	bne.n	8008808 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8008812:	b510      	push	{r4, lr}
 8008814:	4c05      	ldr	r4, [pc, #20]	; (800882c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8008816:	4906      	ldr	r1, [pc, #24]	; (8008830 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8008818:	4620      	mov	r0, r4
 800881a:	f001 ff1e 	bl	800a65a <_ZN5codal13ManagedStringC1EPNS_10StringDataE>
 800881e:	4a05      	ldr	r2, [pc, #20]	; (8008834 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8008820:	4905      	ldr	r1, [pc, #20]	; (8008838 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8008822:	4620      	mov	r0, r4
 8008824:	f7f8 fd24 	bl	8001270 <__aeabi_atexit>
 8008828:	bd10      	pop	{r4, pc}
 800882a:	bf00      	nop
 800882c:	20002974 	.word	0x20002974
 8008830:	0800af2c 	.word	0x0800af2c
 8008834:	20000850 	.word	0x20000850
 8008838:	0800a61f 	.word	0x0800a61f

0800883c <_ZN5codal4itoaEiPc>:
int codal::itoa(int n, char *s)
{
    int i = 0;
    int positive = (n >= 0);

    if (s == NULL)
 800883c:	b369      	cbz	r1, 800889a <_ZN5codal4itoaEiPc+0x5e>
{
 800883e:	b570      	push	{r4, r5, r6, lr}
 8008840:	460d      	mov	r5, r1
        return DEVICE_INVALID_PARAMETER;

    // Record the sign of the number,
    // Ensure our working value is positive.
    if (positive)
 8008842:	2800      	cmp	r0, #0
 8008844:	db02      	blt.n	800884c <_ZN5codal4itoaEiPc+0x10>
        n = -n;
 8008846:	4241      	negs	r1, r0
 8008848:	2400      	movs	r4, #0
 800884a:	e002      	b.n	8008852 <_ZN5codal4itoaEiPc+0x16>
 800884c:	4601      	mov	r1, r0
 800884e:	e7fb      	b.n	8008848 <_ZN5codal4itoaEiPc+0xc>

    // Calculate each character, starting with the LSB.
    do {
         s[i++] = abs(n % 10) + '0';
 8008850:	4634      	mov	r4, r6
 8008852:	4a13      	ldr	r2, [pc, #76]	; (80088a0 <_ZN5codal4itoaEiPc+0x64>)
 8008854:	fb82 3201 	smull	r3, r2, r2, r1
 8008858:	17cb      	asrs	r3, r1, #31
 800885a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800885e:	461a      	mov	r2, r3
 8008860:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008864:	005e      	lsls	r6, r3, #1
 8008866:	1b8b      	subs	r3, r1, r6
 8008868:	2b00      	cmp	r3, #0
 800886a:	bfb8      	it	lt
 800886c:	425b      	neglt	r3, r3
 800886e:	1c66      	adds	r6, r4, #1
 8008870:	3330      	adds	r3, #48	; 0x30
 8008872:	552b      	strb	r3, [r5, r4]
    } while (abs(n /= 10) > 0);
 8008874:	4611      	mov	r1, r2
 8008876:	2a00      	cmp	r2, #0
 8008878:	bfb8      	it	lt
 800887a:	4252      	neglt	r2, r2
 800887c:	2a00      	cmp	r2, #0
 800887e:	dce7      	bgt.n	8008850 <_ZN5codal4itoaEiPc+0x14>

    // Add a negative sign as needed
    if (!positive)
 8008880:	2800      	cmp	r0, #0
 8008882:	db06      	blt.n	8008892 <_ZN5codal4itoaEiPc+0x56>
 8008884:	4628      	mov	r0, r5
        s[i++] = '-';

    // Terminate the string.
    s[i] = '\0';
 8008886:	2400      	movs	r4, #0
 8008888:	55ac      	strb	r4, [r5, r6]

    // Flip the order.
    string_reverse(s);
 800888a:	f001 ff84 	bl	800a796 <_ZN5codal14string_reverseEPc>

    return DEVICE_OK;
 800888e:	4620      	mov	r0, r4
}
 8008890:	bd70      	pop	{r4, r5, r6, pc}
        s[i++] = '-';
 8008892:	232d      	movs	r3, #45	; 0x2d
 8008894:	55ab      	strb	r3, [r5, r6]
 8008896:	1ca6      	adds	r6, r4, #2
 8008898:	e7f4      	b.n	8008884 <_ZN5codal4itoaEiPc+0x48>
        return DEVICE_INVALID_PARAMETER;
 800889a:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800889e:	4770      	bx	lr
 80088a0:	66666667 	.word	0x66666667

080088a4 <_ZN5codal3_cm3Pin14setAnalogValueEi>:
  *         if the given pin does not have analog capability.
  */
int Pin::setAnalogValue(int value)
{
    //check if this pin has an analogue mode...
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 80088a4:	7903      	ldrb	r3, [r0, #4]
 80088a6:	f013 0f01 	tst.w	r3, #1
 80088aa:	d007      	beq.n	80088bc <_ZN5codal3_cm3Pin14setAnalogValueEi+0x18>
        return DEVICE_NOT_SUPPORTED;

    //sanitise the level value
    if(value < 0 || value > DEVICE_PIN_MAX_OUTPUT)
 80088ac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80088b0:	d201      	bcs.n	80088b6 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x12>
#ifdef TODO
    //obtain use of the DynamicPwm instance, if it has changed / configure if we do not have one
    if(obtainAnalogChannel() == DEVICE_OK)
        return ((DynamicPwm *)pin)->write(level);
#endif  //  TODO
    return DEVICE_OK;
 80088b2:	2000      	movs	r0, #0
}
 80088b4:	4770      	bx	lr
        return DEVICE_INVALID_PARAMETER;
 80088b6:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 80088ba:	4770      	bx	lr
        return DEVICE_NOT_SUPPORTED;
 80088bc:	4800      	ldr	r0, [pc, #0]	; (80088c0 <_ZN5codal3_cm3Pin14setAnalogValueEi+0x1c>)
 80088be:	4770      	bx	lr
 80088c0:	fffffc16 	.word	0xfffffc16

080088c4 <_ZN5codal3_cm3Pin9isTouchedEv>:
  * @endcode
  */
int Pin::isTouched()
{
    return DEVICE_NOT_SUPPORTED;
}
 80088c4:	4800      	ldr	r0, [pc, #0]	; (80088c8 <_ZN5codal3_cm3Pin9isTouchedEv+0x4>)
 80088c6:	4770      	bx	lr
 80088c8:	fffffc16 	.word	0xfffffc16

080088cc <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv>:
        return DEVICE_NOT_SUPPORTED;

    return ((DynamicPwm *)pin)->getPeriodUs();
#endif  //  TODO
    return DEVICE_NOT_SUPPORTED;
}
 80088cc:	4800      	ldr	r0, [pc, #0]	; (80088d0 <_ZN5codal3_cm3Pin17getAnalogPeriodUsEv+0x4>)
 80088ce:	4770      	bx	lr
 80088d0:	fffffc16 	.word	0xfffffc16

080088d4 <_ZN5codal3_cm3Pin15getAnalogPeriodEv>:
  *
  * @return the period on success, or DEVICE_NOT_SUPPORTED if the
  *         given pin is not configured as an analog output.
  */
int Pin::getAnalogPeriod()
{
 80088d4:	b508      	push	{r3, lr}
    return getAnalogPeriodUs()/1000;
 80088d6:	6803      	ldr	r3, [r0, #0]
 80088d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088da:	4798      	blx	r3
 80088dc:	4b02      	ldr	r3, [pc, #8]	; (80088e8 <_ZN5codal3_cm3Pin15getAnalogPeriodEv+0x14>)
 80088de:	fba3 3000 	umull	r3, r0, r3, r0
}
 80088e2:	0980      	lsrs	r0, r0, #6
 80088e4:	bd08      	pop	{r3, pc}
 80088e6:	bf00      	nop
 80088e8:	10624dd3 	.word	0x10624dd3

080088ec <_ZN5codal3_cm3Pin15setDigitalValueEi>:
{
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	4605      	mov	r5, r0
 80088f0:	460c      	mov	r4, r1
    debug_print("pin "); debug_println(value); ////
 80088f2:	4815      	ldr	r0, [pc, #84]	; (8008948 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x5c>)
 80088f4:	f7f9 fb64 	bl	8001fc0 <debug_print>
 80088f8:	4620      	mov	r0, r4
 80088fa:	f7f9 fb43 	bl	8001f84 <_Z13debug_printlni>
    if(!(PIN_CAPABILITY_DIGITAL & capability))
 80088fe:	792b      	ldrb	r3, [r5, #4]
 8008900:	f013 0f01 	tst.w	r3, #1
 8008904:	d01b      	beq.n	800893e <_ZN5codal3_cm3Pin15setDigitalValueEi+0x52>
    if (value < 0 || value > 1)
 8008906:	2c01      	cmp	r4, #1
 8008908:	d81b      	bhi.n	8008942 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x56>
	rcc_periph_clock_enable(RCC_GPIOC);
 800890a:	f44f 7041 	mov.w	r0, #772	; 0x304
 800890e:	f7f9 f808 	bl	8001922 <rcc_periph_clock_enable>
	gpio_set_mode(GPIOC, GPIO_MODE_OUTPUT_2_MHZ, GPIO_CNF_OUTPUT_PUSHPULL, GPIO13);
 8008912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008916:	2200      	movs	r2, #0
 8008918:	2102      	movs	r1, #2
 800891a:	480c      	ldr	r0, [pc, #48]	; (800894c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x60>)
 800891c:	f7f8 ffc2 	bl	80018a4 <gpio_set_mode>
    if (value) {
 8008920:	b934      	cbnz	r4, 8008930 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x44>
	    gpio_clear(GPIOC, GPIO13);
 8008922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008926:	4809      	ldr	r0, [pc, #36]	; (800894c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x60>)
 8008928:	f7f8 fff4 	bl	8001914 <gpio_clear>
    return DEVICE_OK;
 800892c:	4620      	mov	r0, r4
}
 800892e:	bd38      	pop	{r3, r4, r5, pc}
        gpio_set(GPIOC, GPIO13);
 8008930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008934:	4805      	ldr	r0, [pc, #20]	; (800894c <_ZN5codal3_cm3Pin15setDigitalValueEi+0x60>)
 8008936:	f7f8 ffeb 	bl	8001910 <gpio_set>
    return DEVICE_OK;
 800893a:	2000      	movs	r0, #0
 800893c:	e7f7      	b.n	800892e <_ZN5codal3_cm3Pin15setDigitalValueEi+0x42>
        return DEVICE_NOT_SUPPORTED;
 800893e:	4804      	ldr	r0, [pc, #16]	; (8008950 <_ZN5codal3_cm3Pin15setDigitalValueEi+0x64>)
 8008940:	e7f5      	b.n	800892e <_ZN5codal3_cm3Pin15setDigitalValueEi+0x42>
        return DEVICE_INVALID_PARAMETER;
 8008942:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 8008946:	e7f2      	b.n	800892e <_ZN5codal3_cm3Pin15setDigitalValueEi+0x42>
 8008948:	0800af30 	.word	0x0800af30
 800894c:	40011000 	.word	0x40011000
 8008950:	fffffc16 	.word	0xfffffc16

08008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>:
Pin::Pin(
 8008954:	b470      	push	{r4, r5, r6}
    rcc(rcc), port(port), pin(pin) {
 8008956:	f101 0664 	add.w	r6, r1, #100	; 0x64
          * Pin P0(DEVICE_ID_IO_P0, DEVICE_PIN_P0, PIN_CAPABILITY_ALL);
          * @endcode
          */
        Pin(int id, PinNumber name, PinCapability capability)
        {
            this->status = 0;
 800895a:	2500      	movs	r5, #0
 800895c:	8185      	strh	r5, [r0, #12]
            this->id = id;
 800895e:	81c6      	strh	r6, [r0, #14]
            this->name = name;
 8008960:	7401      	strb	r1, [r0, #16]
            this->capability = capability;
 8008962:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8008966:	7101      	strb	r1, [r0, #4]
 8008968:	4904      	ldr	r1, [pc, #16]	; (800897c <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE+0x28>)
 800896a:	6001      	str	r1, [r0, #0]
 800896c:	6142      	str	r2, [r0, #20]
 800896e:	6183      	str	r3, [r0, #24]
 8008970:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8008974:	8383      	strh	r3, [r0, #28]
    this->pullMode = DEVICE_DEFAULT_PULLMODE;
 8008976:	6085      	str	r5, [r0, #8]
}
 8008978:	bc70      	pop	{r4, r5, r6}
 800897a:	4770      	bx	lr
 800897c:	0800af40 	.word	0x0800af40

08008980 <_ZN5codal3_cm3Pin13setServoValueEiii>:
{
 8008980:	b538      	push	{r3, r4, r5, lr}
    if(!(PIN_CAPABILITY_ANALOG & capability))
 8008982:	7904      	ldrb	r4, [r0, #4]
 8008984:	f014 0f02 	tst.w	r4, #2
 8008988:	d024      	beq.n	80089d4 <_ZN5codal3_cm3Pin13setServoValueEiii+0x54>
    if(value < 0 || range < 1 || center < 1)
 800898a:	2900      	cmp	r1, #0
 800898c:	db24      	blt.n	80089d8 <_ZN5codal3_cm3Pin13setServoValueEiii+0x58>
 800898e:	2a00      	cmp	r2, #0
 8008990:	dd25      	ble.n	80089de <_ZN5codal3_cm3Pin13setServoValueEiii+0x5e>
 8008992:	2b00      	cmp	r3, #0
 8008994:	dd26      	ble.n	80089e4 <_ZN5codal3_cm3Pin13setServoValueEiii+0x64>
    if(value > DEVICE_PIN_MAX_SERVO_RANGE)
 8008996:	29b4      	cmp	r1, #180	; 0xb4
 8008998:	dd00      	ble.n	800899c <_ZN5codal3_cm3Pin13setServoValueEiii+0x1c>
        value = DEVICE_PIN_MAX_SERVO_RANGE;
 800899a:	21b4      	movs	r1, #180	; 0xb4
    int lower = (center - (range / 2)) * 1000;
 800899c:	eb02 74d2 	add.w	r4, r2, r2, lsr #31
 80089a0:	eba3 0364 	sub.w	r3, r3, r4, asr #1
 80089a4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    value = value * 1000;
 80089a8:	fb05 f101 	mul.w	r1, r5, r1
    int scaled = lower + (range * (value / DEVICE_PIN_MAX_SERVO_RANGE));
 80089ac:	4c0f      	ldr	r4, [pc, #60]	; (80089ec <_ZN5codal3_cm3Pin13setServoValueEiii+0x6c>)
 80089ae:	fb84 c401 	smull	ip, r4, r4, r1
 80089b2:	440c      	add	r4, r1
 80089b4:	17c9      	asrs	r1, r1, #31
 80089b6:	ebc1 11e4 	rsb	r1, r1, r4, asr #7
 80089ba:	fb02 f101 	mul.w	r1, r2, r1
 80089be:	fb05 1303 	mla	r3, r5, r3, r1
    return setServoPulseUs(scaled / 1000);
 80089c2:	490b      	ldr	r1, [pc, #44]	; (80089f0 <_ZN5codal3_cm3Pin13setServoValueEiii+0x70>)
 80089c4:	fb81 2103 	smull	r2, r1, r1, r3
 80089c8:	17db      	asrs	r3, r3, #31
 80089ca:	ebc3 11a1 	rsb	r1, r3, r1, asr #6
 80089ce:	f001 ff5e 	bl	800a88e <_ZN5codal3_cm3Pin15setServoPulseUsEi>
}
 80089d2:	bd38      	pop	{r3, r4, r5, pc}
        return DEVICE_NOT_SUPPORTED;
 80089d4:	4807      	ldr	r0, [pc, #28]	; (80089f4 <_ZN5codal3_cm3Pin13setServoValueEiii+0x74>)
 80089d6:	e7fc      	b.n	80089d2 <_ZN5codal3_cm3Pin13setServoValueEiii+0x52>
        return DEVICE_INVALID_PARAMETER;
 80089d8:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 80089dc:	e7f9      	b.n	80089d2 <_ZN5codal3_cm3Pin13setServoValueEiii+0x52>
 80089de:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 80089e2:	e7f6      	b.n	80089d2 <_ZN5codal3_cm3Pin13setServoValueEiii+0x52>
 80089e4:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 80089e8:	e7f3      	b.n	80089d2 <_ZN5codal3_cm3Pin13setServoValueEiii+0x52>
 80089ea:	bf00      	nop
 80089ec:	b60b60b7 	.word	0xb60b60b7
 80089f0:	10624dd3 	.word	0x10624dd3
 80089f4:	fffffc16 	.word	0xfffffc16

080089f8 <_ZN5codal3_cm6SerialD1Ev>:
 80089f8:	b510      	push	{r4, lr}
 80089fa:	4604      	mov	r4, r0
 80089fc:	4b02      	ldr	r3, [pc, #8]	; (8008a08 <_ZN5codal3_cm6SerialD1Ev+0x10>)
 80089fe:	6003      	str	r3, [r0, #0]
 8008a00:	f7ff fd0e 	bl	8008420 <_ZN5codal6SerialD1Ev>
 8008a04:	4620      	mov	r0, r4
 8008a06:	bd10      	pop	{r4, pc}
 8008a08:	0800af94 	.word	0x0800af94

08008a0c <_ZN5codal3_cm6SerialD0Ev>:
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4b04      	ldr	r3, [pc, #16]	; (8008a24 <_ZN5codal3_cm6SerialD0Ev+0x18>)
 8008a12:	6003      	str	r3, [r0, #0]
 8008a14:	f7ff fd04 	bl	8008420 <_ZN5codal6SerialD1Ev>
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f7f9 fc4b 	bl	80022b4 <_ZdlPv>
 8008a1e:	4620      	mov	r0, r4
 8008a20:	bd10      	pop	{r4, pc}
 8008a22:	bf00      	nop
 8008a24:	0800af94 	.word	0x0800af94

08008a28 <_ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh>:
          *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/SerialBase.h
          *       -https://github.com/mbedmicro/mbed/blob/master/libraries/mbed/api/RawSerial.h
          *
          *       Buffers aren't allocated until the first send or receive respectively.
          */
        Serial::Serial(Pin &tx, Pin &rx, uint8_t rxBufferSize, uint8_t txBufferSize) 
 8008a28:	b530      	push	{r4, r5, lr}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	461d      	mov	r5, r3
            : codal::Serial(tx, rx)
 8008a30:	230c      	movs	r3, #12
 8008a32:	9301      	str	r3, [sp, #4]
 8008a34:	2314      	movs	r3, #20
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	f7ff fcc2 	bl	80083c0 <_ZN5codal6SerialC1ERNS_3PinES2_hht>
 8008a3c:	4b0d      	ldr	r3, [pc, #52]	; (8008a74 <_ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh+0x4c>)
 8008a3e:	6023      	str	r3, [r4, #0]
        {
            // + 1 so there is a usable buffer size, of the size the user requested.
            this->rxBuffSize = rxBufferSize + 1;
 8008a40:	3501      	adds	r5, #1
 8008a42:	7725      	strb	r5, [r4, #28]
            this->txBuffSize = txBufferSize + 1;
 8008a44:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

            this->rxBuff = NULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	61a3      	str	r3, [r4, #24]
            this->txBuff = NULL;
 8008a52:	6263      	str	r3, [r4, #36]	; 0x24

            this->rxBuffHead = 0;
 8008a54:	83e3      	strh	r3, [r4, #30]
            this->rxBuffTail = 0;
 8008a56:	8423      	strh	r3, [r4, #32]

            this->txBuffHead = 0;
 8008a58:	8563      	strh	r3, [r4, #42]	; 0x2a
            this->txBuffTail = 0;
 8008a5a:	85a3      	strh	r3, [r4, #44]	; 0x2c

            this->rxBuffHeadMatch = -1;
 8008a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a60:	6163      	str	r3, [r4, #20]

            this->baud(CODAL_SERIAL_DEFAULT_BAUD_RATE);
 8008a62:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8008a66:	4620      	mov	r0, r4
 8008a68:	f001 ff90 	bl	800a98c <_ZN5codal3_cm6Serial4baudEi>
        }
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	b003      	add	sp, #12
 8008a70:	bd30      	pop	{r4, r5, pc}
 8008a72:	bf00      	nop
 8008a74:	0800af94 	.word	0x0800af94

08008a78 <_ZN5codal3_cm13tick_callbackEv>:
                }
            }
#endif  //  TODO
        }

        void tick_callback() {
 8008a78:	b508      	push	{r3, lr}
            //  Will be called at every millisecond tick.  Needed to keep CODAL scheduler running.
            //  Warning: This is called from an Interrupt Service Routine.  Don't trigger any interrupts or call slow functions.
            if (!Timer::instance) { return; }  //  No timer to trigger, quit.
 8008a7a:	4b09      	ldr	r3, [pc, #36]	; (8008aa0 <_ZN5codal3_cm13tick_callbackEv+0x28>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	b133      	cbz	r3, 8008a8e <_ZN5codal3_cm13tick_callbackEv+0x16>
            CODAL_TIMESTAMP now = millis();
 8008a80:	f7f9 fc1c 	bl	80022bc <millis>
            //  If we have exceed the tick period (4 millisec)...
            if (last_trigger + (SCHEDULER_TICK_PERIOD_US / 1000) <= now) {
 8008a84:	4b07      	ldr	r3, [pc, #28]	; (8008aa4 <_ZN5codal3_cm13tick_callbackEv+0x2c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3304      	adds	r3, #4
 8008a8a:	4283      	cmp	r3, r0
 8008a8c:	d900      	bls.n	8008a90 <_ZN5codal3_cm13tick_callbackEv+0x18>
                last_trigger = now;
                Timer::instance->trigger();  //  Trigger the CODAL Scheduler.
            }
        }
 8008a8e:	bd08      	pop	{r3, pc}
                last_trigger = now;
 8008a90:	4b04      	ldr	r3, [pc, #16]	; (8008aa4 <_ZN5codal3_cm13tick_callbackEv+0x2c>)
 8008a92:	6018      	str	r0, [r3, #0]
                Timer::instance->trigger();  //  Trigger the CODAL Scheduler.
 8008a94:	4b02      	ldr	r3, [pc, #8]	; (8008aa0 <_ZN5codal3_cm13tick_callbackEv+0x28>)
 8008a96:	6818      	ldr	r0, [r3, #0]
 8008a98:	f001 fba9 	bl	800a1ee <_ZN5codal5Timer7triggerEv>
 8008a9c:	e7f7      	b.n	8008a8e <_ZN5codal3_cm13tick_callbackEv+0x16>
 8008a9e:	bf00      	nop
 8008aa0:	20002978 	.word	0x20002978
 8008aa4:	2000297c 	.word	0x2000297c

08008aa8 <_ZN5codal3_cm14alarm_callbackEv>:

        void alarm_callback() {
 8008aa8:	b508      	push	{r3, lr}
            //  Will be called when an alarm is triggered.  Needed to keep CODAL scheduler running, which sets alarms every few seconds.
            //  Warning: This is called from an Interrupt Service Routine.  Don't trigger any interrupts or call slow functions.
            if (!Timer::instance) { return; }  //  No timer to trigger, quit.
 8008aaa:	4b03      	ldr	r3, [pc, #12]	; (8008ab8 <_ZN5codal3_cm14alarm_callbackEv+0x10>)
 8008aac:	6818      	ldr	r0, [r3, #0]
 8008aae:	b108      	cbz	r0, 8008ab4 <_ZN5codal3_cm14alarm_callbackEv+0xc>
            Timer::instance->trigger();        //  Trigger the CODAL Scheduler.
 8008ab0:	f001 fb9d 	bl	800a1ee <_ZN5codal5Timer7triggerEv>
        }
 8008ab4:	bd08      	pop	{r3, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20002978 	.word	0x20002978

08008abc <_ZN5codal3_cm5Timer9triggerInEm>:
            NVIC_EnableIRQ(TIM5_IRQn);
            HAL_TIM_OC_Start(&TimHandle, TIM_CHANNEL_1);
#endif  //  TODO
        }

        void Timer::triggerIn(CODAL_TIMESTAMP t) {
 8008abc:	b508      	push	{r3, lr}
            //  Set alarm for millis() + t millisecs.
            if (!initialised) {
 8008abe:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008ac2:	b11b      	cbz	r3, 8008acc <_ZN5codal3_cm5Timer9triggerInEm+0x10>
                trigger_period = t;
                debug_println("triggerIn b4 init!");
                return;
            }
            //  debug_print("triggerIn "); debug_println((size_t) t); debug_flush(); debug_printhex_unsigned(platform_get_alarm()); debug_print(" "); debug_flush(); ////
            platform_set_alarm(t);
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	f7f9 fbcb 	bl	8002260 <platform_set_alarm>
            __HAL_TIM_SET_COMPARE(&TimHandle, TIM_CHANNEL_1,
                                (uint32_t)(__HAL_TIM_GET_COUNTER(&TimHandle) + t));
            __HAL_TIM_ENABLE_IT(&TimHandle, TIM_IT_CC1);
            target_enable_irq();
#endif  //  TODO
        }
 8008aca:	bd08      	pop	{r3, pc}
                trigger_period = t;
 8008acc:	4b02      	ldr	r3, [pc, #8]	; (8008ad8 <_ZN5codal3_cm5Timer9triggerInEm+0x1c>)
 8008ace:	6019      	str	r1, [r3, #0]
                debug_println("triggerIn b4 init!");
 8008ad0:	4802      	ldr	r0, [pc, #8]	; (8008adc <_ZN5codal3_cm5Timer9triggerInEm+0x20>)
 8008ad2:	f7f9 fa49 	bl	8001f68 <debug_println>
                return;
 8008ad6:	e7f8      	b.n	8008aca <_ZN5codal3_cm5Timer9triggerInEm+0xe>
 8008ad8:	20002980 	.word	0x20002980
 8008adc:	0800afd8 	.word	0x0800afd8

08008ae0 <_ZN5codal3_cm5Timer11syncRequestEv>:

        void Timer::syncRequest() {
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	b082      	sub	sp, #8
            if (!initialised) {
 8008ae4:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008ae8:	b1bb      	cbz	r3, 8008b1a <_ZN5codal3_cm5Timer11syncRequestEv+0x3a>
 8008aea:	4604      	mov	r4, r0
                debug_print("sync! ");  //  Warning: syncRequest called before init
                return;
            }
            target_disable_irq();
 8008aec:	f7f8 fba8 	bl	8001240 <target_disable_irq>
            volatile uint32_t curr = millis();
 8008af0:	f7f9 fbe4 	bl	80022bc <millis>
 8008af4:	9001      	str	r0, [sp, #4]
            volatile uint32_t delta = curr - this->prev;  //  In milliseconds.
 8008af6:	9b01      	ldr	r3, [sp, #4]
 8008af8:	69e2      	ldr	r2, [r4, #28]
 8008afa:	1a9b      	subs	r3, r3, r2
 8008afc:	9300      	str	r3, [sp, #0]

            // update the hal...
            // uwTick += delta;
            this->prev = curr;
 8008afe:	9b01      	ldr	r3, [sp, #4]
 8008b00:	61e3      	str	r3, [r4, #28]
            this->sync(delta * 1000);  //  Sync expects microseconds.
 8008b02:	9b00      	ldr	r3, [sp, #0]
 8008b04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b08:	fb01 f103 	mul.w	r1, r1, r3
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f001 fb5c 	bl	800a1ca <_ZN5codal5Timer4syncEm>
            target_enable_irq();            
 8008b12:	f7f8 fb93 	bl	800123c <target_enable_irq>
            //  debug_print("timer sync "); debug_println((size_t) delta * 1000);
        }
 8008b16:	b002      	add	sp, #8
 8008b18:	bd10      	pop	{r4, pc}
                debug_print("sync! ");  //  Warning: syncRequest called before init
 8008b1a:	4802      	ldr	r0, [pc, #8]	; (8008b24 <_ZN5codal3_cm5Timer11syncRequestEv+0x44>)
 8008b1c:	f7f9 fa50 	bl	8001fc0 <debug_print>
                return;
 8008b20:	e7f9      	b.n	8008b16 <_ZN5codal3_cm5Timer11syncRequestEv+0x36>
 8008b22:	bf00      	nop
 8008b24:	0800afc4 	.word	0x0800afc4

08008b28 <_ZN5codal3_cm5TimerC1Ev>:
        Timer::Timer() : codal::Timer() {
 8008b28:	b510      	push	{r4, lr}
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	f7ff fc8c 	bl	8008448 <_ZN5codal5TimerC1Ev>
 8008b30:	4b06      	ldr	r3, [pc, #24]	; (8008b4c <_ZN5codal3_cm5TimerC1Ev+0x24>)
 8008b32:	6023      	str	r3, [r4, #0]
            initialised = false;
 8008b34:	2300      	movs	r3, #0
 8008b36:	f884 3020 	strb.w	r3, [r4, #32]
            instance = this;
 8008b3a:	4a05      	ldr	r2, [pc, #20]	; (8008b50 <_ZN5codal3_cm5TimerC1Ev+0x28>)
 8008b3c:	6014      	str	r4, [r2, #0]
            prev = 0;
 8008b3e:	61e3      	str	r3, [r4, #28]
            trigger_period = 0;
 8008b40:	4a04      	ldr	r2, [pc, #16]	; (8008b54 <_ZN5codal3_cm5TimerC1Ev+0x2c>)
 8008b42:	6013      	str	r3, [r2, #0]
            last_trigger = 0;
 8008b44:	4a04      	ldr	r2, [pc, #16]	; (8008b58 <_ZN5codal3_cm5TimerC1Ev+0x30>)
 8008b46:	6013      	str	r3, [r2, #0]
        }
 8008b48:	4620      	mov	r0, r4
 8008b4a:	bd10      	pop	{r4, pc}
 8008b4c:	0800aff4 	.word	0x0800aff4
 8008b50:	20002978 	.word	0x20002978
 8008b54:	20002980 	.word	0x20002980
 8008b58:	2000297c 	.word	0x2000297c

08008b5c <_ZN5codal3_cm5Timer4initEv>:
            if (initialised) { return; }  //  If already initialised, quit.
 8008b5c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8008b60:	b103      	cbz	r3, 8008b64 <_ZN5codal3_cm5Timer4initEv+0x8>
 8008b62:	4770      	bx	lr
        void Timer::init() {
 8008b64:	b510      	push	{r4, lr}
 8008b66:	4604      	mov	r4, r0
            debug_println("timer init"); ////
 8008b68:	480f      	ldr	r0, [pc, #60]	; (8008ba8 <_ZN5codal3_cm5Timer4initEv+0x4c>)
 8008b6a:	f7f9 f9fd 	bl	8001f68 <debug_println>
            initialised = true;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f884 3020 	strb.w	r3, [r4, #32]
            prev = millis();
 8008b74:	f7f9 fba2 	bl	80022bc <millis>
 8008b78:	61e0      	str	r0, [r4, #28]
            target_set_tick_callback(tick_callback);
 8008b7a:	480c      	ldr	r0, [pc, #48]	; (8008bac <_ZN5codal3_cm5Timer4initEv+0x50>)
 8008b7c:	f7f8 fb52 	bl	8001224 <target_set_tick_callback>
            target_set_alarm_callback(alarm_callback);
 8008b80:	480b      	ldr	r0, [pc, #44]	; (8008bb0 <_ZN5codal3_cm5Timer4initEv+0x54>)
 8008b82:	f7f8 fb55 	bl	8001230 <target_set_alarm_callback>
            if (trigger_period > 0) {
 8008b86:	4b0b      	ldr	r3, [pc, #44]	; (8008bb4 <_ZN5codal3_cm5Timer4initEv+0x58>)
 8008b88:	6819      	ldr	r1, [r3, #0]
 8008b8a:	b929      	cbnz	r1, 8008b98 <_ZN5codal3_cm5Timer4initEv+0x3c>
            start_background_tasks();
 8008b8c:	f000 f8b0 	bl	8008cf0 <start_background_tasks>
            bootloader_set_restart_callback(restart_callback);
 8008b90:	4809      	ldr	r0, [pc, #36]	; (8008bb8 <_ZN5codal3_cm5Timer4initEv+0x5c>)
 8008b92:	f7f9 fba7 	bl	80022e4 <bootloader_set_restart_callback>
        }
 8008b96:	bd10      	pop	{r4, pc}
                triggerIn(trigger_period);
 8008b98:	6823      	ldr	r3, [r4, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	4798      	blx	r3
                trigger_period = 0;
 8008ba0:	4b04      	ldr	r3, [pc, #16]	; (8008bb4 <_ZN5codal3_cm5Timer4initEv+0x58>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	e7f1      	b.n	8008b8c <_ZN5codal3_cm5Timer4initEv+0x30>
 8008ba8:	0800afcc 	.word	0x0800afcc
 8008bac:	08008a79 	.word	0x08008a79
 8008bb0:	08008aa9 	.word	0x08008aa9
 8008bb4:	20002980 	.word	0x20002980
 8008bb8:	08008c95 	.word	0x08008c95

08008bbc <_ZL8pre_mainv>:
static void pre_main() {
 8008bbc:	b508      	push	{r3, lr}
    if (app_bss_test != 0x0 || app_data_test != 0x12345678) {
 8008bbe:	4b0c      	ldr	r3, [pc, #48]	; (8008bf0 <_ZL8pre_mainv+0x34>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	b923      	cbnz	r3, 8008bce <_ZL8pre_mainv+0x12>
 8008bc4:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <_ZL8pre_mainv+0x38>)
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	4b0b      	ldr	r3, [pc, #44]	; (8008bf8 <_ZL8pre_mainv+0x3c>)
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d00e      	beq.n	8008bec <_ZL8pre_mainv+0x30>
        debug_print("*** app bss/data failed, bss_test = "); debug_printhex_unsigned(app_bss_test);
 8008bce:	480b      	ldr	r0, [pc, #44]	; (8008bfc <_ZL8pre_mainv+0x40>)
 8008bd0:	f7f9 f9f6 	bl	8001fc0 <debug_print>
 8008bd4:	4b06      	ldr	r3, [pc, #24]	; (8008bf0 <_ZL8pre_mainv+0x34>)
 8008bd6:	6818      	ldr	r0, [r3, #0]
 8008bd8:	f7f9 fa3a 	bl	8002050 <debug_printhex_unsigned>
        debug_print(", data_test = "); debug_printhex_unsigned(app_data_test);
 8008bdc:	4808      	ldr	r0, [pc, #32]	; (8008c00 <_ZL8pre_mainv+0x44>)
 8008bde:	f7f9 f9ef 	bl	8001fc0 <debug_print>
 8008be2:	4b04      	ldr	r3, [pc, #16]	; (8008bf4 <_ZL8pre_mainv+0x38>)
 8008be4:	6818      	ldr	r0, [r3, #0]
 8008be6:	f7f9 fa33 	bl	8002050 <debug_printhex_unsigned>
 8008bea:	e7fe      	b.n	8008bea <_ZL8pre_mainv+0x2e>
}
 8008bec:	bd08      	pop	{r3, pc}
 8008bee:	bf00      	nop
 8008bf0:	20002984 	.word	0x20002984
 8008bf4:	20001800 	.word	0x20001800
 8008bf8:	12345678 	.word	0x12345678
 8008bfc:	0800b004 	.word	0x0800b004
 8008c00:	0800b02c 	.word	0x0800b02c

08008c04 <_ZL15restart_handlerN5codal5EventE>:
static codal::Event restart_event(  //  This event will be triggered for a restart request.
    CM_SOURCE_BOOTLOADER, CM_EVT_RESTART, codal::CREATE_ONLY);
static bool restart_listener_started = false;
static bool restart_requested = false;

static void restart_handler(codal::Event evt) {
 8008c04:	b500      	push	{lr}
 8008c06:	b083      	sub	sp, #12
 8008c08:	ab02      	add	r3, sp, #8
 8008c0a:	e903 0003 	stmdb	r3, {r0, r1}
    //  Handle a restart request.  Flush the log then restart.
    debug_println("restart handler");
 8008c0e:	480e      	ldr	r0, [pc, #56]	; (8008c48 <_ZL15restart_handlerN5codal5EventE+0x44>)
 8008c10:	f7f9 f9aa 	bl	8001f68 <debug_println>
    if (evt.value != CM_EVT_RESTART) { return; }
 8008c14:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8008c18:	f640 039d 	movw	r3, #2205	; 0x89d
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d002      	beq.n	8008c26 <_ZL15restart_handlerN5codal5EventE+0x22>
    codal::fiber_sleep(5000);

    debug_println("done");
    debug_force_flush();
    scb_reset_system();
}
 8008c20:	b003      	add	sp, #12
 8008c22:	f85d fb04 	ldr.w	pc, [sp], #4
    debug_println("restarting...");
 8008c26:	4809      	ldr	r0, [pc, #36]	; (8008c4c <_ZL15restart_handlerN5codal5EventE+0x48>)
 8008c28:	f7f9 f99e 	bl	8001f68 <debug_println>
    debug_force_flush();
 8008c2c:	f7f9 f92e 	bl	8001e8c <debug_force_flush>
    codal::fiber_sleep(5000);
 8008c30:	f241 3088 	movw	r0, #5000	; 0x1388
 8008c34:	f7ff fabe 	bl	80081b4 <_ZN5codal11fiber_sleepEm>
    debug_println("done");
 8008c38:	4805      	ldr	r0, [pc, #20]	; (8008c50 <_ZL15restart_handlerN5codal5EventE+0x4c>)
 8008c3a:	f7f9 f995 	bl	8001f68 <debug_println>
    debug_force_flush();
 8008c3e:	f7f9 f925 	bl	8001e8c <debug_force_flush>
    scb_reset_system();
 8008c42:	f7f8 fe27 	bl	8001894 <scb_reset_system>
 8008c46:	bf00      	nop
 8008c48:	0800b048 	.word	0x0800b048
 8008c4c:	0800b058 	.word	0x0800b058
 8008c50:	0800b068 	.word	0x0800b068

08008c54 <_ZL10flush_taskv>:
        return status;
    }
    return 0;
}

static void flush_task(void) {
 8008c54:	b508      	push	{r3, lr}
    //  Flush the log periodically.
    debug_println("flush task");
 8008c56:	4804      	ldr	r0, [pc, #16]	; (8008c68 <_ZL10flush_taskv+0x14>)
 8008c58:	f7f9 f986 	bl	8001f68 <debug_println>
    while (true) {
        debug_flush();
 8008c5c:	f7f9 f9ab 	bl	8001fb6 <debug_flush>
        codal::fiber_sleep(200);
 8008c60:	20c8      	movs	r0, #200	; 0xc8
 8008c62:	f7ff faa7 	bl	80081b4 <_ZN5codal11fiber_sleepEm>
 8008c66:	e7f9      	b.n	8008c5c <_ZL10flush_taskv+0x8>
 8008c68:	0800b03c 	.word	0x0800b03c

08008c6c <_Z41__static_initialization_and_destruction_0ii>:
                restart_listener_started = true;
            }
        }
    }
    return 0;
}
 8008c6c:	2801      	cmp	r0, #1
 8008c6e:	d000      	beq.n	8008c72 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8008c70:	4770      	bx	lr
 8008c72:	b508      	push	{r3, lr}
 8008c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c78:	4299      	cmp	r1, r3
 8008c7a:	d000      	beq.n	8008c7e <_Z41__static_initialization_and_destruction_0ii+0x12>
 8008c7c:	bd08      	pop	{r3, pc}
    CM_SOURCE_BOOTLOADER, CM_EVT_RESTART, codal::CREATE_ONLY);
 8008c7e:	2300      	movs	r3, #0
 8008c80:	f640 029d 	movw	r2, #2205	; 0x89d
 8008c84:	f645 0134 	movw	r1, #22580	; 0x5834
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <_Z41__static_initialization_and_destruction_0ii+0x24>)
 8008c8a:	f001 fc9a 	bl	800a5c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>
}
 8008c8e:	e7f5      	b.n	8008c7c <_Z41__static_initialization_and_destruction_0ii+0x10>
 8008c90:	20002988 	.word	0x20002988

08008c94 <restart_callback>:
int restart_callback(void) {
 8008c94:	b510      	push	{r4, lr}
    debug_println("restart callback");
 8008c96:	4810      	ldr	r0, [pc, #64]	; (8008cd8 <restart_callback+0x44>)
 8008c98:	f7f9 f966 	bl	8001f68 <debug_println>
    if (!codal::EventModel::defaultEventBus) {
 8008c9c:	4b0f      	ldr	r3, [pc, #60]	; (8008cdc <restart_callback+0x48>)
 8008c9e:	6818      	ldr	r0, [r3, #0]
 8008ca0:	b148      	cbz	r0, 8008cb6 <restart_callback+0x22>
    int status = codal::EventModel::defaultEventBus->send(restart_event);
 8008ca2:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <restart_callback+0x4c>)
 8008ca4:	6802      	ldr	r2, [r0, #0]
 8008ca6:	6814      	ldr	r4, [r2, #0]
 8008ca8:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008cac:	47a0      	blx	r4
    if (status) {
 8008cae:	4604      	mov	r4, r0
 8008cb0:	b938      	cbnz	r0, 8008cc2 <restart_callback+0x2e>
}
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	bd10      	pop	{r4, pc}
        debug_println("*** ERROR: missing event bus");
 8008cb6:	480b      	ldr	r0, [pc, #44]	; (8008ce4 <restart_callback+0x50>)
 8008cb8:	f7f9 f956 	bl	8001f68 <debug_println>
        return -1;
 8008cbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008cc0:	e7f7      	b.n	8008cb2 <restart_callback+0x1e>
        debug_print("*** ERROR: unable to send restart event ");
 8008cc2:	4809      	ldr	r0, [pc, #36]	; (8008ce8 <restart_callback+0x54>)
 8008cc4:	f7f9 f97c 	bl	8001fc0 <debug_print>
        debug_print_unsigned(status); debug_println("");
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f7f9 f985 	bl	8001fd8 <debug_print_unsigned>
 8008cce:	4807      	ldr	r0, [pc, #28]	; (8008cec <restart_callback+0x58>)
 8008cd0:	f7f9 f94a 	bl	8001f68 <debug_println>
        return status;
 8008cd4:	e7ed      	b.n	8008cb2 <restart_callback+0x1e>
 8008cd6:	bf00      	nop
 8008cd8:	0800b070 	.word	0x0800b070
 8008cdc:	20002970 	.word	0x20002970
 8008ce0:	20002988 	.word	0x20002988
 8008ce4:	0800b084 	.word	0x0800b084
 8008ce8:	0800b0a4 	.word	0x0800b0a4
 8008cec:	0800b028 	.word	0x0800b028

08008cf0 <start_background_tasks>:
int start_background_tasks(void) {
 8008cf0:	b530      	push	{r4, r5, lr}
 8008cf2:	b083      	sub	sp, #12
    if (!flush_task_fibre) {
 8008cf4:	4b29      	ldr	r3, [pc, #164]	; (8008d9c <start_background_tasks+0xac>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	b34b      	cbz	r3, 8008d4e <start_background_tasks+0x5e>
    if (!restart_listener_started) {
 8008cfa:	4b29      	ldr	r3, [pc, #164]	; (8008da0 <start_background_tasks+0xb0>)
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	bb1b      	cbnz	r3, 8008d48 <start_background_tasks+0x58>
        if (!codal::EventModel::defaultEventBus) {
 8008d00:	4b28      	ldr	r3, [pc, #160]	; (8008da4 <start_background_tasks+0xb4>)
 8008d02:	681c      	ldr	r4, [r3, #0]
 8008d04:	2c00      	cmp	r4, #0
 8008d06:	d038      	beq.n	8008d7a <start_background_tasks+0x8a>
            Listener *newListener = new Listener(id, value, handler, flags);
 8008d08:	2020      	movs	r0, #32
 8008d0a:	f7f9 facf 	bl	80022ac <_Znwj>
 8008d0e:	4605      	mov	r5, r0
 8008d10:	2310      	movs	r3, #16
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	4b24      	ldr	r3, [pc, #144]	; (8008da8 <start_background_tasks+0xb8>)
 8008d16:	f640 029d 	movw	r2, #2205	; 0x89d
 8008d1a:	f645 0134 	movw	r1, #22580	; 0x5834
 8008d1e:	f001 f84e 	bl	8009dbe <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>
            if(add(newListener) == DEVICE_OK)
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	4629      	mov	r1, r5
 8008d28:	4620      	mov	r0, r4
 8008d2a:	4798      	blx	r3
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	b138      	cbz	r0, 8008d40 <start_background_tasks+0x50>
            delete newListener;
 8008d30:	b33d      	cbz	r5, 8008d82 <start_background_tasks+0x92>
 8008d32:	4628      	mov	r0, r5
 8008d34:	f001 f857 	bl	8009de6 <_ZN5codal8ListenerD1Ev>
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f7f9 fabb 	bl	80022b4 <_ZdlPv>
            return DEVICE_NOT_SUPPORTED;
 8008d3e:	4c1b      	ldr	r4, [pc, #108]	; (8008dac <start_background_tasks+0xbc>)
            if (status) {
 8008d40:	bb0c      	cbnz	r4, 8008d86 <start_background_tasks+0x96>
                restart_listener_started = true;
 8008d42:	4b17      	ldr	r3, [pc, #92]	; (8008da0 <start_background_tasks+0xb0>)
 8008d44:	2201      	movs	r2, #1
 8008d46:	701a      	strb	r2, [r3, #0]
}
 8008d48:	2000      	movs	r0, #0
 8008d4a:	b003      	add	sp, #12
 8008d4c:	bd30      	pop	{r4, r5, pc}
        if (!codal::fiber_scheduler_running()) {
 8008d4e:	f7ff f815 	bl	8007d7c <_ZN5codal23fiber_scheduler_runningEv>
 8008d52:	b918      	cbnz	r0, 8008d5c <start_background_tasks+0x6c>
            debug_println("no scheduler, start bg tasks later");
 8008d54:	4816      	ldr	r0, [pc, #88]	; (8008db0 <start_background_tasks+0xc0>)
 8008d56:	f7f9 f907 	bl	8001f68 <debug_println>
 8008d5a:	e7ce      	b.n	8008cfa <start_background_tasks+0xa>
            debug_println("start bg tasks");
 8008d5c:	4815      	ldr	r0, [pc, #84]	; (8008db4 <start_background_tasks+0xc4>)
 8008d5e:	f7f9 f903 	bl	8001f68 <debug_println>
            flush_task_fibre = codal::create_fiber(flush_task);
 8008d62:	4915      	ldr	r1, [pc, #84]	; (8008db8 <start_background_tasks+0xc8>)
 8008d64:	4815      	ldr	r0, [pc, #84]	; (8008dbc <start_background_tasks+0xcc>)
 8008d66:	f000 ff90 	bl	8009c8a <_ZN5codal12create_fiberEPFvvES1_>
 8008d6a:	4b0c      	ldr	r3, [pc, #48]	; (8008d9c <start_background_tasks+0xac>)
 8008d6c:	6018      	str	r0, [r3, #0]
            if (!flush_task_fibre) {
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d1c3      	bne.n	8008cfa <start_background_tasks+0xa>
                debug_println("*** ERROR: create fibre failed");
 8008d72:	4813      	ldr	r0, [pc, #76]	; (8008dc0 <start_background_tasks+0xd0>)
 8008d74:	f7f9 f8f8 	bl	8001f68 <debug_println>
 8008d78:	e7bf      	b.n	8008cfa <start_background_tasks+0xa>
            debug_println("*** ERROR: missing event bus");
 8008d7a:	4812      	ldr	r0, [pc, #72]	; (8008dc4 <start_background_tasks+0xd4>)
 8008d7c:	f7f9 f8f4 	bl	8001f68 <debug_println>
 8008d80:	e7e2      	b.n	8008d48 <start_background_tasks+0x58>
 8008d82:	4c0a      	ldr	r4, [pc, #40]	; (8008dac <start_background_tasks+0xbc>)
 8008d84:	e7dc      	b.n	8008d40 <start_background_tasks+0x50>
                debug_print("*** ERROR: unable to listen for restart event ");
 8008d86:	4810      	ldr	r0, [pc, #64]	; (8008dc8 <start_background_tasks+0xd8>)
 8008d88:	f7f9 f91a 	bl	8001fc0 <debug_print>
                debug_printhex_unsigned(status); debug_println("");
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f7f9 f95f 	bl	8002050 <debug_printhex_unsigned>
 8008d92:	480e      	ldr	r0, [pc, #56]	; (8008dcc <start_background_tasks+0xdc>)
 8008d94:	f7f9 f8e8 	bl	8001f68 <debug_println>
 8008d98:	e7d6      	b.n	8008d48 <start_background_tasks+0x58>
 8008d9a:	bf00      	nop
 8008d9c:	20002990 	.word	0x20002990
 8008da0:	20002a14 	.word	0x20002a14
 8008da4:	20002970 	.word	0x20002970
 8008da8:	08008c05 	.word	0x08008c05
 8008dac:	fffffc16 	.word	0xfffffc16
 8008db0:	0800b0d0 	.word	0x0800b0d0
 8008db4:	0800b0f4 	.word	0x0800b0f4
 8008db8:	080081ed 	.word	0x080081ed
 8008dbc:	08008c55 	.word	0x08008c55
 8008dc0:	0800b104 	.word	0x0800b104
 8008dc4:	0800b084 	.word	0x0800b084
 8008dc8:	0800b124 	.word	0x0800b124
 8008dcc:	0800b028 	.word	0x0800b028

08008dd0 <_ZN5codal13STM32BluePill4initEv>:
  *
  * @note This method must be called before user code utilises any functionality
  *       contained within the GenuinoZero class.
  */
int STM32BluePill::init()
{
 8008dd0:	b538      	push	{r3, r4, r5, lr}
    if (status & DEVICE_INITIALIZED)
 8008dd2:	88c3      	ldrh	r3, [r0, #6]
 8008dd4:	f013 0f01 	tst.w	r3, #1
 8008dd8:	d12e      	bne.n	8008e38 <_ZN5codal13STM32BluePill4initEv+0x68>
 8008dda:	4605      	mov	r5, r0
        return DEVICE_NOT_SUPPORTED;
    status |= DEVICE_INITIALIZED;
 8008ddc:	f043 0301 	orr.w	r3, r3, #1
 8008de0:	80c3      	strh	r3, [r0, #6]

    debug_println("bluepill init scheduler"); debug_flush(); ////
 8008de2:	4816      	ldr	r0, [pc, #88]	; (8008e3c <_ZN5codal13STM32BluePill4initEv+0x6c>)
 8008de4:	f7f9 f8c0 	bl	8001f68 <debug_println>
 8008de8:	f7f9 f8e5 	bl	8001fb6 <debug_flush>

    //  Codal initialisation... Bring up fiber scheduler.
    scheduler_init(messageBus);
 8008dec:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8008df0:	f7fe ffd0 	bl	8007d94 <_ZN5codal14scheduler_initERNS_10EventModelE>
    debug_println("bluepill init components"); debug_flush(); ////
 8008df4:	4812      	ldr	r0, [pc, #72]	; (8008e40 <_ZN5codal13STM32BluePill4initEv+0x70>)
 8008df6:	f7f9 f8b7 	bl	8001f68 <debug_println>
 8008dfa:	f7f9 f8dc 	bl	8001fb6 <debug_flush>

    //  Init the timer first, all other components depend on the timer.
    timer.init();
 8008dfe:	f105 0008 	add.w	r0, r5, #8
 8008e02:	f7ff feab 	bl	8008b5c <_ZN5codal3_cm5Timer4initEv>

    //  Initialise all the Codal components.
    for(int i = 0; i < DEVICE_COMPONENT_COUNT; i++)
 8008e06:	2400      	movs	r4, #0
 8008e08:	e000      	b.n	8008e0c <_ZN5codal13STM32BluePill4initEv+0x3c>
 8008e0a:	3401      	adds	r4, #1
 8008e0c:	2c3b      	cmp	r4, #59	; 0x3b
 8008e0e:	dc08      	bgt.n	8008e22 <_ZN5codal13STM32BluePill4initEv+0x52>
    {
        if(CodalComponent::components[i])
 8008e10:	4b0c      	ldr	r3, [pc, #48]	; (8008e44 <_ZN5codal13STM32BluePill4initEv+0x74>)
 8008e12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d0f7      	beq.n	8008e0a <_ZN5codal13STM32BluePill4initEv+0x3a>
            CodalComponent::components[i]->init();
 8008e1a:	6803      	ldr	r3, [r0, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4798      	blx	r3
 8008e20:	e7f3      	b.n	8008e0a <_ZN5codal13STM32BluePill4initEv+0x3a>
    }
    status |= DEVICE_COMPONENT_STATUS_IDLE_TICK;
 8008e22:	88eb      	ldrh	r3, [r5, #6]
 8008e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e28:	80eb      	strh	r3, [r5, #6]
    debug_println("bluepill init ok"); debug_flush(); ////
 8008e2a:	4807      	ldr	r0, [pc, #28]	; (8008e48 <_ZN5codal13STM32BluePill4initEv+0x78>)
 8008e2c:	f7f9 f89c 	bl	8001f68 <debug_println>
 8008e30:	f7f9 f8c1 	bl	8001fb6 <debug_flush>
    return DEVICE_OK;
 8008e34:	2000      	movs	r0, #0
}
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
        return DEVICE_NOT_SUPPORTED;
 8008e38:	4804      	ldr	r0, [pc, #16]	; (8008e4c <_ZN5codal13STM32BluePill4initEv+0x7c>)
 8008e3a:	e7fc      	b.n	8008e36 <_ZN5codal13STM32BluePill4initEv+0x66>
 8008e3c:	0800b154 	.word	0x0800b154
 8008e40:	0800b16c 	.word	0x0800b16c
 8008e44:	20002850 	.word	0x20002850
 8008e48:	0800b188 	.word	0x0800b188
 8008e4c:	fffffc16 	.word	0xfffffc16

08008e50 <_ZN5codal13STM32BluePillC1Ev>:
STM32BluePill::STM32BluePill() :
 8008e50:	b530      	push	{r4, r5, lr}
 8008e52:	b083      	sub	sp, #12
 8008e54:	4604      	mov	r4, r0
        {
 8008e56:	4b25      	ldr	r3, [pc, #148]	; (8008eec <_ZN5codal13STM32BluePillC1Ev+0x9c>)
 8008e58:	6003      	str	r3, [r0, #0]
            this->id = 0;
 8008e5a:	2500      	movs	r5, #0
 8008e5c:	8085      	strh	r5, [r0, #4]
            this->status = 0;
 8008e5e:	80c5      	strh	r5, [r0, #6]
            addComponent();
 8008e60:	f7fe fe46 	bl	8007af0 <_ZN5codal14CodalComponent12addComponentEv>
    usart2(io.tx2, io.rx2) {  //  Port USART2 (USART1, USART3 not supported yet)
 8008e64:	4620      	mov	r0, r4
 8008e66:	4b22      	ldr	r3, [pc, #136]	; (8008ef0 <_ZN5codal13STM32BluePillC1Ev+0xa0>)
 8008e68:	f840 3b08 	str.w	r3, [r0], #8
 8008e6c:	f7ff fe5c 	bl	8008b28 <_ZN5codal3_cm5TimerC1Ev>
 8008e70:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8008e74:	f7ff fc50 	bl	8008718 <_ZN5codal10MessageBusC1Ev>
 8008e78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008e7c:	f000 f83c 	bl	8008ef8 <_ZN5codal15STM32BluePillIOC1Ev>
 8008e80:	f504 6241 	add.w	r2, r4, #3088	; 0xc10
 8008e84:	f504 6143 	add.w	r1, r4, #3120	; 0xc30
 8008e88:	f504 607b 	add.w	r0, r4, #4016	; 0xfb0
 8008e8c:	f000 fdee 	bl	8009a6c <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>
 8008e90:	f504 6351 	add.w	r3, r4, #3344	; 0xd10
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	f504 6353 	add.w	r3, r4, #3376	; 0xd30
 8008e9a:	f504 6255 	add.w	r2, r4, #3408	; 0xd50
 8008e9e:	f504 6157 	add.w	r1, r4, #3440	; 0xd70
 8008ea2:	f504 607c 	add.w	r0, r4, #4032	; 0xfc0
 8008ea6:	f000 fe1d 	bl	8009ae4 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_>
 8008eaa:	f504 6361 	add.w	r3, r4, #3600	; 0xe10
 8008eae:	9300      	str	r3, [sp, #0]
 8008eb0:	f504 6363 	add.w	r3, r4, #3632	; 0xe30
 8008eb4:	f504 6265 	add.w	r2, r4, #3664	; 0xe50
 8008eb8:	f504 6167 	add.w	r1, r4, #3696	; 0xe70
 8008ebc:	f604 70e8 	addw	r0, r4, #4072	; 0xfe8
 8008ec0:	f000 fe10 	bl	8009ae4 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_>
 8008ec4:	2314      	movs	r3, #20
 8008ec6:	9300      	str	r3, [sp, #0]
 8008ec8:	f504 6229 	add.w	r2, r4, #2704	; 0xa90
 8008ecc:	f504 6127 	add.w	r1, r4, #2672	; 0xa70
 8008ed0:	f504 5080 	add.w	r0, r4, #4096	; 0x1000
 8008ed4:	3010      	adds	r0, #16
 8008ed6:	f7ff fda7 	bl	8008a28 <_ZN5codal3_cm6SerialC1ERNS0_3PinES3_hh>
    status = 0;
 8008eda:	80e5      	strh	r5, [r4, #6]
    debug_println("bluepill construct"); debug_flush(); ////
 8008edc:	4805      	ldr	r0, [pc, #20]	; (8008ef4 <_ZN5codal13STM32BluePillC1Ev+0xa4>)
 8008ede:	f7f9 f843 	bl	8001f68 <debug_println>
 8008ee2:	f7f9 f868 	bl	8001fb6 <debug_flush>
}
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	b003      	add	sp, #12
 8008eea:	bd30      	pop	{r4, r5, pc}
 8008eec:	0800ae44 	.word	0x0800ae44
 8008ef0:	0800b1b8 	.word	0x0800b1b8
 8008ef4:	0800b19c 	.word	0x0800b19c

08008ef8 <_ZN5codal15STM32BluePillIOC1Ev>:
  * Create a representation of all given I/O pins on the edge connector
  *
  * Accepts a sequence of unique ID's used to distinguish events raised
  * by MicroBitPin instances on the default EventModel.
  */
STM32BluePillIO::STM32BluePillIO() :
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	b083      	sub	sp, #12
 8008efe:	4604      	mov	r4, r0
mosi3        (CM_PIN_SPI_MOSI3       , RCC_GPIOB, GPIOB, GPIO5, PIN_CAPABILITY_DIGITAL),
nss3_remap   (CM_PIN_SPI_NSS3_REMAP  , RCC_GPIOA, GPIOA, GPIO4, PIN_CAPABILITY_DIGITAL),
sck3_remap   (CM_PIN_SPI_SCK3_REMAP  , RCC_GPIOC, GPIOC, GPIO10, PIN_CAPABILITY_DIGITAL),
miso3_remap  (CM_PIN_SPI_MISO3_REMAP , RCC_GPIOC, GPIOC, GPIO11, PIN_CAPABILITY_DIGITAL),
mosi3_remap  (CM_PIN_SPI_MOSI3_REMAP , RCC_GPIOC, GPIOC, GPIO12, PIN_CAPABILITY_DIGITAL),
led         (CM_PIN_LED        , RCC_GPIOC, GPIOC, GPIO13, PIN_CAPABILITY_DIGITAL)
 8008f00:	2501      	movs	r5, #1
 8008f02:	9501      	str	r5, [sp, #4]
 8008f04:	9500      	str	r5, [sp, #0]
 8008f06:	4bd1      	ldr	r3, [pc, #836]	; (800924c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008f08:	f240 3202 	movw	r2, #770	; 0x302
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	f7ff fd21 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f12:	9501      	str	r5, [sp, #4]
 8008f14:	2702      	movs	r7, #2
 8008f16:	9700      	str	r7, [sp, #0]
 8008f18:	4bcc      	ldr	r3, [pc, #816]	; (800924c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008f1a:	f240 3202 	movw	r2, #770	; 0x302
 8008f1e:	4629      	mov	r1, r5
 8008f20:	f104 0020 	add.w	r0, r4, #32
 8008f24:	f7ff fd16 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f28:	9501      	str	r5, [sp, #4]
 8008f2a:	f04f 0804 	mov.w	r8, #4
 8008f2e:	f8cd 8000 	str.w	r8, [sp]
 8008f32:	4bc6      	ldr	r3, [pc, #792]	; (800924c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008f34:	f240 3202 	movw	r2, #770	; 0x302
 8008f38:	4639      	mov	r1, r7
 8008f3a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8008f3e:	f7ff fd09 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f42:	9501      	str	r5, [sp, #4]
 8008f44:	f04f 0a08 	mov.w	sl, #8
 8008f48:	f8cd a000 	str.w	sl, [sp]
 8008f4c:	4bbf      	ldr	r3, [pc, #764]	; (800924c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008f4e:	f240 3202 	movw	r2, #770	; 0x302
 8008f52:	2103      	movs	r1, #3
 8008f54:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8008f58:	f7ff fcfc 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f5c:	9501      	str	r5, [sp, #4]
 8008f5e:	2310      	movs	r3, #16
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	4bba      	ldr	r3, [pc, #744]	; (800924c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008f64:	f240 3202 	movw	r2, #770	; 0x302
 8008f68:	4641      	mov	r1, r8
 8008f6a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8008f6e:	f7ff fcf1 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f72:	9501      	str	r5, [sp, #4]
 8008f74:	2320      	movs	r3, #32
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	4bb4      	ldr	r3, [pc, #720]	; (800924c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008f7a:	f240 3202 	movw	r2, #770	; 0x302
 8008f7e:	2105      	movs	r1, #5
 8008f80:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 8008f84:	f7ff fce6 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f88:	9501      	str	r5, [sp, #4]
 8008f8a:	2640      	movs	r6, #64	; 0x40
 8008f8c:	9600      	str	r6, [sp, #0]
 8008f8e:	4baf      	ldr	r3, [pc, #700]	; (800924c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008f90:	f240 3202 	movw	r2, #770	; 0x302
 8008f94:	2106      	movs	r1, #6
 8008f96:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8008f9a:	f7ff fcdb 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008f9e:	9501      	str	r5, [sp, #4]
 8008fa0:	2380      	movs	r3, #128	; 0x80
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	4ba9      	ldr	r3, [pc, #676]	; (800924c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008fa6:	f240 3202 	movw	r2, #770	; 0x302
 8008faa:	2107      	movs	r1, #7
 8008fac:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 8008fb0:	f7ff fcd0 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008fb4:	9501      	str	r5, [sp, #4]
 8008fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	4ba3      	ldr	r3, [pc, #652]	; (800924c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008fbe:	f240 3202 	movw	r2, #770	; 0x302
 8008fc2:	4651      	mov	r1, sl
 8008fc4:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8008fc8:	f7ff fcc4 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008fcc:	9501      	str	r5, [sp, #4]
 8008fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008fd8:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 8008fdc:	f240 3202 	movw	r2, #770	; 0x302
 8008fe0:	2109      	movs	r1, #9
 8008fe2:	f504 7090 	add.w	r0, r4, #288	; 0x120
 8008fe6:	f7ff fcb5 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8008fea:	9501      	str	r5, [sp, #4]
 8008fec:	f44f 6b80 	mov.w	fp, #1024	; 0x400
 8008ff0:	f8cd b000 	str.w	fp, [sp]
 8008ff4:	4b95      	ldr	r3, [pc, #596]	; (800924c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 8008ff6:	f240 3202 	movw	r2, #770	; 0x302
 8008ffa:	210a      	movs	r1, #10
 8008ffc:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8009000:	f7ff fca8 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009004:	9501      	str	r5, [sp, #4]
 8009006:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009010:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009014:	f240 3202 	movw	r2, #770	; 0x302
 8009018:	210b      	movs	r1, #11
 800901a:	f504 70b0 	add.w	r0, r4, #352	; 0x160
 800901e:	f7ff fc99 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009022:	9501      	str	r5, [sp, #4]
 8009024:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8009028:	f8cd 9000 	str.w	r9, [sp]
 800902c:	4b87      	ldr	r3, [pc, #540]	; (800924c <_ZN5codal15STM32BluePillIOC1Ev+0x354>)
 800902e:	f240 3202 	movw	r2, #770	; 0x302
 8009032:	210c      	movs	r1, #12
 8009034:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8009038:	f7ff fc8c 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800903c:	9501      	str	r5, [sp, #4]
 800903e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009048:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 800904c:	f240 3202 	movw	r2, #770	; 0x302
 8009050:	210d      	movs	r1, #13
 8009052:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
 8009056:	f7ff fc7d 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800905a:	9501      	str	r5, [sp, #4]
 800905c:	9500      	str	r5, [sp, #0]
 800905e:	4b7c      	ldr	r3, [pc, #496]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8009060:	f240 3203 	movw	r2, #771	; 0x303
 8009064:	210e      	movs	r1, #14
 8009066:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 800906a:	f7ff fc73 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800906e:	9501      	str	r5, [sp, #4]
 8009070:	9700      	str	r7, [sp, #0]
 8009072:	4b77      	ldr	r3, [pc, #476]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8009074:	f240 3203 	movw	r2, #771	; 0x303
 8009078:	210f      	movs	r1, #15
 800907a:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
 800907e:	f7ff fc69 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009082:	9501      	str	r5, [sp, #4]
 8009084:	f8cd a000 	str.w	sl, [sp]
 8009088:	4b71      	ldr	r3, [pc, #452]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 800908a:	f240 3203 	movw	r2, #771	; 0x303
 800908e:	2110      	movs	r1, #16
 8009090:	f504 7000 	add.w	r0, r4, #512	; 0x200
 8009094:	f7ff fc5e 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009098:	9501      	str	r5, [sp, #4]
 800909a:	2310      	movs	r3, #16
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	4b6c      	ldr	r3, [pc, #432]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 80090a0:	f240 3203 	movw	r2, #771	; 0x303
 80090a4:	2111      	movs	r1, #17
 80090a6:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80090aa:	f7ff fc53 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80090ae:	9501      	str	r5, [sp, #4]
 80090b0:	2320      	movs	r3, #32
 80090b2:	9300      	str	r3, [sp, #0]
 80090b4:	4b66      	ldr	r3, [pc, #408]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 80090b6:	f240 3203 	movw	r2, #771	; 0x303
 80090ba:	2112      	movs	r1, #18
 80090bc:	f504 7010 	add.w	r0, r4, #576	; 0x240
 80090c0:	f7ff fc48 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80090c4:	9501      	str	r5, [sp, #4]
 80090c6:	9600      	str	r6, [sp, #0]
 80090c8:	4b61      	ldr	r3, [pc, #388]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 80090ca:	f240 3203 	movw	r2, #771	; 0x303
 80090ce:	2113      	movs	r1, #19
 80090d0:	f504 7018 	add.w	r0, r4, #608	; 0x260
 80090d4:	f7ff fc3e 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80090d8:	9501      	str	r5, [sp, #4]
 80090da:	2380      	movs	r3, #128	; 0x80
 80090dc:	9300      	str	r3, [sp, #0]
 80090de:	4b5c      	ldr	r3, [pc, #368]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 80090e0:	f240 3203 	movw	r2, #771	; 0x303
 80090e4:	2114      	movs	r1, #20
 80090e6:	f504 7020 	add.w	r0, r4, #640	; 0x280
 80090ea:	f7ff fc33 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80090ee:	9501      	str	r5, [sp, #4]
 80090f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	4b56      	ldr	r3, [pc, #344]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 80090f8:	f240 3203 	movw	r2, #771	; 0x303
 80090fc:	2115      	movs	r1, #21
 80090fe:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
 8009102:	f7ff fc27 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009106:	9501      	str	r5, [sp, #4]
 8009108:	f44f 7300 	mov.w	r3, #512	; 0x200
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	4b50      	ldr	r3, [pc, #320]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8009110:	f240 3203 	movw	r2, #771	; 0x303
 8009114:	2116      	movs	r1, #22
 8009116:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
 800911a:	f7ff fc1b 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800911e:	9501      	str	r5, [sp, #4]
 8009120:	f8cd b000 	str.w	fp, [sp]
 8009124:	4b4a      	ldr	r3, [pc, #296]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8009126:	f240 3203 	movw	r2, #771	; 0x303
 800912a:	2117      	movs	r1, #23
 800912c:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
 8009130:	f7ff fc10 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009134:	9501      	str	r5, [sp, #4]
 8009136:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800913a:	9300      	str	r3, [sp, #0]
 800913c:	4b44      	ldr	r3, [pc, #272]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 800913e:	f240 3203 	movw	r2, #771	; 0x303
 8009142:	2118      	movs	r1, #24
 8009144:	f504 7040 	add.w	r0, r4, #768	; 0x300
 8009148:	f7ff fc04 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800914c:	9501      	str	r5, [sp, #4]
 800914e:	f8cd 9000 	str.w	r9, [sp]
 8009152:	4b3f      	ldr	r3, [pc, #252]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8009154:	f240 3203 	movw	r2, #771	; 0x303
 8009158:	2119      	movs	r1, #25
 800915a:	f504 7048 	add.w	r0, r4, #800	; 0x320
 800915e:	f7ff fbf9 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009162:	9501      	str	r5, [sp, #4]
 8009164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009168:	9300      	str	r3, [sp, #0]
 800916a:	4b39      	ldr	r3, [pc, #228]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 800916c:	f240 3203 	movw	r2, #771	; 0x303
 8009170:	211a      	movs	r1, #26
 8009172:	f504 7050 	add.w	r0, r4, #832	; 0x340
 8009176:	f7ff fbed 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800917a:	9501      	str	r5, [sp, #4]
 800917c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	4b33      	ldr	r3, [pc, #204]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 8009184:	f240 3203 	movw	r2, #771	; 0x303
 8009188:	211b      	movs	r1, #27
 800918a:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800918e:	f7ff fbe1 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009192:	9501      	str	r5, [sp, #4]
 8009194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009198:	9300      	str	r3, [sp, #0]
 800919a:	4b2d      	ldr	r3, [pc, #180]	; (8009250 <_ZN5codal15STM32BluePillIOC1Ev+0x358>)
 800919c:	f240 3203 	movw	r2, #771	; 0x303
 80091a0:	211c      	movs	r1, #28
 80091a2:	f504 7060 	add.w	r0, r4, #896	; 0x380
 80091a6:	f7ff fbd5 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80091aa:	9501      	str	r5, [sp, #4]
 80091ac:	f8cd b000 	str.w	fp, [sp]
 80091b0:	4b28      	ldr	r3, [pc, #160]	; (8009254 <_ZN5codal15STM32BluePillIOC1Ev+0x35c>)
 80091b2:	f44f 7241 	mov.w	r2, #772	; 0x304
 80091b6:	211d      	movs	r1, #29
 80091b8:	f504 7068 	add.w	r0, r4, #928	; 0x3a0
 80091bc:	f7ff fbca 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80091c0:	9501      	str	r5, [sp, #4]
 80091c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091cc:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80091d0:	f44f 7241 	mov.w	r2, #772	; 0x304
 80091d4:	211e      	movs	r1, #30
 80091d6:	f504 7070 	add.w	r0, r4, #960	; 0x3c0
 80091da:	f7ff fbbb 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80091de:	9501      	str	r5, [sp, #4]
 80091e0:	f8cd 9000 	str.w	r9, [sp]
 80091e4:	4b1b      	ldr	r3, [pc, #108]	; (8009254 <_ZN5codal15STM32BluePillIOC1Ev+0x35c>)
 80091e6:	f44f 7241 	mov.w	r2, #772	; 0x304
 80091ea:	211f      	movs	r1, #31
 80091ec:	f504 7078 	add.w	r0, r4, #992	; 0x3e0
 80091f0:	f7ff fbb0 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80091f4:	9501      	str	r5, [sp, #4]
 80091f6:	f8cd 8000 	str.w	r8, [sp]
 80091fa:	4b17      	ldr	r3, [pc, #92]	; (8009258 <_ZN5codal15STM32BluePillIOC1Ev+0x360>)
 80091fc:	f240 3205 	movw	r2, #773	; 0x305
 8009200:	2120      	movs	r1, #32
 8009202:	eb04 000b 	add.w	r0, r4, fp
 8009206:	f7ff fba5 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800920a:	9501      	str	r5, [sp, #4]
 800920c:	f8cd a000 	str.w	sl, [sp]
 8009210:	4b11      	ldr	r3, [pc, #68]	; (8009258 <_ZN5codal15STM32BluePillIOC1Ev+0x360>)
 8009212:	f240 3205 	movw	r2, #773	; 0x305
 8009216:	2121      	movs	r1, #33	; 0x21
 8009218:	f504 6084 	add.w	r0, r4, #1056	; 0x420
 800921c:	f7ff fb9a 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009220:	9501      	str	r5, [sp, #4]
 8009222:	2310      	movs	r3, #16
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	4b0c      	ldr	r3, [pc, #48]	; (8009258 <_ZN5codal15STM32BluePillIOC1Ev+0x360>)
 8009228:	f240 3205 	movw	r2, #773	; 0x305
 800922c:	2122      	movs	r1, #34	; 0x22
 800922e:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 8009232:	f7ff fb8f 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009236:	9501      	str	r5, [sp, #4]
 8009238:	2320      	movs	r3, #32
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	4b06      	ldr	r3, [pc, #24]	; (8009258 <_ZN5codal15STM32BluePillIOC1Ev+0x360>)
 800923e:	f240 3205 	movw	r2, #773	; 0x305
 8009242:	2123      	movs	r1, #35	; 0x23
 8009244:	f504 608c 	add.w	r0, r4, #1120	; 0x460
 8009248:	e008      	b.n	800925c <_ZN5codal15STM32BluePillIOC1Ev+0x364>
 800924a:	bf00      	nop
 800924c:	40010800 	.word	0x40010800
 8009250:	40010c00 	.word	0x40010c00
 8009254:	40011000 	.word	0x40011000
 8009258:	40011400 	.word	0x40011400
 800925c:	f7ff fb7a 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009260:	9501      	str	r5, [sp, #4]
 8009262:	9600      	str	r6, [sp, #0]
 8009264:	4bce      	ldr	r3, [pc, #824]	; (80095a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8009266:	f240 3205 	movw	r2, #773	; 0x305
 800926a:	2124      	movs	r1, #36	; 0x24
 800926c:	f504 6090 	add.w	r0, r4, #1152	; 0x480
 8009270:	f7ff fb70 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009274:	9501      	str	r5, [sp, #4]
 8009276:	2380      	movs	r3, #128	; 0x80
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	4bc9      	ldr	r3, [pc, #804]	; (80095a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 800927c:	f240 3205 	movw	r2, #773	; 0x305
 8009280:	2125      	movs	r1, #37	; 0x25
 8009282:	f504 6094 	add.w	r0, r4, #1184	; 0x4a0
 8009286:	f7ff fb65 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800928a:	9501      	str	r5, [sp, #4]
 800928c:	f8cd 9000 	str.w	r9, [sp]
 8009290:	4bc3      	ldr	r3, [pc, #780]	; (80095a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8009292:	f240 3205 	movw	r2, #773	; 0x305
 8009296:	2126      	movs	r1, #38	; 0x26
 8009298:	f504 6098 	add.w	r0, r4, #1216	; 0x4c0
 800929c:	f7ff fb5a 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80092a0:	9501      	str	r5, [sp, #4]
 80092a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092a6:	9300      	str	r3, [sp, #0]
 80092a8:	4bbd      	ldr	r3, [pc, #756]	; (80095a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 80092aa:	f240 3205 	movw	r2, #773	; 0x305
 80092ae:	2127      	movs	r1, #39	; 0x27
 80092b0:	f504 609c 	add.w	r0, r4, #1248	; 0x4e0
 80092b4:	f7ff fb4e 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80092b8:	9501      	str	r5, [sp, #4]
 80092ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	4bb7      	ldr	r3, [pc, #732]	; (80095a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 80092c2:	f240 3205 	movw	r2, #773	; 0x305
 80092c6:	2128      	movs	r1, #40	; 0x28
 80092c8:	f504 60a0 	add.w	r0, r4, #1280	; 0x500
 80092cc:	f7ff fb42 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80092d0:	9501      	str	r5, [sp, #4]
 80092d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	4bb1      	ldr	r3, [pc, #708]	; (80095a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 80092da:	f240 3205 	movw	r2, #773	; 0x305
 80092de:	2129      	movs	r1, #41	; 0x29
 80092e0:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 80092e4:	f7ff fb36 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80092e8:	9501      	str	r5, [sp, #4]
 80092ea:	9500      	str	r5, [sp, #0]
 80092ec:	4bad      	ldr	r3, [pc, #692]	; (80095a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 80092ee:	f240 3202 	movw	r2, #770	; 0x302
 80092f2:	212a      	movs	r1, #42	; 0x2a
 80092f4:	f504 60a8 	add.w	r0, r4, #1344	; 0x540
 80092f8:	f7ff fb2c 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80092fc:	9501      	str	r5, [sp, #4]
 80092fe:	9700      	str	r7, [sp, #0]
 8009300:	4ba8      	ldr	r3, [pc, #672]	; (80095a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8009302:	f240 3202 	movw	r2, #770	; 0x302
 8009306:	212b      	movs	r1, #43	; 0x2b
 8009308:	f504 60ac 	add.w	r0, r4, #1376	; 0x560
 800930c:	f7ff fb22 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009310:	9501      	str	r5, [sp, #4]
 8009312:	f8cd 8000 	str.w	r8, [sp]
 8009316:	4ba3      	ldr	r3, [pc, #652]	; (80095a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8009318:	f240 3202 	movw	r2, #770	; 0x302
 800931c:	212c      	movs	r1, #44	; 0x2c
 800931e:	f504 60b0 	add.w	r0, r4, #1408	; 0x580
 8009322:	f7ff fb17 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009326:	9501      	str	r5, [sp, #4]
 8009328:	f8cd a000 	str.w	sl, [sp]
 800932c:	4b9d      	ldr	r3, [pc, #628]	; (80095a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 800932e:	f240 3202 	movw	r2, #770	; 0x302
 8009332:	212d      	movs	r1, #45	; 0x2d
 8009334:	f504 60b4 	add.w	r0, r4, #1440	; 0x5a0
 8009338:	f7ff fb0c 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800933c:	9501      	str	r5, [sp, #4]
 800933e:	9600      	str	r6, [sp, #0]
 8009340:	4b99      	ldr	r3, [pc, #612]	; (80095a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8009342:	f240 3203 	movw	r2, #771	; 0x303
 8009346:	212e      	movs	r1, #46	; 0x2e
 8009348:	f504 60b8 	add.w	r0, r4, #1472	; 0x5c0
 800934c:	f7ff fb02 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009350:	9501      	str	r5, [sp, #4]
 8009352:	2380      	movs	r3, #128	; 0x80
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	4b94      	ldr	r3, [pc, #592]	; (80095a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8009358:	f240 3203 	movw	r2, #771	; 0x303
 800935c:	212f      	movs	r1, #47	; 0x2f
 800935e:	f504 60bc 	add.w	r0, r4, #1504	; 0x5e0
 8009362:	f7ff faf7 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009366:	9501      	str	r5, [sp, #4]
 8009368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	4b8e      	ldr	r3, [pc, #568]	; (80095a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8009370:	f240 3203 	movw	r2, #771	; 0x303
 8009374:	2130      	movs	r1, #48	; 0x30
 8009376:	f504 60c0 	add.w	r0, r4, #1536	; 0x600
 800937a:	f7ff faeb 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800937e:	9501      	str	r5, [sp, #4]
 8009380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	4b88      	ldr	r3, [pc, #544]	; (80095a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8009388:	f240 3203 	movw	r2, #771	; 0x303
 800938c:	2131      	movs	r1, #49	; 0x31
 800938e:	f504 60c4 	add.w	r0, r4, #1568	; 0x620
 8009392:	f7ff fadf 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009396:	9501      	str	r5, [sp, #4]
 8009398:	f8cd 9000 	str.w	r9, [sp]
 800939c:	4b80      	ldr	r3, [pc, #512]	; (80095a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 800939e:	f240 3205 	movw	r2, #773	; 0x305
 80093a2:	2132      	movs	r1, #50	; 0x32
 80093a4:	f504 60c8 	add.w	r0, r4, #1600	; 0x640
 80093a8:	f7ff fad4 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80093ac:	9501      	str	r5, [sp, #4]
 80093ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	4b7a      	ldr	r3, [pc, #488]	; (80095a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 80093b6:	f240 3205 	movw	r2, #773	; 0x305
 80093ba:	2133      	movs	r1, #51	; 0x33
 80093bc:	f504 60cc 	add.w	r0, r4, #1632	; 0x660
 80093c0:	f7ff fac8 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80093c4:	9501      	str	r5, [sp, #4]
 80093c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	4b74      	ldr	r3, [pc, #464]	; (80095a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 80093ce:	f240 3205 	movw	r2, #773	; 0x305
 80093d2:	2134      	movs	r1, #52	; 0x34
 80093d4:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 80093d8:	f7ff fabc 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80093dc:	9501      	str	r5, [sp, #4]
 80093de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	4b6e      	ldr	r3, [pc, #440]	; (80095a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 80093e6:	f240 3205 	movw	r2, #773	; 0x305
 80093ea:	2135      	movs	r1, #53	; 0x35
 80093ec:	f504 60d4 	add.w	r0, r4, #1696	; 0x6a0
 80093f0:	f7ff fab0 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80093f4:	9501      	str	r5, [sp, #4]
 80093f6:	9600      	str	r6, [sp, #0]
 80093f8:	4b6a      	ldr	r3, [pc, #424]	; (80095a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 80093fa:	f240 3202 	movw	r2, #770	; 0x302
 80093fe:	2136      	movs	r1, #54	; 0x36
 8009400:	f504 60d8 	add.w	r0, r4, #1728	; 0x6c0
 8009404:	f7ff faa6 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009408:	9501      	str	r5, [sp, #4]
 800940a:	2380      	movs	r3, #128	; 0x80
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	4b65      	ldr	r3, [pc, #404]	; (80095a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8009410:	f240 3202 	movw	r2, #770	; 0x302
 8009414:	2137      	movs	r1, #55	; 0x37
 8009416:	f504 60dc 	add.w	r0, r4, #1760	; 0x6e0
 800941a:	f7ff fa9b 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800941e:	9501      	str	r5, [sp, #4]
 8009420:	9500      	str	r5, [sp, #0]
 8009422:	4b61      	ldr	r3, [pc, #388]	; (80095a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8009424:	f240 3203 	movw	r2, #771	; 0x303
 8009428:	2138      	movs	r1, #56	; 0x38
 800942a:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 800942e:	f7ff fa91 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009432:	9501      	str	r5, [sp, #4]
 8009434:	9700      	str	r7, [sp, #0]
 8009436:	4b5c      	ldr	r3, [pc, #368]	; (80095a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8009438:	f240 3203 	movw	r2, #771	; 0x303
 800943c:	2139      	movs	r1, #57	; 0x39
 800943e:	f504 60e4 	add.w	r0, r4, #1824	; 0x720
 8009442:	f7ff fa87 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009446:	9501      	str	r5, [sp, #4]
 8009448:	9700      	str	r7, [sp, #0]
 800944a:	4b56      	ldr	r3, [pc, #344]	; (80095a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 800944c:	f240 3202 	movw	r2, #770	; 0x302
 8009450:	213a      	movs	r1, #58	; 0x3a
 8009452:	f504 60e8 	add.w	r0, r4, #1856	; 0x740
 8009456:	f7ff fa7d 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800945a:	9501      	str	r5, [sp, #4]
 800945c:	f8cd 8000 	str.w	r8, [sp]
 8009460:	4b50      	ldr	r3, [pc, #320]	; (80095a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8009462:	f240 3202 	movw	r2, #770	; 0x302
 8009466:	213b      	movs	r1, #59	; 0x3b
 8009468:	f504 60ec 	add.w	r0, r4, #1888	; 0x760
 800946c:	f7ff fa72 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009470:	9501      	str	r5, [sp, #4]
 8009472:	f8cd a000 	str.w	sl, [sp]
 8009476:	4b4b      	ldr	r3, [pc, #300]	; (80095a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 8009478:	f240 3202 	movw	r2, #770	; 0x302
 800947c:	213c      	movs	r1, #60	; 0x3c
 800947e:	f504 60f0 	add.w	r0, r4, #1920	; 0x780
 8009482:	f7ff fa67 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009486:	9501      	str	r5, [sp, #4]
 8009488:	f8cd 9000 	str.w	r9, [sp]
 800948c:	4b45      	ldr	r3, [pc, #276]	; (80095a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 800948e:	f240 3202 	movw	r2, #770	; 0x302
 8009492:	213d      	movs	r1, #61	; 0x3d
 8009494:	f504 60f4 	add.w	r0, r4, #1952	; 0x7a0
 8009498:	f7ff fa5c 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800949c:	9501      	str	r5, [sp, #4]
 800949e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	4b3f      	ldr	r3, [pc, #252]	; (80095a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 80094a6:	f240 3202 	movw	r2, #770	; 0x302
 80094aa:	213e      	movs	r1, #62	; 0x3e
 80094ac:	f504 60f8 	add.w	r0, r4, #1984	; 0x7c0
 80094b0:	f7ff fa50 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80094b4:	9501      	str	r5, [sp, #4]
 80094b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80094c0:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 80094c4:	f240 3202 	movw	r2, #770	; 0x302
 80094c8:	213f      	movs	r1, #63	; 0x3f
 80094ca:	f504 60fc 	add.w	r0, r4, #2016	; 0x7e0
 80094ce:	f7ff fa41 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80094d2:	9501      	str	r5, [sp, #4]
 80094d4:	f8cd b000 	str.w	fp, [sp]
 80094d8:	4b32      	ldr	r3, [pc, #200]	; (80095a4 <_ZN5codal15STM32BluePillIOC1Ev+0x6ac>)
 80094da:	f240 3202 	movw	r2, #770	; 0x302
 80094de:	4631      	mov	r1, r6
 80094e0:	f504 6000 	add.w	r0, r4, #2048	; 0x800
 80094e4:	f7ff fa36 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80094e8:	9501      	str	r5, [sp, #4]
 80094ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80094f4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80094f8:	f240 3202 	movw	r2, #770	; 0x302
 80094fc:	2141      	movs	r1, #65	; 0x41
 80094fe:	f504 6002 	add.w	r0, r4, #2080	; 0x820
 8009502:	f7ff fa27 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009506:	9501      	str	r5, [sp, #4]
 8009508:	f8cd 9000 	str.w	r9, [sp]
 800950c:	4b26      	ldr	r3, [pc, #152]	; (80095a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 800950e:	f240 3203 	movw	r2, #771	; 0x303
 8009512:	2142      	movs	r1, #66	; 0x42
 8009514:	f504 6004 	add.w	r0, r4, #2112	; 0x840
 8009518:	f7ff fa1c 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800951c:	9501      	str	r5, [sp, #4]
 800951e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	4b20      	ldr	r3, [pc, #128]	; (80095a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8009526:	f240 3203 	movw	r2, #771	; 0x303
 800952a:	2143      	movs	r1, #67	; 0x43
 800952c:	f504 6006 	add.w	r0, r4, #2144	; 0x860
 8009530:	f7ff fa10 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009534:	9501      	str	r5, [sp, #4]
 8009536:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	4b1a      	ldr	r3, [pc, #104]	; (80095a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 800953e:	f240 3203 	movw	r2, #771	; 0x303
 8009542:	2144      	movs	r1, #68	; 0x44
 8009544:	f504 6008 	add.w	r0, r4, #2176	; 0x880
 8009548:	f7ff fa04 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800954c:	9501      	str	r5, [sp, #4]
 800954e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <_ZN5codal15STM32BluePillIOC1Ev+0x6b0>)
 8009556:	f240 3203 	movw	r2, #771	; 0x303
 800955a:	2145      	movs	r1, #69	; 0x45
 800955c:	f504 600a 	add.w	r0, r4, #2208	; 0x8a0
 8009560:	f7ff f9f8 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009564:	9501      	str	r5, [sp, #4]
 8009566:	f8cd 9000 	str.w	r9, [sp]
 800956a:	4b10      	ldr	r3, [pc, #64]	; (80095ac <_ZN5codal15STM32BluePillIOC1Ev+0x6b4>)
 800956c:	f44f 7241 	mov.w	r2, #772	; 0x304
 8009570:	2146      	movs	r1, #70	; 0x46
 8009572:	f504 600c 	add.w	r0, r4, #2240	; 0x8c0
 8009576:	f7ff f9ed 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800957a:	9501      	str	r5, [sp, #4]
 800957c:	f8cd 8000 	str.w	r8, [sp]
 8009580:	4b07      	ldr	r3, [pc, #28]	; (80095a0 <_ZN5codal15STM32BluePillIOC1Ev+0x6a8>)
 8009582:	f240 3205 	movw	r2, #773	; 0x305
 8009586:	2147      	movs	r1, #71	; 0x47
 8009588:	f504 600e 	add.w	r0, r4, #2272	; 0x8e0
 800958c:	f7ff f9e2 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009590:	9501      	str	r5, [sp, #4]
 8009592:	f8cd b000 	str.w	fp, [sp]
 8009596:	4b05      	ldr	r3, [pc, #20]	; (80095ac <_ZN5codal15STM32BluePillIOC1Ev+0x6b4>)
 8009598:	f44f 7241 	mov.w	r2, #772	; 0x304
 800959c:	2148      	movs	r1, #72	; 0x48
 800959e:	e007      	b.n	80095b0 <_ZN5codal15STM32BluePillIOC1Ev+0x6b8>
 80095a0:	40011400 	.word	0x40011400
 80095a4:	40010800 	.word	0x40010800
 80095a8:	40010c00 	.word	0x40010c00
 80095ac:	40011000 	.word	0x40011000
 80095b0:	f504 6010 	add.w	r0, r4, #2304	; 0x900
 80095b4:	f7ff f9ce 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80095b8:	9501      	str	r5, [sp, #4]
 80095ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80095c4:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80095c8:	f44f 7241 	mov.w	r2, #772	; 0x304
 80095cc:	2149      	movs	r1, #73	; 0x49
 80095ce:	f504 6012 	add.w	r0, r4, #2336	; 0x920
 80095d2:	f7ff f9bf 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80095d6:	9501      	str	r5, [sp, #4]
 80095d8:	f8cd b000 	str.w	fp, [sp]
 80095dc:	4bd6      	ldr	r3, [pc, #856]	; (8009938 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 80095de:	f240 3203 	movw	r2, #771	; 0x303
 80095e2:	214a      	movs	r1, #74	; 0x4a
 80095e4:	f504 6014 	add.w	r0, r4, #2368	; 0x940
 80095e8:	f7ff f9b4 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80095ec:	9501      	str	r5, [sp, #4]
 80095ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095f2:	9300      	str	r3, [sp, #0]
 80095f4:	4bd0      	ldr	r3, [pc, #832]	; (8009938 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 80095f6:	f240 3203 	movw	r2, #771	; 0x303
 80095fa:	214b      	movs	r1, #75	; 0x4b
 80095fc:	f504 6016 	add.w	r0, r4, #2400	; 0x960
 8009600:	f7ff f9a8 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009604:	9501      	str	r5, [sp, #4]
 8009606:	f8cd 9000 	str.w	r9, [sp]
 800960a:	4bcb      	ldr	r3, [pc, #812]	; (8009938 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 800960c:	f240 3203 	movw	r2, #771	; 0x303
 8009610:	214c      	movs	r1, #76	; 0x4c
 8009612:	f504 6018 	add.w	r0, r4, #2432	; 0x980
 8009616:	f7ff f99d 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800961a:	9501      	str	r5, [sp, #4]
 800961c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	4bc5      	ldr	r3, [pc, #788]	; (8009938 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 8009624:	f240 3203 	movw	r2, #771	; 0x303
 8009628:	214d      	movs	r1, #77	; 0x4d
 800962a:	f504 601a 	add.w	r0, r4, #2464	; 0x9a0
 800962e:	f7ff f991 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009632:	9501      	str	r5, [sp, #4]
 8009634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	4bbf      	ldr	r3, [pc, #764]	; (8009938 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 800963c:	f240 3203 	movw	r2, #771	; 0x303
 8009640:	214e      	movs	r1, #78	; 0x4e
 8009642:	f504 601c 	add.w	r0, r4, #2496	; 0x9c0
 8009646:	f7ff f985 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800964a:	9501      	str	r5, [sp, #4]
 800964c:	9500      	str	r5, [sp, #0]
 800964e:	4bbb      	ldr	r3, [pc, #748]	; (800993c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8009650:	f240 3202 	movw	r2, #770	; 0x302
 8009654:	214f      	movs	r1, #79	; 0x4f
 8009656:	f504 601e 	add.w	r0, r4, #2528	; 0x9e0
 800965a:	f7ff f97b 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800965e:	9501      	str	r5, [sp, #4]
 8009660:	9700      	str	r7, [sp, #0]
 8009662:	4bb6      	ldr	r3, [pc, #728]	; (800993c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8009664:	f240 3202 	movw	r2, #770	; 0x302
 8009668:	2150      	movs	r1, #80	; 0x50
 800966a:	f504 6020 	add.w	r0, r4, #2560	; 0xa00
 800966e:	f7ff f971 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009672:	9501      	str	r5, [sp, #4]
 8009674:	f8cd 8000 	str.w	r8, [sp]
 8009678:	4bb0      	ldr	r3, [pc, #704]	; (800993c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 800967a:	f240 3202 	movw	r2, #770	; 0x302
 800967e:	2151      	movs	r1, #81	; 0x51
 8009680:	f504 6022 	add.w	r0, r4, #2592	; 0xa20
 8009684:	f7ff f966 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009688:	9501      	str	r5, [sp, #4]
 800968a:	f8cd a000 	str.w	sl, [sp]
 800968e:	4bab      	ldr	r3, [pc, #684]	; (800993c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8009690:	f240 3202 	movw	r2, #770	; 0x302
 8009694:	2152      	movs	r1, #82	; 0x52
 8009696:	f504 6024 	add.w	r0, r4, #2624	; 0xa40
 800969a:	f7ff f95b 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800969e:	9501      	str	r5, [sp, #4]
 80096a0:	2310      	movs	r3, #16
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	4ba5      	ldr	r3, [pc, #660]	; (800993c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 80096a6:	f240 3202 	movw	r2, #770	; 0x302
 80096aa:	2153      	movs	r1, #83	; 0x53
 80096ac:	f504 6026 	add.w	r0, r4, #2656	; 0xa60
 80096b0:	f7ff f950 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80096b4:	9501      	str	r5, [sp, #4]
 80096b6:	f8cd a000 	str.w	sl, [sp]
 80096ba:	4ba1      	ldr	r3, [pc, #644]	; (8009940 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 80096bc:	f240 3205 	movw	r2, #773	; 0x305
 80096c0:	2154      	movs	r1, #84	; 0x54
 80096c2:	f504 6028 	add.w	r0, r4, #2688	; 0xa80
 80096c6:	f7ff f945 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80096ca:	9501      	str	r5, [sp, #4]
 80096cc:	2310      	movs	r3, #16
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	4b9b      	ldr	r3, [pc, #620]	; (8009940 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 80096d2:	f240 3205 	movw	r2, #773	; 0x305
 80096d6:	2155      	movs	r1, #85	; 0x55
 80096d8:	f504 602a 	add.w	r0, r4, #2720	; 0xaa0
 80096dc:	f7ff f93a 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80096e0:	9501      	str	r5, [sp, #4]
 80096e2:	2320      	movs	r3, #32
 80096e4:	9300      	str	r3, [sp, #0]
 80096e6:	4b96      	ldr	r3, [pc, #600]	; (8009940 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 80096e8:	f240 3205 	movw	r2, #773	; 0x305
 80096ec:	2156      	movs	r1, #86	; 0x56
 80096ee:	f504 602c 	add.w	r0, r4, #2752	; 0xac0
 80096f2:	f7ff f92f 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80096f6:	9501      	str	r5, [sp, #4]
 80096f8:	9600      	str	r6, [sp, #0]
 80096fa:	4b91      	ldr	r3, [pc, #580]	; (8009940 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 80096fc:	f240 3205 	movw	r2, #773	; 0x305
 8009700:	2157      	movs	r1, #87	; 0x57
 8009702:	f504 602e 	add.w	r0, r4, #2784	; 0xae0
 8009706:	f7ff f925 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800970a:	9501      	str	r5, [sp, #4]
 800970c:	2380      	movs	r3, #128	; 0x80
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	4b8b      	ldr	r3, [pc, #556]	; (8009940 <_ZN5codal15STM32BluePillIOC1Ev+0xa48>)
 8009712:	f240 3205 	movw	r2, #773	; 0x305
 8009716:	2158      	movs	r1, #88	; 0x58
 8009718:	f504 6030 	add.w	r0, r4, #2816	; 0xb00
 800971c:	f7ff f91a 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009720:	9501      	str	r5, [sp, #4]
 8009722:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800972c:	f503 3383 	add.w	r3, r3, #67072	; 0x10600
 8009730:	f240 3202 	movw	r2, #770	; 0x302
 8009734:	2159      	movs	r1, #89	; 0x59
 8009736:	f504 6032 	add.w	r0, r4, #2848	; 0xb20
 800973a:	f7ff f90b 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800973e:	9501      	str	r5, [sp, #4]
 8009740:	f8cd b000 	str.w	fp, [sp]
 8009744:	4b7d      	ldr	r3, [pc, #500]	; (800993c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8009746:	f240 3202 	movw	r2, #770	; 0x302
 800974a:	215a      	movs	r1, #90	; 0x5a
 800974c:	f504 6034 	add.w	r0, r4, #2880	; 0xb40
 8009750:	f7ff f900 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009754:	4e78      	ldr	r6, [pc, #480]	; (8009938 <_ZN5codal15STM32BluePillIOC1Ev+0xa40>)
 8009756:	9501      	str	r5, [sp, #4]
 8009758:	f04f 0b40 	mov.w	fp, #64	; 0x40
 800975c:	f8cd b000 	str.w	fp, [sp]
 8009760:	4633      	mov	r3, r6
 8009762:	f240 3203 	movw	r2, #771	; 0x303
 8009766:	215b      	movs	r1, #91	; 0x5b
 8009768:	f504 6036 	add.w	r0, r4, #2912	; 0xb60
 800976c:	f7ff f8f2 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009770:	9501      	str	r5, [sp, #4]
 8009772:	f04f 0a80 	mov.w	sl, #128	; 0x80
 8009776:	f8cd a000 	str.w	sl, [sp]
 800977a:	4633      	mov	r3, r6
 800977c:	f240 3203 	movw	r2, #771	; 0x303
 8009780:	215c      	movs	r1, #92	; 0x5c
 8009782:	f504 6038 	add.w	r0, r4, #2944	; 0xb80
 8009786:	f7ff f8e5 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800978a:	9501      	str	r5, [sp, #4]
 800978c:	2720      	movs	r7, #32
 800978e:	9700      	str	r7, [sp, #0]
 8009790:	4633      	mov	r3, r6
 8009792:	f240 3203 	movw	r2, #771	; 0x303
 8009796:	215d      	movs	r1, #93	; 0x5d
 8009798:	f504 603a 	add.w	r0, r4, #2976	; 0xba0
 800979c:	f7ff f8da 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80097a0:	9501      	str	r5, [sp, #4]
 80097a2:	f8cd b000 	str.w	fp, [sp]
 80097a6:	4633      	mov	r3, r6
 80097a8:	f240 3203 	movw	r2, #771	; 0x303
 80097ac:	215e      	movs	r1, #94	; 0x5e
 80097ae:	f504 603c 	add.w	r0, r4, #3008	; 0xbc0
 80097b2:	f7ff f8cf 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80097b6:	9501      	str	r5, [sp, #4]
 80097b8:	f8cd a000 	str.w	sl, [sp]
 80097bc:	4633      	mov	r3, r6
 80097be:	f240 3203 	movw	r2, #771	; 0x303
 80097c2:	215f      	movs	r1, #95	; 0x5f
 80097c4:	f504 603e 	add.w	r0, r4, #3040	; 0xbe0
 80097c8:	f7ff f8c4 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80097cc:	9501      	str	r5, [sp, #4]
 80097ce:	9700      	str	r7, [sp, #0]
 80097d0:	4633      	mov	r3, r6
 80097d2:	f240 3203 	movw	r2, #771	; 0x303
 80097d6:	2160      	movs	r1, #96	; 0x60
 80097d8:	f504 6040 	add.w	r0, r4, #3072	; 0xc00
 80097dc:	f7ff f8ba 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80097e0:	9501      	str	r5, [sp, #4]
 80097e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	4633      	mov	r3, r6
 80097ea:	f240 3203 	movw	r2, #771	; 0x303
 80097ee:	2161      	movs	r1, #97	; 0x61
 80097f0:	f504 6042 	add.w	r0, r4, #3104	; 0xc20
 80097f4:	f7ff f8ae 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80097f8:	9501      	str	r5, [sp, #4]
 80097fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	4633      	mov	r3, r6
 8009802:	f240 3203 	movw	r2, #771	; 0x303
 8009806:	2162      	movs	r1, #98	; 0x62
 8009808:	f504 6044 	add.w	r0, r4, #3136	; 0xc40
 800980c:	f7ff f8a2 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009810:	9501      	str	r5, [sp, #4]
 8009812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	4633      	mov	r3, r6
 800981a:	f240 3203 	movw	r2, #771	; 0x303
 800981e:	2163      	movs	r1, #99	; 0x63
 8009820:	f504 6046 	add.w	r0, r4, #3168	; 0xc60
 8009824:	f7ff f896 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009828:	9501      	str	r5, [sp, #4]
 800982a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	4633      	mov	r3, r6
 8009832:	f240 3203 	movw	r2, #771	; 0x303
 8009836:	2164      	movs	r1, #100	; 0x64
 8009838:	f504 6048 	add.w	r0, r4, #3200	; 0xc80
 800983c:	f7ff f88a 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009840:	9501      	str	r5, [sp, #4]
 8009842:	f8cd 9000 	str.w	r9, [sp]
 8009846:	4633      	mov	r3, r6
 8009848:	f240 3203 	movw	r2, #771	; 0x303
 800984c:	2165      	movs	r1, #101	; 0x65
 800984e:	f504 604a 	add.w	r0, r4, #3232	; 0xca0
 8009852:	f7ff f87f 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009856:	9501      	str	r5, [sp, #4]
 8009858:	f04f 0810 	mov.w	r8, #16
 800985c:	f8cd 8000 	str.w	r8, [sp]
 8009860:	4b36      	ldr	r3, [pc, #216]	; (800993c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8009862:	f240 3202 	movw	r2, #770	; 0x302
 8009866:	2166      	movs	r1, #102	; 0x66
 8009868:	f504 604c 	add.w	r0, r4, #3264	; 0xcc0
 800986c:	f7ff f872 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009870:	9501      	str	r5, [sp, #4]
 8009872:	9700      	str	r7, [sp, #0]
 8009874:	4b31      	ldr	r3, [pc, #196]	; (800993c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 8009876:	f240 3202 	movw	r2, #770	; 0x302
 800987a:	2167      	movs	r1, #103	; 0x67
 800987c:	f504 604e 	add.w	r0, r4, #3296	; 0xce0
 8009880:	f7ff f868 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009884:	9501      	str	r5, [sp, #4]
 8009886:	f8cd b000 	str.w	fp, [sp]
 800988a:	4b2c      	ldr	r3, [pc, #176]	; (800993c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 800988c:	f240 3202 	movw	r2, #770	; 0x302
 8009890:	2168      	movs	r1, #104	; 0x68
 8009892:	f504 6050 	add.w	r0, r4, #3328	; 0xd00
 8009896:	f7ff f85d 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800989a:	9501      	str	r5, [sp, #4]
 800989c:	f8cd a000 	str.w	sl, [sp]
 80098a0:	4b26      	ldr	r3, [pc, #152]	; (800993c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 80098a2:	f240 3202 	movw	r2, #770	; 0x302
 80098a6:	2169      	movs	r1, #105	; 0x69
 80098a8:	f504 6052 	add.w	r0, r4, #3360	; 0xd20
 80098ac:	f7ff f852 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80098b0:	9501      	str	r5, [sp, #4]
 80098b2:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
 80098b6:	f8cd a000 	str.w	sl, [sp]
 80098ba:	4b20      	ldr	r3, [pc, #128]	; (800993c <_ZN5codal15STM32BluePillIOC1Ev+0xa44>)
 80098bc:	f240 3202 	movw	r2, #770	; 0x302
 80098c0:	216a      	movs	r1, #106	; 0x6a
 80098c2:	f504 6054 	add.w	r0, r4, #3392	; 0xd40
 80098c6:	f7ff f845 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80098ca:	9501      	str	r5, [sp, #4]
 80098cc:	2308      	movs	r3, #8
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	4633      	mov	r3, r6
 80098d2:	f240 3203 	movw	r2, #771	; 0x303
 80098d6:	216b      	movs	r1, #107	; 0x6b
 80098d8:	f504 6056 	add.w	r0, r4, #3424	; 0xd60
 80098dc:	f7ff f83a 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80098e0:	9501      	str	r5, [sp, #4]
 80098e2:	f8cd 8000 	str.w	r8, [sp]
 80098e6:	4633      	mov	r3, r6
 80098e8:	f240 3203 	movw	r2, #771	; 0x303
 80098ec:	216c      	movs	r1, #108	; 0x6c
 80098ee:	f504 6058 	add.w	r0, r4, #3456	; 0xd80
 80098f2:	f7ff f82f 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80098f6:	9501      	str	r5, [sp, #4]
 80098f8:	9700      	str	r7, [sp, #0]
 80098fa:	4633      	mov	r3, r6
 80098fc:	f240 3203 	movw	r2, #771	; 0x303
 8009900:	216d      	movs	r1, #109	; 0x6d
 8009902:	f504 605a 	add.w	r0, r4, #3488	; 0xda0
 8009906:	f7ff f825 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800990a:	9501      	str	r5, [sp, #4]
 800990c:	f8cd 9000 	str.w	r9, [sp]
 8009910:	4633      	mov	r3, r6
 8009912:	f240 3203 	movw	r2, #771	; 0x303
 8009916:	216e      	movs	r1, #110	; 0x6e
 8009918:	f504 605c 	add.w	r0, r4, #3520	; 0xdc0
 800991c:	f7ff f81a 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009920:	9501      	str	r5, [sp, #4]
 8009922:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
 8009926:	f8cd b000 	str.w	fp, [sp]
 800992a:	4633      	mov	r3, r6
 800992c:	f240 3203 	movw	r2, #771	; 0x303
 8009930:	216f      	movs	r1, #111	; 0x6f
 8009932:	f504 605e 	add.w	r0, r4, #3552	; 0xde0
 8009936:	e005      	b.n	8009944 <_ZN5codal15STM32BluePillIOC1Ev+0xa4c>
 8009938:	40010c00 	.word	0x40010c00
 800993c:	40010800 	.word	0x40010800
 8009940:	40011400 	.word	0x40011400
 8009944:	f7ff f806 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009948:	9501      	str	r5, [sp, #4]
 800994a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	4633      	mov	r3, r6
 8009952:	f240 3203 	movw	r2, #771	; 0x303
 8009956:	2170      	movs	r1, #112	; 0x70
 8009958:	f504 6060 	add.w	r0, r4, #3584	; 0xe00
 800995c:	f7fe fffa 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009960:	9501      	str	r5, [sp, #4]
 8009962:	f8cd a000 	str.w	sl, [sp]
 8009966:	4633      	mov	r3, r6
 8009968:	f240 3203 	movw	r2, #771	; 0x303
 800996c:	2171      	movs	r1, #113	; 0x71
 800996e:	f504 6062 	add.w	r0, r4, #3616	; 0xe20
 8009972:	f7fe ffef 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009976:	9501      	str	r5, [sp, #4]
 8009978:	f8cd a000 	str.w	sl, [sp]
 800997c:	4b33      	ldr	r3, [pc, #204]	; (8009a4c <_ZN5codal15STM32BluePillIOC1Ev+0xb54>)
 800997e:	f240 3202 	movw	r2, #770	; 0x302
 8009982:	2172      	movs	r1, #114	; 0x72
 8009984:	f504 6064 	add.w	r0, r4, #3648	; 0xe40
 8009988:	f7fe ffe4 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 800998c:	9501      	str	r5, [sp, #4]
 800998e:	2308      	movs	r3, #8
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	4633      	mov	r3, r6
 8009994:	f240 3203 	movw	r2, #771	; 0x303
 8009998:	2173      	movs	r1, #115	; 0x73
 800999a:	f504 6066 	add.w	r0, r4, #3680	; 0xe60
 800999e:	f7fe ffd9 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80099a2:	9501      	str	r5, [sp, #4]
 80099a4:	f8cd 8000 	str.w	r8, [sp]
 80099a8:	4633      	mov	r3, r6
 80099aa:	f240 3203 	movw	r2, #771	; 0x303
 80099ae:	2174      	movs	r1, #116	; 0x74
 80099b0:	f504 6068 	add.w	r0, r4, #3712	; 0xe80
 80099b4:	f7fe ffce 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80099b8:	9501      	str	r5, [sp, #4]
 80099ba:	9700      	str	r7, [sp, #0]
 80099bc:	4633      	mov	r3, r6
 80099be:	f240 3203 	movw	r2, #771	; 0x303
 80099c2:	2175      	movs	r1, #117	; 0x75
 80099c4:	f504 606a 	add.w	r0, r4, #3744	; 0xea0
 80099c8:	f7fe ffc4 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80099cc:	9501      	str	r5, [sp, #4]
 80099ce:	f8cd 8000 	str.w	r8, [sp]
 80099d2:	4b1e      	ldr	r3, [pc, #120]	; (8009a4c <_ZN5codal15STM32BluePillIOC1Ev+0xb54>)
 80099d4:	f240 3202 	movw	r2, #770	; 0x302
 80099d8:	2176      	movs	r1, #118	; 0x76
 80099da:	f504 606c 	add.w	r0, r4, #3776	; 0xec0
 80099de:	f7fe ffb9 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80099e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80099e6:	9501      	str	r5, [sp, #4]
 80099e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	4633      	mov	r3, r6
 80099f0:	f44f 7241 	mov.w	r2, #772	; 0x304
 80099f4:	2177      	movs	r1, #119	; 0x77
 80099f6:	f504 606e 	add.w	r0, r4, #3808	; 0xee0
 80099fa:	f7fe ffab 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 80099fe:	9501      	str	r5, [sp, #4]
 8009a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	4633      	mov	r3, r6
 8009a08:	f44f 7241 	mov.w	r2, #772	; 0x304
 8009a0c:	2178      	movs	r1, #120	; 0x78
 8009a0e:	f504 6070 	add.w	r0, r4, #3840	; 0xf00
 8009a12:	f7fe ff9f 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009a16:	9501      	str	r5, [sp, #4]
 8009a18:	f8cd 9000 	str.w	r9, [sp]
 8009a1c:	4633      	mov	r3, r6
 8009a1e:	f44f 7241 	mov.w	r2, #772	; 0x304
 8009a22:	2179      	movs	r1, #121	; 0x79
 8009a24:	f504 6072 	add.w	r0, r4, #3872	; 0xf20
 8009a28:	f7fe ff94 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
 8009a2c:	9501      	str	r5, [sp, #4]
 8009a2e:	f8cd b000 	str.w	fp, [sp]
 8009a32:	4633      	mov	r3, r6
 8009a34:	f44f 7241 	mov.w	r2, #772	; 0x304
 8009a38:	217a      	movs	r1, #122	; 0x7a
 8009a3a:	f504 6074 	add.w	r0, r4, #3904	; 0xf40
 8009a3e:	f7fe ff89 	bl	8008954 <_ZN5codal3_cm3PinC1EhmmtNS_13PinCapabilityE>
vbat        (CM_PIN_VBAT       , RCC_GPIOADC, GPIOADC, GPIOVBAT, PIN_CAPABILITY_DIGITAL),
#endif  //  TODO

//  End of autogenerated section
{
}
 8009a42:	4620      	mov	r0, r4
 8009a44:	b003      	add	sp, #12
 8009a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4a:	bf00      	nop
 8009a4c:	40010800 	.word	0x40010800

08009a50 <_Z41__static_initialization_and_destruction_0ii>:

void UARTInterface::write(uint8_t ch) {
    //  Send the byte to the UART port.
    //  debug_println("uart_write"); debug_flush();
    usart_send(USART2, ch);
}
 8009a50:	2801      	cmp	r0, #1
 8009a52:	d000      	beq.n	8009a56 <_Z41__static_initialization_and_destruction_0ii+0x6>
 8009a54:	4770      	bx	lr
 8009a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a5a:	4299      	cmp	r1, r3
 8009a5c:	d1fa      	bne.n	8009a54 <_Z41__static_initialization_and_destruction_0ii+0x4>
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8009a5e:	4b02      	ldr	r3, [pc, #8]	; (8009a68 <_Z41__static_initialization_and_destruction_0ii+0x18>)
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	641a      	str	r2, [r3, #64]	; 0x40
 8009a66:	e7f5      	b.n	8009a54 <_Z41__static_initialization_and_destruction_0ii+0x4>
 8009a68:	20002994 	.word	0x20002994

08009a6c <_ZN5codal3_cm3I2CC1ERNS_3PinES3_>:
            int res = HAL_I2C_Init(&i2c);
            CODAL_ASSERT(res == HAL_OK);
#endif  //  TODO            
        }

        I2C::I2C(codal::Pin &sda, codal::Pin &scl) : codal::I2C(sda, scl), sda(sda), scl(scl)
 8009a6c:	b570      	push	{r4, r5, r6, lr}
 8009a6e:	4604      	mov	r4, r0
 8009a70:	460e      	mov	r6, r1
 8009a72:	4615      	mov	r5, r2
 8009a74:	f000 f8c2 	bl	8009bfc <_ZN5codal3I2CC1ERNS_3PinES2_>
 8009a78:	4b02      	ldr	r3, [pc, #8]	; (8009a84 <_ZN5codal3_cm3I2CC1ERNS_3PinES3_+0x18>)
 8009a7a:	6023      	str	r3, [r4, #0]
 8009a7c:	6066      	str	r6, [r4, #4]
 8009a7e:	60a5      	str	r5, [r4, #8]
            i2c.Init.OwnAddress1 = 0xFE;
            i2c.Init.OwnAddress2 = 0xFE;

            needsInit = true;
#endif  //  TODO            
        }
 8009a80:	4620      	mov	r0, r4
 8009a82:	bd70      	pop	{r4, r5, r6, pc}
 8009a84:	0800b2f4 	.word	0x0800b2f4

08009a88 <_ZN5codal3_cm3SPI4initEv>:
            p->setup(mode, cnf);
            CODAL_ASSERT(!prev || prev == peri);
            return peri;
        }

        void SPI::init() {
 8009a88:	b538      	push	{r3, r4, r5, lr}
            auto res = HAL_OK;
            if (!needsInit) { return; }
 8009a8a:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009a8e:	b903      	cbnz	r3, 8009a92 <_ZN5codal3_cm3SPI4initEv+0xa>
            }
            spi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
            auto res = HAL_SPI_Init(&spi);
#endif  //  TODO
            CODAL_ASSERT(res == HAL_OK);
        }
 8009a90:	bd38      	pop	{r3, r4, r5, pc}
 8009a92:	4604      	mov	r4, r0
            needsInit = false;
 8009a94:	2500      	movs	r5, #0
 8009a96:	f880 5020 	strb.w	r5, [r0, #32]
            uint32_t instance = _codal_setup_pin(sclk, 0, PinMap_SPI_SCK);
 8009a9a:	4a0d      	ldr	r2, [pc, #52]	; (8009ad0 <_ZN5codal3_cm3SPI4initEv+0x48>)
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	68c0      	ldr	r0, [r0, #12]
 8009aa0:	f001 f8b1 	bl	800ac06 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            instance = _codal_setup_pin(miso, 0, PinMap_SPI_MISO);
 8009aa4:	4a0b      	ldr	r2, [pc, #44]	; (8009ad4 <_ZN5codal3_cm3SPI4initEv+0x4c>)
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	68a0      	ldr	r0, [r4, #8]
 8009aaa:	f001 f8ac 	bl	800ac06 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            instance = _codal_setup_pin(mosi, 0, PinMap_SPI_MOSI);
 8009aae:	4a0a      	ldr	r2, [pc, #40]	; (8009ad8 <_ZN5codal3_cm3SPI4initEv+0x50>)
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	6860      	ldr	r0, [r4, #4]
 8009ab4:	f001 f8a7 	bl	800ac06 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            instance = _codal_setup_pin(nss, 0, PinMap_SPI_NSS);
 8009ab8:	4a08      	ldr	r2, [pc, #32]	; (8009adc <_ZN5codal3_cm3SPI4initEv+0x54>)
 8009aba:	4629      	mov	r1, r5
 8009abc:	6920      	ldr	r0, [r4, #16]
 8009abe:	f001 f8a2 	bl	800ac06 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>
            LOG("SPI instance %p", instance);
 8009ac2:	4807      	ldr	r0, [pc, #28]	; (8009ae0 <_ZN5codal3_cm3SPI4initEv+0x58>)
 8009ac4:	f7f8 fa50 	bl	8001f68 <debug_println>
 8009ac8:	f7f8 fa75 	bl	8001fb6 <debug_flush>
 8009acc:	e7e0      	b.n	8009a90 <_ZN5codal3_cm3SPI4initEv+0x8>
 8009ace:	bf00      	nop
 8009ad0:	0800b2a4 	.word	0x0800b2a4
 8009ad4:	0800b1cc 	.word	0x0800b1cc
 8009ad8:	0800b214 	.word	0x0800b214
 8009adc:	0800b25c 	.word	0x0800b25c
 8009ae0:	0800b318 	.word	0x0800b318

08009ae4 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_>:
            debug_print(" sclk "); debug_print(sclk.name); 
            debug_println(""); debug_flush();
        }

        //  New constructor.  Called by codal-libopencm3.
        SPI::SPI(Pin &mosi, Pin &miso, Pin &sclk, Pin &nss) : codal::SPI() {
 8009ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae8:	4604      	mov	r4, r0
 8009aea:	4688      	mov	r8, r1
 8009aec:	4617      	mov	r7, r2
 8009aee:	461e      	mov	r6, r3
 8009af0:	9d06      	ldr	r5, [sp, #24]
 8009af2:	4b1c      	ldr	r3, [pc, #112]	; (8009b64 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x80>)
 8009af4:	6003      	str	r3, [r0, #0]
            this->mosi = &mosi;
 8009af6:	6061      	str	r1, [r4, #4]
            this->miso = &miso;
 8009af8:	60a2      	str	r2, [r4, #8]
            this->sclk = &sclk;
 8009afa:	60c6      	str	r6, [r0, #12]
            this->nss = &nss;
 8009afc:	6105      	str	r5, [r0, #16]
            // ZERO(spi); ZERO(hdma_tx); ZERO(hdma_rx);
            this->needsInit = true;
 8009afe:	2301      	movs	r3, #1
 8009b00:	f880 3020 	strb.w	r3, [r0, #32]
            this->transferCompleteEventCode = codal::allocateNotifyEvent();
 8009b04:	f7fe fda2 	bl	800864c <_ZN5codal19allocateNotifyEventEv>
 8009b08:	84a0      	strh	r0, [r4, #36]	; 0x24
            for (unsigned i = 0; i < ARRAY_SIZE(_instances); ++i) {
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	2b03      	cmp	r3, #3
 8009b0e:	d808      	bhi.n	8009b22 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x3e>
                if (_instances[i] == NULL) {
 8009b10:	4a15      	ldr	r2, [pc, #84]	; (8009b68 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x84>)
 8009b12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009b16:	b10a      	cbz	r2, 8009b1c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x38>
            for (unsigned i = 0; i < ARRAY_SIZE(_instances); ++i) {
 8009b18:	3301      	adds	r3, #1
 8009b1a:	e7f7      	b.n	8009b0c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x28>
                    _instances[i] = this;
 8009b1c:	4a12      	ldr	r2, [pc, #72]	; (8009b68 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x84>)
 8009b1e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
                    break;
                }
            }
            debug_print("spi mosi "); debug_print(mosi.name); 
 8009b22:	4812      	ldr	r0, [pc, #72]	; (8009b6c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x88>)
 8009b24:	f7f8 fa4c 	bl	8001fc0 <debug_print>
 8009b28:	f898 0010 	ldrb.w	r0, [r8, #16]
 8009b2c:	f7f8 fa02 	bl	8001f34 <_Z11debug_printi>
            debug_print(" miso "); debug_print(miso.name); 
 8009b30:	480f      	ldr	r0, [pc, #60]	; (8009b70 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x8c>)
 8009b32:	f7f8 fa45 	bl	8001fc0 <debug_print>
 8009b36:	7c38      	ldrb	r0, [r7, #16]
 8009b38:	f7f8 f9fc 	bl	8001f34 <_Z11debug_printi>
            debug_print(" sclk "); debug_print(sclk.name); 
 8009b3c:	480d      	ldr	r0, [pc, #52]	; (8009b74 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x90>)
 8009b3e:	f7f8 fa3f 	bl	8001fc0 <debug_print>
 8009b42:	7c30      	ldrb	r0, [r6, #16]
 8009b44:	f7f8 f9f6 	bl	8001f34 <_Z11debug_printi>
            debug_print(" nss "); debug_print(nss.name); 
 8009b48:	480b      	ldr	r0, [pc, #44]	; (8009b78 <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x94>)
 8009b4a:	f7f8 fa39 	bl	8001fc0 <debug_print>
 8009b4e:	7c28      	ldrb	r0, [r5, #16]
 8009b50:	f7f8 f9f0 	bl	8001f34 <_Z11debug_printi>
            debug_println(""); debug_flush();
 8009b54:	4809      	ldr	r0, [pc, #36]	; (8009b7c <_ZN5codal3_cm3SPIC1ERNS0_3PinES3_S3_S3_+0x98>)
 8009b56:	f7f8 fa07 	bl	8001f68 <debug_println>
 8009b5a:	f7f8 fa2c 	bl	8001fb6 <debug_flush>
        }
 8009b5e:	4620      	mov	r0, r4
 8009b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b64:	0800b368 	.word	0x0800b368
 8009b68:	20002a00 	.word	0x20002a00
 8009b6c:	0800b34c 	.word	0x0800b34c
 8009b70:	0800b33c 	.word	0x0800b33c
 8009b74:	0800b344 	.word	0x0800b344
 8009b78:	0800b358 	.word	0x0800b358
 8009b7c:	0800b028 	.word	0x0800b028

08009b80 <pinmap_peripheral>:

static CmPeripheral pinmap_find_peripheral(codal::PinNumber pin, const PinMap *map);
static CmPinMode pinmap_find_mode(codal::PinNumber pin, const PinMap *map);
static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap *map);

CmPeripheral pinmap_peripheral(codal::PinNumber pin, const PinMap* map) {
 8009b80:	b510      	push	{r4, lr}
    //  Return the peripheral for the pin e.g. SPI1.
    CmPeripheral peripheral = CM_PERIPHERAL_NC;
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 8009b82:	28ff      	cmp	r0, #255	; 0xff
 8009b84:	d00d      	beq.n	8009ba2 <pinmap_peripheral+0x22>

    peripheral = pinmap_find_peripheral(pin, map);
 8009b86:	f001 f87d 	bl	800ac84 <_ZL22pinmap_find_peripheralhPK6PinMap>
 8009b8a:	4604      	mov	r4, r0
    if (peripheral == CM_PERIPHERAL_NC) // no mapping available
 8009b8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009b90:	d001      	beq.n	8009b96 <pinmap_peripheral+0x16>
        { error("pinmap not found for peripheral"); }
    return peripheral;
}
 8009b92:	4620      	mov	r0, r4
 8009b94:	bd10      	pop	{r4, pc}
        { error("pinmap not found for peripheral"); }
 8009b96:	4804      	ldr	r0, [pc, #16]	; (8009ba8 <pinmap_peripheral+0x28>)
 8009b98:	f7f8 f9e6 	bl	8001f68 <debug_println>
 8009b9c:	f7f8 fa0b 	bl	8001fb6 <debug_flush>
 8009ba0:	e7f7      	b.n	8009b92 <pinmap_peripheral+0x12>
    if (pin == CM_PIN_NC) { return CM_PERIPHERAL_NC; }
 8009ba2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ba6:	e7f4      	b.n	8009b92 <pinmap_peripheral+0x12>
 8009ba8:	0800b3b4 	.word	0x0800b3b4

08009bac <pinmap_mode>:

CmPinMode pinmap_mode(codal::PinNumber pin, const PinMap* map) {
 8009bac:	b510      	push	{r4, lr}
    //  Return the pin mode for the peripheral e.g. GPIO_MODE_OUTPUT_2_MHZ.
    CmPinMode mode = CM_PINMODE_NC;
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }
 8009bae:	28ff      	cmp	r0, #255	; 0xff
 8009bb0:	d00c      	beq.n	8009bcc <pinmap_mode+0x20>

    mode = pinmap_find_mode(pin, map);
 8009bb2:	f001 f873 	bl	800ac9c <_ZL16pinmap_find_modehPK6PinMap>
 8009bb6:	4604      	mov	r4, r0
    if (mode == CM_PINMODE_NC) // no mapping available
 8009bb8:	28ff      	cmp	r0, #255	; 0xff
 8009bba:	d001      	beq.n	8009bc0 <pinmap_mode+0x14>
        { error("pinmap not found for mode"); }
    return mode;
}
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	bd10      	pop	{r4, pc}
        { error("pinmap not found for mode"); }
 8009bc0:	4803      	ldr	r0, [pc, #12]	; (8009bd0 <pinmap_mode+0x24>)
 8009bc2:	f7f8 f9d1 	bl	8001f68 <debug_println>
 8009bc6:	f7f8 f9f6 	bl	8001fb6 <debug_flush>
 8009bca:	e7f7      	b.n	8009bbc <pinmap_mode+0x10>
    if (pin == CM_PIN_NC) { return CM_PINMODE_NC; }
 8009bcc:	24ff      	movs	r4, #255	; 0xff
 8009bce:	e7f5      	b.n	8009bbc <pinmap_mode+0x10>
 8009bd0:	0800b398 	.word	0x0800b398

08009bd4 <pinmap_cnf>:

CmPinCnf pinmap_cnf(codal::PinNumber pin, const PinMap* map) {
 8009bd4:	b510      	push	{r4, lr}
    //  Return the pin config for the peripheral e.g. GPIO_CNF_OUTPUT_PUSHPULL.
    CmPinCnf cnf = CM_PINCNF_NC;
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }
 8009bd6:	28ff      	cmp	r0, #255	; 0xff
 8009bd8:	d00c      	beq.n	8009bf4 <pinmap_cnf+0x20>

    cnf = pinmap_find_cnf(pin, map);
 8009bda:	f001 f86a 	bl	800acb2 <_ZL15pinmap_find_cnfhPK6PinMap>
 8009bde:	4604      	mov	r4, r0
    if (cnf == CM_PINCNF_NC) // no mapping available
 8009be0:	28ff      	cmp	r0, #255	; 0xff
 8009be2:	d001      	beq.n	8009be8 <pinmap_cnf+0x14>
        { error("pinmap not found for cnf"); }
    return cnf;
}
 8009be4:	4620      	mov	r0, r4
 8009be6:	bd10      	pop	{r4, pc}
        { error("pinmap not found for cnf"); }
 8009be8:	4803      	ldr	r0, [pc, #12]	; (8009bf8 <pinmap_cnf+0x24>)
 8009bea:	f7f8 f9bd 	bl	8001f68 <debug_println>
 8009bee:	f7f8 f9e2 	bl	8001fb6 <debug_flush>
 8009bf2:	e7f7      	b.n	8009be4 <pinmap_cnf+0x10>
    if (pin == CM_PIN_NC) { return CM_PINCNF_NC; }
 8009bf4:	24ff      	movs	r4, #255	; 0xff
 8009bf6:	e7f5      	b.n	8009be4 <pinmap_cnf+0x10>
 8009bf8:	0800b37c 	.word	0x0800b37c

08009bfc <_ZN5codal3I2CC1ERNS_3PinES2_>:
namespace codal
{
/**
  * Constructor.
  */
I2C::I2C(Pin &sda, Pin &scl)
 8009bfc:	4b01      	ldr	r3, [pc, #4]	; (8009c04 <_ZN5codal3I2CC1ERNS_3PinES2_+0x8>)
 8009bfe:	6003      	str	r3, [r0, #0]
{
}
 8009c00:	4770      	bx	lr
 8009c02:	bf00      	nop
 8009c04:	0800b3dc 	.word	0x0800b3dc

08009c08 <_ZN5codal14CodalComponent16periodicCallbackEv>:
        virtual void periodicCallback() {}
 8009c08:	4770      	bx	lr

08009c0a <_ZN5codal14CodalComponent12idleCallbackEv>:
        virtual void idleCallback() {}
 8009c0a:	4770      	bx	lr

08009c0c <_GLOBAL__sub_I_bluepill>:
}
 8009c0c:	b508      	push	{r3, lr}
 8009c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009c12:	2001      	movs	r0, #1
 8009c14:	f7fd fe68 	bl	80078e8 <_Z41__static_initialization_and_destruction_0ii>
 8009c18:	bd08      	pop	{r3, pc}

08009c1a <_GLOBAL__sub_I_serialPort>:
 8009c1a:	b508      	push	{r3, lr}
 8009c1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009c20:	2001      	movs	r0, #1
 8009c22:	f7fd ff1f 	bl	8007a64 <_Z41__static_initialization_and_destruction_0ii>
 8009c26:	bd08      	pop	{r3, pc}

08009c28 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_>:
{
 8009c28:	b538      	push	{r3, r4, r5, lr}
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	460d      	mov	r5, r1
    target_disable_irq();
 8009c2e:	f7f7 fb07 	bl	8001240 <target_disable_irq>
    f->queue = queue;
 8009c32:	6165      	str	r5, [r4, #20]
    if (*queue == NULL)
 8009c34:	682a      	ldr	r2, [r5, #0]
 8009c36:	b92a      	cbnz	r2, 8009c44 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x1c>
        f->next = NULL;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61a3      	str	r3, [r4, #24]
        f->prev = NULL;
 8009c3c:	61e3      	str	r3, [r4, #28]
        *queue = f;
 8009c3e:	602c      	str	r4, [r5, #0]
 8009c40:	e006      	b.n	8009c50 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x28>
            last = last->next;
 8009c42:	461a      	mov	r2, r3
        while (last->next != NULL)
 8009c44:	6993      	ldr	r3, [r2, #24]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1fb      	bne.n	8009c42 <_ZN5codal11queue_fiberEPNS_5FiberEPS1_+0x1a>
        last->next = f;
 8009c4a:	6194      	str	r4, [r2, #24]
        f->prev = last;
 8009c4c:	61e2      	str	r2, [r4, #28]
        f->next = NULL;
 8009c4e:	61a3      	str	r3, [r4, #24]
    target_enable_irq();
 8009c50:	f7f7 faf4 	bl	800123c <target_enable_irq>
}
 8009c54:	bd38      	pop	{r3, r4, r5, pc}

08009c56 <_ZN5codal13dequeue_fiberEPNS_5FiberE>:
    if (f->queue == NULL)
 8009c56:	6943      	ldr	r3, [r0, #20]
 8009c58:	b1b3      	cbz	r3, 8009c88 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x32>
{
 8009c5a:	b510      	push	{r4, lr}
 8009c5c:	4604      	mov	r4, r0
    target_disable_irq();
 8009c5e:	f7f7 faef 	bl	8001240 <target_disable_irq>
    if (f->prev != NULL)
 8009c62:	69e3      	ldr	r3, [r4, #28]
 8009c64:	b163      	cbz	r3, 8009c80 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x2a>
        f->prev->next = f->next;
 8009c66:	69a2      	ldr	r2, [r4, #24]
 8009c68:	619a      	str	r2, [r3, #24]
    if(f->next)
 8009c6a:	69a3      	ldr	r3, [r4, #24]
 8009c6c:	b10b      	cbz	r3, 8009c72 <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x1c>
        f->next->prev = f->prev;
 8009c6e:	69e2      	ldr	r2, [r4, #28]
 8009c70:	61da      	str	r2, [r3, #28]
    f->next = NULL;
 8009c72:	2300      	movs	r3, #0
 8009c74:	61a3      	str	r3, [r4, #24]
    f->prev = NULL;
 8009c76:	61e3      	str	r3, [r4, #28]
    f->queue = NULL;
 8009c78:	6163      	str	r3, [r4, #20]
    target_enable_irq();
 8009c7a:	f7f7 fadf 	bl	800123c <target_enable_irq>
}
 8009c7e:	bd10      	pop	{r4, pc}
        *(f->queue) = f->next;
 8009c80:	6963      	ldr	r3, [r4, #20]
 8009c82:	69a2      	ldr	r2, [r4, #24]
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	e7f0      	b.n	8009c6a <_ZN5codal13dequeue_fiberEPNS_5FiberE+0x14>
 8009c88:	4770      	bx	lr

08009c8a <_ZN5codal12create_fiberEPFvvES1_>:
{
 8009c8a:	b538      	push	{r3, r4, r5, lr}
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	460d      	mov	r5, r1
    if (!fiber_scheduler_running())
 8009c90:	f7fe f874 	bl	8007d7c <_ZN5codal23fiber_scheduler_runningEv>
 8009c94:	b130      	cbz	r0, 8009ca4 <_ZN5codal12create_fiberEPFvvES1_+0x1a>
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, 0, 0);
 8009c96:	2300      	movs	r3, #0
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f7fe f94f 	bl	8007f40 <_Z14__create_fibermmmi>
}
 8009ca2:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	e7fc      	b.n	8009ca2 <_ZN5codal12create_fiberEPFvvES1_+0x18>

08009ca8 <_ZN5codal12create_fiberEPFvPvES0_S2_>:
{
 8009ca8:	b570      	push	{r4, r5, r6, lr}
 8009caa:	4604      	mov	r4, r0
 8009cac:	460e      	mov	r6, r1
 8009cae:	4615      	mov	r5, r2
    if (!fiber_scheduler_running())
 8009cb0:	f7fe f864 	bl	8007d7c <_ZN5codal23fiber_scheduler_runningEv>
 8009cb4:	b130      	cbz	r0, 8009cc4 <_ZN5codal12create_fiberEPFvPvES0_S2_+0x1c>
    return __create_fiber((uint32_t) entry_fn, (uint32_t)completion_fn, (uint32_t) param, 1);
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	4632      	mov	r2, r6
 8009cba:	4629      	mov	r1, r5
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f7fe f93f 	bl	8007f40 <_Z14__create_fibermmmi>
}
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	e7fc      	b.n	8009cc2 <_ZN5codal12create_fiberEPFvPvES0_S2_+0x1a>

08009cc8 <_ZN5codal20fiber_wait_for_eventEtt>:
{
 8009cc8:	b510      	push	{r4, lr}
    int ret = fiber_wake_on_event(id, value);
 8009cca:	f7fe f8f1 	bl	8007eb0 <_ZN5codal19fiber_wake_on_eventEtt>
    if(ret == DEVICE_OK)
 8009cce:	4604      	mov	r4, r0
 8009cd0:	b108      	cbz	r0, 8009cd6 <_ZN5codal20fiber_wait_for_eventEtt+0xe>
}
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	bd10      	pop	{r4, pc}
        schedule();
 8009cd6:	f7fe f991 	bl	8007ffc <_ZN5codal8scheduleEv>
    return ret;
 8009cda:	e7fa      	b.n	8009cd2 <_ZN5codal20fiber_wait_for_eventEtt+0xa>

08009cdc <_ZN5codal16launch_new_fiberEPFvvES1_>:
{
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	460c      	mov	r4, r1
    ep();
 8009ce0:	4780      	blx	r0
    cp();
 8009ce2:	47a0      	blx	r4
    release_fiber();
 8009ce4:	f7fe fa82 	bl	80081ec <_ZN5codal13release_fiberEv>
}
 8009ce8:	bd10      	pop	{r4, pc}

08009cea <_ZN5codal13release_fiberEPv>:
{
 8009cea:	b508      	push	{r3, lr}
    if (!fiber_scheduler_running())
 8009cec:	f7fe f846 	bl	8007d7c <_ZN5codal23fiber_scheduler_runningEv>
 8009cf0:	b900      	cbnz	r0, 8009cf4 <_ZN5codal13release_fiberEPv+0xa>
}
 8009cf2:	bd08      	pop	{r3, pc}
    release_fiber();
 8009cf4:	f7fe fa7a 	bl	80081ec <_ZN5codal13release_fiberEv>
 8009cf8:	e7fb      	b.n	8009cf2 <_ZN5codal13release_fiberEPv+0x8>

08009cfa <_ZN5codal22launch_new_fiber_paramEPFvPvES2_S0_>:
{
 8009cfa:	b538      	push	{r3, r4, r5, lr}
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	460d      	mov	r5, r1
 8009d00:	4614      	mov	r4, r2
    ep(pm);
 8009d02:	4610      	mov	r0, r2
 8009d04:	4798      	blx	r3
    cp(pm);
 8009d06:	4620      	mov	r0, r4
 8009d08:	47a8      	blx	r5
    release_fiber(pm);
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f7ff ffed 	bl	8009cea <_ZN5codal13release_fiberEPv>
}
 8009d10:	bd38      	pop	{r3, r4, r5, pc}

08009d12 <_ZN5codal9idle_taskEv>:
  * The idle task, which is called when the runtime has no fibers that require execution.
  *
  * This function typically calls idle().
  */
void codal::idle_task()
{
 8009d12:	b508      	push	{r3, lr}
    while(1)
    {
        idle();
 8009d14:	f7fe f950 	bl	8007fb8 <_ZN5codal4idleEv>
        schedule();
 8009d18:	f7fe f970 	bl	8007ffc <_ZN5codal8scheduleEv>
 8009d1c:	e7fa      	b.n	8009d14 <_ZN5codal9idle_taskEv+0x2>

08009d1e <_Z16device_malloc_injR14HeapDefinition>:
{
 8009d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 8009d20:	f010 0f03 	tst.w	r0, #3
 8009d24:	d109      	bne.n	8009d3a <_Z16device_malloc_injR14HeapDefinition+0x1c>
 8009d26:	0887      	lsrs	r7, r0, #2
    if (size <= 0)
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d046      	beq.n	8009dba <_Z16device_malloc_injR14HeapDefinition+0x9c>
 8009d2c:	460e      	mov	r6, r1
    blocksNeeded++;
 8009d2e:	1c7d      	adds	r5, r7, #1
    target_disable_irq();
 8009d30:	f7f7 fa86 	bl	8001240 <target_disable_irq>
    block = heap.heap_start;
 8009d34:	6834      	ldr	r4, [r6, #0]
    PROCESSOR_WORD_TYPE	blockSize = 0;
 8009d36:	2200      	movs	r2, #0
 8009d38:	e019      	b.n	8009d6e <_Z16device_malloc_injR14HeapDefinition+0x50>
    PROCESSOR_WORD_TYPE	blocksNeeded = size % DEVICE_HEAP_BLOCK_SIZE == 0 ? size / DEVICE_HEAP_BLOCK_SIZE : size / DEVICE_HEAP_BLOCK_SIZE + 1;
 8009d3a:	0887      	lsrs	r7, r0, #2
 8009d3c:	3701      	adds	r7, #1
 8009d3e:	e7f3      	b.n	8009d28 <_Z16device_malloc_injR14HeapDefinition+0xa>
        blockSize = *block & ~DEVICE_HEAP_BLOCK_FREE;
 8009d40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
        next = block + blockSize;
 8009d44:	eb04 0082 	add.w	r0, r4, r2, lsl #2
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 8009d48:	6803      	ldr	r3, [r0, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	da0b      	bge.n	8009d66 <_Z16device_malloc_injR14HeapDefinition+0x48>
            if (next >= heap.heap_end)
 8009d4e:	6871      	ldr	r1, [r6, #4]
 8009d50:	4281      	cmp	r1, r0
 8009d52:	d908      	bls.n	8009d66 <_Z16device_malloc_injR14HeapDefinition+0x48>
            blockSize += (*next & ~DEVICE_HEAP_BLOCK_FREE);
 8009d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d58:	441a      	add	r2, r3
            *block = blockSize | DEVICE_HEAP_BLOCK_FREE;
 8009d5a:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
 8009d5e:	6023      	str	r3, [r4, #0]
            next = block + blockSize;
 8009d60:	eb04 0082 	add.w	r0, r4, r2, lsl #2
        while (*next & DEVICE_HEAP_BLOCK_FREE)
 8009d64:	e7f0      	b.n	8009d48 <_Z16device_malloc_injR14HeapDefinition+0x2a>
        if (blockSize >= blocksNeeded)
 8009d66:	42aa      	cmp	r2, r5
 8009d68:	d20a      	bcs.n	8009d80 <_Z16device_malloc_injR14HeapDefinition+0x62>
        block += blockSize;
 8009d6a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    while (block < heap.heap_end)
 8009d6e:	6873      	ldr	r3, [r6, #4]
 8009d70:	42a3      	cmp	r3, r4
 8009d72:	d905      	bls.n	8009d80 <_Z16device_malloc_injR14HeapDefinition+0x62>
        if(!(*block & DEVICE_HEAP_BLOCK_FREE))
 8009d74:	6823      	ldr	r3, [r4, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	dbe2      	blt.n	8009d40 <_Z16device_malloc_injR14HeapDefinition+0x22>
            block += *block;
 8009d7a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
            continue;
 8009d7e:	e7f6      	b.n	8009d6e <_Z16device_malloc_injR14HeapDefinition+0x50>
    if (block >= heap.heap_end)
 8009d80:	6873      	ldr	r3, [r6, #4]
 8009d82:	42a3      	cmp	r3, r4
 8009d84:	d90e      	bls.n	8009da4 <_Z16device_malloc_injR14HeapDefinition+0x86>
    if (blockSize <= blocksNeeded+1 || block+blocksNeeded+1 >= heap.heap_end)
 8009d86:	3702      	adds	r7, #2
 8009d88:	4297      	cmp	r7, r2
 8009d8a:	d203      	bcs.n	8009d94 <_Z16device_malloc_injR14HeapDefinition+0x76>
 8009d8c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8009d90:	42bb      	cmp	r3, r7
 8009d92:	d80b      	bhi.n	8009dac <_Z16device_malloc_injR14HeapDefinition+0x8e>
        *block &= ~DEVICE_HEAP_BLOCK_FREE;
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d9a:	6023      	str	r3, [r4, #0]
    target_enable_irq();
 8009d9c:	f7f7 fa4e 	bl	800123c <target_enable_irq>
    return block+1;
 8009da0:	1d20      	adds	r0, r4, #4
}
 8009da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        target_enable_irq();
 8009da4:	f7f7 fa4a 	bl	800123c <target_enable_irq>
        return NULL;
 8009da8:	2000      	movs	r0, #0
 8009daa:	e7fa      	b.n	8009da2 <_Z16device_malloc_injR14HeapDefinition+0x84>
        *splitBlock = blockSize - blocksNeeded;
 8009dac:	1b53      	subs	r3, r2, r5
        *splitBlock |= DEVICE_HEAP_BLOCK_FREE;
 8009dae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009db2:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
        *block = blocksNeeded;
 8009db6:	6025      	str	r5, [r4, #0]
 8009db8:	e7f0      	b.n	8009d9c <_Z16device_malloc_injR14HeapDefinition+0x7e>
        return NULL;
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e7f1      	b.n	8009da2 <_Z16device_malloc_injR14HeapDefinition+0x84>

08009dbe <_ZN5codal8ListenerC1EttPFvNS_5EventEEt>:
  * @param handler A function pointer to call when the event is detected.
  *
  * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
  * to be tuned.
  */
Listener::Listener(uint16_t id, uint16_t value, void (*handler)(Event), uint16_t flags)
 8009dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dc0:	4604      	mov	r4, r0
 8009dc2:	460f      	mov	r7, r1
 8009dc4:	4616      	mov	r6, r2
 8009dc6:	461d      	mov	r5, r3
 8009dc8:	3010      	adds	r0, #16
 8009dca:	f000 fbf0 	bl	800a5ae <_ZN5codal5EventC1Ev>
{
	this->id = id;
 8009dce:	8027      	strh	r7, [r4, #0]
	this->value = value;
 8009dd0:	8066      	strh	r6, [r4, #2]
	this->cb = handler;
 8009dd2:	60a5      	str	r5, [r4, #8]
	this->cb_arg = NULL;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60e3      	str	r3, [r4, #12]
    this->flags = flags;
 8009dd8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8009ddc:	80a2      	strh	r2, [r4, #4]
	this->next = NULL;
 8009dde:	61e3      	str	r3, [r4, #28]
    this->evt_queue = NULL;
 8009de0:	61a3      	str	r3, [r4, #24]
}
 8009de2:	4620      	mov	r0, r4
 8009de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009de6 <_ZN5codal8ListenerD1Ev>:
}

/**
  * Destructor. Ensures all resources used by this listener are freed.
  */
Listener::~Listener()
 8009de6:	b510      	push	{r4, lr}
 8009de8:	4604      	mov	r4, r0
{
    if(this->flags & MESSAGE_BUS_LISTENER_METHOD)
 8009dea:	8883      	ldrh	r3, [r0, #4]
 8009dec:	f013 0f02 	tst.w	r3, #2
 8009df0:	d101      	bne.n	8009df6 <_ZN5codal8ListenerD1Ev+0x10>
        delete cb_method;
}
 8009df2:	4620      	mov	r0, r4
 8009df4:	bd10      	pop	{r4, pc}
        delete cb_method;
 8009df6:	6880      	ldr	r0, [r0, #8]
 8009df8:	f7f8 fa5c 	bl	80022b4 <_ZdlPv>
 8009dfc:	e7f9      	b.n	8009df2 <_ZN5codal8ListenerD1Ev+0xc>

08009dfe <_ZN5codal8Listener5queueENS_5EventE>:
  * Queues and event up to be processed.
  *
  * @param e The event to queue
  */
void Listener::queue(Event e)
{
 8009dfe:	b570      	push	{r4, r5, r6, lr}
 8009e00:	b086      	sub	sp, #24
 8009e02:	466b      	mov	r3, sp
 8009e04:	e883 0006 	stmia.w	r3, {r1, r2}
    int queueDepth;

    EventQueueItem *p = evt_queue;
 8009e08:	6984      	ldr	r4, [r0, #24]

    if (evt_queue == NULL)
 8009e0a:	b12c      	cbz	r4, 8009e18 <_ZN5codal8Listener5queueENS_5EventE+0x1a>
        evt_queue = new EventQueueItem(e);
    else
    {
        queueDepth = 1;
 8009e0c:	2201      	movs	r2, #1

        while (p->next != NULL)
 8009e0e:	68a3      	ldr	r3, [r4, #8]
 8009e10:	b193      	cbz	r3, 8009e38 <_ZN5codal8Listener5queueENS_5EventE+0x3a>
        {
            p = p->next;
            queueDepth++;
 8009e12:	3201      	adds	r2, #1
            p = p->next;
 8009e14:	461c      	mov	r4, r3
        while (p->next != NULL)
 8009e16:	e7fa      	b.n	8009e0e <_ZN5codal8Listener5queueENS_5EventE+0x10>
 8009e18:	4605      	mov	r5, r0
        evt_queue = new EventQueueItem(e);
 8009e1a:	ac02      	add	r4, sp, #8
 8009e1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e20:	e884 0003 	stmia.w	r4, {r0, r1}
 8009e24:	200c      	movs	r0, #12
 8009e26:	f7f8 fa41 	bl	80022ac <_Znwj>
 8009e2a:	4606      	mov	r6, r0
 8009e2c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8009e30:	f000 fbe4 	bl	800a5fc <_ZN5codal14EventQueueItemC1ENS_5EventE>
 8009e34:	61ae      	str	r6, [r5, #24]
 8009e36:	e001      	b.n	8009e3c <_ZN5codal8Listener5queueENS_5EventE+0x3e>
        }

        if (queueDepth < MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 8009e38:	2a09      	cmp	r2, #9
 8009e3a:	dd01      	ble.n	8009e40 <_ZN5codal8Listener5queueENS_5EventE+0x42>
            p->next = new EventQueueItem(e);
    }
}
 8009e3c:	b006      	add	sp, #24
 8009e3e:	bd70      	pop	{r4, r5, r6, pc}
            p->next = new EventQueueItem(e);
 8009e40:	ad04      	add	r5, sp, #16
 8009e42:	466b      	mov	r3, sp
 8009e44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e48:	e885 0003 	stmia.w	r5, {r0, r1}
 8009e4c:	200c      	movs	r0, #12
 8009e4e:	f7f8 fa2d 	bl	80022ac <_Znwj>
 8009e52:	4606      	mov	r6, r0
 8009e54:	e895 0006 	ldmia.w	r5, {r1, r2}
 8009e58:	f000 fbd0 	bl	800a5fc <_ZN5codal14EventQueueItemC1ENS_5EventE>
 8009e5c:	60a6      	str	r6, [r4, #8]
}
 8009e5e:	e7ed      	b.n	8009e3c <_ZN5codal8Listener5queueENS_5EventE+0x3e>

08009e60 <_ZN5codal6Serial6lockRxEv>:
    status |= CODAL_SERIAL_RX_IN_USE;
 8009e60:	88c3      	ldrh	r3, [r0, #6]
 8009e62:	f043 0301 	orr.w	r3, r3, #1
 8009e66:	80c3      	strh	r3, [r0, #6]
}
 8009e68:	4770      	bx	lr

08009e6a <_ZN5codal6Serial8unlockRxEv>:
    status &= ~CODAL_SERIAL_RX_IN_USE;
 8009e6a:	88c3      	ldrh	r3, [r0, #6]
 8009e6c:	f023 0301 	bic.w	r3, r3, #1
 8009e70:	80c3      	strh	r3, [r0, #6]
}
 8009e72:	4770      	bx	lr

08009e74 <_ZN5codal6Serial12initialiseRxEv>:
{
 8009e74:	b570      	push	{r4, r5, r6, lr}
 8009e76:	4604      	mov	r4, r0
    if((status & CODAL_SERIAL_RX_BUFF_INIT))
 8009e78:	88c3      	ldrh	r3, [r0, #6]
 8009e7a:	f013 0f04 	tst.w	r3, #4
 8009e7e:	d116      	bne.n	8009eae <_ZN5codal6Serial12initialiseRxEv+0x3a>
    status &= ~CODAL_SERIAL_RX_BUFF_INIT;
 8009e80:	88e5      	ldrh	r5, [r4, #6]
 8009e82:	f025 0504 	bic.w	r5, r5, #4
 8009e86:	b2ad      	uxth	r5, r5
 8009e88:	80e5      	strh	r5, [r4, #6]
    if((this->rxBuff = (uint8_t *)malloc(rxBuffSize)) == NULL)
 8009e8a:	7f20      	ldrb	r0, [r4, #28]
 8009e8c:	f7fe fa4c 	bl	8008328 <device_malloc>
 8009e90:	61a0      	str	r0, [r4, #24]
 8009e92:	b1a0      	cbz	r0, 8009ebe <_ZN5codal6Serial12initialiseRxEv+0x4a>
    this->rxBuffHead = 0;
 8009e94:	2600      	movs	r6, #0
 8009e96:	83e6      	strh	r6, [r4, #30]
    this->rxBuffTail = 0;
 8009e98:	8426      	strh	r6, [r4, #32]
    status |= CODAL_SERIAL_RX_BUFF_INIT;
 8009e9a:	f045 0504 	orr.w	r5, r5, #4
 8009e9e:	80e5      	strh	r5, [r4, #6]
    enableInterrupt(RxInterrupt);
 8009ea0:	6823      	ldr	r3, [r4, #0]
 8009ea2:	695b      	ldr	r3, [r3, #20]
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	4798      	blx	r3
    return DEVICE_OK;
 8009eaa:	4630      	mov	r0, r6
}
 8009eac:	bd70      	pop	{r4, r5, r6, pc}
        disableInterrupt(RxInterrupt);
 8009eae:	6803      	ldr	r3, [r0, #0]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	4798      	blx	r3
        free(this->rxBuff);
 8009eb6:	69a0      	ldr	r0, [r4, #24]
 8009eb8:	f7fe fa60 	bl	800837c <device_free>
 8009ebc:	e7e0      	b.n	8009e80 <_ZN5codal6Serial12initialiseRxEv+0xc>
        return DEVICE_NO_RESOURCES;
 8009ebe:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 8009ec2:	e7f3      	b.n	8009eac <_ZN5codal6Serial12initialiseRxEv+0x38>

08009ec4 <_ZN5codal6Serial12circularCopyEPhhS1_tt>:
{
 8009ec4:	b470      	push	{r4, r5, r6}
 8009ec6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 8009eca:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    int toBuffIndex = 0;
 8009ece:	2500      	movs	r5, #0
    while(tailPosition != headPosition)
 8009ed0:	42b0      	cmp	r0, r6
 8009ed2:	d009      	beq.n	8009ee8 <_ZN5codal6Serial12circularCopyEPhhS1_tt+0x24>
        linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 8009ed4:	5c0c      	ldrb	r4, [r1, r0]
 8009ed6:	555c      	strb	r4, [r3, r5]
        tailPosition = (tailPosition + 1) % circularBuffSize;
 8009ed8:	3001      	adds	r0, #1
 8009eda:	fb90 f4f2 	sdiv	r4, r0, r2
 8009ede:	fb02 0014 	mls	r0, r2, r4, r0
 8009ee2:	b280      	uxth	r0, r0
        linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 8009ee4:	3501      	adds	r5, #1
    while(tailPosition != headPosition)
 8009ee6:	e7f3      	b.n	8009ed0 <_ZN5codal6Serial12circularCopyEPhhS1_tt+0xc>
}
 8009ee8:	bc70      	pop	{r4, r5, r6}
 8009eea:	4770      	bx	lr

08009eec <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>:
    if(mode == SYNC_SPINWAIT)
 8009eec:	2a01      	cmp	r2, #1
 8009eee:	d00f      	beq.n	8009f10 <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x24>
{
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4614      	mov	r4, r2
 8009ef4:	4605      	mov	r5, r0
    this->delimeters = delimeters;
 8009ef6:	3010      	adds	r0, #16
 8009ef8:	f000 fbf3 	bl	800a6e2 <_ZN5codal13ManagedStringaSERKS0_>
    if(mode == SYNC_SLEEP)
 8009efc:	2c02      	cmp	r4, #2
 8009efe:	d001      	beq.n	8009f04 <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x18>
    return DEVICE_OK;
 8009f00:	2000      	movs	r0, #0
}
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
        fiber_wait_for_event(this->id, CODAL_SERIAL_EVT_DELIM_MATCH);
 8009f04:	2101      	movs	r1, #1
 8009f06:	88a8      	ldrh	r0, [r5, #4]
 8009f08:	f7ff fede 	bl	8009cc8 <_ZN5codal20fiber_wait_for_eventEtt>
    return DEVICE_OK;
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e7f8      	b.n	8009f02 <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x16>
        return DEVICE_INVALID_PARAMETER;
 8009f10:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 8009f14:	4770      	bx	lr

08009f16 <_ZN5codal6Serial7rxInUseEv>:
    return (status & CODAL_SERIAL_RX_IN_USE);
 8009f16:	88c0      	ldrh	r0, [r0, #6]
}
 8009f18:	f000 0001 	and.w	r0, r0, #1
 8009f1c:	4770      	bx	lr

08009f1e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE>:
{
 8009f1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f22:	b089      	sub	sp, #36	; 0x24
 8009f24:	af02      	add	r7, sp, #8
 8009f26:	60b8      	str	r0, [r7, #8]
 8009f28:	4688      	mov	r8, r1
 8009f2a:	4615      	mov	r5, r2
 8009f2c:	607b      	str	r3, [r7, #4]
    if(rxInUse())
 8009f2e:	4608      	mov	r0, r1
 8009f30:	f7ff fff1 	bl	8009f16 <_ZN5codal6Serial7rxInUseEv>
 8009f34:	60f8      	str	r0, [r7, #12]
 8009f36:	b990      	cbnz	r0, 8009f5e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x40>
    if(!(status & CODAL_SERIAL_RX_BUFF_INIT))
 8009f38:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8009f3c:	f013 0f04 	tst.w	r3, #4
 8009f40:	d104      	bne.n	8009f4c <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x2e>
        int result = initialiseRx();
 8009f42:	4640      	mov	r0, r8
 8009f44:	f7ff ff96 	bl	8009e74 <_ZN5codal6Serial12initialiseRxEv>
        if(result != DEVICE_OK)
 8009f48:	4601      	mov	r1, r0
 8009f4a:	b960      	cbnz	r0, 8009f66 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x48>
    lockRx();
 8009f4c:	4640      	mov	r0, r8
 8009f4e:	f7ff ff87 	bl	8009e60 <_ZN5codal6Serial6lockRxEv>
    int localTail = rxBuffTail;
 8009f52:	f8b8 a020 	ldrh.w	sl, [r8, #32]
 8009f56:	4656      	mov	r6, sl
    int foundIndex = -1;
 8009f58:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009f5c:	e063      	b.n	800a026 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x108>
        return ManagedString();
 8009f5e:	68b8      	ldr	r0, [r7, #8]
 8009f60:	f000 fbb9 	bl	800a6d6 <_ZN5codal13ManagedStringC1Ev>
 8009f64:	e045      	b.n	8009ff2 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>
            return result;
 8009f66:	68b8      	ldr	r0, [r7, #8]
 8009f68:	f000 fb83 	bl	800a672 <_ZN5codal13ManagedStringC1Ei>
 8009f6c:	e041      	b.n	8009ff2 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>
    if(mode == SYNC_SPINWAIT)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d07b      	beq.n	800a06c <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x14e>
    if(mode == SYNC_SLEEP && foundIndex == -1)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	f000 8086 	beq.w	800a088 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x16a>
    if(foundIndex >= 0)
 8009f7c:	f1b9 0f00 	cmp.w	r9, #0
 8009f80:	f2c0 80ac 	blt.w	800a0dc <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1be>
        return ManagedString((char *)localBuff, localBuffSize);
 8009f84:	466e      	mov	r6, sp
        int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 8009f86:	45d1      	cmp	r9, sl
 8009f88:	f280 80a5 	bge.w	800a0d6 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1b8>
 8009f8c:	f898 401c 	ldrb.w	r4, [r8, #28]
 8009f90:	eba4 040a 	sub.w	r4, r4, sl
 8009f94:	444c      	add	r4, r9
        uint8_t localBuff[localBuffSize + 1];
 8009f96:	f104 0308 	add.w	r3, r4, #8
 8009f9a:	f023 0307 	bic.w	r3, r3, #7
 8009f9e:	ebad 0d03 	sub.w	sp, sp, r3
 8009fa2:	ad02      	add	r5, sp, #8
 8009fa4:	1c62      	adds	r2, r4, #1
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	4628      	mov	r0, r5
 8009faa:	f7f7 fee5 	bl	8001d78 <memset>
        circularCopy(rxBuff, rxBuffSize, localBuff, preservedTail, foundIndex);
 8009fae:	f898 201c 	ldrb.w	r2, [r8, #28]
 8009fb2:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8009fb6:	fa1f f389 	uxth.w	r3, r9
 8009fba:	9301      	str	r3, [sp, #4]
 8009fbc:	f8cd a000 	str.w	sl, [sp]
 8009fc0:	462b      	mov	r3, r5
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	f7ff ff7e 	bl	8009ec4 <_ZN5codal6Serial12circularCopyEPhhS1_tt>
        rxBuffTail = (rxBuffTail + localBuffSize + 1) % rxBuffSize;
 8009fc8:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 8009fcc:	4423      	add	r3, r4
 8009fce:	3301      	adds	r3, #1
 8009fd0:	f898 101c 	ldrb.w	r1, [r8, #28]
 8009fd4:	fb93 f2f1 	sdiv	r2, r3, r1
 8009fd8:	fb01 3312 	mls	r3, r1, r2, r3
 8009fdc:	f8a8 3020 	strh.w	r3, [r8, #32]
        unlockRx();
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	f7ff ff42 	bl	8009e6a <_ZN5codal6Serial8unlockRxEv>
        return ManagedString((char *)localBuff, localBuffSize);
 8009fe6:	b222      	sxth	r2, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	68b8      	ldr	r0, [r7, #8]
 8009fec:	f000 fb53 	bl	800a696 <_ZN5codal13ManagedStringC1EPKcs>
 8009ff0:	46b5      	mov	sp, r6
}
 8009ff2:	68b8      	ldr	r0, [r7, #8]
 8009ff4:	371c      	adds	r7, #28
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 8009ffc:	3401      	adds	r4, #1
          * display.scroll(s.length()) // scrolls "4"
          * @endcode
          */
        int16_t length() const
        {
            return ptr->len;
 8009ffe:	682b      	ldr	r3, [r5, #0]
 800a000:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a004:	42a3      	cmp	r3, r4
 800a006:	dd07      	ble.n	800a018 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xfa>
            if(delimeters.charAt(delimeterIterator) == c)
 800a008:	b221      	sxth	r1, r4
 800a00a:	4628      	mov	r0, r5
 800a00c:	f000 fb78 	bl	800a700 <_ZN5codal13ManagedString6charAtEs>
 800a010:	4558      	cmp	r0, fp
 800a012:	d1f3      	bne.n	8009ffc <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
                foundIndex = localTail;
 800a014:	46b1      	mov	r9, r6
 800a016:	e7f1      	b.n	8009ffc <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
        localTail = (localTail + 1) % rxBuffSize;
 800a018:	3601      	adds	r6, #1
 800a01a:	f898 301c 	ldrb.w	r3, [r8, #28]
 800a01e:	fb96 f2f3 	sdiv	r2, r6, r3
 800a022:	fb03 6612 	mls	r6, r3, r2, r6
    while(localTail != rxBuffHead && foundIndex  == -1)
 800a026:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	42b3      	cmp	r3, r6
 800a02e:	d09e      	beq.n	8009f6e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x50>
 800a030:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800a034:	d19b      	bne.n	8009f6e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x50>
        char c = rxBuff[localTail];
 800a036:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800a03a:	f813 b006 	ldrb.w	fp, [r3, r6]
        for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800a03e:	68fc      	ldr	r4, [r7, #12]
 800a040:	e7dd      	b.n	8009ffe <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xe0>
            for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800a042:	3401      	adds	r4, #1
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a04a:	42a3      	cmp	r3, r4
 800a04c:	dd07      	ble.n	800a05e <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x140>
                if(delimeters.charAt(delimeterIterator) == c)
 800a04e:	b221      	sxth	r1, r4
 800a050:	4628      	mov	r0, r5
 800a052:	f000 fb55 	bl	800a700 <_ZN5codal13ManagedString6charAtEs>
 800a056:	4558      	cmp	r0, fp
 800a058:	d1f3      	bne.n	800a042 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x124>
                    foundIndex = localTail;
 800a05a:	46b1      	mov	r9, r6
 800a05c:	e7f1      	b.n	800a042 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x124>
            localTail = (localTail + 1) % rxBuffSize;
 800a05e:	3601      	adds	r6, #1
 800a060:	f898 301c 	ldrb.w	r3, [r8, #28]
 800a064:	fb96 f2f3 	sdiv	r2, r6, r3
 800a068:	fb03 6612 	mls	r6, r3, r2, r6
        while(foundIndex == -1)
 800a06c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800a070:	d180      	bne.n	8009f74 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x56>
            while(localTail == rxBuffHead);
 800a072:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 800a076:	b29b      	uxth	r3, r3
 800a078:	42b3      	cmp	r3, r6
 800a07a:	d0fa      	beq.n	800a072 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x154>
            char c = rxBuff[localTail];
 800a07c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800a080:	f813 b006 	ldrb.w	fp, [r3, r6]
            for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800a084:	68fc      	ldr	r4, [r7, #12]
 800a086:	e7dd      	b.n	800a044 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x126>
    if(mode == SYNC_SLEEP && foundIndex == -1)
 800a088:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800a08c:	f47f af76 	bne.w	8009f7c <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x5e>
        eventOn(delimeters, mode);
 800a090:	4629      	mov	r1, r5
 800a092:	f107 0010 	add.w	r0, r7, #16
 800a096:	f000 fb16 	bl	800a6c6 <_ZN5codal13ManagedStringC1ERKS0_>
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	f107 0110 	add.w	r1, r7, #16
 800a0a0:	4640      	mov	r0, r8
 800a0a2:	f7ff ff23 	bl	8009eec <_ZN5codal6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>
 800a0a6:	f107 0010 	add.w	r0, r7, #16
 800a0aa:	f000 fab8 	bl	800a61e <_ZN5codal13ManagedStringD1Ev>
        foundIndex = rxBuffHead - 1;
 800a0ae:	f8b8 901e 	ldrh.w	r9, [r8, #30]
 800a0b2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
        this->delimeters = ManagedString();
 800a0b6:	f108 0410 	add.w	r4, r8, #16
 800a0ba:	f107 0014 	add.w	r0, r7, #20
 800a0be:	f000 fb0a 	bl	800a6d6 <_ZN5codal13ManagedStringC1Ev>
 800a0c2:	f107 0114 	add.w	r1, r7, #20
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f000 fb0b 	bl	800a6e2 <_ZN5codal13ManagedStringaSERKS0_>
 800a0cc:	f107 0014 	add.w	r0, r7, #20
 800a0d0:	f000 faa5 	bl	800a61e <_ZN5codal13ManagedStringD1Ev>
 800a0d4:	e752      	b.n	8009f7c <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x5e>
        int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 800a0d6:	eba9 040a 	sub.w	r4, r9, sl
 800a0da:	e75c      	b.n	8009f96 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x78>
    unlockRx();
 800a0dc:	4640      	mov	r0, r8
 800a0de:	f7ff fec4 	bl	8009e6a <_ZN5codal6Serial8unlockRxEv>
    return ManagedString();
 800a0e2:	68b8      	ldr	r0, [r7, #8]
 800a0e4:	f000 faf7 	bl	800a6d6 <_ZN5codal13ManagedStringC1Ev>
 800a0e8:	e783      	b.n	8009ff2 <_ZN5codal6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>

0800a0ea <_ZN5codal5Timer17disableInterruptsEv>:
{
 800a0ea:	b508      	push	{r3, lr}
    target_disable_irq();
 800a0ec:	f7f7 f8a8 	bl	8001240 <target_disable_irq>
}
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	bd08      	pop	{r3, pc}

0800a0f4 <_ZN5codal5Timer16enableInterruptsEv>:
{
 800a0f4:	b508      	push	{r3, lr}
    target_enable_irq();
 800a0f6:	f7f7 f8a1 	bl	800123c <target_enable_irq>
}
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	bd08      	pop	{r3, pc}

0800a0fe <_ZN5codal5Timer13getTimerEventEv>:
{
 800a0fe:	b410      	push	{r4}
    for (int i=0; i<eventListSize; i++)
 800a100:	2300      	movs	r3, #0
 800a102:	6982      	ldr	r2, [r0, #24]
 800a104:	429a      	cmp	r2, r3
 800a106:	dd08      	ble.n	800a11a <_ZN5codal5Timer13getTimerEventEv+0x1c>
        if (timerEventList[i].id == 0)
 800a108:	6901      	ldr	r1, [r0, #16]
 800a10a:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800a10e:	00a2      	lsls	r2, r4, #2
 800a110:	188c      	adds	r4, r1, r2
 800a112:	5a8a      	ldrh	r2, [r1, r2]
 800a114:	b112      	cbz	r2, 800a11c <_ZN5codal5Timer13getTimerEventEv+0x1e>
    for (int i=0; i<eventListSize; i++)
 800a116:	3301      	adds	r3, #1
 800a118:	e7f3      	b.n	800a102 <_ZN5codal5Timer13getTimerEventEv+0x4>
    return NULL;
 800a11a:	2400      	movs	r4, #0
}
 800a11c:	4620      	mov	r0, r4
 800a11e:	bc10      	pop	{r4}
 800a120:	4770      	bx	lr

0800a122 <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE>:
    event->id = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	800b      	strh	r3, [r1, #0]
    if (nextTimerEvent == event)
 800a126:	6943      	ldr	r3, [r0, #20]
 800a128:	428b      	cmp	r3, r1
 800a12a:	d000      	beq.n	800a12e <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE+0xc>
}
 800a12c:	4770      	bx	lr
        nextTimerEvent = NULL;
 800a12e:	2300      	movs	r3, #0
 800a130:	6143      	str	r3, [r0, #20]
}
 800a132:	e7fb      	b.n	800a12c <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE+0xa>

0800a134 <_ZN5codal5Timer7getTimeEv>:
{
 800a134:	b510      	push	{r4, lr}
 800a136:	4604      	mov	r4, r0
    syncRequest();
 800a138:	6803      	ldr	r3, [r0, #0]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	4798      	blx	r3
}
 800a13e:	6860      	ldr	r0, [r4, #4]
 800a140:	bd10      	pop	{r4, pc}

0800a142 <_ZN5codal5Timer9getTimeUsEv>:
{
 800a142:	b510      	push	{r4, lr}
 800a144:	4604      	mov	r4, r0
    syncRequest();
 800a146:	6803      	ldr	r3, [r0, #0]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	4798      	blx	r3
}
 800a14c:	68a0      	ldr	r0, [r4, #8]
 800a14e:	bd10      	pop	{r4, pc}

0800a150 <_ZN5codal5Timer8setEventEmttb>:
{
 800a150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a154:	4604      	mov	r4, r0
 800a156:	460e      	mov	r6, r1
 800a158:	4690      	mov	r8, r2
 800a15a:	461f      	mov	r7, r3
 800a15c:	f89d 9020 	ldrb.w	r9, [sp, #32]
    TimerEvent *evt = getTimerEvent();
 800a160:	f7ff ffcd 	bl	800a0fe <_ZN5codal5Timer13getTimerEventEv>
    if (evt == NULL)
 800a164:	b330      	cbz	r0, 800a1b4 <_ZN5codal5Timer8setEventEmttb+0x64>
 800a166:	4605      	mov	r5, r0
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800a168:	4620      	mov	r0, r4
 800a16a:	f7ff ffea 	bl	800a142 <_ZN5codal5Timer9getTimeUsEv>
 800a16e:	4430      	add	r0, r6
 800a170:	f1b9 0f00 	cmp.w	r9, #0
 800a174:	d01c      	beq.n	800a1b0 <_ZN5codal5Timer8setEventEmttb+0x60>
 800a176:	4633      	mov	r3, r6
        CODAL_TIMESTAMP period;
        CODAL_TIMESTAMP timestamp;

        void set(CODAL_TIMESTAMP timestamp, CODAL_TIMESTAMP period, uint16_t id, uint16_t value)
        {
            this->timestamp = timestamp;
 800a178:	60a8      	str	r0, [r5, #8]
            this->period = period;
 800a17a:	606b      	str	r3, [r5, #4]
            this->id = id;
 800a17c:	f8a5 8000 	strh.w	r8, [r5]
            this->value = value;
 800a180:	806f      	strh	r7, [r5, #2]
    disableInterrupts();
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	68db      	ldr	r3, [r3, #12]
 800a186:	4620      	mov	r0, r4
 800a188:	4798      	blx	r3
    if (nextTimerEvent == NULL || evt->timestamp < nextTimerEvent->timestamp)
 800a18a:	6963      	ldr	r3, [r4, #20]
 800a18c:	b11b      	cbz	r3, 800a196 <_ZN5codal5Timer8setEventEmttb+0x46>
 800a18e:	68aa      	ldr	r2, [r5, #8]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	429a      	cmp	r2, r3
 800a194:	d205      	bcs.n	800a1a2 <_ZN5codal5Timer8setEventEmttb+0x52>
        nextTimerEvent = evt;
 800a196:	6165      	str	r5, [r4, #20]
        triggerIn(period);
 800a198:	6823      	ldr	r3, [r4, #0]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4631      	mov	r1, r6
 800a19e:	4620      	mov	r0, r4
 800a1a0:	4798      	blx	r3
    enableInterrupts();
 800a1a2:	6823      	ldr	r3, [r4, #0]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	4798      	blx	r3
    return DEVICE_OK;
 800a1aa:	2000      	movs	r0, #0
}
 800a1ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    evt->set(getTimeUs() + period, repeat ? period: 0, id, value);
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	e7e1      	b.n	800a178 <_ZN5codal5Timer8setEventEmttb+0x28>
        return DEVICE_NO_RESOURCES;
 800a1b4:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 800a1b8:	e7f8      	b.n	800a1ac <_ZN5codal5Timer8setEventEmttb+0x5c>

0800a1ba <_ZN5codal5Timer12eventEveryUsEmtt>:
{
 800a1ba:	b510      	push	{r4, lr}
 800a1bc:	b082      	sub	sp, #8
    return setEvent(period, id, value, true);
 800a1be:	2401      	movs	r4, #1
 800a1c0:	9400      	str	r4, [sp, #0]
 800a1c2:	f7ff ffc5 	bl	800a150 <_ZN5codal5Timer8setEventEmttb>
}
 800a1c6:	b002      	add	sp, #8
 800a1c8:	bd10      	pop	{r4, pc}

0800a1ca <_ZN5codal5Timer4syncEm>:
    currentTimeUs += t;
 800a1ca:	6882      	ldr	r2, [r0, #8]
 800a1cc:	440a      	add	r2, r1
 800a1ce:	6082      	str	r2, [r0, #8]
    overflow += t;
 800a1d0:	68c3      	ldr	r3, [r0, #12]
 800a1d2:	440b      	add	r3, r1
 800a1d4:	60c3      	str	r3, [r0, #12]
    while(overflow >= 1000)
 800a1d6:	68c3      	ldr	r3, [r0, #12]
 800a1d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1dc:	d306      	bcc.n	800a1ec <_ZN5codal5Timer4syncEm+0x22>
        overflow -= 1000;
 800a1de:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800a1e2:	60c3      	str	r3, [r0, #12]
        currentTime += 1;
 800a1e4:	6843      	ldr	r3, [r0, #4]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	6043      	str	r3, [r0, #4]
    while(overflow >= 1000)
 800a1ea:	e7f4      	b.n	800a1d6 <_ZN5codal5Timer4syncEm+0xc>
}
 800a1ec:	4770      	bx	lr

0800a1ee <_ZN5codal5Timer7triggerEv>:
{
 800a1ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1f0:	b085      	sub	sp, #20
 800a1f2:	4605      	mov	r5, r0
    syncRequest();
 800a1f4:	6803      	ldr	r3, [r0, #0]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	4798      	blx	r3
        TimerEvent *e = timerEventList;
 800a1fa:	692c      	ldr	r4, [r5, #16]
        for (int i=0; i<eventListSize; i++)
 800a1fc:	2600      	movs	r6, #0
        eventsFired = 0;
 800a1fe:	4637      	mov	r7, r6
 800a200:	e005      	b.n	800a20e <_ZN5codal5Timer7triggerEv+0x20>
                    e->timestamp += e->period;
 800a202:	68a3      	ldr	r3, [r4, #8]
 800a204:	4413      	add	r3, r2
 800a206:	60a3      	str	r3, [r4, #8]
                eventsFired++;
 800a208:	3701      	adds	r7, #1
            e++;
 800a20a:	340c      	adds	r4, #12
        for (int i=0; i<eventListSize; i++)
 800a20c:	3601      	adds	r6, #1
 800a20e:	69ab      	ldr	r3, [r5, #24]
 800a210:	42b3      	cmp	r3, r6
 800a212:	dd15      	ble.n	800a240 <_ZN5codal5Timer7triggerEv+0x52>
            if (e->id != 0 && currentTimeUs >= e->timestamp)
 800a214:	8821      	ldrh	r1, [r4, #0]
 800a216:	2900      	cmp	r1, #0
 800a218:	d0f7      	beq.n	800a20a <_ZN5codal5Timer7triggerEv+0x1c>
 800a21a:	68aa      	ldr	r2, [r5, #8]
 800a21c:	68a3      	ldr	r3, [r4, #8]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d3f3      	bcc.n	800a20a <_ZN5codal5Timer7triggerEv+0x1c>
                Event evt(e->id, e->value, currentTime);
 800a222:	8862      	ldrh	r2, [r4, #2]
 800a224:	2301      	movs	r3, #1
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	686b      	ldr	r3, [r5, #4]
 800a22a:	a802      	add	r0, sp, #8
 800a22c:	f000 f9d8 	bl	800a5e0 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>
                if (e->period == 0)
 800a230:	6862      	ldr	r2, [r4, #4]
 800a232:	2a00      	cmp	r2, #0
 800a234:	d1e5      	bne.n	800a202 <_ZN5codal5Timer7triggerEv+0x14>
                    releaseTimerEvent(e);
 800a236:	4621      	mov	r1, r4
 800a238:	4628      	mov	r0, r5
 800a23a:	f7ff ff72 	bl	800a122 <_ZN5codal5Timer17releaseTimerEventEPNS_10TimerEventE>
 800a23e:	e7e3      	b.n	800a208 <_ZN5codal5Timer7triggerEv+0x1a>
    } while (eventsFired);
 800a240:	2f00      	cmp	r7, #0
 800a242:	d1da      	bne.n	800a1fa <_ZN5codal5Timer7triggerEv+0xc>
    nextTimerEvent = NULL;
 800a244:	2200      	movs	r2, #0
 800a246:	616a      	str	r2, [r5, #20]
    TimerEvent *e = timerEventList;
 800a248:	692a      	ldr	r2, [r5, #16]
 800a24a:	e002      	b.n	800a252 <_ZN5codal5Timer7triggerEv+0x64>
            nextTimerEvent = e;
 800a24c:	616a      	str	r2, [r5, #20]
        e++;
 800a24e:	320c      	adds	r2, #12
    for (int i=0; i<eventListSize; i++)
 800a250:	3701      	adds	r7, #1
 800a252:	42bb      	cmp	r3, r7
 800a254:	dd0a      	ble.n	800a26c <_ZN5codal5Timer7triggerEv+0x7e>
        if (e->id != 0 && (nextTimerEvent == NULL || (e->timestamp < nextTimerEvent->timestamp)))
 800a256:	8811      	ldrh	r1, [r2, #0]
 800a258:	2900      	cmp	r1, #0
 800a25a:	d0f8      	beq.n	800a24e <_ZN5codal5Timer7triggerEv+0x60>
 800a25c:	6969      	ldr	r1, [r5, #20]
 800a25e:	2900      	cmp	r1, #0
 800a260:	d0f4      	beq.n	800a24c <_ZN5codal5Timer7triggerEv+0x5e>
 800a262:	6890      	ldr	r0, [r2, #8]
 800a264:	6889      	ldr	r1, [r1, #8]
 800a266:	4288      	cmp	r0, r1
 800a268:	d2f1      	bcs.n	800a24e <_ZN5codal5Timer7triggerEv+0x60>
 800a26a:	e7ef      	b.n	800a24c <_ZN5codal5Timer7triggerEv+0x5e>
    if (nextTimerEvent) {
 800a26c:	696b      	ldr	r3, [r5, #20]
 800a26e:	b143      	cbz	r3, 800a282 <_ZN5codal5Timer7triggerEv+0x94>
        if (currentTimeUs < nextTimerEvent->timestamp)
 800a270:	68aa      	ldr	r2, [r5, #8]
 800a272:	6899      	ldr	r1, [r3, #8]
 800a274:	428a      	cmp	r2, r1
 800a276:	d306      	bcc.n	800a286 <_ZN5codal5Timer7triggerEv+0x98>
            triggerIn(1);
 800a278:	682b      	ldr	r3, [r5, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2101      	movs	r1, #1
 800a27e:	4628      	mov	r0, r5
 800a280:	4798      	blx	r3
}
 800a282:	b005      	add	sp, #20
 800a284:	bdf0      	pop	{r4, r5, r6, r7, pc}
            triggerIn(nextTimerEvent->timestamp - currentTimeUs);
 800a286:	682b      	ldr	r3, [r5, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	1a89      	subs	r1, r1, r2
 800a28c:	4628      	mov	r0, r5
 800a28e:	4798      	blx	r3
 800a290:	e7f7      	b.n	800a282 <_ZN5codal5Timer7triggerEv+0x94>

0800a292 <_ZN5codal5TimerD1Ev>:
}
 800a292:	4770      	bx	lr

0800a294 <_ZN5codal10MessageBus9elementAtEi>:
    Listener *l = listeners;
 800a294:	6940      	ldr	r0, [r0, #20]
    while (n > 0)
 800a296:	2900      	cmp	r1, #0
 800a298:	dd03      	ble.n	800a2a2 <_ZN5codal10MessageBus9elementAtEi+0xe>
        if (l == NULL)
 800a29a:	b110      	cbz	r0, 800a2a2 <_ZN5codal10MessageBus9elementAtEi+0xe>
        n--;
 800a29c:	3901      	subs	r1, #1
        l = l->next;
 800a29e:	69c0      	ldr	r0, [r0, #28]
    while (n > 0)
 800a2a0:	e7f9      	b.n	800a296 <_ZN5codal10MessageBus9elementAtEi+0x2>
}
 800a2a2:	4770      	bx	lr

0800a2a4 <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE>:
      * @param method The method to invoke.
      *
      * @param method The Event to supply to the given member function.
      */
    template <typename T>
    void MemberFunctionCallback::methodCall(void *object, uint32_t *method, Event e)
 800a2a4:	b510      	push	{r4, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	4668      	mov	r0, sp
 800a2ac:	e880 000c 	stmia.w	r0, {r2, r3}
    {
        T* o = (T*)object;
        void (T::*m)(Event);
        memcpy(&m, method, sizeof(m));
 800a2b0:	ab02      	add	r3, sp, #8
 800a2b2:	6808      	ldr	r0, [r1, #0]
 800a2b4:	6849      	ldr	r1, [r1, #4]
 800a2b6:	c303      	stmia	r3!, {r0, r1}

        (o->*m)(e);
 800a2b8:	9b03      	ldr	r3, [sp, #12]
 800a2ba:	105a      	asrs	r2, r3, #1
 800a2bc:	18a0      	adds	r0, r4, r2
 800a2be:	f013 0f01 	tst.w	r3, #1
 800a2c2:	d008      	beq.n	800a2d6 <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE+0x32>
 800a2c4:	58a2      	ldr	r2, [r4, r2]
 800a2c6:	9b02      	ldr	r3, [sp, #8]
 800a2c8:	58d4      	ldr	r4, [r2, r3]
 800a2ca:	466b      	mov	r3, sp
 800a2cc:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a2d0:	47a0      	blx	r4
    }
 800a2d2:	b004      	add	sp, #16
 800a2d4:	bd10      	pop	{r4, pc}
        (o->*m)(e);
 800a2d6:	9c02      	ldr	r4, [sp, #8]
 800a2d8:	e7f7      	b.n	800a2ca <_ZN5codal22MemberFunctionCallback10methodCallINS_10MessageBusEEEvPvPmNS_5EventE+0x26>

0800a2da <_Z14async_callbackPv>:
{
 800a2da:	b538      	push	{r3, r4, r5, lr}
 800a2dc:	4604      	mov	r4, r0
    if (listener->flags & MESSAGE_BUS_LISTENER_BUSY)
 800a2de:	8883      	ldrh	r3, [r0, #4]
 800a2e0:	f013 0f04 	tst.w	r3, #4
 800a2e4:	d005      	beq.n	800a2f2 <_Z14async_callbackPv+0x18>
        if (listener->flags & MESSAGE_BUS_LISTENER_DROP_IF_BUSY)
 800a2e6:	f013 0f20 	tst.w	r3, #32
 800a2ea:	d140      	bne.n	800a36e <_Z14async_callbackPv+0x94>
        if (listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY)
 800a2ec:	f013 0f10 	tst.w	r3, #16
 800a2f0:	d103      	bne.n	800a2fa <_Z14async_callbackPv+0x20>
    listener->flags |= MESSAGE_BUS_LISTENER_BUSY;
 800a2f2:	f043 0304 	orr.w	r3, r3, #4
 800a2f6:	80a3      	strh	r3, [r4, #4]
 800a2f8:	e027      	b.n	800a34a <_Z14async_callbackPv+0x70>
            listener->queue(listener->evt);
 800a2fa:	f100 0310 	add.w	r3, r0, #16
 800a2fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a302:	f7ff fd7c 	bl	8009dfe <_ZN5codal8Listener5queueENS_5EventE>
            return;
 800a306:	e032      	b.n	800a36e <_Z14async_callbackPv+0x94>
            listener->cb_method->fire(listener->evt);
 800a308:	f104 0310 	add.w	r3, r4, #16
 800a30c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a310:	68a0      	ldr	r0, [r4, #8]
 800a312:	f000 fa59 	bl	800a7c8 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>
 800a316:	e005      	b.n	800a324 <_Z14async_callbackPv+0x4a>
            listener->cb(listener->evt);
 800a318:	68a2      	ldr	r2, [r4, #8]
 800a31a:	f104 0310 	add.w	r3, r4, #16
 800a31e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a322:	4790      	blx	r2
        if ((listener->flags & MESSAGE_BUS_LISTENER_QUEUE_IF_BUSY) && listener->evt_queue)
 800a324:	88a2      	ldrh	r2, [r4, #4]
 800a326:	f012 0f10 	tst.w	r2, #16
 800a32a:	d01d      	beq.n	800a368 <_Z14async_callbackPv+0x8e>
 800a32c:	69a3      	ldr	r3, [r4, #24]
 800a32e:	b1db      	cbz	r3, 800a368 <_Z14async_callbackPv+0x8e>
            listener->evt = item->evt;
 800a330:	f104 0210 	add.w	r2, r4, #16
 800a334:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a338:	e882 0003 	stmia.w	r2, {r0, r1}
            listener->evt_queue = listener->evt_queue->next;
 800a33c:	689a      	ldr	r2, [r3, #8]
 800a33e:	61a2      	str	r2, [r4, #24]
            delete item;
 800a340:	4618      	mov	r0, r3
 800a342:	f7f7 ffb7 	bl	80022b4 <_ZdlPv>
            schedule();
 800a346:	f7fd fe59 	bl	8007ffc <_ZN5codal8scheduleEv>
        if (listener->flags & MESSAGE_BUS_LISTENER_METHOD)
 800a34a:	88a3      	ldrh	r3, [r4, #4]
 800a34c:	f013 0f02 	tst.w	r3, #2
 800a350:	d1da      	bne.n	800a308 <_Z14async_callbackPv+0x2e>
        else if (listener->flags & MESSAGE_BUS_LISTENER_PARAMETERISED)
 800a352:	f013 0f01 	tst.w	r3, #1
 800a356:	d0df      	beq.n	800a318 <_Z14async_callbackPv+0x3e>
            listener->cb_param(listener->evt, listener->cb_arg);
 800a358:	68a5      	ldr	r5, [r4, #8]
 800a35a:	68e2      	ldr	r2, [r4, #12]
 800a35c:	f104 0310 	add.w	r3, r4, #16
 800a360:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a364:	47a8      	blx	r5
 800a366:	e7dd      	b.n	800a324 <_Z14async_callbackPv+0x4a>
    listener->flags &= ~MESSAGE_BUS_LISTENER_BUSY;
 800a368:	f022 0204 	bic.w	r2, r2, #4
 800a36c:	80a2      	strh	r2, [r4, #4]
}
 800a36e:	bd38      	pop	{r3, r4, r5, pc}

0800a370 <_ZN5codal10MessageBus6removeEPNS_8ListenerE>:
    if (listener == NULL)
 800a370:	2900      	cmp	r1, #0
 800a372:	d032      	beq.n	800a3da <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x6a>
{
 800a374:	b570      	push	{r4, r5, r6, lr}
 800a376:	460d      	mov	r5, r1
    l = listeners;
 800a378:	6944      	ldr	r4, [r0, #20]
    int removed = 0;
 800a37a:	2600      	movs	r6, #0
 800a37c:	e016      	b.n	800a3ac <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3c>
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 800a37e:	68a9      	ldr	r1, [r5, #8]
 800a380:	68a0      	ldr	r0, [r4, #8]
 800a382:	f000 fa2d 	bl	800a7e0 <_ZN5codal22MemberFunctionCallbackeqERKS0_>
 800a386:	b1d8      	cbz	r0, 800a3c0 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x50>
                if ((listener->id == DEVICE_ID_ANY || listener->id == l->id) && (listener->value == DEVICE_EVT_ANY || listener->value == l->value))
 800a388:	882b      	ldrh	r3, [r5, #0]
 800a38a:	b113      	cbz	r3, 800a392 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x22>
 800a38c:	8822      	ldrh	r2, [r4, #0]
 800a38e:	4293      	cmp	r3, r2
 800a390:	d10b      	bne.n	800a3aa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
 800a392:	886b      	ldrh	r3, [r5, #2]
 800a394:	b113      	cbz	r3, 800a39c <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x2c>
 800a396:	8862      	ldrh	r2, [r4, #2]
 800a398:	4293      	cmp	r3, r2
 800a39a:	d106      	bne.n	800a3aa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
                    l->flags |= MESSAGE_BUS_LISTENER_DELETING;
 800a39c:	88a3      	ldrh	r3, [r4, #4]
 800a39e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3a6:	80a3      	strh	r3, [r4, #4]
                    removed++;
 800a3a8:	3601      	adds	r6, #1
        l = l->next;
 800a3aa:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800a3ac:	b18c      	cbz	r4, 800a3d2 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x62>
        if ((listener->flags & MESSAGE_BUS_LISTENER_METHOD) == (l->flags & MESSAGE_BUS_LISTENER_METHOD))
 800a3ae:	88aa      	ldrh	r2, [r5, #4]
 800a3b0:	88a3      	ldrh	r3, [r4, #4]
 800a3b2:	4053      	eors	r3, r2
 800a3b4:	f013 0f02 	tst.w	r3, #2
 800a3b8:	d1f7      	bne.n	800a3aa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 800a3ba:	f012 0f02 	tst.w	r2, #2
 800a3be:	d1de      	bne.n	800a37e <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0xe>
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
 800a3c0:	88ab      	ldrh	r3, [r5, #4]
            if(((listener->flags & MESSAGE_BUS_LISTENER_METHOD) && (*l->cb_method == *listener->cb_method)) ||
 800a3c2:	f013 0f02 	tst.w	r3, #2
 800a3c6:	d1f0      	bne.n	800a3aa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
              ((!(listener->flags & MESSAGE_BUS_LISTENER_METHOD) && l->cb == listener->cb)))
 800a3c8:	68a2      	ldr	r2, [r4, #8]
 800a3ca:	68ab      	ldr	r3, [r5, #8]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d1ec      	bne.n	800a3aa <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x3a>
 800a3d0:	e7da      	b.n	800a388 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x18>
    if (removed > 0)
 800a3d2:	2e00      	cmp	r6, #0
 800a3d4:	dd04      	ble.n	800a3e0 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x70>
        return DEVICE_OK;
 800a3d6:	2000      	movs	r0, #0
}
 800a3d8:	bd70      	pop	{r4, r5, r6, pc}
        return DEVICE_INVALID_PARAMETER;
 800a3da:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800a3de:	4770      	bx	lr
        return DEVICE_INVALID_PARAMETER;
 800a3e0:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800a3e4:	e7f8      	b.n	800a3d8 <_ZN5codal10MessageBus6removeEPNS_8ListenerE+0x68>

0800a3e6 <_ZN5codal10MessageBus12dequeueEventEv>:
{
 800a3e6:	b538      	push	{r3, r4, r5, lr}
 800a3e8:	4604      	mov	r4, r0
    target_disable_irq();
 800a3ea:	f7f6 ff29 	bl	8001240 <target_disable_irq>
    if (evt_queue_head != NULL)
 800a3ee:	69a5      	ldr	r5, [r4, #24]
 800a3f0:	b12d      	cbz	r5, 800a3fe <_ZN5codal10MessageBus12dequeueEventEv+0x18>
        evt_queue_head = item->next;
 800a3f2:	68ab      	ldr	r3, [r5, #8]
 800a3f4:	61a3      	str	r3, [r4, #24]
        if (evt_queue_head == NULL)
 800a3f6:	b133      	cbz	r3, 800a406 <_ZN5codal10MessageBus12dequeueEventEv+0x20>
        queueLength--;
 800a3f8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	8463      	strh	r3, [r4, #34]	; 0x22
    target_enable_irq();
 800a3fe:	f7f6 ff1d 	bl	800123c <target_enable_irq>
}
 800a402:	4628      	mov	r0, r5
 800a404:	bd38      	pop	{r3, r4, r5, pc}
            evt_queue_tail = NULL;
 800a406:	61e3      	str	r3, [r4, #28]
 800a408:	e7f6      	b.n	800a3f8 <_ZN5codal10MessageBus12dequeueEventEv+0x12>

0800a40a <_ZN5codal10MessageBus21deleteMarkedListenersEv>:
{
 800a40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40e:	4607      	mov	r7, r0
    l = listeners;
 800a410:	6944      	ldr	r4, [r0, #20]
    int removed = 0;
 800a412:	2600      	movs	r6, #0
    p = NULL;
 800a414:	4635      	mov	r5, r6
 800a416:	e004      	b.n	800a422 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x18>
                listeners = l->next;
 800a418:	69e3      	ldr	r3, [r4, #28]
 800a41a:	617b      	str	r3, [r7, #20]
 800a41c:	e00d      	b.n	800a43a <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x30>
        p = l;
 800a41e:	4625      	mov	r5, r4
        l = l->next;
 800a420:	69e4      	ldr	r4, [r4, #28]
    while (l != NULL)
 800a422:	b1ac      	cbz	r4, 800a450 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x46>
        if ((l->flags & MESSAGE_BUS_LISTENER_DELETING) && !(l->flags & MESSAGE_BUS_LISTENER_BUSY))
 800a424:	88a3      	ldrh	r3, [r4, #4]
 800a426:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a42a:	d0f8      	beq.n	800a41e <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x14>
 800a42c:	f013 0f04 	tst.w	r3, #4
 800a430:	d1f5      	bne.n	800a41e <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x14>
            if (p == NULL)
 800a432:	2d00      	cmp	r5, #0
 800a434:	d0f0      	beq.n	800a418 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0xe>
                p->next = l->next;
 800a436:	69e3      	ldr	r3, [r4, #28]
 800a438:	61eb      	str	r3, [r5, #28]
            l = l->next;
 800a43a:	f8d4 801c 	ldr.w	r8, [r4, #28]
            delete t;
 800a43e:	4620      	mov	r0, r4
 800a440:	f7ff fcd1 	bl	8009de6 <_ZN5codal8ListenerD1Ev>
 800a444:	4620      	mov	r0, r4
 800a446:	f7f7 ff35 	bl	80022b4 <_ZdlPv>
            removed++;
 800a44a:	3601      	adds	r6, #1
            l = l->next;
 800a44c:	4644      	mov	r4, r8
            continue;
 800a44e:	e7e8      	b.n	800a422 <_ZN5codal10MessageBus21deleteMarkedListenersEv+0x18>
}
 800a450:	4630      	mov	r0, r6
 800a452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a456 <_ZN5codal10MessageBus10queueEventERNS_5EventE>:
{
 800a456:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a458:	b083      	sub	sp, #12
 800a45a:	4604      	mov	r4, r0
 800a45c:	460e      	mov	r6, r1
    EventQueueItem *prev = evt_queue_tail;
 800a45e:	69c5      	ldr	r5, [r0, #28]
    processingComplete = this->process(evt, true);
 800a460:	2201      	movs	r2, #1
 800a462:	f7fe f8af 	bl	80085c4 <_ZN5codal10MessageBus7processERNS_5EventEb>
    if (processingComplete)
 800a466:	b910      	cbnz	r0, 800a46e <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x18>
    if (queueLength >= MESSAGE_BUS_LISTENER_MAX_QUEUE_DEPTH)
 800a468:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800a46a:	2b09      	cmp	r3, #9
 800a46c:	d901      	bls.n	800a472 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x1c>
}
 800a46e:	b003      	add	sp, #12
 800a470:	bdf0      	pop	{r4, r5, r6, r7, pc}
    EventQueueItem *item = new EventQueueItem(evt);
 800a472:	466f      	mov	r7, sp
 800a474:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a478:	e887 0003 	stmia.w	r7, {r0, r1}
 800a47c:	200c      	movs	r0, #12
 800a47e:	f7f7 ff15 	bl	80022ac <_Znwj>
 800a482:	4606      	mov	r6, r0
 800a484:	e897 0006 	ldmia.w	r7, {r1, r2}
 800a488:	f000 f8b8 	bl	800a5fc <_ZN5codal14EventQueueItemC1ENS_5EventE>
    target_disable_irq();
 800a48c:	f7f6 fed8 	bl	8001240 <target_disable_irq>
    if (prev == NULL)
 800a490:	b155      	cbz	r5, 800a4a8 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x52>
        item->next = prev->next;
 800a492:	68ab      	ldr	r3, [r5, #8]
 800a494:	60b3      	str	r3, [r6, #8]
        prev->next = item;
 800a496:	60ae      	str	r6, [r5, #8]
    if (item->next == NULL)
 800a498:	68b3      	ldr	r3, [r6, #8]
 800a49a:	b14b      	cbz	r3, 800a4b0 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x5a>
    queueLength++;
 800a49c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800a49e:	3301      	adds	r3, #1
 800a4a0:	8463      	strh	r3, [r4, #34]	; 0x22
    target_enable_irq();
 800a4a2:	f7f6 fecb 	bl	800123c <target_enable_irq>
 800a4a6:	e7e2      	b.n	800a46e <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x18>
        item->next = evt_queue_head;
 800a4a8:	69a3      	ldr	r3, [r4, #24]
 800a4aa:	60b3      	str	r3, [r6, #8]
        evt_queue_head = item;
 800a4ac:	61a6      	str	r6, [r4, #24]
 800a4ae:	e7f3      	b.n	800a498 <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x42>
        evt_queue_tail = item;
 800a4b0:	61e6      	str	r6, [r4, #28]
 800a4b2:	e7f3      	b.n	800a49c <_ZN5codal10MessageBus10queueEventERNS_5EventE+0x46>

0800a4b4 <_ZN5codal10MessageBus4sendENS_5EventE>:
{
 800a4b4:	b500      	push	{lr}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	466b      	mov	r3, sp
 800a4ba:	e883 0006 	stmia.w	r3, {r1, r2}
    this->queueEvent(evt);
 800a4be:	4619      	mov	r1, r3
 800a4c0:	f7ff ffc9 	bl	800a456 <_ZN5codal10MessageBus10queueEventERNS_5EventE>
}
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	b003      	add	sp, #12
 800a4c8:	f85d fb04 	ldr.w	pc, [sp], #4

0800a4cc <_ZN5codal10MessageBus4idleENS_5EventE>:
{
 800a4cc:	b530      	push	{r4, r5, lr}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	4605      	mov	r5, r0
 800a4d2:	ab02      	add	r3, sp, #8
 800a4d4:	e903 0006 	stmdb	r3, {r1, r2}
    this->deleteMarkedListeners();
 800a4d8:	f7ff ff97 	bl	800a40a <_ZN5codal10MessageBus21deleteMarkedListenersEv>
    EventQueueItem *item = this->dequeueEvent();
 800a4dc:	4628      	mov	r0, r5
 800a4de:	f7ff ff82 	bl	800a3e6 <_ZN5codal10MessageBus12dequeueEventEv>
 800a4e2:	4604      	mov	r4, r0
    while (item)
 800a4e4:	b17c      	cbz	r4, 800a506 <_ZN5codal10MessageBus4idleENS_5EventE+0x3a>
        this->process(item->evt);
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	f7fe f86a 	bl	80085c4 <_ZN5codal10MessageBus7processERNS_5EventEb>
        delete item;
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f7f7 fedf 	bl	80022b4 <_ZdlPv>
        if(!scheduler_runqueue_empty())
 800a4f6:	f7fd fd57 	bl	8007fa8 <_ZN5codal24scheduler_runqueue_emptyEv>
 800a4fa:	b120      	cbz	r0, 800a506 <_ZN5codal10MessageBus4idleENS_5EventE+0x3a>
        item = this->dequeueEvent();
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	f7ff ff72 	bl	800a3e6 <_ZN5codal10MessageBus12dequeueEventEv>
 800a502:	4604      	mov	r4, r0
    while (item)
 800a504:	e7ee      	b.n	800a4e4 <_ZN5codal10MessageBus4idleENS_5EventE+0x18>
}
 800a506:	b003      	add	sp, #12
 800a508:	bd30      	pop	{r4, r5, pc}

0800a50a <_ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt>:
      *
      * @param flags User specified, implementation specific flags, that allow behaviour of this events listener
      * to be tuned.
      */
    template <typename T>
    Listener::Listener(uint16_t id, uint16_t value, T* object, void (T::*method)(Event), uint16_t flags)
 800a50a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50c:	4604      	mov	r4, r0
 800a50e:	460f      	mov	r7, r1
 800a510:	4615      	mov	r5, r2
 800a512:	461e      	mov	r6, r3
 800a514:	3010      	adds	r0, #16
 800a516:	f000 f84a 	bl	800a5ae <_ZN5codal5EventC1Ev>
    {
        this->id = id;
 800a51a:	8027      	strh	r7, [r4, #0]
        this->value = value;
 800a51c:	8065      	strh	r5, [r4, #2]
        this->cb_method = new MemberFunctionCallback(object, method);
 800a51e:	2018      	movs	r0, #24
 800a520:	f7f7 fec4 	bl	80022ac <_Znwj>
 800a524:	4605      	mov	r5, r0
 800a526:	ab06      	add	r3, sp, #24
 800a528:	cb0c      	ldmia	r3, {r2, r3}
 800a52a:	4631      	mov	r1, r6
 800a52c:	f7fe f896 	bl	800865c <_ZN5codal22MemberFunctionCallbackC1INS_10MessageBusEEEPT_MS3_FvNS_5EventEE>
 800a530:	60a5      	str	r5, [r4, #8]
        this->cb_arg = NULL;
 800a532:	2300      	movs	r3, #0
 800a534:	60e3      	str	r3, [r4, #12]
        this->flags = flags | MESSAGE_BUS_LISTENER_METHOD;
 800a536:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a53a:	f042 0202 	orr.w	r2, r2, #2
 800a53e:	80a2      	strh	r2, [r4, #4]
        this->evt_queue = NULL;
 800a540:	61a3      	str	r3, [r4, #24]
        this->next = NULL;
 800a542:	61e3      	str	r3, [r4, #28]
    }
 800a544:	4620      	mov	r0, r4
 800a546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a548 <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE>:
      * // the previously created listener is now ignored.
      * uBit.messageBus.ignore(DEVICE_ID_BUTTON_B, DEVICE_BUTTON_EVT_CLICK, s, &SomeClass::onButtonBClick);
      * @endcode
      */
    template <typename T>
    int EventModel::ignore(uint16_t id, uint16_t value, T* object, void (T::*handler)(Event))
 800a548:	b530      	push	{r4, r5, lr}
 800a54a:	b08d      	sub	sp, #52	; 0x34
    {
        if (handler == NULL)
 800a54c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800a54e:	b1b4      	cbz	r4, 800a57e <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE+0x36>
 800a550:	460d      	mov	r5, r1
 800a552:	4604      	mov	r4, r0
            return DEVICE_INVALID_PARAMETER;

        Listener listener(id, value, object, handler);
 800a554:	2110      	movs	r1, #16
 800a556:	9102      	str	r1, [sp, #8]
 800a558:	a910      	add	r1, sp, #64	; 0x40
 800a55a:	c903      	ldmia	r1, {r0, r1}
 800a55c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a560:	4629      	mov	r1, r5
 800a562:	a804      	add	r0, sp, #16
 800a564:	f7ff ffd1 	bl	800a50a <_ZN5codal8ListenerC1INS_10MessageBusEEEttPT_MS3_FvNS_5EventEEt>
        remove(&listener);
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	a904      	add	r1, sp, #16
 800a56e:	4620      	mov	r0, r4
 800a570:	4798      	blx	r3
        Listener listener(id, value, object, handler);
 800a572:	a804      	add	r0, sp, #16
 800a574:	f7ff fc37 	bl	8009de6 <_ZN5codal8ListenerD1Ev>

        return DEVICE_OK;
 800a578:	2000      	movs	r0, #0
    }
 800a57a:	b00d      	add	sp, #52	; 0x34
 800a57c:	bd30      	pop	{r4, r5, pc}
        if (handler == NULL)
 800a57e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a580:	f014 0f01 	tst.w	r4, #1
 800a584:	d1e4      	bne.n	800a550 <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE+0x8>
            return DEVICE_INVALID_PARAMETER;
 800a586:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800a58a:	e7f6      	b.n	800a57a <_ZN5codal10EventModel6ignoreINS_10MessageBusEEEittPT_MS3_FvNS_5EventEE+0x32>

0800a58c <_ZThn8_N5codal10MessageBusD1Ev>:
        virtual Listener *elementAt(int n);

        /**
          * Destructor for MessageBus, where we deregister this instance from the array of fiber components.
          */
        ~MessageBus();
 800a58c:	f1a0 0008 	sub.w	r0, r0, #8
 800a590:	f7fe b8fc 	b.w	800878c <_ZN5codal10MessageBusD1Ev>

0800a594 <_ZN5codal10MessageBusD0Ev>:
MessageBus::~MessageBus()
 800a594:	b510      	push	{r4, lr}
 800a596:	4604      	mov	r4, r0
}
 800a598:	f7fe f8f8 	bl	800878c <_ZN5codal10MessageBusD1Ev>
 800a59c:	4620      	mov	r0, r4
 800a59e:	f7f7 fe89 	bl	80022b4 <_ZdlPv>
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	bd10      	pop	{r4, pc}

0800a5a6 <_ZThn8_N5codal10MessageBusD0Ev>:
 800a5a6:	f1a0 0008 	sub.w	r0, r0, #8
 800a5aa:	f7ff bff3 	b.w	800a594 <_ZN5codal10MessageBusD0Ev>

0800a5ae <_ZN5codal5EventC1Ev>:
Event::Event()
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	4604      	mov	r4, r0
    this->source = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	8003      	strh	r3, [r0, #0]
    this->value = 0;
 800a5b6:	8043      	strh	r3, [r0, #2]
    this->timestamp = system_timer_current_time();
 800a5b8:	f7fd ff60 	bl	800847c <_ZN5codal25system_timer_current_timeEv>
 800a5bc:	6060      	str	r0, [r4, #4]
}
 800a5be:	4620      	mov	r0, r4
 800a5c0:	bd10      	pop	{r4, pc}

0800a5c2 <_ZN5codal5EventC1EttNS_15EventLaunchModeE>:
Event::Event(uint16_t source, uint16_t value, EventLaunchMode mode)
 800a5c2:	b538      	push	{r3, r4, r5, lr}
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	461d      	mov	r5, r3
    this->source = source;
 800a5c8:	8001      	strh	r1, [r0, #0]
    this->value = value;
 800a5ca:	8042      	strh	r2, [r0, #2]
    this->timestamp = system_timer_current_time();
 800a5cc:	f7fd ff56 	bl	800847c <_ZN5codal25system_timer_current_timeEv>
 800a5d0:	6060      	str	r0, [r4, #4]
    if(mode != CREATE_ONLY)
 800a5d2:	b90d      	cbnz	r5, 800a5d8 <_ZN5codal5EventC1EttNS_15EventLaunchModeE+0x16>
}
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	bd38      	pop	{r3, r4, r5, pc}
        this->fire();
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f7fe f8ff 	bl	80087dc <_ZN5codal5Event4fireEv>
 800a5de:	e7f9      	b.n	800a5d4 <_ZN5codal5EventC1EttNS_15EventLaunchModeE+0x12>

0800a5e0 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE>:
  Event::Event(uint16_t source, uint16_t value, CODAL_TIMESTAMP currentTimeUs, EventLaunchMode mode)
 800a5e0:	b510      	push	{r4, lr}
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	f89d 0008 	ldrb.w	r0, [sp, #8]
      this->source = source;
 800a5e8:	8021      	strh	r1, [r4, #0]
      this->value = value;
 800a5ea:	8062      	strh	r2, [r4, #2]
      this->timestamp = currentTimeUs;
 800a5ec:	6063      	str	r3, [r4, #4]
      if(mode != CREATE_ONLY)
 800a5ee:	b908      	cbnz	r0, 800a5f4 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE+0x14>
  }
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	bd10      	pop	{r4, pc}
          this->fire();
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f7fe f8f1 	bl	80087dc <_ZN5codal5Event4fireEv>
 800a5fa:	e7f9      	b.n	800a5f0 <_ZN5codal5EventC1EttmNS_15EventLaunchModeE+0x10>

0800a5fc <_ZN5codal14EventQueueItemC1ENS_5EventE>:
  * Constructor.
  * Create a new EventQueueItem.
  *
  * @param evt The event to be queued.
  */
EventQueueItem::EventQueueItem(Event evt)
 800a5fc:	b530      	push	{r4, r5, lr}
 800a5fe:	b083      	sub	sp, #12
 800a600:	4604      	mov	r4, r0
 800a602:	466d      	mov	r5, sp
 800a604:	e885 0006 	stmia.w	r5, {r1, r2}
 800a608:	f7ff ffd1 	bl	800a5ae <_ZN5codal5EventC1Ev>
{
    this->evt = evt;
 800a60c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a610:	e884 0003 	stmia.w	r4, {r0, r1}
    this->next = NULL;
 800a614:	2300      	movs	r3, #0
 800a616:	60a3      	str	r3, [r4, #8]
}
 800a618:	4620      	mov	r0, r4
 800a61a:	b003      	add	sp, #12
 800a61c:	bd30      	pop	{r4, r5, pc}

0800a61e <_ZN5codal13ManagedStringD1Ev>:
ManagedString::~ManagedString()
 800a61e:	b510      	push	{r4, lr}
 800a620:	4604      	mov	r4, r0
    ptr->decr();
 800a622:	6800      	ldr	r0, [r0, #0]
 800a624:	f000 f895 	bl	800a752 <_ZN5codal10RefCounted4decrEv>
}
 800a628:	4620      	mov	r0, r4
 800a62a:	bd10      	pop	{r4, pc}

0800a62c <_ZN5codal13ManagedString10initStringEPKci>:
{
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	4605      	mov	r5, r0
 800a630:	460e      	mov	r6, r1
 800a632:	4614      	mov	r4, r2
    ptr = (StringData *) malloc(sizeof(StringData) + len + 1);
 800a634:	1d50      	adds	r0, r2, #5
 800a636:	f7fd fe77 	bl	8008328 <device_malloc>
 800a63a:	6028      	str	r0, [r5, #0]
    REF_COUNTED_INIT(ptr);
 800a63c:	f000 f8a8 	bl	800a790 <_ZN5codal10RefCounted4initEv>
    ptr->len = len;
 800a640:	682b      	ldr	r3, [r5, #0]
 800a642:	805c      	strh	r4, [r3, #2]
    memcpy(ptr->data, str, len);
 800a644:	6828      	ldr	r0, [r5, #0]
 800a646:	4622      	mov	r2, r4
 800a648:	4631      	mov	r1, r6
 800a64a:	3004      	adds	r0, #4
 800a64c:	f7f7 fb6f 	bl	8001d2e <memcpy>
    ptr->data[len] = 0;
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	441c      	add	r4, r3
 800a654:	2300      	movs	r3, #0
 800a656:	7123      	strb	r3, [r4, #4]
}
 800a658:	bd70      	pop	{r4, r5, r6, pc}

0800a65a <_ZN5codal13ManagedStringC1EPNS_10StringDataE>:
ManagedString::ManagedString(StringData *p)
 800a65a:	b510      	push	{r4, lr}
 800a65c:	4604      	mov	r4, r0
    if(p == NULL)
 800a65e:	b129      	cbz	r1, 800a66c <_ZN5codal13ManagedStringC1EPNS_10StringDataE+0x12>
 800a660:	4608      	mov	r0, r1
    ptr = p;
 800a662:	6021      	str	r1, [r4, #0]
    ptr->incr();
 800a664:	f000 f861 	bl	800a72a <_ZN5codal10RefCounted4incrEv>
}
 800a668:	4620      	mov	r0, r4
 800a66a:	bd10      	pop	{r4, pc}
        initEmpty();
 800a66c:	f7fe f8c4 	bl	80087f8 <_ZN5codal13ManagedString9initEmptyEv>
        return;
 800a670:	e7fa      	b.n	800a668 <_ZN5codal13ManagedStringC1EPNS_10StringDataE+0xe>

0800a672 <_ZN5codal13ManagedStringC1Ei>:
ManagedString::ManagedString(const int value)
 800a672:	b510      	push	{r4, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	4604      	mov	r4, r0
 800a678:	4608      	mov	r0, r1
    itoa(value, str);
 800a67a:	a901      	add	r1, sp, #4
 800a67c:	f7fe f8de 	bl	800883c <_ZN5codal4itoaEiPc>
    initString(str, strlen(str));
 800a680:	a801      	add	r0, sp, #4
 800a682:	f7f7 fb61 	bl	8001d48 <strlen>
 800a686:	4602      	mov	r2, r0
 800a688:	a901      	add	r1, sp, #4
 800a68a:	4620      	mov	r0, r4
 800a68c:	f7ff ffce 	bl	800a62c <_ZN5codal13ManagedString10initStringEPKci>
}
 800a690:	4620      	mov	r0, r4
 800a692:	b004      	add	sp, #16
 800a694:	bd10      	pop	{r4, pc}

0800a696 <_ZN5codal13ManagedStringC1EPKcs>:
ManagedString::ManagedString(const char *str, const int16_t length)
 800a696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a698:	4604      	mov	r4, r0
    if (str == NULL || *str == 0 || (uint16_t)length > strlen(str)) // XXX length should be unsigned on the interface
 800a69a:	b149      	cbz	r1, 800a6b0 <_ZN5codal13ManagedStringC1EPKcs+0x1a>
 800a69c:	4617      	mov	r7, r2
 800a69e:	460d      	mov	r5, r1
 800a6a0:	780b      	ldrb	r3, [r1, #0]
 800a6a2:	b12b      	cbz	r3, 800a6b0 <_ZN5codal13ManagedStringC1EPKcs+0x1a>
 800a6a4:	b296      	uxth	r6, r2
 800a6a6:	4608      	mov	r0, r1
 800a6a8:	f7f7 fb4e 	bl	8001d48 <strlen>
 800a6ac:	4286      	cmp	r6, r0
 800a6ae:	d904      	bls.n	800a6ba <_ZN5codal13ManagedStringC1EPKcs+0x24>
        initEmpty();
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f7fe f8a1 	bl	80087f8 <_ZN5codal13ManagedString9initEmptyEv>
}
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    initString(str, length);
 800a6ba:	463a      	mov	r2, r7
 800a6bc:	4629      	mov	r1, r5
 800a6be:	4620      	mov	r0, r4
 800a6c0:	f7ff ffb4 	bl	800a62c <_ZN5codal13ManagedString10initStringEPKci>
 800a6c4:	e7f7      	b.n	800a6b6 <_ZN5codal13ManagedStringC1EPKcs+0x20>

0800a6c6 <_ZN5codal13ManagedStringC1ERKS0_>:
ManagedString::ManagedString(const ManagedString &s)
 800a6c6:	b510      	push	{r4, lr}
 800a6c8:	4604      	mov	r4, r0
    ptr = s.ptr;
 800a6ca:	6808      	ldr	r0, [r1, #0]
 800a6cc:	6020      	str	r0, [r4, #0]
    ptr->incr();
 800a6ce:	f000 f82c 	bl	800a72a <_ZN5codal10RefCounted4incrEv>
}
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	bd10      	pop	{r4, pc}

0800a6d6 <_ZN5codal13ManagedStringC1Ev>:
ManagedString::ManagedString()
 800a6d6:	b510      	push	{r4, lr}
 800a6d8:	4604      	mov	r4, r0
    initEmpty();
 800a6da:	f7fe f88d 	bl	80087f8 <_ZN5codal13ManagedString9initEmptyEv>
}
 800a6de:	4620      	mov	r0, r4
 800a6e0:	bd10      	pop	{r4, pc}

0800a6e2 <_ZN5codal13ManagedStringaSERKS0_>:
{
 800a6e2:	b538      	push	{r3, r4, r5, lr}
 800a6e4:	4604      	mov	r4, r0
    if (this->ptr == s.ptr)
 800a6e6:	6800      	ldr	r0, [r0, #0]
 800a6e8:	680b      	ldr	r3, [r1, #0]
 800a6ea:	4298      	cmp	r0, r3
 800a6ec:	d006      	beq.n	800a6fc <_ZN5codal13ManagedStringaSERKS0_+0x1a>
 800a6ee:	460d      	mov	r5, r1
    ptr->decr();
 800a6f0:	f000 f82f 	bl	800a752 <_ZN5codal10RefCounted4decrEv>
    ptr = s.ptr;
 800a6f4:	6828      	ldr	r0, [r5, #0]
 800a6f6:	6020      	str	r0, [r4, #0]
    ptr->incr();
 800a6f8:	f000 f817 	bl	800a72a <_ZN5codal10RefCounted4incrEv>
}
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}

0800a700 <_ZN5codal13ManagedString6charAtEs>:
    return (index >=0 && index < length()) ? ptr->data[index] : 0;
 800a700:	2900      	cmp	r1, #0
 800a702:	db07      	blt.n	800a714 <_ZN5codal13ManagedString6charAtEs+0x14>
 800a704:	6803      	ldr	r3, [r0, #0]
 800a706:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800a70a:	4291      	cmp	r1, r2
 800a70c:	da04      	bge.n	800a718 <_ZN5codal13ManagedString6charAtEs+0x18>
 800a70e:	440b      	add	r3, r1
 800a710:	7918      	ldrb	r0, [r3, #4]
 800a712:	4770      	bx	lr
 800a714:	2000      	movs	r0, #0
 800a716:	4770      	bx	lr
 800a718:	2000      	movs	r0, #0
}
 800a71a:	4770      	bx	lr

0800a71c <_GLOBAL__sub_I__ZN5codal13ManagedString9initEmptyEv>:
ManagedString ManagedString::EmptyString(EMPTY_DATA);
 800a71c:	b508      	push	{r3, lr}
 800a71e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a722:	2001      	movs	r0, #1
 800a724:	f7fe f86e 	bl	8008804 <_Z41__static_initialization_and_destruction_0ii>
 800a728:	bd08      	pop	{r3, pc}

0800a72a <_ZN5codal10RefCounted4incrEv>:
  *
  * @return true if the object resides in flash memory, false otherwise.
  */
static inline bool isReadOnlyInline(RefCounted *t)
{
    uint32_t refCount = t->refCount;
 800a72a:	8803      	ldrh	r3, [r0, #0]

    if (refCount == 0xffff)
 800a72c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a730:	4293      	cmp	r3, r2
 800a732:	d00d      	beq.n	800a750 <_ZN5codal10RefCounted4incrEv+0x26>

/**
  * Increment reference count.
  */
void RefCounted::incr()
{
 800a734:	b510      	push	{r4, lr}
 800a736:	4604      	mov	r4, r0
    if (refCount == 1 ||        // object should have been deleted
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d002      	beq.n	800a742 <_ZN5codal10RefCounted4incrEv+0x18>
 800a73c:	f013 0f01 	tst.w	r3, #1
 800a740:	d102      	bne.n	800a748 <_ZN5codal10RefCounted4incrEv+0x1e>
        target_panic(DEVICE_HEAP_ERROR);
 800a742:	201e      	movs	r0, #30
 800a744:	f7f6 fd20 	bl	8001188 <target_panic>
    if (!isReadOnlyInline(this))
        refCount += 2;
 800a748:	8823      	ldrh	r3, [r4, #0]
 800a74a:	3302      	adds	r3, #2
 800a74c:	8023      	strh	r3, [r4, #0]
}
 800a74e:	bd10      	pop	{r4, pc}
 800a750:	4770      	bx	lr

0800a752 <_ZN5codal10RefCounted4decrEv>:
    uint32_t refCount = t->refCount;
 800a752:	8803      	ldrh	r3, [r0, #0]
    if (refCount == 0xffff)
 800a754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a758:	4293      	cmp	r3, r2
 800a75a:	d014      	beq.n	800a786 <_ZN5codal10RefCounted4decrEv+0x34>

/**
  * Decrement reference count.
  */
void RefCounted::decr()
{
 800a75c:	b510      	push	{r4, lr}
 800a75e:	4604      	mov	r4, r0
    if (refCount == 1 ||        // object should have been deleted
 800a760:	2b01      	cmp	r3, #1
 800a762:	d002      	beq.n	800a76a <_ZN5codal10RefCounted4decrEv+0x18>
 800a764:	f013 0f01 	tst.w	r3, #1
 800a768:	d102      	bne.n	800a770 <_ZN5codal10RefCounted4decrEv+0x1e>
        target_panic(DEVICE_HEAP_ERROR);
 800a76a:	201e      	movs	r0, #30
 800a76c:	f7f6 fd0c 	bl	8001188 <target_panic>
    if (isReadOnlyInline(this))
        return;

    refCount -= 2;
 800a770:	8823      	ldrh	r3, [r4, #0]
 800a772:	3b02      	subs	r3, #2
 800a774:	b29b      	uxth	r3, r3
 800a776:	8023      	strh	r3, [r4, #0]
    if (refCount == 1) {
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d000      	beq.n	800a77e <_ZN5codal10RefCounted4decrEv+0x2c>
        // if we just call plain free(), the write to refCount will
        // be optimized away, and it will stay '3'; this way we make
        // sure to get a panic on next incr()/decr()
        destroy();
    }
}
 800a77c:	bd10      	pop	{r4, pc}
        destroy();
 800a77e:	4620      	mov	r0, r4
 800a780:	f000 f802 	bl	800a788 <_ZN5codal10RefCounted7destroyEv>
 800a784:	e7fa      	b.n	800a77c <_ZN5codal10RefCounted4decrEv+0x2a>
 800a786:	4770      	bx	lr

0800a788 <_ZN5codal10RefCounted7destroyEv>:

/**
  * Releases the current instance.
  */
void RefCounted::destroy()
{
 800a788:	b508      	push	{r3, lr}
    free(this);
 800a78a:	f7fd fdf7 	bl	800837c <device_free>
}
 800a78e:	bd08      	pop	{r3, pc}

0800a790 <_ZN5codal10RefCounted4initEv>:
  * Initializes for one outstanding reference.
  */
void RefCounted::init()
{
    // Initialize to one reference (lowest bit set to 1)
    refCount = 3;
 800a790:	2303      	movs	r3, #3
 800a792:	8003      	strh	r3, [r0, #0]
}
 800a794:	4770      	bx	lr

0800a796 <_ZN5codal14string_reverseEPc>:
    if(s == NULL)
 800a796:	b190      	cbz	r0, 800a7be <_ZN5codal14string_reverseEPc+0x28>
{
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4604      	mov	r4, r0
    j = s + strlen(s) - 1;
 800a79c:	f7f7 fad4 	bl	8001d48 <strlen>
 800a7a0:	3801      	subs	r0, #1
 800a7a2:	4420      	add	r0, r4
    while(s < j)
 800a7a4:	4284      	cmp	r4, r0
 800a7a6:	d20d      	bcs.n	800a7c4 <_ZN5codal14string_reverseEPc+0x2e>
        c = *s;
 800a7a8:	4623      	mov	r3, r4
 800a7aa:	f813 1b01 	ldrb.w	r1, [r3], #1
        *s++ = *j;
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	f812 5901 	ldrb.w	r5, [r2], #-1
 800a7b4:	7025      	strb	r5, [r4, #0]
        *j-- = c;
 800a7b6:	7001      	strb	r1, [r0, #0]
 800a7b8:	4610      	mov	r0, r2
        *s++ = *j;
 800a7ba:	461c      	mov	r4, r3
    while(s < j)
 800a7bc:	e7f2      	b.n	800a7a4 <_ZN5codal14string_reverseEPc+0xe>
        return DEVICE_INVALID_PARAMETER;
 800a7be:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 800a7c2:	4770      	bx	lr
    return DEVICE_OK;
 800a7c4:	2000      	movs	r0, #0
}
 800a7c6:	bd38      	pop	{r3, r4, r5, pc}

0800a7c8 <_ZN5codal22MemberFunctionCallback4fireENS_5EventE>:
  * Calls the method reference held by this MemberFunctionCallback.
  *
  * @param e The event to deliver to the method
  */
void MemberFunctionCallback::fire(Event e)
{
 800a7c8:	b510      	push	{r4, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	466b      	mov	r3, sp
 800a7ce:	e883 0006 	stmia.w	r3, {r1, r2}
    invoke(object, method, e);
 800a7d2:	6944      	ldr	r4, [r0, #20]
 800a7d4:	cb0c      	ldmia	r3, {r2, r3}
 800a7d6:	1d01      	adds	r1, r0, #4
 800a7d8:	6800      	ldr	r0, [r0, #0]
 800a7da:	47a0      	blx	r4
}
 800a7dc:	b002      	add	sp, #8
 800a7de:	bd10      	pop	{r4, pc}

0800a7e0 <_ZN5codal22MemberFunctionCallbackeqERKS0_>:
  * A comparison of two MemberFunctionCallback objects.
  *
  * @return true if the given MemberFunctionCallback is equivalent to this one, false otherwise.
  */
bool MemberFunctionCallback::operator==(const MemberFunctionCallback &mfc)
{
 800a7e0:	b508      	push	{r3, lr}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 800a7e2:	6802      	ldr	r2, [r0, #0]
 800a7e4:	680b      	ldr	r3, [r1, #0]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d001      	beq.n	800a7ee <_ZN5codal22MemberFunctionCallbackeqERKS0_+0xe>
 800a7ea:	2000      	movs	r0, #0
}
 800a7ec:	bd08      	pop	{r3, pc}
    return (object == mfc.object && (memcmp(method,mfc.method,sizeof(method))==0));
 800a7ee:	2210      	movs	r2, #16
 800a7f0:	3104      	adds	r1, #4
 800a7f2:	3004      	adds	r0, #4
 800a7f4:	f7f7 fab0 	bl	8001d58 <memcmp>
 800a7f8:	b108      	cbz	r0, 800a7fe <_ZN5codal22MemberFunctionCallbackeqERKS0_+0x1e>
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	e7f6      	b.n	800a7ec <_ZN5codal22MemberFunctionCallbackeqERKS0_+0xc>
 800a7fe:	2001      	movs	r0, #1
 800a800:	e7f4      	b.n	800a7ec <_ZN5codal22MemberFunctionCallbackeqERKS0_+0xc>

0800a802 <_ZN5codal3Pin15setServoPulseUsEm>:
          *         if the given pin does not have analog capability.
          */
        virtual int setServoPulseUs(uint32_t pulseWidth)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 800a802:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a806:	4770      	bx	lr

0800a808 <_ZN5codal3Pin17setAnalogPeriodUsEm>:
          *         given pin is not configured as an analog output.
          */
        virtual int setAnalogPeriodUs(uint32_t period)
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 800a808:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a80c:	4770      	bx	lr

0800a80e <_ZN5codal3Pin8drainPinEv>:
          *         than a digital input, otherwise DEVICE_OK.
          */
        virtual int drainPin()
        {
            return DEVICE_NOT_IMPLEMENTED;
        }
 800a80e:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800a812:	4770      	bx	lr

0800a814 <_ZN5codal3_cm3Pin15getDigitalValueEv>:
}
 800a814:	2001      	movs	r0, #1
 800a816:	4770      	bx	lr

0800a818 <_ZN5codal3_cm3Pin15getDigitalValueENS_8PullModeE>:
{
 800a818:	b510      	push	{r4, lr}
 800a81a:	4604      	mov	r4, r0
    setPull(pull);
 800a81c:	6803      	ldr	r3, [r0, #0]
 800a81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a820:	4798      	blx	r3
    return getDigitalValue();
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	4620      	mov	r0, r4
 800a828:	4798      	blx	r3
}
 800a82a:	bd10      	pop	{r4, pc}

0800a82c <_ZN5codal3_cm3Pin14getAnalogValueEv>:
}
 800a82c:	20e1      	movs	r0, #225	; 0xe1
 800a82e:	4770      	bx	lr

0800a830 <_ZN5codal3_cm3Pin7isInputEv>:
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_ANALOG_IN)) == 0 ? 0 : 1;
 800a830:	8983      	ldrh	r3, [r0, #12]
 800a832:	f013 0f05 	tst.w	r3, #5
}
 800a836:	bf14      	ite	ne
 800a838:	2001      	movne	r0, #1
 800a83a:	2000      	moveq	r0, #0
 800a83c:	4770      	bx	lr

0800a83e <_ZN5codal3_cm3Pin8isOutputEv>:
    return (status & (IO_STATUS_DIGITAL_OUT | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 800a83e:	8983      	ldrh	r3, [r0, #12]
 800a840:	f013 0f0a 	tst.w	r3, #10
}
 800a844:	bf14      	ite	ne
 800a846:	2001      	movne	r0, #1
 800a848:	2000      	moveq	r0, #0
 800a84a:	4770      	bx	lr

0800a84c <_ZN5codal3_cm3Pin9isDigitalEv>:
    return (status & (IO_STATUS_DIGITAL_IN | IO_STATUS_DIGITAL_OUT)) == 0 ? 0 : 1;
 800a84c:	8980      	ldrh	r0, [r0, #12]
}
 800a84e:	f010 0003 	ands.w	r0, r0, #3
 800a852:	bf18      	it	ne
 800a854:	2001      	movne	r0, #1
 800a856:	4770      	bx	lr

0800a858 <_ZN5codal3_cm3Pin8isAnalogEv>:
    return (status & (IO_STATUS_ANALOG_IN | IO_STATUS_ANALOG_OUT)) == 0 ? 0 : 1;
 800a858:	8983      	ldrh	r3, [r0, #12]
 800a85a:	f013 0f0c 	tst.w	r3, #12
}
 800a85e:	bf14      	ite	ne
 800a860:	2001      	movne	r0, #1
 800a862:	2000      	moveq	r0, #0
 800a864:	4770      	bx	lr

0800a866 <_ZN5codal3_cm3Pin7setPullENS_8PullModeE>:
  * @return DEVICE_NOT_SUPPORTED if the current pin configuration is anything other
  *         than a digital input, otherwise DEVICE_OK.
  */
int Pin::setPull(PullMode pull)
{
    pullMode = pull;
 800a866:	6081      	str	r1, [r0, #8]
        return DEVICE_OK;
    }

    return DEVICE_NOT_SUPPORTED;
#endif  //  TODO
}
 800a868:	2000      	movs	r0, #0
 800a86a:	4770      	bx	lr

0800a86c <_ZN5codal3_cm3Pin5setupEhh>:
) {
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	4604      	mov	r4, r0
 800a870:	460d      	mov	r5, r1
 800a872:	4616      	mov	r6, r2
	rcc_periph_clock_enable((enum rcc_periph_clken) this->rcc);
 800a874:	8a80      	ldrh	r0, [r0, #20]
 800a876:	f7f7 f854 	bl	8001922 <rcc_periph_clock_enable>
	gpio_set_mode(this->port, mode, cnf, this->pin);
 800a87a:	8ba3      	ldrh	r3, [r4, #28]
 800a87c:	4632      	mov	r2, r6
 800a87e:	4629      	mov	r1, r5
 800a880:	69a0      	ldr	r0, [r4, #24]
 800a882:	f7f7 f80f 	bl	80018a4 <gpio_set_mode>
}
 800a886:	bd70      	pop	{r4, r5, r6, pc}

0800a888 <_ZN5codal3_cm3Pin10disconnectEv>:
    this->status = 0;
 800a888:	2300      	movs	r3, #0
 800a88a:	8183      	strh	r3, [r0, #12]
}
 800a88c:	4770      	bx	lr

0800a88e <_ZN5codal3_cm3Pin15setServoPulseUsEi>:
}
 800a88e:	2000      	movs	r0, #0
 800a890:	4770      	bx	lr

0800a892 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>:
{
 800a892:	b508      	push	{r3, lr}
    if (!(status & IO_STATUS_ANALOG_OUT))
 800a894:	8983      	ldrh	r3, [r0, #12]
 800a896:	f013 0f08 	tst.w	r3, #8
 800a89a:	d001      	beq.n	800a8a0 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi+0xe>
    return 0;
 800a89c:	2000      	movs	r0, #0
}
 800a89e:	bd08      	pop	{r3, pc}
        ret = setAnalogValue(0);
 800a8a0:	6803      	ldr	r3, [r0, #0]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	2100      	movs	r1, #0
 800a8a6:	4798      	blx	r3
 800a8a8:	e7f9      	b.n	800a89e <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi+0xc>

0800a8aa <_ZN5codal3_cm3Pin15setAnalogPeriodEi>:
{
 800a8aa:	b508      	push	{r3, lr}
    return setAnalogPeriodUs(period*1000);
 800a8ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a8b0:	fb03 f101 	mul.w	r1, r3, r1
 800a8b4:	f7ff ffed 	bl	800a892 <_ZN5codal3_cm3Pin17setAnalogPeriodUsEi>
}
 800a8b8:	bd08      	pop	{r3, pc}

0800a8ba <_ZN5codal3_cm3Pin13disableEventsEv>:
  * the current instance attached to this Pin instance.
  *
  * @return DEVICE_OK on success.
  */
int Pin::disableEvents()
{
 800a8ba:	b508      	push	{r3, lr}
    if (status & (IO_STATUS_EVENT_ON_EDGE | IO_STATUS_EVENT_PULSE_ON_EDGE | IO_STATUS_TOUCH_IN))
 800a8bc:	8983      	ldrh	r3, [r0, #12]
 800a8be:	f013 0f70 	tst.w	r3, #112	; 0x70
 800a8c2:	d101      	bne.n	800a8c8 <_ZN5codal3_cm3Pin13disableEventsEv+0xe>
        disconnect();

    return DEVICE_OK;
}
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	bd08      	pop	{r3, pc}
        disconnect();
 800a8c8:	f7ff ffde 	bl	800a888 <_ZN5codal3_cm3Pin10disconnectEv>
 800a8cc:	e7fa      	b.n	800a8c4 <_ZN5codal3_cm3Pin13disableEventsEv+0xa>

0800a8ce <_ZN5codal3_cm3Pin7eventOnEi>:
  *
  * @note In the DEVICE_PIN_EVENT_ON_PULSE mode, the smallest pulse that was reliably detected was 85us, around 5khz. If more precision is required,
  *       please use the InterruptIn class supplied by ARM mbed.
  */
int Pin::eventOn(int eventType)
{
 800a8ce:	b510      	push	{r4, lr}
    switch(eventType)
 800a8d0:	2903      	cmp	r1, #3
 800a8d2:	d803      	bhi.n	800a8dc <_ZN5codal3_cm3Pin7eventOnEi+0xe>
 800a8d4:	e8df f001 	tbb	[pc, r1]
 800a8d8:	050f0f0a 	.word	0x050f0f0a
        case DEVICE_PIN_EVENT_NONE:
            disableEvents();
            break;

        default:
            return DEVICE_INVALID_PARAMETER;
 800a8dc:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800a8e0:	e00a      	b.n	800a8f8 <_ZN5codal3_cm3Pin7eventOnEi+0x2a>
            isTouched();
 800a8e2:	6803      	ldr	r3, [r0, #0]
 800a8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e6:	4798      	blx	r3
    }

    return DEVICE_OK;
 800a8e8:	2000      	movs	r0, #0
            break;
 800a8ea:	e005      	b.n	800a8f8 <_ZN5codal3_cm3Pin7eventOnEi+0x2a>
 800a8ec:	460c      	mov	r4, r1
            disableEvents();
 800a8ee:	f7ff ffe4 	bl	800a8ba <_ZN5codal3_cm3Pin13disableEventsEv>
    return DEVICE_OK;
 800a8f2:	4620      	mov	r0, r4
            break;
 800a8f4:	e000      	b.n	800a8f8 <_ZN5codal3_cm3Pin7eventOnEi+0x2a>
    return DEVICE_OK;
 800a8f6:	2000      	movs	r0, #0
}
 800a8f8:	bd10      	pop	{r4, pc}

0800a8fa <_ZN5codal3_cm6Serial15enableInterruptENS_19SerialInterruptTypeE>:
        {
            ////TODO
            int enableInterrupt(SerialInterruptType t) { return 0; }
 800a8fa:	2000      	movs	r0, #0
 800a8fc:	4770      	bx	lr

0800a8fe <_ZN5codal3_cm6Serial16disableInterruptENS_19SerialInterruptTypeE>:
            int disableInterrupt(SerialInterruptType t) { return 0; }
 800a8fe:	2000      	movs	r0, #0
 800a900:	4770      	bx	lr

0800a902 <_ZN5codal3_cm6Serial11setBaudrateEm>:
            int setBaudrate(uint32_t baudrate) { return 0; }
 800a902:	2000      	movs	r0, #0
 800a904:	4770      	bx	lr

0800a906 <_ZN5codal3_cm6Serial13configurePinsERNS_3PinES3_>:
            int configurePins(codal::Pin& tx, codal::Pin& rx) { return 0; }
 800a906:	2000      	movs	r0, #0
 800a908:	4770      	bx	lr

0800a90a <_ZN5codal3_cm6Serial4putcEc>:
            int putc(char c) { return 1; }
 800a90a:	2001      	movs	r0, #1
 800a90c:	4770      	bx	lr

0800a90e <_ZN5codal3_cm6Serial4getcEv>:
            int getc() { return -1; }
 800a90e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a912:	4770      	bx	lr

0800a914 <_ZN5codal3_cm6Serial6lockRxEv>:
        /**
          * Locks the mutex so that others can't use this serial instance for reception
          */
        void Serial::lockRx()
        {
            status |= CODAL_SERIAL_RX_IN_USE;
 800a914:	88c3      	ldrh	r3, [r0, #6]
 800a916:	f043 0301 	orr.w	r3, r3, #1
 800a91a:	80c3      	strh	r3, [r0, #6]
        }
 800a91c:	4770      	bx	lr

0800a91e <_ZN5codal3_cm6Serial8unlockRxEv>:
        /**
          * Unlocks the mutex so that others can use this serial instance for reception
          */
        void Serial::unlockRx()
        {
            status &= ~CODAL_SERIAL_RX_IN_USE;
 800a91e:	88c3      	ldrh	r3, [r0, #6]
 800a920:	f023 0301 	bic.w	r3, r3, #1
 800a924:	80c3      	strh	r3, [r0, #6]
        }
 800a926:	4770      	bx	lr

0800a928 <_ZN5codal3_cm6Serial12initialiseRxEv>:
        /**
          * We do not want to always have our buffers initialised, especially if users to not
          * use them. We only bring them up on demand.
          */
        int Serial::initialiseRx()
        {
 800a928:	b538      	push	{r3, r4, r5, lr}
 800a92a:	4604      	mov	r4, r0
            if((status & CODAL_SERIAL_RX_BUFF_INIT))
 800a92c:	88c3      	ldrh	r3, [r0, #6]
 800a92e:	f013 0f04 	tst.w	r3, #4
 800a932:	d110      	bne.n	800a956 <_ZN5codal3_cm6Serial12initialiseRxEv+0x2e>
                //ensure that we receive no interrupts after freeing our buffer
                detach(RxInterrupt);
                free(this->rxBuff);
            }

            status &= ~CODAL_SERIAL_RX_BUFF_INIT;
 800a934:	88e5      	ldrh	r5, [r4, #6]
 800a936:	f025 0504 	bic.w	r5, r5, #4
 800a93a:	b2ad      	uxth	r5, r5
 800a93c:	80e5      	strh	r5, [r4, #6]

            if((this->rxBuff = (uint8_t *)malloc(rxBuffSize)) == NULL)
 800a93e:	7f20      	ldrb	r0, [r4, #28]
 800a940:	f7fd fcf2 	bl	8008328 <device_malloc>
 800a944:	61a0      	str	r0, [r4, #24]
 800a946:	b150      	cbz	r0, 800a95e <_ZN5codal3_cm6Serial12initialiseRxEv+0x36>
                return DEVICE_NO_RESOURCES;

            this->rxBuffHead = 0;
 800a948:	2000      	movs	r0, #0
 800a94a:	83e0      	strh	r0, [r4, #30]
            this->rxBuffTail = 0;
 800a94c:	8420      	strh	r0, [r4, #32]

            //set the receive interrupt
            status |= CODAL_SERIAL_RX_BUFF_INIT;
 800a94e:	f045 0504 	orr.w	r5, r5, #4
 800a952:	80e5      	strh	r5, [r4, #6]
            attach(RxInterrupt, &Serial::dataReceived);

            return DEVICE_OK;
        }
 800a954:	bd38      	pop	{r3, r4, r5, pc}
                free(this->rxBuff);
 800a956:	6980      	ldr	r0, [r0, #24]
 800a958:	f7fd fd10 	bl	800837c <device_free>
 800a95c:	e7ea      	b.n	800a934 <_ZN5codal3_cm6Serial12initialiseRxEv+0xc>
                return DEVICE_NO_RESOURCES;
 800a95e:	f46f 707b 	mvn.w	r0, #1004	; 0x3ec
 800a962:	e7f7      	b.n	800a954 <_ZN5codal3_cm6Serial12initialiseRxEv+0x2c>

0800a964 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt>:
          *
          * @note this method assumes that the linear buffer has the appropriate amount of
          *       memory to contain the copy operation
          */
        void Serial::circularCopy(uint8_t *circularBuff, uint8_t circularBuffSize, uint8_t *linearBuff, uint16_t tailPosition, uint16_t headPosition)
        {
 800a964:	b470      	push	{r4, r5, r6}
 800a966:	f8bd 000c 	ldrh.w	r0, [sp, #12]
 800a96a:	f8bd 6010 	ldrh.w	r6, [sp, #16]
            int toBuffIndex = 0;
 800a96e:	2500      	movs	r5, #0

            while(tailPosition != headPosition)
 800a970:	42b0      	cmp	r0, r6
 800a972:	d009      	beq.n	800a988 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt+0x24>
            {
                linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 800a974:	5c0c      	ldrb	r4, [r1, r0]
 800a976:	555c      	strb	r4, [r3, r5]

                tailPosition = (tailPosition + 1) % circularBuffSize;
 800a978:	3001      	adds	r0, #1
 800a97a:	fb90 f4f2 	sdiv	r4, r0, r2
 800a97e:	fb02 0014 	mls	r0, r2, r4, r0
 800a982:	b280      	uxth	r0, r0
                linearBuff[toBuffIndex++] = circularBuff[tailPosition];
 800a984:	3501      	adds	r5, #1
            while(tailPosition != headPosition)
 800a986:	e7f3      	b.n	800a970 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt+0xc>
            }
        }
 800a988:	bc70      	pop	{r4, r5, r6}
 800a98a:	4770      	bx	lr

0800a98c <_ZN5codal3_cm6Serial4baudEi>:
          *
          * @note the underlying implementation chooses the first allowable rate at or above that requested.
          */
        int Serial::baud(int baudrate)
        {
            if(baudrate < 0)
 800a98c:	2900      	cmp	r1, #0
 800a98e:	db02      	blt.n	800a996 <_ZN5codal3_cm6Serial4baudEi+0xa>
                return DEVICE_INVALID_PARAMETER;

            this->baudrate = baudrate;
 800a990:	6301      	str	r1, [r0, #48]	; 0x30
#ifdef TODO
            RawSerial::baud(baudrate);
#endif  //  TODO

            return DEVICE_OK;
 800a992:	2000      	movs	r0, #0
 800a994:	4770      	bx	lr
                return DEVICE_INVALID_PARAMETER;
 800a996:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
        }
 800a99a:	4770      	bx	lr

0800a99c <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>:
          *
          * @note delimeters are matched on a per byte basis.
          */
        int Serial::eventOn(ManagedString delimeters, SerialMode mode)
        {
            if(mode == SYNC_SPINWAIT)
 800a99c:	2a01      	cmp	r2, #1
 800a99e:	d00e      	beq.n	800a9be <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x22>
        {
 800a9a0:	b510      	push	{r4, lr}
 800a9a2:	4614      	mov	r4, r2
                return DEVICE_INVALID_PARAMETER;

            //configure our head match...
            this->delimeters = delimeters;
 800a9a4:	3010      	adds	r0, #16
 800a9a6:	f7ff fe9c 	bl	800a6e2 <_ZN5codal13ManagedStringaSERKS0_>

            //block!
            if(mode == SYNC_SLEEP)
 800a9aa:	2c02      	cmp	r4, #2
 800a9ac:	d001      	beq.n	800a9b2 <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x16>
                fiber_wait_for_event(DEVICE_ID_SERIAL, CODAL_SERIAL_EVT_DELIM_MATCH);

            return DEVICE_OK;
 800a9ae:	2000      	movs	r0, #0
        }
 800a9b0:	bd10      	pop	{r4, pc}
                fiber_wait_for_event(DEVICE_ID_SERIAL, CODAL_SERIAL_EVT_DELIM_MATCH);
 800a9b2:	2101      	movs	r1, #1
 800a9b4:	200c      	movs	r0, #12
 800a9b6:	f7ff f987 	bl	8009cc8 <_ZN5codal20fiber_wait_for_eventEtt>
            return DEVICE_OK;
 800a9ba:	2000      	movs	r0, #0
 800a9bc:	e7f8      	b.n	800a9b0 <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE+0x14>
                return DEVICE_INVALID_PARAMETER;
 800a9be:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
        }
 800a9c2:	4770      	bx	lr

0800a9c4 <_ZN5codal3_cm6Serial7rxInUseEv>:
          *
          * @note Only one fiber can call read at a time
          */
        int Serial::rxInUse()
        {
            return (status & CODAL_SERIAL_RX_IN_USE);
 800a9c4:	88c0      	ldrh	r0, [r0, #6]
        }
 800a9c6:	f000 0001 	and.w	r0, r0, #1
 800a9ca:	4770      	bx	lr

0800a9cc <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE>:
        {
 800a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d0:	b089      	sub	sp, #36	; 0x24
 800a9d2:	af02      	add	r7, sp, #8
 800a9d4:	60b8      	str	r0, [r7, #8]
 800a9d6:	4688      	mov	r8, r1
 800a9d8:	4615      	mov	r5, r2
 800a9da:	607b      	str	r3, [r7, #4]
            if(rxInUse())
 800a9dc:	4608      	mov	r0, r1
 800a9de:	f7ff fff1 	bl	800a9c4 <_ZN5codal3_cm6Serial7rxInUseEv>
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	b990      	cbnz	r0, 800aa0c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x40>
            if(!(status & CODAL_SERIAL_RX_BUFF_INIT))
 800a9e6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800a9ea:	f013 0f04 	tst.w	r3, #4
 800a9ee:	d104      	bne.n	800a9fa <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x2e>
                int result = initialiseRx();
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	f7ff ff99 	bl	800a928 <_ZN5codal3_cm6Serial12initialiseRxEv>
                if(result != DEVICE_OK)
 800a9f6:	4601      	mov	r1, r0
 800a9f8:	b960      	cbnz	r0, 800aa14 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x48>
            lockRx();
 800a9fa:	4640      	mov	r0, r8
 800a9fc:	f7ff ff8a 	bl	800a914 <_ZN5codal3_cm6Serial6lockRxEv>
            int localTail = rxBuffTail;
 800aa00:	f8b8 a020 	ldrh.w	sl, [r8, #32]
 800aa04:	4656      	mov	r6, sl
            int foundIndex = -1;
 800aa06:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800aa0a:	e063      	b.n	800aad4 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x108>
                return ManagedString();
 800aa0c:	68b8      	ldr	r0, [r7, #8]
 800aa0e:	f7ff fe62 	bl	800a6d6 <_ZN5codal13ManagedStringC1Ev>
 800aa12:	e045      	b.n	800aaa0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>
                    return result;
 800aa14:	68b8      	ldr	r0, [r7, #8]
 800aa16:	f7ff fe2c 	bl	800a672 <_ZN5codal13ManagedStringC1Ei>
 800aa1a:	e041      	b.n	800aaa0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>
            if(mode == SYNC_SPINWAIT)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2b01      	cmp	r3, #1
 800aa20:	d07b      	beq.n	800ab1a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x14e>
            if(mode == SYNC_SLEEP && foundIndex == -1)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	f000 8086 	beq.w	800ab36 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x16a>
            if(foundIndex >= 0)
 800aa2a:	f1b9 0f00 	cmp.w	r9, #0
 800aa2e:	f2c0 80ac 	blt.w	800ab8a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1be>
                return ManagedString((char *)localBuff, localBuffSize);
 800aa32:	466e      	mov	r6, sp
                int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 800aa34:	45d1      	cmp	r9, sl
 800aa36:	f280 80a5 	bge.w	800ab84 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x1b8>
 800aa3a:	f898 401c 	ldrb.w	r4, [r8, #28]
 800aa3e:	eba4 040a 	sub.w	r4, r4, sl
 800aa42:	444c      	add	r4, r9
                uint8_t localBuff[localBuffSize + 1];
 800aa44:	f104 0308 	add.w	r3, r4, #8
 800aa48:	f023 0307 	bic.w	r3, r3, #7
 800aa4c:	ebad 0d03 	sub.w	sp, sp, r3
 800aa50:	ad02      	add	r5, sp, #8
 800aa52:	1c62      	adds	r2, r4, #1
 800aa54:	2100      	movs	r1, #0
 800aa56:	4628      	mov	r0, r5
 800aa58:	f7f7 f98e 	bl	8001d78 <memset>
                circularCopy(rxBuff, rxBuffSize, localBuff, preservedTail, foundIndex);
 800aa5c:	f898 201c 	ldrb.w	r2, [r8, #28]
 800aa60:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800aa64:	fa1f f389 	uxth.w	r3, r9
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	f8cd a000 	str.w	sl, [sp]
 800aa6e:	462b      	mov	r3, r5
 800aa70:	4640      	mov	r0, r8
 800aa72:	f7ff ff77 	bl	800a964 <_ZN5codal3_cm6Serial12circularCopyEPhhS2_tt>
                rxBuffTail = (rxBuffTail + localBuffSize + 1) % rxBuffSize;
 800aa76:	f8b8 3020 	ldrh.w	r3, [r8, #32]
 800aa7a:	4423      	add	r3, r4
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	f898 101c 	ldrb.w	r1, [r8, #28]
 800aa82:	fb93 f2f1 	sdiv	r2, r3, r1
 800aa86:	fb01 3312 	mls	r3, r1, r2, r3
 800aa8a:	f8a8 3020 	strh.w	r3, [r8, #32]
                unlockRx();
 800aa8e:	4640      	mov	r0, r8
 800aa90:	f7ff ff45 	bl	800a91e <_ZN5codal3_cm6Serial8unlockRxEv>
                return ManagedString((char *)localBuff, localBuffSize);
 800aa94:	b222      	sxth	r2, r4
 800aa96:	4629      	mov	r1, r5
 800aa98:	68b8      	ldr	r0, [r7, #8]
 800aa9a:	f7ff fdfc 	bl	800a696 <_ZN5codal13ManagedStringC1EPKcs>
 800aa9e:	46b5      	mov	sp, r6
        }
 800aaa0:	68b8      	ldr	r0, [r7, #8]
 800aaa2:	371c      	adds	r7, #28
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800aaaa:	3401      	adds	r4, #1
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aab2:	42a3      	cmp	r3, r4
 800aab4:	dd07      	ble.n	800aac6 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xfa>
                    if(delimeters.charAt(delimeterIterator) == c)
 800aab6:	b221      	sxth	r1, r4
 800aab8:	4628      	mov	r0, r5
 800aaba:	f7ff fe21 	bl	800a700 <_ZN5codal13ManagedString6charAtEs>
 800aabe:	4558      	cmp	r0, fp
 800aac0:	d1f3      	bne.n	800aaaa <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
                        foundIndex = localTail;
 800aac2:	46b1      	mov	r9, r6
 800aac4:	e7f1      	b.n	800aaaa <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xde>
                localTail = (localTail + 1) % rxBuffSize;
 800aac6:	3601      	adds	r6, #1
 800aac8:	f898 301c 	ldrb.w	r3, [r8, #28]
 800aacc:	fb96 f2f3 	sdiv	r2, r6, r3
 800aad0:	fb03 6612 	mls	r6, r3, r2, r6
            while(localTail != rxBuffHead && foundIndex  == -1)
 800aad4:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 800aad8:	b29b      	uxth	r3, r3
 800aada:	42b3      	cmp	r3, r6
 800aadc:	d09e      	beq.n	800aa1c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x50>
 800aade:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800aae2:	d19b      	bne.n	800aa1c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x50>
                char c = rxBuff[localTail];
 800aae4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800aae8:	f813 b006 	ldrb.w	fp, [r3, r6]
                for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800aaec:	68fc      	ldr	r4, [r7, #12]
 800aaee:	e7dd      	b.n	800aaac <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xe0>
                    for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800aaf0:	3401      	adds	r4, #1
 800aaf2:	682b      	ldr	r3, [r5, #0]
 800aaf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aaf8:	42a3      	cmp	r3, r4
 800aafa:	dd07      	ble.n	800ab0c <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x140>
                        if(delimeters.charAt(delimeterIterator) == c)
 800aafc:	b221      	sxth	r1, r4
 800aafe:	4628      	mov	r0, r5
 800ab00:	f7ff fdfe 	bl	800a700 <_ZN5codal13ManagedString6charAtEs>
 800ab04:	4558      	cmp	r0, fp
 800ab06:	d1f3      	bne.n	800aaf0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x124>
                            foundIndex = localTail;
 800ab08:	46b1      	mov	r9, r6
 800ab0a:	e7f1      	b.n	800aaf0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x124>
                    localTail = (localTail + 1) % rxBuffSize;
 800ab0c:	3601      	adds	r6, #1
 800ab0e:	f898 301c 	ldrb.w	r3, [r8, #28]
 800ab12:	fb96 f2f3 	sdiv	r2, r6, r3
 800ab16:	fb03 6612 	mls	r6, r3, r2, r6
                while(foundIndex == -1)
 800ab1a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800ab1e:	d180      	bne.n	800aa22 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x56>
                    while(localTail == rxBuffHead);
 800ab20:	f8b8 301e 	ldrh.w	r3, [r8, #30]
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	42b3      	cmp	r3, r6
 800ab28:	d0fa      	beq.n	800ab20 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x154>
                    char c = rxBuff[localTail];
 800ab2a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ab2e:	f813 b006 	ldrb.w	fp, [r3, r6]
                    for(int delimeterIterator = 0; delimeterIterator < delimeters.length(); delimeterIterator++)
 800ab32:	68fc      	ldr	r4, [r7, #12]
 800ab34:	e7dd      	b.n	800aaf2 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x126>
            if(mode == SYNC_SLEEP && foundIndex == -1)
 800ab36:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800ab3a:	f47f af76 	bne.w	800aa2a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x5e>
                eventOn(delimeters, mode);
 800ab3e:	4629      	mov	r1, r5
 800ab40:	f107 0010 	add.w	r0, r7, #16
 800ab44:	f7ff fdbf 	bl	800a6c6 <_ZN5codal13ManagedStringC1ERKS0_>
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	f107 0110 	add.w	r1, r7, #16
 800ab4e:	4640      	mov	r0, r8
 800ab50:	f7ff ff24 	bl	800a99c <_ZN5codal3_cm6Serial7eventOnENS_13ManagedStringENS_10SerialModeE>
 800ab54:	f107 0010 	add.w	r0, r7, #16
 800ab58:	f7ff fd61 	bl	800a61e <_ZN5codal13ManagedStringD1Ev>
                foundIndex = rxBuffHead - 1;
 800ab5c:	f8b8 901e 	ldrh.w	r9, [r8, #30]
 800ab60:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
                this->delimeters = ManagedString();
 800ab64:	f108 0410 	add.w	r4, r8, #16
 800ab68:	f107 0014 	add.w	r0, r7, #20
 800ab6c:	f7ff fdb3 	bl	800a6d6 <_ZN5codal13ManagedStringC1Ev>
 800ab70:	f107 0114 	add.w	r1, r7, #20
 800ab74:	4620      	mov	r0, r4
 800ab76:	f7ff fdb4 	bl	800a6e2 <_ZN5codal13ManagedStringaSERKS0_>
 800ab7a:	f107 0014 	add.w	r0, r7, #20
 800ab7e:	f7ff fd4e 	bl	800a61e <_ZN5codal13ManagedStringD1Ev>
 800ab82:	e752      	b.n	800aa2a <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x5e>
                int localBuffSize = (preservedTail > foundIndex) ? (rxBuffSize - preservedTail) + foundIndex : foundIndex - preservedTail;
 800ab84:	eba9 040a 	sub.w	r4, r9, sl
 800ab88:	e75c      	b.n	800aa44 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0x78>
            unlockRx();
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	f7ff fec7 	bl	800a91e <_ZN5codal3_cm6Serial8unlockRxEv>
            return ManagedString();
 800ab90:	68b8      	ldr	r0, [r7, #8]
 800ab92:	f7ff fda0 	bl	800a6d6 <_ZN5codal13ManagedStringC1Ev>
 800ab96:	e783      	b.n	800aaa0 <_ZN5codal3_cm6Serial9readUntilENS_13ManagedStringENS_10SerialModeE+0xd4>

0800ab98 <_GLOBAL__sub_I_restart_callback>:
}
 800ab98:	b508      	push	{r3, lr}
 800ab9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ab9e:	2001      	movs	r0, #1
 800aba0:	f7fe f864 	bl	8008c6c <_Z41__static_initialization_and_destruction_0ii>
 800aba4:	bd08      	pop	{r3, pc}

0800aba6 <_ZN5codal13STM32BluePill16periodicCallbackEv>:
    codal_dmesg_flush();
}

void STM32BluePill::periodicCallback() {
    //  TODO
}
 800aba6:	4770      	bx	lr

0800aba8 <_ZN5codal13STM32BluePill12idleCallbackEv>:
void STM32BluePill::idleCallback() {
 800aba8:	b508      	push	{r3, lr}
    codal_dmesg_flush();
 800abaa:	f7fd f81b 	bl	8007be4 <codal_dmesg_flush>
}
 800abae:	bd08      	pop	{r3, pc}

0800abb0 <_ZN13UARTInterfaceC1Ejj>:
}
 800abb0:	4770      	bx	lr

0800abb2 <_GLOBAL__sub_I__ZN13UARTInterfaceC2Ejj>:
}
 800abb2:	b508      	push	{r3, lr}
 800abb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800abb8:	2001      	movs	r0, #1
 800abba:	f7fe ff49 	bl	8009a50 <_Z41__static_initialization_and_destruction_0ii>
 800abbe:	bd08      	pop	{r3, pc}

0800abc0 <_ZN5codal3_cm3I2C12setFrequencyEm>:
#ifdef TODO            
            i2c.Init.ClockSpeed = frequency;
            needsInit = true;
#endif  //  TODO
            return DEVICE_OK;
        }
 800abc0:	2000      	movs	r0, #0
 800abc2:	4770      	bx	lr

0800abc4 <_ZN5codal3_cm3I2C5writeEtPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800abc4:	2000      	movs	r0, #0
 800abc6:	4770      	bx	lr

0800abc8 <_ZN5codal3_cm3I2C4readEtPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800abc8:	2000      	movs	r0, #0
 800abca:	4770      	bx	lr

0800abcc <_ZN5codal3_cm3I2C12readRegisterEthPhib>:
            if (res == HAL_OK)
                return DEVICE_OK;
            else
                return DEVICE_I2C_ERROR;
#endif  //  TODO
        }
 800abcc:	2000      	movs	r0, #0
 800abce:	4770      	bx	lr

0800abd0 <_ZN5codal3_cm3SPI12setFrequencyEm>:

        int SPI::setFrequency(uint32_t frequency) {
            freq = frequency;
 800abd0:	6141      	str	r1, [r0, #20]
            needsInit = true;
 800abd2:	2301      	movs	r3, #1
 800abd4:	f880 3020 	strb.w	r3, [r0, #32]
            return DEVICE_OK;
        }
 800abd8:	2000      	movs	r0, #0
 800abda:	4770      	bx	lr

0800abdc <_ZN5codal3_cm3SPI5writeEi>:
            CODAL_ASSERT(bits == 8);
            return DEVICE_OK;
        }

        int SPI::write(int data) {
            rxCh = 0;
 800abdc:	2300      	movs	r3, #0
 800abde:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
            txCh = data;
 800abe2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
#ifdef TODO
            if (transfer(&txCh, 1, &rxCh, 1) < 0) { return DEVICE_SPI_ERROR; }
#endif  //  TODO
            return rxCh;
        }
 800abe6:	4618      	mov	r0, r3
 800abe8:	4770      	bx	lr

0800abea <_ZN5codal3_cm3SPI8transferEPKhmPhm>:
            LOG("SPI ->");
            schedule();
            LOG("SPI <-");
            return res;
#endif  //  TODO
        }
 800abea:	2000      	movs	r0, #0
 800abec:	4770      	bx	lr

0800abee <_ZN5codal3_cm3SPI7setModeEii>:
        int SPI::setMode(int mode, int bits) {
 800abee:	b508      	push	{r3, lr}
            needsInit = true;
 800abf0:	2301      	movs	r3, #1
 800abf2:	f880 3020 	strb.w	r3, [r0, #32]
            CODAL_ASSERT(bits == 8);
 800abf6:	2a08      	cmp	r2, #8
 800abf8:	d003      	beq.n	800ac02 <_ZN5codal3_cm3SPI7setModeEii+0x14>
 800abfa:	f240 308d 	movw	r0, #909	; 0x38d
 800abfe:	f7f6 fac3 	bl	8001188 <target_panic>
        }
 800ac02:	2000      	movs	r0, #0
 800ac04:	bd08      	pop	{r3, pc}

0800ac06 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap>:
        uint32_t _codal_setup_pin(Pin *p, uint32_t prev, const PinMap *map) {
 800ac06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            if (!p) { return 0; }
 800ac0a:	b310      	cbz	r0, 800ac52 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4c>
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	4614      	mov	r4, r2
 800ac10:	460f      	mov	r7, r1
            auto pin = p->name;
 800ac12:	f890 8010 	ldrb.w	r8, [r0, #16]
            CmPeripheral peri = pinmap_peripheral(pin, map);
 800ac16:	4611      	mov	r1, r2
 800ac18:	4640      	mov	r0, r8
 800ac1a:	f7fe ffb1 	bl	8009b80 <pinmap_peripheral>
 800ac1e:	4606      	mov	r6, r0
            if (peri == CM_PERIPHERAL_NC) { return peri; }
 800ac20:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ac24:	d016      	beq.n	800ac54 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4e>
            auto mode = pinmap_mode(pin, map);
 800ac26:	4621      	mov	r1, r4
 800ac28:	4640      	mov	r0, r8
 800ac2a:	f7fe ffbf 	bl	8009bac <pinmap_mode>
 800ac2e:	4681      	mov	r9, r0
            auto cnf = pinmap_cnf(pin, map);
 800ac30:	4621      	mov	r1, r4
 800ac32:	4640      	mov	r0, r8
 800ac34:	f7fe ffce 	bl	8009bd4 <pinmap_cnf>
            p->setup(mode, cnf);
 800ac38:	4602      	mov	r2, r0
 800ac3a:	4649      	mov	r1, r9
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	f7ff fe15 	bl	800a86c <_ZN5codal3_cm3Pin5setupEhh>
            CODAL_ASSERT(!prev || prev == peri);
 800ac42:	b13f      	cbz	r7, 800ac54 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4e>
 800ac44:	42be      	cmp	r6, r7
 800ac46:	d005      	beq.n	800ac54 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4e>
 800ac48:	f240 308d 	movw	r0, #909	; 0x38d
 800ac4c:	f7f6 fa9c 	bl	8001188 <target_panic>
 800ac50:	e000      	b.n	800ac54 <_ZN5codal3_cm16_codal_setup_pinEPNS0_3PinEmPK6PinMap+0x4e>
            if (!p) { return 0; }
 800ac52:	2600      	movs	r6, #0
        }
 800ac54:	4630      	mov	r0, r6
 800ac56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ac5a <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_>:

        int SPI::startTransfer(const uint8_t *txBuffer, uint32_t txSize, uint8_t *rxBuffer,
                                uint32_t rxSize, PVoidCallback doneHandler, void *arg) {
 800ac5a:	b538      	push	{r3, r4, r5, lr}
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	4615      	mov	r5, r2
            int res = HAL_OK;
            init();
 800ac60:	f7fe ff12 	bl	8009a88 <_ZN5codal3_cm3SPI4initEv>
            ////LOG("SPI start %p/%d %p/%d D=%p", txBuffer, txSize, rxBuffer, rxSize, doneHandler);
            this->doneHandler = doneHandler;
 800ac64:	9b05      	ldr	r3, [sp, #20]
 800ac66:	61a3      	str	r3, [r4, #24]
            this->doneHandlerArg = arg;
 800ac68:	9b06      	ldr	r3, [sp, #24]
 800ac6a:	61e3      	str	r3, [r4, #28]
            if (txSize && rxSize) {
 800ac6c:	b11d      	cbz	r5, 800ac76 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x1c>
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	b10b      	cbz	r3, 800ac76 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x1c>
                CODAL_ASSERT(txSize == rxSize); // we could support this if needed
 800ac72:	429d      	cmp	r5, r3
 800ac74:	d101      	bne.n	800ac7a <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x20>
            } else {
                return 0; // nothing to do
            }
            CODAL_ASSERT(res == HAL_OK);
            return 0;
        }
 800ac76:	2000      	movs	r0, #0
 800ac78:	bd38      	pop	{r3, r4, r5, pc}
                CODAL_ASSERT(txSize == rxSize); // we could support this if needed
 800ac7a:	f240 308d 	movw	r0, #909	; 0x38d
 800ac7e:	f7f6 fa83 	bl	8001188 <target_panic>
 800ac82:	e7f8      	b.n	800ac76 <_ZN5codal3_cm3SPI13startTransferEPKhmPhmPFvPvES5_+0x1c>

0800ac84 <_ZL22pinmap_find_peripheralhPK6PinMap>:

static CmPeripheral pinmap_find_peripheral(codal::PinNumber pin, const PinMap* map) {
    //  Return the peripheral for the pin e.g. SPI1.
    while (map->pin != CM_PIN_NC) {
 800ac84:	780b      	ldrb	r3, [r1, #0]
 800ac86:	2bff      	cmp	r3, #255	; 0xff
 800ac88:	d005      	beq.n	800ac96 <_ZL22pinmap_find_peripheralhPK6PinMap+0x12>
        if (map->pin == pin) { return map->peripheral; }
 800ac8a:	4283      	cmp	r3, r0
 800ac8c:	d001      	beq.n	800ac92 <_ZL22pinmap_find_peripheralhPK6PinMap+0xe>
        map++;
 800ac8e:	310c      	adds	r1, #12
    while (map->pin != CM_PIN_NC) {
 800ac90:	e7f8      	b.n	800ac84 <_ZL22pinmap_find_peripheralhPK6PinMap>
        if (map->pin == pin) { return map->peripheral; }
 800ac92:	6848      	ldr	r0, [r1, #4]
 800ac94:	4770      	bx	lr
    }
    return CM_PERIPHERAL_NC;
 800ac96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800ac9a:	4770      	bx	lr

0800ac9c <_ZL16pinmap_find_modehPK6PinMap>:

static CmPinMode pinmap_find_mode(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin mode for the peripheral e.g. GPIO_MODE_OUTPUT_2_MHZ.
    while (map->pin != CM_PIN_NC) {
 800ac9c:	780b      	ldrb	r3, [r1, #0]
 800ac9e:	2bff      	cmp	r3, #255	; 0xff
 800aca0:	d005      	beq.n	800acae <_ZL16pinmap_find_modehPK6PinMap+0x12>
        if (map->pin == pin) { return map->mode; }
 800aca2:	4283      	cmp	r3, r0
 800aca4:	d001      	beq.n	800acaa <_ZL16pinmap_find_modehPK6PinMap+0xe>
        map++;
 800aca6:	310c      	adds	r1, #12
    while (map->pin != CM_PIN_NC) {
 800aca8:	e7f8      	b.n	800ac9c <_ZL16pinmap_find_modehPK6PinMap>
        if (map->pin == pin) { return map->mode; }
 800acaa:	7a48      	ldrb	r0, [r1, #9]
 800acac:	4770      	bx	lr
    }
    return CM_PINMODE_NC;
 800acae:	20ff      	movs	r0, #255	; 0xff
}
 800acb0:	4770      	bx	lr

0800acb2 <_ZL15pinmap_find_cnfhPK6PinMap>:

static CmPinCnf pinmap_find_cnf(codal::PinNumber pin, const PinMap* map) {
    //  Return the pin config for the peripheral e.g. GPIO_CNF_OUTPUT_PUSHPULL.
    while (map->pin != CM_PIN_NC) {
 800acb2:	780b      	ldrb	r3, [r1, #0]
 800acb4:	2bff      	cmp	r3, #255	; 0xff
 800acb6:	d005      	beq.n	800acc4 <_ZL15pinmap_find_cnfhPK6PinMap+0x12>
        if (map->pin == pin) { return map->cnf; }
 800acb8:	4283      	cmp	r3, r0
 800acba:	d001      	beq.n	800acc0 <_ZL15pinmap_find_cnfhPK6PinMap+0xe>
        map++;
 800acbc:	310c      	adds	r1, #12
    while (map->pin != CM_PIN_NC) {
 800acbe:	e7f8      	b.n	800acb2 <_ZL15pinmap_find_cnfhPK6PinMap>
        if (map->pin == pin) { return map->cnf; }
 800acc0:	7a88      	ldrb	r0, [r1, #10]
 800acc2:	4770      	bx	lr
    }
    return CM_PINCNF_NC;
 800acc4:	20ff      	movs	r0, #255	; 0xff
}
 800acc6:	4770      	bx	lr

0800acc8 <_ZN5codal3I2C12setFrequencyEm>:
  * @param frequency The bus frequency in hertz
  */
int I2C::setFrequency(uint32_t frequency)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800acc8:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800accc:	4770      	bx	lr

0800acce <_ZN5codal3I2C5startEv>:
 * Issues a START condition on the I2C bus
 */
int I2C::start()
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800acce:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800acd2:	4770      	bx	lr

0800acd4 <_ZN5codal3I2C4stopEv>:
 * Issues a STOP condition on the I2C bus
 */
int I2C::stop()
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800acd4:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800acd8:	4770      	bx	lr

0800acda <_ZN5codal3I2C5writeEh>:
* @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
*/
int I2C::write(uint8_t data)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800acda:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800acde:	4770      	bx	lr

0800ace0 <_ZN5codal3I2C4readENS_15AcknowledgeTypeE>:
* @return the byte read from the I2C bus, or DEVICE_I2C_ERROR if the the write request failed.
*/
int I2C::read(AcknowledgeType ack)
{
    return DEVICE_NOT_IMPLEMENTED;
}
 800ace0:	f46f 707d 	mvn.w	r0, #1012	; 0x3f4
 800ace4:	4770      	bx	lr

0800ace6 <_ZN5codal3I2C5writeEtPhib>:
  * @param len the number of bytes to write
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::write(uint16_t address, uint8_t *data, int len, bool repeated)
  {
 800ace6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acea:	f89d 8020 	ldrb.w	r8, [sp, #32]
      if (data == NULL || len <= 0)
 800acee:	b31a      	cbz	r2, 800ad38 <_ZN5codal3I2C5writeEtPhib+0x52>
 800acf0:	4617      	mov	r7, r2
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	dd23      	ble.n	800ad3e <_ZN5codal3I2C5writeEtPhib+0x58>
 800acf6:	4699      	mov	r9, r3
 800acf8:	460c      	mov	r4, r1
 800acfa:	4605      	mov	r5, r0
          return DEVICE_INVALID_PARAMETER; // Send a start condition

      start();
 800acfc:	6803      	ldr	r3, [r0, #0]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	4798      	blx	r3

      // Send the address of the slave, with a write bit set.
      write((uint8_t)address);
 800ad02:	682b      	ldr	r3, [r5, #0]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	b2e1      	uxtb	r1, r4
 800ad08:	4628      	mov	r0, r5
 800ad0a:	4798      	blx	r3

      // Send the body of the data
      for (int i = 0; i < len; i++)
 800ad0c:	2400      	movs	r4, #0
 800ad0e:	454c      	cmp	r4, r9
 800ad10:	da06      	bge.n	800ad20 <_ZN5codal3I2C5writeEtPhib+0x3a>
          write(data[i]);
 800ad12:	6829      	ldr	r1, [r5, #0]
 800ad14:	68ce      	ldr	r6, [r1, #12]
 800ad16:	5d39      	ldrb	r1, [r7, r4]
 800ad18:	4628      	mov	r0, r5
 800ad1a:	47b0      	blx	r6
      for (int i = 0; i < len; i++)
 800ad1c:	3401      	adds	r4, #1
 800ad1e:	e7f6      	b.n	800ad0e <_ZN5codal3I2C5writeEtPhib+0x28>

      // Send a stop condition
      if (!repeated)
 800ad20:	f1b8 0f00 	cmp.w	r8, #0
 800ad24:	d002      	beq.n	800ad2c <_ZN5codal3I2C5writeEtPhib+0x46>
          stop();

      return DEVICE_OK;
 800ad26:	2000      	movs	r0, #0
  }
 800ad28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          stop();
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	4628      	mov	r0, r5
 800ad32:	4798      	blx	r3
      return DEVICE_OK;
 800ad34:	2000      	movs	r0, #0
 800ad36:	e7f7      	b.n	800ad28 <_ZN5codal3I2C5writeEtPhib+0x42>
          return DEVICE_INVALID_PARAMETER; // Send a start condition
 800ad38:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800ad3c:	e7f4      	b.n	800ad28 <_ZN5codal3I2C5writeEtPhib+0x42>
 800ad3e:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800ad42:	e7f1      	b.n	800ad28 <_ZN5codal3I2C5writeEtPhib+0x42>

0800ad44 <_ZN5codal3I2C13writeRegisterEthh>:
  * @param value The value to write.
  *
  * @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the write request failed.
  */
  int I2C::writeRegister(uint16_t address, uint8_t reg, uint8_t value)
  {
 800ad44:	b510      	push	{r4, lr}
 800ad46:	b084      	sub	sp, #16
      uint8_t command[2];
      command[0] = reg;
 800ad48:	f88d 200c 	strb.w	r2, [sp, #12]
      command[1] = value;
 800ad4c:	f88d 300d 	strb.w	r3, [sp, #13]

      return write(address, command, 2);
 800ad50:	6803      	ldr	r3, [r0, #0]
 800ad52:	2200      	movs	r2, #0
 800ad54:	9200      	str	r2, [sp, #0]
 800ad56:	695c      	ldr	r4, [r3, #20]
 800ad58:	2302      	movs	r3, #2
 800ad5a:	aa03      	add	r2, sp, #12
 800ad5c:	47a0      	blx	r4
}
 800ad5e:	b004      	add	sp, #16
 800ad60:	bd10      	pop	{r4, pc}

0800ad62 <_ZN5codal3I2C4readEtPhib>:
* @param len the number of bytes to read into the buffer
*
* @return DEVICE_OK on success, DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::read(uint16_t address, uint8_t *data, int len, bool repeated)
{
 800ad62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad66:	f89d 9020 	ldrb.w	r9, [sp, #32]
    int i = 0;

    if (data == NULL || len <= 0)
 800ad6a:	2a00      	cmp	r2, #0
 800ad6c:	d02f      	beq.n	800adce <_ZN5codal3I2C4readEtPhib+0x6c>
 800ad6e:	4690      	mov	r8, r2
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	dd2f      	ble.n	800add4 <_ZN5codal3I2C4readEtPhib+0x72>
 800ad74:	461f      	mov	r7, r3
 800ad76:	460c      	mov	r4, r1
 800ad78:	4605      	mov	r5, r0
        return DEVICE_INVALID_PARAMETER;

    // Send a start condition
    start();
 800ad7a:	6803      	ldr	r3, [r0, #0]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	4798      	blx	r3

    // Send the address of the slave, with a read bit set.
    write((uint8_t)(address | 0x01));
 800ad80:	682b      	ldr	r3, [r5, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f044 0101 	orr.w	r1, r4, #1
 800ad88:	b2c9      	uxtb	r1, r1
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	4798      	blx	r3

    // Read the body of the data
    for (i = 0; i < len-1; i++)
 800ad8e:	2400      	movs	r4, #0
 800ad90:	1e79      	subs	r1, r7, #1
 800ad92:	42a1      	cmp	r1, r4
 800ad94:	dd08      	ble.n	800ada8 <_ZN5codal3I2C4readEtPhib+0x46>
        data[i] = read();
 800ad96:	6829      	ldr	r1, [r5, #0]
 800ad98:	690e      	ldr	r6, [r1, #16]
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	47b0      	blx	r6
 800ada0:	f808 0004 	strb.w	r0, [r8, r4]
    for (i = 0; i < len-1; i++)
 800ada4:	3401      	adds	r4, #1
 800ada6:	e7f3      	b.n	800ad90 <_ZN5codal3I2C4readEtPhib+0x2e>

    data[i] = read(NACK);
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	2101      	movs	r1, #1
 800adae:	4628      	mov	r0, r5
 800adb0:	4798      	blx	r3
 800adb2:	f808 0004 	strb.w	r0, [r8, r4]

    // Send a stop condition
    if (!repeated)
 800adb6:	f1b9 0f00 	cmp.w	r9, #0
 800adba:	d002      	beq.n	800adc2 <_ZN5codal3I2C4readEtPhib+0x60>
        stop();

    return DEVICE_OK;
 800adbc:	2000      	movs	r0, #0
}
 800adbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        stop();
 800adc2:	682b      	ldr	r3, [r5, #0]
 800adc4:	689b      	ldr	r3, [r3, #8]
 800adc6:	4628      	mov	r0, r5
 800adc8:	4798      	blx	r3
    return DEVICE_OK;
 800adca:	2000      	movs	r0, #0
 800adcc:	e7f7      	b.n	800adbe <_ZN5codal3I2C4readEtPhib+0x5c>
        return DEVICE_INVALID_PARAMETER;
 800adce:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800add2:	e7f4      	b.n	800adbe <_ZN5codal3I2C4readEtPhib+0x5c>
 800add4:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
 800add8:	e7f1      	b.n	800adbe <_ZN5codal3I2C4readEtPhib+0x5c>

0800adda <_ZN5codal3I2C5writeEth>:
  {
 800adda:	b530      	push	{r4, r5, lr}
 800addc:	b085      	sub	sp, #20
 800adde:	ac04      	add	r4, sp, #16
 800ade0:	f804 2d01 	strb.w	r2, [r4, #-1]!
      return write(address, &data, 1);
 800ade4:	6803      	ldr	r3, [r0, #0]
 800ade6:	2200      	movs	r2, #0
 800ade8:	9200      	str	r2, [sp, #0]
 800adea:	695d      	ldr	r5, [r3, #20]
 800adec:	2301      	movs	r3, #1
 800adee:	4622      	mov	r2, r4
 800adf0:	47a8      	blx	r5
  }
 800adf2:	b005      	add	sp, #20
 800adf4:	bd30      	pop	{r4, r5, pc}

0800adf6 <_ZN5codal3I2C12readRegisterEthPhib>:
* @param repeated Use a repeated START/START/STOP transaction if true, or independent START/STOP/START/STOP transactions if fasle. Default: true
*
* @return DEVICE_OK or DEVICE_I2C_ERROR if the the read request failed.
*/
int I2C::readRegister(uint16_t address, uint8_t reg, uint8_t *data, int length, bool repeated)
{
 800adf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adf8:	b085      	sub	sp, #20
 800adfa:	4604      	mov	r4, r0
 800adfc:	460d      	mov	r5, r1
 800adfe:	461e      	mov	r6, r3
 800ae00:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800ae04:	f88d 200f 	strb.w	r2, [sp, #15]
    int result;

    if (repeated)
 800ae08:	b14b      	cbz	r3, 800ae1e <_ZN5codal3I2C12readRegisterEthPhib+0x28>
        result = write(address, &reg, 1, true);
 800ae0a:	6803      	ldr	r3, [r0, #0]
 800ae0c:	695f      	ldr	r7, [r3, #20]
 800ae0e:	2301      	movs	r3, #1
 800ae10:	9300      	str	r3, [sp, #0]
 800ae12:	f10d 020f 	add.w	r2, sp, #15
 800ae16:	47b8      	blx	r7
    else
        result = write(address, reg);

    if (result != DEVICE_OK)
 800ae18:	b130      	cbz	r0, 800ae28 <_ZN5codal3I2C12readRegisterEthPhib+0x32>
    result = read(address, data, length);
    if (result != DEVICE_OK)
        return result;

    return DEVICE_OK;
}
 800ae1a:	b005      	add	sp, #20
 800ae1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        result = write(address, reg);
 800ae1e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800ae22:	f7ff ffda 	bl	800adda <_ZN5codal3I2C5writeEth>
 800ae26:	e7f7      	b.n	800ae18 <_ZN5codal3I2C12readRegisterEthPhib+0x22>
    result = read(address, data, length);
 800ae28:	6823      	ldr	r3, [r4, #0]
 800ae2a:	69df      	ldr	r7, [r3, #28]
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae32:	4632      	mov	r2, r6
 800ae34:	4629      	mov	r1, r5
 800ae36:	4620      	mov	r0, r4
 800ae38:	47b8      	blx	r7
 800ae3a:	e7ee      	b.n	800ae1a <_ZN5codal3I2C12readRegisterEthPhib+0x24>

0800ae3c <_ZTVN5codal14CodalComponentE>:
	...
 800ae44:	789d 0800 9c09 0800 9c0b 0800 7919 0800     .x...........y..
 800ae54:	7931 0800 6573 2074 656c 0064 6174 6772     1y..set led.targ
 800ae64:	7465 7720 6961 0074 6c73 6565 0070 0000     et wait.sleep...
 800ae74:	6f6c 706f 0000 0000 6c73 0070 7420 0020     loop....slp. t .
 800ae84:	202c 6c61 206d 0000                         , alm ..

0800ae8c <_ZTVN5codal6SerialE>:
	...
 800ae94:	789d 0800 9c09 0800 9c0b 0800 0000 0000     .x..............
 800aea4:	0000 0000 22a1 0800 22a1 0800 22a1 0800     ....."..."..."..
 800aeb4:	22a1 0800 22a1 0800 22a1 0800 9f1f 0800     ."..."..."......

0800aec4 <_ZTVN5codal5TimerE>:
	...
 800aecc:	22a1 0800 22a1 0800 a0f5 0800 a0eb 0800     ."..."..........

0800aedc <_ZTVN5codal10EventModelE>:
	...
 800aee4:	84b9 0800 84cd 0800 84d5 0800               ............

0800aef0 <_ZTVN5codal10MessageBusE>:
	...
 800aef8:	a4b5 0800 84dd 0800 a371 0800 a295 0800     ........q.......
 800af08:	878d 0800 a595 0800 fff8 ffff 0000 0000     ................
 800af18:	789d 0800 9c09 0800 9c0b 0800 a58d 0800     .x..............
 800af28:	a5a7 0800                                   ....

0800af2c <_ZL9emptyData>:
 800af2c:	ffff 0000 6970 206e 0000 0000               ....pin ....

0800af38 <_ZTVN5codal3_cm3PinE>:
	...
 800af40:	88ed 0800 a815 0800 a819 0800 88a5 0800     ................
 800af50:	8981 0800 a82d 0800 a831 0800 a83f 0800     ....-...1...?...
 800af60:	a84d 0800 a859 0800 88c5 0800 a803 0800     M...Y...........
 800af70:	a8ab 0800 a809 0800 88cd 0800 88d5 0800     ................
 800af80:	a867 0800 a80f 0800 a8cf 0800               g...........

0800af8c <_ZTVN5codal3_cm6SerialE>:
	...
 800af94:	789d 0800 9c09 0800 9c0b 0800 89f9 0800     .x..............
 800afa4:	8a0d 0800 a8fb 0800 a8ff 0800 a903 0800     ................
 800afb4:	a907 0800 a90b 0800 a90f 0800 a9cd 0800     ................
 800afc4:	7973 636e 2021 0000 6974 656d 2072 6e69     sync! ..timer in
 800afd4:	7469 0000 7274 6769 6567 4972 206e 3462     it..triggerIn b4
 800afe4:	6920 696e 2174 0000                          init!..

0800afec <_ZTVN5codal3_cm5TimerE>:
	...
 800aff4:	8abd 0800 8ae1 0800 a0f5 0800 a0eb 0800     ................
 800b004:	2a2a 202a 7061 2070 7362 2f73 6164 6174     *** app bss/data
 800b014:	6620 6961 656c 2c64 6220 7373 745f 7365      failed, bss_tes
 800b024:	2074 203d 0000 0000 202c 6164 6174 745f     t = ...., data_t
 800b034:	7365 2074 203d 0000 6c66 7375 2068 6174     est = ..flush ta
 800b044:	6b73 0000 6572 7473 7261 2074 6168 646e     sk..restart hand
 800b054:	656c 0072 6572 7473 7261 6974 676e 2e2e     ler.restarting..
 800b064:	002e 0000 6f64 656e 0000 0000 6572 7473     ....done....rest
 800b074:	7261 2074 6163 6c6c 6162 6b63 0000 0000     art callback....
 800b084:	2a2a 202a 5245 4f52 3a52 6d20 7369 6973     *** ERROR: missi
 800b094:	676e 6520 6576 746e 6220 7375 0000 0000     ng event bus....
 800b0a4:	2a2a 202a 5245 4f52 3a52 7520 616e 6c62     *** ERROR: unabl
 800b0b4:	2065 6f74 7320 6e65 2064 6572 7473 7261     e to send restar
 800b0c4:	2074 7665 6e65 2074 0000 0000 6f6e 7320     t event ....no s
 800b0d4:	6863 6465 6c75 7265 202c 7473 7261 2074     cheduler, start 
 800b0e4:	6762 7420 7361 736b 6c20 7461 7265 0000     bg tasks later..
 800b0f4:	7473 7261 2074 6762 7420 7361 736b 0000     start bg tasks..
 800b104:	2a2a 202a 5245 4f52 3a52 6320 6572 7461     *** ERROR: creat
 800b114:	2065 6966 7262 2065 6166 6c69 6465 0000     e fibre failed..
 800b124:	2a2a 202a 5245 4f52 3a52 7520 616e 6c62     *** ERROR: unabl
 800b134:	2065 6f74 6c20 7369 6574 206e 6f66 2072     e to listen for 
 800b144:	6572 7473 7261 2074 7665 6e65 2074 0000     restart event ..
 800b154:	6c62 6575 6970 6c6c 6920 696e 2074 6373     bluepill init sc
 800b164:	6568 7564 656c 0072 6c62 6575 6970 6c6c     heduler.bluepill
 800b174:	6920 696e 2074 6f63 706d 6e6f 6e65 7374      init components
 800b184:	0000 0000 6c62 6575 6970 6c6c 6920 696e     ....bluepill ini
 800b194:	2074 6b6f 0000 0000 6c62 6575 6970 6c6c     t ok....bluepill
 800b1a4:	6320 6e6f 7473 7572 7463 0000                construct..

0800b1b0 <_ZTVN5codal13STM32BluePillE>:
	...
 800b1b8:	8dd1 0800 aba7 0800 aba9 0800 79c5 0800     .............y..
 800b1c8:	7a11 0800                                   .z..

0800b1cc <PinMap_SPI_MISO>:
 800b1cc:	0068 0000 3000 4001 0000 0001 0070 0000     h....0.@....p...
 800b1dc:	3800 4000 0000 0001 0074 0000 3c00 4000     .8.@....t....<.@
 800b1ec:	0000 0001 006c 0000 3000 4001 0001 0001     ....l....0.@....
 800b1fc:	0078 0000 3c00 4000 0001 0001 00ff 0000     x....<.@........
 800b20c:	ffff ffff ff00 00ff                         ........

0800b214 <PinMap_SPI_MOSI>:
 800b214:	0069 0000 3000 4001 0300 0002 0071 0000     i....0.@....q...
 800b224:	3800 4000 0300 0002 0075 0000 3c00 4000     .8.@....u....<.@
 800b234:	0300 0002 006d 0000 3000 4001 0301 0002     ....m....0.@....
 800b244:	0079 0000 3c00 4000 0301 0002 00ff 0000     y....<.@........
 800b254:	ffff ffff ff00 00ff                         ........

0800b25c <PinMap_SPI_NSS>:
 800b25c:	0066 0000 3000 4001 0300 0002 006e 0000     f....0.@....n...
 800b26c:	3800 4000 0300 0002 0072 0000 3c00 4000     .8.@....r....<.@
 800b27c:	0300 0002 006a 0000 3000 4001 0301 0002     ....j....0.@....
 800b28c:	0076 0000 3c00 4000 0301 0002 00ff 0000     v....<.@........
 800b29c:	ffff ffff ff00 00ff                         ........

0800b2a4 <PinMap_SPI_SCK>:
 800b2a4:	0067 0000 3000 4001 0300 0002 006f 0000     g....0.@....o...
 800b2b4:	3800 4000 0300 0002 0073 0000 3c00 4000     .8.@....s....<.@
 800b2c4:	0300 0002 006b 0000 3000 4001 0301 0002     ....k....0.@....
 800b2d4:	0077 0000 3c00 4000 0301 0002 00ff 0000     w....<.@........
 800b2e4:	ffff ffff ff00 00ff                         ........

0800b2ec <_ZTVN5codal3_cm3I2CE>:
	...
 800b2f4:	abc1 0800 accf 0800 acd5 0800 acdb 0800     ................
 800b304:	ace1 0800 abc5 0800 ad45 0800 abc9 0800     ........E.......
 800b314:	abcd 0800 5053 2049 6e69 7473 6e61 6563     ....SPI instance
 800b324:	2520 0070 2a2a 202a 6f63 6164 206c 7073      %p.*** codal sp
 800b334:	2069 6f6d 6973 0020 6d20 7369 206f 0000     i mosi . miso ..
 800b344:	7320 6c63 206b 0000 7073 2069 6f6d 6973      sclk ..spi mosi
 800b354:	0020 0000 6e20 7373 0020 0000                ... nss ...

0800b360 <_ZTVN5codal3_cm3SPIE>:
	...
 800b368:	abd1 0800 abef 0800 abdd 0800 abeb 0800     ................
 800b378:	ac5b 0800 6970 6d6e 7061 6e20 746f 6620     [...pinmap not f
 800b388:	756f 646e 6620 726f 6320 666e 0000 0000     ound for cnf....
 800b398:	6970 6d6e 7061 6e20 746f 6620 756f 646e     pinmap not found
 800b3a8:	6620 726f 6d20 646f 0065 0000 6970 6d6e      for mode...pinm
 800b3b8:	7061 6e20 746f 6620 756f 646e 6620 726f     ap not found for
 800b3c8:	7020 7265 7069 6568 6172 006c                peripheral.

0800b3d4 <_ZTVN5codal3I2CE>:
	...
 800b3dc:	acc9 0800 accf 0800 acd5 0800 acdb 0800     ................
 800b3ec:	ace1 0800 ace7 0800 ad45 0800 ad63 0800     ........E...c...
 800b3fc:	adf7 0800                                   ....
